[{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\nUsing web3.eth.ens library should allow interacting with the ENS Resolver contract with a signed transaction. \r\n\r\n```\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(https://mainnet.infura.io/v3/INFURA_PROJECT_ID));\r\nweb3.eth.accounts.wallet.add(\"privateKey\");\r\nconst account = web3.eth.accounts.wallet[0].address;\r\n\r\nawait web3.eth.ens.setContenthash(ensName, content, {\r\n\t\t\tfrom: account,\r\n\t\t\tgas: 200,000,\r\n\t\t\tgasPrice: w3utils.toWei(gasPrice.toString(), 'gwei'),\r\n\t\t});\r\n```\r\n\r\n\r\n#### Actual behavior\r\n\r\n`Error: Returned error: The method eth_sendTransaction does not exist/is not available`\r\n\r\nInfura doesn't support unsigned transactions (it requires the transaction to be signed and sent as eth_sendRawTransaction). \r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. [First step]\r\n\r\n```\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(https://mainnet.infura.io/v3/INFURA_PROJECT_ID));\r\nweb3.eth.accounts.wallet.add(\"privateKey\");\r\nconst account = web3.eth.accounts.wallet[0].address;\r\n\r\nawait web3.eth.ens.setContenthash(ensName, content, {\r\n\t\t\tfrom: account,\r\n\t\t\tgas: 200,000,\r\n\t\t\tgasPrice: w3utils.toWei(gasPrice.toString(), 'gwei'),\r\n\t\t});\r\n```\r\n\r\n2. [Second step]\r\n3. [and so on...]\r\n\r\n#### Logs\r\n\r\n<!-- Please share any relevant logs that may help us debug your issue. -->\r\n\r\n#### Environment\r\n\r\n<!-- e.g. Versions used of: npm, Node, web3.js, OS, device -->\r\n\r\n\"web3\": \"^1.2.11\",\r\nnode v12.18.3"},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\nThis is an issue that was first mentioned in #3689, but is being separated into it's own issue\r\n\r\n#### Expected behavior\r\n\r\nUser should be able to subscribe, clear subscriptions, and subscribe again\r\n\r\n#### Actual behavior\r\n\r\nUser is able to set up a subscription, but after clearing the subscription via `web3.eth.clearSubscriptions`, user is unable to create another subscription afterwards\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```javascript\r\nconst Web3 = require('web3')\r\n\r\n// const PROVIDER = Web3.givenProvider || \"ws://localhost:8545\"\r\nconst PROVIDER = 'wss://mainnet.infura.io/ws/v3/<token>'\r\n\r\nconst web3 = new Web3(PROVIDER)\r\nlet subscription = web3.eth.subscribe('logs', {}, function(error, result){\r\n    if (!error)\r\n        console.log(result);\r\n});\r\n\r\nweb3.eth.clearSubscriptions()\r\n\r\nsubscription = web3.eth.subscribe('logs', {}, function(error, result){\r\n    if (!error)\r\n        console.log(result);\r\n});\r\n```\r\n\r\nIn the snippet above, the section subscription is never set up as the script appears to hang while executing: `web3.eth.clearSubscriptions()`\r\n\r\n#### Environment\r\n\r\n<!-- e.g. Versions used of: npm, Node, web3.js, OS, device -->\r\n\r\nNPM      -  6.14.4\r\nNode     -  v12.16.2\r\nWeb3.js -  ^1.2.11\r\nOS         -  Ubuntu 19.10"},{"labels":[null,"bug"],"text":"\r\n#### Expected behavior\r\nweb3.eth.clearSubscriptions returns a boolean\r\n#### Actual behavior\r\nweb3.eth.clearSubscriptions returns undefined\r\n#### Steps to reproduce the behavior\r\ninstall web3\r\ninstantiate with infura websockets\r\nlet web3=new Web3(new Web3.providers.WebsocketProvider(process.env.INFURA));\r\ncreate a  subscription with logs\r\nweb3.eth.subscribe('logs', {} ,function(){ ... });\r\n\r\nthen call web3.eth.clearSubscriptions()\r\n#### Logs\r\nNo error just an undefined result. I also do not seem to be able to start web.eth.subscribe again.\r\n<!-- Please share any relevant logs that may help us debug your issue. -->\r\n\r\n#### Environment\r\n\r\nweb3 1.2.11 ,node js version 12.18.3, wsl2 ubuntu 20.04"},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\nCurrently the CI is failing due to [geth-dev-assistant](https://www.npmjs.com/package/geth-dev-assistant) timing out. This is causing all PRs to fail. I've tested the same commands and other ones on a few different machines and experience the exact same issue that the CI is reporting (10 second timeout). "},{"labels":[null,"bug",null],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\nThis relates to #3544.\r\n\r\n#### Expected behavior\r\n\r\nIf I use `web3`<=`1.2.6`, everything works just fine.\r\n\r\n#### Actual behavior\r\n\r\nI get the following error:\r\n\r\n```\r\nError: data out-of-bounds (length=110, offset=128, code=BUFFER_OVERRUN, version=abi/5.0.0-beta.153)\r\n    at Logger.makeError (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/logger/lib/index.js:179:21)\r\n    at Logger.throwError (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/logger/lib/index.js:188:20)\r\n    at Reader._peekBytes (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js:135:20)\r\n    at Reader.readBytes (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js:146:26)\r\n    at StringCoder.DynamicBytesCoder.decode (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/bytes.js:30:23)\r\n    at StringCoder.decode (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/string.js:27:63)\r\n    at /home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/array.js:77:31\r\n    at Array.forEach (<anonymous>)\r\n    at Object.unpack (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/array.js:71:12)\r\n    at TupleCoder.decode (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/coders/tuple.js:39:49)\r\n    at AbiCoder.decode (/home/henrique/labs/web3-getPastEvents-issue/node_modules/@ethersproject/abi/lib/abi-coder.js:93:22)\r\n    at ABICoder.decodeParameters (/home/henrique/labs/web3-getPastEvents-issue/node_modules/web3-eth-abi/src/index.js:347:30)\r\n    at ABICoder.decodeLog (/home/henrique/labs/web3-getPastEvents-issue/node_modules/web3-eth-abi/src/index.js:401:52)\r\n    at Object.Contract._decodeEventABI (/home/henrique/labs/web3-getPastEvents-issue/node_modules/web3-eth-contract/src/index.js:482:31)\r\n    at /home/henrique/labs/web3-getPastEvents-issue/node_modules/web3-core-method/src/index.js:166:57\r\n    at Array.map (<anonymous>)\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Here's the relevant part of the ABI for the contract:\r\n    ```json\r\n    [{\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"name\": \"_metaEvidenceID\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"name\": \"_evidence\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"name\": \"MetaEvidence\",\r\n      \"type\": \"event\"\r\n    }]\r\n    ```\r\n    Here's the link to the smart contract implementation: https://github.com/kleros/kleros-interaction/blob/master/contracts/standard/arbitration/IArbitrable.sol#L27\r\n\r\n    Here's the address of the deployed contract on **Kovan** network: `0x0825f16598AcB518851f8959b8267EF296c57f81`.\r\n\r\n2. Using the following snippet:\r\n    ```js\r\n    const Web3 = require(\"web3\");\r\n    const abi = require(\"./abi.json\");\r\n\r\n    const web3 = new Web3(\r\n      new Web3.providers.HttpProvider(\r\n        `https://kovan.infura.io/v3/${process.env.INFURA_API_KEY}`\r\n      )\r\n    );\r\n    const address = \"0x0825f16598AcB518851f8959b8267EF296c57f81\";\r\n\r\n    const contract = new web3.eth.Contract(abi, address);\r\n\r\n    (async () => {\r\n      const data = await contract.getPastEvents(\"MetaEvidence\", {\r\n        filter: { _metaEvidenceID: \"28\" },\r\n        fromBlock: 0,\r\n      });\r\n    })();\r\n\r\n    ```\r\n\r\n#### Logs\r\n\r\nN/A\r\n\r\n#### Environment\r\n\r\n- `node` @ `10.22.0`\r\n- `web3` @ `1.2.11`\r\n- `yarn` @ `1.22.4`"},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\nThe callback function from `window.ethereum.on('accountsChanged', callbackFunction)` is emitted without errors.\r\n\r\n#### Actual behavior\r\n\r\nThe callback-function is emitted correctly, but the devTools console throws an error:\r\n\r\n```console\r\nUncaught TypeError: Cannot read property 'subscription' of undefined\r\n    at t.exports.data (index.js?176c:105)\r\n    at u (inpage.js:1)\r\n    at t.exports.a.emit (inpage.js:1)\r\n    at a.<anonymous> (inpage.js:1)\r\n    at u (inpage.js:1)\r\n    at a.emit (inpage.js:1)\r\n    at inpage.js:1\r\n    at l.write [as _write] (inpage.js:1)\r\n    at b (inpage.js:1)\r\n    at inpage.js:1\r\n```\r\n\r\nGoing into `index.js?176c:105` shows \r\n\r\n```javascript\r\nif (result.method && _this.subscriptions.has(result.params.subscription)) {\r\n```\r\n\r\nand `result` only holds\r\n\r\n```javascript\r\n{\r\n  \"method\": \"wallet_accountsChanged\",\r\n  \"result\": [\r\n    \"0x88257xxxxxxxx\"\r\n  ]\r\n}\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create an app using ethereum and web3.js\r\n2. Add a method for `window.ethereum.on('accountsChanged', handleAccountsChanged);`\r\n3. Change accounts in MetaMask with the app open\r\n4. See the error in the console\r\n\r\n#### Logs\r\n\r\n<!-- Please share any relevant logs that may help us debug your issue. -->\r\n\r\n#### Environment\r\n\r\nNode: 14.4.0\r\nnpm: 6.14.5\r\nweb3.js: 1.2.11\r\nmacOS: 10.15.5\r\nChrome 84.0.4147.89\r\nMetaMask 8.0.5\r\nChain: trufflesuite/ganache-cli:v6.9.1\r\n\r\n<!-- e.g. Versions used of: npm, Node, web3.js, OS, device -->"},{"labels":[null,"bug"],"text":"Refs: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-requestmanager/src/index.js#L101-L108\r\n\r\n`web3-core-requestmanager` depends on the provider `data` event, and makes assumptions about its state. I'm not sure if this even was ever intended for consumer usage in the misty past, but by now, it's superfluous.\r\n\r\nFor MetaMask providers (`ethereum.isMetaMask && typeof ethereum.request === 'function'`), please use the EIP-1193 `message` event, described in our docs: https://docs.metamask.io/guide/ethereum-provider.html#message\r\n\r\nThe `message` event emits with an object of the form `{ method: string, data: any }`. For `method === 'eth_subscription'`, the result is given as `data.result`."},{"labels":[null,"bug",null],"text":"### Problem\r\n#3608 discovered a bug where [confirmTransaction](https://github.com/ethereum/web3.js/blob/77bd9f9d3ae4d0fbc5c1e1e59871177eb428a878/packages/web3-core-method/src/index.js#L268) doesn't properly handle a re-org. It is most likely occurring within [this code block](https://github.com/ethereum/web3.js/blob/77bd9f9d3ae4d0fbc5c1e1e59871177eb428a878/packages/web3-core-method/src/index.js#L311-L335), because there is no concept of a start/previous block theres no ability to perform a check for inconsistencies between blocks. \r\n\r\n### Potential solution\r\nWe probably want to track a few different things:\r\n- StartBlock - When we began polling\r\n- PreviousBlock - The block that we just checked (Note: this is not `block -1`, we must actually cache the received block)\r\n- IncludedBlock - The block that the transaction was included in\r\n\r\nThis way we can do a check such as (very naive): `currentBlockNumber - PrevioudBlockNumber == 1` to ensure that we're on the sequential chain. We may also want to double check that the `includedBlock` hasn't changed with the incoming `receipt`. Doing those checks could **identify** a reorg took place. To properly account for the number of confirmations the counter, found on line [334](https://github.com/ethereum/web3.js/blob/77bd9f9d3ae4d0fbc5c1e1e59871177eb428a878/packages/web3-core-method/src/index.js#L334) should actually be computed by using `currentBlockNumber - PreviousBlockNumber` so it can reset if there is a re-org. I believe doing that alone, would probably solve this issue, but it might be interesting to see if we want to log a re-org.\r\n\r\nI found an [stackoverflow](https://ethereum.stackexchange.com/questions/1187/how-can-a-dapp-detect-a-fork-or-chain-reorganization-using-web3-js-or-additional) that can be used as inspiration.\r\n\r\ncc: @cgewecke "},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\nWhen the block including the transaction becomes an uncle, the transaction returns to txpool. Next time the transaction is included in a new block, the confirmation number should be reset and count from 0 again. \r\n\r\n#### Actual behavior\r\n\r\nWeb3.js seems to be not aware of the reorg and the confirmation number is not reset and count continuously. \r\n\r\n#### Steps to reproduce the behavior\r\n\r\nI test with this javascript: \r\n```javascript \r\nconst fs = require(\"fs\");\r\n\r\nlet web3 = new Web3(\"http://localhost:8545\");\r\n\r\n\r\nconst keystore = fs.readFileSync(\"my/keystore/file\").toString();\r\n\r\nconst decryptAccount = web3.eth.accounts.decrypt(keystore, \"passphrase\");\r\n\r\nlet rawTransaction = {\r\n    \"from\": \"0x2ecb718297080ff730269176e42c8278aa193434\",\r\n    \"to\": \"0x2ecb718297080ff730269176e42c8278aa193434\",\r\n    \"value\": web3.utils.toHex(web3.utils.toWei(\"0.001\", \"ether\")),\r\n    \"nonce\": 3,\r\n    \"gas\": 200000,\r\n    \"chainId\": 123456,\r\n};\r\n\r\ndecryptAccount.signTransaction(rawTransaction)\r\n    .then(signedTx => {\r\n        web3.eth.sendSignedTransaction(signedTx.rawTransaction)\r\n            .on(\"transactionHash\", console.log)\r\n            // .on(\"error\", console.log)\r\n            // .on(\"receipt\", console.log)\r\n            .on(\"confirmation\", (n, r) => {\r\n                console.log(\"confirmNumber\", n);\r\n            });\r\n    }).catch(console.log);\r\n```\r\n\r\nAs for blockchain, I start two Geth nodes on localhost, one of which opens http endpoint at port 8545. The two nodes are synchronised but not connected in the beginning. After one node receives the transaction, I make it mine 3 blocks `899`,`900`,`901` (because it's hard to control how many blocks is mined using `miner.start()`). The transaction is included in block `899`. And at the same time I make the other node (without the transaction in txpool) mine 5 blocks `899`,`900`,`901`,`902`,`903`. Then the two nodes are connected and synchronised. I can see from console that the block `899` that originally included the transaction becomes uncle and the transaction returns to txpool. \r\n\r\nThen I make the nodes mine blocks again, it mined block `904`, `905`, `906`. Now the transaction is included in block `904`. However web3.js gives these output:\r\n```\r\n0x4b283da019fb0aed959f47ebcb5eb70375eff2175196d6545acbaf566b32ae3d\r\nconfirmNumber 0\r\nconfirmNumber 1\r\nconfirmNumber 2\r\nconfirmNumber 3\r\nconfirmNumber 4\r\nconfirmNumber 5\r\nconfirmNumber 6\r\nconfirmNumber 7\r\n```\r\n\r\n#### Environment\r\nGeth: `1.9.15-stable`\r\nWeb3.js: `1.2.9`\r\nNode.js: `10.21.0`\r\nOS: `macOS`\r\n<!-- e.g. Versions used of: npm, Node, web3.js, OS, device -->"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\nweb3 can be browserified to use in browser\r\n\r\n#### Actual behavior\r\nUncaught SyntaxError: Unexpected identifier in chrome developer console\r\n\r\n#### Steps to reproduce the behavior\r\nbrowserify web3.js and use it in an application\r\n\r\nOpen https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js in an editor that can show files in multiple formats (like notepad++)\r\nSwitch the format to ASCII.\r\nObserve the last 10 lines, start at toTwosComplement.\r\nHere you see multiples instances of Â, which are utf8 characters\r\n```js\r\n    toTwosComplement:Â utils.toTwosComplement,\r\n\r\nÂ Â Â Â isBloom:Â utils.isBloom,\r\nÂ Â Â Â isUserEthereumAddressInBloom:Â utils.isUserEthereumAddressInBloom,\r\nÂ Â Â Â isContractAddressInBloom:Â utils.isContractAddressInBloom,\r\nÂ Â Â Â isTopic:Â utils.isTopic,\r\nÂ Â Â Â isTopicInBloom:Â utils.isTopicInBloom,\r\nÂ Â Â Â isInBloom:Â utils.isInBloom\r\n};\r\n```\r\n \r\n#### Logs\r\n\r\n\r\n#### Environment\r\n\r\nwindows 10, chrome, web3.js 1.2.9, installed via npm install web3"},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\n`abi.encodeParameter` should process BigNumbers in the same way for `uint256` and `uint256[]`\r\n\r\n\r\n#### Actual behavior\r\n\r\nABI coder encodes arrays of BigNumbers incorrectly\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst Web3 = require('web3')\r\nconst web3 = new Web3()\r\n\r\nweb3.eth.abi.encodeParameter('uint256', '123') // 0x00...007b\r\nweb3.eth.abi.encodeParameter('uint256', web3.utils.toBN('123')) // same as above\r\n\r\nweb3.eth.abi.encodeParameter('uint256[]', ['123']) // 0x00..007b\r\nweb3.eth.abi.encodeParameter('uint256[]', [web3.utils.toBN('123')]) // should be the same as above, gives 0x00..0000 instead\r\n\r\n```\r\n\r\n#### Environment\r\n\r\n* web3@1.2.9"},{"labels":[null,null,"bug"],"text":"### 1.2.9 broke `web3.eth.accounts.wallet.decrypt` (works fine in 1.2.8):\r\n\r\n#### Expected behavior\r\n\r\nin the browser (chromium) I can decrypt an encrypted wallet keystore structure.\r\n\r\n#### Actual behavior\r\n\r\nit shows me an the error `TypeError: \"list\" argument must be an Array of Buffers`\r\n\r\n#### Steps to reproduce the behavior\r\n\r\ncall `web3.eth.accounts.wallet.decrypt(jsonKeystore, password);`\r\n\r\n_I've put a demo repo here:_\r\nhttps://github.com/cod1ng-earth/demo-web3-129-breaks-keystore-decryption\r\n\r\n#### Environment\r\n\r\nnode 13 / 14 for building, chrome 83\r\n\r\n#### Background\r\n\r\nI debugged until the failing call that occurs on 1.2.9 on `web3-eth-accounts`, Line 384: https://github.com/ethereum/web3.js/commit/2f366c7a7925be59d6de8cadafa21a441d8b08ae#diff-7bb2a20126193b9ecfe4723f83429c49R384\r\n\r\nThe result of the newly introduced `derivedKey = scrypt.syncScrypt` seems to be related somehow, even though `[derivedKey.slice(16, 32), ciphertext]` is actually an array of two Uint8 arrays (`[Uint8Array(16), Uint8Array(32)]`). After having a look at the scrypt line (`https://github.com/ricmoo/scrypt-js/blob/master/scrypt.js#L462`) I'm absolutely not sure what could go wrong here, so I leave it up to you guys :( \r\n\r\n![Screenshot from 2020-06-11 16-52-01](https://user-images.githubusercontent.com/1344649/84401830-06135b80-ac04-11ea-81f1-72cb1338a23f.png)\r\n"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\nProperties of internal objects of the library should not be `undefined`.\r\n\r\n#### Actual behavior\r\nThe `coders` property of the `coder` variable is `undefined`\r\n\r\n#### Steps to reproduce the behavior\r\nI can't create a simple repo to reproduce it. I can only tell you that the [only thing](https://github.com/uprtcl/js-uprtcl/commit/18f6147c9b8fc9ecfb6bc02e7660508fdca052cd) I changed on my codebase was the version of web3.js. From `1.2.1` to `1.2.8`\r\n\r\n#### Logs\r\nI am trying to send a transaction of which some of its parameters are an of type `tuple[]`. [This line](https://github.com/ethereum/web3.js/blob/740a98258ead66c16b1ec12f3f888baee64694b6/packages/web3-eth-abi/src/index.js#L170) of \r\ncode from `web3.js/packages/web3-eth-abi/src/index.js`\r\n```\r\n     coder.coders.forEach((c, i) => {\r\n```\r\nfails with an error.\r\n```\r\nindex.js:187 Uncaught (in promise) TypeError: Cannot read property 'forEach' of undefined\r\n```\r\n\r\nIf I debug the error I see that the variable coder is\r\n```\r\n> coder\r\nArrayCoder {name: \"array\", type: \"tuple()[]\", localName: null, dynamic: true, coder: TupleCoder, …}\r\ncoder: TupleCoder\r\n    coders: []\r\n    dynamic: false\r\n    localName: null\r\n    name: \"tuple\"\r\n    type: \"tuple()\"\r\n    __proto__: Coder\r\ndynamic: true\r\nlength: -1\r\nlocalName: null\r\nname: \"array\"\r\ntype: \"tuple()[]\"\r\n```\r\n\r\nSo `coder.coders` is `undefined` but `coder.coder.coders` is `[]`;\r\n\r\nBy the way, the `param` variable is\r\n```\r\nparam\r\n[{…}]\r\n0:\r\ncontext: \"genesis-dao-wiki-7930_1590231082784\"\r\nperspective:\r\n    headCid0: \"0xbe9beb848cc43c9dec36499c8a8f2ef73de9ace310592b38f928e50dd0e25869\"\r\n    headCid1: \"0x0000000000000000000000000000000000000000000000000000007a01551220\"\r\n    owner: \"0xffcf8fdee72ac11b5c542428b35eef5769c409f0\"\r\n    perspectiveId: \"zb2rhckLbBQCH9wUWvD4K2itS1wTMC1wRRfVCUEacUhkDutCv\"\r\n```\r\n\r\n#### Environment\r\nworks fine with\r\n```\r\n    \"web3\": \"^1.2.1\",\r\n    \"web3-eth-contract\": \"^1.2.1\",\r\n    \"web3-utils\": \"^1.2.1\"\r\n```\r\n\r\nfails with\r\n```\r\n    \"web3\": \"^1.2.8\",\r\n    \"web3-eth-contract\": \"^1.2.8\",\r\n    \"web3-utils\": \"^1.2.8\"\r\n```\r\n\r\nI am using `\"webpack\": \"^4.10.2\",` to build the frontend app."},{"labels":[null,"bug"],"text":"    const web3ws = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:63116'));\r\n    await web3ws.eth.subscribe('newBlockHeaders');\r\n    await web3ws.eth.clearSubscriptions();\r\nGet following error:\r\n`Cannot read property 'size' of undefined`\r\n`at Eth.RequestManager.clearSubscriptions (node_modules/web3-core-requestmanager/src/index.js:266:28)`\r\n\r\nweb3 1.2.7\r\nts-node 8.7.0\r\nnode 10.18.0"},{"labels":[null,"bug"],"text":"<!--\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I've tried googling or asking my question on stackoverflow.\r\n3. I've tried searching this repository for similar issues.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n```ts\r\n  const web3 = new Web3(null);\r\n  const message = \"🤗\";\r\n  console.log(web3.eth.accounts.hashMessage(message));\r\n  // => 0xd21b04463b76fb09777ca0c59f4de0e02895b0847bf547b3df67ca7b67bb8f66\r\n  console.log(web3.eth.accounts.hashMessage(web3.utils.utf8ToHex(message)));\r\n  // => 0x716ce69c5d2d629c168bc02e24a961456bdc5a362d366119305aea73978a0332\r\n```\r\n\r\n#### Actual behavior\r\nThe two hash values should be the same. \r\n\r\nI think you should use `web3.utils.utf8ToHex` on this line.\r\nhttps://github.com/ethereum/web3.js/blob/4ec98d48096007b113d38f634243cf99df6702cd/packages/web3-eth-accounts/src/index.js#L296\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. `git clone https://github.com/odan-sandbox/eth-ecRecover-compare`\r\n2. `yarn install`\r\n3. `yarn ts-node src/app.ts`\r\n\r\n#### Environment\r\nweb3: 1.2.7\r\nnodejs: 12.11.1"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\nI can connect via Websocket Provider using url with credentials 'wss://USERNAME:PASSWORD@WSS_ENDPOINT'\r\n\r\n#### Actual behavior\r\nReceived TypeError: Illegal invocation\r\n\r\nSeems like 'btoa' `this` isn't pointing to Window object as it should but to WebsocketProvider's object\r\n\r\nNOTE: Binding 'btoa' to Window object in 'helpers.js' solves the issue\r\n`_btoa = btoa.bind(window);`  (web3-providers-ws/src/helpers.js:21)\r\nLocking context with arrow function also works\r\n`_btoa = (str) => btoa(str);` (web3-providers-ws/src/helpers.js:21)\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Try to connect to url type of 'wss://USERNAME:PASSWORD@WSS_ENDPOINT' using WebsocketProvider (web version)\r\n\r\n#### Logs\r\n\r\n> TypeError: Illegal invocation\r\n> new WebsocketProvider\r\n> node_modules/web3-providers-ws/src/index.js:73\r\n> \r\n> 70 | var parsedURL = helpers.parseURL(url);\r\n> 71 | \r\n> 72 | if (parsedURL.username && parsedURL.password) {\r\n> 73 |   this.headers.authorization = 'Basic ' + helpers.btoa(parsedURL.username + ':' + parsedURL.password);\r\n\r\n#### Environment\r\n\r\nweb3.js: 1.2.7\r\nChrome: 81.0\r\nOS: MacOS Catalina (10.15.4 )"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\n\r\nWhen `await web3.eth.send()` result, a timeout error gives a helpful error message. \r\n\r\nIt could say, for example, \r\n\r\n`web3.js waited the transaction for the configured X seconds. However the transaction was not confirmed before the deadline. The transaction receipt waiting process was aborted, but the transaction might be still confirmed. If you wait for longer, you can configure X or connect web3.js using a WebSocket connection` \r\n\r\nAlso, the thrown Error object could contain a special field so that the library consumer can easily check for this condition and gracefully handle this in the user interface.\r\n\r\n#### Actual behavior\r\n\r\nYou get an error message `Failed to subscribe to new newBlockHeaders to confirm the transaction receipt`. \r\n\r\nThis is strictly not true, as one would be able to confirm the error message if the default timeout 750 seconds is not reached.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Have an Ethereum node with HTTPS connection and no support for newBlockHeaders, like Infura\r\n2. Try to send a transaction with a WalletConnect enabled wallet like Trust Wallet or MetaMask Mobile\r\n3. The default 750 seconds limit is often reached under the current Ethereum mainnet conditions and you will see this error in the console\r\n\r\n#### Environment\r\n\r\n- web3.js 1.2.4\r\n- WalletConnect 1.0, \r\n- Trust wallet"},{"labels":[null,"bug",null],"text":"The pattern used in that file looks like:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/3e10668745ddbff8c785351f36754343ec680acf/packages/web3-eth/types/index.d.ts#L295-L298\r\n\r\nThis passes Web3's types tests but as reported in comment [#3248 comment][1], TS complains when making an assignment like:\r\n```ts\r\n// Does not compile\r\nconst a: TransactionReceipt = await sendTransaction(...) \r\n\r\n// This is ok though..\r\nconst a = await sendTransaction(...) \r\n```\r\n\r\nThere's a guide to defining Promise error types [here][2].\r\n\r\n[1]: https://github.com/ethereum/web3.js/pull/3248#issuecomment-621589986\r\n[2]: https://dev.to/_gdelgado/type-safe-error-handling-in-typescript-1p4n\r\n\r\n\r\n"},{"labels":[null,"bug"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I was looking for an solution on stackoverflow or something else.\r\n3. I was looking for an identical issue.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nAn error should be thrown when the max attempts is reached while reconnecting. Next time a method gets called that requires this connection then it should try to reconnect again.\r\n#### Actual behavior\r\nWebSocket continues to try to reconnect until it succeeds. This only happens after the initial connection is successful. When the initial connection fails then the reconnection works as expected\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create Web3 instance using WebSocket provider with the following configuration\r\n```typescript\r\n{\r\n      reconnect: {\r\n        auto: true,\r\n        delay: 1000, // ms\r\n        onTimeout: false,\r\n        maxAttempts: 1\r\n      }\r\n}\r\n```\r\n2. Attempt to get a transaction receipt\r\n3. Observe that the transaction receipt is received \r\n4. Disconnect your internet\r\n5. Attempt to get same transaction receipt\r\n6. Wait for a minute\r\n7. Reconnect internet\r\n8. Observe that the transaction receipt is received\r\n\r\nI noticed that this also happens even when `auto` is set to false. I was expecting to get the following error instead: `Error: CONNECTION TIMEOUT: timeout of 5000 ms achived`\r\n\r\n#### Versions\r\nNode: v12.16.2\r\nWeb3.js: 1.2.7\r\nOS: Ubuntu 18.04.4 LTS\r\n"},{"labels":[null,"bug"],"text":"As reported by @hfa0  in #3190 [comment][1], 1.2.7 introduces a bug where \"error\" and \"end\" listeners directly attached to the Websocket provider aren't firing as expected on close. \r\n\r\nSubscriptions and events **do** have their error handlers fired, and pending requests should also error correctly.\r\n\r\n```javascript\r\nprovider = new Web3.providers.WebsocketProvider(url);\r\nprovider.on('end', () => {\r\n  // not fired\r\n});\r\nprovider.on('error', () => {\r\n  // not fired\r\n});\r\nprovider.on('close', (event) => {\r\n  // event fired\r\n})\r\ncontract.events[type]({ fromBlock }).on('error', (err) => {\r\n  // event fired\r\n})\r\nprovider.disconnect(1012, 'restart');\r\n```\r\n\r\n\r\nThe \"close\" event contains an object lots of information about what happened fwiw:\r\n```js\r\n\"type\": \"close\",\r\n \"isTrusted\": false,\r\n \"_yaeti\": true,\r\n \"code\": 1006,\r\n \"reason\": \"Connection dropped by remote peer.\",\r\n \"wasClean\": false,\r\n  ... etc\r\n```\r\n\r\n[1]: https://github.com/ethereum/web3.js/pull/3190#issuecomment-619438025\r\n\r\nWeb3.js versions: 1.2.7, 1.2.7-rc.0\r\n"},{"labels":[null,"bug"],"text":"When a transaction is sent, web3 chooses to either poll for a receipt, or subscribe to new blocks. However, it makes this decision by checking if `on` is a property of the provider:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/af6472976c23cb61c05e925eebe5734d141384f4/packages/web3-core-method/src/index.js#L515-L521\r\n\r\nThis means if a project is using a provider that includes `on`, such as web3-provider-engine, it will incorrectly try to subscribe. This can cause errors when sending a transaction:\r\n\r\n![image](https://user-images.githubusercontent.com/1661138/77694803-71487c80-6f89-11ea-9093-2e6b793158c4.png)\r\n\r\nThe workaround I've used is to remove `on` from a provider, however I imagine this may break some providers or apps.\r\n\r\n```javascript\r\nconst provider = new ProviderEngine();\r\nprovider.on = null;\r\nconst web3 = new Web3(provider)\r\n```\r\n\r\nI'm not sure what the correct way is to determine whether a provider supports subscriptions is, maybe this needs to be addressed in the provider spec/API?"},{"labels":[null,"bug"],"text":"In the event of an error occurring during a XMLHttpRequest, `onreadystatechange` is called when\r\n- `request.readyState` is `4` \r\n- `request.responseText` is `\"\"`\r\n- `request.status` is `0`\r\n\r\nThe following code that handles http requests does not handle this case, and can return a misleading error to the user when it occurs\r\n\r\nhttps://github.com/ethereum/web3.js/blob/dee72e00883c5a23a47b6d3c1d27304ab1d4922e/packages/web3-providers-http/src/index.js#L87-L125\r\n\r\nLet's pretend a machine has exhausted all of it's ephemeral ports right before web3.js tries to send a request. Here's what happens\r\n1. `HttpProvider.prototype.send` is called\r\n2. The request is crafted\r\n3. `onreadystatechange` and `ontimeout` handlers are assigned\r\n4. `request.send` is called with the payload\r\n5. The request fails before it is even sent to the destination due to there being no ephemeral ports available \r\n6. `request.readyState` is set to `4`, `request.responseText` is set to `\"\"`, `request.status` is set to `0` and the `onreadystatechange` handler is called\r\n7. web3.js tries to parse `\"\"` and throws an error that looks like this\r\n```\r\n  <rejected> Error: Invalid JSON RPC response: \"\"\r\n      at Object.InvalidResponse (/home/liam/spells/web3.js/packages/web3-core-helpers/src/errors.js:42:16)\r\n      at XMLHttpRequest.request.onreadystatechange (/home/liam/spells/web3.js/packages/web3-providers-http/src/index.js:108:32)\r\n      at XMLHttpRequestEventTarget.dispatchEvent (/home/liam/spells/web3.js/packages/web3-providers-http/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:22)\r\n      at XMLHttpRequest._setReadyState (/home/liam/spells/web3.js/packages/web3-providers-http/node_modules/xhr2-cookies/dist/xml-http-request.js:208:14)\r\n      at XMLHttpRequest._onHttpRequestError (/home/liam/spells/web3.js/packages/web3-providers-http/node_modules/xhr2-cookies/dist/xml-http-request.js:349:14)\r\n      at ClientRequest.<anonymous> (/home/liam/spells/web3.js/packages/web3-providers-http/node_modules/xhr2-cookies/dist/xml-http-request.js:252:61)\r\n      at ClientRequest.emit (events.js:210:5)\r\n      at ClientRequest.EventEmitter.emit (domain.js:475:20)\r\n      at Socket.socketErrorListener (_http_client.js:406:9)\r\n      at Socket.emit (events.js:210:5)\r\n      at Socket.EventEmitter.emit (domain.js:475:20)\r\n      at emitErrorNT (internal/streams/destroy.js:92:8)\r\n      at emitErrorAndCloseNT (internal/streams/destroy.js:60:3)\r\n      at processTicksAndRejections (internal/process/task_queues.js:80:21)\r\n\r\n```\r\nthis error is misleading because it indicates that the node successfully received the request and actually returned an empty string in response, when in reality the request never even made it to the node and an empty string is just the default value set on `request` in an error scenario. \r\n\r\nI believe this may be the cause of some other issues people have opened in the past like https://github.com/ethereum/web3.js/issues/3370 and https://github.com/ethereum/web3.js/issues/1919\r\n\r\nI think it makes sense to at least add an `onerror` handler to the `request`, and in the case that a request fails the error thrown indicates that instead of a misleading `InvalidResponse` error.\r\n\r\nI'm working on a PR for this."},{"labels":[null,null,"bug"],"text":"#### Expected behavior\r\nExpected: There's no memory leak in web3-eth.\r\n\r\n#### Actual behavior\r\nActual: There's currently a memory leak in web3-eth right in the `Eth.Contract` constructor because it maintains a list of all instantiated contracts (`Eth.initiatedContracts`) to be able to update e.g. default options, accounts, etc.\r\n\r\nIn a long running process, e.g. a node.js script, this list keeps being appended to and is never cleaned up.\r\n\r\nInstead, these values should be forwarded by reference (e.g. a reference to the Eth instance within each contract) instead of copying them to each contract instance and, in order to be able to do so, maintain a reference to each contract instance.\r\n\r\nImho, the referential relation is upside down (Eth maintain a reference to all Contract instances). It should instead be so that each Contract instance maintains a reference to the Eth instance that created it.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create a web3-eth instance\r\n2. Keep creating contract instances using `new eth.Contract(...)` until you run out of memory.\r\n\r\n#### Versions\r\nhttps://github.com/ethereum/web3.js/tree/2.x\r\n"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\n\r\nGiven a ENS name that has an associated content, I should be able to receive the content hash when I call the web3.eth.ens.getContent('myName');\r\n\r\n#### Actual behavior\r\n\r\nI run this code (in typescript)\r\n\r\n```typescript\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(\r\n   \"https://mainnet.infura.io/v3/my-infura-key\"\r\n));\r\nweb3.eth.ens.getContent('luca.cervone.eth')\r\n   .then((result: String) => {\r\n      console.log(result);\r\n   }).catch((error: Error) => {\r\n      console.log(error);\r\n   });\r\n```\r\n\r\nThe above code returns the following error: \r\n\r\n```console\r\nUncaught (in promise) Error: Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.\r\n    at ABICoder.decodeParameters (index.js?bbaf:239)\r\n    at Contract._decodeMethodReturn (index.js?d100:557)\r\n    at Method.outputFormatter (index.js?d100:910)\r\n    at Method.formatOutput (index.js?6248:167)\r\n    at sendTxCallback (index.js?6248:596)\r\n    at eval (index.js?176c:147)\r\n    at XMLHttpRequest.request.onreadystatechange (index.js?8148:110)\r\n```\r\n\r\nI attach a screenshot  proving that the name as an associated content \r\n\r\n<img width=\"1379\" alt=\"Schermata 2020-02-25 alle 11 11 45\" src=\"https://user-images.githubusercontent.com/3637606/75237462-a9f50a80-57bf-11ea-8213-ad42042305ee.png\">\r\n"},{"labels":[null,"bug"],"text":"Maybe I am facing the same issue as described here: https://github.com/ethereum/web3.js/issues/3379.\r\n\r\n**Current behaviour**\r\nWhen I am subscribed I get only events from last block. Eg if there are events in block 0,1,2,3 and I set `fromBlock`: 0 and the current block is 3 I get only events from block 3 and not from 0.\r\n\r\n**Expected behaviour**\r\nOnce I am subscribed and I specify `fromBlock`: 0, I should get all events from block 0, 1 ... latest.\r\n\r\n\r\n I've created the [post on stackoverflow](https://ethereum.stackexchange.com/questions/80029/web3js-events-fromblock-0-doesnt-work) as well so more details about the problem I am facing is described [here](https://ethereum.stackexchange.com/questions/80029/web3js-events-fromblock-0-doesnt-work).\r\n\r\nI am using `WebsocketProvider` and `quorum-v2.4.0` and `web3js 1.2.6`. So I am connected like this:\r\n```javascript\r\nconst web3 = new Web3(\"ws://127.0.0.1:23000\"); \r\n```\r\n \r\nWhen I create subscription for my contract it looks like below. I specify `fromBlock` because I want to get all events from block 0 when I am creating subscription.\r\n\r\n```javascript\r\n contract.events.Transfer({\r\n    fromBlock: 0,\r\n  })\r\n    .on(\"connected\", function (x) {\r\n      // do somethinng\r\n    })\r\n    .on('data', function (x) {\r\n      // do somethinng\r\n    })\r\n    .on('error', function (x) {\r\n      // do somethinng\r\n    });\r\n```\r\n\r\nHowever it doesn't return events from block 0 even though there are some events. It returns only the events from last block. So if current block is 10 and there was an event in block 9 it returns only this event but doesnt return event from block 8,7,6...0.\r\n\r\nAfter some time of investigating the issue I have found there is a weird part of the implementation in [subscription.js](https://github.com/ethereum/web3.js/blob/c20bcf09b04f773406ce3532e88fd105bb04e244/packages/web3-core-subscriptions/src/subscription.js#L246) where `fromBlock` is removed with `delete` keyword. Check the snipped from `subscription.js` below.\r\n\r\n```javascript\r\n    // create subscription\r\n    // TODO move to separate function? so that past logs can go first?\r\n\r\n    if(typeof payload.params[1] === 'object')\r\n        delete payload.params[1].fromBlock;\r\n```\r\n\r\nSince this code deletes the`fromBlock` from params it is missing in [WebsocketProvider.prototype.send](https://github.com/ethereum/web3.js/blob/c20bcf09b04f773406ce3532e88fd105bb04e244/packages/web3-providers-ws/src/index.js#L286).\r\n\r\nBecause of this delete part the payload in send function in `WebsocketProvider` doesnt call RPC with `fromBlock` parameter (request is without `fromBlock`) and I assume it is considered as `latest` so it doesn't return events from past:\r\n\r\nAfter deleting `fromBlock` param the request looks like this:\r\n\r\n```javascript\r\n{\r\n   \"jsonrpc\":\"2.0\",\r\n   \"id\":1,\r\n   \"method\":\"eth_getLogs\",\r\n   \"params\":[\r\n      {\r\n         \"topics\":[\r\n            \"0xddf2....\",\r\n            null,\r\n            null\r\n         ],\r\n         \"address\":\"0x9d13....\"\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\nWhen I comment out the part where `fromBlock` is being deleted the payload is:\r\n\r\n```javascript\r\n{\r\n   \"jsonrpc\":\"2.0\",\r\n   \"id\":1,\r\n   \"method\":\"eth_getLogs\",\r\n   \"params\":[\r\n      {\r\n         \"fromBlock\":\"0x0\",\r\n         \"topics\":[\r\n            \"0xdd...\",\r\n            null,\r\n            null\r\n         ],\r\n         \"address\":\"0x9d...\"\r\n      }\r\n   ]\r\n}\r\n```\r\n\r\nand this second example correctly returns the events from block 0 not only the new.\r\n\r\n"},{"labels":[null,"bug",null,null],"text":"\r\n\r\n#### Expected behavior\r\n\r\nBuild web3 with typescript without errors\r\n\r\n#### Actual behavior\r\n\r\n```\r\nnode_modules/web3-core/types/index.d.ts(31,23): error TS2307: Cannot find module 'bignumber.js'.\r\nnode_modules/web3-eth/types/index.d.ts(51,25): error TS2307: Cannot find module 'bignumber.js'.\r\n```\r\n\r\nsee this Github Action to reproduce, logs, and configuration \r\nhttps://github.com/dapplion/web3-tsc-test/runs/461815145\r\n\r\n"},{"labels":[null,"bug"],"text":"Hi all,\r\n\r\n`1.2.4` (and/or its dependencies, e.g. any-promise) seems to have dependencies on \"window\" instead of \"self\" which prevents it working in a Web Worker context.\r\n\r\nWhen I've tried `importScripts` in a Web Worker using `web3.js` instead of `web3.min.js` from the node module i can see the `window is not defined` error being thrown when `register-shim` is being loaded; this is a file inside `any-promise`, and the `any-promise` library is used by `web3-core-promievent` in the current version.\r\n\r\nThe `loadImplementation()` inside `register-shim.js` is attempting to grab `window.Promise` when there is no `window`:\r\n```\r\n/**\r\n * Browser specific loadImplementation.  Always uses `window.Promise`\r\n *\r\n * To register a custom implementation, must register with `Promise` option.\r\n */\r\nfunction loadImplementation(){\r\n  if(typeof window.Promise === 'undefined'){\r\n    throw new Error(\"any-promise browser requires a polyfill or explicit registration\"+\r\n      \" e.g: require('any-promise/register/bluebird')\")\r\n  }\r\n  return {\r\n    Promise: window.Promise,\r\n    implementation: 'window.Promise'\r\n  }\r\n}\r\n```\r\n\r\nIt is possible to work around this by setting `window` as `self` first before the `importScripts` statements so that it has the correct environment (effectively tricking `any-promise` under the hood while loading to treat the worker as `window`:\r\n\r\n```\r\nvar window = self;\r\nimportScripts(/*path to web 3 goes here*/);\r\n```\r\n\r\nhowever, there is still an issue of passing/accessing the current provider details to the web worker environment, as there's no way to access this information from the browser instance of web3. It is also not ideal having to create an entirely new instance of web3 inside the web worker instead of using an existing one.\r\n\r\nRelated: #2211 #1774\r\nRelated: https://ethereum.stackexchange.com/questions/56405/integrating-web3-from-metamask-in-react"},{"labels":[null,"bug"],"text":"See https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/index.js#L238.\r\n\r\nThe inner `signed` function returns from that `try` block, but instead it seems like it should assign the object to `result`. In the case that `return` is reached then L252 is not executed. That's what I was running into in #3281 — I finally realized when stepping through `signTransaction` in vscode's debugger.\r\n\r\n---\r\n\r\nThere is another concern I have about `web3.eth.accounts.signTransaction`, and I'm not sure how many other function throughout the web3 codebase may be in the same situation. While I'll explain it here, my guess is there should be another issue to discuss the matter more specifically.\r\n\r\nSo, `signTransaction` can take a callback, and if none is provided it sets up a dummy callback (cf. L134). However, it always both calls the callback and returns a promise. That's really not good 💣 💥 , but there may be something I've misunderstood so I'm hoping the web3 team can provide feedback on this point.\r\n\r\nThe implication is that callers that want to use a callback also need to guard against unhandled promise rejections at their call sites, and they should not need to do that. In other words, if I'm passing `(err, val) => {...}` as the callback then handling of the error should be total with respect to the callback and it should not be necessary to do:\r\n\r\n```js\r\nweb3.eth.accounts.signTransaction(..., callback).catch(...)\r\n```\r\n\r\nWhen implementing functions that optionally take a Node.js style callback as the last argument and otherwise return a promise, it might be good to implement with Node's [`callbackify`](https://nodejs.org/docs/latest-v10.x/api/util.html#util_util_callbackify_original) ([src](https://github.com/nodejs/node/blob/94365f0c1980a48b156899705a18bbd390e933f0/lib/util.js#L340-L365)), or the [callbackify](https://www.npmjs.com/package/callbackify) package may be even better since it handles *\"callback-mode vs. promise-mode\"* internally while with Node's built-in `callbackify` you have to do that yourself.\r\n\r\nThe main idea is to author all functions/methods that do something asynchronous with a \"promise first\" mentality.  And then consistently provide for callback usage by passing them through callbackify. When used in callback-mode the function/method always returns `undefined` and err/val handling is total with respect to the callback (which is never called immediately, also very important); while in promise-mode a promise is always returned and the caller needs to use it with `await` or `.then`/`.catch`.\r\n\r\n#### Versions\r\nweb3 1.2.4"},{"labels":[null,"bug"],"text":"There is #2933 with exactly same issue i am experiencing.\r\nTurns out that \r\n`method.extraFormatters.receiptFormatter()` in web3-core-method throws <b>\"Error: Returned values aren't valid, did it run Out of Gas?\"</b>\r\n\r\nI am able to fix it by indexing arguments in same order but it is something that we are not willing to do. \r\n\r\nPlease investigate as it seems like that problem was fixed in the past.\r\n\r\nweb3 1.2.4 \r\ntruffle 5.1.3 "},{"labels":[null,null,null,"bug"],"text":"I've installed `web3@1.2.4` with `npm install`.\r\nI copied the file `node_modules/web3/dist/web3.min.js` into my web app.\r\nI'm loading the file with:\r\n\r\n    <script type=\"text/javascript\" src=\"js/web3.min.js\"></script>\r\n\r\nIn the browser console (Chrome 70+), I see this error:\r\n\r\n    Uncaught ReferenceError: require is not defined\r\n        at web3.js:1\r\n"},{"labels":[null,"bug"],"text":"This call should never give an error.\r\n\r\nhttps://web3js.readthedocs.io/en/v1.2.0/web3-eth-subscribe.html#clearsubscriptions\r\n```\r\nweb3.eth.clearSubscriptions()\r\n```\r\nGives this error:\r\n```\r\n    Object.keys(this.subscriptions).forEach(function(id){\r\n           ^\r\n\r\nTypeError: Cannot convert undefined or null to object\r\n    at Function.keys (<anonymous>)\r\n```\r\nrun this:\r\n```\r\nconst ep = 'wss://goerli.infura.io/ws/v3/<XXX>'\r\nconst Web3 = require('web3')\r\nconst web3ws = new Web3(\r\n  new Web3.providers.WebsocketProvider( ep )\r\n)\r\nweb3ws.eth.clearSubscriptions()\r\n```"},{"labels":[null,"bug"],"text":"#### Expected behavior\r\n\r\nAccording to the documentation here: https://web3js.readthedocs.io/en/v1.2.0/web3-eth.html#defaultblock\r\n\r\ndefaultBlock can be set to string like 'latest' or Number, it gives the example below:\r\n\r\n// set the default block\r\nweb3.eth.defaultBlock = 231;\r\n\r\n#### Actual behavior\r\n\r\nWhen you next make call you will get error: \r\n```\r\ninvalid argument 1: json: cannot unmarshal number into Go value of type string\r\n```\r\nSee code at bottom.\r\n\r\nProblem is you must supply Hex String of Number, so the following will work:\r\n\r\n```\r\n  const latestBlock = await web3.eth.getBlockNumber()\r\n  web3.eth.defaultBlock = web3.utils.numberToHex( latestBlock - 1 )\r\n```\r\n\r\nSo either, change documentation, or change something else I think.\r\n\r\n#### js code to reproduce the behavior\r\n```\r\nconst w3provider = 'wss://goerli.infura.io/ws/v3/<SECRETKEY>'\r\nconst Web3 = require('web3')\r\nconst web3 = new Web3(\r\n  new Web3.providers.WebsocketProvider(w3provider)\r\n)\r\n;\r\n( async () => {\r\n  const latestBlock = await web3.eth.getBlockNumber()\r\n  web3.eth.defaultBlock = latestBlock - 1\r\n  const accountBal = await web3.eth.getBalance( '0x1addbb6462cb45c91f0dd116c6480aa586de0a29' )\r\n  console.log(`(${accountBal})`)\r\n})()\r\n```"},{"labels":[null,"bug",null],"text":"#### Description\r\n\r\nInstalling on Node `v13.0.1` fails. It seems to be failing because of two reasons:\r\n\r\n`node-gyp` failed to build the `keccak@1.4.0` package and the `sha3@1.2.3` package.\r\n\r\n## Keccak\r\n\r\nThis is a problem that seems to persist even if you use the latest version of keccak (i.e. `2.0.0`).\r\n\r\n## Sha3\r\n\r\nThis problem doesn't exist if we use the latest `sha3` package (i.e. `2.0.7`).\r\n\r\nIf you just type `npm install sha3`, everything works fine. But if you type `npm install sha3@1.2.3`, you'll get the same error (as you'd get when trying to install Web3.js).\r\n\r\n#### Expected behavior\r\n\r\nShould install without errors.\r\n\r\n#### Actual behavior\r\n\r\nInstall fails, see error below.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Make sure you are on Node v13 (i.e. `v.13.0.1` in my testing)\r\n2. In a fresh NPM project folder, run `npm install web3`\r\n\r\n#### Error Logs \r\n\r\nSee gist here: https://gist.github.com/adrianmcli/434d60842c70f8829faa445a3d0fa9e6\r\n\r\n### Versions \r\n* web3.js: `v1.2.2`\r\n* nodejs: `13.0.1`"},{"labels":[null,"bug",null],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nIn 1.2.2, perfect gas throws an error. This problem was introduced in #3123.  It looks like the modified logic is meant to handle pre-byzantium chain behavior where `gasUsed === gasSent` is a signal that the transaction was reverted. [Post-byzantium][2], the `status` field on the receipt is  a more definitive check. There are also gas refunds which may make these estimates less useful overall.\r\n\r\nPerhaps there should be some community discussion about how to address this. Is there agreement that the estimates are imperfect and `estimate + something` should always be provided? If so, perhaps a docs clarification is all that is required.\r\n\r\nConversely, the change could be see as de-facto breaking and reverted on those grounds. \r\n\r\n@gabmontes What is your view of this? Could you provide more background on what execution contexts this gas check is necessary for? \r\n\r\n[2]: https://github.com/ethereum/wiki/wiki/Byzantium-Hard-Fork-changes\r\n\r\n#### Actual behavior\r\n```javascript\r\nvar estimate = await instance\r\n  .methods\r\n  .setValue('1')\r\n  .estimateGas();\r\n\r\nvar receipt = await instance\r\n  .methods\r\n  .setValue('1')\r\n  .send({from: accounts[0], gas: estimate});\r\n\r\n\r\n> Error: Transaction ran out of gas. Please provide more gas:\r\n{\r\n  \"transactionHash\": \"0x5ac5cd5c927fb5fc379ef08ab76d901e04ff39d479c626574cfefe36ba88cbd0\",\r\n  \"transactionIndex\": 0,\r\n  \"blockHash\": \"0x9b7bd2b531e94862ba99ed69771bbe4098f87ca729e1209f9eacef30c6aa3857\",\r\n  \"blockNumber\": 2,\r\n  \"from\": \"0x27ca018a8ab7e7661a596077633e4d5026a571b1\",\r\n  \"to\": \"0xe63685170cd157a1d4dad3e3dd65df9fd44ad6a9\",\r\n  \"gasUsed\": 41728,\r\n  \"cumulativeGasUsed\": 41728,\r\n  \"contractAddress\": null,\r\n  \"status\": true,\r\n  \"logsBloom\": \"0x000..00\",\r\n  \"v\": \"0x1c\",\r\n  \"r\": \"0x23d539bb02df7fbbc99c4ee8901dd6149fd5c812176990fbba868bc2b5e0dfee\",\r\n  \"s\": \"0x7aef125f4f79a66f8253733c306c333bec9fcbe38d1a2623192bf0c702d44674\",\r\n  \"events\": {}\r\n}\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.2.2\r\n* nodejs:\r\n* browser:\r\n* ethereum node:\r\n"},{"labels":[null,null,"bug"],"text":"### Description\r\nError \"Uncaught ReferenceError: regeneratorRuntime is not defined\" occurred when calling a smart contract function. The error shows in the developer console.\r\n\r\n#### Expected behavior\r\nNo error\r\nNote: with a browserified version of web3.js 1.2.1 this error doesn't occur\r\n\r\n#### Actual behavior\r\nAn error is shown in the developer console\r\n\r\n#### Workaround\r\nA workaround is to include polyfill.min.js:\r\n```JS\r\n<script src=\"https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js\"></script> \r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n```JS\r\nnpm install web3\r\n```\r\nUse chrome and metamask on rinkeby network to load following html page:\r\n```JS\r\n<html>\r\n    <head>\r\n        <script src=\".........../node_modules/web3/dist/web3.min.js\"></script>               \r\n    </head>\r\n<body>\r\n<script>   \r\n    async function asyncloaded() { \r\n        await ethereum.enable();\r\n        web3 = new Web3(Web3.givenProvider);\r\n        var ERC777ABI = [{\"constant\": false,\"inputs\": [{\"internalType\": \"address\",\"name\": \"recipient\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],        \"name\": \"send\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"}];\r\n        const ERC777 = new web3.eth.Contract(ERC777ABI, \"0x51a8e7fEC5639Eb6861a674E4F46148561d5c5c6\");  // rinkeby\r\n        accounts=await web3.eth.getAccounts();        \r\n        var result = await ERC777.methods.send(accounts[0],1,\"0x77\").send({from: accounts[0]});\r\n    }\r\n    window.addEventListener('load', asyncloaded);  \r\n    </script>     \r\n</body>\r\n</html>\r\n```\r\nThe deployed smart contact is an ERC777 contract.\r\n#### Error Logs\r\n8inpage.js:1 Uncaught ReferenceError: regeneratorRuntime is not defined\r\n    at web3.min.js:1\r\n    at n (web3.min.js:1)\r\n    at web3.min.js:1\r\n    at Array.forEach (<anonymous>)\r\n    at Object.callback (web3.min.js:1)\r\n    at MetamaskInpageProvider.<anonymous> (web3.min.js:1)\r\n    at u (inpage.js:1)\r\n    at MetamaskInpageProvider.a.emit (inpage.js:1)\r\n    at a.<anonymous> (inpage.js:1)\r\n    at u (inpage.js:1)\r\n#### Gists\r\n \r\n\r\n### Versions\r\n* web3.js: 1.2.2\r\n* nodejs:\r\n* browser: Chrome\r\n* ethereum node:\r\n* metamask 7.3.1\r\n\r\n<!--- "},{"labels":[null,"bug"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nThis error is reported in details at issue #1916.\r\n\r\nUsers mention the fact that it dates back as far as v1.0.0-beta.35 or v1.0.0-beta.36.\r\n\r\nI know for a fact that it doesn't occur at v1.0.0-beta.34.\r\n\r\nIt was supposedly fixed at PR #2608 for v2.0.0-alpha.1 and v1.0.0-beta.52.\r\n\r\nUnfortunately, it doesn't seem to be fixed on v1.2.1.\r\n\r\n#### Expected behavior\r\n\r\nCalling a method which is viable in the ABI but not in the bytecode, should result with an error-message starting with ` Couldn't decode`.\r\n\r\nFor example: ` Couldn't decode uint16 from ABI: 0x`.\r\n\r\nAFAIK, this error is routed all the way from the provider itself (rather than being generated by the web3 client code).\r\n\r\n#### Actual behavior\r\n\r\nCalling a method which is viable in the ABI but not in the bytecode, results with an error-message `Returned values aren't valid, did it run Out of Gas?`, which is implemented in function `ABICoder.prototype.decodeParameters` (as part of the web3 client code).\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nInstall either web3 1.0.0-beta.34 or web3 1.2.1, and run the following script via NodeJS:\r\n```\r\nconst Web3 = require(\"web3\");\r\n\r\nasync function test() {\r\n    const web3 = new Web3(\"https://mainnet.infura.io\");\r\n    const abi = JSON.parse('[{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]');\r\n    const address = \"0x5894110995b8c8401bd38262ba0c8ee41d4e4658\";\r\n    const contract = new web3.eth.Contract(abi, address);\r\n    try {\r\n        await contract.methods.connectorTokenCount().call();\r\n    }\r\n    catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}\r\n\r\ntest();\r\n```\r\n\r\nWith web3 1.0.0-beta.34, the error message is `Couldn't decode uint16 from ABI: 0x`.\r\n\r\nWith web3 1.2.1, the error message is `Returned values aren't valid, did it run Out of Gas?`.\r\n\r\nAgain, I think that the former is generated on the Web3 provider side (i.e., by the node), while the latter is generated by the Web3 client (i.e., in web3.js code).\r\n\r\nHence I believe that the former is desirable while the latter isn't.\r\n\r\nThanks\r\n\r\n### Versions \r\n* web3.js: v1.2.1\r\n* nodejs: v10.16.0\r\n* browser: N/A\r\n* ethereum node: https://mainnet.infura.io\r\n"},{"labels":[null,null,"bug"],"text":"#### Description\r\nI tried to get value from mapping in smart contract, so by convention I tried to hash key and slot together to get location for call `getStorageAt` function. However signature of `getStorageAt` receive number as location, but hash value is too big to cast to number, so I cannot get storage in mapping by using web3.js. \r\n\r\n\r\n#### Expected behavior\r\n```\r\nconst mapBase = new BN(\r\n   web3.utils.soliditySha3(\r\n      { type: 'address', value: dataSource },\r\n      { type: 'uint256', value: '1' },\r\n   ),\r\n)\r\nweb3.eth.getStorageAt(this.tcdAddress, newLocation)\r\n```\r\n\r\n\r\n#### Actual behavior\r\nThis code can't compile and if I casted it to number, It doesn't work.\r\n\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.52\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,"bug"],"text":"### Description <!-- In plain words, what happened -->\r\n![스크린샷 2019-10-02 오후 5 54 53](https://user-images.githubusercontent.com/7420198/66031195-dc1a7d00-e53d-11e9-8b87-a4e7423025d7.png)\r\n\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nI get an error periodically.\r\n\r\nmaybe\r\n\r\nweb3.eth.getBalance or web.eth.getBlock .. etc\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n\r\n\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3('ws://' + serverList[0].host + \":\" + serverList[0].port);\r\nvar endBlockNumber = await web3.eth.getBlockNumber();\r\n-> Error. Can't get BlockNumber.\r\n\r\nOr \r\n\r\n\t\tvar amounts = await web3.eth.getBalance('0xFD2ACe8086F9FeF3da294Cc69b4750D59bd3C61A');\r\n\r\n-> Error.\r\n\r\nBut sometimes Success...\r\n\r\nPlease Help me.. \r\n\r\nI'm crazing...\r\n\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* nodejs: v10.16.3\r\n* browser: experess.\r\n\r\n\r\n"},{"labels":[null,"bug",null],"text":"I want to install webjs so I run the below command but it is showing an error on Ubuntu OS.      \r\n    \r\n>$ sudo npm install -g web3\r\n    \r\n    npm ERR! path git\r\n    npm ERR! code ENOENT\r\n    npm ERR! errno ENOENT\r\n    npm ERR! syscall spawn git\r\n    npm ERR! enoent Error while executing:\r\n    npm ERR! enoent undefined ls-remote -h -t ssh://git@github.com/web3-js/WebSocket-Node.git\r\n    npm ERR! enoent \r\n    npm ERR! enoent \r\n    npm ERR! enoent spawn git ENOENT\r\n    npm ERR! enoent This is related to npm not being able to find a file.\r\n    npm ERR! enoent \r\n\r\n    npm ERR! A complete log of this run can be found in:\r\n    npm ERR!     /home/nithin/.npm/_logs/2019-09-18T09_41_14_857Z-debug.log\r\n"},{"labels":[null,"bug"],"text":"Hi everyone!\r\nI get this error message:\r\n\r\nconnection not open on send() \r\n\r\nwith version: 1.2.1\r\n\r\nAfter long running of my dApp on https://1inch.exchange"},{"labels":[null,null,"bug"],"text":"### Description \r\n`toHex` function returns wrong values if it was used during `nuxt` server side rendering.\r\nSee [this](https://github.com/peppersec/web3_toHex_bug/blob/master/pages/index.vue#L65) demo project to reproduce the issue. Deployed version is [here](https://peppersec.github.io/web3_toHex_bug/)\r\n\r\n#### Expected behavior\r\n```\r\nconst toX = Web3Utils.toHex(n1)\r\nconsole.log('toX', toX)\r\n// 0xfbe43c36a80e36d7c7c584d4f8f3759fb51f0d66065d8a227b688d12488c5d4\r\n```\r\n\r\n#### Actual behavior\r\n```\r\nconst toX = Web3Utils.toHex(n1)\r\nconsole.log('toX', toX)\r\n// 0x2266626534336333366138306533366437633763353834643466386633373539666235316630643636303635643861323237623638386431323438386335643422\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n1. `yarn` \r\n2. `yarn generate`\r\n3. `cd dist`\r\n4. `python -m SimpleHTTPServer 8088`\r\n5. open up js console in localhost:8088 and notice that there are incorrect `toHex` results\r\n```\r\nn1 7120861356467848435263064379192047478074060781135320967663101236819528304084\r\ntoX 0x2266626534336333366138306533366437633763353834643466386633373539666235316630643636303635643861323237623638386431323438386335643422\r\n```\r\n\r\nif you do `yarn dev -o` you will see that `toHex` is working as expected\r\n\r\n```\r\nn1 7120861356467848435263064379192047478074060781135320967663101236819528304084\r\ntoX 0xfbe43c36a80e36d7c7c584d4f8f3759fb51f0d66065d8a227b688d12488c5d4\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* nodejs: 11\r\n* browser: chrome\r\n\r\n![image](https://user-images.githubusercontent.com/11399003/64740014-977e6180-d4fc-11e9-924a-950406b6e102.png)\r\n"},{"labels":[null,"bug"],"text":"### Description <!-- In plain words, what happened -->\r\nIncluding dist/web3.min.js on a page causes error in console `ReferenceError: regeneratorRuntime is not defined`. This is the downloaded source from releases.\r\n\r\n#### Expected behavior\r\nThere will be no errors when including the file.\r\n\r\n#### Actual behavior\r\nError shows up in console `ReferenceError: regeneratorRuntime is not defined`. Web3 does not work.\r\n\r\n#### Steps to reproduce the behavior\r\nCreate html file. Put this script tag in:\r\n`<script type=\"text/javascript\" src=\"web3.min.js\"></script>`\r\n\r\n#### Error Logs \r\n`ReferenceError: regeneratorRuntime is not defined`\r\n\r\n#### Gists\r\nNone\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* browser: Firefox 68.0.2\r\n\r\nNote: I do not get this error in 1.2.0"},{"labels":[null,null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\n- [x] Bug\r\n\r\n#### Expected behavior\r\n\r\nCalling `contract.events.MyEvent({filter: {a: \"string\"}})` should return an event with same `string` index.\r\n\r\n\r\n#### Actual behavior\r\n\r\nCalling `contract.events.MyEvent({filter: {a: \"string\"}})` returns `null`.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nOpen the `repl.it` link and press `run` on the top https://repl.it/@egorzaremba/web3-contract-filter-event-by-string\r\n\r\nAlso, contract address is https://rinkeby.etherscan.io/address/0x8f044afc2202ea44790f0081ea964b02f05783bd#code\r\n\r\n### Versions \r\n* web3.js: 2.0.0-alpha.1\r\n* nodejs: 10.2.0\r\n* ethereum node: infura\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nMemory usage should stay low over time when instantiating `Contract` objects.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nAfter investigating the heap there seems to be a closure leak which increases memory use over time until the process stops.\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\nYou can run the following sample code with the gc exposed\r\n```javascript\r\nconst Web3 = require('web3')\r\n\r\nasync function main() {\r\n  const web3 = new Web3(new Web3.providers.HttpProvider('https://mainnet.infura.io'))\r\n\r\n  for (let i = 0; ;i++) {\r\n    new web3.eth.Contract([], '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\r\n    if ((i % 1000) === 0) {\r\n      // Use node --expose-gc ./testLeak.js\r\n      if (global.gc) { global.gc() }\r\n      const used = process.memoryUsage().heapUsed / 1024 / 1024\r\n      console.log(`Heap used ${used}`)\r\n    }\r\n  }\r\n}\r\n\r\nmain()\r\n```\r\n\r\nYou'll see the memory rapidly increasing:\r\n```\r\nnode --expose-gc ./testLeak.js\r\n.....\r\nHeap used 120.24988555908203\r\nHeap used 124.3317642211914\r\nHeap used 128.3788604736328\r\nHeap used 132.4272689819336\r\nHeap used 136.45621490478516\r\nHeap used 140.50664520263672\r\nHeap used 144.50611877441406\r\nHeap used 148.57512664794922\r\nHeap used 152.59766387939453\r\nHeap used 156.6605682373047\r\nHeap used 160.72467803955078\r\nHeap used 164.76478576660156\r\nHeap used 168.77734375\r\nHeap used 172.78372192382812\r\nHeap used 176.8772201538086\r\nHeap used 180.86630249023438\r\n....\r\n```\r\n\r\nThis is the commit that introduced the issue https://github.com/ethereum/web3.js/commit/26a877517f65c9de650e13f940f995114d9f65ad (apologies for the direct \"blame\" it's just easier to direct to the actual code with the issue)\r\n\r\nRemoving the setProvider chaining solves the leak.\r\n#### Error Logs \r\n\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: v1.2.1\r\n* nodejs:  v10.16.0\r\n* ethereum node: infura mainnet\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,"bug"],"text":"### Description\r\n\r\nWhen I try to create a solution and install web3js using the following command, everything seems to succeed but when you check the logs there's quite some errors when the node-gyp rebuild is happening:\r\n\r\n```\r\nnpm install web3 --save-dev\r\n```\r\n\r\n\r\n#### Expected behavior\r\n\r\nNo errors when doing an NPM install.\r\n\r\n\r\n#### Actual behavior\r\n\r\nI've created a package.json with the following content:\r\n\r\n```\r\n{\r\n  \"name\": \"nodegyperror\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"scripts\": {},\r\n  \"dependencies\": {},\r\n  \"devDependencies\": {\r\n    \"web3\": \"^1.2.1\"\r\n  }\r\n}\r\n```\r\n\r\nRunning npm install shows the following red text:\r\n![image](https://user-images.githubusercontent.com/2350015/63164170-e9c88180-c027-11e9-9fb3-5dafd5f6e5e2.png)\r\n\r\nThe command still returns succeeded though.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nI created a repository with builds to reproduce the issue:\r\nhttps://github.com/devedse/NodeGypBufferUtilErrors\r\n\r\nWindows build and linux builds can be found in the Readme.md on the main page of the repository\r\n\r\n#### Error Logs \r\n\r\nWindows build (Errors shown):\r\nhttps://ci.appveyor.com/project/devedse/nodegypbufferutilerrors\r\n\r\nLinux build (No errors shown):\r\nhttps://travis-ci.org/devedse/NodeGypBufferUtilErrors\r\n\r\n### Versions \r\n* web3.js: ^1.2.1\r\n* nodejs: v12.8.1\r\n* NPM: v6.10.2\r\n* browser: N/A\r\n* ethereum node: N/A\r\n"},{"labels":[null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nWe inject an iframe into a website.\r\nWhen 3rd party cookies are blocked, localStorage is defined but access is restricted.\r\nFor more details, please refer to this [issue](https://github.com/torusresearch/torus-embed/issues/22)\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nGracefully handle the issue\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nuncaught DOM exception\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\nPlease refer to the issue linked to reproduce the error\r\n\r\n#### Error Logs \r\n\r\n![web3_access](https://user-images.githubusercontent.com/1688380/63141270-b847ba00-c017-11e9-80bc-702b2c6b59e3.png)\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* nodejs: 10.16.0\r\n* browser: Brave with brave shield enabled\r\n* ethereum node: Infura\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n\r\nI wrote a [PR](https://github.com/ethereum/web3.js/pull/3031) which resolves this issue.\r\n"},{"labels":[null,"bug"],"text":"### Description\r\n\r\nDocumentation for method `web3.eth.accounts.signTransaction` says that parameter `chainId` is of type `String`, though example in the documentation sets `chainId` like this:\r\n\r\n    chainId: 1\r\n\r\ni.e. as `number` not as `string`.\r\n\r\nActually, when `chainId` is specified as `string` this method silently produces incorrect signature.\r\n\r\n#### Expected behavior\r\n\r\nMethod `web3.eth.accounts.signTransaction` allows specifying `chainId` and either `string` or `number` and works properly in both cases.\r\n\r\n#### Actual behavior\r\n\r\nMethod `web3.eth.accounts.signTransaction` works correctly only when `chainId` is specified as `number`, but when `chainId` is specified as `string` this method silently produces incorrect signature.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Pass `chainId` parameter to method `web3.eth.accounts.signTransaction` as `string`.\r\n2. Recover address from returned signed transaction.\r\n3. Compare recovered address with address used to sign the transaction.\r\n4. These addresses will be different.\r\n\r\n### Versions \r\n* web3.js: 1.0.0\r\n"},{"labels":[null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nBuilding on v.1.2.1 using create-react-app fails due to webpack warning `/node_modules/web3-eth-accounts/src/scrypt.js Critical dependency: the request of a dependency is an expression\"` when CI=true (ie, fail on warnings)\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nBuilding a create-react-app using webpack should succeed\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nI am able to build everything locally, however the build fails in my CI environment. The warning is as follows:\r\n```\r\n/node_modules/web3-eth-accounts/src/scrypt.js\r\nCritical dependency: the request of a dependency is an expression\r\n```\r\nI assume it is a result of this line:\r\nhttps://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/scrypt.js#L17\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Error Logs \r\n```\r\nCreating an optimized production build...\r\n\r\nTreating warnings as errors because process.env.CI = true.\r\nMost CI servers set it automatically.\r\n\r\nFailed to compile.\r\n\r\n/home/circleci/project/node_modules/web3-eth-accounts/src/scrypt.js\r\nCritical dependency: the request of a dependency is an expression\r\n\r\n\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n\r\nlerna ERR! yarn run build stderr:\r\nerror Command failed with exit code 1.\r\n```\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: v1.2.1\r\n* nodejs: v10.16.0\r\n* browser: circleci \r\n* ethereum node:\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,"bug"],"text":"This line below will cause an unhandled, since event isn't defined\r\n\r\n```\r\n539     if (!event) {\r\n540         throw new Error('Event \"' + event.name + '\" doesn\\'t exist in this contract.');\r\n541     }\r\n```\r\n\r\nhttps://github.com/ethereum/web3.js/blob/2022b17d52d31ce95559d18d5530d18c83eb4d1c/packages/web3-eth-contract/src/index.js#L540"},{"labels":[null,"bug"],"text":"Steps to reproduce:\r\n\r\n * Import web3 1.2.0\r\n * `var web3 = new Web3(new Web3.providers.HttpProvider('https://rinkeby.infura.io/'));`\r\n * `web3.eth.getTransaction('0xd540f813d46953f5bf7c0b3797572ff6b73eee0eeadfac071baee0da9a7a9b5a').then(console.log);`\r\n\r\nYou will get the following error messages:\r\n\r\n```\r\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://rinkeby.infura.io/. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).\r\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://rinkeby.infura.io/. (Reason: CORS request did not succeed).\r\nError: Invalid JSON RPC response: \"\"\r\n```\r\n\r\nDoesn't happen on Brave or Chrome or the new Edge, but happens on Firefox, Safari and Safari Mobile."},{"labels":[null,"bug"],"text":"Hi, i don't know why but seem like i can't install web3's latest version even on new project on Windows 10.\r\nCommand: \r\n``` npm install web3 or yarn add web3 ```\r\n\r\nDetails of Error:\r\n\r\n```\r\nrm -rf node_modules/websocket/.git\r\n\r\n'rm' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! web3-providers-ws@1.2.0 preinstall: `rm -rf node_modules/websocket/.git`\r\nnpm ERR! Exit status 1\r\nnpm ERR!\r\nnpm ERR! Failed at the web3-providers-ws@1.2.0 preinstall script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.2\r\n* nodejs: 10.16.0\r\n* OS: Windows 10"},{"labels":[null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nIf you are calling getBlock then In WebsocketProvider.js function sendPayload, two listeners are added to emitter as execute once, one for the 'error' and one for id. Only one will get called. However both are added to listeners array. If no errors happen over time (many hours) the error queue can get very large.\r\n\r\n#### Expected behavior\r\nremove uncalled listener in resolve or reject respectively or don't do once.\r\n\r\n#### Actual behavior\r\nMemory keeps growing\r\n\r\n#### Steps to reproduce the behavior\r\nCall this.web3.eth.getBlock for new blocks\r\n\r\n#### Error Logs \r\n\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.55\r\n* nodejs: 10.15.0\r\n\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,"bug"],"text":"### Description\r\n\r\n`web3-1.0.0-beta.55` (also tested `beta.52`) subscribes to `newHeads` _after_ sending the transaction, which means web3 may miss emitted `newHeads` notifications. While it is unlikely for this race condition to be a problem on mainnet, or even test nets, it is pretty much guaranteed to be a problem when testing against Ganache.\r\n\r\n#### Expected behavior\r\n\r\nWhen a sent transaction is mined via `await web3.eth.sendTransaction`, `web3` should request the transaction's receipt and resolve the promise.\r\n\r\n#### Actual behavior\r\n\r\nI suspect what happens is:\r\n\r\n1. `web3` sends the transaction to Ganache\r\n2. Ganache receives the transaction and returns the `transactionHash`\r\n3. `web3` receives the `transactionHash` then sends a `newHeads` subscription to Ganache\r\n4. Ganache mines the transaction and emits a `newHeads` notification\r\n  - note: web3 _isn't_ subscribed yet\r\n5. Ganache receives the `newHeads` subscription.\r\n6. `web3` waits for forever.\r\n\r\nPrevious versions (like beta.37 don't have this issue)\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nFull reproduction:\r\n\r\nRun:\r\n```console\r\nmkdir test\r\ncd ./test\r\nnpm init -y\r\nnpm install ganache-core@2.5.7 web3@1.0.0-beta.55 -E\r\n```\r\n\r\nSave this code as `test.js`:\r\n```javascript\r\nconst Ganache = require(\"ganache-core\");\r\nconst Web3 = require(\"web3\");\r\n\r\nconst server = Ganache.server();\r\nserver.listen(8545, async () => {\r\n  const provider = new Web3.providers.WebsocketProvider(\"ws://localhost:8545\");\r\n  const options = { transactionConfirmationBlocks: 1 };\r\n  const web3 = new Web3(provider, null, options);\r\n  const accounts = await web3.eth.getAccounts();\r\n  const transactionReceipt = await web3.eth.sendTransaction({ from: accounts[0], to: accounts[1], value: 1 });\r\n  // never gets here.\r\n  console.log(transactionReceipt);\r\n\r\n  // shut down the Ganache server\r\n  server.close();\r\n});\r\n```\r\n\r\nRun:\r\n```console\r\nnode test.js\r\n```\r\n\r\nThe application hangs.\r\n\r\nA clumsy workaround (passer-bys: do NOT use this in your testing code!):\r\n\r\n```javascript\r\nconst Ganache = require(\"ganache-core\");\r\nconst Web3 = require(\"web3\");\r\n\r\nconst server = Ganache.server();\r\nserver.listen(8545, async () => {\r\n  const provider = new Web3.providers.WebsocketProvider(\"ws://localhost:8545\");\r\n  const options = { transactionConfirmationBlocks: 1 };\r\n  const web3 = new Web3(provider, null, options);\r\n  const accounts = await web3.eth.getAccounts();\r\n  const transactionReceiptPromise = web3.eth.sendTransaction({ from: accounts[0], to: accounts[1], value: 1 });\r\n\r\n  // web3 newHeads race-condition workaround:\r\n  await new Promise(resolve => setTimeout(resolve, 500)); // 500 is arbitrary\r\n  await web3.currentProvider.send(\"evm_mine\"); // force another block to be mined\r\n\r\n  const transactionReceipt = await transactionReceiptPromise;\r\n  // This works now!\r\n  console.log(transactionReceipt);\r\n\r\n  // shut down the Ganache server\r\n  server.close();\r\n});\r\n```\r\n\r\n### Versions \r\n* web3.js: `1.0.0-beta.55`\r\n* nodejs: `10.16.0`\r\n* ethereum node: `ganache-core@2.5.7`\r\n"},{"labels":[null,null,"bug"],"text":"### Description\r\nWebsocketProvider `disconnect` method doesn't close the connection when provider is trying to reconnect\r\n\r\n#### Expected behavior\r\nCalling `provider.disconnect()` should always terminate the websocket connection.\r\n\r\n#### Actual behavior\r\nCalling `provider.disconnect()` doesn't terminate the websocket connection when the provider is trying to reconnect.\r\n\r\n#### Steps to reproduce the behavior\r\n1. run a local node with websocket\r\n\r\n2. run the following code with Nodejs\r\n```js\r\nconst Web3 = require('web3');\r\nconst provider = new Web3.providers.WebsocketProvider('ws://localhost:8546');\r\nprovider.on('connect', () => console.log('connect'));\r\nprovider.on('error', () => {\r\n  console.log('error');\r\n  provider.disconnect();\r\n});\r\nprovider.on('close', () => {\r\n  console.log('close');\r\n});\r\n```\r\nprocess logs:\r\n```bash\r\nconnect\r\n```\r\n\r\n3. Turn off you the local ethereum node\r\nprocess logs:\r\n```bash\r\nconnect\r\nerror\r\n```\r\nthe process should log `close` and exit as `provider.disconnect()` has been called.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.55\r\n* nodejs: v12.3.1\r\n\r\n#### Note\r\nAlso tested with current code including #2711 correction:\r\n```bash\r\n# start nodejs\r\nconnect\r\n# shutdown eth node\r\nerror\r\nerror\r\n...\r\nerror\r\n# restart eth node\r\nconnect\r\n```\r\n"},{"labels":[null,"bug"],"text":"`import {Miner} from \"web3-eth-miner\";`\r\n\r\n```\r\nconst options =  {\r\n        defaultAccount: \"0x78dB3e2129D58685444989dD9682DDDC70dd3C82\",\r\n        defaultBlock: 'latest',\r\n        defaultGas: 3000000000,\r\n        defaultGasPrice: 3000000,\r\n        transactionBlockTimeout: 50,\r\n        transactionConfirmationBlocks: 24,\r\n        transactionPollingTimeout: 480,\r\n      }\r\n      const miner = new Miner(web3.givenProvider, null,options);\r\n        await miner.startMining(2).then(console.log)\r\n\r\n```\r\nIt still throws an error TypeError: miner.startMining is not a function\r\n"},{"labels":["bug"],"text":"\r\n### Description <!-- In plain words, what happened -->\r\nweb3 1.55\r\n\r\nI create sendSignedTransaction with batch and catch error\r\n![image](https://user-images.githubusercontent.com/6797955/58861589-5e418480-86b7-11e9-8414-d02d56124060.png)\r\nwithout BatchRequest work good. \r\n\r\nmy network \r\n![image](https://user-images.githubusercontent.com/6797955/58861664-93e66d80-86b7-11e9-99f9-b01f39be5e7c.png)\r\nyou can see request and get response transactions.\r\n`batch.add(settings.web3.eth.sendSignedTransaction.request(rawTransaction, async (error, txHash) => {\r\n                if (error) {\r\n                    console.error('batch error', error); // this error\r\n                }\r\n                console.log(\"111\", txHash); // no txHash\r\n                .... `\r\n\r\n#### Error Logs \r\n\r\n`TypeError: Cannot create property 'blockNumber' on string '0xde134af1c8ae9e976402eef83c877cef7c3c7d5149cb02228de44df8b4b974bf'`\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.55\r\n* nodejs: 11\r\n* browser: chrome\r\n* ethereum node: parity, PoA network, \r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"I'm testing an implementation of EthereumProvider using web3 1.0.0-beta.55, and it appears there is an issue with the Web3EthereumProvider adapter. All my requests error with: \"\".\r\n\r\nIt looks like this line is missing an `await`, since `send()` returns a Promise in EthereumProvider.\r\nhttps://github.com/ethereum/web3.js/blob/e48511990199330cf5b100ed52dd7953df934ab3/packages/web3-providers/src/providers/Web3EthereumProvider.js#L132\r\n\r\nI'd be happy to open a PR if this is indeed a bug."},{"labels":["bug"],"text":"I noticed out of memory errors on our testserver and found out that one script is filling the heap. I got some heapdumps and it looks like web3 is spamming strings.\r\n\r\n\r\nI don't exactly know how to properly debug memory leaks but it looks like web3 is the cause:\r\n\r\n![image](https://user-images.githubusercontent.com/6427935/58498819-226e6280-817f-11e9-9ab5-ea1ce1396707.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6427935/58498851-3914b980-817f-11e9-910a-b7bb8d4da914.png)\r\n\r\nAny advise how to proceed would be appreciated."},{"labels":[null,null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\n`web3.eth.abi.decodeParameters` returns an Object when decoding multiple parameters and an Array when decoding one parameter. In version beta.37 both cases returned `Result` object\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nLike it was in version beta.37:\r\n```js\r\n> const abi = require('web3-eth-abi')\r\n> const encoded = abi.encodeParameters(['string', 'string'], ['Hello', 'World!']);\r\n> encoded\r\n'0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006576f726c64210000000000000000000000000000000000000000000000000000'\r\n> let decoded = abi.decodeParameters(['string', 'string'], encoded);\r\n> decoded\r\nResult { '0': 'Hello', '1': 'World!', __length__: 2 }\r\n> decoded.constructor.name\r\n'Result'\r\n> decoded = abi.decodeParameters(['string'], encoded);\r\nResult { '0': 'Hello', __length__: 1 }\r\n> decoded.constructor.name\r\n'Result'\r\n> \r\n```\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n```js\r\n> const ABI = require('web3-eth-abi')\r\n> const abi = new ABI.AbiCoder()\r\n> const encoded = abi.encodeParameters(['string', 'string'], ['Hello', 'World!']);\r\n> encoded\r\n'0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006576f726c64210000000000000000000000000000000000000000000000000000'\r\n> let decoded = abi.decodeParameters(['string', 'string'], encoded);\r\n> decoded\r\n{ '0': 'Hello', '1': 'World!' }\r\n> decoded.constructor.name\r\n'Object'\r\n> decoded = abi.decodeParameters(['string'], encoded);\r\n[ 'Hello' ]\r\n> decoded.constructor.name\r\n'Array'\r\n```\r\n\r\nIs it intentional that decoding one parameter returns an array, and multiple -- an object? Would be nice to have `decodeParameters` return the same in both cases.\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.55\r\n* nodejs: v10.15.3\r\n* browser: node console\r\n* ethereum node:\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\n`web3.utils.hexToAscii` appears to add strange characters to a transaction's input data.\r\n\r\nSorry if this has been answered before, could not see anything, let me know if you need further info.\r\n\r\nExample\r\n```js\r\nweb3.utils.hexToAscii('0x4ed3885e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004035346565326633343264663132343361636161616136343536393331396131383930386531303835633132643861323031306433633362363639623765633539');\r\n```\r\n\r\n#### Expected behavior\r\n\r\nreturns:\r\n`54ee2f342df1243acaaaa64569319a18908e1085c12d8a2010d3c3b669b7ec59`\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nreturns `NÓ^ @54ee2f342df1243acaaaa64569319a18908e1085c12d8a2010d3c3b669b7ec59`\r\n\r\n### Versions \r\n* web3.js: ^1.0.0-beta.55\r\n* nodejs: 10.14.2\r\n* browser: node backend\r\n* ethereum node: kovan test network\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"`isBigNumber` is not available in `web3-utils`\r\n\r\nNote that `web3.utils.isBigNumber` _is_ available, but using it _only_ via the `web3-utils`, (without importing the entire web3), e.g. `import { isBigNumber } from 'web3-utils';` fails.\r\n\r\nThis could be due to the missing export here https://github.com/ethereum/web3.js/blob/f8cb5c63b84f9a7c9803204658d75d9173ca949d/packages/web3-utils/src/index.js#L287?\r\n\r\n### Versions \r\n* web3.js: \"web3-utils\": \"^1.0.0-beta.52\"\r\n* nodejs: 10.12"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nAfter web3 update from beta 37 to 55 version I have issue to run the code\r\n\r\n#### Expected behavior\r\nNode should send 'syncing' event and listener function of the event should catch and process it\r\n\r\n\r\n#### Actual behavior\r\nCode is starting and running for some time. Later after couple of hours all code crashing with the error message below\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nI made peace of test code which reproduce the error:\r\n\r\n``` javascript\r\nvar Web3 = require('web3');\r\nvar ROPSTEN_WSS = 'ws://35.x.x.x:x';\r\n\r\nfunction getProvider() {\r\n    var provider = new Web3.providers.WebsocketProvider(ROPSTEN_WSS)\r\n    provider.on('connect', () => {\r\n     console.log('WS Connected')\r\n    })\t\r\n    provider.on('error', e => {\r\n\t console.error('WS Error ' + new Date().toISOString())\r\n    })\r\n    provider.on('end', async e => {\r\n\t\tconsole.log('WS End')\r\n\t\tawait web3.setProvider(getProvider())\r\n    })\r\n    return provider\r\n}\r\n\r\nweb3 = new Web3(getProvider())\r\n\r\nvar subscription1 = web3.eth.subscribe('syncing', function (error, result) {\r\n\tconsole(error+\" \"+result)\r\n\tif (error) {\r\n\t\tconsole.log(\"Sync event error\")\r\n\t} else {\r\n\t\tif (result == false) {\r\n\t\t\tconsole.log(\"Node is Synced\")\r\n\t\t} else { \r\n\t\t\tconsole.log(\"Node is NOT Synced\")\t\t\t\r\n\t\t}\r\n\t}\r\n\t})\r\n\t.on(\"data\", function(sync){\r\n\tconsole.log('Sync event Data: ' + sync)\r\n\t})\r\n\t.on(\"changed\", function(isSyncing){\r\n\t\tif(isSyncing) {\r\n\t\t\tconsole.log('Data - is syncing')\r\n\t\t} else {\r\n\t\t\tconsole.log('Data - ready')\r\n\t\t}\t\r\n\t}) \t\r\n```\r\n\r\n#### Error Logs \r\n\r\nError log on node console:\r\n\r\nWS Connected\r\n/home/ec2-user/node_modules/web3/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:195\r\n      var isSyncing = subscriptionItem.result.syncing;\r\n                                              ^\r\n\r\nTypeError: Cannot read property 'syncing' of undefined\r\n    at SyncingSubscription.onNewSubscriptionItem (/home/ec2-user/node_modules/web3/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:195:47)\r\n    at WebsocketProvider.<anonymous> (/home/ec2-user/node_modules/web3/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:65:40)\r\n    at WebsocketProvider.emit (/home/ec2-user/node_modules/web3-providers/node_modules/eventemitter3/index.js:181:35)\r\n    at WebsocketProvider.onMessage (/home/ec2-user/node_modules/web3-providers/dist/web3-providers.cjs.js:304:12)\r\n    at WebsocketProvider.onMessage (/home/ec2-user/node_modules/web3-providers/dist/web3-providers.cjs.js:404:77)\r\n    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/ec2-user/node_modules/yaeti/lib/EventTarget.js:115:12)\r\n    at W3CWebSocket.onMessage (/home/ec2-user/node_modules/websocket/lib/W3CWebSocket.js:234:14)\r\n    at WebSocketConnection.<anonymous> (/home/ec2-user/node_modules/websocket/lib/W3CWebSocket.js:205:19)\r\n    at WebSocketConnection.emit (events.js:188:13)\r\n    at WebSocketConnection.processFrame (/home/ec2-user/node_modules/websocket/lib/WebSocketConnection.js:554:26)\r\n\r\n\r\n### Versions \r\n* web3.js: web3@1.0.0-beta.55\r\n* nodejs: v11.6.0\r\n* ethereum node: Geth Version: 1.8.27-stable\r\n\r\n\r\n"},{"labels":[null,"bug"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nThe `getPastEvents()` function in `web3.eth.Contract` will cause an error if one of the events has a `function external` as an argument.  (I assume the same problem is present in other similar functions as well.)  While I realize it might not be practical at the moment to decode such values, especially as currently you're relying on another package to do the decoding for you, having it cause an error in the whole function is inconvenient because it means one can't get at any of the other events, or, for that matter, the other properties of this event.  In short, the error should be localized.\r\n\r\n#### Expected behavior\r\n\r\nInstead of causing an error, the function should return as normal, but the `returnValues` entry for that parameter should be `undefined` or `null` or some other way of indicating an error, rather than having the entire function error.\r\n\r\n#### Actual behavior\r\n\r\nAn error occurs.  In my case, doing this from within `truffle console`, I got the following:\r\n\r\n```\r\n{ Error: invalid type (arg=\"type\", value=\"function\")\r\n    at XMLHttpRequest._onHttpResponseEnd (/home/sniffnoy/truffle/truffle/node_modules/xhr2-cookies/xml-http-request.ts:345:8)\r\n    at XMLHttpRequest._setReadyState (/home/sniffnoy/truffle/truffle/node_modules/xhr2-cookies/xml-http-request.ts:219:8)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/sniffnoy/truffle/truffle/node_modules/xhr2-cookies/xml-http-request-event-target.ts:44:13)\r\n    at XMLHttpRequest.request.onreadystatechange (/home/sniffnoy/truffle/truffle/node_modules/web3/node_modules/web3-providers-http/src/index.js:96:13)\r\n    at /home/sniffnoy/truffle/truffle/packages/truffle-provider/wrapper.js:112:9\r\n    at /home/sniffnoy/truffle/truffle/node_modules/web3-eth-contract/node_modules/web3-core-requestmanager/src/index.js:147:9\r\n    at sendTxCallback (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-contract/node_modules/web3-core-method/src/index.js:473:33)\r\n    at Method.formatOutput (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-contract/node_modules/web3-core-method/src/index.js:159:23)\r\n    at Array.map (<anonymous>)\r\n    at /home/sniffnoy/truffle/truffle/node_modules/web3-eth-contract/node_modules/web3-core-method/src/index.js:160:57\r\n    at Object.Contract._decodeEventABI (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-contract/src/index.js:377:31)\r\n    at ABICoder.decodeLog (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/src/index.js:283:52)\r\n    at ABICoder.decodeParameters (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/src/index.js:229:30)\r\n    at AbiCoder.decode (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/node_modules/ethers/utils/abi-coder.js:901:15)\r\n    at Array.forEach (<anonymous>)\r\n    at AbiCoder.<anonymous> (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/node_modules/ethers/utils/abi-coder.js:910:25)\r\n    at getParamCoder (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/node_modules/ethers/utils/abi-coder.js:862:12)\r\n    at Object.throwError (/home/sniffnoy/truffle/truffle/node_modules/web3-eth-abi/node_modules/ethers/utils/errors.js:68:17)\r\n  reason: 'invalid type',\r\n  code: 'INVALID_ARGUMENT',\r\n  arg: 'type',\r\n  value: 'function' }\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Write a Solidity contract with an event that takes a `function external` parameter.  E.g.:\r\n```\r\npragma solidity ^0.5.8;\r\n\r\ncontract EventsTest {\r\n  event takesFunction(function() external);\r\n\r\n  function run() public {\r\n    emit takesFunction(this.run);\r\n  }\r\n}\r\n```\r\n2. Deploy the contract, then cause it to emit such an event.  (In this case, deploy it and then run `run`.)\r\n3. Create a new `web3.eth.Contract` object for it, and then call that object's `getPastEvents` method.  (Although in my case I was using `truffle console` and relied on the object created by `EventsTest.deployed()`.)\r\n\r\n#### Error Logs \r\n\r\nSee above.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta37\r\n* nodejs: 10.15.3\r\n* browser: N/A\r\n* ethereum node: Ganache 2.0.1\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description\r\nUsing `1.0.0-beta.54` Github complains of a security vulnerability in the `extend 3.0.1` module which is being used by `web3-bzz@1.0.0-beta.54` -> `swarm-js@0.1.39` -> `eth-lib@0.1.27` -> `servify@0.1.12` -> `request@2.87.0` -> `extend 3.0.1`.\r\n\r\n#### Expected behavior\r\nNo security vulnerability warning in Github.\r\n\r\n\r\n#### Actual behavior\r\n![image](https://user-images.githubusercontent.com/4350404/57349934-3b8a8180-7186-11e9-9e4c-08f6b8fad18a.png)\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.54\r\n\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nWhen calling methods such as `web3.eth.getBlockNumber` with an HTTP provider, if the backing server returns a non-200 response, then the promise returned by the method never completes in either success or failure.\r\n\r\n#### Expected behavior\r\n\r\nThe async task should complete one way or the other, probably in an error, to allow the consumer to retry, log, or otherwise handle the failure.\r\n\r\n#### Actual behavior\r\n\r\nThe task never completes, and there is no indication that it has failed.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nAn example using Infura:\r\n\r\n```ts\r\nimport Web3 from \"web3\";\r\n\r\nconst web3 = new Web3(\r\n  new Web3.providers.HttpProvider(\r\n    \"https://mainnet.infura.io/v3/some-invalid-token\",\r\n  ),\r\n);\r\n\r\nweb3.eth\r\n  .getBlockNumber()\r\n  .then(() => console.log(\"SUCCESS\"), () => console.log(\"ERROR\"));\r\n```\r\n\r\nSince the token in the Infura URL is invalid, Infura returns a 401 response (Unauthorized). Neither \"SUCCESS\" nor \"ERROR\" is ever printed to the console.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.54\r\n* nodejs: 11.13.0\r\n* browser: Chrome Version 73.0.3683.103\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"bug"],"text":"### Description\r\n\r\nThe transactions still seem to send/work fine, but recovery gives incorrect results.\r\n\r\n#### Expected behavior\r\n\r\nCorrect results from `recoverTransaction()` regardless of transaction `chainId`.\r\n\r\n#### Actual behavior\r\n\r\nCorrect results from `recoverTransaction()` for `chainId`s of `0x3fffffff` and lower.  \r\nIncorrect results from `recoverTransaction()` for `chainId`s of `0x40000000` and higher. (Ganache defaults to timestamp as chain ID and easily shoots past this.)\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```javascript\r\nlet tx = {\r\n  chainId: \"0x1\",\r\n  gasLimit: \"0x927c0\",\r\n  gasPrice: \"0x4a817c800\",\r\n  nonce: \"0x9\",\r\n  to: \"0x0000000000000000000000000000000000000000\",\r\n  value: 100\r\n};\r\nconst pk = 'a44de2416ee6beb2f323fab48b432925c9785808d33a6ca6d7ba00b45e9370c4';\r\nconst sign = web3.eth.accounts.signTransaction;\r\nconst recover = web3.eth.accounts.recoverTransaction;\r\n\r\nlet signed = await sign(tx, pk);\r\nconsole.log(recover(signed.rawTransaction));\r\n// > 0xE2a2776777F90e4e38989486544d472bAB067158\r\n\r\ntx.chainId = \"0x3ffffffe\";\r\nsigned = await sign(tx, pk);\r\nconsole.log(recover(signed.rawTransaction));\r\n// > 0xE2a2776777F90e4e38989486544d472bAB067158\r\n\r\ntx.chainId = \"0x3fffffff\";\r\nsigned = await sign(tx, pk);\r\nconsole.log(recover(signed.rawTransaction));\r\n// > 0xE2a2776777F90e4e38989486544d472bAB067158\r\n\r\ntx.chainId = \"0x40000000\";\r\nsigned = await sign(tx, pk);\r\nconsole.log(recover(signed.rawTransaction));\r\n// > 0x3637aa4F877204708cCC92d153648D0e1fa0149e\r\n\r\ntx.chainId = \"0x40000001\";\r\nsigned = await sign(tx, pk);\r\nconsole.log(recover(signed.rawTransaction));\r\n// > 0x1e5B6F3Ca367B664148DD2F71E327daB0bC913Ad\r\n```\r\n\r\n### Versions \r\n\r\n`beta.54`"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nThe getBlock method with a hash or a number as parameter does not work with a quorum permisionless blockchain\r\n\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n    Calling `await web3.eth.getBlock(1)` or `await web3.eth.getBlock('0x000...')` should return an object.\r\n\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n    Calling `await web3.eth.getBlock(1)` or `await web3.eth.getBlock('0x000...')` is throwing an error `Number can only safely store up to 53 bits` from bn.js.\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\nInstall a quorum chain, connect to it and then \r\n```js\r\nconst web3 = new Web3('http://localhost:20200');\r\nconst block = await web3.eth.getBlock(1);\r\n//const block = await web3.eth.getBlock('0x000...');\r\n\r\nconsole.log(block);\r\n\r\n// Throw 'Number can only safely store up to 53 bits'\r\n```\r\n\r\n\r\n#### Error Logs \r\n\r\n'Number can only safely store up to 53 bits'\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.53\r\n* nodejs: v11.14.0\r\n* ethereum node: N/A\r\n* Quorum node: 2.2.0\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\nWhen attempting to instantiate a Web3 instance without a provider, you cannot then use the `setProvider` method to set a provider.\r\n\r\n#### Expected behavior\r\nThe web3 instance should set the provider.\r\n\r\n#### Actual behavior\r\nWhen attempting to use the `setProvider` method, you receive an error message due to there being no current provider (see the Error Logs section).\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n```\r\nconst Web3 = require(\"web3\");\r\nconst web3 = new Web3();\r\nweb3.setProvider(new Web3.providers.HttpProvider(someValidProviderUrl);\r\n```\r\n\r\n\r\n#### Error Logs \r\n```\r\nTypeError: Cannot read property 'constructor' of undefined\r\n    at Web3.isSameProvider (/Users/tyler/projects/truffle/node_modules/web3/node_modules/web3-core/dist/web3-core.cjs.js:54:34)\r\n    at Web3.setProvider (/Users/tyler/projects/truffle/node_modules/web3/node_modules/web3-core/dist/web3-core.cjs.js:42:17)\r\n    at Web3.setProvider (/Users/tyler/projects/truffle/node_modules/web3/dist/web3.cjs.js:41:73)\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.53\r\n* nodejs: 8.16.0\r\n"},{"labels":["bug"],"text":"\r\n\r\n#### Expected behavior\r\nAn error message.\r\n\r\n\r\n#### Actual behavior\r\n\r\nSilent failure. No error message.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nSee https://github.com/jwasinger/geth-docker-example to reproduce this issue.  After starting Geth:.\r\n\r\n```\r\n> ls -l data\r\n\r\ntotal 8\r\ndrwxr-xr-x 5 root root 4096 Apr 30 21:22 geth\r\nsrw------- 1 root root    0 Apr 30 21:22 geth.ipc\r\ndrwx------ 2 root root 4096 Apr 30 21:22 keystore\r\n```\r\n\r\n```\r\n> node tryconnect.js\r\n>\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.53\r\n* ethereum node: Geth v1.8.27: docker image (ethereum/client-go:v1.8.27)\r\n\r\n"},{"labels":["bug"],"text":"I was working on a clean fork of the master branch and on a lark I decided to run [npm audit](https://docs.npmjs.com/cli/audit).\r\n\r\n>found 1325 vulnerabilities (2 low, 1287 moderate, 36 high) in 526462 scanned packages\r\n  run `npm audit fix` to fix 1324 of them.\r\n  1 vulnerability requires manual review. See the full report for details.\r\n\r\nI'm always hesitant to trust automated tools, but I think it would be advisable for someone to take a look at what it's finding and determine what's what.\r\n\r\n*update*\r\nI opened and deleted some comments a little while ago believing I might be on an ancient branch.  I double checked that I am on the 1.0 branch now and getting about the same results."},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\nHello,\r\nI use web3 offline without a node connection. I have a problem with the signTransaction method (web3.eth.accounts.signTransaction). Nonce existence check in this method is not correct. \r\n\r\n#### Expected behavior\r\n\r\nCalling `web3.eth.accounts.signTransaction` with a nonce (even at 0) should return a signed transaction without trying to call the ethereum node.\r\n\r\n#### Actual behavior\r\n\r\nCalling `web3.eth.accounts.signTransaction` with a nonce at 0 will call the ethereum node to get the transactionCount\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n    1. Import `web3`\r\n    2. Try to sign a transaction like this:\r\n ```js \r\n      web3.eth.accounts\r\n        .signTransaction(\r\n          {\r\n            gas: 1000000,\r\n            nonce: 0,\r\n            chainId,\r\n            gasPrice,\r\n            data,\r\n          },\r\n          account.privateKey,\r\n        )\r\n```\r\n   3. You can see that your node is called with \r\n\r\n{ jsonrpc: '2.0',\r\n id: 1,\r\nmethod: 'eth_getTransactionCount',\r\nparams: [ 'Address', 'latest' ] }\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.52\r\n* nodejs: 10.15.3\r\n\r\nI think the problem is at this line: https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/Accounts.js#L158 \r\nThe if condition return false if nonce is set to 0.\r\n\r\n\r\n"},{"labels":["bug"],"text":"@nivida That's it, thank you. :man_facepalming: Looks like I copied https endpoint and changed to wss, missing the `/ws`.\r\n\r\nIs it the correct behavior for `web3.eth.subscribe` to not log an error when the provider is responding with `404` errors? If the callback for `web3.eth.subscribe` isn't the place to catch the `404`, where would be the correct place?\r\n\r\n_Originally posted by @carterbrett in https://github.com/ethereum/web3.js/issues/2706#issuecomment-485109475_"},{"labels":[null,null,"bug"],"text":"### Description \r\n\r\nWhen supplying your own entropy to web3.eth.accounts.wallet.create the address returned appears to be random.\r\n\r\n#### Expected behavior\r\nThe expectation is that if entropy is supplied that the resulting wallet accounts will always be the same.\r\n\r\n#### Actual behavior\r\nIt appears that the accounts created within the wallet are randomly generated despite the fact you are supplying entropy.  Either this is designed behavior which is undocumented, or there is a bug here.  We either need to fix the bug so the same accounts are created or we need to document what the entropy is supposed to be used for.  I have gone through the source code and it appears that consistent entropy should result in consistent accounts...\r\nHowever eth-lib appears to be inserting random values despite supplied entropy...\r\nhttps://github.com/MaiaVictor/eth-lib/blob/master/src/account.js\r\n\r\n#### Steps to reproduce the behavior\r\n1. Generate entropy from a consistent source, for example from bip39.js mnemonic to entropy or mnemonic to seed  function.\r\n2. Call \r\n```\r\nlet seed = await (await bip39.mnemonicToSeed(mnemonic)).toString('hex');\r\n        \r\n        this.wallet = this.web3.eth.accounts.wallet.create(1, seed);\r\n        console.debug(\"wallet: \",this.wallet);\r\n```\r\n3. Do this a few times and notice that the resulting accounts are different every time.\r\n\r\n### Versions \r\n* web3.js:\r\nbeta-37 and beyond\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\n`WebsocketProvider.on 'connect'` event stop occur after first time and does not fired after next socket connect, subscriptions not resubscribed too.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nprovider = new Web3.providers.WebsocketProvider(wsUrl, options)\r\nonConnect = () => console.log('connected')\r\nprovider.on('connect', onConnect)\r\n\r\nonConnect callback should be called after each websocket reconnect\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\nonConnect called only once on first connect\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\nLink to example repository: [https://github.com/boomfly/web3-provider-events-example](https://github.com/boomfly/web3-provider-events-example)\r\n\r\n#### Error Logs \r\n\r\n[Ethereum] provider \"connect\" event\r\npending tx 0xb8c7032fd7a05d7606541deec57940b6680dd52409bdb6125e6eb121dc7e4e3b\r\npending tx 0x8bdb5473779f7aa37e0bf2eacfa2d017280ba16166bbd24a7dfb4e80ca8b4f45\r\npending tx 0x0b64b3841fb115bfa25c77072d2402fd9cdb61f20eebc2561354808902a5c74e\r\npending tx 0x0f9defb78956072193a1fee2b53d730513f22b4ee673ff90b90e0446e3afc67d\r\npending tx 0x3e3e5a3407b4f38aff3b649b79ac0b57ebd49e637902f67085b3dff01c01aad0\r\npending tx 0x88d5ed656b1ae27eec4846cca58dff1eb2da87982d4fff5aa105d2051d214999\r\npending tx 0xefd02a0d9b95e91fa86f4b8ab10b8a0aef52cb43f36691a363da54ab14253b1a\r\npending tx 0xb347153c82b73a74b20135e3147e82bb2a04005cb1f6b639a6799bb43666ad7a\r\n\r\n##### after network disable\r\n\r\nError while cheking connecion Error: Connection error: Timeout exceeded\r\nCheck connection connected false, isConnecting false, latestBlock undefined\r\n\r\nError while cheking connecion Error: Connection error: Connection is not open on send()\r\nCheck connection connected false, isConnecting false, latestBlock undefined\r\n[Ethereum] provider \"error\" event { error:\r\n_Event {\r\n type: 'error',\r\n isTrusted: false,\r\n _yaeti: true,\r\n target:\r\n  W3CWebSocket {\r\n    _listeners: [Object],\r\n    addEventListener: [Function: _addEventListener],\r\n    removeEventListener: [Function: _removeEventListener],\r\n    dispatchEvent: [Function: _dispatchEvent],\r\n    _url: 'wss://ropsten.infura.io/ws',\r\n    _readyState: 3,\r\n    _protocol: undefined,\r\n    _extensions: '',\r\n    _bufferedAmount: 0,\r\n    _binaryType: 'arraybuffer',\r\n    _connection: undefined,\r\n    _client: [WebSocketClient] },\r\n cancelable: true,\r\n stopImmediatePropagation: [Function] } }\r\n Error while cheking connecion Error: Connection error: Connection is not open on send()\r\n Check connection connected false, isConnecting false, latestBlock undefined\r\n\r\n##### and enable network again onConnect not fired and subscriptions not resubscribed, but socket connected\r\n\r\nError while cheking connecion Error: Connection error: Connection is not open on send()\r\nCheck connection connected false, isConnecting false, latestBlock undefined\r\nError while cheking connecion Error: Connection error: Connection is not open on send()\r\nCheck connection connected false, isConnecting false, latestBlock undefined\r\nCheck connection connected true, isConnecting false, latestBlock 5435004\r\nCheck connection connected true, isConnecting false, latestBlock 5435005\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.52\r\n* nodejs: 8.15.1 / 10.15.3\r\n* browser:\r\n* ethereum node: wss://ropsten.infura.io/ws or wss://mainnet.infura.io/ws\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\n```js\r\nconst Web3 = require('web3')\r\nconst {numberToHex, toWei, toHex} = require('web3-utils')\r\nconst web3 = new Web3('https://kovan.infura.io')\r\n\r\nasync function main() {\r\n  const acc = web3.eth.accounts.wallet.add(process.env.KEY)\r\n  const cb = number => {\r\n    console.log(number, 'callback from batch tx')\r\n  }\r\n  const batch = new web3.BatchRequest()\r\n  let i = 0\r\n  const tx = web3.eth.sendTransaction.request(\r\n    {\r\n      from: acc.address,\r\n      to: '0x0039f22efb07a647557c7c5d17854cfd6d489ef3',\r\n      gas: numberToHex(21000),\r\n      gasPrice: toWei('1', 'gwei'),\r\n      value: toWei('2'),\r\n      data: toHex('peppersec.com')\r\n    },\r\n    cb.bind(this, i)\r\n  )\r\n  i++\r\n  batch.add(tx)\r\n  await batch.execute()\r\n\r\n}\r\nmain()\r\n```\r\n\r\n#### Expected behavior\r\nshould send batch request using sendRawTx RPC method if used with privateKey\r\n\r\n\r\n#### Actual behavior\r\n(node:47721) UnhandledPromiseRejectionWarning: Error: BatchRequest error: [\"Response should be of type Array but is: object\"]\r\n    at /node_modules/web3-providers/dist/web3-providers.cjs.js:824:17\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n\r\nThe response object from `web3-providers/dist/web3-providers.cjs.js:824:17`:\r\n```\r\nresponse { jsonrpc: '2.0',\r\n  id: 0,\r\n  error:\r\n   { code: -32601,\r\n     message:\r\n      'The method eth_sendTransaction does not exist/is not available' } }\r\n```\r\n\r\nI think it should sign tx, increment nonce and use `sendRaw` rpc method behind the scenes\r\n### Versions \r\n* web3.js: 1.0.0-beta.52\r\n* nodejs: v10.15.3\r\n\r\n\r\n"},{"labels":["bug"],"text":"\r\n#### Expected behavior\r\n\r\n\r\n    Running this should not crash.\r\n```\r\nconst Web3 = require('Web3')\r\nconst web3 = new Web3()\r\n```\r\n\r\n\r\n#### Actual behavior\r\n\r\n   Crashes With\r\n```\r\n/Users/dan/qiibeework/qb-listener/node_modules/web3-providers/dist/web3-providers.cjs.js:49\r\n      if (provider.sendPayload && provider.subscribe) {\r\n                   ^\r\n\r\nTypeError: Cannot read property 'sendPayload' of undefined\r\n    at ProviderResolver.resolve (/Users/dan/qiibeework/qb-listener/node_modules/web3-providers/dist/web3-providers.cjs.js:49:20)\r\n    at Web3.AbstractWeb3Module (/Users/dan/qiibeework/qb-listener/node_modules/web3-core/dist/web3-core.cjs.js:24:51)\r\n    at new Web3 (/Users/dan/qiibeework/qb-listener/node_modules/Web3/dist/web3.cjs.js:30:68)\r\n    at Object.<anonymous> (/Users/dan/qiibeework/qb-listener/junk.js:3:14)\r\n    at Module._compile (module.js:653:30)\r\n    at Object.Module._extensions..js (module.js:664:10)\r\n    at Module.load (module.js:566:32)\r\n    at tryModuleLoad (module.js:506:12)\r\n    at Function.Module._load (module.js:498:3)\r\n    at Function.Module.runMain (module.js:694:10)\r\n    at startup (bootstrap_node.js:204:16)\r\n    at bootstrap_node.js:625:3\r\n\r\nProcess finished with exit code 1```\r\n\r\n### Versions \r\n* web3.js:\r\n1.0.0-beta.52\r\n* nodejs:\r\nv8.15.0\r\n"},{"labels":["bug"],"text":"There is a reference to an example with BN.js, but it doesn't work in the version ` 1.0.0-beta.52`.\r\n\r\nhttps://web3js.readthedocs.io/en/1.0/web3-utils.html#id5\r\n\r\n![image](https://user-images.githubusercontent.com/1126497/56169224-50626380-5f92-11e9-89c8-b9a7ac184ec6.png)\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nI was implementing simple connectivity check for websocket provider. I got it to work via error event listener, but even then it causes Infinitely reconnecting loop.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nCalling `await web3.eth.net.isListening()` should return true or false.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\nIf provider is not reachable it doesn't return anything and causes `provider.on('error')` event. \r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n----------------------------------------------------------------------->\r\n\r\n1. Import `web3`\r\n2. Create new instance of Web3 with provider address of `wss://undefined`\r\n3. Call `await web3.eth.net.isListening()`\r\n\r\n...or use the gist below.\r\n\r\n#### Error Logs \r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n1. Call `await validateEndpointConnectivity()`\r\n2. Note line 13 `console.log('isListening', isListening)` is never logged\r\n3. In console you'll get errors of reconnect attempts\r\n\r\nhttps://gist.github.com/niklas-e/335fff457ee0352977e797a4f2e1c886\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: v10.15.3\r\n* browser: Chromium 73.0.3683.75\r\n* ethereum node: -\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"https://github.com/ethereum/web3.js/blob/441c309d3304ffbc36fca4ef483adf314b5f4801/packages/web3-eth-contract/src/factories/ContractModuleFactory.js#L41-L49\r\n\r\nhttps://github.com/ethereum/web3.js/blob/441c309d3304ffbc36fca4ef483adf314b5f4801/packages/web3-eth-contract/src/index.js#L49\r\n\r\nI came across this because my IDE is screaming at me \"This makes no sense\" (static code analysis):\r\n![Selection_108](https://user-images.githubusercontent.com/1150767/56019816-ea61ac00-5d05-11e9-950f-ee8b5e990988.jpg)\r\n\r\nShould not be very difficult to add some sort of static code analysis for this kind of stuff.\r\n"},{"labels":["bug"],"text":"### Description\r\nA tx never resolves on ganache with `WebsocketProvider` whatever I set `transactionConfirmationBlocks` to.\r\n`sendTransaction`, `sendSignedTransaction` and `confirmation` events are NOT triggered.  \r\nOnly `transactionHash` event is triggered. \r\n\r\nNB:\r\n- I followed advice from closed #2652 but it didn't help. If it works for others then it could be something trivial we do incorrectly but we tried it on multiple environments in different ways with no luck.\r\n- I tried the same script on different web3.js versions (only changing the WebsocketProvider constructor params) and it WORKs with beta48 but not with beta49-52.\r\n- It breaks a different way with `HttpProvider` - when `transactionConfirmationBlocks` set to 1 it resolves but anything higher it still never resolves.\r\n-  I tried to call  `evm_mine` manually from `transactionHash` event or call multiple `.sendTransaction` in a separate console but no effect.\r\n\r\n#### Expected behavior\r\nThis should work on ganache as per documentation: \r\n```\r\nconst Web3 = require(\"web3\");\r\n\r\nconst OPTIONS = {\r\n  defaultBlock: \"latest\",\r\n  transactionConfirmationBlocks: 1,\r\n  transactionBlockTimeout: 5\r\n};\r\n\r\nconst web3 = new Web3(\r\n  new Web3.providers.WebsocketProvider(\"ws://localhost:8545\"),\r\n  // Web3.providers.HtttpProvider(\"http://localhost:8545\")\r\n  null,\r\n  OPTIONS\r\n);\r\n\r\nsendTx()\r\n  .then(receipt => {\r\n    console.log(\"Got receipt\");\r\n  })\r\n  .catch(error => console.log(\"Got error:\", error));\r\n\r\nasync function sendTx() {\r\n  const accounts = await web3.eth.personal.getAccounts();\r\n\r\n  const tx = web3.eth\r\n    .sendTransaction({\r\n      to: accounts[1],\r\n      from: accounts[0],\r\n      value: web3.utils.toWei(\"0.1\", \"ether\")\r\n    })\r\n    .on(\"transactionHash\", txHash => {\r\n      // web3.currentProvider.send(\"evm_mine\"); // execution of it seems to be blocked by sendTransaction in beta52\r\n      console.log(\"on transactionHash\", txHash);\r\n    })\r\n    .on(\"receipt\", receipt => {\r\n      console.log(\"on receipt\");\r\n    })\r\n    .on(\"confirmation\", (confirmationNumber, receipt) => {\r\n      console.log(\"on confirmation\", confirmationNumber);\r\n    })\r\n    .on(\"error\", error => {\r\n      console.log(\"on error\", error);\r\n    });\r\n\r\n  const receipt = await tx;\r\n  return receipt;\r\n}\r\n```\r\n\r\n#### Actual behavior\r\n- txHash recevied\r\n- no `receipt` or `confirmation` event called\r\n- the tx never resolves\r\n\r\nOutput from the included gist with Websocket Provider\r\n```\r\n$ node ./sendTx.js \r\nWebsocketProvider version: 1.0.0-beta.52 web3.eth.transactionConfirmationBlocks: 1 web3.transactionConfirmationBlocks: 1\r\non transactionHash 0x3bc1bace44ba626b1b7c6138d9d144100ab96b7eb448de8723d1528491802dd4\r\n\r\n```\r\nAnd hanging forever...\r\n\r\nOutput from ganache (trimmed):\r\n```\r\n$ yarn ganache-cli\r\nyarn run v1.13.0\r\n$ [...]/node_modules/.bin/ganache-cli\r\nGanache CLI v6.4.2 (ganache-core: 2.5.4)\r\n[...]\r\n\r\nGas Price\r\n==================\r\n20000000000\r\n\r\nGas Limit\r\n==================\r\n6721975\r\n\r\nListening on 127.0.0.1:8545\r\neth_accounts\r\neth_gasPrice\r\neth_sendTransaction\r\n\r\n  Transaction: 0x2835ffae4a227eb1a789d1bad0fbb3501b6b31bf46c5935299a8d83ca82aa762\r\n  Gas usage: 21000\r\n  Block Number: 1\r\n  Block Time: Mon Apr 08 2019 11:10:47 GMT+0100 (British Summer Time)\r\n\r\neth_subscribe\r\n```\r\n#### Steps to reproduce the behavior\r\nrun  [`sendTx.js`](https://gist.github.com/szerintedmi/251b5d5739888ad595548625c8d5d424)\r\n with `node ./txSend.js` (while ganache is running)\r\n\r\n#### Error Logs \r\nN/A\r\n\r\n#### Gists\r\nBarebone gist to demonstrate the issue:\r\n[sendTx.js](https://gist.github.com/szerintedmi/251b5d5739888ad595548625c8d5d424)\r\n\r\n### Versions \r\n* web3.js: beta52\r\n* nodejs: 8.15.3\r\n* browser: N/A\r\n* ethereum node: ganache-cli v6.4.2"},{"labels":["bug"],"text":"### web3.eth.accounts.wallet errors when using\r\nI'm trying update lib to new version and got errors with wallet. I am not sure if errors was described before, but i got those, when i work with wallet (works fine with beta-33 web3.js version).\r\n\r\n#### Actual behavior\r\n ```js\r\nweb3.eth.accounts.wallet.add(privateKey);\r\nweb3.eth.accounts.wallet.save('password', 'key');\r\n->Error: TypeError: this.accounts[i] is undefined\r\n```\r\n\r\nWhen i try to load (this wallet was stored with old version of web3.js)\r\n```js\r\nweb3.eth.accounts.wallet.load('password', 'key');\r\nSyntaxError: \"JSON.parse: unexpected character at line 1 column 1 of the JSON data\"\r\n    fromV3Keystore web3-eth-accounts.umd.js:151\r\n    decrypt web3-eth-accounts.umd.js:266\r\n    decrypt web3-eth-accounts.umd.js:265\r\n    load web3-eth-accounts.umd.js:314\r\n```\r\n\r\n\r\n### Versions \r\n* web3.js 1.0.0-beta.51\r\n* browser - firefox\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nInfura can close websocket connection when request takes a lot of time, for example query past events starting block 0 on mainnet. In this case web3 produce this error in console:\r\n```\r\nweb3-providers.umd.js:293 Uncaught (in promise) TypeError: Cannot read property 'id' of undefined\r\n    at WebsocketProvider._callee2$ (web3-providers.umd.js:293)\r\n    at tryCatch (runtime.js:45)\r\n    at Generator.invoke [as _invoke] (runtime.js:264)\r\n    at Generator.prototype.(:3000/anonymous function) [as next] (http://localhost:3000/static/js/0.chunk.js:112974:21)\r\n    at asyncGeneratorStep (asyncToGenerator.js:3)\r\n    at _next (asyncToGenerator.js:25)\r\n```\r\n\r\nhttps://github.com/ethereum/web3.js/blob/1.0/packages/web3-providers/lib/providers/AbstractSocketProvider.js#L195 is the location in file where the error occurs.\r\n\r\nScreenshot from debugger:\r\n<img width=\"1107\" alt=\"Screenshot 2019-03-30 at 02 19 32\" src=\"https://user-images.githubusercontent.com/6755908/55257546-d1331700-5292-11e9-9701-2d610779b8ac.png\">\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n1. Connect to mainnet with Infura websocket provider\r\n2. query past events from 0 to latest block several times in parallel (3 in my case)\r\n3. Infura will close the connection with some probability and the error will be shown\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.51\r\n* browser: Chrome 71\r\n* ethereum node: Mainnet Infura WebSocket\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description\r\nA tx which reverted never resolves and I can't get the receipt of the reverted transaction:   receipt is not available neither in catch args or in error event args\r\n\r\n#### Expected behavior\r\nIn case a transaction reverts or runs out of gas:\r\n```\r\nconst receipt = await dummyContract.methods.revertMe().send()\r\n  .on(\"transactionHash\", <should be triggered with tx hash>)\r\n  .on(\"receipt\", \r\n     <should be triggered with tx receipt , receipt.status set to false>)\r\n  .on(\"confirmation\", \r\n      <should be triggered for each confirmation with \r\n             confirmation number and with tx receipt, receipt.status set to false>)\r\n  .on(\"error\", <should be triggered with error and receipt>)\r\n  .catch( <IMHO it should NOT be triggered in VM reverts or out of gas\r\n     rather resolve the call and let the caller handle it on error event or based on \r\n      resolved receipt's status \r\n      or at least should be triggered with (error, receipt)  )\r\n```\r\n\r\n#### Actual behavior\r\non VM error I can't retrieve the receipt in any of these ways:\r\n- it's not passed to `error` event\r\n- it's not passed to `catch` block (although I think catch block shouldn't be reached in this scenario)\r\n- no `receipt` or `confirmation` event called\r\n- the tx never resolves so even the resolved so returned receipt can't be used \r\n\r\n#### Steps to reproduce the behavior\r\nhttps://github.com/Augmint/web3js_integration_tests/blob/master/test/fails.js\r\n\r\n#### Error Logs \r\nN/A\r\n\r\n#### Gists\r\nhttps://github.com/Augmint/web3js_integration_tests/blob/master/test/fails.js\r\n\r\n### Versions \r\n* web3.js: beta51\r\n* nodejs: 8.15.3\r\n* browser: N/A\r\n* ethereum node: ganache-cli v6.4.1"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nI think this issue is related to https://github.com/ethereum/web3.js/issues/2563 but the fix #2574 didn't apply on `contract.events` methods.\r\n\r\nThis issue has appeared on beta.49, and still existing on beta.51\r\n\r\n#### Expected behavior\r\n```\r\ncontract.events.Transfer({ fromBlock: fromBlock }, function(error, event) {\r\n  console.log(event);\r\n});\r\n```\r\nshould log events.\r\n\r\n#### Actual behavior\r\nError log\r\n```\r\nCannot read property 'currentProvider' of undefined\r\n    at GetPastLogsMethod._callee$ (/node_modules/web3-core-method/dist/web3-core-method.cjs.js:97:44)\r\n    at tryCatch (/node_modules/regenerator-runtime/runtime.js:45:40)\r\n    at Generator.invoke [as _invoke] (/node_modules/regenerator-runtime/runtime.js:271:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/node_modules/regenerator-runtime/runtime.js:97:21)\r\n    at asyncGeneratorStep (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at /node_modules/@babel/runtime/helpers/asyncToGenerator.js:32:7\r\n    at new Promise (<anonymous>)\r\n    at GetPastLogsMethod.<anonymous> (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:21:12)\r\n    at GetPastLogsMethod.execute (/node_modules/web3-core-method/dist/web3-core-method.cjs.js:122:25)\r\n    at EventLogSubscription.subscribe (/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:106:32)\r\n    at EventSubscriptionsProxy.subscribe (/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:602:189)\r\n    at Proxy.<anonymous> (/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:583:27)\r\n````\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.51\r\n* nodejs: v11.7.0\r\n* browser: console\r\n* ethereum node: Infura\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nI am trying to call a method from blockchain contract which returns single value of type tuple[]:\r\n\r\n```typescript\r\n    const web3 = new Web3(ProviderAddress);\r\n    const contract = new web3.eth.Contract(Web3ContractABI, ContractAddress);\r\n    const users = await contract.methods.getAllUsers().call();\r\n```\r\n\r\npart of ABI JSON regarding getAllUsers function:\r\n\r\n```\r\n  {\r\n    'constant': true,\r\n    'inputs': [],\r\n    'name': 'getAllUsers',\r\n    'outputs': [\r\n      {\r\n        'components': [\r\n          {\r\n            'name': 'idUser',\r\n            'type': 'address'\r\n          },\r\n          {\r\n            'name': 'param1',\r\n            'type': 'int256'\r\n          },\r\n          {\r\n            'name': 'param2',\r\n            'type': 'int256'\r\n          }\r\n        ],\r\n        'name': '',\r\n        'type': 'tuple[]'\r\n      }\r\n    ],\r\n    'payable': false,\r\n    'stateMutability': 'view',\r\n    'type': 'function'\r\n  },\r\n```\r\n\r\non remix.ethereum.org when i call the function i get:\r\n```\r\n0: tuple(address,int256,int256)[]: 0xf2D38fC631d4FCFbAeDB274D2b95C436ab75a1B4,0,0\r\n```\r\n#### Expected behavior\r\n\r\nusers should be [[\"0xf2D38fC631d4FCFbAeDB274D2b95C436ab75a1B4\", ...]]\r\n\r\n#### Actual behavior\r\n\r\nusers is [[]]\r\n\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n#### Additional notes\r\n\r\nI have already found the source of this error, will create PR soon.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.51\r\n* nodejs: 10.14.2\r\n* ethereum node - instance: Geth/v1.8.16-stable-477eb093/linux-amd64/go1.11, private network\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"I am on 1.0.0-beta.50 and React-Native 0.57 via expo SDK 32.0\r\n\r\nI am trying to connect to a private ethereum node with the following codes:\r\n\r\n```\r\nconst web3 = new Web3(\r\n\tnew Web3.providers.WebsocketProvider('wss://u0yyyar44q-u0nczix681-wss.us-east-2.kaleido.io', {headers:{authorization: 'Basic dTBxdGxkcTVkdzpMWFh5WUtLVzIyZEFJUDhTNm9sWEFSbzNkZDFEYkYwS1VYc3laUm5saXVv'}})\r\n);\r\n\r\nweb3.eth.getBlock(\"latest\").then((latestBlock) => {\r\nconsole.log(\"Latest Block Via HTTP Provider: \")\r\nconsole.log(latestBlock);\r\n```\r\n\r\nI am unable to connect to my node. The following error is shown.\r\n\r\n`url == null`\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nAfter deploying a new contract I never receive a `receipt` object.\r\n\r\n    const deploy = { abi: [...], bytecode: '0x...' };\r\n\r\n    const web3 = new Web3 (window ['ethereum']);\r\n    const contract = new web3.eth.Contract (deploy.abi);\r\n\r\n    window ['ethereum'].enable()\r\n        .then (accounts => {\r\n\r\n            contract.deploy({\r\n                data: deploy.bytecode,\r\n                arguments: [...]\r\n            })\r\n            .send ({\r\n                from: accounts [0]\r\n            })\r\n            .on ('error',           console.error)\r\n            .on ('transactionHash', console.log)       /* this is working */\r\n            .on ('receipt',         console.log);      /* this never gets executed */\r\n\r\n        })\r\n        .catch (console.error);\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nReceiving a contract object containing the address of the new contract in `.on ('receipt', ...`.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\nNothing happens (also no `error`).\r\n\r\nOn my node I can look up the contract address manually.\r\nThe contract gets created.\r\n\r\n### Versions \r\n* web3.js: `1.0.0-beta.51 (latest)`\r\n* metamask: `6.3.0 (latest)`\r\n* browser: `Chromium`\r\n* ethereum node: `instance: Geth/v1.8.23-stable-c9427004/linux-amd64/go1.11.5`\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->"},{"labels":["bug"],"text":"### Description \r\nI am trying update web3 lib from web3.1.0.0-beta.33 to current version (web3.js: 1.0.0 - beta.50).\r\n\r\n`web3.eth.accounts.wallet` - i can't figure that class.\r\nin docs - https://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#wallet - there is length\r\nin git - https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/models/Wallet.js - there is accountsIndex\r\nin typings - there nothing except methods\r\n\r\nin old code i used \r\n```js\r\nweb3.eth.accounts.wallet.load(password, keyname)\r\nif (web3.eth.accounts.wallet.length){\r\n   // any check\r\n}\r\n ```\r\n\r\n### Versions \r\n* web3.js: 1.0.0 - beta.50"},{"labels":["bug"],"text":"### Description \r\n\r\nI have a simple code that sends signed transaction:\r\n```\r\n    const promiseEvent = ethProvider.sendSignedTransaction('0x' + serializedTx.toString('hex'));\r\n    return promiseEvent.once('transactionHash', callback)\r\n        .on('confirmation', (confirmNumber, receipt) =>\r\n            console.log({ CONFIRMATION: { confirmNumber, receipt } })\r\n        )\r\n        .on('error', (error => {\r\n                console.log({ ERROR: error });\r\n            })\r\n        );\r\n```\r\nThat emit error event: \r\n```\r\nTransaction has been reverted by the EVM: :{\r\n  \"blockHash\": \"0xded395d97b26b7e43a2f09a6a72e804dac3e579f8e41c068f4bf2822e4f94c93\",\r\n  \"blockNumber\": 5285527,\r\n  \"contractAddress\": null,\r\n  \"cumulativeGasUsed\": 636536,\r\n  \"from\": \"0x0b30df42e49d3906f0c50916d6e99727b58a8650\",\r\n  \"gasUsed\": 65455,\r\n  \"logs\": [\r\n    {\r\n      \"address\": \"0x9e2A802e608A3C046860c2039792DCF0876c4799\",\r\n      \"blockHash\": \"0xded395d97b26b7e43a2f09a6a72e804dac3e579f8e41c068f4bf2822e4f94c93\",\r\n      \"blockNumber\": 5285527,\r\n      \"data\": \"0x0000000000000000000000000000000000000000000000008ac72c1cd85aa000\",\r\n      \"logIndex\": 6,\r\n      \"removed\": false,\r\n      \"topics\": [\r\n        \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\r\n        \"0x0000000000000000000000007e23a7f3d51826650da4f515fbc499238f4d79e1\",\r\n        \"0x0000000000000000000000000b30df42e49d3906f0c50916d6e99727b58a8650\"\r\n      ],\r\n      \"transactionHash\": \"0xa0e7c70064e7c80bc7534b40f951b434fc9e88a8547a4d88edd06e1e61ce7967\",\r\n      \"transactionIndex\": 8,\r\n      \"id\": \"log_0x0bd512a82042db1f3eda33ba6863b999ff916617b5a93a784960cd3710532fe9\"\r\n    },\r\n    {\r\n      \"address\": \"0xa1c332933F9F4AAb72f128bb294B0CA22dAcb19D\",\r\n      \"blockHash\": \"0xded395d97b26b7e43a2f09a6a72e804dac3e579f8e41c068f4bf2822e4f94c93\",\r\n      \"blockNumber\": 5285527,\r\n      \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n      \"logIndex\": 7,\r\n      \"removed\": false,\r\n      \"topics\": [\r\n        \"0x624288b64c6c3f645691554ea1a84c4d17e0753059f967b43653768fbfcb5afb\",\r\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n        \"0x0000000000000000000000000b30df42e49d3906f0c50916d6e99727b58a8650\"\r\n      ],\r\n      \"transactionHash\": \"0xa0e7c70064e7c80bc7534b40f951b434fc9e88a8547a4d88edd06e1e61ce7967\",\r\n      \"transactionIndex\": 8,\r\n      \"id\": \"log_0xf22050ce849b7c4513378d55afa2d33ece66a7773a3ae2ef8e7915102c0f29b2\"\r\n    },\r\n    {\r\n      \"address\": \"0x7e23A7f3D51826650dA4f515fBc499238f4D79e1\",\r\n      \"blockHash\": \"0xded395d97b26b7e43a2f09a6a72e804dac3e579f8e41c068f4bf2822e4f94c93\",\r\n      \"blockNumber\": 5285527,\r\n      \"data\": \"0x0000000000000000000000000000000000000000000000008ac72c1cd85aa000\",\r\n      \"logIndex\": 8,\r\n      \"removed\": false,\r\n      \"topics\": [\r\n        \"0x09bd3894cb7ab22415416dac0fecc519855a4b0842f1c9115e562ef557ab577b\",\r\n        \"0x0000000000000000000000000b30df42e49d3906f0c50916d6e99727b58a8650\"\r\n      ],\r\n      \"transactionHash\": \"0xa0e7c70064e7c80bc7534b40f951b434fc9e88a8547a4d88edd06e1e61ce7967\",\r\n      \"transactionIndex\": 8,\r\n      \"id\": \"log_0x5f06e1efe77a7b8260055839863c5bb06ff2b328f58661cc1c137e30b0194a02\"\r\n    }\r\n  ],\r\n  \"logsBloom\": \"0xr\n  \"status\": true,\r\n  \"to\": \"0x7e23a7f3d51826650da4f515fbc499238f4d79e1\",\r\n  \"transactionHash\": \"0xa0e7c70064e7c80bc7534b40f951b434fc9e88a8547a4d88edd06e1e61ce7967\",\r\n  \"transactionIndex\": 8\r\n}\r\n\r\n```\r\n    at SafeSubscriber._next (/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1017:32)\r\n    at SafeSubscriber.__tryOrUnsub (/node_modules/rxjs/internal/Subscriber.js:207:16)\r\n    at SafeSubscriber.next (/node_modules/rxjs/internal/Subscriber.js:145:22)\r\n    at Subscriber._next (/node_modules/rxjs/internal/Subscriber.js:89:26)\r\n    at Subscriber.next (/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at TransactionObserver.emitNext (/node_modules/web3-core-method/dist/web3-core-method.cjs.js:438:16)\r\n    at _callee2$ (/node_modules/web3-core-method/dist/web3-core-method.cjs.js:408:24)\r\n    at tryCatch (/node_modules/regenerator-runtime/runtime.js:45:40)\r\n    at Generator.invoke [as _invoke] (/node_modules/regenerator-runtime/runtime.js:271:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/node_modules/regenerator-runtime/runtime.js:97:21)\r\n    at asyncGeneratorStep (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7) }\r\n```\r\n\r\n```\r\nwhile the transaction was successful:\r\nhttps://ropsten.etherscan.io/tx/0xa0e7c70064e7c80bc7534b40f951b434fc9e88a8547a4d88edd06e1e61ce7967\r\n\r\nProbably the `status` field format was changed and the method `hasRevertReceiptStatus` doesn't work as expected:\r\n```\r\n  hasRevertReceiptStatus(receipt) {\r\n    return Boolean(parseInt(receipt.status)) === false && receipt.status !== undefined && receipt.status !== null;\r\n  }\r\n```\r\n### Versions \r\n* web3.js: ^1.0.0-beta.50\r\n* nodejs: 8.11.1\r\n* ethereum node: ropsten\r\n\r\nDetails:\r\n![image](https://user-images.githubusercontent.com/22537517/55058103-9fa52a80-509d-11e9-910b-a7b45bbd13c5.png)\r\n\r\nCould you please give any comments? Is it a bug or the specific of testnet or whatever? Thanks a lot!"},{"labels":["bug"],"text":"\r\n### Description <!-- In plain words, what happened -->\r\nI got this error when getting the events in the following code\r\n```js\r\nawait contract.getPastEvents('ValidatorAdded', {fromBlock: 0});\r\n```\r\n\r\nThe abi of the event:\r\n```\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"name\": \"validator\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"ValidatorAdded\",\r\n      \"type\": \"event\"\r\n    }\r\n``` \r\n\r\n\r\n#### Error Logs \r\n```\r\nError: Empty outputs array given!\r\n    at AbiCoder.decodeParameters (web3-eth-abi.umd.js:59)\r\n    at AbiCoder.decodeLog (web3-eth-abi.umd.js:121)\r\n    at EventLogDecoder.decode (web3-eth-contract.umd.js:228)\r\n    at web3-eth-contract.umd.js:775\r\n    at Array.map (<anonymous>)\r\n    at PastEventLogsMethod.afterExecution (web3-eth-contract.umd.js:774)\r\n    at PastEventLogsMethod._callee$ (web3-core-method.umd.js:99)\r\n    at tryCatch (runtime.js:62)\r\n    at Generator.invoke [as _invoke] (runtime.js:288)\r\n    at Generator.prototype.(:3000/anonymous function) [as next] (http://localhost:3000/static/js/bundle.js:1382:21)\r\n    at asyncGeneratorStep (asyncToGenerator.js:3)\r\n    at _next (asyncToGenerator.js:25)\r\n```\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50"},{"labels":["bug"],"text":"### Description\r\nI've got the error when I specify `gasPrice:0` in raw tx object to be signed by `web3.eth.accounts.signTransaction()`. Example code snippet:\r\n\r\n    let tx = {\r\n        ... \r\n        gasPrice: 0, // it is OK in JP Quorum blockchain\r\n        ...\r\n    }\r\n\r\n    let signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\r\n\r\n#### Expected behavior\r\nSigned tx object in`signedTx` variable.\r\n\r\n#### Actual behavior\r\n\r\n    TypeError: this.getGasPrice is not a function at Proxy._callee\r\n\r\nAlso it may be worthwhile to change the condition for checking the `tx.gasPrice`:\r\n\r\n            // web3.js/packages/web3-eth-accounts/src/Accounts.js:128\r\n            if (!tx.gasPrice) {\r\n                tx.gasPrice = await this.getGasPrice();\r\n            }\r\n\r\nThe condition is true if `ts.gasPrice` directly specified by user as 0. May be somthing like:\r\n\r\n            if ((typeof tx.gasPrice == \"undefined\") || (tx.gasPrice < 0)) {\r\n                tx.gasPrice = await this.getGasPrice();\r\n            }\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: v8.11.3\r\n* ethereum node: JP Quorum\r\n"},{"labels":["bug"],"text":"### Description\r\nAfter updating from `1.0.0-beta.35` to `1.0.0-beta.50` I have got a problem with this code snippet in my program:\r\n\r\n    let decryptedAccount = web3.eth.accounts.decrypt(V3keystoreStr, password);\r\n    let baseNonce        = await web3.eth.getTransactionCount(decryptedAccount.address);\r\n    \r\n    let paramObj         = {from: decryptedAccount.address, gas: TX_GAS_LIMIT, gasPrice: 0 };\r\n\r\n    let contract = new web3.eth.Contract(contractAbi, contractAddress, paramObj);\r\n    let txData   = contract.myMethod(...myMethodParams).encodeABI();\r\n\r\n    let tx = {\r\n        from:      decryptedAccount.address, \r\n        to:        contractAddress,\r\n        data:      txData,\r\n\r\n        gas:       TX_GAS_LIMIT,\r\n        gasPrice:  0,            // JP Quorum\r\n        chainId:   CHAIN_ID,\r\n\r\n        nonce:     baseNonce\r\n    }\r\n\r\n    let signedTx = await decryptedAccount.signTransaction(tx);\r\n\r\n#### Expected behavior\r\nRaw transaction (`tx`) should be signed, and returned in `signedTx`.\r\n\r\n#### Actual behavior\r\nI've got the error:\r\n\r\n    TypeError: this.accounts.signTransaction is not a function at Proxy.signTransaction (/var/work/test-1by1-4/dsd/tests/node_modules/web3-eth-accounts/dist/web3-eth-accounts.cjs.js:65:28)\r\n\r\nI think the problem in `web3.js/packages/web3-eth-accounts/src/models/Account.js` module. So in my code:\r\n\r\n      let decryptedAccount = web3.eth.accounts.decrypt(V3keystoreStr, password);\r\n\r\nThe `web3.accounts.decrypt(...)` function is called. And it calls `Account.fromPrivateKey(...)`:\r\n\r\n    // Account.js: line 128:\r\n    static fromPrivateKey(privateKey, accounts = {}) {\r\n        return new Account(fromPrivate(privateKey), accounts.transactionSigner);\r\n                                                    // Account.accounts = transactionSigner\r\n    }\r\n\r\nWhen I call:\r\n\r\n    let signedTx = await decryptedAccount.signTransaction(tx);\r\n\r\nIt calls:\r\n\r\n    // Account.js:  line 60:\r\n    signTransaction(tx, callback) {\r\n        return this.accounts.signTransaction(tx, this.privateKey, callback);\r\n                             // no signTransaction(...) in transactionSigner object\r\n    }\r\n\r\nAnd it is no signTransaction(...) function in transactionSigner object.\r\n\r\n### Versions \r\n* web3js: 1.0.0-beta.50\r\n* nodejs: v8.11.3\r\n* ethereum node: JP Quorum\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nCan't send contract method when using infura and wallet account. It used to work in beta.37 but fails now. \r\n\r\nI suspect that EthSendTransactionMethod doesn't see accounts in wallet. The check here:\r\nhttps://github.com/ethereum/web3.js/blob/1.0/packages/web3-core-method/src/methods/transaction/EthSendTransactionMethod.js#L156 compares `moduleInstance.accounts` but the wallet adds accounts into `accounts.wallet.accounts`:\r\nhttps://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/models/Wallet.js#L34\r\n\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\n`contract.methodName.send()` should send transaction.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\n`contract.methodName.send()` fails with \r\n```\r\nWebSocket connection to 'wss://rinkeby.infura.io/ws/v3/_token_' failed: Received a broken close frame containing a reserved status code.\r\n``` \r\nAnd this is what's happens in websocket:\r\n```json\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": 127,\r\n    \"error\": {\"code\": -32601, \"message\": \"The method eth_sendTransaction does not exist/is not available\"}\r\n}\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\n```js\r\n// Create infuara provider\r\nconst provider = new WebsocketProvider(\r\n  `wss://${INFURA_WEBSOCKET_DOMAIN}/ws/v3/${INFURA_API_KEY}`,\r\n);\r\n\r\nconst web3 = new Web3(provider);\r\n\r\n// Add account from private key\r\nweb3.eth.accounts.wallet.create(0, Web3Utils.randomHex(32));\r\n\r\nconst account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);\r\nweb3.eth.accounts.wallet.add(account);\r\n\r\n// Setup contract\r\nconst contract = new web3.eth.Contract(abi, CONTRACT_ADDRESS);\r\n\r\n// Send method\r\ncontract.methods.method.send()\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: 11.12.0\r\n* browser: Chrome 73\r\n* ethereum node: Infura websocket\r\n\r\n\r\nTell me if you need more info. :)\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### I am trying to use ecRecover in 1.0.0-beta.50, not working!\r\n\r\n\r\n#### I expected to get the recoveredAddress, but get Error\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### code is here\r\n·\r\nvar account_address = '0x3Df7a01f4CE7d6F9870325B219647daFF3f3467c';\r\nvar message = '8dfe9be33ccb1c830e048219729e8c01f54c768004d8dc035105629515feb38e';\r\n    console.log(message.length);\r\n    var messageBuffer = new Buffer(message, 'hex');\r\n    console.log('message: ' + message);\r\n    web3.eth.personal.sign(message, account_address, '123456').then(result => {\r\n        console.log('signature: ' + result);\r\n        var pub = web3.eth.personal.ecRecover(message, result).then(recoveredAddress => {\r\n            console.log('recoveredAddress: ' + recoveredAddress);\r\n            console.log('isMatch: ' + recoveredAddress === account_address);\r\n        });\r\n    });\r\n·\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\n\r\n\r\n#### Error Logs \r\n`\r\n(node:8572) UnhandledPromiseRejectionWarning: Error: Invalid Arguments length: expected: 3, given: 2......\r\n`\r\n\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: 8.14.0\r\n* browser: no\r\n* ethereum node: 1.8.23\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nSubscribe to logs is broken in beta.49+\r\n\r\n#### Expected behavior\r\n\r\nI should be able to subscribe to `logs` from specified block and specified topics.\r\n\r\n#### Actual behavior\r\n\r\nAn exception is thrown\r\n\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```js\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3(\"ws://localhost:8546\");\r\n\r\nweb3.eth.subscribe('logs', { fromBlock: 479095 }, (err, result) => {\r\n  console.log(err, result);\r\n});\r\n```\r\n\r\n#### Error Logs \r\n\r\n```bash\r\nTypeError: Cannot read property 'currentProvider' of undefined\r\n    at GetPastLogsMethod._callee$ (/home/sokun/labs/web3js1Test/node_modules/web3-core-method/dist/web3-core-method.cjs.js:97:44)\r\n    at tryCatch (/home/sokun/labs/web3js1Test/node_modules/regenerator-runtime/runtime.js:45:40)\r\n    at Generator.invoke [as _invoke] (/home/sokun/labs/web3js1Test/node_modules/regenerator-runtime/runtime.js:271:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/home/sokun/labs/web3js1Test/node_modules/regenerator-runtime/runtime.js:97:21)\r\n    at asyncGeneratorStep (/home/sokun/labs/web3js1Test/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (/home/sokun/labs/web3js1Test/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at /home/sokun/labs/web3js1Test/node_modules/@babel/runtime/helpers/asyncToGenerator.js:32:7\r\n    at new Promise (<anonymous>)\r\n    at GetPastLogsMethod.<anonymous> (/home/sokun/labs/web3js1Test/node_modules/@babel/runtime/helpers/asyncToGenerator.js:21:12)\r\n    at GetPastLogsMethod.execute (/home/sokun/labs/web3js1Test/node_modules/web3-core-method/dist/web3-core-method.cjs.js:122:25)\r\n    at LogSubscription.subscribe (/home/sokun/labs/web3js1Test/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:106:32)\r\n    at Proxy.subscribe (/home/sokun/labs/web3js1Test/node_modules/web3-eth/dist/web3-eth.cjs.js:425:77)\r\n    at Object.<anonymous> (/home/sokun/labs/web3js1Test/index.js:4:10)\r\n    at Module._compile (module.js:653:30)\r\n    at Object.Module._extensions..js (module.js:664:10)\r\n    at Module.load (module.js:566:32) null\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.49+\r\n* nodejs: v8.14.0\r\n* browser: NA\r\n* ethereum node: geth v1.8.20\r\n\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description\r\nWhen using Web3@1.0.00-beta.50 in a React Web development environment contract type uints are returned from infura and parsed into js ints. When creating a build of the React project and running it on the server numbers are being parsed into BigNumber objects. The jsonrpc response is the same for both local dev and production server.\r\n\r\n\r\n#### Local Host React Dev Behavior\r\nNetwork response:\r\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x0000000000000000000000000000000000000000000000000000000000000001\"}`\r\n\r\n```\r\n       contract.methods.GetLength().call().then((res)=>{\r\n          console.log('Length result',res);\r\n         // Length result 1\r\n        },(err)=>{\r\n        });\r\n```\r\n\r\n#### Production React Build Behavior \r\nNetwork response:\r\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x0000000000000000000000000000000000000000000000000000000000000001\"}`\r\n\r\n```\r\n       contract.methods.GetLength().call().then((res)=>{\r\n          console.log('Length result',res);\r\n         // Length result e {_hex: \"0x01\", _ethersType: \"BigNumber\"}\r\n        },(err)=>{\r\n        });\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n    1. Import web3\r\n    2. Set the provider to infura/v3\r\n    3. Create contract instance\r\n    4. Call method that returns a uint solidity type\r\n    5. Run npm start on local machine\r\n    6. Run npm build\r\n    7. Compare the result of the promise callback between the two\r\n         \r\n```\r\n\r\n  import Web3React from 'web3';\r\n       var web3react = new Web3React(\"https://rinkeby.infura.io/v3/key\");\r\n       var contract = new web3react.eth.Contract(_abi, _addr);\r\n        contract.methods.GetLength().call().then((res)=>{\r\n          console.log('Length result',res);\r\n        },(err)=>{\r\n        });\r\n\r\n```\r\n\r\n\r\n\r\n### Versions \r\n* web3.js: web3@1.0.0-beta.50\r\n* nodejs:\r\n* browser: Chrome\r\n* ethereum node:\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"### Description \r\nCalling method on web3.eth.Contract web3js in Firefox, Safari, and iOS browsers throws a CORS error, same method call will succeed in Chrome desktop only.\r\n\r\n\r\n#### Expected behavior\r\n\r\n    This should succeed like it does in Chrome Desktop\r\n\r\n      var contract = new web3.eth.Contract(_abi, _address);\r\n      contract.methods.GetLength().call().then((res)=>{...\r\n\r\n\r\n\r\n\r\n\r\n#### Actual behavior\r\n\r\n      In firefox I get an error for cors\r\n      var contract = new web3.eth.Contract(_abi, _address);\r\n      contract.methods.GetLength().call().then((res)=>{...\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n\r\n    0. Use Firefox, Safari, or any iOS browser\r\n    1. Import `web3js beta 50`\r\n    2. Set the provider to `infura v3`\r\n    3. Create contract instance and make request\r\n\r\n\r\n\r\n    ```\r\n        var web3 = new Web3(\"https://rinkeby.infura.io/v3/key\");\r\n        try {\r\n        var contract = new web3.eth.Contract(JSON.parse(table.abi), table[network]);\r\n        contract.methods.GetLength().call().then((res)=>{\r\n          //console.log(res);\r\n          resolve(res);\r\n        },(err)=>{\r\n          alert(err);\r\n          console.log(err);\r\n          reject();\r\n        });\r\n      }catch(err){\r\n        //alert(err);\r\n        console.log(err);\r\n        reject();\r\n      }    \r\n    ```\r\n\r\n\r\n\r\n#### Error Logs \r\n\r\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://rinkeby.infura.io/v3/key. (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).[Learn More]\r\n\r\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://rinkeby.infura.io/v3/key. (Reason: CORS request did not succeed).\r\n\r\n#### Gists\r\n\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: beta.50\r\n* nodejs:\r\n* browser: Firefox, Safari, Chrome (mobile)\r\n* ethereum node:\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"This is on version `1.0.0-beta.50`. Trying to sign a transaction fails with:\r\n\r\n```\r\n(node:87086) UnhandledPromiseRejectionWarning: TypeError: this.getGasPrice is not a function\r\n    at Proxy._callee$ (/path/to/node_modules/web3-eth-accounts/dist/web3-eth-accounts.cjs.js:387:29)\r\n```\r\n\r\nI looked into the code that stack trace is pointing to, and it seems `getGasPrice` is indeed undefined there. I found a fix for it, but it feels a bit too straight-forward, so I'm suspicious I'm just doing something dumb. If someone could do a sanity check on the below that'd be great.\r\n\r\nShouldn't [this](https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/factories/MethodFactory.js#L34) say `GetGasPriceMethod` instead, in line with [this](https://github.com/ethereum/web3.js/blob/1.0/packages/web3-core-method/src/index.js#L42)?\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nCannot call contract's methods. I use ERC20 Token transactions in my code and at the contract's send() method the application freezes, but no errors. I would like to ask how should I initialize the contract or the web3 in order to make calls by constractInstance.methods.transfer(address, amount).send();\r\n\r\nI saw at the new version, the web3 constructor's Web3ModuleOptions parameter's interface changed, so I picked out from the initialization. Is there an example (that I searched for but unfortunately I didn't find) how should implement the sign() method?\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n`await this.contractInstance.methods.transfer(addressTo, 10).send({from: addressMain, , gas: 100000, gasPrice: \"2000000000\"});` should return true (or something)\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nAt the above instruction the application freezes. \r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\nSo here is my code, the first console.log of sendToken() method has input, but after the send has no answer.\r\n\r\n```\r\nimport { defaultABI } from \"./ERC20DefaultABI\";\r\nimport { EthereumService } from \"../EthereumService\";\r\nimport { Contract } from 'web3-eth-contract';\r\nimport { AbiItem } from 'web3-utils';\r\n\r\nexport class ERC20Service {\r\n\r\n    private contractAddress: string;\r\n    private abi: AbiItem[];\r\n    private ethereumService: EthereumService;\r\n    private tokenName: string;\r\n    private contractInstance: Contract;\r\n\r\n    constructor(ethereumService: EthereumService, contractAddress: string, abi: AbiItem[] = null) {\r\n        this.ethereumService = ethereumService;\r\n        this.contractAddress = contractAddress;\r\n        this.abi = abi ? abi : defaultABI;\r\n        this.contractInstance = this.ethereumService.getContractInstance(this.contractAddress, this.abi); //new this.web3.eth.Contract(abi, address);\r\n    }\r\n\r\n    public async sendToken() {\r\n        try{\r\n            console.log(\"The sendToken method called\");\r\n            const success = await this.contractInstance.methods.transfer(\"0x8bFE61d6D375DbCeE8cBaf79799f33AB2973d02c\", 10).send({from: \"0xb4b00d716e6409Af13574e87647BF6a744f30e7B\", gas: 100000, gasPrice: \"2000000000\"});\r\n            console.log(`The TOKEN successfully sended: ${success}`);\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n        }\r\n        // this.tokenName= methods.name();\r\n    }\r\n}\r\n```\r\n\r\nThe web3 initialization:\r\n\r\n```\r\n...\r\nthis.web3 = new Web3({defaultAccount: mainAddr,\r\n                defaultBlock: \"latest\",\r\n                defaultGas: 21001,\r\n                defaultGasPrice: \"2000000000\",\r\n                transactionBlockTimeout: 50,\r\n                transactionConfirmationBlocks: 24,\r\n                transactionPollingTimeout: 480}\r\n                 , undefined);\r\n...\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: 10.11.0\r\n* ethereum node: geth 0.20.1\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nIf you want to estimate the gas of an contract you need to pass an callback to the function according to the documentation: https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#deploy.\r\n\r\nBut this is not working. The function returns a promise instead.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\n\r\nDocumentation says:\r\n\r\n```\r\n// Gas estimation\r\nmyContract.deploy({\r\n    data: '0x12345...',\r\n    arguments: [123, 'My String']\r\n})\r\n.estimateGas((err, gas) => {\r\n    console.log(gas);\r\n});\r\n```\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\n`estimateGas` returns a promise and doesn't accept a callback. The following code is working:\r\n\r\n```\r\nmyContract.deploy ({\r\n    data: myBytecode,\r\n    arguments: ['arg1']\r\n})\r\n.estimateGas ()\r\n.then (console.log);\r\n```\r\n\r\n#### Error Logs \r\n\r\n`Uncaught (in promise) DOMException: Failed to execute 'postMessage' on 'Window': (e, g) => console.log (g) could not be cloned.`\r\n\r\n### Versions \r\n* web3.js: `web3.beta.46`\r\n* browser: `Chromium`\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nWhen a contract has an event defined and attempts to make an external call to another contract which emits an event with the same name, the call fails.  \r\n\r\nMore specifically: we are creating a contract with implements ERC721. ERC721 has the following event:\r\n```\r\nevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n```\r\nOur contract then attempts to call transferFrom on an ERC20 token, which emits the following:\r\n```\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\r\n```\r\nThe issue occurs when that Transfer event is emitted.\r\n\r\nI've tested this using Truffle, Web3 beta 37, and Web3 beta 50.  All of them fail, but each in a slightly different way.  \r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCalling a function which triggers multiple events which happened to be named the same should work like any other call.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nWeb3 beta 50 throws the error below.  However if you catch the error and ignore it, the transaction is successful.\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\nI created a sample repo which tries to demonstrate the issue using as simple of contracts as possible: https://github.com/hardlydifficult/SolidityBugInvestigation_EventsWithTheSameName\r\n\r\nClone the repo and run\r\n```\r\nnpm i\r\nnpm run test\r\n```\r\n\r\nAnd see `test/Test.js`\r\n\r\n#### Error Logs \r\n\r\n```\r\nError: Transaction has been reverted by the EVM:\r\n{\r\n  \"transactionHash\": \"0xc008bda380d341e7705974e229e119177b4daf3c9e5962c62b9a26735a3f7096\",\r\n  \"transactionIndex\": 0,\r\n  \"blockHash\": \"0x83ebce6d311fecb0f794fe1966186b2f60e407cfcb75da53a8d62c5a509a649b\",\r\n  \"blockNumber\": 8,\r\n  \"from\": \"0xf17f52151ebef6c7334fad080c5704d77216b732\",\r\n  \"to\": \"0x345ca3e014aaf5dca488057592ee47305d9b3e10\",\r\n  \"gasUsed\": 62139,\r\n  \"cumulativeGasUsed\": 62139,\r\n  \"contractAddress\": null,\r\n  \"logs\": [\r\n    {\r\n      \"logIndex\": 0,\r\n      \"transactionIndex\": 0,\r\n      \"transactionHash\": \"0xc008bda380d341e7705974e229e119177b4daf3c9e5962c62b9a26735a3f7096\",\r\n      \"blockHash\": \"0x83ebce6d311fecb0f794fe1966186b2f60e407cfcb75da53a8d62c5a509a649b\",\r\n      \"blockNumber\": 8,\r\n      \"address\": \"0xf25186B5081Ff5cE73482AD761DB0eB0d25abfBF\",\r\n      \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n      \"topics\": [\r\n        \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\r\n        \"0x000000000000000000000000f17f52151ebef6c7334fad080c5704d77216b732\",\r\n        \"0x000000000000000000000000c5fdf4076b8f3a5357c5e395ab970b5b54098fef\"\r\n      ],\r\n      \"type\": \"mined\",\r\n      \"id\": \"log_0x78521e4079943976c14e5055429cb2063ab0fb1966d8153a3b01d288131edcd8\"\r\n    },\r\n    {\r\n      \"logIndex\": 1,\r\n      \"transactionIndex\": 0,\r\n      \"transactionHash\": \"0xc008bda380d341e7705974e229e119177b4daf3c9e5962c62b9a26735a3f7096\",\r\n      \"blockHash\": \"0x83ebce6d311fecb0f794fe1966186b2f60e407cfcb75da53a8d62c5a509a649b\",\r\n      \"blockNumber\": 8,\r\n      \"address\": \"0xf25186B5081Ff5cE73482AD761DB0eB0d25abfBF\",\r\n      \"data\": \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\",\r\n      \"topics\": [\r\n        \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\r\n        \"0x000000000000000000000000f17f52151ebef6c7334fad080c5704d77216b732\",\r\n        \"0x000000000000000000000000345ca3e014aaf5dca488057592ee47305d9b3e10\"\r\n      ],\r\n      \"type\": \"mined\",\r\n      \"id\": \"log_0xe26a4a5aabbe8a48919466efeb66fc102036243870d8316df06591fe71fc8791\"\r\n    }\r\n  ],\r\n  \"status\": true,\r\n  \"logsBloom\": \"0xr\n  \"v\": \"0x1b\",\r\n  \"s\": \"0x3e65aa768ff40efe0caa3a1ed61ea577ff5f2b9b1f38034e006d5613d12a20f4\"\r\n}\r\n      at SafeSubscriber._next (node_modules\\web3-core-method\\dist\\web3-core-met\r\nhod.cjs.js:1017:32)\r\n      at SafeSubscriber.__tryOrUnsub (node_modules\\rxjs\\src\\internal\\Subscriber\r\n      at SafeSubscriber.next (node_modules\\rxjs\\src\\internal\\Subscriber.ts:209:\r\n14)\r\n      at Subscriber._next (node_modules\\rxjs\\src\\internal\\Subscriber.ts:139:22)\r\n      at Subscriber.next (node_modules\\rxjs\\src\\internal\\Subscriber.ts:99:12)\r\n      at TransactionObserver.emitNext (node_modules\\web3-core-method\\dist\\web3-\r\ncore-method.cjs.js:438:16)\r\n      at _callee2$ (node_modules\\web3-core-method\\dist\\web3-core-method.cjs.js:\r\n408:24)\r\n      at tryCatch (node_modules\\regenerator-runtime\\runtime.js:45:40)\r\n      at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtim\r\ne.js:271:22)\r\n      at Generator.prototype.(anonymous function) [as next] (node_modules\\regen\r\nerator-runtime\\runtime.js:97:21)\r\n      at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerat\r\nor.js:3:24)\r\n      at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\r\n      at process._tickCallback (internal/process/next_tick.js:68:7)\r\n```\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: Beta 37 and Beta 50\r\n* nodejs: 10.15.1\r\n* browser: n/a\r\n* ethereum node: ganache 1.3.1 and ganache-cli 6.4.1\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n\r\nThis was originally filled with Truffle here: https://github.com/trufflesuite/truffle/issues/1729\r\nBut after more investigation, it appears to be a Web3 issue."},{"labels":["bug"],"text":"### Description \r\nSubscribing to pending transactions gives an error and exits the program while **using IPC connection.** \r\n\r\n\r\n#### Expected behavior\r\nSubscribing to new pending transaction (web3.eth.subscribe('pendingTransactions')) is expected to return a json response with a txhash of new transaction.\r\n\r\n#### Actual behavior\r\nIt returns a json response but it terminates the execution of the program with an error (see in Error logs section the actual error message).\r\n\r\nI actually tried to debug the code and it seems that it fails here:\r\n\r\n```\r\nif (!isObject(response)) {\r\n        response = JSON.parse(response);\r\n      }\r\n```\r\n\r\nwhile trying to parse the JSON response that comes from the IPC pipe. It seems that in the variable response it appears not only the JSON response of the pending transaction but also the first response that gives the subscription ID when starting the subscription to the node so it fails to parse that object to json.\r\n(This is my interpretation, it can be another thing but hope this helps to fix the problem but if it is this, maybe other subscription types -like block headers- will fail as well).\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Import web3\r\n2. Set IPC Provider\r\n3. Subscribe to new pending transactions.\r\n\r\n#### Error Logs \r\nSyntaxError: Unexpected token { in JSON at position 71\r\n    at JSON.parse (<anonymous>)\r\n    at IpcProvider.onMessage (/node_modules/web3-providers/dist/web3-providers.cjs.js:285:25)\r\n    at IpcProvider.onMessage (/node_modules/web3-providers/dist/web3-providers.cjs.js:551:71)\r\n    at emitOne (events.js:116:13)\r\n    at Socket.emit (events.js:211:7)\r\n    at addChunk (_stream_readable.js:263:12)\r\n    at readableAddChunk (_stream_readable.js:250:11)\r\n    at Socket.Readable.push (_stream_readable.js:208:10)\r\n    at Pipe.onread (net.js:607:20)\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.50\r\n* nodejs: v 8.10.0\r\n* browser: -\r\n* ethereum node: geth v1.8.23-stable-c9427004\r\n\r\nRegards!"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nI used the parameter \"filter\" in the option that I pass to contract events like explained here:\r\nhttps://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#contract-events\r\nIt seems like this functionality broke between 33 and 49.\r\n\r\nWhat is the proper replacement to filter events based on an array of addresses?\r\n\r\n\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n    1. update `web3`\r\n    2.Add options:\r\n```\r\nconst options = {\r\n    filter: {\r\n         to:  addressArray\r\n     },\r\n          fromBlock: 'latest'\r\n};\r\n```\r\n    3. subscribe to events with\r\n```\r\ncontract.events.Transfer(options, (error, event) => {\r\n    stuff\r\n}\r\n```\r\n\r\n\r\n#### Error Logs \r\n```\r\nError: Provider error: Error: Node error: {\"code\":-32602,\"message\":\"Invalid params: Invalid Pub-Sub parameters: unknown field `filter`, expected one of `fromBlock`, `toBlock`, `blockHash`, `address`, `topics`, `limit`.\"}\r\nat /home/user/project/node_modules/web3-providers/dist/web3-providers.cjs.js:320:15\r\nat <anonymous>\r\nat process._tickCallback (internal/process/next_tick.js:189:7)\r\n```\r\n\r\n\r\n\r\n* web3.js: 49\r\n\r\n"},{"labels":["bug"],"text":"*I've looked into the other issues related to this error, but this is caused by something different\r\n\r\n### Description\r\n\r\nUsing `web3@1.0.0-beta.48` I have the following contract function: \r\n\r\n```\r\npragma solidity ^0.5.2;\r\n\r\ncontract Versioned {\r\n    string[] public data; // when deployed, data already has 1 item\r\n\r\n    function getVersionIndex() public view returns (uint count) {\r\n        return data.length - 1;\r\n    }\r\n}\r\n```\r\n\r\nThe Web3 code is: \r\n\r\n```\r\n  const versionIndex = await contract.getVersionIndex();\r\n\r\n  // ...\r\n  public getVersionIndex(): Promise<any> {\r\n    return this.contract.methods.getVersionIndex().call(); \r\n  }\r\n```\r\n\r\nContract class already has an address and the method does not require any params. \r\n\r\nI've tried adding the `{ from: \"0xadress\" }`, but it makes no difference. \r\n\r\n#### Expected behavior\r\n\r\nReturn the value of the Solidity `data.length` as `uint count`. \r\n\r\nAs a note, I've debugged the contract using https://remix.ethereum.org/ and the `getVersionIndex()` function works as expected.\r\n\r\n#### Error Logs \r\n\r\nThe error is originating at `AbiCoder.decodeParameters` of `web3-eth-abi.umd.js:65`: \r\n\r\n```\r\nkey: \"decodeParameters\",\r\n      value: function decodeParameters(outputs, bytes) {\r\n\r\n        if (!bytes || bytes === '0x' || bytes === '0X') {\r\n          throw new Error(\"Invalid bytes string given: \".concat(bytes));\r\n        }\r\n```\r\n\r\n### Versions \r\n* web3.js: web3@1.0.0-beta.48\r\n* nodejs: v10.15.3\r\n* browser: Chrome Version 72.0.3626.121 (Official Build) (64-bit) MaxOSX\r\n* ethereum node: Ropsten test network with Metamask\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nWe always encounter this error `Invalid bytes string given: 0x` when performing using our self hosted geth node, but this error is not present when we are using Infura.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nUsing Infura the value of `bytes` on `web3-eth-abi.cjs.js` line `66` is  `0x000000000000000000000000000000000000000000000000006a94d74f430000` and we're able to get the current balance of the erc20 token\r\n\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nWith our self hosted geth, the value of bytes we get is: `0x` which causes this error `Invalid bytes string given: 0x`\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\nUse this gist which performs balance checking of the erc20 token [https://gist.github.com/joeneldeasis/4b72f1923e3a4bdfc356148a79257ede](https://gist.github.com/joeneldeasis/4b72f1923e3a4bdfc356148a79257ede) then change the provider to your own Geth node which the error occurs, this code only works when you are using Infura.\r\n\r\n#### Error Logs \r\n```\r\nError: Invalid bytes string given: 0x\r\n    at AbiCoder.decodeParameters (Z:\\xxxxxx\\node_modules\\web3-eth-abi\\dist\\web3-eth-abi.cjs.js:66:15)\r\n    at AbiCoder.decodeParameter (Z:\\xxxxxx\\node_modules\\web3-eth-abi\\dist\\web3-eth-abi.cjs.js:55:19)\r\n    at CallContractMethod.afterExecution (Z:\\xxxxxx\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:743:28)\r\n    at CallContractMethod._callee$ (Z:\\xxxxxx\\node_modules\\web3-core-method\\dist\\web3-core-method.cjs.js:354:35)\r\n    at tryCatch (Z:\\xxxxxx\\node_modules\\@babel\\runtime\\node_modules\\regenerator-runtime\\runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (Z:\\xxxxxx\\node_modules\\@babel\\runtime\\node_modules\\regenerator-runtime\\runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (Z:\\xxxxxx\\node_modules\\@babel\\runtime\\node_modules\\regenerator-runtime\\runtime.js:114:21)\r\n    at asyncGeneratorStep (Z:\\xxxxxx\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\r\n    at _next (Z:\\xxxxxx\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n```\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: v10.15.3\r\n* browser: Brave Version 0.61.51 Chromium: 73.0.3683.75 (Official Build) (64-bit)\r\n* ethereum node: 1.8.23-stable-c9427004\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"Whisper worked great with the IPC Provider until 1.0.0 beta 37. Because of ganache bug, i can't upgrade until 1.0.0 beta 48. With this version, i have strange behavior.\r\n\r\nEvery shh function return oboe errors:\r\nUncaught Error: Unexpected token o in JSON at position 1\r\n      at Timeout._onTimeout (node_modules/oboe/dist/oboe-node.js:2325:17)\r\n\r\nIf i use the http or ws providers, it works great. \r\n\r\ngeth version 1.8.15 \r\nweb3js: 1.0.0 beta 35 or beta 48\r\n"},{"labels":["bug"],"text":"In the version 1.0.0-beta.48, the **web3.shh.newKeyPair** function needs a callback parameter even if you use the await syntax. Previously in the version 1.0.0-beta.37, it was optional as defined in the [Documentation](https://web3js.readthedocs.io/en/1.0/web3-shh.html#newkeypair).\r\nIt could be a documentation error but it seems weird to me.\r\n\r\n\r\n"},{"labels":["bug"],"text":"https://github.com/ethereum/web3.js/blob/5023c450a783b892da862712e0d8dc26cddba4ab/packages/web3-eth/src/index.js#L76\r\n\r\nhttps://github.com/ethereum/web3.js/blob/5023c450a783b892da862712e0d8dc26cddba4ab/packages/web3-eth/src/index.js#L87\r\n\r\nIn a clean not-transpiled environment such code will give you `TransactionSigner is not a constructor` error as arrow function cannot be acting as a class constructor::\r\n```javascript\r\nclass EthTransactionSigner {}\r\n\r\nconst TransactionSigner = () => {\r\n    return new EthTransactionSigner();\r\n};\r\n\r\nnew TransactionSigner()\r\n```\r\n\r\n![worng-arrow-function-call](https://user-images.githubusercontent.com/1560781/54383447-27089c00-46a3-11e9-9638-d00544f79538.png)\r\n\r\nIt's currently only working probably because Babel transpiles arrow functions to a regular/ES5 functions which can be acting as class constructors.\r\n\r\nI'd suggest renaming `TransactionSigner` and `MethodFactory` to something like `constructTransactionSigner` and `constructMethodFactory` functions and then calling them without using `new` but as a regular function calls."},{"labels":["bug"],"text":"### Description\r\n\r\nI'm creating two `web3.eth.Contract` objects in a `class` `constructor`. Of course, both contract's addresses are different. After creating the objects the addresses of the `Contract` are the same. They both have the second contract address.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCalling two consectuive times `new web3.eth.Contract` should instance two contracts correctly.\r\n\r\n#### Actual behavior\r\n```js\r\nconstructor (web3, registrarAddress, rifAddress, options = {}) {\r\n    console.log('registrar before: ' + registrarAddress)\r\n    console.log('rif before: ' + rifAddress)\r\n    this.contract = new web3.eth.Contract(registrarAbi, registrarAddress, options);\r\n    this.rif = new web3.eth.Contract(rifAbi, rifAddress, options);\r\n    console.log('registrar after: ' + this.contract.address)\r\n    console.log('rif after: ' + this.rif.address)\r\n}\r\n```\r\n\r\nLogs:\r\n```\r\nRegistrar.js:22 registrar before: 0x95bfefa36f4c0504560da00c0d04fc30ef45d4c6\r\nRegistrar.js:23 rif before: 0x38632564f438967e8e3259bac2f3877bb4b5104f\r\nRegistrar.js:26 registrar after: 0x38632564f438967e8e3259bac2f3877bb4b5104f\r\nRegistrar.js:27 rif after: 0x38632564f438967e8e3259bac2f3877bb4b5104f\r\n```\r\n\r\n\r\n#### Steps to reproduce the behavior\r\nI have some inner classes:\r\n\r\nindex.js\r\n```js\r\nexport default class RNS {\r\n  constructor (web3Provider, options = {}, addresses = defaultAddresses) {\r\n    const web3 = new Web3(web3Provider, options);\r\n    this.registrar = new Registrar(web3, addresses.registrarAddress, addresses.rifAddress, options);\r\n  }\r\n}\r\n```\r\n\r\nRegistrar.js\r\n```js\r\nexport default class Registrar {\r\n  constructor (web3, registrarAddress, rifAddress, options = {}) {\r\n    this.contract = new web3.eth.Contract(registrarAbi, registrarAddress, options);\r\n    this.rif = new web3.eth.Contract(rifAbi, rifAddress, options);\r\n  }\r\n}\r\n```\r\n\r\n\r\n#### Error Logs \r\n\r\nAlready provided\r\n\r\n### Versions \r\n* web3.js: ^1.0.0-beta.48\r\n* nodejs: v10.2.1\r\n* browser: Chrome updated\r\n* ethereum node: Ganache + MetaMask\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nsendTransaction does not handle promise rejection sometimes and it leads to compete calling application freeze.\r\n\r\n#### Expected behavior\r\nAny error inside sendTransaction should be propagated to the caller.\r\n\r\n#### Actual behavior\r\nhttps://github.com/ethereum/web3.js/blob/5023c450a783b892da862712e0d8dc26cddba4ab/packages/web3-core-method/src/methods/transaction/SendTransactionMethod.js#L80\r\n\r\nThe above line does not handle promise rejection that leads to complete freeze of application calling sendTransaction. The promise can be rejected in case of connection failure, for example.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n1. Set any provider that is shut down (you can even point it to inexistent url)\r\n2. Try to call `web3.eth.sendTransaction(...)`\r\n\r\n#### Error Logs \r\n`Unhandled promise rejection.... and stuff`\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: any\r\n* browser: n/a\r\n* ethereum node: n/a\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description\r\nIt is not possible to call function on already deployed contracts.\r\n\r\n\r\n#### Expected behavior\r\nCreating a contract instance with jsonInterface and address I should be able to call the function on that contract\r\n\r\n\r\n#### Actual behavior\r\nContract instance isn't binded to the contract at that address. Instead if I deploy the contract in the same execution just before calling methods, it works perfectly.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n    const Web3 = require('web3');\r\n    const web3 = new Web3(\"ws://127.0.0.1:8546\");\r\n    var simpleContract = new web3.eth.Contract(jsonInterface, address);\r\n    simpleContract.methods.myFunction(params).call().then( do something );\r\n\r\n\r\n#### Error Logs \r\nError: Invalid bytes string given: 0x\r\n    at AbiCoder.decodeParameters (./node_modules/web3-eth-abi/dist/web3-eth-abi.cjs.js:64:15)\r\n    at AbiCoder.decodeParameter (.node_modules/web3-eth-abi/dist/web3-eth-abi.cjs.js:55:19)\r\n    at CallContractMethod.afterExecution (./node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:743:28)\r\n    at CallContractMethod._callee$ (./node_modules/web3-core-method/dist/web3-core-method.cjs.js:354:35)\r\n    at tryCatch (./node_modules/regenerator-runtime/runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (./node_modules/regenerator-runtime/runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (./node_modules/regenerator-runtime/runtime.js:114:21)\r\n    at asyncGeneratorStep (./node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (./node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: v8.9.4\r\n* ethereum node: geth 1.8.22\r\n"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nReceive `\"Can not send value to non-payable contract method or constructor instead!\"` error when calling a function that is definitely `payable`. ~~Also, the error itself grammatically makes no sense.~~ Also, the error itself makes no sense since the method _is_ payable.\r\n\r\n#### Expected behavior\r\n\r\nShouldn't receive error about non-payable method or constructor if the method or constructor is payable.\r\n\r\n#### Actual behavior\r\n\r\nReturns above error.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nWorks fine with `web3@1.0.0-beta.47`, but throws aforementioned error in `...-beta.48`.\r\n\r\nUsing the following solidity in order to query an offchain API using Provable (Oraclize): \r\n\r\n```solidity\r\npragma solidity ^0.5.0;\r\n\r\nimport \"./oraclizeAPI.sol\";\r\n\r\ncontract DieselPrice is usingOraclize {\r\n\r\n    uint public dieselPriceUSD;\r\n\r\n    event LogNewDieselPrice(string price);\r\n    event LogNewOraclizeQuery(string description);\r\n\r\n    constructor() public {\r\n        update(); // First check at contract creation...\r\n    }\r\n\r\n    function __callback(bytes32 myid, string memory result) public {\r\n        require(msg.sender == oraclize_cbAddress());\r\n        emit LogNewDieselPrice(result);\r\n        dieselPriceUSD = parseInt(result, 2); // Let's save it as cents...\r\n        // Now do something with the USD Diesel price...\r\n    }\r\n\r\n    function update() public payable {\r\n        emit LogNewOraclizeQuery(\"Oraclize query was sent, standing by for the answer...\");\r\n        oraclize_query(\"URL\", \"xml(https://www.fueleconomy.gov/ws/rest/fuelprices).fuelPrices.diesel\");\r\n    }\r\n}\r\n```\r\n\r\nAnd the following javascript to test that the `update()` function should fail if the contract's balance is zero (because Provable [Oraclize]) requires a fee): \r\n\r\n```javascript\r\n  it('Should revert on second query attempt due to lack of funds', async () => {\r\n    const expErr = 'revert'\r\n    try {\r\n      await methods\r\n        .update()\r\n        .send({\r\n          from: address,\r\n          gas: gasAmt\r\n        })\r\n      assert.fail('Update transaction should not have succeeded!')\r\n    } catch (e) {\r\n      assert.isTrue(\r\n        e.message.startsWith(`${PREFIX}${expErr}`),\r\n        `Expected ${expErr} but got ${e.message} instead!`\r\n      )\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n...results in the above error. Tests pass as expected with `beta47` but not `beta48`. Worse, the error message makes no sense since it's clear there is:\r\n\r\n- a) No value being sent in the `methods.update().send(...params)` function\r\n- b) The `update()` method in the contract is payable.\r\n\r\n#### Error Logs \r\n\r\n`\"Can not send value to non-payable contract method or constructor instead!\"`\r\n\r\n#### Full Example\r\n\r\nYou can find the above Provable (Oraclize) example with Truffle tests in [the repo here.](https://github.com/oraclize/ethereum-examples/tree/master/solidity/truffle-examples/diesel-price) Simply pull it, install its dependencies and then install `web3@1.0.0-beta.48` & follow the `README` to run the tests.\r\n\r\n### Versions \r\n* web3.js: `-beta.48`\r\n* nodejs: `10.15.0`\r\n* ethereum node: `Ganache/TestRPC`\r\n\r\n"},{"labels":["bug"],"text":"### Description\r\n\r\nI'm using Chrome + latest Metamask, testing a small React application.\r\n\r\nIf I run this code (calling the plain Metamask provider API):\r\n\r\n```js\r\n    try {\r\n      const accounts = await window.ethereum.send(\"eth_requestAccounts\");\r\n    } catch (err) {\r\n      console.log(\"User cancelled\");\r\n      console.log(err);\r\n    }\r\n    return;\r\n```\r\n\r\nthe user is presented with a popup window asking his permission to access the local account data, per EIP-1102.\r\n\r\nIf the user cancels the operation, the promise is rejected and is thrown as an error which is caught and a message is printed in the console.\r\n\r\nIf I try the following code, using web3js and the injected Metamask provider:\r\n\r\n```javascript\r\n    try {\r\n      const web3 = new Web3(Web3.givenProvider);\r\n      const accounts = await web3.eth.requestAccounts();\r\n    } catch (err) {\r\n      console.log(\"User cancelled\");\r\n      console.log(err);\r\n    }\r\n```\r\n\r\nand the user cancels the operation, something unexpected happens inside web3js, the catch statement is bypassed because the code aborts with some internal error. See the following screenshot.\r\n\r\n<img width=\"574\" alt=\"Screen Shot 2019-03-11 at 10 18 05\" src=\"https://user-images.githubusercontent.com/28685/54126736-04e2f580-43e7-11e9-8752-a1c8bbdc1ef6.png\">\r\n\r\nI guess the correct behavior would be to throw the rejection as an error so I can handle the user cancellation in the dapp UI.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: 10.15.0\r\n* browser: latest macos Chrome\r\n* ethereum node: latest Metamask\r\n"},{"labels":["bug"],"text":"I got weird RPC errors when building for production (using Parcel), which I tracked down to this:\r\nhttps://github.com/ethereum/web3.js/blob/970d837768f924febe377df39824d2ab9e13a55a/packages/web3-providers/src/resolvers/ProviderResolver.js#L97-L108\r\nConstructor names are not available in minified code, so I end up with a `CustomProvider` (see `resolve` method above `isWeb3Provider`)."},{"labels":["bug"],"text":"```\r\nroot@ubuntu:~/goodwill# cat package.json | grep web3\r\n        \"web3\": \"^1.0.0-beta.48\"\r\nroot@ubuntu:~/goodwill# cat test.js \r\n/* \r\n * Test\r\n */\r\n\r\nvar Web3 = require(\"web3\");\r\nvar web3 = new Web3(\"http://localhost:8545\");\r\nvar account = web3.eth.accounts.privateKeyToAccount(\"441A2D8819C881BA8A94AABB666CFEFC23038F3E000E2F09B93B0461F91E01A6\");\r\nweb3.eth.accounts.wallet.add(account);\r\n\r\n/*\r\n * vim: ts=4 et nowrap autoindent\r\n */\r\nroot@ubuntu:~/goodwill# node --version\r\nv10.15.3\r\nroot@ubuntu:~/goodwill# node test.js \r\n/root/goodwill/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js:25\r\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\r\n                                                         ^\r\n\r\nTypeError: ecKey.getPublic(...).slice is not a function\r\n    at Object.fromPrivate (/root/goodwill/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js:25:58)\r\n    at Function.fromPrivateKey (/root/goodwill/node_modules/web3-eth-accounts/dist/web3-eth-accounts.cjs.js:136:34)\r\n    at Proxy.privateKeyToAccount (/root/goodwill/node_modules/web3-eth-accounts/dist/web3-eth-accounts.cjs.js:341:22)\r\n    at Object.<anonymous> (/root/goodwill/test.js:7:33)\r\n    at Module._compile (internal/modules/cjs/loader.js:701:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)\r\n    at Module.load (internal/modules/cjs/loader.js:600:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:531:3)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)\r\n    at startup (internal/bootstrap/node.js:283:19)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)\r\n```\r\n\r\nCleanly installed ubuntu and node.  It works perfectly on Debian."},{"labels":["bug"],"text":"Hello,\r\n\r\nIt seems like there is a wording error with 'transactionSinger' instead of 'transactionSigner' at web3-eth-accounts/dist/web3-eth-accounts.cjs.js:77:70)\r\n\r\n\r\n### Versions \r\n* web3.js: web3@1.0.0-beta.47 and web3@1.0.0-beta.48 \r\n* nodejs: v10.14.2\r\n\r\n\r\n\r\nThank you,"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nError messages for utils functions `toWei`, `fromWei`, etc. throw the following error:\r\n```\r\nPlease pass numbers as strings or BigNumber objects to avoid precision errors.\r\n```\r\nThe source itself checks if they are BN, not BigNumber. Relevant source (others in this file as well): https://github.com/ethereum/web3.js/blob/1.0/packages/web3-utils/src/index.js#L193\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n1. Import `web3`\r\n2. Call `web3.utils.toWei(5)` (i.e. pass in a number or other non-allowed type).\r\n\r\n#### Error Logs \r\n\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0 Beta 48\r\n"},{"labels":["bug"],"text":"when using the following code in beta.48 returns the error below. It worked fine in beta.47. Changing \"allEvents\" to a certain event will also work. \r\n\r\n    ```web3Contract.getPastEvents('allEvents', {\r\n            fromBlock: startBlock,\r\n            toBlock: endBlock,\r\n        });\r\n    ```\r\n\r\n```\r\nError: Empty outputs array given!\r\n    at AbiCoder.decodeParameters (C:\\Projects\\myproj\\node_modules\\web3-eth-abi\\dist\\web3-eth-abi.cjs.js:61:15)\r\n    at AbiCoder.decodeLog (C:\\Projects\\myproj\\node_modules\\web3-eth-abi\\dist\\web3-eth-abi.cjs.js:123:27)\r\n    at AllEventsLogDecoder.decode (C:\\Projects\\myproj\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:246:45)\r\n    at AllEventsLogDecoder.decode (C:\\Projects\\myproj\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:276:85)\r\n    at C:\\Projects\\myproj\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:831:43\r\n    at Array.map (<anonymous>)\r\n    at AllPastEventLogsMethod.afterExecution (C:\\Projects\\myproj\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:830:28)\r\n    at AllPastEventLogsMethod._callee$ (C:\\Projects\\myproj\\node_modules\\web3-core-method\\dist\\web3-core-method.cjs.js:354:35)\r\n    at tryCatch (C:\\Projects\\myproj\\node_modules\\regenerator-runtime\\runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (C:\\Projects\\myproj\\node_modules\\regenerator-runtime\\runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (C:\\Projects\\myproj\\node_modules\\regenerator-runtime\\runtime.js:114:21)\r\n    at asyncGeneratorStep (C:\\Projects\\myproj\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\r\n    at _next (C:\\Projects\\myproj\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:189:7)\r\n```\r\n\r\n### Versions \r\n* web3.js: beta.48\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nasync web3 methods are never firing callbacks when built for production (vue cli 3 / webpack build). this also includes contract methods:\r\n```javascript\r\nconst MyContract = new web3.eth.Contract(abi, address);\r\nMyContract.methods.myFunction().call()\r\n.then(console.log);\r\n```\r\n\r\neverything works properly when running in development/test mode. \r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nThis is when running my standard vue app https://cli.vuejs.org in development mode or locally:\r\n`npm run serve` or `npm run build --mode development`\r\n\r\n<img width=\"674\" alt=\"screen shot 2019-03-07 at 9 45 08 am\" src=\"https://user-images.githubusercontent.com/7217256/53943629-c6cf9400-40bd-11e9-8b9e-126af6ef8335.png\">\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nThis is when running my vue app after building for production `npm run build`\r\n<img width=\"680\" alt=\"screen shot 2019-03-07 at 9 43 30 am\" src=\"https://user-images.githubusercontent.com/7217256/53943695-fa122300-40bd-11e9-8959-5018b605175d.png\">\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n* initialize a vue app https://cli.vuejs.org\r\n* init your `web3js` instance\r\n* call `web3js.eth.net.getId().then(console.log).catch(console.error);`\r\n\r\n#### Error Logs \r\nNot seeing any error logs. This is silently failing. Callbacks never triggered\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js:\r\neverything over 1.0.0-beta.37\r\n\r\n* nodejs:\r\nv11.6.0\r\n\r\n* browser:\r\nall browsers\r\n\r\n* ethereum node:\r\nmetamask/infura. seems to effect all nodes (ie coinbase wallet, trust wallet)\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->"},{"labels":["bug"],"text":"### Description <!-- In plain words, what happened -->\r\nI'm using HDWalletProvider with Infura API, and when I use HTTP API like\r\n\r\n```\r\nconst web3 = new Web3(new HDWalletProvider(P_KEY, `https://${NETWORK}.infura.io/v3/${INFURA_API_KEY}`));\r\nconst contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\r\ncontract.methods.transfer(ETH_ADDRESS, 12345).send(defaultOption)\r\n    .on('receipt', (res) => { ... });\r\n```\r\n\r\nThis sends the transaction correctly, but crashes after with\r\n\r\n> Error: Subscriptions are not supported with the CustomProvider.\r\n\r\nI saw \"The HTTP provider is deprecated\" on the web3 document, so I changed the Infura endpoint using Websocket:\r\n\r\n```\r\nconst web3 = new Web3(new HDWalletProvider(P_KEY, `wss://${NETWORK}.infura.io/ws/v3/${INFURA_API_KEY}`));\r\n```\r\n\r\nThis doesn't send the transaction at all and just hangs forever (no error, nothing happens).\r\n\r\n\r\n#### Expected behavior\r\nCalling \r\n```\r\ncontract.methods.transfer(ETH_ADDRESS, 12345).send(defaultOption).on('receipt', (res) => { ... });\r\n```\r\nshould sent the transaction and `receipt` event should be triggered.\r\n\r\n#### Actual behavior\r\nIt doesn't send the transaction and `receipt` event doesn't get triggered.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: v11.10.1\r\n* browser: console\r\n* ethereum node: Infura websocket\r\n\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nCalling `web3.eth.accounts.signTransaction(tx, privkey)` result in this error. Versions prior to `beta.47` work fine. \r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCalling `web3.eth.accounts.signTransaction()` should return a signed tx.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n```javascript\r\nconst Web3 = require('web3')\r\nconst WEB3_HOST = 'https://mainnet.infura.io/...'\r\nconst web3 = new Web3(WEB3_HOST)\r\n\r\nvar tx = {\r\n    gas: 100000,\r\n    gasPrice: 4000000000\r\n  }\r\nsigned_tx = web3.eth.accounts.signTransaction(tx, PRIVATEKEY)\r\n```\r\n\r\n#### Error Logs \r\n```\r\nUnhandledPromiseRejectionWarning: TypeError: Cannot read property 'sign' of undefined\r\n    at Proxy._callee$ (/.../node_modules/web3-eth-accounts/dist/web3-eth-accounts.cjs.js:396:47)\r\n    at tryCatch (/.../node_modules/regenerator-runtime/runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (/.../node_modules/regenerator-runtime/runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/.../node_modules/regenerator-runtime/runtime.js:114:21)\r\n    at asyncGeneratorStep (/.../node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (.../node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n```\r\n\r\n#### Gists\r\n<!---------------------------------------------------------------------\r\n    Including links to gists with:\r\n    * ABI JSON,\r\n    * working Solidity code, etc.\r\n\r\n    gist tutorial: https://help.github.com/en/articles/creating-gists\r\n----------------------------------------------------------------------->\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.47\r\n* nodejs: 10.15.1\r\n* browser:\r\n* ethereum node:\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nHello! \r\n\r\nAfter upgrading from beta.37 `getPastLogs` generates wrong topics array for `eth_getLogs` WebSocket RPC which causes inadequate data in return.\r\n\r\nWe have event with 3 indexed parameters:\r\n```json\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"name\": \"p1\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"name\": \"p2\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"name\": \"p3\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"name\": \"p4\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"name\": \"p5\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"Event\",\r\n    \"type\": \"event\"\r\n  }\r\n```\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nbeta.37 sends this\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 13,\r\n  \"method\": \"eth_getLogs\",\r\n  \"params\": [\r\n    {\r\n      \"fromBlock\": \"0x0\",\r\n      \"toBlock\": \"latest\",\r\n      \"topics\": [\r\n        \"0xaf2d03aa2fdc9b785775529881274caad1884e0279e02729f03eca55d57eea72\",\r\n        null,\r\n        null,\r\n        \"0x000000000000000000000000000000000000000000000000000000000000001d\"\r\n      ],\r\n      \"address\": \"0x16***f0\"\r\n    }\r\n  ]\r\n}\r\n```\r\nHaving topic for the **third**(p4) indexed parameter.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nbeta.48 sends this\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 12,\r\n  \"method\": \"eth_getLogs\",\r\n  \"params\": [\r\n    {\r\n      \"fromBlock\": \"0x0\",\r\n      \"toBlock\": \"latest\",\r\n      \"filter\": { \"p4\": 29 },\r\n      \"topics\": [\r\n        \"0xaf2d03aa2fdc9b785775529881274caad1884e0279e02729f03eca55d57eea72\",\r\n        \"0x000000000000000000000000000000000000000000000000000000000000001d\"\r\n      ],\r\n      \"address\": \"0x16***f0\"\r\n    }\r\n  ]\r\n}\r\n```\r\nHaving topic for the **first**(p1) indexed parameter instead of the **third**(p4). The value of topic is correct thought.\r\n\r\nI believe the order is important here and `0x000000000000000000000000000000000000000000000000000000000000001d` should be on fourth place.\r\n\r\nI don't know about having `\"filter\": { \"p4\": 29 },` field in new version though. \r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n----------------------------------------------------------------------->\r\n```js\r\nweb3.eth.contract.getPastEvents('Event', {\r\n    fromBlock: 0,\r\n    toBlock: 'latest',\r\n    filter: {\r\n      p4: 29,\r\n    },\r\n  });\r\n```\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.48\r\n* nodejs: N/A\r\n* browser: Chrome Version 72.0.3626.119\r\n* ethereum node: infura.io\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!--Return multiple values -->\r\nI'm trying to return multiple values with a simple function:\r\n ```\r\n  function testMulReturn() public view returns (address, uint) {\r\n        return (msg.sender, 777);\r\n  }\r\n```\r\nCalling:\r\n```\r\nContractInstance.methods.testMulReturn().call().then(function(result) {\r\n\tconsole.log(result);\r\n})\r\n```\r\nReturns { '0': '0', '1': 'x' }\r\n\r\nCalling a function with just one return value e.g\r\n```\r\n function testMulReturn() public view returns (address) {\r\n       return (msg.sender);\r\n }\r\n```\r\n...is working as expected.\r\nReturns: 0x1b42dC2F1A3A548A5e6D76c19cCd768aDCa37815\r\n\r\nWhy is this happening? Any help much appreciated.\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.47\r\n* nodejs: 11.3.0\r\n* solidity: ^0.5.0\r\n\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["bug"],"text":"<!---\r\nAll issues which aren't created with this template will get immediately closed.\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nI'm trying to get an array of Numbers from this function:\r\n```\r\nfunction getTimes() public view returns (uint[] memory) {\r\n    return times;\r\n}\r\n```\r\n...Calling the function via web3 like this:\r\n```\r\nContractInstance.methods.getTimes().call().then(result => {\r\n    console.log(result);        \r\n})\r\n```\r\n\r\n..my output is a comma separeted string: `1551744000,1551657600` \r\n In order to get an array of Numbers I have to modify the String like this:\r\n\r\n`var array = result.split(',').map(str => {return Number(str)})`\r\n\r\nNow I'm getting the required array of Numbers:\r\n\r\n`[1551744000,1551657600]`\r\n\r\nI'm asking myself if this is the right way. Am I missing something? Thanks for any help.\r\n\r\n#### Versions\r\nsolidity: ^0.5.0;\r\nweb3: 1.0.0-beta.47\r\n"},{"labels":["bug"],"text":"<!---\r\nAll issues which aren't created with this template will get immediately closed.\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\nAs was mentioned briefly in this [comment](https://github.com/ethereum/web3.js/issues/2446#issuecomment-469125776), `eth.getAccounts()` fails with the latest release of web3 and truffle-hdwallet-provider\r\n\r\n#### Expected behavior\r\nCode didn't change, only updated packages, and `eth.getAccounts()` should return accounts\r\n\r\n#### Actual behavior\r\nFails.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst Web3 = require('web3');\r\nconst HDWalletProvider = require('truffle-hdwallet-provider');\r\nlet provider = new HDWalletProvider(process.env.MNEMONIC, infuraNodeURL(false, network));\r\nlet web3 = new Web3(provider);\r\nconst accounts = await web3.eth.getAccounts();\r\n// see error below\r\n```\r\n\r\n#### Error Logs\r\n```\r\n(node:31402) UnhandledPromiseRejectionWarning: Error: invalid json request\r\n    at /Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:15:620862\r\n    at e.i.onreadystatechange (/Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:15:775522)\r\n    at e.t.dispatchEvent (/Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:1:152983)\r\n    at e._setReadyState (/Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:15:780284)\r\n    at e._onHttpResponseEnd (/Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:15:783369)\r\n    at IncomingMessage.<anonymous> (/Users/carlos/Desktop/helbiz/hbz-listen/node_modules/truffle-hdwallet-provider/dist/index.js:15:782627)\r\n    at IncomingMessage.emit (events.js:187:15)\r\n    at IncomingMessage.EventEmitter.emit (domain.js:442:20)\r\n    at endReadableNT (_stream_readable.js:1092:12)\r\n    at process._tickCallback (internal/process/next_tick.js:63:19)\r\n```\r\n\r\n#### Versions\r\nnpm: 6.8.0\r\nnode: v10.11.0\r\nweb3: 1.0.0-beta.47\r\ntruffle-hdwallet-provider: 1.0.5\r\n"},{"labels":["bug"],"text":"I try to deploy a contract using Infura and Web3js on Ropsten or Rinkeby:\r\n\r\n```\r\n\r\nconst HDWalletProvider = require('truffle-hdwallet-provider');\r\nconst Web3 = require('web3');\r\nconst {interface, bytecode} = require('./compile');\r\n\r\nconst MNEMONIC = 'myprivatekey';\r\n\r\nconst provider = HDWalletProvider(MNEMONIC, \"https://rinkeby.infura.io/v3/myinfuratoken\");\r\n\r\nconst web3 = new Web3(provider);\r\n\r\n\r\nconst deploy = async () => {\r\n    const accounts = ['0x8882528C7104e146E0500203C353C09922575385'];\r\n    console.log(accounts);\r\n    console.log('Attempting to deploy from account', accounts[0]);\r\n\r\n\r\n    const result = await new web3.eth.Contract(JSON.parse(interface))\r\n        .deploy({data:bytecode, arguments:['This is deployed!']})\r\n        .send({gas:'1000000', from: accounts[0]});\r\n\r\n    console.log('Contract deployed to ', result.options.address);\r\n};\r\ndeploy();\r\n```\r\n\r\nRunning this code I get:\r\n\r\n>  (node:12321) V8: /Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/solc/soljson.js:3 Invalid asm.js: Invalid member of stdlib\r\n> (node:12321) UnhandledPromiseRejectionWarning: Error: Provider not set or invalid\r\n>     at Object.InvalidProvider (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-helpers/src/errors.js:38:16)\r\n>     at RequestManager.send (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-requestmanager/src/index.js:128:32)\r\n>     at sendRequest (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:563:42)\r\n>     at /Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:580:17\r\n>     at Object._fireError (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-utils/src/index.js:60:9)\r\n>     at sendTxCallback (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:494:30)\r\n>     at RequestManager.send (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-requestmanager/src/index.js:128:16)\r\n>     at sendRequest (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:563:42)\r\n>     at send (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:584:13)\r\n>     at send (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-core-method/src/index.js:575:13)\r\n>     at Object._executeMethod (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/node_modules/web3-eth-contract/src/index.js:896:24)\r\n>     at deploy (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/deploy.js:19:10)\r\n>     at Object.<anonymous> (/Users/sahelanthropus/IdeaProjects/deploy-contracts/test/deploy.js:23:1)\r\n>     at Module._compile (internal/modules/cjs/loader.js:734:30)\r\n>     at Object.Module._extensions..js (internal/modules/cjs/loader.js:745:10)\r\n>     at Module.load (internal/modules/cjs/loader.js:626:32)\r\n>     at tryModuleLoad (internal/modules/cjs/loader.js:566:12)\r\n>     at Function.Module._load (internal/modules/cjs/loader.js:558:3)\r\n>     at Function.Module.runMain (internal/modules/cjs/loader.js:797:12)\r\n>     at executeUserCode (internal/bootstrap/node.js:526:15)\r\n>     at startMainThreadExecution (internal/bootstrap/node.js:439:3)\r\n> (node:12321) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n> (node:12321) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n\r\nWhere my package.json is:\r\n\r\n```\r\n{\r\n  \"name\": \"test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"ganache-cli\": \"^6.2.5\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"solc\": \"^0.4.25\",\r\n    \"truffle-hdwallet-provider\": \"0.0.3\",\r\n    \"web3\": \"^1.0.0-beta.35\"\r\n  }\r\n}\r\n```\r\n\r\nand:\r\n\r\nnpm 6.8.0\r\nnode v11.9.0\r\n\r\nBut I am able to deploy contracts using Truffle framework, same network configurations.\r\n\r\nWhy I cant deploy using Web3js?\r\n\r\n"},{"labels":["bug"],"text":"Simple nodejs program which calls totalSupply() from Dai smartcontract\r\n```\r\nconst Web3 = require('web3');\r\nconst rpcURL = 'https://mainnet.infura.io/v3/<your_key>';\r\nconst web3 = new Web3(rpcURL);\r\n\r\n\r\nconst daiSmartcontractAddress = \"0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359\";\r\nconst daiSmartcontactAbi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"symbol_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}];\r\n\r\n\r\nconst contract = new web3.eth.Contract(daiSmartcontactAbi, daiSmartcontractAddress);\r\n\r\n\r\ncontract.methods.totalSupply().call((err, result) => { console.log(result) });\r\n```\r\n\r\n#### Expected behavior\r\n```\r\nnpm install --save web3@1.0.0-beta.34\r\nnode app.js\r\n89646984224589023839810726\r\n```\r\n\r\n#### Actual behavior\r\n```\r\nnpm install --save web3@1.0.0-beta.46\r\nnode app.js\r\n(node:91820) UnhandledPromiseRejectionWarning: Error: Returned values aren't valid, did it run Out of Gas?\r\n    at AbiCoder.decodeParameters (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/web3/node_modules/web3-eth-abi/dist/web3-eth-abi.cjs.js:116:15)\r\n    at CallContractMethod.afterExecution (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/web3/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:720:34)\r\n    at CallContractMethod._callee$ (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/web3/node_modules/web3-core-method/dist/web3-core-method.cjs.js:457:39)\r\n    at tryCatch (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/regenerator-runtime/runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/regenerator-runtime/runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/regenerator-runtime/runtime.js:114:21)\r\n    at asyncGeneratorStep (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (/Users/<username>/programming/learning_blockchain/web3_basic/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:182:7)\r\n(node:91820) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:91820) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n#### Steps to reproduce the behavior\r\n\r\nsee above\r\n\r\n#### Error Logs\r\n\r\nsee above\r\n\r\n#### Versions\r\n[NPM 6.1.0, Node v9.11.1, web3@1.0.0-beta.46 , OS HightSierra 10.13.6, Macbook pro 13' late 2012]\r\n\r\n"},{"labels":["bug"],"text":"Hello, \r\n\r\nWe have provided enough gas for the transaction, but we got the error  \"Transaction ran out of gas. Please provide more gas:\". The transaction has been successful and can not get the receipt.  \r\n\r\nRecently, we have updated the geth version to v1.8.23\r\n\r\nI have used, web3.eth.sendTransaction method.\r\n//\r\n// using the event emitter\r\nweb3.eth.sendTransaction({\r\n    from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\r\n    to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\r\n    value: '1000000000000000'\r\n})\r\n.on('transactionHash', function(hash){\r\n    ...\r\n})\r\n.on('receipt', function(receipt){\r\n    ...\r\n})\r\n.on('confirmation', function(confirmationNumber, receipt){ ... })\r\n.on('error', console.error); // If a out of gas error, the second parameter is the receipt.\r\n//\r\n\r\n"},{"labels":["bug"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n`decodeLog` in `AbiCoder.js` should return a map from all event parameter names to their decoded data with respect to the type specified in the ABI.\r\n#### Actual behavior\r\nThe data used to decode non-indexed parameters of events is *always* taken from the front of the raw data array, leading to wrong decoded non-indexed event parameters except for the first non-indexed parameter.\r\n\r\nErroneously, no offset is used into the raw data here:\r\nhttps://github.com/ethereum/web3.js/blob/b176a97d2c6ddb5e3a699402932f40fa9d69aedc/packages/web3-eth-abi/src/AbiCoder.js#L225\r\n#### Steps to reproduce the behavior\r\nUse `getPastEvents` to query for an event with at least two non-indexed parameters and compare the result values of the event with the raw value.\r\n#### Error Logs\r\nno error\r\n#### Versions\r\nweb3.js 1.0.0-beta.47\r\n"},{"labels":["bug"],"text":"#### i want to deploy my contract, code is very sample:\r\n\r\n``` javascript\r\n    let Web3 = require('web3'); // version v1.0.0-beta46\r\n    const web3 = new Web3(\"ws://localhost:8545\");\r\n\r\n    const myContract = new web3.eth.Contract([insert abi]);\r\n\r\n    myContract.deploy({\r\n        arguments: [],\r\n        data: \"0x12345...\"\r\n    })\r\n    // ...\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. run command\r\n\r\n```bash\r\nnode deploy.js \r\n```\r\n\r\n#### Error Logs\r\n\r\n```bash\r\n(node:30192) UnhandledPromiseRejectionWarning: TypeError: this.methods.contractConstructor is not a function\r\n    at AbstractContract.deploy (/Users/wansy/Desktop/ethereum-test/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:1036:27)\r\n...\r\n```\r\n\r\n#### debugger\r\n\r\ni use `node --inspect` to debugger, then print this.method's function:\r\n\r\n```bash\r\niModel:AbiModel {abi: Object}\r\ncontract:AbstractContract {providersModuleFactory: ProvidersModuleFactory, providerDetector: ProviderDetector, providerResolver: ProviderResolver, …}\r\nmethodEncoder:MethodEncoder {abiCoder: AbiCoder}\r\nmethodFactory:MethodFactory {accounts: Proxy, utils: Object, formatters: Object, …}\r\nmethodOptionsMapper:MethodOptionsMapper {utils: Object, formatters: Object}\r\nmethodOptionsValidator:MethodOptionsValidator {utils: Object}\r\nPromiEvent:function PromiEvent() { … }\r\n```\r\nthere have no contractConstructor function \r\n\r\n#### Versions\r\n\r\n- NPM 6.4.1\r\n- Node v8.11.2\r\n- Web3.js v1.0.0-beta46\r\n- OS macOS\r\n"},{"labels":["bug"],"text":"**All issues which aren't created with this template will get immediately closed.**\r\n\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\nIt seems like `EnsModuleFactory` `createENS` method never passes the instance of `contractModuleFactory` to the constructor of `Ens` resulting in `contractModuleFactory` being undefined when `createRegistry` is called.\r\n\r\nhttps://github.com/ethereum/web3.js/blob/2f0ada25b3988e67ec0d9a86a593146a57b43114/packages/web3-eth-ens/src/factories/EnsModuleFactory.js#L47\r\n\r\n#### Expected behavior\r\n\r\nCall `getAddress` to get the address of a register name on ens.\r\n\r\n#### Actual behavior\r\n\r\nCalling `getAddress` throws the following exception.\r\n```js\r\nTypeError: \"_this.contractModuleFactory is undefined\"\r\n    AbstractContract web3-eth-contract.umd.js:954\r\n    Registry web3-eth-ens.umd.js:931\r\n    createRegistry web3-eth-ens.umd.js:1070\r\n    get web3-eth-ens.umd.js:408\r\n    _callee2$ web3-eth-ens.umd.js:88\r\n    tryCatch runtime.js:62\r\n    invoke runtime.js:288\r\n    method runtime.js:114\r\n    node_modules asyncToGenerator.js:3\r\n    node_modules asyncToGenerator.js:25\r\n    node_modules asyncToGenerator.js:32\r\n    Promise es6.promise.js:177\r\n    node_modules asyncToGenerator.js:21\r\n    getAddress web3-eth-ens.umd.js:100\r\n    _callee$ HelloWorld.vue:17\r\n    tryCatch runtime.js:62\r\n    invoke runtime.js:288\r\n    method runtime.js:114\r\n    node_modules asyncToGenerator.js:9\r\n    node_modules asyncToGenerator.js:31\r\n    node_modules asyncToGenerator.js:38\r\n    Promise es6.promise.js:177\r\n    node_modules asyncToGenerator.js:27\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Setup web3 with the http provider (the rpc provider is a geth client on rinkeby)\r\n2. Get the ens module web3.eth.ens \r\n3. ens.getAddress()\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\n\r\n* npm: '6.4.1'\r\n* node: v10.13.0\r\n* web3.js: 1.0.0-beta.46\r\n"},{"labels":["bug",null],"text":"#### Expected behavior\r\n\r\nWhen i hook onto `PromiEvent` event listener on confirmations i get the correct confirmation number at the correct time not just random count of confirmations number every second.\r\n\r\n#### Actual behavior\r\n\r\nWhen i hook onto `PromiEvent` event listener on confirmations it seems its not inline with when the next block has been mined, on Rinkeby it's every 15 seconds but on web3 it returns the confirmation every second which is not correct.\r\n\r\n```\r\nweb3.eth.sendSignedTransaction(rawTransaction)\r\n.on(\r\n            'confirmation',\r\n            (confirmationNumber: number, receipt: TransactionReceipt) => {\r\n              // fires new confirmation number up to 24 every second\r\n            },\r\n          )\r\n```\r\n\r\nIt also states in the documentation that it stops the event listener firing after 12 confirmations yet it goes up to 24. \r\n\r\nThis should be in line with the proper confirmations number and fire correctly and not just return a fake confirmation number every second.\r\n\r\n#### Versions\r\n1.0.0-beta.46\r\n"},{"labels":["bug"],"text":"Steps before creating an issue: \r\n1. on state changing function, I'd like to make a `call()` first to see what will be returning and only then make a `send()` \r\n```js\r\nconst result = contractInstance.methods[methodName](...funcCallParams).call()\r\n```\r\nFor some reason it doesn't execute and it always returns:\r\n```js\r\nconsole.log(result)\r\n\r\nfunction anonymousFunction() {\r\n            var methodArguments = Array.prototype.slice.call(arguments);\r\n            if (!isArray(abiItemModel) && abiItemModel.isOfType('constructor')) {\r\n              if (methodArguments[0]['data']) {\r\n                target.contract.options.data = methodArguments[0]['data'];\r\n              }\r\n              if (methodArguments[0]['arguments']) {\r\n                abiItemModel.contractMethodParameters = methodArguments[0]['arguments'];\r\n              }\r\n              return anonymousFunction;\r\n            }\r\n            if (isArray(abiItemModel)) {\r\n              var abiItemModelFound = abiItemModel.some(function (model) {\r\n                model.contractMethodParameters = methodArguments;\r\n                try {\r\n                  model.givenParametersLengthIsValid();\r\n                } catch (error) {\r\n                  return false;\r\n                }\r\n                abiItemModel = model;\r\n                return true;\r\n              });\r\n              if (!abiItemModelFound) {\r\n                throw new Error(\"Methods with name \\\"\".concat(name, \"\\\" found but the given parameters are wrong\"));\r\n              }\r\n              return anonymousFunction;\r\n            }\r\n            abiItemModel.contractMethodParameters = methodArguments;\r\n            return anonymousFunction;\r\n          }\r\n```\r\nthe funny thing if I call the `result` it will always return same thing, so even if I call\r\n`result()()()()()` - the outcome is always `function anonymousFunction()`\r\n-->\r\n\r\n#### Versions\r\n\"web3\": \"^1.0.0-beta.46\",\r\n\r\n\r\n### Workaround\r\n1. generate data with `encodeABI()`\r\n2. use `web3.eth.call`"},{"labels":["bug"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nThe JSON response from `web3.eth.getTransactionReceipt()` has a `status` field of type Boolean.\r\n\r\n#### Actual behavior\r\nThe JSON response from `web3.eth.getTransactionReceipt()` has no `status` field.\r\n\r\n#### Steps to reproduce the behavior\r\nIn a browser console with web3 present:\r\n```javascript\r\nlet txReceipt;\r\nweb3.eth.getTransactionReceipt('0x11c93ebee96083a0284ea2f7ee9cf3b904ae297b2fe044071e97d8f54d380298', (err, res) => txReceipt = res);\r\nconsole.log(txReceipt.status); // => undefined\r\n```\r\n\r\nThis is the response. No `status` field as described [in the docs](https://web3js.readthedocs.io/en/1.0/web3-eth.html?highlight=gettransactionreceipt#gettransactionreceipt) is present.\r\n```json\r\n{\r\n  \"blockHash\": \"0x50faa77b632f1bcae045bc2cba1882227b225bcf8b100df7d0bc08abbd330b18\",\r\n  \"blockNumber\": 4243855,\r\n  \"contractAddress\": null,\r\n  \"cumulativeGasUsed\": 4299876,\r\n  \"from\": \"0x7f33e15b32c83018662a7a5eeb1d2b0d970364c6\",\r\n  \"gasUsed\": 140656,\r\n  \"logs\": [\r\n    {\r\n      \"address\": \"0x8bf7b2d536d286b9c5ad9d99f608e9e214de63f0\",\r\n      \"blockHash\": \"0x50faa77b632f1bcae045bc2cba1882227b225bcf8b100df7d0bc08abbd330b18\",\r\n      \"blockNumber\": 4243855,\r\n      \"data\": \"0x\",\r\n      \"logIndex\": 53,\r\n      \"removed\": false,\r\n      \"topics\": [\r\n        \"0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51\",\r\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n      ],\r\n      \"transactionHash\": \"0x11c93ebee96083a0284ea2f7ee9cf3b904ae297b2fe044071e97d8f54d380298\",\r\n      \"transactionIndex\": 122\r\n    },\r\n    {\r\n      \"address\": \"0x8bf7b2d536d286b9c5ad9d99f608e9e214de63f0\",\r\n      \"blockHash\": \"0x50faa77b632f1bcae045bc2cba1882227b225bcf8b100df7d0bc08abbd330b18\",\r\n      \"blockNumber\": 4243855,\r\n      \"data\": \"0x\",\r\n      \"logIndex\": 54,\r\n      \"removed\": false,\r\n      \"topics\": [\r\n        \"0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef\",\r\n        \"0x0000000000000000000000007f33e15b32c83018662a7a5eeb1d2b0d970364c6\",\r\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n      ],\r\n      \"transactionHash\": \"0x11c93ebee96083a0284ea2f7ee9cf3b904ae297b2fe044071e97d8f54d380298\",\r\n      \"transactionIndex\": 122\r\n    }\r\n  ],\r\n  \"logsBloom\": \"0xr\n  \"root\": \"0xbc943fe17a827560086fbabe930a8931afc19a5dc4e84b0018509dd42aa19369\",\r\n  \"to\": \"0x8bf7b2d536d286b9c5ad9d99f608e9e214de63f0\",\r\n  \"transactionHash\": \"0x11c93ebee96083a0284ea2f7ee9cf3b904ae297b2fe044071e97d8f54d380298\",\r\n  \"transactionIndex\": 122\r\n}\r\n```"},{"labels":["bug"],"text":"#### Expected behavior\r\nIt should work in both windows and Ubuntu\r\n\r\n#### Actual behavior\r\nIt works fine on windows, but not on Ubuntu.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nCode to reproduce issue:\r\nconst Web3 = require(\"web3\");\r\n\r\nconst web3 = new Web3(\"ROPSTENINFURAURL\");\r\n\r\nconst account = web3.eth.accounts.privateKeyToAccount(\"MYPRIVATEKEY\");\r\nweb3.eth.accounts.wallet.add(account);\r\n\r\nweb3.eth.sendTransaction({\r\n        from: \"MYADDRESS\",\r\n        gas: \"21000\",\r\n        gasPrice: \"15000000000\",\r\n        to: \"TOADDRESS\",\r\n        value: \"20000000000000000\"})\r\n.then ((result) => {\r\n    console.log(result)\r\n})\r\n.catch ((error) => {\r\n    console.error(error);\r\n})\r\n\r\n#### Error Logs\r\nTypeError: Cannot create property 'from' on string '0xf86a29840bebc20082520894fe86cc3496d29766fdd21c5cb162ad24bac752e3876a94d74f4300008029a0d8b35110ec5ebac6d7ce4c308930c8e07f8e83be678acf7a602c434ec8d335b2a0757a58ad0d38cf51aa75079da944f918a6f37d43a610e8572c015b3b20f8cf48'\r\n    at Object.inputTransactionFormatter (/TEP_mirroring_escrow/node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:78:21)\r\n    at SendTransactionMethod.beforeExecution (/TEP_mirroring_escrow/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1075:44)\r\n    at SendTransactionMethod.execute (/TEP_mirroring_escrow/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1006:12)\r\n    at /TEP_mirroring_escrow/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1100:85\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\nNPM: 6.4.1\r\nNode: v10.15.1\r\nWeb3.js: ^1.0.0-beta.46\r\nOS: docker ubuntu:latest "},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\nAny transaction receipt with `0x01` as result should be considered successful. \r\n\r\n#### Actual behavior\r\n\r\nFunction `isValidReceiptStatus`  in `TransactionReceiptValidator.js` doesn't consider `0x01` as valid. \r\n\r\n#### Steps to reproduce the behavior\r\n\r\nThis is seen in an RSK node but could happen in any node that manages this type of hexa encoding. \r\n\r\n1. Connect to an RSK network (i.e. `https://public-node.testnet.rsk.co`)\r\n2. Execute this command: `web3.eth.getTransactionReceipt(\"0x3f7c81902c008538d5c9f39115a31e14036fc6b9110899239660f074203f3cc1\")`\r\n3. Check in the receipt that status value is `0x01`\r\n\r\nTherefore, if you apply `isValidReceiptStatus`  from `TransactionReceiptValidator.js` to that receipt, it will throw an exception with this message: \"Transaction has been reverted by the EVM\".\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\nTruffle v5.0.4 (core: 5.0.4)\r\nSolidity v0.5.0 (solc-js)\r\nNode v11.10.\r\nweb3.js 1.0.0-beta.46\r\n"},{"labels":["bug"],"text":"**All issues which aren't created with this template will get immediately closed.**\r\n\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\nThis happens on an Angular 7 project, I am not sure if this issue also affects other frameworks or if it is some combination with the dependencies that Angular pulls.\r\n\r\nAfter some debugging (that was made harder due to zone.js), I found out that when a `net::ERR_NAME_NOT_RESOLVED` or an `net::ERR_CONNECTION_REFUSED` error will happen\r\n`request.onreadystatechange` will get called with `request.readyState === 4` && `request.status === 0`.\r\nSince there is no handling of this case the promise will not resolve at all.\r\n\r\nhttps://github.com/ethereum/web3.js/blob/89ee348a9758362e994ef2d8625f8aef46c61b91/packages/web3-providers/src/providers/HttpProvider.js#L142 \r\n\r\n#### Expected behavior\r\nPromise should reject when the connection is refused or DNS fails to resolve.\r\n\r\n#### Actual behavior\r\n\r\nThe promise never resolves/rejects.\r\n\r\n#### Steps to reproduce the behavior\r\n1. Set an invalid rpc endpoint url on the `HttpProvider`. It can be either an url of of something that is not an rpc endpoint or and invalid url that dns cannot resolve.\r\n2. Attempt to get the chain id `await this.web3.eth.net.getId();`\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\n* npm: '6.4.1'\r\n* node: v10.13.0\r\n* web3.js: 1.0.0-beta.46\r\n\r\nChrome and Firefox (Linux)\r\n\r\n"},{"labels":["bug"],"text":"Up to version beta.37, there was an issue with checking the receipt for transaction execution status:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/1d9f6c0889c7f551b4ec1041cece0d50bc3ff2c8/packages/web3-core-method/src/index.js#L351\r\n\r\nWhile `gasProvided` is a hex string, `receipt.gasUsed` is a number, making the condition always fail -and therefore failing to do any check-. Proper comparison would be:\r\n\r\n```js\r\ngasProvided !== utils.numberToHex(receipt.gasUsed)\r\n```\r\n\r\nIt looks like after the refactor in version beta.38 and up, the condition is the same:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/599851753b4a35b5c11f902c7c592b111e190073/packages/web3-core-method/src/validators/TransactionReceiptValidator.js#L80\r\n\r\nI was unable to check the latests versions yet as will remain in beta.37 for now but it is possible that the error persist."},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\nWhen signing transactions in Ethereum Classic (might be applicable to other chains as well), the signing logic in the accounts package shall use the proper `chainId` (i.e. 61/62) if it is not specified in the transaction object by calling `eth_chainId` RPC.\r\n\r\n#### Actual behavior\r\n\r\nIn the above mentioned case, the chainId value is actually retrieved using the `net_version` RPC call, which does return an incorrect value (prior EIP-155).\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Connect web3 to an Ethereum Classic node.\r\n2. Create a wallet/account so allow web3 to sign the txs.\r\n3. Send tx without specifying the chain ID.\r\n4. Check the transaction was not created using a `chainId` value 61/62.\r\n\r\n#### Error Logs\r\n\r\nN/A \r\n\r\n#### Versions\r\nWeb3.js@1.0.0-beta.37\r\n\r\nRelated to #1644.\r\n\r\nA quick fix for beta.37 and previous versions is to apply this patch:\r\n\r\n```diff\r\n--- a/node_modules/web3-eth-accounts/src/index.js\r\n+++ b/node_modules/web3-eth-accounts/src/index.js\r\n@@ -69,7 +69,7 @@ var Accounts = function Accounts() {\r\n     var _ethereumCall = [\r\n         new Method({\r\n             name: 'getId',\r\n-            call: 'net_version',\r\n+            call: 'eth_chainId',\r\n             params: 0,\r\n             outputFormatter: utils.hexToNumber\r\n         }),\r\n```"},{"labels":["bug"],"text":"#### Expected behavior\r\nUsing eth.personal.ecRecover, it should return an address when provided with signed data. noticed it was checking the signed data as an input address.\r\n\r\n#### Actual behavior\r\nThe function seems to be verifying the signed data as an address\r\n```javascript\r\nfunction EcRecoverMethod(utils, formatters) {\r\n      _classCallCheck(this, EcRecoverMethod);\r\n\r\n      return _possibleConstructorReturn(this, _getPrototypeOf(EcRecoverMethod).call(this, 'personal_ecRecover', 3, utils, formatters));\r\n    }\r\n\r\n    _createClass(EcRecoverMethod, [{\r\n      key: \"beforeExecution\",\r\n      value: function beforeExecution(moduleInstance) {\r\n        this.parameters[0] = this.formatters.inputSignFormatter(this.parameters[0]);\r\n        this.parameters[1] = this.formatters.inputAddressFormatter(this.parameters[1]);\r\n      }\r\n    }]);\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Sign some data `const sig = await web3.eth.personal.sign(data)`\r\n2. Try to recover your address `const addr = await web3.eth.personal.ecRecover(data, sig)`\r\n\r\n#### Error Logs\r\n``` javascript\r\nfunction EcRecoverMethod(utils, formatters) {\r\n      _classCallCheck(this, EcRecoverMethod);\r\n\r\n      return _possibleConstructorReturn(this, _getPrototypeOf(EcRecoverMethod).call(this, 'personal_ecRecover', 3, utils, formatters));\r\n    }\r\n\r\n    _createClass(EcRecoverMethod, [{\r\n      key: \"beforeExecution\",\r\n      value: function beforeExecution(moduleInstance) {\r\n        this.parameters[0] = this.formatters.inputSignFormatter(this.parameters[0]);\r\n        this.parameters[1] = this.formatters.inputAddressFormatter(this.parameters[1]);\r\n      }\r\n    }]);\r\n```\r\n\r\n#### Versions\r\nMac OS, Node 11.3, web3 version beta-46\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nThis happend on my dev server and not locally, because the dev update packages and we relied on not a set version of web3. So the error did not happen locally until I deleted all nodemodules and installed again. Forgot to check what version I had locally.\r\n\r\nBut I expect to\r\nThe transaction to go through. It has worked before, but suddenly with some of the new changes it did not work. First of all the main problem was that the ._address property of the contract object was gone in an update, so changed it to address.\r\nBut this code is suppose to work, and is not changed\r\n```\r\nconst executeAddAttributeTransaction = async (contract, identity, sig, attribute, value, validity, payer) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try{\r\n      const web3 = ethereum.web3;\r\n      const nonce = await web3.eth.getTransactionCount(payer);\r\n      const txObj = await contract.methods.setAttributeSigned(identity, sig.v, sig.r, sig.s, attribute, value, validity);\r\n      const tx = txObj.send({from: payer, gas:200000,});\r\n      tx.on('transactionHash', (hash) => {\r\n        resolve({\r\n          hash,\r\n          nonce,\r\n        })\r\n      });\r\n      tx.on('error', (e, outOfGasReciept) => {\r\n        logger.error(e.message, {error: e, outOfGasReciept: outOfGasReciept,});\r\n        reject(e);\r\n      });\r\n    } catch(e) {\r\n      reject(e);\r\n    }\r\n  })\r\n```\r\n\r\n#### Actual behavior\r\nThrowing an error deep down in the library.\r\nHappening on this code \r\n```\r\nvar inputTransactionFormatter = function inputTransactionFormatter(txObject, moduleInstance) {\r\n  txObject = txInputFormatter(txObject);\r\n  if (!isNumber(txObject.from) && !isObject(txObject.from)) {\r\n    if (!txObject.from) {\r\n--->txObject.from = moduleInstance.defaultAccount;\r\n    }\r\n    if (!txObject.from && !isNumber(txObject.from)) {\r\n      throw new Error('The send transactions \"from\" field must be defined!');\r\n    }\r\n    txObject.from = inputAddressFormatter(txObject.from);\r\n  }\r\n  return txObject;\r\n};\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Run the following code in closed environment.\r\n2. Send in these variables:\r\n**contract:** is a initiated contract instance of this contract https://github.com/uport-project/ethr-did-registry/tree/develop/contracts, you find the address to the network you are going too.\r\n**identity:** is just a ethereum address, can be whatever.\r\n**sig:** is a normal signature from that identity\r\n**attribute:** is just a string, im using 'did/svc/name'\r\n**value:** just a normal value\r\n**validity:** a number, doesnt matter, represent the time of validity\r\n**payer:** is a opened ethereuaccount that can transfer this transasction\r\n\r\nThen it should fail on send at the stage i pointed out\r\n\r\n#### Error Logs\r\n\r\n```\r\n'TypeError: Cannot create property \\'from\\' on string \\'0xf9018c820173843b9aca0083030d4094dca7ef03e98e0dc2b855be647c39abe984fcf21b80b90124123b5e98000000000000000000000000d9419a2365da3a7fb8c840f5bb03d5407c953f41000000000000000000000000000000000000000000000000000000000000001bc47e91cd456927ce28008c3c09b16868f887a102e03d61ce4e0960c9edadc2007932371e69ebd2d59e842d78ef86f430499cb558aed461d400c7e39d82d45f536469642f7376632f6e616d65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000eaf625800000000000000000000000000000000000000000000000000000000000000000361646600000000000000000000000000000000000000000000000000000000002ca05e07e3f14023688f0edb7b6ad44ac99a1df9ae550a47059be112df38fbbac97ea0666937d68cfbecdd4cc1a705073ea67f5d86a26a46a2cbac894bbda04be5c048\\'\\n    at Object.inputTransactionFormatter (/Users/snorre/code/diwala/cert-platform/packages/api/node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:78:21)\\n    at SendContractMethod.beforeExecution (/Users/snorre/code/diwala/cert-platform/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1075:44)\\n    at SendContractMethod.execute (/Users/snorre/code/diwala/cert-platform/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1006:12)\\n    at /Users/snorre/code/diwala/cert-platform/node_modules/web3-core-method/dist/web3-core-method.cjs.js:1100:85\\n    at <anonymous>\\n    at process._tickCallback (internal/process/next_tick.js:118:7)'\r\n```\r\n\r\n#### Versions\r\nMacOS\r\nNode 9.10\r\nNPM 6.4.0\r\nWeb3 - 1.0.0-beta46\r\nAlso tried earlier versions, but my installment procedure might be broken, because it happend there too.\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nThe method `getTransaction` should return `null` or error for specifying a non-existent transaction.\r\n\r\n#### Actual behavior\r\nThe method `getTransaction` breaks trying to access `blockNumber` of  `null` response.\r\n\r\n#### Steps to reproduce the behavior\r\n1. Connect to the **main network** (I used the _Infura_ provider to do so);\r\n2. Call `getTransaction` with a transaction hash that does not exist, like _0x6b39f5caf5907ae686ac42f91527ab6897047027ce688f35b9e28ec4a21e8667_, which is an existent transaction hash from the Rinkeby network.\r\n\r\n```js\r\nthis.web3.eth.getTransaction(transactionHash).catch(console.log);\r\n```\r\n\r\n#### Error Logs\r\n```\r\nTypeError: Cannot read property 'blockNumber' of null\r\n      at Object.outputTransactionFormatter (node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:91:14)\r\n      at GetTransactionMethod.afterExecution (node_modules/web3-core-method/dist/web3-core-method.cjs.js:961:30)\r\n      at GetTransactionMethod._callee$ (node_modules/web3-core-method/dist/web3-core-method.cjs.js:457:39)\r\n      at tryCatch (node_modules/regenerator-runtime/runtime.js:62:40)\r\n      at GeneratorFunctionPrototype.invoke [as _invoke] (node_modules/regenerator-runtime/runtime.js:288:22)\r\n      at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (node_modules/regenerator-runtime/runtime.js:114:21)\r\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n      at _next (node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n      at process._tickCallback (internal/process/next_tick.js:109:7)\r\n```\r\n\r\n#### Versions\r\nNPM: v6.15.1\r\nNode: v10.15.1\r\nWeb3.js: 1.0.0-beta.46 (latest)\r\nOS: Ubuntu 16.04\r\n"},{"labels":["bug",null],"text":"#### Expected behavior\r\nThe params array inside the json rpc call should not contain an empty object when creating subscription to \"newBlockHeaders\". The call should be:\r\n`{\"method\":\"eth_subscribe\",\"params\":[\"newHeads\"],\"id\":1,\"jsonrpc\":\"2.0\"}`\r\n\r\n#### Actual behavior\r\nWhen creating the subscription for \"newBlockHeaders\", the json rpc call sends in the params array an extra parameter, to be more specific an empty object: \r\n`{\"method\":\"eth_subscribe\",\"params\":[\"newHeads\", {}],\"id\":1,\"jsonrpc\":\"2.0\"}`\r\n\r\nTherefor Parity returns the following error:\r\n`{\"code\":-32602,\"message\":\"Couldn't parse parameters: newHeads\",\"data\":\"\\\"Expected no parameters.\\\"\"}`\r\n\r\nOn Geth it's working and no errors are returned, but Parity seems more strict.\r\n\r\n#### Steps to reproduce the behavior\r\n```\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3(\"ws://localhost:8546\"); // This needs to be a Parity node\r\n\r\nweb3.eth.subscribe('newBlockHeaders', (error, result) => {\r\n  if (!error) {\r\n    console.log(result);\r\n\r\n    return;\r\n  }\r\n\r\n  console.error(error);\r\n}).on(\"data\", (blockHeader) => {\r\n  console.log(blockHeader);\r\n}).on(\"error\", (error) => {\r\n  console.error(error)\r\n});\r\n```\r\n#### Error Logs\r\n```\r\nError: Provider error: Error: Node error: {\"code\":-32602,\"message\":\"Couldn't parse parameters: newHeads\",\"data\":\"\\\"Expected no parameters.\\\"\"}\r\n    at /debug-app/node_modules/web3-providers/dist/web3-providers.cjs.js:334:15\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:189:7)\r\n```\r\n#### Versions\r\nParity 2.2.8-stable and 2.2.9-stable\r\nNPM 6.4.1\r\nNode 8.15.0\r\nWeb3js 1.0.0-beta.46\r\nOS Ubuntu 18.04\r\n\r\nUsing Web3js 1.0.0-beta.37, the pre-migration to ES6 version is working. I did a quick verification and the rpc call does not contain the extra empty object in the params array when creating the above mentioned subscription.\r\n"},{"labels":["bug"],"text":"**All issues which aren't created with this template will get immediately closed.**\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nweb3.eth.getBlockTransactionCount will return the total transaction count for the block\r\n\r\n#### Actual behavior\r\nError return from nodejs and do not receive any total transaction count from the web3.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Simply get the block number from ropsten\r\n2. Put the block number inside the web3.eth.getBlockTransactionCount\r\n3. console.log the result\r\n\r\n#### Error Logs\r\nError: Node error: {\"code\":-32602,\"message\":\"missing value for required argument 1\"} at Function.validate (C:\\xampp\\htdocs\\xcoin-btc\\node_modules\\web3-providers\\dist\\web3-providers.cjs.js:349:18) at C:\\xampp\\htdocs\\xcoin-btc\\node_modules\\web3-providers\\dist\\web3-providers.cjs.js:462:57 at process._tickCallback (internal/process/next_tick.js:68:7) (node:13152) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n\r\n#### Versions\r\nweb3 ^1.0.0-beta.46 \r\nnode v10.15.0\r\nropsten testnet\r\n"},{"labels":["bug"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n`decodeLog` in `AbiCoder.js` ([here](https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-abi/src/AbiCoder.js#L271)) should return a map from all event parameter names to their decoded data with respect to the type specified in the ABI.\r\n#### Actual behavior\r\nThe data used to decode indexed parameters of events is shifted by one topic (i.e. the first indexed parameter uses the data from `topics[0]` when it should in fact use `topics[1]`). Note that the first topic (`topics[0]`) is always defined to be the hash of the event signature.\r\n#### Steps to reproduce the behavior\r\nUse `getPastEvents` to query for an event with at least one indexed parameter and compare the result value of the event with the raw value.\r\n#### Error Logs\r\nno error\r\n#### Versions\r\nweb3.js 1.0.0-beta.46\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nsend transaction should work fine.\r\n\r\n#### Actual behavior\r\n```\r\nUncaught (in promise) TypeError: Cannot read property 'anonymous' of undefined\r\n    at AllEventsLogDecoder.decode (web3-eth-contract.umd.js:232)\r\n    at AllEventsLogDecoder.decode (web3-eth-contract.umd.js:263)\r\n    at web3-eth-contract.umd.js:627\r\n    at Array.forEach (<anonymous>)\r\n    at SendContractMethod.afterExecution (web3-eth-contract.umd.js:626)\r\n    at TransactionConfirmationWorkflow.handleSuccessState (web3-core-method.umd.js:103)\r\n    at web3-core-method.umd.js:57\r\n```\r\n#### Steps to reproduce the behavior\r\n```javascript\r\nconst Web3 = require('web3');\r\nconst abi = [...];\r\nconst addr = '0x....';\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nconst contractInstance = new web3.eth.Contract(abi, addr);\r\nconst methodArgs = [...];\r\ncontractInstance.methods.myMethod(...methodArgs).send({from, value}, (err, txHash) => {\r\n  console.log(txHash);\r\n});\r\n```\r\nwhen transaction is confirmed on the blockchain, exception occurred.\r\n#### Error Logs\r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read property 'anonymous' of undefined\r\n    at AllEventsLogDecoder.decode (web3-eth-contract.umd.js:232)\r\n    at AllEventsLogDecoder.decode (web3-eth-contract.umd.js:263)\r\n    at web3-eth-contract.umd.js:627\r\n    at Array.forEach (<anonymous>)\r\n    at SendContractMethod.afterExecution (web3-eth-contract.umd.js:626)\r\n    at TransactionConfirmationWorkflow.handleSuccessState (web3-core-method.umd.js:103)\r\n    at web3-core-method.umd.js:57\r\n```\r\n\r\n#### code snapshot:\r\n<img width=\"763\" alt=\"wechatimg168\" src=\"https://user-images.githubusercontent.com/12495406/52531507-88aab300-2d51-11e9-8db1-9fb96af84cc9.png\">\r\n\r\n\r\n#### Versions\r\nWeb3.js - `1.0.0-beta.46`\r\nNodejs - `v10.14.0`\r\nNPM - `v6.4.1`\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n`contractsInstance.events.MyEvent.on('data', evt => {})` should work.\r\n#### Actual behavior\r\nthrow exception: \r\n```\r\nTypeError: callback is not a function\r\n    at web3-core-subscriptions.umd.js:110\r\n    at Array.forEach (<anonymous>)\r\n    at web3-core-subscriptions.umd.js:108\r\n```\r\n#### Steps to reproduce the behavior\r\nsame code works in `1.0.0-beta.36`\r\n```javascript\r\nconst Web3 = require('web3');\r\nconst abi = [...];\r\nconst addr = '0x....';\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nconst contractInstance = new web3.eth.Contract(abi, addr);\r\ncontractInstance.events.MyEvent({filter, fromBlock}) // no callback here\r\n.on('data', evt => {\r\n  console.log(evt);\r\n})\r\n.on('error', e => {\r\n  console.log(e);\r\n});\r\n```\r\n#### Error Logs\r\n```\r\nTypeError: callback is not a function\r\n    at web3-core-subscriptions.umd.js:110\r\n    at Array.forEach (<anonymous>)\r\n    at web3-core-subscriptions.umd.js:108\r\n```\r\n#### The code snapshot:\r\n<img width=\"816\" alt=\"wechatimg167\" src=\"https://user-images.githubusercontent.com/12495406/52530943-d8d14780-2d48-11e9-837a-4588e6ebf269.png\">\r\n\r\n#### Versions\r\nWeb3.js - `1.0.0-beta.46`\r\nNodejs - `v10.14.0`\r\nNPM - `v6.4.1`\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nDocumentation should accurately describe the way to import Web3 into a Typescript project. There are conflicting documentations about the correct import, neither of which work.\r\n\r\nhttps://github.com/ethereum/web3.js#usage-with-typescript\r\n```\r\nimport Web3 from 'web3';\r\nconst web3 = new Web3(\"ws://localhost:8546\");\r\n```\r\n\r\nhttps://web3js.readthedocs.io/en/1.0/web3.html\r\n```\r\nimport {Web3} from 'web3';\r\n\r\n// \"Web3.providers.givenProvider\" will be set if in an Ethereum supported browser.\r\nconst web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\r\n```\r\n\r\n#### Actual behavior\r\nErrors from both approaches, see below for logs.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create Typescript project.\r\n2. Import using either of the documented processes.\r\n\r\n#### Error Logs\r\n```\r\n[1] const web3 = new web3_1.Web3(\"ws://localhost:8546\");\r\n[1]              ^\r\n[1]\r\n[1] TypeError: web3_1.Web3 is not a constructor\r\n[1]     at Object.<anonymous> (/Users/rahul/Desktop/connext/connext/moloch-monorepo/packages/moloch-backend/dist/src/index.js:6:14)\r\n[1]     at Module._compile (internal/modules/cjs/loader.js:734:30)\r\n[1]     at Object.Module._extensions..js (internal/modules/cjs/loader.js:745:10)\r\n[1]     at Module.load (internal/modules/cjs/loader.js:626:32)\r\n[1]     at tryModuleLoad (internal/modules/cjs/loader.js:566:12)\r\n[1]     at Function.Module._load (internal/modules/cjs/loader.js:558:3)\r\n[1]     at Module.require (internal/modules/cjs/loader.js:663:17)\r\n[1]     at require (internal/modules/cjs/helpers.js:20:18)\r\n[1]     at Object.<anonymous> (/Users/rahul/Desktop/connext/connext/moloch-monorepo/packages/moloch-backend/dist/index.js:6:10)\r\n[1]     at Module._compile (internal/modules/cjs/loader.js:734:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:745:10)\r\n[1]     at Module.load (internal/modules/cjs/loader.js:626:32)\r\n[1]     at tryModuleLoad (internal/modules/cjs/loader.js:566:12)\r\n[1]     at Function.Module._load (internal/modules/cjs/loader.js:558:3)\r\n[1]     at Module.require (internal/modules/cjs/loader.js:663:17)\r\n[1]     at require (internal/modules/cjs/helpers.js:20:18)\r\n```\r\n\r\n#### Versions\r\nWeb3.js: 1.0.0-beta.46\r\nNode: v11.9.0\r\nNPM: v6.5.0\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nWhen supplying a fully defined transaction to `account.signTransaction`, a signed transaction should be returned.\r\n\r\n#### Actual behavior\r\nAs it stands, the method throws a TypeError: this.signTransaction(...).bind is not a function. This is caused by the early return on line 230 of Accounts.js.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```js\r\nconst Web3 = require(\"web3\");\r\n\r\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:8546\");\r\nlet pk = \"0x0e652850717658cfd360d2c97474f4b2d8db5a9222adef2ebce67788f75e58f8\";\r\nlet account = web3.eth.accounts.privateKeyToAccount(pk);\r\nlet signedTx = account.signTransaction({\r\n    nonce: \"0\",\r\n    chainId: \"1\",\r\n    to: account.address,\r\n    data: web3.utils.toHex('msg'),\r\n    value: \"0\",\r\n    gasPrice: \"0\",\r\n    gas: \"0\"}\r\n    );\r\n```\r\n\r\n#### Error Logs\r\n\r\n`TypeError: this.signTransaction(...).bind is not a function`\r\n\r\n#### Versions\r\n\r\n* NPM: 6.4.1\r\n* Node: 10.15.0\r\n* Web3.js: 1.0.0-beta.44\r\n* OS: Windows 10\r\n"},{"labels":["bug"],"text":"\r\n#### Expected behavior\r\n`contractInstance.methods.myMethod(...args).send({from, value})` should work.\r\n\r\n#### Actual behavior\r\nmetamask throw exception\r\n```\r\nUncaught (in promise) DOMException: Failed to execute 'postMessage' on 'Window': function (error, response) {\r\n              _this2.removeAllListeners(payload.id);\r\n              if (!error) {\r\n ...<omitted>... } could not be cloned.\r\n    at i._write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:114963)\r\n    at b (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:133809)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136921\r\n    at i.g.write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136948)\r\n    at e.exports.y (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:126198)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37110\r\n    at e.exports.s.emit (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37180)\r\n    at w (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121037)\r\n    at _ (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:120852)\r\n    at e.exports.b.push (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121663)\r\n    at a._write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:109371)\r\n    at b (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:133809)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136921\r\n    at a.g.write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136948)\r\n    at l.y (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:126198)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37110\r\n    at l.s.emit (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37180)\r\n    at w (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121037)\r\n    at _ (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:120852)\r\n    at l.b.push (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121663)\r\n    at middleware (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:100110)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at a (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9921)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9723\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10513\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108390\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:103239\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at a (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9921)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9723\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10513\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108390\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:106745\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10037\r\n    at Mt (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10458)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10612\r\n    at Object.mapSeries (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10126)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108305)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107826\r\n    at n (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:25057)\r\n    at Object.Gr [as waterfall] (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:25153)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107794)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107695)\r\n```\r\n#### Steps to reproduce the behavior\r\n\r\nThe same code worked in version `1.0.0-beta.36`\r\n```javascript\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nconst abi = [...];\r\nconst addr = '0x....';\r\nconst myMethodArgs = [...];\r\nconst contractInstance = new web3.eth.Contract(abi, addr);\r\ncontractInstance.methods.myMethod(...myMethodArgs).send({from, value}, (err, txHash) => {\r\n  if (err) {\r\n    console.log(err);\r\n  } else {\r\n    console.log(txHash);\r\n  }\r\n});\r\n\r\n// result is the following error log from metamask\r\n```\r\n\r\n#### Error Logs\r\n```\r\nUncaught (in promise) DOMException: Failed to execute 'postMessage' on 'Window': function (error, response) {\r\n              _this2.removeAllListeners(payload.id);\r\n              if (!error) {\r\n ...<omitted>... } could not be cloned.\r\n    at i._write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:114963)\r\n    at b (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:133809)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136921\r\n    at i.g.write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136948)\r\n    at e.exports.y (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:126198)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37110\r\n    at e.exports.s.emit (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37180)\r\n    at w (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121037)\r\n    at _ (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:120852)\r\n    at e.exports.b.push (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121663)\r\n    at a._write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:109371)\r\n    at b (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:133809)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136921\r\n    at a.g.write (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:136948)\r\n    at l.y (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:126198)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37110\r\n    at l.s.emit (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:37180)\r\n    at w (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121037)\r\n    at _ (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:120852)\r\n    at l.b.push (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:121663)\r\n    at middleware (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:100110)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at a (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9921)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9723\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10513\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108390\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:103239\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at a (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9921)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:9723\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10513\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108390\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:106745\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108362\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10488\r\n    at u (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10013)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10037\r\n    at Mt (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10458)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10612\r\n    at Object.mapSeries (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:10126)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:108305)\r\n    at chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107826\r\n    at n (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:25057)\r\n    at Object.Gr [as waterfall] (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:25153)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107794)\r\n    at e.value (chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/inpage.js:1:107695)\r\n```\r\n#### Versions\r\nNPM: v6.4.1\r\nNode: v10.14.0\r\nMacOS\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nSend transaction to smart contract method\r\n#### Actual behavior\r\nThrows a strange error\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst contractInstance = new web3.eth.Contract(abi,address );\r\n return new Promise((resolve, reject) => {\r\n            contractInstance .methods.addData(data).send({ from: \"0x3b0282D31174B927e102bA71d80dF34F4e596Fc4\", gas:300000},(error, result) => {\r\n                if (!error) {\r\n                    resolve(result)\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        })\r\n```\r\n\r\n#### Error Logs\r\n```\r\n`TypeError: Cannot create property 'from' on string '0xf9056d808509502f9000830493e09439126b2a8801909a7b379e503c5ee270ff700e0580b905043a03cbec0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000001044442d313534393535393330313536320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074d61726f75656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644626f75626100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006504153503031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000073033313435363400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653454a3031320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000354554e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4d454c4c49544120444a4552424100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034652410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a30332d30372d3230313700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c627572656175456e747265650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c9000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000034555520000000000000000000000000000000000000000000000000000000000820bfaa06b1d4370a2ab603dbf83b51c342643bff86a997b2ffbd24877a1dda7a8623a46a05ead679cbd26ed8f4353e1aeb4df24290334fbb0a7caed20dd81bdef96735c0e'\r\n\r\n`\r\n```\r\n#### Versions\r\nnpm v6.4.1\r\nnode v10.13.0\r\nweb3js v1.0.0-beta.41\r\nOS windows 10\r\n"},{"labels":["bug"],"text":"Please have a look at this ticket in MetaMask, according to them, the problem comes from web3,js:\r\n\r\n[TypeError: NetworkError when attempting to fetch resource](https://github.com/MetaMask/metamask-extension/issues/6095)\r\n\r\nIf the problem is related to MetaMask, not to web3.js, then please get into contact with that team and try to find a solution together.\r\n\r\nHere a summary of the problem:\r\n\r\n**Downgrade web3 to 1.0.0-beta.37 solves the problem**\r\n\r\n#### Expected behavior\r\n\r\nSuccess, no error message, but access to the blockchain.\r\n\r\n#### Actual behavior\r\n\r\nError: `DataCloneError: The object could not be cloned`\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n I can reproduce the problem with a simple [react-metamask-test](https://github.com/mwaeckerlin/react-metamask-test) demo:\r\n\r\n```bash\r\ngit clone https://github.com/mwaeckerlin/react-metamask-test\r\ncd react-metamask-test\r\nnpm install\r\nsolc --overwrite --combined-json abi,bin -o src/contracts/json src/contracts/test.sol\r\nganache-cli -d --db ${HOME}/tmp/ganache/db -i 123456\r\nBROWSER=none npm start\r\n```\r\n\r\n1. Start Firefox, disable Metamask, head to http://localhost:3000, create a contract (chose a local account, add some text, press the button) → **It works without MetaMask!**\r\n2. Enable Metamask, reload the page, try again → **ERROR: `DataCloneError: The object could not be cloned`**\r\n\r\nThe following patch fixed the problem:\r\n```\r\ndiff --git a/package.json b/package.json\r\nindex b48ff8d..fc5a020 100644\r\n--- a/package.json\r\n+++ b/package.json\r\n@@ -6,7 +6,7 @@\r\n     \"react\": \"^16.8.0\",\r\n     \"react-dom\": \"^16.8.0\",\r\n     \"react-scripts\": \"2.1.3\",\r\n-    \"web3\": \"^1.0.0-beta.41\"\r\n+    \"web3\": \"1.0.0-beta.37\"\r\n   },\r\n   \"scripts\": {\r\n     \"start\": \"react-scripts start\",\r\n```\r\n\r\n#### Error Logs\r\n\r\n`DataCloneError: The object could not be cloned` (and other)\r\n\r\n#### Versions\r\n\r\n - react 16.7.0\r\n - web3, 1.0.0-beta.41\r\n - canache-cli 6.2.5\r\n - canache-code 2.3.3\r\n - Firefox Quantum 64.0\r\n - Metamask 5.3.2, also tested backgrade to 5.3.0\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n```\r\npragma solidity ^0.4.11;\r\n\r\ncontract Voting {\r\n    mapping (bytes32 => uint8) public votesReceived;\r\n    bytes32[] public candidateList;\r\n\r\n    function Voting(bytes32[] candidateNames) {\r\n        candidateList = candidateNames;\r\n    }\r\n\r\n    function totalVotesFor(bytes32 candidate) returns (uint8) {\r\n        if (validCandidate(candidate) == false) throw;\r\n        return votesReceived[candidate];\r\n    }\r\n\r\n    function voteForCandidate(bytes32 candidate) {\r\n        if (validCandidate(candidate) == false) throw;\r\n        votesReceived[candidate] += 1;\r\n    }\r\n\r\n    function validCandidate(bytes32 candidate) returns (bool) {\r\n        for(uint i = 0; i < candidateList.length; i++) {\r\n            if (candidateList[i] == candidate) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n```\r\nconst Web3 = require('web3');\r\nconst solc = require('solc');\r\nconst fs = require('fs');\r\n\r\nconst provider = new Web3.providers.HttpProvider(\"http://localhost:8545\")\r\nconst web3 = new Web3(provider);\r\nconst asciiToHex = Web3.utils.fromAscii;\r\n\r\nconst candidates = ['Rama', 'Nick', 'Jose'];\r\n\r\nweb3.eth.getAccounts()\r\n.then((accounts) => {\r\n  const code = fs.readFileSync('./voting.sol').toString();\r\n  const compiledCode = solc.compile(code);\r\n  const errors = [];\r\n  const warnings = [];\r\n  (compiledCode.errors || []).forEach((err) => {\r\n    if (/\\:\\s*Warning\\:/.test(err)) {\r\n      warnings.push(err);\r\n    } else {\r\n      errors.push(err);\r\n    }\r\n  });\r\n\r\n  if (errors.length) {\r\n    throw new Error('solc.compile: ' + errors.join('\\n'));\r\n  }\r\n  if (warnings.length) {\r\n    console.warn('solc.compile: ' + warnings.join('\\n'));\r\n  }\r\n  const byteCode = compiledCode.contracts[':Voting'].bytecode;\r\n  const abiDefinition = JSON.parse(compiledCode.contracts[':Voting'].interface);\r\n\r\n  const VotingContract = new web3.eth.Contract(abiDefinition,\r\n    {data: byteCode, from: accounts[0], gas: 47}\r\n  );\r\n\r\n  let deployedContract = null;\r\n  const votingHex = candidates.map(asciiToHex) // votingHex [ '0x52616d61', '0x4e69636b', '0x4a6f7365']\r\n  VotingContract.deploy({\r\n    data: byteCode,\r\n    arguments: [votingHex]\r\n  })\r\n  .send(function (error, transactionHash) {\r\n    if (error) new Error(error); // here return error\r\n    console.log('transactionHash', transactionHash);\r\n  })\r\n  .catch((e) => {\r\n    console.error(e)\r\n    process.exit(1)\r\n  })\r\n});\r\n```\r\nThis is a small example of a contract.\r\nI want to deploy a smart contract and vote for candidate.\r\n\r\n#### Actual behavior\r\nI want to deploy a smart contract but in deploy function return error. \r\n\r\nI am using Web3.js 1.0.0-beta.37 because with the version 1.0.0-beta.41 I have this issue\r\nhttps://github.com/ethereum/web3.js/issues/2256\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Connect to private blockchain\r\n2. Compile contract\r\n3. Try to deploy contract with arguments (array to bytes32)\r\n\r\n#### Error Logs\r\n\r\n```\r\nError: Returned error: invalid argument 0: json: cannot unmarshal hex string without 0x prefix into Go struct field SendTxArgs.data of type hexutil.Bytes\r\n```\r\n#### Extra data\r\nI created a private test blockchain with this genesis.json\r\n```\r\n{\r\n  \"config\": {\r\n    \"chainId\": 3,\r\n    \"homesteadBlock\": 1,\r\n    \"eip150Block\": 2,\r\n    \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"eip155Block\": 3,\r\n    \"eip158Block\": 3,\r\n    \"byzantiumBlock\": 4,\r\n    \"clique\": {\r\n      \"period\": 5,\r\n      \"epoch\": 30000\r\n    }\r\n  },\r\n  \"nonce\": \"0x0\",\r\n  \"timestamp\": \"0x5a8efd25\",\r\n  \"extraData\": \"0x00000000000000000000000000000000000000000000000000000000000000003590aca93338b0721966a8d0c96ebf2c4c87c5448cc5a1a0802db41db826c2fcb72423744338dcb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"gasLimit\": \"0xf42400\",\r\n  \"difficulty\": \"0x1\",\r\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\r\n  \"alloc\": {\r\n    \"3590aca93338b0721966a8d0c96ebf2c4c87c544\": {\r\n      \"balance\": \"0x200000000000000000000000000000000000000000000000000000000000000\"\r\n    },\r\n    \"8cc5a1a0802db41db826c2fcb72423744338dcb0\": {\r\n      \"balance\": \"0x200000000000000000000000000000000000000000000000000000000000000\"\r\n    }\r\n  },\r\n  \"number\": \"0x0\",\r\n  \"gasUsed\": \"0x0\",\r\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n}\r\n\r\n```\r\n#### Versions\r\nNPM 6.4.0\r\nNode v8.11.1\r\nWeb3.js 1.0.0-beta.37\r\nOS Ubuntu 18.04\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\nSubscription event fired on each new block.\r\n\r\n#### Actual behavior\r\n\r\nNothing.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\n(async function () {\r\n    \r\n    var Web3 = require(\"web3\");\r\n    var web3 = new Web3(\"ws://localhost:8546\");\r\n\r\n    console.log(\"Web3 Version: \", web3.version);\r\n    \r\n    var latestBlock = await web3.eth.getBlock(\"latest\");\r\n    \r\n    console.log(\"Latest Block: \", latestBlock.number);\r\n\r\n    var subscription = web3.eth.subscribe(\"newBlockHeaders\");\r\n\r\n    subscription.on(\"data\", function (blockHeader) {\r\n        console.log(\"Got block: \", blockHeader.number);\r\n    });\r\n    \r\n})();\r\n```\r\nThis will work as expected up to and including 1.0.0-beta.37.  In the latest version (beta-41) nothing happens - no error, no events.\r\n\r\n#### Error Logs\r\n\r\nNo errors logged.\r\n\r\n#### Versions\r\nweb3@1.0.0-beta.41\r\n"},{"labels":["bug"],"text":"\r\n\r\n#### Expected behavior\r\n\r\nConnect to geth over websocket.\r\n\r\n#### Actual behavior\r\n`instance=Geth/v1.9.0-unstable-7c60d0a6/linux-amd64/go1.11.5`\r\n\r\non beta < 41 the websocket closes immediately after opening it, .on('end') reports a normal closure. Node doesn't report anything.\r\n\r\nWith beta 41 Node throws error `INFO [02-05|15:07:53.142] Served eth_subscribe                     conn= reqid=1 t=34.22µs  err=\"too many arguments, want at most 1\"`\r\n\r\non latest geth stable `instance=Geth/v1.8.22-stable-7fa3509e/linux-amd64/go1.11.5` with beta 41 I get this error:\r\n\r\n    /home/patric/WebstormProjects/cbc-backend/node_modules/web3-providers/dist/web3-providers.cjs.js:304\r\n        event = this.getSubscriptionEvent(response.params.subscription);\r\n                                                          ^\r\n\r\n    TypeError: Cannot read property 'subscription' of undefined\r\n    at WebsocketProvider.onMessage (/home/patric/WebstormProjects/cbc-backend/node_modules/web3-providers/dist/web3-providers.cjs.js:304:59)\r\n    at WebsocketProvider.onMessage (/home/patric/WebstormProjects/cbc-backend/node_modules/web3-providers/dist/web3-providers.cjs.js:410:77)\r\n    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/patric/WebstormProjects/cbc-backend/node_modules/yaeti/lib/EventTarget.js:115:12)\r\n    at W3CWebSocket.onMessage (/home/patric/WebstormProjects/cbc-backend/node_modules/websocket/lib/W3CWebSocket.js:234:14)\r\n    at WebSocketConnection.<anonymous> (/home/patric/WebstormProjects/cbc-backend/node_modules/websocket/lib/W3CWebSocket.js:205:19)\r\n    at emitOne (events.js:116:13)\r\n    at WebSocketConnection.emit (events.js:211:7)\r\n    at WebSocketConnection.processFrame (/home/patric/WebstormProjects/cbc-backend/node_modules/websocket/lib/WebSocketConnection.js:552:26)\r\n    at /home/patric/WebstormProjects/cbc-backend/node_modules/websocket/lib/WebSocketConnection.js:321:40\r\n    at _combinedTickCallback (internal/process/next_tick.js:132:7)\r\n    at process._tickCallback (internal/process/next_tick.js:181:9)\r\n\r\n#### Steps to reproduce the behavior\r\ninstall latest geth stable\r\ninstall latest web3js\r\ntry to establish websocket connection with\r\n\r\n        const wsProvider = new Web3.providers.WebsocketProvider('ws://' + process.env.nodeHost + ':' + process.env.nodePort, {\r\n            headers: {\r\n                Origin: process.env.nodeApiKey\r\n            }\r\n        });\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\n$ npm -v\r\n6.7.0\r\n$ node -v\r\nv8.15.0\r\n\r\n"},{"labels":["bug",null],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nUsing `\"allEvents\"` as event name in `web3.eth.Contract.getPastEvents` should be accepted and return all events matching the specified options according to the [docs](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#getpastevents).\r\n#### Actual behavior\r\nAn exception `\"Error: Event with name \"allEvents\" does not exists.\"` is thrown.\r\n#### Steps to reproduce the behavior\r\nCall `getPastEvents` on a contract with the first argument (event name) set to `\"allEvents\"`.\r\n#### Error Logs\r\n```\r\nError: Event with name \"allEvents\" does not exists.\r\n    at _callee$ (h:\\****\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:959:28)\r\n    at tryCatch (h:\\****\\node_modules\\regenerator-runtime\\runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (h:\\****\\node_modules\\regenerator-runtime\\runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (h:\\****\\node_modules\\regenerator-runtime\\runtime.js:114:21)\r\n    at asyncGeneratorStep (h:\\****\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\r\n    at _next (h:\\****\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\r\n    at h:\\****\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:32:7\r\n    at Promise (<anonymous>)\r\n    at h:\\****\\node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:21:12\r\n    at h:\\****\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:978:23\r\n    at Promise (<anonymous>)\r\n    at AbstractContract.getPastEvents (h:\\****\\node_modules\\web3-eth-contract\\dist\\web3-eth-contract.cjs.js:949:14)\r\n```\r\n#### Versions\r\nObserved on Windows 10 with NodeJS v8.1.2 using web3@1.0.0-beta.41.\r\nThis used to work on the same setup with web3@1.0.0-beta.37."},{"labels":["bug"],"text":"### Expected behavior\r\n\r\nFetch all past events starting with a given block number\r\n\r\n#### Actual behavior\r\n\r\nIt always return the following error:\r\n\r\n`Error: Node error: {\"code\":-32603,\"message\":\"request failed or timed out\"} `\r\n\r\nDowngrading back to web3@1.0.0-beta.37 fixes the issue.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst httpProvider = new Web3.providers.HttpProvider(infuraHTTPProviderURL);\r\nconst web3Instance = new Web3(httpProvider);\r\nconst coreContractInstance = new web3Instance.eth.Contract(coreABI, coreContractAddress);\r\n\r\ncoreContractInstance.getPastEvents('Birth', { fromBlock: 3768892 })\r\n  .then((pastBirthEvents) => { debug('pastBirthEvents: %O', pastBirthEvents) })\r\n  .catch((error) => { debug('error: ', error); process.exit(1) });\r\n\r\n```\r\n\r\n#### Error Logs\r\n\r\n```\r\n(node:379) UnhandledPromiseRejectionWarning: Error: Node error: {\"code\":-32603,\"message\":\"request failed or timed out\"}\r\n    at Function.validate (/home/****/projects/*********/crypto-kitty-midwife/node_modules/web3-providers/dist/web3-providers.cjs.js:66:18)\r\n    at /home/****/projects/*********/crypto-kitty-midwife/node_modules/web3-providers/dist/web3-providers.cjs.js:128:57\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:189:7)\r\n(node:379) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:379) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\n\r\nweb3@1.0.0-beta.41\r\nnode@v8.14.0\r\nnpm@6.5.0\r\nOS: Linux/Ubuntu 18.04\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nIf I run:\r\n```\r\nweb3.eth.accounts.hashMessage(\"0xbf\")\r\n```\r\nI expect to treat `\"0xbf\"` as a string and hash it as a string.\r\n#### Actual behavior\r\n`Invalid UTF-8 detected`.\r\n#### Steps to reproduce the behavior\r\n```\r\nweb3.eth.accounts.hashMessage(\"0xbf\")\r\n```\r\n\r\n#### Error Logs\r\n`Invalid UTF-8 detected`\r\n#### Versions\r\nRemix v0.7.5, Web3.js v1.0.0, Chrome, MacOS\r\n\r\n#### Comment:\r\nWhen the argument to `web3.eth.accounts.hashMessage()` starts from `0x`, the function assumes that it was generated by hex-encoding from UTF-8 and it tries to decode it back to UTF-8. If it's a different hex number, the function fails. Is it really a desired behavior? What if we want to hash a different hex message? For example what if we want to hash a message which itself is a hash? \r\n\r\nIt is quite a headache if you have a message (which is some hash value, starting from `0x`) and you want to sign it in web3.js and then verify the signature in Solidity. To have the same numbers on both sides you need to either:\r\n* accept hex values to be signed in web3.js (which is impossible because of this hashMessage issue),\r\n\r\nor\r\n* manually modify the hex string to not start with `0x` (which is inconvenient in Solidity).\r\n\r\n\r\n\r\n"},{"labels":["bug"],"text":"\r\n```\r\nconst contract = new web3.eth.Contract(abi, address);\r\n\r\nconst batch = new web3.BatchRequest();\r\nfunction callback(err,res){\r\n    console.log(err,res)\r\n}\r\nbatch.add(contract.methods.balance(address).call.request({from: '0x0000000000000000000000000000000000000000'}, callback));\r\nbatch.execute();\r\n```\r\nwork fine with \r\n`web3.eth.getBalance.request( \"0x0000000000000000000000000000000000000000\",\r\n\"latest\", callback )`\r\n\r\n#### Expected behavior\r\nexecute batch and log callback properly\r\n\r\n#### Actual behavior\r\nthrow Error\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. [First step]\r\n2. [Second step]\r\n3. [and so on...]\r\n\r\n#### Error Logs\r\n```\r\nError: Given input \"function callback(err,res){\r\n    console.log(err,res)\r\n}\" is not a number.\r\n    at Object.numberToHex (node_modules/web3-utils/dist/web3-utils.cjs.js:114:11)\r\n    at inputBlockNumberFormatter (node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:37:16)\r\n    at Object.inputDefaultBlockNumberFormatter (node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:25:10)\r\n    at CallContractMethod.beforeExecution (node_modules/web3-core-method/dist/web3-core-method.cjs.js:1217:44)\r\n```\r\n#### Versions\r\n[NPM@6.4.1, Node@v8.12.0, Web3.js@1.0.0-beta.41, OS:macOs@10.14.2]\r\n"},{"labels":["bug",null],"text":"#### Expected behavior\r\nShould be able to send transactions with value on payable contract method.\r\n#### Actual behavior\r\nError ``` 'Can not send value to non-payable contract method or constructor' ```\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst contract = new web3.eth.Contract(\r\n      ABI,\r\n      CONTRACT_ADDRESS,\r\n    );\r\ncontract.methods.method(...params).estimateGas({ value, from });\r\n```\r\nMethod ```isValueValid``` from [MethodOptionsValidator.js](https://github.com/ethereum/web3.js/blob/7ff00822966aef2bd0588a5b39ff2f3eba6acfd1/packages/web3-eth-contract/src/validators/MethodOptionsValidator.js#L102) tried to call ``` abiItemModel.payable ```, but it doesn't have this property and then it returns ``` undefined ``` .\r\n(in [constructor](https://github.com/ethereum/web3.js/blob/7ff00822966aef2bd0588a5b39ff2f3eba6acfd1/packages/web3-eth-contract/src/models/AbiItemModel.js#L31) the developer simply forgot to assign payable value to the method's property)\r\n\r\n#### Error Logs\r\n```Error: 'Can not send value to non-payable contract method or constructor' ```\r\n#### Versions\r\n``` web3@1.0.0-beta.41 ```\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\nShould be able to sign transactions with method on `account` object.\r\n\r\n#### Actual behavior\r\n\r\nError\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\n      const signedTx = this.props.account.signTransaction({\r\n        from: this.props.account.address,\r\n        to: this.state.toAddress,\r\n        value: this.props.web3.utils.toWei(this.state.amount.toString()),\r\n        gas: \"0\"\r\n      });\r\n```\r\n\r\n#### Error Logs\r\n<img width=\"354\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1335122/52092026-3e644d80-256b-11e9-9914-7492268dca16.png\">\r\n\r\nThe first log above is a log of the `account` object. Next is the error message.\r\n\r\n#### Versions\r\nChrome 71, Typescript\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n`web3.utils.randomHex` should defined and work\r\n\r\n#### Actual behavior\r\n`web3.utils.randomHex` is not a function. It's undefined.\r\n\r\n#### Steps to reproduce the behavior\r\n```javascript\r\nimport Web3 from 'web3';\r\nconst web3 = new Web3('http://localhost:8545');\r\nconsole.log(typeof web3.utils.randomHex);\r\n```\r\n\r\n#### Error Logs\r\n`TypeError: web3.utils.randomHex is not a function`\r\n\r\n#### Versions\r\nWeb3.js - 1.0.0-beta.41\r\n\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\nWhen running this line of code:\r\n`web3.eth.personal.newAccount(\"\").then(console.log);`\r\nI should get the address of newly created account according to [documentation](https://web3js.readthedocs.io/en/1.0/web3-eth-personal.html#newaccount).\r\n#### Actual behavior / Steps to reproduce the behavior\r\nHowever, I do get following error message when running the code on different platforms and different node versions (see further below for version details):\r\n#### Error Logs\r\n`/root/dev/bot/node_modules/web3/node_modules/web3-core-method/dist/web3-core-method.cjs.js:411\r\n          throw new TypeError(\"The latest parameter should be a function otherwise it can't be used as callback\");\r\n          ^\r\n\r\nTypeError: The latest parameter should be a function otherwise it can't be used as callback\r\n    at NewAccountMethod.set (/root/dev/bot/node_modules/web3/node_modules/web3-core-method/dist/web3-core-method.cjs.js:411:17)\r\n    at Proxy.anonymousFunction (/root/dev/bot/node_modules/web3/node_modules/web3-core-method/dist/web3-core-method.cjs.js:224:28)\r\n    at Object.<anonymous> (/root/dev/bot/index.js:7:19)\r\n    at Module._compile (internal/modules/cjs/loader.js:736:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:747:10)\r\n    at Module.load (internal/modules/cjs/loader.js:628:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:568:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:560:3)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:801:12)\r\n    at executeUserCode (internal/bootstrap/node.js:526:15)\r\n    at startMainThreadExecution (internal/bootstrap/node.js:439:3)`\r\n#### Versions\r\nNPM 6.5.0, Node v7.10.1 / v8.15.0 / v11.8.0, Web3-1.0.0-beta.41, Debian (Stretch) /  Arch, 4.9.0-8-amd64 / 4.20.3-arch1-1-ARCH"},{"labels":["bug",null],"text":"#### Expected behavior\r\nI tried web3.eth.abi.decodeLog() and got \"null\" value from latest version (beta.41)\r\nI could get correct return value from beta.35.\r\n\r\n\r\n#### Actual behavior\r\n\r\nfrom beta.41\r\nI get this output from decodeLog()\r\n{ '0': '0xBA826fEc90CEFdf6706858E5FbaFcb27A290Fbe0',\r\n  '1': '0xF64D22513198d7F3dbe24ac9f6eCDbfc95209d25',\r\n  '2': null,\r\n  from: '0xBA826fEc90CEFdf6706858E5FbaFcb27A290Fbe0',\r\n  to: '0xF64D22513198d7F3dbe24ac9f6eCDbfc95209d25',\r\n  value: null }\r\n\r\nfrom beta.35\r\n{\r\n  '0': '0xBA826fEc90CEFdf6706858E5FbaFcb27A290Fbe0',\r\n  '1': '0xF64D22513198d7F3dbe24ac9f6eCDbfc95209d25',\r\n  '2': '1000000000000000000000',\r\n  __length__: 3,\r\n  from: '0xBA826fEc90CEFdf6706858E5FbaFcb27A290Fbe0',\r\n  to: '0xF64D22513198d7F3dbe24ac9f6eCDbfc95209d25',\r\n  value: '1000000000000000000000' }\r\n\r\nThe '2' value should be '1000000000000000000000' as previous version.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n\r\nHere's the txid I tried.\r\n0xd95194fc6cdcf68caf90cd887c0e9338cb69856c5edaf0544fd09fef4f331842\r\n\r\nAnd here's the txReceipt log I inserted from that tx.\r\n{ address: '0x0d8775f648430679a709e98d2b0cb6250d2887ef',\r\n  blockHash: '0xb600a1147851792b056c35f2fb9a830ecde5082ea23ac6daac7b4d0aea49a7c6',\r\n  blockNumber: '0x6d0326',\r\n  data: '0x00000000000000000000000000000000000000000000003635c9adc5dea00000',\r\n  logIndex: '0x2',\r\n  removed: false,\r\n  topics:\r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x000000000000000000000000ba826fec90cefdf6706858e5fbafcb27a290fbe0',\r\n     '0x000000000000000000000000f64d22513198d7f3dbe24ac9f6ecdbfc95209d25' ],\r\n  transactionHash: '0xd95194fc6cdcf68caf90cd887c0e9338cb69856c5edaf0544fd09fef4f331842',\r\n  transactionIndex: '0x56',\r\n  transactionLogIndex: '0x0',\r\n  type: 'mined' }\r\n\r\n\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\n1.0.0-beta.41\r\n\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\n`ganache-core`'s provider object should continue to be treated as a valid web3 provider.\r\n\r\nSupport was removed by https://github.com/ethereum/web3.js/commit/1c5f5c59311833681ecc4bb2b8f947e28d9e2843#diff-e77bf80bc71ad9d4c1b43fc43f9f8635 and https://github.com/ethereum/web3.js/commit/30f720b54008149ddc287551f1851d2ba00dd5ed#diff-e77bf80bc71ad9d4c1b43fc43f9f8635L69\r\n\r\nAdditionally, `truffle-hdwallet-provider` should also still be treated as a valid web3 provider.\r\n\r\n\r\n#### Actual behavior\r\n\r\nThe following code use to work:\r\n\r\n```\r\nconst provider = ganache.provider();\r\nconst web3 = new Web3(provider);\r\n```\r\n\r\nbut now throws an `Error: Please provide an valid Web3 provider` error. Related issue at `ganache-core`: https://github.com/trufflesuite/ganache-core/issues/290\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst provider = ganache.provider();\r\nconst web3 = new Web3(provider);\r\n```\r\n\r\n#### Error Logs\r\n\r\n```\r\nError: Please provide an valid Web3 provider\r\n    at ProviderResolver.resolve (/Users/adrianli/dev/repro-subscribe/node_modules/web3-providers/dist/web3-providers.cjs.js:720:13)\r\n    at Web3.AbstractWeb3Module (/Users/adrianli/dev/repro-subscribe/node_modules/web3-core/dist/web3-core.cjs.js:27:51)\r\n    at new Web3 (/Users/adrianli/dev/repro-subscribe/node_modules/web3/dist/web3.cjs.js:30:68)\r\n    at main (/Users/adrianli/dev/repro-subscribe/index.js:13:16)\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:744:11)\r\n    at startup (internal/bootstrap/node.js:285:19)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:739:3)\r\nError: Please provide an valid Web3 provider\r\n    at ProviderResolver.resolve (/Users/adrianli/dev/repro-subscribe/node_modules/web3-providers/dist/web3-providers.cjs.js:720:13)\r\n    at Web3.AbstractWeb3Module (/Users/adrianli/dev/repro-subscribe/node_modules/web3-core/dist/web3-core.cjs.js:27:51)\r\n    at new Web3 (/Users/adrianli/dev/repro-subscribe/node_modules/web3/dist/web3.cjs.js:30:68)\r\n    at main (/Users/adrianli/dev/repro-subscribe/index.js:13:16)\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:744:11)\r\n    at startup (internal/bootstrap/node.js:285:19)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:739:3)\r\n\r\n/Users/adrianli/dev/repro-subscribe/node_modules/solc/soljson.js:22\r\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var __GLOBAL__I_000101=Module[\"__GLOBAL__I_000101\"]=asm[\"__GLOBAL__I_000101\"];var __GLOBAL__sub_I_ABIFunctions_cpp=Module[\"__GLOBAL__sub_I_ABIFunctions_cpp\"]=asm[\"__GLOBAL__sub_I_ABIFunctions_cpp\"];var __GLOBAL__sub_I_ABI_cpp=Module[\"__GLOBAL__sub_I_ABI_cpp\"]=asm[\"__GLOBAL__sub_I_ABI_cpp\"];var __GLOBAL__sub_I_ASTJsonConverter_cpp=Module[\"__GLOBAL__sub_I_ASTJsonConverter_cpp\"]=asm[\"__GLOBAL__sub_I_ASTJsonConverter_cpp\"];var __GLOBAL__sub_I_AST_cpp=Module[\"__GLOBAL__sub_I_AST_cpp\"]=asm[\"__GLOBAL__sub_I_AST_cpp\"];var __GLOBAL__sub_I_ArrayUtils_cpp=Module[\"__GLOBAL__sub_I_ArrayUtils_cpp\"]=asm[\"__GLOBAL__sub_I_ArrayUtils_cpp\"];var __GLOBAL__sub_I_AsmAnalysis_cpp=Module[\"__GLOBAL__sub_I_AsmAnalysis_cpp\"]=asm[\"__GLOBAL__sub_I_AsmAnalysis_cpp\"];var __GLOBAL__sub_I_CompilerContext_cpp=Module[\"__GLOBAL__sub_I_CompilerContext_cpp\"]=asm[\"__GLOBAL__sub_I_CompilerContext_cpp\"];var __GLOBAL__sub_I_Compiler\r\nabort({}). Build with -s ASSERTIONS=1 for more info.\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! repro-subscribe@1.0.0 start: `node index.js`\r\nnpm ERR! Exit status 1\r\nnpm ERR!\r\nnpm ERR! Failed at the repro-subscribe@1.0.0 start script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /Users/adrianli/.npm/_logs/2019-01-29T15_45_27_098Z-debug.log\r\n```\r\n\r\n#### Versions\r\n\r\nTested against `web3@1.0.0-beta.41`"},{"labels":["bug"],"text":"#### Steps to reproduce\r\n\r\n```\r\ncontract.events.Transfer({ fromBlock: 4910000 }, function(error, event) {\r\n   console.log(event);\r\n});\r\n```\r\n#### Expected behavior\r\nThe event object should have `returnValues` property like the example on the document (https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#id38)\r\n\r\n```\r\n{\r\n    returnValues: {\r\n        myIndexedParam: 20,\r\n        myOtherIndexedParam: '0x123456789...',\r\n        myNonIndexParam: 'My String'\r\n    },\r\n    raw: {\r\n        data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n        topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\r\n    },\r\n    event: 'MyEvent',\r\n    signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n    logIndex: 0,\r\n    transactionIndex: 0,\r\n    transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n    blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n    blockNumber: 1234,\r\n    address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\r\n}\r\n```\r\n\r\n#### Actual behavior\r\nOutput doesn't have `returnValues` property at all.\r\n\r\n```\r\n{ address: '0xfbE807500852575a654d52d97ccEd6096A2696CD',\r\n  blockHash:\r\n   '0x70ed10054cd982d5dd02065522dc47854fb51640cae021397ce772e8ee3c1d56',\r\n  blockNumber: 4917830,\r\n  data:\r\n   '0x0000000000000000000000000000000000000000019d971e4fe8401e74000000',\r\n  logIndex: 6,\r\n  removed: false,\r\n  topics:\r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n     '0x000000000000000000000000b62f43623680eeb3d6fd7a8ede0814940b7da8cf' ],\r\n  transactionHash:\r\n   '0x42553eab3955aca45385cb6527be37fbe146ab871698252834465a55e8ceee6e',\r\n  transactionIndex: 7,\r\n  id:\r\n   'log_0x6c3261cc661ff438b254a47a9fbed035b474a232ccbd498bd2477fe38d3abeea' }\r\n```\r\n\r\n#### Versions\r\nNPM: 6.7.0\r\nNode: 11.7.0\r\nWeb3.js: 1.0.0-beta.41\r\nOS: Mac OS 10.14.2\r\n\r\n"},{"labels":["bug",null],"text":"#### Expected behavior\r\ncontract.deploy({\r\n...     data: bytecode,\r\n...     arguments: [stringArray.map(name => web3.utils.asciiToHex(name))]\r\n... }).send({args ...})\r\nshould deploy the contract where argument to contract is an array of bytes32.\r\n\r\nThere is no issue with web3 1.0.0-beta.37, it happens with beta.41\r\n\r\n#### Actual behavior\r\nThe deploy fails with Error: invalid bytes32 value (arg=\"candidateName\", coderType=\"bytes32\", value=\"0x52616d61\", version=4.0.23)\r\n\r\n#### Error Logs\r\n\r\n> (node:46067) UnhandledPromiseRejectionWarning: Error: invalid bytes32 value (arg=\"candidateNames\", coderType=\"bytes32\", value=\"0x52616d61\", version=4.0.23)\r\n    at Object.throwError (node_modules/ethers/errors.js:76:17)\r\n    at CoderFixedBytes.encode (/node_modules/ethers/utils/abi-coder.js:473:20)\r\n    at /node_modules/ethers/utils/abi-coder.js:645:59\r\n    at Array.forEach (<anonymous>)\r\n    at pack (/node_modules/ethers/utils/abi-coder.js:644:12)\r\n    at CoderArray.encode (/node_modules/ethers/utils/abi-coder.js:744:40)\r\n    at /node_modules/ethers/utils/abi-coder.js:645:59\r\n\r\n#### Versions\r\nNodeJS 11.5.0\r\nWeb3js 1.0.0-beta.41"},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\n`require('web3-utils')` should work\r\n\r\n#### Actual behavior\r\n\r\n`require('web3-utils')` throws `Error: Cannot find module '@babel/runtime/helpers/typeof'`\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create file `package.json`:\r\n```\r\n{\r\n  \"devDependencies\": {\r\n    \"web3\": \"1.0.0-beta.38\"\r\n  }\r\n}\r\n```\r\n2. Create file `test.js`:\r\n```\r\nconst web3Utils = require('web3-utils')\r\nconsole.log(web3Utils.asciiToHex(\"test\"));\r\n```\r\n3. Run `npm install`\r\n4. Run `node test.js`\r\n\r\n#### Error Logs\r\n```\r\nmodule.js:549\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module '@babel/runtime/helpers/typeof'\r\n    at Function.Module._resolveFilename (module.js:547:15)\r\n    at Function.Module._load (module.js:474:25)\r\n    at Module.require (module.js:596:17)\r\n    at require (internal/module.js:11:18)\r\n    at Object.<anonymous> (C:\\...\\Test\\node_modules\\web3-utils\\dist\\web3-utils.cjs.js:15:31)\r\n    at Module._compile (module.js:652:30)\r\n    at Object.Module._extensions..js (module.js:663:10)\r\n    at Module.load (module.js:565:32)\r\n    at tryModuleLoad (module.js:505:12)\r\n    at Function.Module._load (module.js:497:3)\r\n```\r\nThis error can be resolved by downgrading web3 to version 1.0.0-beta.37 or lower.\r\nI have also posted a related problem at https://github.com/bancorprotocol/contracts/issues/268.\r\n\r\n#### Versions\r\n- node 8.11.2\r\n- npm 6.4.1\r\n- windows 10\r\n\r\nThanks"},{"labels":["bug"],"text":"#### sendSignedTransaction call back 'confirmation' is called when transaction is mined on ropsten/mainnet\r\n\r\n#### Callback is not called. Error is thrown\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nPackage.json:\r\n\r\n  ```\r\n\"dependencies\": {\r\n    \"@babel/runtime\": \"^7.3.1\",\r\n    \"async\": \"^2.6.1\",\r\n    \"bignumber.js\": \"^8.0.2\",\r\n    \"ethereumjs-tx\": \"^1.3.7\",\r\n    \"loadash\": \"^1.0.0\",\r\n    \"lodash\": \"^4.17.11\",\r\n    \"math\": \"^0.0.3\",\r\n    \"mathjs\": \"^5.4.1\",\r\n    \"moment\": \"^2.24.0\",\r\n    \"mysql\": \"^2.16.0\",\r\n    \"request\": \"^2.88.0\",\r\n    \"solc\": \"^0.4.24\",\r\n    \"uuid\": \"^3.3.2\",\r\n    \"web3\": \"^1.0.0-beta.37\"\r\n  },\r\n```\r\n\r\ncall :  web3.eth.sendSignedTransaction('0x' + serializedTx)\r\n\r\n#### Error Logs\r\n\r\nfollowing error is thrown:\r\n\r\n```\r\n(node:62482) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'blockNumber' of null\r\n    at Object.outputTransactionFormatter (/Users/karanahuja/airflow/dags/node_modules/web3-core-helpers/dist/web3-core-helpers.cjs.js:91:15)\r\n    at GetTransactionReceiptMethod.afterExecution (/Users/karanahuja/airflow/dags/node_modules/web3-core-method/dist/web3-core-method.cjs.js:497:30)\r\n    at GetTransactionReceiptMethod._callee$ (/Users/karanahuja/airflow/dags/node_modules/web3-core-method/dist/web3-core-method.cjs.js:455:39)\r\n    at tryCatch (/Users/karanahuja/airflow/dags/node_modules/regenerator-runtime/runtime.js:62:40)\r\n    at Generator.invoke [as _invoke] (/Users/karanahuja/airflow/dags/node_modules/regenerator-runtime/runtime.js:288:22)\r\n    at Generator.prototype.(anonymous function) [as next] (/Users/karanahuja/airflow/dags/node_modules/regenerator-runtime/runtime.js:114:21)\r\n    at asyncGeneratorStep (/Users/karanahuja/airflow/dags/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)\r\n    at _next (/Users/karanahuja/airflow/dags/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)\r\n    at <anony\r\nmous>\r\n    at process._tickCallback (internal/process/next_tick.js:189:7)\r\n(node:62482) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:62482) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\n\r\nNode: v8.12.0\r\nNpm: 6.4.1\r\nweb3: \"^1.0.0-beta.37\"\r\n\"@babel/runtime\": \"^7.3.1\",\r\n\"solc\": \"^0.4.24\","},{"labels":["bug",null],"text":"#### Expected behavior\r\nAccording to https://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#signtransaction\r\n`web3.eth.accounts.signTransaction(tx, privateKey);` should sign a transaction without a default account (private key is provided as function argument).\r\n\r\n#### Actual behavior\r\nsignTransaction fails if no default account is set. This makes external transaction signing impossible (i.e. it's not possible to use infura, nodes without accounts).  \r\n\r\n#### Steps to reproduce the behavior\r\n```\r\nlet deployTx : DeployTransactionResponse = contract.deploy({\r\n        data: contractJson.bytecode,\r\n        arguments: []\r\n    });\r\nlet tx : Transaction = {\r\n        from: nodemanager.getAccountAddress(),\r\n        data: deployTx.encodeABI(),\r\n        gas : await deployTx.estimateGas(),\r\n        value : 0\r\n};\r\n\r\nweb3.eth.accounts.signTransaction(tx, privateKey); // this line works fine in web3@1.0.0-beta.34 but fails in web3@1.0.0-beta.39\r\n```\r\n\r\n#### Error Logs\r\n`TypeError: Cannot read property 'defaultAccount' of undefined`\r\n\r\n#### Versions\r\nweb3@1.0.0-beta.39\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n\r\n`web3.eth.net.getId()` should call `net_version` and return the current network id.\r\n\r\nhttps://github.com/ethereum/web3.js/blob/1d9f6c0889c7f551b4ec1041cece0d50bc3ff2c8/packages/web3-net/src/index.js#L38-L43\r\n\r\n#### Actual behavior\r\n\r\nFrom 1.0.0-beta.38 onwards, `web3.eth.net.getId` calls `eth_protocolVersion` and returns the current ethereum protocol version.\r\n\r\nhttps://github.com/ethereum/web3.js/blob/10face700362d124bc877ba6ea1390bde8364447/packages/web3-core-method/src/methods/network/VersionMethod.js#L25-L34\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```js\r\n> const Web3 = require(\"web3\")\r\n> let web3 = new Web3(\"https://mainnet.infura.io\")\r\n> web3.eth.net.getId().then(console.log)\r\n63 // should be 1\r\n> web3.eth.net.getNetworkType().then(console.log)\r\n\"private\" // should be \"main\"\r\n```\r\n\r\n#### Versions\r\n\r\nweb3.js `1.0.0-beta.38` and `1.0.0-beta.39`\r\n"},{"labels":["bug"],"text":"#### Expected behavior\r\n`web3.eth.accounts.create()` should create an account. \r\n\r\n#### Actual behavior\r\n`web3.eth.accounts.create()` creates runtime error.\r\n\r\nNOTE: `web3.eth.accounts.create(\"entropy\")` works\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nimport Web3 from \"web3\";\r\nconst web3 = new Web3(\"ws://localhost:8546\");\r\nweb3.eth.accounts.create();\r\n```\r\n\r\n#### Error Logs\r\n```\r\nTypeError: this.utils.randomHex is not a function\r\nProxy.create\r\nnode_modules/web3-eth-accounts/dist/web3-eth-accounts.umd.js:106\r\n  103 | }, {\r\n  104 |   key: \"create\",\r\n  105 |   value: function create(entropy) {\r\n> 106 |     return this._addAccountFunctions(Account.create(entropy || this.utils.randomHex(32)));\r\n      | ^  107 |   }\r\n  108 | }, {\r\n  109 |   key: \"privateKeyToAccount\",\r\n```\r\n\r\n#### Versions\r\nweb3.js version 1.0.0-beta.38, Chrome 71, Typescript\r\n"},{"labels":["bug"],"text":"Getting below error when calling myContract.methods.myMethod().call()\r\n\r\nTypeError: Invalid attempt to spread non-iterable instance\r\n\r\nThis this was working fine in previous beta versions  37, 36 etc.  When I upgraded to beta.38 I started getting above error. "},{"labels":["bug"],"text":"Hi!\r\n\r\nWeb3 1.0.0-beta.37 did work fine with all my systems. But now, after upgrading to 1.0.0-beta.38 it stopped working. Even after a clean install into a new empty folder, it doesn't work on my Mac, also tried Ubuntu 14.04 LTS with same results. As you can see from the output below, it really is a system-agnostic bug related to the `require()` + npm module directory resolver, so, most likely, a problem somewhere in the web3.js codebase itself.\r\n\r\n```shell\r\n+ web3@1.0.0-beta.38\r\nadded 298 packages from 205 contributors in 38.338s\r\n[+] no known vulnerabilities found [15378 packages audited]\r\n```\r\n\r\n```JavaScript\r\n> const Web3 = require('web3')\r\nError: Cannot find module '@babel/runtime/helpers/classCallCheck'\r\n    at Function.Module._resolveFilename (module.js:542:15)\r\n    at Function.Module._load (module.js:472:25)\r\n    at Module.require (module.js:585:17)\r\n    at require (internal/module.js:11:18)\r\n>\r\n```\r\n\r\n```shell\r\n$ uname -a\r\nDarwin mbp.local 17.7.0 Darwin Kernel Version 17.7.0: Thu Jun 21 22:53:14 PDT 2018; root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n$ node --version\r\nv9.2.0\r\n$ npm --version\r\n6.0.0\r\n```\r\n\r\nQuestions:\r\n\r\n- Why is that `babel` stuff missing after a clean install?\r\n- What would be a proper workaround for this issue?"},{"labels":["bug",null],"text":"Attempting to deploy a contract:\r\n```\r\nlet contract = new web3.eth.Contract(abi);\r\nlet transaction = contract.deploy({data: bin, arguments: args});\r\nlet options = {\r\n    to  : transaction._parent._address, // this is null\r\n    data: transaction.encodeABI(),\r\n    gas : gas\r\n};\r\n\r\nasync function signAndSendTransaction(options) {\r\n    let signedTransaction  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);\r\n    let transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);\r\n    return transactionReceipt;\r\n}\r\n```\r\nWhen the value of `gas` is too low, this function fails with `base fee exceeds gas limit`, which is fine.\r\nHowever, in the process, it updates the `options` object, namely:\r\n- It adds the fields `chainId`, `gasPrice`, `nonce` and `value`.\r\n- It changes the value of the `to` field from `null` to `\"0x\"`.\r\n\r\nAs a result of the latter, any further attempt to call this function with the `options` object results with:\r\n```\r\nProvided address \"0x\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can't be converted.\r\n```\r\nThis behavior is extremely undesired IMO (moreover, perhaps you should even consider not updating the `options` object altogether, but you should by the least avoid setting the `to` field to an illegal value).\r\n\r\nSide note: I'm not sure if related to this problem, but the value of the (new) `value` field is also `\"0x\"`.\r\n\r\nThanks"},{"labels":[null,null,"bug",null],"text":"I am having problems to unlock my account with a parity node. It seems like that the integer I am passing in ` web3.eth.personal.unlockAccount('...', '...', 10000)` is not converted to a hex and send to the parity endpoint. I am having no problems with *geth* but this[Parity issue](https://github.com/paritytech/parity-ethereum/issues/4380) send me over here. \r\n\r\nCould somebody confirm that this is not a problem with web3?\r\n\r\nThe error message I received is:\r\n> UnhandledPromiseRejectionWarning: Error: Returned error: Invalid params: invalid type: integer `10000`, expected a 0x-prefixed, hex-encoded number of length 32."},{"labels":["bug"],"text":"```\r\n> web3.utils.hexToNumberString('13')\r\n'13'\r\n```"},{"labels":["bug"],"text":"The Byzantinum fork, IIRC, enabled adding the `status` to the transaction receipts. But for chains that did not activate it, the `status` is still `null` instead of `0x0` or `0x1`. Following is the code that parses it to boolean:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/1bbfc5a36f4422a79bb0abfdd4b30aba6b3dc340/packages/web3-core-helpers/src/formatters.js#L219-L221\r\n\r\nWhen testing with some transactions in a chain that did not fork, we saw the `status` field was incorrectly parsed as `false` for receipts with `status` coming as `null`, which might not be correct as `status` is actually not provided. This is not enough to say the transaction failed or not.\r\n\r\nThe condition might be changed to something like the following to properly account for `null`, `0x0` and `0x1` values:\r\n\r\n```js\r\n    if(typeof receipt.status === 'string') {\r\n        receipt.status = Boolean(parseInt(receipt.status));\r\n    }\r\n```\r\n\r\n@frozeman & team, can you please provide your thoughts?"},{"labels":["bug"],"text":"From https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#id22:\r\n\r\n> ... if this `send()` is called from a `someContract.deploy()`, then the promise will resolve with the new contract instance.\r\n\r\nThe resolved return-value is an object with a `contractAddress` field, which stores the address of the deployed contract. However, it is not equivalent to a `web3.eth.Contract` instance.\r\n\r\nSo for example, given the following:\r\n```\r\nlet contract = new web3.eth.Contract(abi);\r\nlet handle = await contract.deploy(...).send(...);\r\n```\r\nIf one wants an instance of the new contract, then they need to create it explicitly:\r\n```\r\nlet newContract = new web3.eth.Contract(abi, handle.contractAddress);\r\n```\r\n"},{"labels":["bug"],"text":"Package `ethers (v4.0.0-beta.1)` gets installed as a dependency of `web3-eth-abi (v1.0.0-beta.37)`, which leads to the `xmlhttprequest` complaint and basically makes `truffle-contract` and other packages unusable.\r\nThis could probably be fixed with updating `ethers` to `v4.0.20`.\r\n\r\nSee trufflesuite/truffle#1614 and trufflesuite/truffle#1617."},{"labels":["bug",null],"text":"```javascript\r\nconsole.time('transactionHash')\r\n    console.time('receipt')\r\n    console.time('error')\r\n    web3.eth.sendSignedTransaction(serializedTx).once('receipt', (r) => {\r\n        console.log('receipt')\r\n        console.timeEnd('receipt')\r\n        console.log(`address => ${_dispatcher.address} nonce => ${_nonce}`)\r\n        console.log('================================================')\r\n    }).once('transactionHash', (r) => {\r\n        console.log('transactionHash')\r\n        console.timeEnd('transactionHash')\r\n        console.log(`address => ${_dispatcher.address} nonce => ${_nonce}`)\r\n        console.log('txhash')\r\n        console.log(r);\r\n        console.log('================================================')\r\n        resolve(r);\r\n    }).once('error', (r) => {\r\n        console.log('error');\r\n        console.timeEnd('error')\r\n        console.log(`address => ${_dispatcher.address} nonce => ${_nonce}`)\r\n        console.log('================================================')\r\n        console.log(r)\r\n    })\r\n})```\r\n\r\nreceipt\r\nreceipt: 16611.903ms\r\naddress => *** nonce => 70\r\n================================================\r\nerror\r\nerror: 43979.945ms\r\naddress =>  ***  nonce => 89\r\n================================================\r\nError: Failed to check for transaction receipt:\r\n{}\r\n    at Object._fireError (/node_modules/web3-utils/src/index.js:56:17)\r\n    at node_modules/web3-core-method/src/index.js:261:23\r\n    at <anonymous>\r\nreceipt\r\naddress => *** nonce => 71\r\n================================================\r\n"},{"labels":["bug",null],"text":"Hi,\r\n\r\nI'm using Geth 1.8.18 light client which comes with web3js 1.0.\r\nI got this error:\r\n\r\n```\r\nWelcome to the Geth JavaScript console!\r\n\r\ninstance: Geth/v1.8.18-stable-58632d44/darwin-amd64/go1.11.2\r\n modules: admin:1.0 debug:1.0 eth:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\r\n\r\n> web3.eth.personal\r\nundefined\r\n\r\n> web3.eth.personal.unlockAccount()\r\nTypeError: Cannot access member 'unlockAccount' of undefined\r\n    at <anonymous>:1:1\r\n```\r\n\r\nI think I know what's the issue. The `unlockAccount` method is available inside `web3.personal` and not in `web3.eth.personal`.\r\n\r\nI've forked this repo but I'm not sure how to get started contributing to this documentation. Couldn't find any information on how to contribute to docs section.\r\n\r\nAny pointers for me?\r\n\r\nThanks."},{"labels":["bug"],"text":"```\r\n......../node_modules/web3-eth-contract/src/index.js:540\r\n        throw new Error('Event \"' + event.name + '\" doesn\\'t exist in this contract.');\r\n                                          ^\r\n\r\nTypeError: Cannot read property 'name' of undefined\r\n```\r\n`event` is undefined, which throws an error.\r\nTo reproduce, supply the wrong event name to `getPastEvents` in web3.eth.Contract.\r\n\r\nI am using web3 version 1.0.0-beta.31."},{"labels":["bug",null],"text":"Versions:\r\n\r\nUbuntu 18.04 LTS\r\nNode.JS: 8.3.0\r\nWebJS: \r\nweb3: ^1.0.0-beta.37\r\nweb3-utils: ^1.0.0-beta.36\r\nnpm: 5.6.0\r\nTruffle version 5.x (latest)\r\n\r\nI have traced through the `HttpProvider` code in the Web3 package and what I see is quite strange.  The provider's `onreadystatechange` gets a DONE/4 event even though Ganache does not receive a request.\r\n\r\nTo test this, I initiate a `sendSignedTransaction()` call from my Node.JS app with a breakpoint set right on the actual low-level `send()` method the provider uses to contact Ganache with the actual RPC request.  When the breakpoint is hit, I shut down Metamask to stop any other entity from making requests to Ganache.  I switch to another instance of my development IDE that has the `ganache-cli` repo loaded.  This repo has `ganache-core` resident as one of its packages.  I set breakpoints on the Ganache core server's **on-data** and **on-end** event handlers for the **request** object to make sure I trap _any_ RPC request activity during the test.   \r\n\r\nWith everything in place for a clean test, I resume execution of my Node.JS app and discover that the Web3JS code for the `HttpProvider` that made the request **already** processing a result  and as you can see in the screenshot below, the **result** variable is an empty string:\r\n\r\n![screenshot from 2018-12-19 00-18-59](https://user-images.githubusercontent.com/4660487/50200432-e0193d80-0323-11e9-9a7f-704ba6b5ce43.png)\r\n\r\nThis results in that code throwing an **InvalidResponse**  error.  I have run this test several times and I always see the exact same behavior.  That is, the exact same sequence of code paths taken.  What could cause the Web3 provider's XMLHttpRequest to believe it already has received a response from Ganache when at least from Ganache's point of view, WebJS never even sent the request?  \r\n\r\nThe last time I saw anomalies like this one was when I learned the hard way that you have to BigNumber everything related to gas values.  Assuming I haven't done something wrong and that's always strong possibility, it really feels like some other code in Web3JS is causing the event emitter code to misfire or suffer perhaps some data structure corruption.  I say this because except for the one particular smart contract method that results in this error when I call it,  all the other method calls work perfectly and there's quite a few of those.   I believe there's something about the arguments I am passing with this specific smart contract method and the way Web3JS is trying to parse the arguments against, or match them up to the Solidity ABI is resulting in an unexpected error.\r\n\r\nAny tips you can give for debugging this would be appreciated.  Otherwise I have a long debug hunt in front of me.\r\n\r\nSolidity method being called:\r\n\r\n```sol\r\n    function finalizeGame(\r\n            address payable _paymentAndEscrowWarehouseAddr,\r\n            uint256 _clientReferenceTimestamp,\r\n            uint256 _gameId\r\n        )\r\n```\r\n\r\nNode.JS code calling that method:\r\n```js\r\n    return ebbDetails.contractInstanceObj.methods.finalizeGame(\r\n\tpaymentsAndEscrowContractAddr,\r\n\tdataBag.paymentStartTimestamp,\r\n\tdataBag.idInSmartContract);\r\n```"},{"labels":["bug"],"text":"Hi,\r\n\r\nWe have found that web3-buzz npm repo depends on swarm-js@0.1.37 where as the latest stable v-0.1.39 can be used. The older verision works on tar.gz which has been deprecated. Where as the newer verisions use tar lib.\r\nThere are apparent benefits to it.\r\n\r\nPlease accept to raise PR.\r\n\r\nThanks"},{"labels":["bug",null],"text":"I was under the impression that if I used the `.once` event handler that it would terminate listening if there were no other handlers on the `send`. This doesn't seem to be the case, however. It looks like the following code continues to emit a `eth_getTransactionReceipt` every second even after resolving.\r\n\r\n```typescript\r\ndrain(\r\n        bountyAddress: string,\r\n        payoutTokens: string[],\r\n        tokenVersions: BigNumber[],\r\n        tokenAmounts: BigNumber[],\r\n        gasPrice?: BigNumber\r\n    ): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const bountyClient = this.bounties.bountyClient(bountyAddress)\r\n\r\n                const a: any = bountyClient.methods.drainBounty(\r\n                    payoutTokens,\r\n                    map(tokenVersions, version => version.toString()),\r\n                    map(tokenAmounts, amount => amount.toString())\r\n                )\r\n                    .send({\r\n                        from: (await this.bounties._web3.eth.getAccounts())[0],\r\n                        to: bountyClient._address,\r\n                        gas: 40000,\r\n                        gasPrice: gasPrice ? gasPrice.toString() : undefined\r\n                    })\r\n                    .once('transactionHash', hash => {\r\n                        resolve(hash);\r\n                    })\r\n            } catch (e) {\r\n                reject(e)\r\n            }\r\n        })\r\n    }\r\n```\r\n\r\nAny idea what's up?"},{"labels":["bug",null],"text":"I noticed that contract's transaction receipts contain no logs on Web3 version 1.0.0-beta.36:\r\n\r\n```\r\n{ tx: '0xc1f1cde2552685103784e1f1ab4679984ae4121784f9a921805bb082ba09c92d',\r\n  receipt:\r\n   { transactionHash: '0xc1f1cde2552685103784e1f1ab4679984ae4121784f9a921805bb082ba09c92d',\r\n     transactionIndex: 0,\r\n     blockHash: '0x3de1b7ff6a8bc7afbab0d2651ae070e92dfa58ce22f83dc1db76326023436720',\r\n     blockNumber: 27,\r\n     gasUsed: 24856,\r\n     cumulativeGasUsed: 24856,\r\n     contractAddress: null,\r\n     logs: [],\r\n     status: 1 },\r\n  logs: [] }\r\n```\r\n\r\nThe same contract's transaction receipt using web3 v.1.0.0-beta.34 returns logs:\r\n\r\n```\r\n{ tx: '0x82fc576053a34ede17be443b5cfc5f6940dfd95a961aee9f0e9a764ee25a9e60',\r\n  receipt:\r\n   { transactionHash: '0x82fc576053a34ede17be443b5cfc5f6940dfd95a961aee9f0e9a764ee25a9e60',\r\n     transactionIndex: 0,\r\n     blockHash: '0x1cbcb319172a39937f5e41bd44d1af3944761ab7f2d48a43a3c1e81341ef1286',\r\n     blockNumber: 27,\r\n     gasUsed: 342463,\r\n     cumulativeGasUsed: 342463,\r\n     contractAddress: null,\r\n     logs: [ [Object] ],\r\n     status: 1 },\r\n  logs:\r\n   [ { logIndex: 0,\r\n       transactionIndex: 0,\r\n       transactionHash: '0x82fc576053a34ede17be443b5cfc5f6940dfd95a961aee9f0e9a764ee25a9e60',\r\n       blockHash: '0x1cbcb319172a39937f5e41bd44d1af3944761ab7f2d48a43a3c1e81341ef1286',\r\n       blockNumber: 27,\r\n       address: '0xce2b7d35b2a5193fcdd4d5ef33b2810a734b9c15',\r\n       type: 'mined',\r\n       event: 'CentralizedOracleCreation',\r\n       args: [Object] } ] }\r\n``` \r\n\r\nAdditional info:\r\n- Truffle v.4.1.0\r\n- web3-provider-engine v14.1.0\r\n- ganache-cli v6.0.3"},{"labels":["bug"],"text":"There is a example which takes an BN type argument in https://web3js.readthedocs.io/en/1.0/web3-utils.html#sha3.\r\n\r\nHowever, it throws an error when take an argument with BN type. like below:\r\n`TypeError: str.slice is not a function`\r\n\r\nI think example is wrong, we should fix it."},{"labels":["bug"],"text":"my code is following:\r\nvar web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))\r\nweb3.eth.getBlockNumber().then(console.log);\r\n\r\nweb3.eth.getBlockNumber().then(console.log)  this code show zero, but my node sync block number is 4523458  why ??"},{"labels":[null,null,"bug"],"text":"Getting  invalid number  error when calling a method of a contract which take uint256 argument. \r\n\r\nExample:\r\nmyContract.methods.transfer(accounts[1], 1e16).send({ from: accounts[0] })\r\n\r\n1) When sending value 1e16 it throw error \r\nweb3 invalid number value (arg=\"_value\", coderType=\"uint256\", value=10000000000000000)\r\n2) When sending value 10000000000000000 throw same error\r\n3) When sending value 1e16 as hex it work okay. No error.\r\n4) When sending value 1e15 or less value as number like 100000000000000 if work okay.  No error\r\n\r\nI am using web3 1.0.0-beta.36"},{"labels":["bug"],"text":"I've written a simple project which uses the Web3JS on the client-side with Infura endpoint. Everything works great on my Chrome / Firefox:\r\n\r\n```\r\nHow web3 works?\r\n**Block number: 6779330**\r\n```\r\n\r\nBut when I'm trying to run the page on my Iphone's Safari - nothing happens:\r\n\r\n```\r\nHow web3 works?\r\n**Block number: 0**\r\n```\r\n\r\nHere's a simple [JSfiddle](https://jsfiddle.net/softblocks/eywraw8t/478628/) for illustrating the problem. For some reason, the `web3.eth.blockNumber` can't be loaded from the web3 instance."},{"labels":["bug"],"text":"When the input of an event are all indexed, go-ethereum's JSON-RPC will response with data '0x', it will throw an error cause by the following code\r\n\r\n``` javascript\r\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\r\n    if (!bytes || bytes === '0x' || bytes === '0X') {\r\n        throw new Error('Returned values aren\\'t valid, did it run Out of Gas?');\r\n    }\r\n    //...\r\n}\r\n```\r\n\r\nI found the following test code, I assume `Line 82` should be `0x` not empty string\r\n\r\nhttps://github.com/ethereum/web3.js/blob/0d54d94e637832abf97834e4fc444fbff87f874b/test/eth.abi.decodeLog.js#L70-L91"},{"labels":["bug"],"text":"When `.send()`'ing a contract method, web3 creates the handling logic, returns a `promiEvent` and finally executes the call at:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/0d54d94e637832abf97834e4fc444fbff87f874b/packages/web3-core-method/src/index.js#L581\r\n\r\nInside `sendRequest`, there is a call to `signTransaction`:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/0d54d94e637832abf97834e4fc444fbff87f874b/packages/web3-core-method/src/index.js#L536\r\n\r\nIf for any reason the signing fails, i.e. the `net` API is not enabled in the underlying node, `signTransaction` returns a failed promise that will be lost as the original `sendRequest` call does handle it (does not act on `defer` or `defer.eventEmitter`).\r\n\r\nThe result is an `Unhandled Promise Rejection` error and the web3 user code client hangs given the `promiEvent` does never emit even an `error` event.\r\n\r\n@nivida I'm happy to contribute with a fix/PR. Just wondering if you or @frozeman have any thoughts on the better way to handle this.\r\n\r\nIssue #1220 is possibly related or similar to this."},{"labels":["bug"],"text":"I am using web3 1.0 to sign some message ,and verifity it in contract.\r\n\r\n```js\r\nlet signature = await web3.eth.sign(msHash, accounts[0]);\r\n```\r\nIf set web3's privoder to metamask it work well, my contract can return the correct address, but **if set it to use infura or other eth node** it return a invalid sign and my contract can't verifity it."},{"labels":["bug"],"text":"When using:\r\n```\r\nweb3.eth.accounts.signTransaction(txParams, privateKey)\r\n```\r\n\r\na) If your private key is hex0x - all good.\r\n\r\nb) If your private key is hex - everyting will work fine, no errors, but your signed transaction will be with private key with one byte zero'ed.\r\n\r\nc) If your private key is Buffer - everything will be signed, no errors, but your signed transaction will be with private key with two first bytes zero'ed.\r\n\r\n```\r\na) 870c20575bd9da9d747011401ed345edf6229c96ba2bfcd965ed6dee1fc3afd3\r\nb) 000c20575bd9da9d747011401ed345edf6229c96ba2bfcd965ed6dee1fc3afd3\r\nc) 000020575bd9da9d747011401ed345edf6229c96ba2bfcd965ed6dee1fc3afd3\r\n```\r\n\r\n...which is kind of cute that 3 different representations create 3 valid, different signed transactions, all thanks to web3 not validating it's inputs and this internally doing the same https://github.com/MaiaVictor/eth-lib/blob/master/src/account.js#L47\r\n\r\n\r\n```\r\nconst Web3 = require('web3')\r\nconst web3 = new Web3('http://localhost:8545')\r\n\r\nconst pk = '870c20575bd9da9d747011401ed345edf6229c96ba2bfcd965ed6dee1fc3afd3'\r\nconst pk0x = `0x${pk}`\r\nconst pkb = Buffer.from(pk, 'hex')\r\n\r\nconst tx = {\r\n  to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\r\n  value: '1000000000',\r\n  gas: 2000000\r\n}\r\n\r\nconst mh = _1 => web3.eth.accounts.signTransaction(tx, _1).then(_2 => _2.rawTransaction)\r\n\r\nasync function main() {\r\n  console.log('pk     ', await mh(pk))\r\n  console.log('pk0x   ', await mh(pk0x))\r\n  console.log('pkb    ', await mh(pkb))\r\n\r\n  console.log('pk00   ', await mh('0x00' + pk.slice(2)))\r\n  console.log('pk0000 ', await mh('0x0000' + pk.slice(4)))\r\n}\r\n\r\nmain()\r\n\r\n// Output:\r\n// pk      0xf8648080831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca00802ba0ef96e99731c7aafd230a21c322e4043a830a5174370d7395f69c3c97dc22540da03262a83de0b19a3afb97c9ce42c3be8f07291023120227420a2850ec1452a0f9\r\n// pk0x    0xf8648080831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca00802ba0c7f6b9dd95dfbd7b433b63b0862381fe87c8515cc2c1ee2b605639aafe49a076a02ac4429dcd696c485f88dfe9809a75939890e1b8e260132eeb671c5a464630e3\r\n// pkb     0xf8648080831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca00802ca0b30df73f90272f0819e103bcfcb1b7b1d960f329f0ad6a37df406a9f569d9e25a013569cca9c23e5050e0f4c0957edad761aba727d802769aaa9028ed1a5232171\r\n// pk00    0xf8648080831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca00802ba0ef96e99731c7aafd230a21c322e4043a830a5174370d7395f69c3c97dc22540da03262a83de0b19a3afb97c9ce42c3be8f07291023120227420a2850ec1452a0f9\r\n// pk0000  0xf8648080831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca00802ca0b30df73f90272f0819e103bcfcb1b7b1d960f329f0ad6a37df406a9f569d9e25a013569cca9c23e5050e0f4c0957edad761aba727d802769aaa9028ed1a5232171\r\n```"},{"labels":["bug"],"text":"When using the WebsocketProvider against the latest Geth (and other versions), web3.js seems to get stuck on the `then` handler for a transaction.\r\n\r\nI can reliably replicate this with the latest beta, and have published a proof of concept [here](https://github.com/andremedeiros/web3js-stuck).\r\n\r\nLet me know if there are any questions, or if there's anything I can do to help here!\r\n\r\ncc. @iurimatias @emizzle"},{"labels":[null,"bug"],"text":"```solidity\r\n    function return2d() public view returns(uint256[1][1]) {\r\n        uint256 x = 354;\r\n        return [[x]];\r\n    }\r\n```\r\nin js\r\n```js\r\nawait contractX.return2d();\r\n```\r\n\r\n## Error:\r\n\r\n```js\r\n    Error: Error: [number-to-bn] while converting number [\"354\"] to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported. Given value: \"354\"\r\n      at Object.toBN (node_modules/truffle/build/webpack:/~/web3-utils/src/utils.js:64:1)\r\n      at _convertNumber (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/reformat.js:18:1)\r\n      at arr.map.item (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/reformat.js:31:1)\r\n      at Array.map (<anonymous>)\r\n      at _convertNumberArray (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/reformat.js:31:1)\r\n      at abiSegment.forEach (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/reformat.js:57:1)\r\n      at Array.forEach (<anonymous>)\r\n      at Function.numbers (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/reformat.js:47:1)\r\n      at Promise (node_modules/truffle/build/webpack:/packages/truffle-contract/lib/execute.js:120:1)\r\n      at <anonymous>\r\n      at process._tickCallback (internal/process/next_tick.js:182:7)\r\n\r\n```\r\n"},{"labels":["bug"],"text":"Hey guys,\r\n\r\nI was running into an issue where I was getting an insufficient funds error when trying to sign a transaction. I found that this is a fairly common issue on the forums and it can be caused by having a private key that doesn't start with a 0x.\r\n\r\nThere is a simple solution to this in the packages/web3-eth-accounts/src/index.js file on line 145:\r\n```\r\nif (!privateKey) {\r\n    error = new Error('No private key given!');\r\n\r\n    callback(error);\r\n    return Promise.reject(error);\r\n}\r\n\r\nif (!privateKey.startsWith('0x')) {\r\n    error = new Error('Private key is invalid!');\r\n\r\n    callback(error);\r\n    return Promise.reject(error);\r\n}\r\n```\r\nhttps://github.com/ethereum/web3.js/blob/v1.0.0-beta.36/packages/web3-eth-accounts/src/index.js#L145\r\n\r\nI tested this from the v1.0.0-beta.36 tag and all tests passed."},{"labels":["bug"],"text":"![image](https://user-images.githubusercontent.com/6789154/46572309-2feb9800-c9b6-11e8-9511-3cd4f34acb4d.png)\r\n\r\nOS:MacOS 10.14\r\nProgramming Language version: React Native 0.57.1-iOS\r\n\r\nI met this issue on React Native 0.56 before, and then resolved it with this [Guide:How to set up web3.js with CRNA ](https://gist.github.com/dougbacelar/29e60920d8fa1982535247563eb63766).\r\nBut recently we updated to React Native 0.57.1, this issue happened again, I tried to create a whole new RN project with the Guide, but the issue still happened.\r\n\r\nI think we need a new solution to resolve it,  is there anyone having the same issue?\r\n\r\nrefs old issue ticket:\r\nhttps://github.com/ethereum/web3.js/issues/1095\r\n\r\nps:don't care RN 0.57.2, it has other problems."},{"labels":["bug"],"text":"I tried these code in web3 1.0.0-beta.36\r\n```\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(rinkebyUrl))\r\nconst contract = new web3.eth.Contract(abi, contractAddress)\r\ncontract.methods.transfer(toAddress, amount).encodeABI()\r\n```\r\nAnd then encodeABI() doesn't return any values. \r\nBut if I try web3 1.0.0-beta.34, it works fine.  It's a kind of bug, isn't it?"},{"labels":["bug",null],"text":"Using version  '1.0.0-beta.36'\r\nwhen using web3.utils...like such\r\n <img width=\"300\" alt=\"screen shot 2018-09-25 at 3 54 25 pm\" src=\"https://user-images.githubusercontent.com/14198661/46042600-65050a00-c0db-11e8-9c6f-aab5fdf921fc.png\">\r\n\r\nCurrently the web3.utils.stringToHex() function and other, are returning single quote strings of hex values, which is problematic since solidity only accepts them as a double quoted character.\r\n\r\nExample:\r\n\r\n> web3.utils.stringToHex(\"test\")\r\n'0x74657374'\r\n\r\nSolidity reject this as a valid hex string argument\r\n\r\nShouldnt it  Be (docs use double quotes in examples too):\r\n\"0x74657374\"\r\n\r\nThe serialized output with single quotes causes issues inside solidity:\r\n![err1](https://user-images.githubusercontent.com/14198661/46043125-bfeb3100-c0dc-11e8-9ac9-e5963951eb29.png)\r\n\r\nserialized output with double quotes now works:\r\n![err2](https://user-images.githubusercontent.com/14198661/46043324-54ee2a00-c0dd-11e8-9bfe-c75ffdf0232a.png)\r\n\r\nThe read the docs, example do indeed show double quotes:\r\n<img width=\"919\" alt=\"screen shot 2018-09-25 at 4 21 41 pm\" src=\"https://user-images.githubusercontent.com/14198661/46044026-3db03c00-c0df-11e8-8c69-d268a29f4b49.png\">\r\n\r\n"},{"labels":["bug"],"text":"Currently when calling send on the WebsocketProvider in the `_addResponseCallback` method there is a check to make sure `id` is defined. If you pass 0 into this method it will always throw an error because `0 || payload[0].id` is an error. The workaround is to put anything but 0. \r\n\r\nI think perhaps the second condition in the OR should be removed.\r\n\r\nHere is code to reproduce this (send in a websocket provider):\r\n\r\n```javascript\r\nimport Web3 from \"web3\";\r\nimport { Provider } from \"web3/providers\";\r\n\r\nexport class GanacheSnapshotter {\r\n  private web3: Web3;\r\n  constructor(web3Provider: Provider) {\r\n    this.web3 = new Web3(web3Provider);\r\n  }\r\n\r\n  public async takeSnapshot() {\r\n    return new Promise((resolve, reject) => {\r\n      this.web3.currentProvider.send(\r\n        {\r\n          method: \"evm_snapshot\",\r\n          jsonrpc: \"2.0\",\r\n          params: [],\r\n          id: 0\r\n        },\r\n        (e, _) => {\r\n          if (e) {\r\n            reject(e);\r\n          } else {\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  public async revertSnapshot() {\r\n    return new Promise((resolve, reject) => {\r\n      this.web3.currentProvider.send(\r\n        {\r\n          method: \"evm_revert\",\r\n          jsonrpc: \"2.0\",\r\n          params: [],\r\n          id: 0\r\n        },\r\n        (e, _) => {\r\n          if (e) {\r\n            reject(e);\r\n          } else {\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n}\r\n```\r\n\r\nThe error:\r\n\r\n>      Uncaught TypeError: Cannot read property 'id' of undefined\r\n>       at WebsocketProvider._addResponseCallback (node_modules\\web3-providers-ws\\src\\index.js:222:39)\r\n>       at WebsocketProvider.send (node_modules\\web3-providers-ws\\src\\index.js:283:10)\r\n>       at Timeout._onTimeout (node_modules\\web3-providers-ws\\src\\index.js:263:19)"},{"labels":["bug",null],"text":"I am running `web3@1.0.0-beta.36` on Kovan + Infura. \r\nThe mention issue happens only sometimes and my feeling tells me it happens more often if you didn't run the application for a longer time and then start everything.\r\n\r\n```\r\n[nodemon] 1.18.3\r\n[nodemon] to restart at any time, enter `rs`\r\n[nodemon] watching: *.*\r\n[nodemon] starting `node API.js`\r\nListening on port 4000...\r\nconnection not open on send()\r\nconnection not open on send()\r\nconnection not open on send()\r\nconnection not open on send()\r\n```\r\n\r\nHere is my nodejs code:\r\n\r\n```\r\nconst contractFunction = myContract.methods.updateLevel(Number(_myVal));\r\nconst functionBytes = contractFunction.encodeABI();\r\n\r\n//construct the Tx data\r\nconst rawTx = {\r\n\tchainId: 42,\r\n\tgasLimit: web3.utils.toHex(5000000),\r\n\tto: contractAddress,\r\n\tfrom: addressFrom,\r\n\tdata: functionBytes\r\n\t};\r\n\r\n//sign & send Tx\r\nweb3.eth.accounts.signTransaction(rawTx, privateKey)\r\n\t.then(RLPencodedTx => {\r\n\t\t\r\n\tlet executed = false;    //to avoid double callback\r\n\tmyContractWebSocket.once('Events1',\r\n\t\tfunction(error, event) {\r\n\t\t\tif (!executed) {\r\n\t\t\t\texecuted = true;\r\n\t\t\t\tif (!error) callback(event, null); \r\n\t\t\t\telse callback(null, error);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\t\t\t\r\n\tmyContractWebSocket.once('Event2',\r\n\t\tfunction(error, event) {\r\n\t\t\tif (!executed) {\r\n\t\t\t\texecuted = true;\r\n\t\t\t\tif (error) callback(null, error);\r\n\t\t\t\t//If no error wait 1 sec in case Events1 is available, so it can go first\r\n\t\t\t\telse setTimeout(function() {callback(event, null);}, 1000);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t//sending signed Tx\r\n\tweb3.eth.sendSignedTransaction(RLPencodedTx['rawTransaction'])\r\n\t.on('error', error => { callback(null, error); });\t\t\r\n})\r\n.catch('error', error => callback(null, error));\r\n```"},{"labels":[null,null,"bug"],"text":"Based on the code, this appears to be done intentionally for some reason, but it seems like a very bad idea to return the wrong answer. There's also no mention of this non-standard behavior in the documentation.\r\n\r\nFrom https://github.com/ethereum/web3.js/blob/1.0/packages/web3-utils/src/utils.js#L434,L435:\r\n\r\n```\r\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\r\n...\r\n    if(returnValue === SHA3_NULL_S) {\r\n        return null;\r\n```\r\n\r\nRemoving those lines would fix the problem."},{"labels":["bug"],"text":"I installed web3 after ethers, since I use ethers as my main library. Web3 has some good features that ethers doesn't have though (and vice versa). Fetching events through the filter without having to supply a contract address is one of them. \r\n\r\n\"TypeError: EthersAbi is not a constructor\" on initialization of application. \r\n\r\nWhat version of ethers does web3 use? \r\n\r\n    \"ethers\": \"^3.0.25\",\r\n\r\n    \"web3\": \"^1.0.0-beta.36\"\r\n\r\n**It works with web3 0.20.6 , I suppose that doesn't yet use any stuff from Ethers.** \r\n\r\n\r\nThe sole part of my code using web3 : \r\n\r\n```\r\nexport async function submissionsFrom(userAddress) {\r\n  try {\r\n    const Eth = require('web3-eth')\r\n    const eth = new Eth(\"ws://127.0.0.1:7545\")\r\n    topics = [keccak256(\"logSubmission(address, address, uint)\"), keccak256(userAddress)]\r\n    let logs = await eth.filter({\r\n      fromBlock: 1,\r\n      toBlock: 'latest',\r\n      topics\r\n    })\r\n    console.log(topics)\r\n  } catch (err) {\r\n    throw new Error(err)\r\n  }\r\n}\r\n```\r\n\r\nStacktrace: \r\n\r\n```\r\nTypeError: EthersAbi is not a constructor[Meer info] app.js line 12265 > eval:28:22\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth-abi/src/index.js:28:22\r\n./node_modules/web3-eth-abi/src/index.js\r\nhttp://localhost:8080/app.js:12265:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth-contract/src/index.js:42:11\r\n./node_modules/web3-eth-contract/src/index.js\r\nhttp://localhost:8080/app.js:12289:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth-ens/src/contracts/Registry.js:24:16\r\n./node_modules/web3-eth-ens/src/contracts/Registry.js\r\nhttp://localhost:8080/app.js:12325:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth-ens/src/ENS.js:24:16\r\n./node_modules/web3-eth-ens/src/ENS.js\r\nhttp://localhost:8080/app.js:12301:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth-ens/src/index.js:23:11\r\n./node_modules/web3-eth-ens/src/index.js\r\nhttp://localhost:8080/app.js:12337:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3-eth/src/index.js:33:11\r\n./node_modules/web3-eth/src/index.js\r\nhttp://localhost:8080/app.js:12421:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./node_modules/web3/src/index.js:33:11\r\n./node_modules/web3/src/index.js\r\nhttp://localhost:8080/app.js:12536:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nBountiesResolver.js:4\r\n./src/libs/knuckles/web3/resolvers/BountiesResolver.js\r\nhttp://localhost:8080/app.js:13083:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/libs/knuckles/web3/EthResolver.js:14:85\r\n./src/libs/knuckles/web3/EthResolver.js\r\nhttp://localhost:8080/app.js:13035:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/libs/knuckles/web3/index.js:2:70\r\n./src/libs/knuckles/web3/index.js\r\nhttp://localhost:8080/app.js:13071:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/libs/knuckles/services/Users.js:12:63\r\n./src/libs/knuckles/services/Users.js\r\nhttp://localhost:8080/app.js:12927:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/store/user/actions.js:10:87\r\n./src/store/user/actions.js\r\nhttp://localhost:8080/app.js:13167:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/store/user/index.js:6:66\r\n./src/store/user/index.js\r\nhttp://localhost:8080/app.js:13190:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./src/store/index.js:4:63\r\n./src/store/index.js\r\nhttp://localhost:8080/app.js:13155:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./.quasar/app.js:4:80\r\n./.quasar/app.js\r\nhttp://localhost:8080/app.js:917:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n<anoniem>\r\nwebpack-internal:///./.quasar/client-entry.js:17:65\r\n./.quasar/client-entry.js\r\nhttp://localhost:8080/app.js:940:1\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\nfn\r\nhttp://localhost:8080/app.js:131:20\r\n0\r\nhttp://localhost:8080/app.js:13227:18\r\n__webpack_require__\r\nhttp://localhost:8080/app.js:768:12\r\n<anoniem>\r\nhttp://localhost:8080/app.js:904:18\r\n<anoniem>\r\nhttp://localhost:8080/app.js:1:11\r\n```\r\n"},{"labels":["bug"],"text":"I have a parity poa network running and when I try to make batch requests I get the error: \r\n\r\n```javascript\r\nError: JSONRPC method should be specified for params: \"undefined\"!\r\n    at Object.Jsonrpc.toPayload (/Users/aaron/workspace/nw_test/node_modules/web3-core-requestmanager/src/jsonrpc.js:42:15)\r\n    at /Users/aaron/workspace/nw_test/node_modules/web3-core-requestmanager/src/jsonrpc.js:84:24\r\n    at Array.map (<anonymous>)\r\n    at Object.Jsonrpc.toBatchPayload (/Users/aaron/workspace/nw_test/node_modules/web3-core-requestmanager/src/jsonrpc.js:83:21)\r\n    at RequestManager.sendBatch (/Users/aaron/workspace/nw_test/node_modules/web3-core-requestmanager/src/index.js:163:27)\r\n    at Batch.execute (/Users/aaron/workspace/nw_test/node_modules/web3-core-requestmanager/src/batch.js:50:25)\r\n    at decryptedAccount.signTransaction.then.signedTx (/Users/aaron/workspace/nw_test/makeTx.js:46:26)\r\n    at <anonymous>\r\n    at process._tickCallback (internal/process/next_tick.js:188:7)\r\n```\r\n\r\nMy code is:\r\n```javascript\r\n    const batch = new web3.BatchRequest();\r\n\r\n    return decryptedAccount.signTransaction(rawTransaction)\r\n        .then(signedTx => {\r\n            batch.add(web3.eth.sendSignedTransaction(signedTx.rawTransaction));\r\n            batch.execute();\r\n        })\r\n        .catch(console.error);\r\n```\r\n\r\n**web3 version:** `1.0.0-beta.36`\r\n**node version:** `8.9.3`"},{"labels":["bug"],"text":"With a solidity method like:\r\n```solidity\r\nfunction set(uint val) public {\r\n  ..etc..\r\n}\r\n```\r\nIn `beta.36`this:\r\n```javascript\r\nconst val = web3.utils.toBN(1);\r\nconst data = myContract.methods.set(val).encodeABI();\r\n```\r\nthrows this:\r\n```shell\r\n Error: invalid number value (arg=\"val\", coderType=\"uint256\", value=\"1\")\r\n      at Object.throwError (/Users/cgewecke/code/consensys/e2e-beta36/wild-truffle/truffle/packages/truffle/build/webpack:/~/ethers/utils/errors.js:68:1)\r\n      at CoderNumber.encode (/Users/cgewecke/code/consensys/e2e-beta36/wild-truffle/truffle/packages/truffle/build/webpack:/~/ethers/utils/abi-coder.js:353:1)\r\n      at /Users/cgewecke/code/consensys/e2e-beta36/wild-truffle/truffle/packages/truffle/build/webpack:/~/ethers/utils/abi-coder.js:605:21\r\n```\r\n\r\nHowever this works:\r\n```javascript\r\nconst ethers = require('ethers');\r\n\r\nconst val = ethers.utils.bigNumberify(1);\r\nconst data = myContract.methods.set(val).encodeABI();\r\n```"},{"labels":["bug",null],"text":"I am trying to call the method \"getTransactionCount(address)\" but it's returning ' Error: Invalid JSON RPC response: \"\" ' \r\nThis is a piece of my code:\r\n\r\n```javascript\r\nvar Web3 = require('web3');\r\n// create an instance of web3 using the HTTP provider.                \r\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\nweb3.eth.getTransactionCount(\"0x7f037a1063071c34bd6bf36cb24328e6309e8bf7\").then(result=>{       \r\n     console.log(result);                  \r\n});\r\n```"},{"labels":["bug"],"text":"I'm trying out web3 `v1.0.0-beta.36` and having some trouble with pulling events from a contract.\r\n\r\nThe events do not return any data, and `getPastEvents` is throwing this error:\r\n```\r\nError: Returned values aren't valid, did it run Out of Gas?\r\n```\r\n\r\nThe same action works in web3 `0.20.7` no problem.\r\n\r\nIs it possible a bug in decoding of empty event data `0x` may have slipped through the cracks?"},{"labels":["bug"],"text":"I'm experiencing \"weird things\" related to:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/v1.0.0-beta.35/packages/web3-providers-ws/package.json#L12\r\n\r\nIn a project that specifies `\"web3\": \"1.0.0-beta.35\"` in its package.json, with a fresh install (`rm -rf node_modules && npm i .`) there's some package-lock churn and then `npm ls | less` reveals this:\r\n\r\n```\r\n│ │ │ └─┬ web3-providers-ws@1.0.0-beta.35\r\n│ │ │   ├── underscore@1.8.3\r\n│ │ │   ├── web3-core-helpers@1.0.0-beta.35 deduped\r\n│ │ │   └─┬ websocket@1.0.26 invalid (git://github.com/frozeman/WebSocket-Node.git#6c72925e3f8aaaea8dc8450f97627e85263999f2)\r\n│ │ │     ├── debug@2.6.9 extraneous\r\n│ │ │     ├── nan@2.11.0 deduped\r\n│ │ │     ├── UNMET DEPENDENCY typedarray-to-buffer@^3.1.2\r\n│ │ │     └── UNMET DEPENDENCY yaeti@^0.0.6\r\n```\r\n\r\n`typedarray-to-buffer` is, after install, definitely missing, and sometimes `websocket` is missing as well. In other words, the installation is broken.\r\n\r\nI can \"fix\" it by doing: `npm un web3 && npm i --save-exact web3@1.0.0-beta.35`. There's more package-lock churn and the missing deps are no longer missing. But then with a fresh install (e.g. on travis or appveyor), I'm back where I started.\r\n\r\nnode: `8.11.4`\r\nnpm: `6.4.1`\r\nplatforms affected: macOS, Linux, Windows."},{"labels":["bug"],"text":"Hi, this issue is related to [1](https://github.com/ethereum/web3.js/issues/1215),[2](https://github.com/ethereum/web3.js/issues/1351). And because it is a problem related to 3rd parties implementation of the blockchain, must be the responsibility of them to manage the particular implementation of the precision related to the timestamp.\r\nAs the [documentation](https://github.com/ethereum/web3.js/issues/1215) defines, the timestamp must be interpreted as [unix time](https://en.wikipedia.org/wiki/Unix_time), but currently, an error breaks the execution of the application (if the timestamp value is bigger than expected) throwing an error. \r\nIt is expected that the block timestamp data could change over time --given the [limitations](https://en.wikipedia.org/wiki/Unix_time#Representing_the_number) of unix time spec--  but the behavior of the web3 must not break because of it. \r\n\r\nFinally, the problem is related to a timestamp value bigger than a 32bit representation value. So, the right solution must be managing the timestamp as  BN (in little endian) and then convert it to the first 32bit representable values by the developer.\r\nThis means that a decimal number with more than 10 digits must be truncated to be interpreted as 32bit length.\r\n\r\nMy solution at release @beta.35 file web3-core-helpers/src/formatters.js 235\r\n> `< block.timestamp = utils.hexToNumber(block.timestamp);`\r\n> `> block.timestamp = outputBigNumberFormatter(block.timestamp);`\r\n\r\nat relase @beta.36 file web3-core-helpers/src/formatters.js:185 \r\n> `<     block.timestamp = utils.toDecimal(block.timestamp);`\r\n> `>   block.timestamp = utils.toBigNumber(block.timestamp);`\r\n\r\na substring(0,10) operation is not recomended here to avoid problems with big-endian implementations \r\n\r\n\r\nExample:\r\nPhisical block:  {\"difficulty\":\"0x20000\",\"extraData\":\"0x\",\"gasLimit\":\"0xdee8afcd\",\"gasUsed\":\"0xc705\",\"hash\":\"0x71ef9a9e5e3575b9861e81da7ebd0fe465879602f6aff27964d9de6bd62e8bdd\",\"logsBloom\":\"0x00000000000000000000000000000000000000080000000000000000000000000000000008000000000000000000000000000000000000000000400000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000010000000080000000000000000000000000000000000000000000000000021000000000002000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000\",\"miner\":\"0x0000000000000000000000000000000000000000\",\"mixHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"nonce\":\"0x0000000000000000\",\"number\":\"0x5\",\"parentHash\":\"0xcc0cd85704ccee6615b5d4a182c18d98080685acee0eb6aeb2816b5c14ebb26e\",\"receiptsRoot\":\"0x90889007d6b3836f3bbdaa22ed5cae062ccfc6c5758fc92e9e042b715f10cc26\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"size\":\"0x2ae\",\"stateRoot\":\"0xdf0a5715a8e861f689d3262b84fd02a95bbe76c536501cc34b519a3d051813a6\",\"timestamp\":\"0x154f146681969c9e\",\"totalDifficulty\":\"0xa0000\",\"transactions\":[\"0x406cdd51e197c04cc31b9bf0548d61f411375b7c63791f155d297e14402ed0bc\"],\"transactionsRoot\":\"0x513fe6d019912f97352635b19bb0144d035752c320a41e17680382237289c878\",\"uncles\":[]} \r\n\r\n\r\n\r\nHelp Logs:\r\ntimestamp (orig):  0x154f146681969c9e  \r\nBigNumber:  1535468428449979550  timestamp:  1535468428 (equal to BigNumber.substring(0,10))  \r\ntimestamp date:  2018-08-28T15:00:28.000Z  \r\njstimestamp:  1535468428449  \r\n\r\nAt the application level: Using a wrapper to override the buggy function.\r\n\r\nwrapperFile.js\r\n```\r\n// Bug Fix on web3 code version @1.0.0.beta.35\r\n// Override Dependencies \r\nvar _ = require('underscore');\r\nvar utils = require('web3-utils');\r\n/**\r\n * Same as web3-utils formatters, copied & pasted.\r\n * @param {String} number \r\n */\r\nvar outputBigNumberFormatter = function (number) {\r\n    return utils.toBN(number).toString(10);\r\n};\r\n/**\r\n * @override\r\n * Formats the output of a block to its proper values\r\n *\r\n * @method outputBlockFormatter\r\n * @param {Object} block\r\n * @returns {Object}\r\n*/\r\nfunction outputBlockFormatterOverride(block){\r\n   console.log(\"WARN: Override of internal web3 function.\"); \r\n   // transform to number\r\n   block.gasLimit = utils.hexToNumber(block.gasLimit);\r\n   block.gasUsed = utils.hexToNumber(block.gasUsed);\r\n   block.size = utils.hexToNumber(block.size);\r\n   // don't do a substring(0,10) here, parse the timestamp outside this function.\r\n   block.timestamp = outputBigNumberFormatter(block.timestamp);\r\n   if (block.number !== null)\r\n       block.number = utils.hexToNumber(block.number);\r\n\r\n   if(block.difficulty)\r\n       block.difficulty = outputBigNumberFormatter(block.difficulty);\r\n   if(block.totalDifficulty)\r\n       block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\r\n\r\n   if (_.isArray(block.transactions)) {\r\n       block.transactions.forEach(function(item){\r\n           if(!_.isString(item))\r\n               return outputTransactionFormatter(item);\r\n       });\r\n   }\r\n\r\n   if (block.miner)\r\n       block.miner = utils.toChecksumAddress(block.miner);\r\n\r\n   return block;\r\n}\r\n// trying to force override and cache of helpers \r\nvar helpers = require('web3-core-helpers');\r\nhelpers.formatters.outputBlockFormatter=outputBlockFormatterOverride;\r\nconst web3Client =require( 'web3');\r\n```"},{"labels":["bug",null],"text":"const web3 = new Web3('https://ropsten.infura.io/v3/3c52917848e945229c0d33d632b10490');\r\n\r\nconst account1 = '0x0982081d5a2bba0a9da9fe722c92edc0cb0e9b6a'\r\nconst account2 = '0xabc46ddc17a0c37ef70e8a153d4724f199705e8b'\r\n\r\nconst ac1_pvtkey =Buffer.from('XXXX9F79B587B1DE553E2ADCA3DC8D49BE3E2840083D970C41D83F7FD471XXXX', 'hex');\r\n\r\nconst ac2_pvtkey =Buffer.from('XXXXC15FBDB4634400B7F8FA17C9491B2E346AEC1BC86A493B18F5759042XXXX', 'hex');\r\n\r\n\r\n`web3.eth.getTransactionCount(account2, (err, txCount) => {\r\n\r\n//build transaction here ---------------------------\r\nconst txObject = {\r\n    nonce: web3.utils.toHex(txCount), \r\n    to: account2,\r\n    value: web3.utils.toHex(web3.utils.toWei('0.2','ether')),\r\n    gaslimit: web3.utils.toHex(2100),\r\n    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei'))   \r\n    }\r\n\r\n    console.log(txObject)\r\n \r\n//signing transaction here ---------------------------\r\nconst tx = new Tx(txObject);\r\ntx.sign(ac2_pvtkey); //using account2 private key\r\n\r\n------------------------------------------ERROR GIVING -------------------------------------------------- :\r\n\r\nvar sig = secp256k1.sign(msgHash, privateKey);\r\n                      ^\r\nRangeError: private key length is invalid `"},{"labels":[null,"bug"],"text":"From docs (\r\nhttp://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send):\r\n\r\n> \"error\" returns Error: is fired if an error occurs during sending. If a out of gas error, the second parameter is the receipt.\r\n\r\nHowever, there is no second parameter and the receipt is a string and part of the error message:\r\n\r\n```\r\n\"Transaction has been reverted by the EVM:\r\n{\r\n  \"blockHash\": \"0x90310734419309a5b23d40bc0cccf1a64c4863ecd06f1ed0812e1a32f1552056\",\r\n  \"blockNumber\": 2782305,\r\n  \"contractAddress\": null,\r\n  \"cumulativeGasUsed\": 1255548,\r\n  \"from\": \"0x13581255ee2d20e780b0cd3d07fac018241b5e03\",\r\n  \"gasUsed\": 40260,\r\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"status\": false,\r\n  \"to\": \"0x0af64558670a3b761b57e465cb80b62254b39619\",\r\n  \"transactionHash\": \"0x84d494da9e224e6c23c7c30840f4c022a4b01ca2702b902a4a42353af5899cb6\",\r\n  \"transactionIndex\": 8,\r\n  \"events\": {}\r\n}\"\r\n```\r\n\r\nThe `receipt` event is never fired for this transaction.\r\n\r\nUsed version: 1.0.0-beta.35"},{"labels":["bug",null],"text":"After calling `new Web3('ws://localhost:8545')` the node.js process never ends but instead hangs forever\r\nCalling `web3.currentProvider.connection.close()` does not help and throws error when using with the `HttpProvider`.\r\n (Of course you can call `process.exit(0)` but it's ugly)\r\n"},{"labels":["bug",null],"text":"If I trying to set a new provider, with:\r\n`\r\nweb3.setProvider(web3.providers.WebsocketProvider(<ws_url>));\r\n`\r\n\r\nI began to receive the following error (in v1.0.0-beta.35):\r\n`\r\nRangeError: Maximum call stack size exceeded\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:156:36)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\\n    at Eth.Contract.self.setProvider (/node_modules/web3-eth/src/index.js:157:23)\r\n`"},{"labels":["bug"],"text":"truffle-hdwallet-provider :- In Index.js file Hd key path is incorrect. Make it like\r\n\" require('ethereumjs-wallet/dist/hdkey');\"\r\n"},{"labels":["bug"],"text":"I am using the new version 1.0.0-beta.35 and I am connecting to a public https provider. Everything works fine in google chrome but when I try it in Firefox he sends Options requests to the public provider which include the following header:\r\n\r\n`Access-Control-Request-Headers:content-type,user-agent`\r\n\r\nGoogle chrome also sends such a header but without user-agent (only content-type). Since I get CORS error on Firefox I googled the problem and it seems quite strange that user-agent gets sent here in Firefox. If I resend the request withouth user-agent it goes through.\r\n\r\nIn the Firefox console I also see the following Warning:\r\n`Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at XXX. (Reason: missing token ‘user-agent’ in CORS header ‘Access-Control-Allow-Headers’ from CORS preflight channel).`"},{"labels":["bug"],"text":"The latest change in httpprovider breaks CORS with ganache and possibly other tools (for me at least), where the CORS-domain cannot be set explicitly.\r\n\r\nChrome comes up with the following error message: \"Failed to load http://localhost:7545/: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Origin 'null' is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.\"\r\n\r\nReproduce this issue by using the web3 0.20, e.g. \"npm install web3@0.20\" and then a simple index.html with the most simplistic content opening in Chrome:\r\n```\r\n<!doctype html>\r\n\r\n<html>\r\n\r\n<head>\r\n  <script src=\"node_modules/web3/dist/web3.js\" type=\"text/javascript\"></script>\r\n</head>\r\n\r\n<body>\r\n\r\n  <div>Here is some content.</div>\r\n\r\n\r\n  <script>\r\n    var web3;\r\n    if (typeof web3 !== 'undefined') {\r\n      web3 = new Web3(web3.currentProvider);\r\n    } else {\r\n      // set the provider you want from Web3.providers\r\n      web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:7545\"));\r\n    }\r\n\r\n  </script>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\nAnything I can do on my side?\r\n\r\nhttps://github.com/ethereum/web3.js/blob/b4c1542ddb5284267f6814ba0106bfbbc83fe166/lib/web3/httpprovider.js#L66"},{"labels":["bug"],"text":"**Input:**\r\noTX: \r\n{\r\n  \"to\": \"0xed32e0fd016810B7d3606e1Ae163B58266c544B0\",\r\n  \"gasLimit\": \"0xc350\",\r\n  \"value\": \"0x2386f26fc10000\",\r\n  \"chainId\": \"0x01\",\r\n  \"gasPrice\": \"0x4a817c800\",\r\n  \"nonce\": \"0x4\"\r\n};\r\nvar key = \"9cb1 ... 2a84\";\r\n\r\n\r\n**Method 1 - OK:**\r\nvar _key = new Buffer(key, 'hex');\r\nvar _tx = new TX(tx);\r\n_tx.sign(_key);\r\n\r\nvar _raw = _tx.serialize();\r\nvar _rr = '0x' + _raw.toString('hex');\r\n\r\n:: HASH1 = '0xf86b ... 25a00b3b ... 7f39';\r\n\r\n\r\n**Method 2 - ERR:**\r\nweb3.eth.signTransaction(tx, key).then(trans);\r\n\r\n:: HASH2 = '0xf86b ... 25a009fd ... 08b5';\r\n\r\n\r\nAnd the description of the method signTransaction  in the documentation does not correspond to the actual result."},{"labels":["bug"],"text":"Minifying the code makes the BN instance's `constructor.name !== 'BN'` so it breaks web3's implementation of `isBN`."},{"labels":["bug"],"text":"Hi, I'm using `web3@1.0.0-beta.34` and its `subscribe` method. Subscribing itself is working but I'm confused about the logs I'm getting on chain reorgs.\r\n\r\nFrom my understanding, an event triggers the `.on('changed', ...)` callback on the event mined in an uncle block, which sets `removed=true`. Then, the regular `.on('data', ...)` is triggered again for the event mined in the new valid block. What I don't understand is that also the `.on('changed', ...)` is triggered again (with `removed=true`) on the new block. There could be two different uncles, but looking through the future blocks, the event is never mined again. It leaves the impression that one uncle exists and web3 triggers `.on('changed', ...)` on the valid new block although it shouldn't.\r\n\r\nHere an output of what happens. The last `CHANGED` entry shouldn't be there in my opinion.\r\n```javascript\r\nDATA:\r\n{ address: '0xE41d2489571d322189246DaFA5ebDe1F4699F498',\r\n  topics: \r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x000000000000000000000000aeec6f5aca72f3a005af1b3420ab8c8c7009bac8',\r\n     '0x000000000000000000000000a99d86d86af58a2de0271ea75fcdae7e887c35c8' ],\r\n  data: '0x0000000000000000000000000000000000000000000000008ac7230489e80000',\r\n  blockNumber: 5938722,\r\n  transactionHash: '0x75e30467868426584d9e1d371be879c6433ac0cafcfa5edd9d39a72bbb62d4fc',\r\n  transactionIndex: 17,\r\n  blockHash: '0xe40548ce3630e04c4e9e1c6dfd50763e7c3d0c3708a288612b923649da1e9906',\r\n  logIndex: 7,\r\n  removed: false,\r\n  id: 'log_c3ce8574' }\r\n\r\nCHANGED:\r\n{ address: '0xE41d2489571d322189246DaFA5ebDe1F4699F498',\r\n  topics: \r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x000000000000000000000000aeec6f5aca72f3a005af1b3420ab8c8c7009bac8',\r\n     '0x000000000000000000000000a99d86d86af58a2de0271ea75fcdae7e887c35c8' ],\r\n  data: '0x0000000000000000000000000000000000000000000000008ac7230489e80000',\r\n  blockNumber: 5938722,\r\n  transactionHash: '0x75e30467868426584d9e1d371be879c6433ac0cafcfa5edd9d39a72bbb62d4fc',\r\n  transactionIndex: 17,\r\n  blockHash: '0xe40548ce3630e04c4e9e1c6dfd50763e7c3d0c3708a288612b923649da1e9906',\r\n  logIndex: 7,\r\n  removed: true,\r\n  id: 'log_c3ce8574' }\r\n\r\nDATA:\r\n{ address: '0xE41d2489571d322189246DaFA5ebDe1F4699F498',\r\n  topics: \r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x000000000000000000000000aeec6f5aca72f3a005af1b3420ab8c8c7009bac8',\r\n     '0x000000000000000000000000a99d86d86af58a2de0271ea75fcdae7e887c35c8' ],\r\n  data: '0x0000000000000000000000000000000000000000000000008ac7230489e80000',\r\n  blockNumber: 5938722,\r\n  transactionHash: '0x75e30467868426584d9e1d371be879c6433ac0cafcfa5edd9d39a72bbb62d4fc',\r\n  transactionIndex: 12,\r\n  blockHash: '0x6f80ebe496a1ea687791f3d9b478cc75dbb027c8bc1095da5342f5f903257b37',\r\n  logIndex: 6,\r\n  removed: false,\r\n  id: 'log_54fc38d7' }\r\n\r\nCHANGED:\r\n{ address: '0xE41d2489571d322189246DaFA5ebDe1F4699F498',\r\n  topics: \r\n   [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     '0x000000000000000000000000aeec6f5aca72f3a005af1b3420ab8c8c7009bac8',\r\n     '0x000000000000000000000000a99d86d86af58a2de0271ea75fcdae7e887c35c8' ],\r\n  data: '0x0000000000000000000000000000000000000000000000008ac7230489e80000',\r\n  blockNumber: 5938722,\r\n  transactionHash: '0x75e30467868426584d9e1d371be879c6433ac0cafcfa5edd9d39a72bbb62d4fc',\r\n  transactionIndex: 12,\r\n  blockHash: '0x6f80ebe496a1ea687791f3d9b478cc75dbb027c8bc1095da5342f5f903257b37',\r\n  logIndex: 6,\r\n  removed: true,\r\n  id: 'log_54fc38d7' }\r\n```"},{"labels":["bug"],"text":"The situation I have is this:\r\n* The correct nonce of (208) is reported by https://rinkeby.etherscan.io/.\r\n* An incorrect nonce of (206) is returned from web3.eth.getTransactionCount()\r\n* I have 2 pending transactions on rinkeby.\r\n\r\nso I assume the difference of 2 comes from my 2 pending transactions?\r\n\r\nI've only tested this on rinkeby. \r\n\r\nTo reproduce the error you'll need to submit a transaction that sits too long with a `pending` status.\r\n\r\nI'm fortunate/unfortunate enough to be able to reproduce this consistently when trying to deploy a contract on rinkeby. (at the time of this writing, my contract deployments are taking up to two days to confirm regardless of gwei).\r\n\r\nIf you want to try and reproduce, here is my rough code and hopefully your transactions pend awhile ;)\r\n\r\n```\r\n// I've already compiled using solc and have the abi and bytecode \r\n\r\nlet contract = new web3.eth.Contract(abi);\r\n\r\nlet txn = contract.deploy({data: '0x'+bytecode}); \r\n\r\nlet txn_object = {\r\n  gas: 270000,\r\n  gasPrice: '55', \r\n  from: from, \r\n  data: txn.encodeABI()\r\n};\r\n\r\nweb3.eth.getTransactionCount(from)\r\n  .then(nonce => {\r\n    txn_object.nonce = nonce;\r\n\r\n    let raw_txn = new require('ethereum-tx')(txn_object);\r\n    raw_txn.sign(private_key);\r\n    let serialized = raw_txn.serialize();\r\n    let signed_txn = '0x'+serialized.toString('hex');\r\n\r\n    web3.eth.sendSignedTransaction(signed_txn).on('receipt', (result) => console.log(result));\r\n  })\r\n```\r\n\r\nrunning this the second time results in `transaction already known` error because getTransactionCount() is returning previous nonce.\r\n\r\nI know that I could reproduce using txn.send({from:from}) instead of going through the trouble of manually signing the txn, but I wanted to report exactly what I'm doing. \r\n"},{"labels":["bug",null],"text":"Suppose we have a solidity function `function example(uint[][] numbers)` which accepts a 2d array of integers (as allowed by the `Experimental ABIEncoderV2`). If I wish to call this function using web3, I get the error: \r\n```\r\nTypeError: Cannot read property '0' of undefined\r\n      at SolidityCoder.encodeWithOffset (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/solidity/coder.js:155:1)\r\n      at /Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/solidity/coder.js:115:1\r\n      at Array.forEach (<anonymous>)\r\n      at SolidityCoder.encodeMultiWithOffset (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/solidity/coder.js:112:1)\r\n      at SolidityCoder.encodeParams (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/solidity/coder.js:103:1)\r\n      at SolidityFunction.toPayload (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/function.js:92:1)\r\n      at SolidityFunction.sendTransaction (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/function.js:163:1)\r\n      at SolidityFunction.execute (/Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/function.js:256:1)\r\n      at /Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:204:1\r\n      at new Promise (<anonymous>)\r\n      at /Users/Mark/.nvm/versions/node/v8.9.4/lib/node_modules/truffle/build/webpack:/~/truffle-contract/contract.js:155:1\r\n      at <anonymous>\r\n      at process._tickCallback (internal/process/next_tick.js:188:7)\r\n```\r\n\r\nIs there an intention to support this functionality soon? I wanted to document this bug here incase it wasn't already known."},{"labels":["bug"],"text":"Some platforms such as Node do not bundle window.atob/btoa. This should not be a problem, since [web3-providers-ws](https://www.npmjs.com/package/web3-providers-ws) checks for the existence of the window object and uses 3rd-party polyfills if it does not exist.\r\n\r\nThe problem is that some environments do define `window`, but not `atob`/`btoa`, which are browser standards. Good examples are React-Native (not sure if actual version does define it) and proton-native. In this case, it throws:\r\n\r\n```\r\n    _btoa = btoa;\r\n    ^\r\n\r\nReferenceError: btoa is not defined\r\n    at Object.<anonymous> (/Users/user/dev/node_modules/web3-providers-ws/src/index.js:33:5)\r\n    at Module._compile (internal/modules/cjs/loader.js:678:30)\r\n    at Module._extensions..js (internal/modules/cjs/loader.js:689:10)\r\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/user/dev/node_modules/babel-register/lib/node.js:152:7)\r\n    at Module.load (internal/modules/cjs/loader.js:589:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:528:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:520:3)\r\n    at Module.require (internal/modules/cjs/loader.js:626:17)\r\n    at require (internal/modules/cjs/helpers.js:20:18)\r\n    at Object.<anonymous> (/Users/user/dev/node_modules/web3-core-requestmanager/src/index.js:53:24)\r\n```\r\n\r\nI think this part on web3-providers-ws/src/index.js:\r\n\r\n```javascript\r\nif (typeof window !== 'undefined') {\r\n    Ws = window.WebSocket;\r\n    _btoa = btoa;\r\n    parseURL = function(url) {\r\n        return new URL(url);\r\n    };\r\n} else {\r\n    Ws = require('websocket').w3cwebsocket;\r\n    _btoa = function(str) {\r\n      return Buffer(str).toString('base64');\r\n    };\r\n    // Web3 supports Node.js 5, so we need to use the legacy URL API\r\n    parseURL = require('url').parse;\r\n}\r\n```\r\n\r\nShould rather be kind of:\r\n\r\n```javascript\r\nif (typeof window !== 'undefined') {\r\n    if (window.hasOwnProperty('WebSocket'))\r\n        Ws = window.WebSocket;\r\n    else\r\n        Ws = require('websocket').w3cwebsocket;\r\n    \r\n    if (window.hasOwnProperty('btoa'))\r\n        _btoa = btoa;\r\n    else\r\n        _btoa = function(str) {\r\n      return Buffer(str).toString('base64');\r\n    };\r\n    \r\n    if (window.hasOwnProperty('URL'))\r\n        parseURL = function(url) {\r\n            return new URL(url);\r\n        };\r\n    else\r\n        parseURL = require('url').parse;\r\n} else {\r\n    Ws = require('websocket').w3cwebsocket;\r\n    _btoa = function(str) {\r\n      return Buffer(str).toString('base64');\r\n    };\r\n    // Web3 supports Node.js 5, so we need to use the legacy URL API\r\n    parseURL = require('url').parse;\r\n}\r\n```\r\n\r\nHowever I could not find the package repo to send a PR.\r\n\r\nNote: populating/defining  `window.btoa` did not work due to ```_btoa = btoa;```. If it was ```btoa = window.btoa;```, then it would work. If the above change is not a good idea, then this last one would not cause any issue and do the trick (although additional work - defining `window.btoa` - is needed)."},{"labels":[null,"bug"],"text":"When I try to convert hex to number at the value\r\n\r\n`Web3.utils.hexToNumber(\"0000000000000000000000000000000000000000000000000000000000000010\");`\r\n\r\nI got:\r\n\r\n`10`\r\n\r\nIt should be 16 for the correct convert."},{"labels":["bug"],"text":"I'm having problems with local wallet use to deploy contracts. The contract is valid and works with my original Geth provider. However, when I decrypt my Geth V3 wallet locally with `web3.eth.accounts.wallet.decrypt()`, I cannot deploy contracts. Simple ether transfers are successful. I use Infura as HTTP provider. I've tried on both Rinkeby and Ropsten. @frozeman is this a known issue? I switched to using the truffle-wallet-provider, not HD wallet, package which works. (Perhaps this package is better anyway in that it allows me to use higher level convenience methods like `.send` and `.call`.)\r\n\r\n**Expected:** Sending encoded contract with arguments using `sendTransaction` to work normally.\r\n\r\n**Actual:** Contract always fails and chews up gas. Error is either stack overflow, stack underflow, or value transfer failed possibly as a result of revert op code.\r\n\r\nCode:\r\n\r\n```javascript\r\n const Web3 = require('web3');\r\n        const web3 = new Web3(new Web3.providers.HttpProvider(infuraURI));\r\n\r\n        const compiledContract = require('../build/myContract.json');\r\n\r\n        const gethWallet = require('../test_wallet/UTC--2018-01-01T01-01-01.001705111Z--aaa7aaaaaaa77aa7aaaaaaaaaaaaaaaaaaaaaaaaaa.json');\r\n\r\n        web3.eth.accounts.wallet.decrypt(gethWallet, 'password');\r\n\r\n        web3.eth.accounts.wallet.create(2); //create two more keys\r\n\r\n    // problem here:\r\n        // would like to use default account for higher level .send calls\r\n        // web3.eth.defaultAccount = web3.eth.accounts.wallet[0]['address'];\r\n\r\n        const address1 = web3.eth.accounts.wallet[1]['address'];\r\n        const address2 = web3.eth.accounts.wallet[2]['address'];\r\n\r\n        const amount = '4';\r\n\r\nweb3Func = async () => {\r\n          myContractEncoded = await new web3.eth.Contract(JSON.parse(compiledContract.interface))\r\n            .deploy({ data: compiledContract.bytecode, arguments: [web3.utils.toWei(amount, 'ether'), address1, address2] })\r\n            .encodeABI();\r\n\r\n    await web3.eth.sendTransaction({ from: 0, data: myContractEncoded, value: '1', gas: '1500000' })\r\n    .on('receipt', receipt => console.log(receipt)) });\r\n}; \r\n\r\nweb3Func();\r\n```"},{"labels":["bug"],"text":"Per the [JSON-RPC spec](https://github.com/ethereum/wiki/wiki/JSON-RPC#returns-31): `status: QUANTITY either 1 (success) or 0 (failure).` Looking a little further down, we can see an [example](https://github.com/ethereum/wiki/wiki/JSON-RPC#example-31): `status: '0x1'`\r\n\r\nMy interpretation of the spec says that `status` should be type `string` represented as a `hexadecimal` number with either `0x1` (success) or `0x0` (failure).\r\n\r\nHowever, per the [docs](http://web3js.readthedocs.io/en/1.0/web3-eth.html#eth-gettransactionreceipt-return), [code](https://github.com/ethereum/web3.js/blob/1271b7b37f4a68b6ba2276c2e4d39593a3bbf753/packages/web3-core-helpers/src/formatters.js#L219-L221), and real results (on `1.0.0-beta34`), `web3` is returning a `boolean`.\r\n\r\nI'm now part of the Truffle team, and https://github.com/trufflesuite/ganache-core is failing tests because of the unexpected `boolean` type.\r\n\r\nI'm happy to submit a PR with the appropriate fixes! Thanks!"},{"labels":["bug"],"text":"Hi,  I'm calling a contracts balanceOf method for 100K addresses. While I receive many good responses I also get this error. I'm using \"web3\": \"^1.0.0-beta.34\". any ideas?\r\n```\r\nError: Invalid JSON RPC response: \"\"\r\n    at Object.InvalidResponse (D:\\eosdac\\node_modules\\web3-core-helpers\\src\\errors.js:42:16)\r\n    at XMLHttpRequest.request.onreadystatechange (D:\\eosdac\\node_modules\\web3-providers-http\\src\\index.js:73:32)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (D:\\eosdac\\node_modules\\xhr2\\lib\\xhr2.js:64:18)\r\n    at XMLHttpRequest._setReadyState (D:\\eosdac\\node_modules\\xhr2\\lib\\xhr2.js:354:12)\r\n    at XMLHttpRequest._onHttpRequestError (D:\\eosdac\\node_modules\\xhr2\\lib\\xhr2.js:544:12)\r\n    at ClientRequest.<anonymous> (D:\\eosdac\\node_modules\\xhr2\\lib\\xhr2.js:414:24)\r\n    at emitOne (events.js:116:13)\r\n    at ClientRequest.emit (events.js:211:7)\r\n    at TLSSocket.socketErrorListener (_http_client.js:387:9)\r\n    at emitOne (events.js:116:13)\r\n    at TLSSocket.emit (events.js:211:7)\r\n    at emitErrorNT (internal/streams/destroy.js:64:8)\r\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\r\n    at process._tickCallback (internal/process/next_tick.js:180:9)\r\n```"},{"labels":[null,"bug",null],"text":"**Situation**: When I send a deployed contract using `contract.deploy().send()`, the command line prints a warning:\r\n```\r\n  contracts\r\n(node:23488) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 data listeners added. Use emitter.setMaxListeners() to increase limit\r\n    √ gets the accounts\r\n\r\n  6 passing (1s)\r\n```\r\n\r\n_Edit (14 April 2020): removed unnecessary information_"},{"labels":["bug"],"text":"I am trying to interact with some contract methods after creating the contract instance (new web3.eth.Contract).\r\nSome of the contract methods will return `0x` depending on the scenario and new web3 version (`1.0.*`) is not handling that properly. I tested that using the stable version and everything works fine.\r\n\r\n\r\nThis is the `eth_call` we are doing through JSON RPC:\r\n```\r\nPOST / {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"eth_call\",\"params\":[{\"data\":\"0x3defb962\",\"to\":\"0x61b0219e056b6d6c67f4aeb6cd5f6bf74a7aac50\"},\"latest\"]}\r\n\r\nRESPONSE / {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x\"}\r\n```\r\n\r\n`v0.20.*` is handling that properly and the result of the method call is parsed as `0`, but in `v1.0.*` we are getting this error message: `Couldn't decode bytes8 from ABI: 0x The size doesn't match`.\r\n\r\nAfter digging in the code, I found that `decodeParameter` method (at `web3-eth-abi/src/index.js`) is checking if `decodedValue === '0x'` but that will never happen because in the previous line, the string `0x` is being replaced by an empty string. So \r\n\r\n```javascript\r\noutputs.forEach(function (output, i) {\r\n  // This line throws the error because is not possible to decoded the empty string\r\n  var decodedValue = solidityTypes[count].decode(bytes.replace(/^0x/i,''), offsets[count],  types[count], count);\r\n  // This validation will never occur\r\n  decodedValue = (decodedValue === '0x') ? null : decodedValue; \r\n\r\n  // ...\r\n});\r\n```\r\n\r\nMy solution for this issue was to move the validation one step back. But before doing a PR, I would like to check with you if what I am doing is correct or the error I am having in the newest version, is an expected behaviour. This is what I did:\r\n\r\n```javascript\r\noutputs.forEach(function (output, i) {\r\n  bytes = bytes.replace(/^0x/i,'')\r\n  var decodedValue = bytes ?\r\n    solidityTypes[count].decode(bytes, offsets[count],  types[count], count) : null // If bytes is an empty string set value as null\r\n\r\n  // ...\r\n});\r\n```\r\n\r\nThanks!"},{"labels":["bug"],"text":"I have an object called countries that looks as follows:\r\n\r\n```\r\n{\r\n  \"DE\":{\"name\":\"DE\",\"id\":0,\"worldId\":57},\r\n  \"GB\":{\"name\":\"GB\",\"id\":1,\"worldId\":76},\r\n  \"NL\":{\"name\":\"NL\",\"id\":2,\"worldId\":161},\r\n  \"RU\":{\"name\":\"RU\",\"id\":3,\"worldId\":183}\r\n}\r\n```\r\n\r\nWhen I loop through it to create new countries in my contract as follows:\r\n\r\n```\r\nsetCountries (e){\r\n        let batch = new this.web3.BatchRequest();\r\n\r\n        console.log(countries);\r\n        Object.keys(countries).forEach((key) => {\r\n            const country = countries[key];\r\n            batch.add(\r\n               this.contract.methods.createCountry(\r\n                   country.name, 100, 100, 1000, this.account).send.request(this.contractObject, (err, res) => { // values are set to fixed for the example\r\n                if (err) {\r\n                    throw err;\r\n                } else {\r\n                console.log(res) // this logs the transaction id\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    batch.execute();\r\n}\r\n\r\n```\r\nThis works except for the fact that ALL the countries in my smart contract are set for the values of the last item in my object, in this case \"RU\". Any idea why this is? I've had 3 people look at it and we are not able to find the issue.\r\n"},{"labels":[null,"bug"],"text":"### Expected behaviour\r\nUsing `0`, `\"\"` and `\"0x\"` should return the same payload. \r\nThe expected payload would be 32 zero-bytes (`0000000000000000000000000000000000000000000000000000000000000000`)\r\n\r\n### Actual behaviour\r\nUsing `0` or `\"\"` returns `00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`\r\n\r\nwhile using `\"0x\"` return `0000000000000000000000000000000000000000000000000000000000000000`\r\n\r\n### Version\r\nnpm list web3 -> web3@0.20.6 \r\n\r\n\r\n### Steps to reproduce\r\n```\r\nconst f = require('./web3/lib/solidity/formatters')\r\nf.formatInputBytes('')\r\n> SolidityParam { value: '0000000000000000000000000000000000000000000000000000000000000000', offset: undefined }\r\nf.formatInputBytes(\"0x\")\r\n> SolidityParam { value: '', offset: undefined }"},{"labels":["bug"],"text":"Error with:\r\n../src/addon.cpp:59:36: error: no matching member function for call to 'NewInstance'\r\n                        info.GetReturnValue().Set(cons->NewInstance(argc, argv));\r\nProbably same fix as:\r\nhttps://github.com/phusion/node-sha3/pull/33/commits/3da944ecef0d4732739f7f121b6238cac6bbcd33"},{"labels":["bug"],"text":"I created this Contract: \r\n\r\nhttps://etherscan.io/address/0xfc7e86dbd205d02f97316995d8ace5d0afb9fe62#readContract\r\n\r\nYou can see in the Read Contract section that ownersNum is a uint with a current value of 1.\r\n\r\nI copied the address\r\n\r\n0xFc7e86dBD205D02F97316995d8AcE5D0AFB9fe62 and validated with https://tokenmarket.net/\r\nethereum-address-validator\r\n\r\n```\r\ncat keyaddress.js\r\nmodule.exports = '0xFc7e86dBD205D02F97316995d8AcE5D0AFB9fe62'\r\n```\r\n\r\nIn my node server, I created abi.js and copied the abi from etherscan\r\n\r\n```\r\ncat abi.js\r\nmodule.exports = [{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"QuantumPilotKeyPurchased\",\"type\":\"event\"}];\r\n```\r\n\r\n\r\nNow I try to read the ownersNum value in memory:\r\n\r\n```\r\nconst fs = require('fs');\r\nconst express = require('express');\r\nconst Web3 = require('web3');\r\nconst BigNumber = require('bignumber.js');\r\nconst sigUtil = require('eth-sig-util');\r\nconst abi = require('./abi');\r\nconst keyaddress = require('./keyaddress');\r\n\r\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\nlet c = new web3.eth.Contract(abi, keyaddress);\r\nconsole.log(c);\r\n\r\nlet on = c.methods.ownersNum().call();\r\n        console.log(on);\r\n        return;\r\n\r\n\r\n//below is never reached, the above crashes\r\n//  on.then(function(a,b) {\r\n          //console.log(a);\r\n          //console.log(b);\r\n  //});\r\n```\r\n\r\n\r\nAnd this happens\r\n\r\n```\r\n     ... (contract details)\r\n       name: 'buyKey',\r\n       outputs: [Array],\r\n       payable: true,\r\n       stateMutability: 'payable',\r\n       type: 'function',\r\n       signature: '0xe95db6f9' },\r\n     { anonymous: false,\r\n       inputs: [Array],\r\n       name: 'QuantumPilotKeyPurchased',\r\n       type: 'event',\r\n       signature: '0x55985f5332be13e699aaa51a5d3c003941f60e74af84533ebab5626b72cf3f51' } ] }\r\nPromise { <pending> }\r\n(node:5079) UnhandledPromiseRejectionWarning: Error: Couldn't decode uint256 from ABI: 0x\r\n    at SolidityTypeUInt.formatOutputUInt [as _outputFormatter] (/root/scan/node_modules/web3-eth-abi/src/formatters.js:174:15)\r\n    at SolidityTypeUInt.SolidityType.decode (/root/scan/node_modules/web3-eth-abi/src/type.js:252:17)\r\n    at /root/scan/node_modules/web3-eth-abi/src/index.js:327:49\r\n    at Array.forEach (<anonymous>)\r\n    at ABICoder.decodeParameters (/root/scan/node_modules/web3-eth-abi/src/index.js:326:13)\r\n    at Contract._decodeMethodReturn (/root/scan/node_modules/web3-eth-contract/src/index.js:459:22)\r\n    at Method.outputFormatter (/root/scan/node_modules/web3-eth-contract/src/index.js:812:46)\r\n    at Method.formatOutput (/root/scan/node_modules/web3-core-method/src/index.js:163:54)\r\n    at sendTxCallback (/root/scan/node_modules/web3-core-method/src/index.js:475:33)\r\n    at /root/scan/node_modules/web3-core-requestmanager/src/index.js:147:9\r\n    at XMLHttpRequest.request.onreadystatechange (/root/scan/node_modules/web3-providers-http/src/index.js:77:13)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/root/scan/node_modules/xhr2/lib/xhr2.js:64:18)\r\n    at XMLHttpRequest._setReadyState (/root/scan/node_modules/xhr2/lib/xhr2.js:354:12)\r\n    at XMLHttpRequest._onHttpResponseEnd (/root/scan/node_modules/xhr2/lib/xhr2.js:509:12)\r\n    at IncomingMessage.<anonymous> (/root/scan/node_modules/xhr2/lib/xhr2.js:469:24)\r\n    at emitNone (events.js:111:20)\r\n    at IncomingMessage.emit (events.js:208:7)\r\n    at endReadableNT (_stream_readable.js:1064:12)\r\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\r\n    at process._tickCallback (internal/process/next_tick.js:180:9)\r\n(node:5079) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:5079) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\nThis used to work fine while I was testing on Kovan. Now I switch to MainNet, upgrade web3, getting this error. I was on beta27, upgraded today to 34, same error, slightly different printout but same result."},{"labels":["bug",null],"text":"In the WebSocket-Node\r\n\r\nhttps://github.com/frozeman/WebSocket-Node/blob/master/lib/WebSocketFrame.js#L256\r\n\r\n`maskKey = nullMask ? 0 : (Math.random()*0xFFFFFFFF) | 0;`\r\n\r\nTo above out of range,change to\r\n`maskKey = nullMask ? 0 : ((Math.random() * 0xFFFFFFFF) >>> 0);`\r\nor Update WebSocket-Node to the latest version?\r\n\r\nThx"},{"labels":["bug"],"text":"I'm trying to use `web3.eth.subscribe(“logs”)` to listen to multiple addresses:\r\nhttps://web3js.readthedocs.io/en/1.0/web3-eth-subscribe.html#subscribe-logs\r\n\r\nThe docs say:\r\n\r\n> address - String|Array: An address or a list of addresses to only get logs from particular account(s).\r\n\r\nWhen I put one address in it works. It also works when I put an array containing a single address. However when I put an array with multiple addresses, it doesn't listen to either of the addresses. Is this a bug or am I doing something wrong?\r\n\r\nSo for example, this gets logs as expected:\r\n\r\n```\r\n  const options = {\r\n    fromBlock: 0, \r\n    toBlock: 'latest',\r\n    address: '0x56719fDa968D45042E6761DE23c4139127315EBE'\r\n  }\r\n\r\n  web3.eth.subscribe('logs', options, callback)\r\n```\r\n\r\nThis does too:\r\n\r\n```\r\n  const options = {\r\n    fromBlock: 0, \r\n    toBlock: 'latest',\r\n    address: ['0x56719fDa968D45042E6761DE23c4139127315EBE']\r\n  }\r\n\r\n  web3.eth.subscribe('logs', options, callback)\r\n```\r\n\r\nBut this doesn't work:\r\n\r\n```\r\n  const options = {\r\n    fromBlock: 0, \r\n    toBlock: 'latest',\r\n    address: ['0x56719fDa968D45042E6761DE23c4139127315EBE', '0xC21012955092E09158648A36C3010Bf70130CCC4']\r\n  }\r\n\r\n  web3.eth.subscribe('logs', options, callback)\r\n```\r\n\r\nI'm testing this against Ganache UI if that makes a difference here."},{"labels":["bug",null],"text":"I have the following script:\r\n\r\n```js\r\nvar Web3 = require('web3');\r\nvar web3 = new Web3('ws://localhost:8546');\r\n\r\nvar subscription = web3.eth.subscribe(\r\n    'newBlockHeaders',\r\n    function (err, blockHeader, sub, existingReceipt) {\r\n        console.log(\"blockHeader\", blockHeader);\r\n        subscription.unsubscribe(function() {\r\n            console.log('Successfully unsubscribed!');\r\n        });\r\n    });\r\n```\r\n\r\nI run it and see the following:\r\n\r\n```\r\n$ node manualtest.js\r\nblockHeader { parentHash: '...',\r\n  sha3Uncles: '...',\r\n  ...\r\n }\r\nSuccessfully unsubscribed!\r\n```\r\n\r\n**But the node process doesn't exit**. I can't find any other `close()` or `disconnect()` function to call."},{"labels":["bug"],"text":"Encoding of two-dimensional variadic arrays in these tests is wrong:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/f15caf13c91682cccd7b7762b80feadb9fb969dc/test/coder.encodeParam.js#L43-L64\r\n\r\nI took these tests for my own implementation of ABI encoding and found out that contracts would not deploy when I wrote some integration tests. These tests are built on the premise that offset of dynamic elements in a dynamic collection should be counted from the beginning of the whole encoding. The correct encoding is that offset is counted from the beginning of the dynamic collection regardless of the position of the dynamic collection in the whole encoding.\r\n\r\nHere is a deployed contract using a correct encoding in the ctor: https://kovan.etherscan.io/address/0x812b72fa1fb3b842cb193d743a44ec8439c9a060#readContract\r\n\r\nHere is my corrected version of the tests https://github.com/BlockStoreApp/Web3Swift/commit/8ab1f12ec3eb32fabf7ad67913fd39e505876f5f\r\nI would be very grateful if you star my project if that information was of any help : )\r\n\r\n\r\n"},{"labels":["bug"],"text":"When provider implements provider.on, `RequestManager` is listening to its 'data' event, but never calls 'removeListener' (https://github.com/ethereum/web3.js/blob/1.0/packages/web3-core-requestmanager/src/index.js#L98)\r\n\r\nthe solution in https://github.com/ethereum/web3.js/pull/1494 will not fix the issue (not calling removeListener).\r\nremoveListener can be added at `clearSubscriptions()`, however, it is not always called (it will help if setProvider is called)\r\n\r\nevery place where `packageInit` is called should eventually also remove these listeners\r\nit means that when you create a contract, you have to call a function of this contract to remove listeners (which doesn't scale well). I think listening to subscriptions should be opt-in/opt-out mechanism in automatic way:\r\n\r\non the first `addSubscription()` listen to the 'data' event\r\non the last `removeSubscription()` remove listener"},{"labels":["bug",null],"text":"getting this on every transaction attempt.. using geth 1.8.2 and tried 1.8.1 also and web3  ^1.0.0-beta.33\r\n\r\n```\r\nthis.web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')) \r\n.on('transactionHash',  (hash) => {\r\n  console.log(\"hash \" + hash)\r\n})\r\n.on('receipt', (receipt) => {\r\n  console.log(\"receipt \" + receipt)\r\n})\r\n.on('confirmation', (confirmationNumber, receipt) => { \r\n  console.log(\"confirmation \" + confirmationNumber + receipt)\r\n})\r\n.on('error', (error) => { \r\n  console.log(\"error \" + error)\r\n})\r\n```\r\n\r\n\r\n\r\n\r\n```\r\n\r\nError: Failed to check for transaction receipt:\r\n{}\r\nStack trace:\r\n[\"./node_modules/web3-utils/src/index.js\"]/_fireError@http://localhost:4200/vendor.bundle.js:238222:17\r\n[\"./node_modules/web3-core-method/src/index.js\"]/Method.prototype._confirmTransaction/checkConfirmation/<@http://localhost:4200/vendor.bundle.js:220187:17\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invoke@http://localhost:4200/polyfills.bundle.js:2373:17\r\nforkInnerZoneWithAngularBehavior/zone._inner<.onInvoke@http://localhost:4200/vendor.bundle.js:58558:24\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invoke@http://localhost:4200/polyfills.bundle.js:2372:17\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</Zone.prototype.run@http://localhost:4200/polyfills.bundle.js:2123:24\r\nscheduleResolveOrReject/<@http://localhost:4200/polyfills.bundle.js:2857:29\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invokeTask@http://localhost:4200/polyfills.bundle.js:2406:17\r\nforkInnerZoneWithAngularBehavior/zone._inner<.onInvokeTask@http://localhost:4200/vendor.bundle.js:58549:24\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invokeTask@http://localhost:4200/polyfills.bundle.js:2405:17\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</Zone.prototype.runTask@http://localhost:4200/polyfills.bundle.js:2173:28\r\ndrainMicroTaskQueue@http://localhost:4200/polyfills.bundle.js:2580:25\r\n[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneTask.invokeTask@http://localhost:4200/polyfills.bundle.js:2485:21\r\nZoneTask/this.invoke@http://localhost:4200/polyfills.bundle.js:2470:28\r\ntimer@http://localhost:4200/polyfills.bundle.js:4039:17\r\n  vendor.bundle.js:124146:22\r\n\temit http://localhost:4200/vendor.bundle.js:124146:22\r\n\t[\"./node_modules/web3-utils/src/index.js\"]/_fireError/< http://localhost:4200/vendor.bundle.js:238245:13\r\n\t[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invokeTask http://localhost:4200/polyfills.bundle.js:2406:17\r\n\tforkInnerZoneWithAngularBehavior/zone._inner<.onInvokeTask http://localhost:4200/vendor.bundle.js:58549:24\r\n\t[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneDelegate.prototype.invokeTask http://localhost:4200/polyfills.bundle.js:2405:17\r\n\t[\"./node_modules/zone.js/dist/zone.js\"]/</</Zone.prototype.runTask http://localhost:4200/polyfills.bundle.js:2173:28\r\n\t[\"./node_modules/zone.js/dist/zone.js\"]/</</ZoneTask.invokeTask http://localhost:4200/polyfills.bundle.js:2481:24\r\n\tZoneTask/this.invoke http://localhost:4200/polyfills.bundle.js:2470:28\r\n\ttimer\r\n```"},{"labels":["bug"],"text":"### version\r\n1.0.0-beta33\r\n\r\n### description\r\nAccording to the [official document](http://web3js.readthedocs.io/en/1.0/web3-eth-contract.html?highlight=send#id9), the arguments of the deploy method is optional. However, it is mandatory in type definition.\r\n\r\n### expected\r\n```typescript\r\ndeploy(options: {\r\n    data: string\r\n    arguments?: any[]                    // this is optional!\r\n}): TransactionObject<Contract>\r\n```\r\n\r\n### actual\r\n```typescript\r\ndeploy(options: {\r\n    data: string\r\n    arguments: any[]\r\n}): TransactionObject<Contract>\r\n```\r\n\r\nhttps://github.com/ethereum/web3.js/blob/1.0/packages/web3/types.d.ts#L326\r\n"},{"labels":[null,"bug"],"text":"Previously the format of UTC file was:-  \r\n{\"version\":3,\"id\":\"09ddd0cf-76ed-4254-8912-adedb549fbcb\",\"address\":\"e97a49f8e62767dad8d61c2e951eafb28a0adb37\",\"**Crypto**\":{\"ciphertext\":\"b887c29ba299793af2ec9535fe6934b04ae34cbc1b745396eaea3ac931b593dd\",\"cipherparams\":{\"iv\":\"7dfd0a849313c0e84e302b527c343499\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"ad883dc67f42508c56e467969d58d8abac3ab5360c61e515a80bddff6dfcf964\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"6d1d8c50fcb1498e38479498169b3692f018e96f40aa4d972bd6578b761a1d30\"}}\r\n\r\nAnd when we use web3.account.encrypt it generated like this\r\n\r\n{\"version\":3,\"id\":\"09ddd0cf-76ed-4254-8912-adedb549fbcb\",\"address\":\"e97a49f8e62767dad8d61c2e951eafb28a0adb37\",\"**crypto**\":{\"ciphertext\":\"b887c29ba299793af2ec9535fe6934b04ae34cbc1b745396eaea3ac931b593dd\",\"cipherparams\":{\"iv\":\"7dfd0a849313c0e84e302b527c343499\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"ad883dc67f42508c56e467969d58d8abac3ab5360c61e515a80bddff6dfcf964\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"6d1d8c50fcb1498e38479498169b3692f018e96f40aa4d972bd6578b761a1d30\"}}\r\n\r\nSo while decrypting only second one will work (web3.account.decrypt). This is just because of **Crypto** in UTC file.\r\n"},{"labels":["bug"],"text":"Hi,\r\n\r\nI want to sign a raw transaction using an account which is not an account registered by the provider (I use Ganache), but when I send it using `web3.eth.sendRawTransaction` I get the following error message :\r\n```\r\nError: Invalid JSON RPC response: {\"id\":15,\"jsonrpc\":\"2.0\"}\r\n```\r\n\r\nHowever, when I send a raw transaction signed with an address which is an account listed in Ganache it works. Is it mandatory that the account used to sign the transaction is known to the provider?\r\n\r\n```js\r\naccount.signTransaction({ to: ENV.contract_address, data: data, gas: '80000', chainId: 1 }, function(err, res) {\r\n        web3.eth.sendSignedTransaction(res.rawTransaction, function(sendErr, sendRes) {\r\n          // When the account used to sign is known to the provider it works\r\n          // When the account used to sign is not known it raises the error\r\n        });\r\n      });\r\n```\r\n\r\nUsing Truffle Console (raw transaction signed by an account not listed in the provider)\r\n```js\r\nweb3.eth.sendRawTransaction(\"0xf889808504a817c8008301388094345ca3e014aaf5dca488057592ee47305d9b3e1080a4d5d44d80000000000000000000000000dbe1c28e41dcc894a3af2262181d57afac9d45e425a0c1e5800040e508fcdcf3230936c868002983c4d1e339125b831c8829ea2206e8a04c334096606e091bcf3de7a8bebabf0fc98a11db3eba94a0f054f10c935ab9ac\", function(err, res) { console.log(err); });\r\nundefined\r\ntruffle(testrpc)> Error: Invalid JSON RPC response: {\"id\":15,\"jsonrpc\":\"2.0\"}\r\n    at Object.InvalidResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)\r\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1\r\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-provider/wrapper.js:134:1\r\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)\r\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)\r\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)\r\n    at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)\r\n```\r\nThanks for the help, I might have missed a point about providers and accounts.\r\n\r\nNote that the error could be raised by the smart contract which uses a `require`, the point is that I have no issue when the account is one that the provider know.\r\n\r\n---\r\n\r\nWeb3 version : 0.20.4"},{"labels":["bug",null],"text":"Works great in remix and web3 0.20.3\r\nNot at all in web3 1.0.0-beta.33\r\n\r\nWhat I get in remix back:\r\n0: string: moves0 dkMq+ciRPocrymdSicJ54esSDqo6zfdUBn7T833NagoKVz0PbKnfgchQ1kp/7XBmiOYWbJCbbAEajzu/dRYTeA==\r\n1: string: moves1 gw5QIWGdtYAdKa7FUAckp1VJWNi97PYZUykq33+IghkdCjDIpgM98k/GW7zvnrCE4XVutCvy3DbSD8XkpCVVqA==\r\n2: string: moves2 UQ8QgWjNZI0R5hPciNLp2F3JR4WNv+JiMwSASkbwkaJvDY5wuhigS7EkWRCMk7qrrnxpj3kfZ8jBi7afutikTg==\r\n3: string: moves3 3xnli6jScKuQtfWBbwlcTidyMp1oUoRsCUS+bWCEvKM0Rv5KgkP13+gRL+R/SRpZj7N5nxzYgCAfSmDM2mhaOA==\r\n4: string: moves4 qufMAoHutJ+Zn+eOAFvAD9ABIR5/1SAj18u6Z/r1WxWskse5F5nmSHYxwpt6a8CvA6/q4ENxvSnJy1bCtmCGUA==\r\n\r\nwhat my function does:\r\nfunction queryMoves(uint _battleNum, bool _isDeathMatch, bool _battleSwitch, bool _att_def) view public battleSolver returns (\r\n        string moves0,\r\n        string moves1,\r\n        string moves2,\r\n        string moves3,\r\n        string moves4\r\n        )\r\n\r\nthat ABI part:\r\n\"name\": \"queryMoves\",\r\n\t\t\t\"outputs\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"moves0\",\r\n\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"moves1\",\r\n\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"moves2\",\r\n\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"moves3\",\r\n\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"moves4\",\r\n\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n"},{"labels":["bug"],"text":"On Chrome 65 (OSX) using web3 1.0.0-beta.33, it seems web3.utils.randomHex does not produce consistent length hex strings. Also tested on Firefox.\r\n\r\n```\r\n> web3.utils.randomHex(32).length                \r\n63\r\n> web3.utils.randomHex(32).length                \r\n66\r\n> web3.utils.randomHex(32).length                \r\n65\r\n```"},{"labels":["bug"],"text":"`HttpProvider.sendAsync()` causes InvalidStateError in IE 11\r\n\r\nIt seems that IE has a problem when `request.timeout` is set before `request.open()`.\r\nSee `lib/web3/httpprovider.js`:\r\n\r\n    HttpProvider.prototype.prepareRequest = function(async) {\r\n        var request;\r\n\r\n        if (async) {\r\n            request = new XHR2();\r\n            request.timeout = this.timeout; // <-- IE11 needs this after request.open()\r\n        } else {\r\n            request = new XMLHttpRequest();\r\n        }\r\n        request.open('POST', this.host, async);\r\n\r\nNote: The same issue has been reported in other projects: https://github.com/stephanebachelier/superapi/issues/5\r\nand https://github.com/airbrake/airbrake-js/issues/302 "},{"labels":["bug"],"text":"I'm on beta.33, and I'm seeing an issue where I deploy a contract and -- even though the contract successfully deployed -- I'll get an error saying: \"The contract code couldn't be stored, please check your gas limit\". "},{"labels":["bug"],"text":"Calling `web3.shh.clearSubscriptions` to clear subscriptions fail with a TypeError, with or without any active subscriptions.\r\n\r\n#### System information\r\n\r\nweb3.js version: `1.0.0-beta.31`\r\nBrowser Version: Chrome 64.0.3282.186\r\nCommit hash : 956cdc54a851ce5c727f17b81a5d224ed0b92124\r\n\r\n#### Expected behaviour\r\n\r\n`web3.shh.clearSubscriptions` would execute with no error with or without an active subscription.\r\n\r\n#### Actual behaviour\r\n\r\n`web3.shh.clearSubscriptions` fails with a TypeError whether or not an active subscription exists.\r\n\r\n```\r\nTypeError: Cannot convert undefined or null to object\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nA gist was prepared to demonstrate the two failure cases.\r\n\r\nSee https://gist.github.com/dhl/b463ce9a6bd09e87fe74c992d7958d53\r\n\r\n#### Backtrace\r\n\r\n````\r\nweb3-1.0.0-beta.31_clearSubscriptions_bug_demo.html:22 TypeError: Cannot convert undefined or null to object\r\n    at Function.keys (<anonymous>)\r\n    at a.u.clearSubscriptions (web3.min.js:1)\r\n    at web3-1.0.0-beta.31_clearSubscriptions_bug_demo.html:19\r\n(anonymous) @ web3-1.0.0-beta.31_clearSubscriptions_bug_demo.html:22\r\n\r\n````\r\n"},{"labels":["bug"],"text":"I have following code\r\n```\r\n        contractInstance.methods.read().call().then(items => {\r\n          this.items = items // sometimes cached\r\n        })\r\n```\r\nSometimes I'm getting cached items. When it happens I don't see eth_call in Ganache log.\r\n\r\nWorkaround\r\n```\r\n        contractInstance.methods.read().call({\r\n          gas: gas // random gas\r\n        }).then(items => {\r\n          this.items = items // always correct\r\n        })\r\n```\r\n\r\nGanache 1.0.2\r\nWeb3 1.0.0-beta.31\r\nNode v9.2.1\r\nOS X 10.13.3"},{"labels":["bug"],"text":"web3: 1.0.0-beta.30 and 1.0.0-beta.31\r\nethermint: 0.5.3-b72a1eef\r\ngo-ethereum: 1.6.7-stable\r\n\r\nWhen sending a transaction, and setting the gasPrice to 0, the gasPrice is ignored and the default gas price is used instead. Other values (1, 2, 1000000, ...) work. This happens when deploying a contract (as shown below in the example code) and also when sending a transaction on an existing contract.\r\n\r\nIn web3 0.20.6, setting the gasPrice to 0 works fine.\r\n\r\nSetting the gasPrice to 0 is useful for private, permissioned networks (e.g. ethermint).\r\n\r\nExample code:\r\n```javascript\r\nconst solc = require('solc');\r\nconst Eth = require('web3-eth');\r\nconst eth = new Eth(Eth.givenProvider || \"http://localhost:8545\");\r\n\r\nconst input = `\r\ncontract A {\r\n  uint public x;\r\n\r\n  function A(uint _x) {\r\n    x = x;\r\n  }\r\n}\r\n`\r\n\r\nconsole.log(\"compiling...\");\r\nconst output = solc.compile(input);\r\nconsole.log(\"done\");\r\n\r\nconst compiled = output.contracts[\":A\"];\r\nconst contract = new eth.Contract(JSON.parse(compiled.interface));\r\n\r\nlet account;\r\nlet deploy;\r\n\r\neth.personal.getAccounts()\r\n.then(accounts => {\r\n  account = accounts[0];\r\n  console.log(\"using account \" + account)\r\n  return eth.personal.unlockAccount(account, \"1234\")\r\n})\r\n.then(() => {\r\n  console.log(\"unlocked account. estimating gas...\");\r\n  deploy = contract.deploy({\r\n    data: '0x'+compiled.bytecode,\r\n    arguments: [123]\r\n  });\r\n  return deploy.estimateGas({from: account})\r\n})\r\n.then(gasEstimate => {\r\n  console.log(\"gasEstimate = \" + gasEstimate + \", now deploying...\");\r\n  return deploy.send({\r\n    from: account,\r\n    gas: gasEstimate,\r\n    gasPrice: 0 // <------------------------------------- this has no effect\r\n  })\r\n  .once('transactionHash', hash => {\r\n    console.log(\"transaction hash: \" + hash);\r\n    eth.getTransaction(hash)\r\n    .then(transaction => console.log(\"gasPrice was: \" + transaction.gasPrice));\r\n  })\r\n})\r\n.then(() => console.log(\"done\"))\r\n.catch(err => console.log(err.stack))\r\n```\r\n\r\nOutput:\r\n```\r\ncompiling...\r\ndone\r\nusing account 0x7eFf122b94897EA5b0E2A9abf47B86337FAfebdC\r\nunlocked account. estimating gas...\r\ngasEstimate = 116392, now deploying...\r\nhash: 0x247100d4d1bf75042fdf94a3744ce095a71060b4192b52161b9e761fbe348d68\r\ngasPrice was: 18000000000\r\ndone\r\n```"},{"labels":["bug"],"text":"## Issue\r\nRunning into `Invalid number of arguments to Solidity function` when calling `zeroEx.token.setUnlimitedProxyAllowanceAsync(address, account)`.\r\n\r\n## Environment\r\n- Using Webpack to transpile/aggregate/minify\r\n- Browser\r\n- Using web3 version `1.0.0-beta.21` and 0x.js is using version `0.20.4`.\r\n\r\n## Notes\r\n- It seems like `isBigNumber` (https://github.com/ethereum/web3.js/blob/develop/lib/utils/utils.js#L489) doesn't recognize the amount 0x.js sends as a `BigNumber`.\r\n- Not minifying fixes this issue."},{"labels":["bug"],"text":"Im making an app that monitors a specific addresses' balance, im using Infura's public websocket endpoint and web3@1.0\r\nI often get disconnected and get **\"Connection not open on send()\"**\r\nI tried using a set interval that polls **web3.eth.net.isListening()** that resets the web3 provider, making it to reconnect to the node but in some cases i get **Unhandled rejection Error: CONNECTION ERROR: Couldn't connect to node on IPC.** and the app crashes. How am i supposed to handle the disconnects and make my app reconnect to the node?\r\n\r\n`setInterval(function() {\r\n  web3.eth.net.isListening()\r\n          .then()\r\n          .catch(e => {\r\n            console.log('[ - ] Lost connection to the node, reconnecting');\r\n            web3.setProvider(config.infura_ws);\r\n            app(); // this just subscribes to newBlockHeaders event\r\n          })\r\n}, interval);`"},{"labels":["bug",null],"text":"In web3-core-helpers/src/formatters.js, line no. 220,\r\nblock.timestamp = utils.hexToNumber(block.timestamp);\r\nthe conversion from hex to Number throws an error, \"Error in parsing.....\"\r\nTo fix this, \r\nblock.timestamp = utils.hexToNumberString(block.timestamp);\r\n\r\nI think this change should be made into the repo."},{"labels":["bug"],"text":"The API is a bit ambiguous. \r\n\r\nWhen strings are used for input instead if numbers, it's uncertain whether they get interpreted as hex-strings or decimal-strings. \r\n\r\nThe following examples result in identical transactions: \r\n```javascript\r\n\r\naccount.signTransaction({'nonce':1, \"value\":0,\"gas\":10,\"gasPrice\":0, \"chainId\":1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\naccount.signTransaction({'nonce':1, \"value\":0,\"gas\":\"10\",\"gasPrice\":0, \"chainId\":1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\naccount.signTransaction({'nonce':1, \"value\":0,\"gas\":\"A\",\"gasPrice\":0, \"chainId\":1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\naccount.signTransaction({'nonce':1, \"value\":0,\"gas\":\"0A\",\"gasPrice\":0, \"chainId\":1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\n```\r\n\r\nConsider the following example that a user may set up: \r\n\r\n```javascript\r\nfor (var nonce=9; nonce <= 16; nonce++){\r\n  n = nonce.toString(16)\r\n  console.log(\"Using nonce \"+n)\r\n  tx = account.signTransaction({'nonce':n, \"value\":0,\"gas\":10,\"gasPrice\":0, chainId:1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\");\r\n  console.log(tx);\r\n}\r\n```\r\nThis will output the following transactions: \r\n\r\n```\r\n[...]\r\n\r\nUsing nonce a\r\n{ messageHash: '0xfda3444cd58e1e762082949a67bad4e45b6fde2d2ec9a8f23c8f6f5d87b87881',\r\n  v: '0x26',\r\n  r: '0xd83a784e94758c0b46f45dbbe3d7ed90f7a8ac66ce2bbcb3c0ae25e5a2e360bf',\r\n  s: '0x790e1ace4be10c4d5690afcae25d4c2736a7f5d268034458fa51d1b5ce7d9f6d',\r\n  rawTransaction: '0xf8490a800a80808026a0d83a784e94758c0b46f45dbbe3d7ed90f7a8ac66ce2bbcb3c0ae25e5a2e360bfa0790e1ace4be10c4d5690afcae25d4c2736a7f5d268034458fa51d1b5ce7d9f6d' }\r\n\r\n[...]\r\n\r\nUsing nonce 10\r\n{ messageHash: '0xfda3444cd58e1e762082949a67bad4e45b6fde2d2ec9a8f23c8f6f5d87b87881',\r\n  v: '0x26',\r\n  r: '0xd83a784e94758c0b46f45dbbe3d7ed90f7a8ac66ce2bbcb3c0ae25e5a2e360bf',\r\n  s: '0x790e1ace4be10c4d5690afcae25d4c2736a7f5d268034458fa51d1b5ce7d9f6d',\r\n  rawTransaction: '0xf8490a800a80808026a0d83a784e94758c0b46f45dbbe3d7ed90f7a8ac66ce2bbcb3c0ae25e5a2e360bfa0790e1ace4be10c4d5690afcae25d4c2736a7f5d268034458fa51d1b5ce7d9f6d' }\r\n\r\n```\r\nThe \"nonce a\" and \"nonce 10\" (supposedly number 16 in hex-encoding) are identical. "},{"labels":["bug"],"text":"Allows `-1` as `nonce`:\r\n\r\n```\r\n\r\nvar Web3EthAccounts = require('web3-eth-accounts');\r\nvar account = new Web3EthAccounts('ws://localhost:8546');\r\n\r\n> account.signTransaction({'nonce':-1, \"value\":0,\"gas\":21000,\"gasPrice\":0, \"chainId\":1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\n{ messageHash: '0x71488a00b0ac6c3f13f230787de8e2cde99e018a9037209ae89f81baf7e7f471',\r\n  v: '0x26',\r\n  r: '0xc0d893f83137b9c82d3b1a602edda9a2d9c92f6714f421f96be08fa200a0b7d8',\r\n  s: '0x3fd99522cf6ea496c7bc4ae2de4807e1d9fb136919462bbfb99012979664ff34',\r\n  rawTransaction: '0xf84c81x18082520880808026a0c0d893f83137b9c82d3b1a602edda9a2d9c92f6714f421f96be08fa200a0b7d8a03fd99522cf6ea496c7bc4ae2de4807e1d9fb136919462bbfb99012979664ff34' }\r\n```\r\n\r\nBut in fact, it produces an _erroneous_ `rawTransaction`: `0xf84c81x1...` with an `x` in the middle of the data payload.\r\n\r\nSame with \r\n- negative `value`\r\n- negative `gas`\r\n- negative `gasPrice`\r\n\r\nUsing negative `chainId` makes the RLP even more strange: \r\n```javascript\r\n\r\nvar Web3EthAccounts = require('web3-eth-accounts');\r\nvar account = new Web3EthAccounts('ws://localhost:8546');\r\n\r\n> account.signTransaction({'nonce':1, \"value\":0,\"gas\":1,\"gasPrice\":0, \"chainId\":-1},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\n{ messageHash: '0xa090f9d4887116465e139c4ce08be7c4835b97cb5ea10866bbf8694ca0d9fd90',\r\n  v: '0x.8',\r\n  r: '0x12',\r\n  s: '0x5a',\r\n  rawTransaction: '0xf94b.801800180808081.8125a03ba111521e2400ce9a0ac20d27082aa7119a8f6a230495202a5cdf704f9a419ba05079ac7d2bfa62c7f1d2ce8a339d8ad76c2ec3faf2a29c04e0992419f6df2c70' }\r\n\r\n```"},{"labels":["bug"],"text":"Web3.JS does not care about extra fields on transaction objects, see https://github.com/ethereum/go-ethereum/issues/15628 for a scenario where this can lead to problems. \r\n\r\nParticularly if there is a field `input` which is used in place of `data`. \r\n\r\nParity does not allow extra fields, Geth explicitly checks if `input` is present, and of so, uses that as `data`. If both are present, an error is prodiced. ```\r\n```javascript\r\n\r\nvar Web3EthAccounts = require('web3-eth-accounts');\r\nvar account = new Web3EthAccounts('ws://localhost:8546');\r\n\r\n// JS uses `data`\r\n> account.signTransaction({'nonce':0, \"value\":0,\"gas\":21000,\"gasPrice\":0, \"chainId\":1,\"data\":\"0xff\"},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\n{ messageHash: '0xa807646cb0d1811a3f4a8055d1137e12e0b21b0b1608e27ef54c4962406ab5e3',\r\n  v: '0x26',\r\n  r: '0x7d4824225b3ceff1bac6d2ad5a2fb71cdeb5681936b67ff33321e49dcf4fe94f',\r\n  s: '0x6c9835d05bed94b33f96b3eaba2e3f51666fa2fa5c3ef5fc6a199444a6d85605',\r\n  rawTransaction: '0xf84c8080825208808081ff26a07d4824225b3ceff1bac6d2ad5a2fb71cdeb5681936b67ff33321e49dcf4fe94fa06c9835d05bed94b33f96b3eaba2e3f51666fa2fa5c3ef5fc6a199444a6d85605' }\r\n\r\n// JS silently ignores `input`\r\n\r\n> account.signTransaction({'nonce':0, \"value\":0,\"gas\":21000,\"gasPrice\":0, \"chainId\":1,\"input\":\"0xff\"},\"0x5384837ece911af85b8b2f2a0e6fe73f5f2add257fc25e1efbeebd4ee72226b7\")\r\n{ messageHash: '0xc1cdfb8128c3ca12f0448617d20222313b052291d2f2a1b1cc492b3994ebfd78',\r\n  v: '0x26',\r\n  r: '0x7b1dcad9fe49d3f88cd3c8bd76d8b9e6ef657da10310446f14dcb8a017aa79ea',\r\n  s: '0x35908414bccc859ecd4691c0c37dea7d72c71d44f4125051f12f9d54436fc753',\r\n  rawTransaction: '0xf84b808082520880808026a07b1dcad9fe49d3f88cd3c8bd76d8b9e6ef657da10310446f14dcb8a017aa79eaa035908414bccc859ecd4691c0c37dea7d72c71d44f4125051f12f9d54436fc753' }\r\n\r\n```"},{"labels":["bug"],"text":"```\r\n// npm i -S web3@1.0.0-beta.29\r\n// npm i -S ganache-core\r\n\r\nconst ganache = require('ganache-core')\r\nconst Web3 = require('web3')\r\nconst web3 = new Web3(ganache.provider())\r\n\r\nvoid async function main() {\r\n\r\n  const account = web3.eth.accounts.privateKeyToAccount(web3.utils.randomHex(32))\r\n\r\n  const tx = {\r\n    to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\r\n    value: '1000000000',\r\n    gas: 2000000\r\n  }\r\n\r\n  const stx = await web3.eth.accounts.signTransaction(tx, account.privateKey)\r\n  console.log(stx)\r\n\r\n}().catch(_1 => console.error(_1.stack))\r\n```\r\n\r\nRunning above code will give *random* results:\r\n\r\n```\r\n{ messageHash: '0x3bdbdaf7a04a7a41022369aee73d768203481fabdbaa5a0ca3f2e29715d1ccc3',\r\n  v: undefined,\r\n  r: undefined,\r\n  s: undefined,\r\n  rawTransaction: '0xf96f.8808504a817c800831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008085.82c28464040fa026285d7c95de32b1d45b70c2db83a4bfb8a3a454c23dd0857bfca6a9cf1477b8a0201193635ee090013b2dee2e9199e02705f52791fed60f25ccefcac3a9d58e90' }\r\n```\r\nAbove result is completely incorrect, there are dots in the transaction, undefined etc.\r\n\r\n```\r\n{ messageHash: '0xf523118727591dfae42787c3ca5290f854fc53b8a9fdc871737490316ff9d2fb',\r\n  v: '0x.82c28461f',\r\n  r: '0x1b30f5ea6c19d449c2a501664d5335a303831817b20ca341bc657eca06b9159d3016e28600302612be6be100896340bf2f4ab9d39663f7ccb2e744002',\r\n  s: undefined,\r\n  rawTransaction: '0xf96f.8808504a817c800831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008085.82c28461fbd4a0813dd4fbd1b30f5ea6c19d449c2a501664d5335a303831817b20ca341bc657eca06b9159d3016e28600302612be6be100896340bf2f4ab9d39663f7ccb2e744002' }\r\n```\r\nsimilar to above, dot's in hex strings.\r\n\r\n```\r\nTypeError: hex.startsWith is not a function\r\n    at trimLeadingZero (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/src/index.js:45:23)\r\n    at signed (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/src/index.js:177:16)\r\n    at /Users/mirek/ab/sign/node_modules/web3-eth-accounts/src/index.js:202:16\r\n    at tryCatcher (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/util.js:16:23)\r\n    at Promise._settlePromiseFromHandler (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:497:31)\r\n    at Promise._settlePromise (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:555:18)\r\n    at Promise._settlePromise0 (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:600:10)\r\n    at Promise._settlePromises (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:683:18)\r\n    at Promise._fulfill (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:624:18)\r\n    at PromiseArray._resolve (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise_array.js:125:19)\r\n    at PromiseArray._promiseFulfilled (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise_array.js:143:14)\r\n    at Promise._settlePromise (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:560:26)\r\n    at Promise._settlePromise0 (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:600:10)\r\n    at Promise._settlePromises (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/promise.js:683:18)\r\n    at Async._drainQueue (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/async.js:125:16)\r\n    at Async._drainQueues (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/async.js:135:10)\r\n    at Immediate.Async.drainQueues [as _onImmediate] (/Users/mirek/ab/sign/node_modules/web3-eth-accounts/node_modules/bluebird/js/release/async.js:16:14)\r\n    at runCallback (timers.js:756:18)\r\n    at tryOnImmediate (timers.js:717:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:697:5)\r\n```\r\nrandomly it'll throw this exception instead."},{"labels":["bug"],"text":"I'm subscribing to token transfer events for OMG using the code below\r\n```     \r\n   let contract = new web3.eth.Contract(this.abi, this.omgContractAddress);    \r\n        contract.events.Transfer({}, (err,data) => {\r\n            if(err)\r\n                console.error(err)\r\n            if(data)\r\n                  console.log(`OMG Transfer: block:${data.blockNumber} ${data.returnValues.to} received ${data.returnValues.value/1000000000000000000}. txHash:${data.transactionHash}`);\r\n        });\r\n```\r\n\r\nThis is working and logs to the console however it does not take long for a missing transfer to become evident:\r\n\r\n>OMG Transfer: block:4979638 0x16ae5217Fa04E9827508900C1C2f64f8EF91183b received 29.36. txHash:0xa55bc6b01048b4ec161cc8ca3bd119234a08aaa54e4a4f852d2bfe12885ca566\r\n>OMG Transfer: block:4979643 0xAC949Fd4c2204A19eA7d947c2e2841F3B0433A7f received 21.39896667. txHash:0x130a855aa470dc519d294871fc89349985d6f6465d6ac0a03738c2c1e08d7a05\r\n>**missing from block 4979644 0x0b184d2aa2193ea492a79ed894b2bee14cc7321e95038f54f98f1dab2d60befd from block **\r\n>OMG Transfer: block:4979646 0x06d58A4A17301402b216B5AEa613aEa99E78A5D9 received 5338.28022204. txHash:0x07bf2db1d62e2b60d19253fec9d0fdef2208baa6f6d19e2649b846b3450268b5\r\n\r\nYou can just run it from the latest block to see this behaviour.\r\n\r\nInteresting if you call `getPastEvents` then the missing Transfers from above *are* present"},{"labels":["bug",null],"text":"If the network id used with Geth (and consequently the chainId used in genesis.json) is set to an integer with an odd number of digits, every transaction called through Web3 will result in the following error:\r\n\r\n```\r\ninvalid argument 0: json: cannot unmarshal hex string of odd length into Go value of type hexutil.Bytes\r\n      at Object.ErrorResponse (node_modules\\web3-core-helpers\\src\\errors.js:29:16)\r\n      at Object.<anonymous> (node_modules\\web3-core-requestmanager\\src\\index.js:137:36)\r\n      at node_modules\\web3-providers-ws\\src\\index.js:76:44\r\n      at Array.forEach (<anonymous>)\r\n      at W3CWebSocket.WebsocketProvider.connection.onmessage (node_modules\\web3-providers-ws\\src\\index.js:53:36)\r\n      at W3CWebSocket._dispatchEvent [as dispatchEvent] (node_modules\\yaeti\\lib\\EventTarget.js:107:17)\r\n      at W3CWebSocket.onMessage (node_modules\\websocket\\lib\\W3CWebSocket.js:234:14)\r\n      at WebSocketConnection.<anonymous> (node_modules\\websocket\\lib\\W3CWebSocket.js:205:19)\r\n      at WebSocketConnection.processFrame (node_modules\\websocket\\lib\\WebSocketConnection.js:547:26)\r\n      at node_modules\\websocket\\lib\\WebSocketConnection.js:321:40\r\n      at _combinedTickCallback (internal/process/next_tick.js:131:7)\r\n      at process._tickCallback (internal/process/next_tick.js:180:9)\r\n```\r\nIt seems to me that the library is seeing an integer value as a hex value. This does not occur in the Mist wallet with the same node, so it has to be a Web3 error.\r\n\r\nHaving a chainId in the genesis.json with an odd number of digits and a network id with an even number of digits will not cause this error, but will cause other errors in a different process.\r\n\r\nWindows 10 x64\r\nweb3 1.0.0-beta.26\r\nGeth 1.7.3 stable"},{"labels":[null,"bug"],"text":"when i use web3.eth.filter as bellow:\r\n\r\n      var options = {\r\n        fromBlock: 0,\r\n        toBlock: 'latest',\r\n        topics: [],\r\n        address: ['654d0482c7d06d36384bfa8bbb30c5c4c4729364']\r\n      }\r\n\r\n      filter = web3.eth.filter(options)\r\n      filter.watch(function (error, log) {\r\n        if (error) {\r\n          console.error(error)\r\n        } else {\r\n          console.log(log)\r\n        }\r\n      })\r\n    }\r\n\r\n    filter.get(function (error, logs) {\r\n      if (error) {\r\n        console.error(error)\r\n      } else {\r\n        console.log(logs)\r\n      }\r\n    })\r\n\r\nbut i got:\r\n**Error: [ethjs-query] while formatting inputs '[{\"fromBlock\":\"0x0\",\"toBlock\":\"0x17b759\",\"address\":[\"0x654d0482c7d06d36384bfa8bbb30c5c4c4729364\"],\"topics\":[]}]' for method 'getLogs' error: Error: [ethjs-format] hex string '0x654d0482c7d06d36384bfa8bbb30c5c4c4729364' must be an alphanumeric 42 utf8 byte hex (chars: a-fA-F) string, is 0 bytes**\r\n    at Object.InvalidResponse (app.js:7314)\r\n    at app.js:52118\r\n    at inpage.js:9909\r\n    at completeRequest (inpage.js:9960)\r\n    at inpage.js:683\r\n    at replenish (inpage.js:1203)\r\n    at iterateeCallback (inpage.js:1193)\r\n    at inpage.js:1168\r\n    at inpage.js:9837\r\n    at inpage.js:9933\r\n\r\nany idea about this?"},{"labels":[null,"bug"],"text":"Consider:\r\n```\r\n// SalaryInfo.sol\r\ncontract SalaryInfo {\r\n    struct User {\r\n        uint salaryId;\r\n        string name;\r\n    }\r\n    User[] public users;\r\n\r\n    function getUser(uint index) public constant returns(uint id, string name) {\r\n        return (\r\n           users[index].salaryId, \r\n           users[index].name);\r\n    }\r\n}\r\n```\r\n\r\nReturns: \r\n\r\n```\r\n> salaryInfo.getUser(0)\r\n[123, \"User 123\"]\r\n```\r\n\r\nWould be nice if when making a function call instead of returning an array with indices as seen above, it returns key:value pairs for the properties with the _value_ of the `name` key found in the contract abi in the outputs section of a given function.\r\n\r\nFor example: \r\n```\r\n// ..abi\r\n {\r\n  \"constant\": true,\r\n      \"inputs\": [],\"name\": \"getUser\",\r\n      \"outputs\": [\r\n        {\r\n          \"name\": ***\"id\"***,\r\n          \"type\": \"uint\"\r\n        },\r\n        {\r\n          \"name\": ***\"name\"***,\r\n          \"type\": \"string\"\r\n        }\r\n  ]\r\n}\r\n```\r\nWould return instead as:\r\n\r\n```\r\n> salaryInfo.getUser(0)\r\n{\"id\":123, \"name\":\"User123\"}\r\n```"},{"labels":["bug",null],"text":"I am signing and calling a `transfer` method on an ERC20 contract like so:\r\n```javascript\r\nweb3.eth.accounts.signTransaction(tx, privateKey).then(signed => {\r\n    console.log('signed transaction', signed);\r\n\r\n    var transaction = web3.eth.sendSignedTransaction(signed.rawTransaction);\r\n\r\n    transaction.on('confirmation', (confirmationNumber, receipt) => {\r\n      console.log('confirmation', confirmationNumber);\r\n    });\r\n\r\n    transaction.on('transactionHash', hash => {\r\n      console.log('hash', hash);\r\n    });\r\n\r\n    transaction.on('receipt', receipt => {\r\n      console.log('reciept', receipt);\r\n      res.json({ receipt });\r\n    });\r\n\r\n    transaction.on('error', console.error);\r\n});\r\n```\r\nThe transaction actually works just fine but it fails around here:\r\n```\r\nutils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);\r\n```\r\nI dug in a bit and added some logging and it looks like some code is polling on `getTransactionReceipt` from the server which seems to fail when called for a pending transaction:\r\n```\r\nfailed Error: Returned error: unknown transaction\r\n    at Object.ErrorResponse (<omitted>/node_modules/web3-core-helpers/src/errors.js:29:16)\r\n    at <omitted>/node_modules/web3-core-requestmanager/src/index.js:137:36\r\n    at XMLHttpRequest.request.onreadystatechange (<omitted>/node_modules/web3-providers-http/src/index.js:64:13)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (<omitted>/node_modules/xhr2/lib/xhr2.js:64:18)\r\n    at XMLHttpRequest._setReadyState (<omitted>/node_modules/xhr2/lib/xhr2.js:354:12)\r\n    at XMLHttpRequest._onHttpResponseEnd (<omitted>/node_modules/xhr2/lib/xhr2.js:509:12)\r\n    at IncomingMessage.<anonymous> (<omitted>/node_modules/xhr2/lib/xhr2.js:469:24)\r\n    at IncomingMessage.emit (events.js:164:20)\r\n    at endReadableNT (_stream_readable.js:1062:12)\r\n    at process._tickCallback (internal/process/next_tick.js:152:19)\r\n```\r\nI'm using geth and node locally to run the transaction and checking the balance appears that the transaction actually completed. I also get a hash of the transaction and see the log in geth for submitting the transaction but web3 never gives me a confirmation."},{"labels":["bug"],"text":"used web3.js 1.0.0-beta.26 with Parity 1.8.4. \r\n\r\nSent a not-signable transaction via websocket provider interface, expecting it to time out after x blocks read, but didn't happen... \r\n\r\nparity showed it received the request, but never responded, and web3 never timeout...\r\n\r\nAfter digging further realized the `startWatching` is only invoked in `_confirmTransaction`, which only called after the provider responded the initial sendTransaction(), which parity never did... While there might be a parity problem that it should have responded something, nevertheless, web3 should be able to act properly by timing out after x blocks as `startWatching` intended... \r\n\r\nCan `startWatching` start prior to provider's initial response?"},{"labels":["bug"],"text":"Hello,\r\n\r\nI am using \"web3\": \"~1.0.0-beta.26\" to make connection to JPMorgan Quorum (https://github.com/jpmorganchase/quorum). Quorum network is configured to use Raft consensus algorithm. Raft algorithm is making changes to block timestamp value, so it is larger (Unix nanoseconds - 1506355254821575394 e.g.) then default - https://github.com/jpmorganchase/quorum/issues/190. Due to this, when I am trying to deploy contract, using WebSocket provider, I receive error from bigNumber.js library: \r\n**Error: Number can only safely store up to 53 bits**\r\n\r\nThis error is caused by https://github.com/ethereum/web3.js/blob/develop/lib/web3/formatters.js#L171; looks like Raft timestamp is too big for converting it to the number. \r\n\r\nTimestamp value from failing block object:\r\n```json\r\n{ \r\n\"timestamp\": \"0x14fe06494f652193\"\r\n}\r\n```\r\n\r\nAs I understood outputBlockFormatter is only used during WebSocket connection (ws provider), Rpc connection (http provider) is deploying fine. It was OK to use only RPC connection, but, with recent updates, subscription is possible only using WebSocket. \r\n\r\nI understand, that nonstandard ethereum networks is not Your main field; however, would be cool to hear some thoughts about this issue."},{"labels":["bug",null],"text":"I'm using web3@1.0.0-beta.24 to replicate the example http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#id6 on testrpc:\r\n\r\n```js\r\nweb3.eth.accounts.signTransaction({to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\r\n    value: '1000000000',\r\n    gas: 2000000\r\n}, '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318').then(console.log);\r\n```\r\n\r\nthe output I get is:\r\n\r\n```js\r\n{ messageHash: '0x9ce21594b026a4c3fc09dff6e152f69b9beb44bd31549b49c8124b3db831fc27',\r\n  v: '0x.82bf6b784',\r\n  r: \r\n   [ '0x0aaf3477fff968b4aa173d94f4e0d74c6a9ffdc1985febea5ad447f52c45c3196a03d1bcc7efbc9902c5' ],\r\n  s: '0x3d',\r\n  rawTransaction: '0xf96f.8808504a817c800831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008085.82bf6b784e7aa0aaf3477fff968b4aa173d94f4e0d74c6a9ffdc1985febea5ad447f52c45c3196a03d1bcc7efbc9902c53d4406c6b69c2c6d23b5ac4c29a68ea63a342433bde32a7' }\r\n```\r\n\r\nwhich is not a valid signature. If I manually specify the mainnet `chainId` then I don't have this problem:\r\n\r\n```js\r\nweb3.eth.accounts.signTransaction({\r\n    to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\r\n    value: '1000000000',\r\n    gas: 2000000,\r\n    chainId: 0\r\n}, '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318').then(console.log);\r\n```\r\n\r\n```js\r\n{ messageHash: '0x6ef4e89eab7867ddf69fae20dd218dbfa337fa8e4d68ce6dc3fcad63e17fdd72',\r\n  v: '0x24',\r\n  r: '0x1b428275439f5d12a85dd70e919b17994abe4d3b2ba3cfd1e370c1a1c86d2a24',\r\n  s: '0x4eebdddb5681d836fb938179d0002b12359c9b2287a8d6ffb156c15de9146251',\r\n  rawTransaction: '0xf869808504a817c800831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008024a01b428275439f5d12a85dd70e919b17994abe4d3b2ba3cfd1e370c1a1c86d2a24a04eebdddb5681d836fb938179d0002b12359c9b2287a8d6ffb156c15de9146251' }\r\n```"},{"labels":["bug"],"text":"I cannot get `web3.eth.abi.decodeParameters()` to work when one of the types is `uint256[5][]`, i.e. a dynamic array of static arrays of uint256's. As a simple example:\r\n\r\n```javascript\r\nvar web3EthAbi = require('web3-eth-abi');\r\n\r\nvar addressArray = [\r\n  [\r\n    '0x9B305E6C0d77a6Eca5296Efd818e65b2a7458179',\r\n    '0xBC63aCdfafA94bd4D8C2Bb7A8552281f107242c0',\r\n    '0xbdbc010651becC4709bae06327a51f97dCd4989B',\r\n    '0x858140dA0FD83836932DFF6D69Cc2151D724776C',\r\n    '0x539EfE69bCDd21a83eFD9122571a64CC25e0282b'\r\n  ],\r\n  [\r\n    '0x9B305E6C0d77a6Eca5296Efd818e65b2a7458179',\r\n    '0xBC63aCdfafA94bd4D8C2Bb7A8552281f107242c0',\r\n    '0xbdbc010651becC4709bae06327a51f97dCd4989B',\r\n    '0x858140dA0FD83836932DFF6D69Cc2151D724776C',\r\n    '0x539EfE69bCDd21a83eFD9122571a64CC25e0282b'\r\n  ]\r\n];\r\n\r\nvar uint256Array = [\r\n  [25, 50, 60, 8000000, 10],\r\n  [12, 50, 60, 1222222, 100],\r\n  [25, 21, 60, 9000000, 1000],\r\n  [12, 50, 60, 1444444, 10000],\r\n  [25, 50, 60, 7000000, 100000001]\r\n];\r\n\r\nvar encodedComposite = web3EthAbi.encodeParameters(['address[5][]', 'uint256[5][]'], [addressArray, uint256Array]);\r\n\r\nvar decodedComposite = web3EthAbi.decodeParameters(['address[5][]', 'uint256[5][]'], encodedComposite);\r\n\r\nconsole.log(decodedComposite);\r\n```\r\n\r\nwhich outputs:\r\n\r\n```\r\nResult {\r\n  '0':\r\n   [ [ '0x9B305E6C0d77a6Eca5296Efd818e65b2a7458179',\r\n       '0xBC63aCdfafA94bd4D8C2Bb7A8552281f107242c0',\r\n       '0xbdbc010651becC4709bae06327a51f97dCd4989B',\r\n       '0x858140dA0FD83836932DFF6D69Cc2151D724776C',\r\n       '0x539EfE69bCDd21a83eFD9122571a64CC25e0282b' ],\r\n     [ '0x9B305E6C0d77a6Eca5296Efd818e65b2a7458179',\r\n       '0xBC63aCdfafA94bd4D8C2Bb7A8552281f107242c0',\r\n       '0xbdbc010651becC4709bae06327a51f97dCd4989B',\r\n       '0x858140dA0FD83836932DFF6D69Cc2151D724776C',\r\n       '0x539EfE69bCDd21a83eFD9122571a64CC25e0282b' ] ],\r\n  '1': [],\r\n  __length__: 2 }\r\n```\r\n\r\nI've verified that `web3EthAbi.encodeParameter('uint256[5][]', uint256Array)` and `web3EthAbi.decodeParameter('uint256[5][]', encodedUint256Array)` work as intended. I'm having trouble specifically with `decodeParameters()` when one of the types is `uint256[5][]`.\r\n\r\nThe above code is a contrived example, but I have a real world use case for this so I'd really appreciate any help on this. I'm trying to decode transaction input data for transactions sent through the 0x Exchange contract, specifically \"batch\" methods (e.g. batchFillOrders) - see Input Data for https://etherscan.io/tx/0xa1495826e30dbaa49dde788b165304a4cfa1e5ef881dfe6723f71ee84ff97a2f. When I try to decode the input data for that transaction using `web3.eth.abi.decodeParameters()`, I get the following error message:\r\n\r\n```\r\nError: Couldn't decode uint256 from ABI: 0x00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fa45c6991a2c3d74ada3a279e21135133ce3da8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f4980000000000000000000000002956356cd2a2bf3202f771f50d3d14a367b48070000000000000000000000000eb71bad396acaa128aeadbc7dbd59ca32263de010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000361a08405e8fd7fff9c0000000000000000000000000000000000000000000000008572e50d6027ff9c000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059dae5d2ac086974d44e92bc94b2a0a72a31320eda281cbd0127a62ee6de30020de6a32a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000d49829b75c0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000001701c22aebd65090a07c26948e2c2ccb8d980b649ab1cdabff1a7a3d14babde5b00000000000000000000000000000000000000000000000000000000000000015bb1054d1cfab5b8ef2e7c366a778f1809a3a93ed6634badc4e57ab25205a425\r\n    at SolidityTypeUInt.formatOutputUInt [as _outputFormatter] (/Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/formatters.js:162:15)\r\n    at SolidityTypeUInt.SolidityType.decode (/Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/type.js:252:17)\r\n    at /Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/type.js:234:34\r\n    at SolidityTypeUInt.SolidityType.decode (/Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/type.js:238:11)\r\n    at /Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/type.js:216:34\r\n    at SolidityTypeUInt.SolidityType.decode (/Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/type.js:220:11)\r\n    at /Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/index.js:327:49\r\n    at Array.forEach (<anonymous>)\r\n    at ABICoder.decodeParameters (/Users/user/Documents/data-reader/node_modules/web3-eth-abi/src/index.js:326:13)\r\n    at Object.decodeInput (/Users/user/Documents/data-reader/index.js:38:23)\r\n    at testInput (/Users/user/Documents/data-reader/scratch.js:19:34)\r\n    at <anonymous>\r\n```\r\n\r\nI've tried every ABI decoder on NPM I could find, and then I jumped into the web3js 1.0 beta code directly (https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-abi/src/index.js#L309), and I just can't get it to decode. I think there may be an issue in https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-abi/src/type.js#L200, and I'm willing to dig in and see what else I can find, but if anyone can point me in the right direction on this I would greatly appreciate it!"},{"labels":["bug",null],"text":"When I call sendSignedTransaction it throws: `invalid argument 0: json: cannot unmarshal hex string of odd length into Go value of type hexutil.Bytes`. I'm using geth with a private chain (with the -dev flag). The web3.js was installed with npm and the version is: ^1.0.0-beta.24.\r\nI get the private key from the decrypt method and using the JSON from the keystore. start is the contract function that I'm calling. It has one argument (an int) and it is not payable. I think there might something wrong with the rawTransaction that is returned with the signTransaction method.\r\n\r\n```javascript\r\nvar admin = \"0x2694fC48505267C8159850aC7Df2c280a17d2C46\";\r\nvar contract_address = \"0x19496da364962A5Ac96139775F8d50d5d31605f9\";\r\nvar tx = {\r\n    from: admin,\r\n    to: contract_address,\r\n    gas: 184000,\r\n    data: start.encodeABI(),\r\n    chainId: \"1337\"\r\n};\r\nweb3.eth.accounts.signTransaction(tx, private_key).then((hash) =>{\r\n    web3.eth.sendSignedTransaction(hash.rawTransaction).then((receipt) =>{\r\n        resolve();\r\n    }, (error) =>{\r\n        console.log(error);\r\n        reject(500);\r\n    });\r\n}, (error) =>{\r\n    reject(500);\r\n});\r\nhash.rawTransaction == \"0xf986.84d808302cec09419496da364962a5ac96139775f8d50d5d31605f980a495805dad000000000000000000000000000000000000000000000000000000000000001481.8a95a00f9daa90306d103f908f6c8064a5ce005e7608ea14ddf469a73943e2a2ea54b5a012de7959ceee8d3d685d6622d77949a879b364165bcfd6f9fea88c4d1ea51aa3\"\r\n```\r\n            "},{"labels":["bug"],"text":"I can deploy a contract using `web3.eth.Contract.deploy` as per the first test in the below test suit.\r\nI get an `invalid sender` error if I sign the transaction using `web3.eth.account.signTransaction` and then send the locally signed transaction using `web3.eth.sendSignedTransaction`. See the second test in the below as an example.\r\n\r\nI don't get an error if I call `web3.eth.signTransaction` which signs the transaction on the node and then calls `web3.eth.sendSignedTransaction`.\r\n\r\nI thought the issue might be fixed with https://github.com/ethereum/web3.js/issues/932 in beta-24 release but it wasn't. That issue fixed locally signing transactions that send Eth but not smart contract transactions.\r\n\r\nThe below are tests for contract deploy. I get the same error for calling a function on a smart contract using `web3.eth.account.signTransaction`. For example, calling transfer in the below MyToken contract.\r\n\r\nI also get the same `invalid sender` error when using `ethereumjs-tx` to locally sign a transaction to deploy a contract or invoke a function on the contract.\r\n\r\nVersions\r\nweb3: 1.0.0-beta.24\r\nnode: v8.7.0\r\ngeth: 1.7.2\r\n\r\n```js\r\nimport * as Web3 from 'web3';\r\nimport * as Tx from 'ethereumjs-tx';\r\nimport * as solc from 'solc';\r\nimport {isObject} from \"util\";\r\n\r\nconst web3: Web3 = new Web3(\"ws://localhost:8647\"),\r\n    contractOwner = '0x0013a861865d784d97c57e70814b13ba94713d4e';\r\n\r\ndescribe(\"compile, deploy and transfer min token\", async ()=>\r\n    {\r\n        const sourceCode =\r\n            'contract MyToken {\\n' +\r\n            '    mapping (address => uint256) public balanceOf;\\n' +\r\n            '    function MyToken(uint256 initialSupply) public {\\n' +\r\n            '        balanceOf[msg.sender] = initialSupply;\\n' +\r\n            '    }\\n' +\r\n            '    function transfer(address _to, uint256 _value) public {\\n' +\r\n            '        require(balanceOf[msg.sender] >= _value);\\n' +\r\n            '        require(balanceOf[_to] + _value >= balanceOf[_to]);\\n' +\r\n            '        balanceOf[msg.sender] -= _value;\\n' +\r\n            '        balanceOf[_to] += _value;\\n' +\r\n            '    }\\n' +\r\n            '}',\r\n            compilerOutput = solc.compile(sourceCode, 1),\r\n            jsonInterface = JSON.parse(compilerOutput.contracts[\":MyToken\"].interface),\r\n            contractData = '0x' + compilerOutput.contracts[\":MyToken\"].bytecode;\r\n\r\n        let contractAddress: string;\r\n\r\n        describe(\"deploy\", ()=>\r\n        {\r\n            test(\"using web3.eth.contract.deploy.send\", async()=>\r\n            {\r\n                expect.assertions(3);\r\n\r\n                const contract = new web3.eth.Contract(jsonInterface);\r\n\r\n                await contract.deploy({\r\n                    data: contractData,\r\n                    arguments: [10000]\r\n                }).send({\r\n                    from: contractOwner,\r\n                    gasPrice: 900000,\r\n                    gasLimit: 200000\r\n                })\r\n                    .on('receipt', (receipt: object) => {\r\n                        console.log(`Created     contract with address ${receipt.contractAddress} using ${receipt.gasUsed} gas`);\r\n\r\n                        contractAddress = receipt.contractAddress;\r\n\r\n                        expect(isObject(receipt)).toBeTruthy();\r\n                        expect(typeof receipt.contractAddress == \"string\").toBeTruthy();\r\n                        expect(receipt.contractAddress).toHaveLength(42);\r\n                    });\r\n\r\n            }, 30000);\r\n\r\n            test(\"using web3.eth.account.signTransaction and then web3.eth.sendSignedTransaction\", async()=>\r\n            {\r\n                expect.assertions(3);\r\n\r\n                const txOptions = {\r\n                    nonce: await web3.eth.getTransactionCount(contractOwner),\r\n                    chainId: await web3.eth.net.getId(),\r\n                    gasPrice: 200000,\r\n                    gasLimit: 900000,\r\n                    from: contractOwner,\r\n                    data: contractData\r\n                };\r\n\r\n                console.log(txOptions);\r\n\r\n                const account = web3.eth.accounts.privateKeyToAccount('0x146b37e6a2eb2b3593bd5d5da7c71232fc9548a150cd2507d322f8e0c0cdd2f5');\r\n\r\n                const signedTx = await account.signTransaction(txOptions);\r\n\r\n                console.log(signedTx);\r\n\r\n                expect(signedTx.rawTransaction).toBeDefined();\r\n\r\n                await web3.eth.sendSignedTransaction(signedTx.rawTransaction)\r\n                    .on('receipt', (receipt: object) =>\r\n                    {\r\n                        console.log(receipt);\r\n                        expect(isObject(receipt)).toBeTruthy();\r\n                        expect(receipt.blockNumber).toBeGreaterThanOrEqual(0);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n```"},{"labels":["bug"],"text":"`Version: 1.0.0-beta.23`\r\n\r\nWhen the result of web3.eth.accounts.signTransaction contains a signature with an R or S value starting with leading zeroes and the rawTransaction is then passed to web3.eth.sendSignedTransaction, this returns \r\n\r\n`(node:66148) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Error: Returned error: rlp: non-canonical integer (leading zero bytes) for *big.Int, decoding into (types.Transaction)(types.txdata).S`\r\n\r\nBypassed this in my test application (private chain) by adding 1 Wei to my tx value and resigning the tx until the signature no longer contains leading zeroes, which fixes the issue for now but obviously is not a desirable solution."},{"labels":[null,"bug"],"text":"I'm running:\r\n\r\n```\r\nNode v8.2.1\r\nweb3 0.20.1\r\nGeth/v1.7.1-stable-05101641/darwin-amd64/go1.9.1 - with: geth --rinkeby --cache=1024 --datadir ~/Library/Ethereum/rinkeby/ --fast --rpc --rpcapi=\"db,eth,net,web3,personal,web3\"  --ws\r\n```\r\n\r\nThe code is rather simple, we've got a contract running in Rinkeby and then i try reading about 2000 values from there, but it gets stuck after about 460 calls (it varies a bit). I notice the process' CPU get stuck at 100% until i kill the process.\r\n\r\n```js\r\nconst Web3 = require(\"web3\");\r\n\r\nconst nodeAddress = \"http://localhost:8545\";\r\n\r\nconst abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"kittyCount\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\"\r\n      }\r\n    ],\r\n    payable: false,\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\"\r\n      }\r\n    ],\r\n    name: \"kittyIndexToOwner\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"address\"\r\n      }\r\n    ],\r\n    payable: false,\r\n    type: \"function\"\r\n  }\r\n];\r\n\r\nconsole.log(\"-- creating new instance\");\r\nconst web3 = new Web3();\r\n// require a local full node to be running\r\nweb3.setProvider(new web3.providers.HttpProvider(nodeAddress));\r\nconst Contract = web3.eth.contract(abi);\r\nconst instance = Contract.at(\"0xc211d5b50f0d2ea2926b428af58117942a21c724\");\r\n\r\nasync function run() {\r\n  const n = instance.kittyCount();\r\n  console.log(\"kittens:\", n.toNumber());\r\n  // get who ows who\r\n  const kittyToOwner = new Array(n).fill(0);\r\n  for (let i = 1; i <= n; i++) {\r\n    kittyToOwner[i] = await instance.kittyIndexToOwner(i);\r\n    console.log(\"owner..\", i);\r\n  }\r\n  process.exit(0);\r\n}\r\n\r\nrun().catch(console.error);\r\n```\r\n  "},{"labels":["bug",null],"text":"# **Steps to reproduce the problem:**\r\n1. Clone any boilerplate with TypeScript/Webpack. For example, this one:\r\nhttps://github.com/rokoroku/react-redux-typescript-boilerplate\r\n```\r\ngit clone https://github.com/rokoroku/react-redux-typescript-boilerplate.git\r\ncd react-redux-typescript-boilerplate\r\n```\r\n2. Install all dependencies:\r\n```\r\nnpm install\r\n```\r\n3. Make sure that it is working correctly:\r\n```\r\nnpm start\r\n```\r\n4. Install web3:\r\n```\r\nnpm install web3\r\n```\r\n5. Add the following lines to file <code>src/index.tsx</code> somewhere before the <code>ReactDOM.render</code>:\r\n```Typescript\r\nimport * as Web3 from 'web3';\r\nconst wa = window as any;\r\nif (window.hasOwnProperty('web3')) {\r\n  wa.web3 = new Web3(wa.web3.currentProvider);\r\n} else {\r\n  wa.web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\n}\r\n```\r\n6. Start the application:\r\n```\r\nnpm start\r\n```\r\n\r\n# **Expected results:**\r\nIt shouldn't throw any errors.\r\n\r\n# **Actual results:**\r\nIt gives the following errors in console:\r\n```\r\nERROR in ./node_modules/scrypt/index.js\r\nModule not found: Error: Can't resolve './build/Release/scrypt' in '/Users/vguzev/Projects/test2/react-redux-typescript-boilerplate/node_modules/scrypt'\r\n @ ./node_modules/scrypt/index.js 3:19-52\r\n @ ./node_modules/scrypt.js/node.js\r\n @ ./node_modules/web3-eth-accounts/src/index.js\r\n @ ./node_modules/web3-eth/src/index.js\r\n @ ./node_modules/web3/src/index.js\r\n @ ./src/index.tsx\r\n @ multi (webpack)-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./index.tsx\r\n\r\nERROR in ./node_modules/got/index.js\r\nModule not found: Error: Can't resolve './package' in '/Users/vguzev/Projects/test2/react-redux-typescript-boilerplate/node_modules/got'\r\n @ ./node_modules/got/index.js 22:12-32\r\n @ ./node_modules/swarm-js/lib/files.js\r\n @ ./node_modules/swarm-js/lib/api-node.js\r\n @ ./node_modules/web3-bzz/src/index.js\r\n @ ./node_modules/web3/src/index.js\r\n @ ./src/index.tsx\r\n @ multi (webpack)-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./index.tsx\r\n\r\nERROR in ./node_modules/swarm-js/lib/api-node.js\r\nModule not found: Error: Can't resolve 'child_process' in '/Users/vguzev/Projects/test2/react-redux-typescript-boilerplate/node_modules/swarm-js/lib'\r\n @ ./node_modules/swarm-js/lib/api-node.js 5:20-44\r\n @ ./node_modules/web3-bzz/src/index.js\r\n @ ./node_modules/web3/src/index.js\r\n @ ./src/index.tsx\r\n @ multi (webpack)-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./index.tsx\r\n\r\nERROR in ./node_modules/got/index.js\r\nModule not found: Error: Can't resolve 'electron' in '/Users/vguzev/Projects/test2/react-redux-typescript-boilerplate/node_modules/got'\r\n @ ./node_modules/got/index.js 45:20-39\r\n @ ./node_modules/swarm-js/lib/files.js\r\n @ ./node_modules/swarm-js/lib/api-node.js\r\n @ ./node_modules/web3-bzz/src/index.js\r\n @ ./node_modules/web3/src/index.js\r\n @ ./src/index.tsx\r\n @ multi (webpack)-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./index.tsx\r\n```\r\n\r\nHere is the <code>package.json</code> that was generated:\r\n\r\n```json\r\n{\r\n  \"name\": \"typescript-react-redux-boilerplate\",\r\n  \"version\": \"1.0.0\",\r\n  \"private\": true,\r\n  \"description\": \"A frontend boilerplate with React, Redux and Typescript\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"start\": \"webpack-dev-server --debug --devtool cheap-module-source-map --output-pathinfo --history-api-fallback --hot --inline --progress --colors --port 3000 --open\",\r\n    \"build\": \"webpack -p --progress --colors\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"devDependencies\": {\r\n    \"@types/classnames\": \"2.2.3\",\r\n    \"@types/history\": \"4.6.0\",\r\n    \"@types/node\": \"8.0.26\",\r\n    \"@types/react\": \"16.0.5\",\r\n    \"@types/react-dom\": \"15.5.4\",\r\n    \"@types/react-redux\": \"5.0.6\",\r\n    \"@types/react-router\": \"4.0.15\",\r\n    \"@types/redux-actions\": \"1.2.8\",\r\n    \"@types/webpack\": \"3.0.10\",\r\n    \"@types/webpack-env\": \"1.13.0\",\r\n    \"awesome-typescript-loader\": \"^3.2.3\",\r\n    \"css-loader\": \"^0.28.7\",\r\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\r\n    \"file-loader\": \"^0.11.2\",\r\n    \"html-loader\": \"^0.5.1\",\r\n    \"html-webpack-plugin\": \"^2.30.1\",\r\n    \"postcss\": \"^6.0.10\",\r\n    \"postcss-browser-reporter\": \"^0.5.0\",\r\n    \"postcss-cssnext\": \"^3.0.2\",\r\n    \"postcss-import\": \"^10.0.0\",\r\n    \"postcss-loader\": \"^2.0.6\",\r\n    \"postcss-reporter\": \"^5.0.0\",\r\n    \"postcss-url\": \"^7.1.2\",\r\n    \"react-hot-loader\": \"^1.3.1\",\r\n    \"style-loader\": \"^0.18.2\",\r\n    \"typescript\": \"^2.5.2\",\r\n    \"url-loader\": \"^0.5.9\",\r\n    \"webpack\": \"^3.5.5\",\r\n    \"webpack-dev-server\": \"^2.7.1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"classnames\": \"^2.2.5\",\r\n    \"react\": \"^15.6.1\",\r\n    \"react-dom\": \"^15.6.1\",\r\n    \"react-redux\": \"^5.0.6\",\r\n    \"react-router\": \"^4.2.0\",\r\n    \"redux\": \"^3.7.2\",\r\n    \"redux-actions\": \"^2.2.1\",\r\n    \"web3\": \"^1.0.0-beta.23\"\r\n  }\r\n}\r\n```"},{"labels":["bug"],"text":"When calling `web3.eth.subscribe('logs', {fromBlock: 1823919})`, the sent request is:\r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 7,\r\n  \"method\": \"eth_getLogs\",\r\n  \"params\": [\r\n    {\r\n      \"fromBlock\": 1823919,\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nand parity returns the error: `Invalid params: invalid type: integer `1823919`, expected a block number or 'latest', 'earliest' or 'pending'.`\r\n\r\nIf I call `myContract.events.allEvents({fromBlock: 1823919})`, the sent request is:\r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 5,\r\n  \"method\": \"eth_getLogs\",\r\n  \"params\": [\r\n    {\r\n      \"fromBlock\": \"0x1bd4af\",\r\n      \"address\": myContract_address,\r\n      \"topics\": []\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nand the getLogs call is successfull."},{"labels":["bug"],"text":"Running geth with websocket:\r\n\r\n    geth --fast --cache=512 --ws --wsorigins=\"*\" --wsapi \"db,eth,net,ssh,miner,web3,personal,admin\"\r\n\r\nThen connecting with web3 in a Node.js app:\r\n\r\n    const Web3 = require('web3');\r\n\r\n    var web3 = new Web3(new Web3.providers.WebsocketProvider(\"ws://localhost:8546\"));\r\n\r\n    console.log(web3.version);\r\n\r\n    web3.eth.subscribe('pendingTransactions', function(err, res) {\r\n\t    console.log('Here')\r\n\t    console.log(err)\r\n\t    console.log(res)\r\n    }).on('data', function(transaction) {\r\n\t    console.log('Here 2')\r\n\t    console.log(transaction)\r\n    });\r\n\r\n\"Here\", \"Here 2\" do not print to the console. The subscription does not seem to activate, nothing is printed after the version prints to the console. `web3.version` and other web3 commands work fine.\r\n\r\n---\r\n\r\nGeth version: 1.7.1-stable\r\n\r\nWeb3 version: 1.0.0-beta.22"},{"labels":[null,null,"bug"],"text":"Ok, so this started as an [issue](https://github.com/paritytech/parity/issues/6531) I filled to Parity, but it turns out the fix should be made in `web3.js` instead.\r\n\r\nThere's a very subtle and hard to trace bug caused (for example) when you submit the contract bytecode data without the `0x` prefix. Sample code:\r\n\r\n```javascript\r\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\n\r\nlet compiledCode = solc.compile(code);\r\nlet abiDefinition = JSON.parse(compiledCode.contracts[':Voting'].interface);\r\nlet VotingContract = web3.eth.contract(abiDefinition);\r\nlet byteCode = compiledCode.contracts[':Voting'].bytecode;\r\n\r\nlet deployedContract = VotingContract.new(['Rama','Nick','Jose'],{data: byteCode, from: web3.eth.accounts[0], gas: 4700000});\r\n```\r\n\r\nThe last line fails because on the line before `solc` yields hex-encoded data without the `0x` prefix. Both Geth and TestingRPC implementations are flexible enough to accept that payload as is, even though it doesn't strictly conform to the standard, but when I tested this code against a Parity backend I got a very unhelpful `invalid params` exception.\r\n\r\nAn argument could be made to change the `solc` implementation to return an `0x`-prefixed string, but I think it would be best to add some code to the `web3.js` implementation to automatically do that prefixing when required. That is already the case for `parity.js`.\r\n\r\n**Note that nowhere in the JS API docs there's mention of how such data should be encoded**, the only guide is the JSONRPC documentation, which does ask for an `0x` prefix for all hex data, but the user cannot be expected to be well informed about the lower level protocol to use the higher level JS API. Since the JS API already performs type conversion whenever convenient, it should fall into its responsibilities to handle this detail as well. It would also be helpful for `web3.js` to give a meaningful warning in case the prefix is omitted (as it's more sensible to include it anyway)."},{"labels":["bug",null],"text":"Bytecode produced with a period in it.\r\n\r\nShould be able to replicate it with the code params below:\r\n```js\r\nsignTxParams = { \r\n    data: \"0x23123123123123123\",\r\n    gas: 42424242424242,\r\n    gasPrice: 42424242,\r\n    nonce: 1,\r\n    to: \"0xd8b0990c007ba1ad97b37c001d1f87044312162a\",\r\n    value: \"42424242\",\r\n    chainId: 1\r\n}\r\nprivateKey = \"0xef1ae7c6a04a3191b364c603f6f506938c98ec259597007300b42242f9fcc4b1\"\r\nsignedTx = web3.eth.accounts.signTransaction(signTxParams, privateKey)\r\n\r\nconsole.log(signedTx.rawTransaction);\r\n\r\n> \"0xf86b.80184028757b2862695a9e649b294d8b0990c007ba1ad97b37c001d1f87044312162a84028757b225a0254b9251405d5b83d688d0db794ef069fbb87a24d\"\r\n```\r\n\r\nBrowser : confirmed on Chrome & Safari\r\nWeb3.js Version : 1.0.0-beta.18\r\n\r\nNote: To be fair, I don't think the above `data` field is totally valid bytecode. Nonetheless, thought this errant period might still be noteworthy.\r\n"},{"labels":["bug"],"text":"I get \"TypeError: crypto.createDecipheriv is not a function\" when I try to do web3.eth.accounts.decrypt. A possible fix: https://github.com/nwjs/nw.js/issues/880\r\n\r\nERROR TypeError: crypto.createDecipheriv is not a function\r\n    at Accounts.webpackJsonp.../../../../web3-eth-accounts/src/index.js.Accounts.decrypt (index.js:252)\r\n    at FileReader.myReader.onloadend ("},{"labels":["bug"],"text":"For version 1.0.0-beta.21, autogenerated getters that are supposed to return strings return the number 32. e.g. the following.\r\n\r\n```\r\npragma solidity ^0.4.11;\r\n\r\ncontract MyContract {\r\n  string public name;\r\n\r\n  function MyContract(string _name) {\r\n    name = _name;\r\n  }\r\n}\r\n```\r\n\r\n`MyContract.methods.name().call()` => `32`\r\n\r\nEDIT:\r\n\r\nIt turns out the above is true only when method calls are concurrent.\r\n\r\n```\r\nreturn Promise.join(\r\n        Software.methods.method1().call(),\r\n        Software.methods.method2.call(),\r\n        Software.methods.method3().call()\r\n      ).spread((m1, m2, m3) => {\r\n        console.log(m1);\r\n        console.log(m2);\r\n        console.log(m3);\r\n      });\r\n```\r\n\r\nThe above yields 32, 0, 0 in output. Where m2 and m3 and uint256 typed and m1 is string typed.\r\n"},{"labels":["bug"],"text":"\r\n\r\n```\r\nC:\\Users\\Spader>npm install web3\r\nnpm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support\r\nnpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\r\n\r\n\r\n scrypt@6.0.3 preinstall C:\\Users\\Spader\\node_modules\\.staging\\scrypt-27aa434c\r\n> node node-scrypt-preinstall.js\r\n\r\n\r\n> scrypt@6.0.3 install C:\\Users\\Spader\\node_modules\\scrypt\r\n> node-gyp rebuild\r\n\r\n\r\nC:\\Users\\Spader\\node_modules\\scrypt>if not defined npm_config_node_gyp (node \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\\\..\\..\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild )\r\nWarning: Missing input files:\r\nC:\\Users\\Spader\\node_modules\\scrypt\\build\\..\\scrypt\\win\\include\\config.h\r\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\r\nMSBUILD : error MSB3411: Could not load the Visual C++ component \"VCBuild.exe\". If the component is not installed, eith\r\ner 1) install the Microsoft Windows SDK for Windows Server 2008 and .NET Framework 3.5, or 2) install Microsoft Visual\r\nStudio 2008.  [C:\\Users\\Spader\\node_modules\\scrypt\\build\\binding.sln]\r\nMSBUILD : error MSB3411: Could not load the Visual C++ component \"VCBuild.exe\". If the component is not installed, eith\r\ner 1) install the Microsoft Windows SDK for Windows Server 2008 and .NET Framework 3.5, or 2) install Microsoft Visual\r\nStudio 2008.  [C:\\Users\\Spader\\node_modules\\scrypt\\build\\binding.sln]\r\ngyp ERR! build error\r\ngyp ERR! stack Error: `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe` failed with exit code: 1\r\ngyp ERR! stack     at ChildProcess.onExit (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:276:23)\r\ngyp ERR! stack     at emitTwo (events.js:106:13)\r\ngyp ERR! stack     at ChildProcess.emit (events.js:191:7)\r\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)\r\ngyp ERR! System Windows_NT 10.0.14393\r\ngyp ERR! command \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\" \"rebuild\"\r\ngyp ERR! cwd C:\\Users\\Spader\\node_modules\\scrypt\r\ngyp ERR! node -v v6.11.0\r\ngyp ERR! node-gyp -v v3.4.0\r\ngyp ERR! not ok\r\nspader@1.0.0 C:\\Users\\Spader\r\n`-- (empty)\r\n\r\nnpm WARN spader@1.0.0 No repository field.\r\nnpm ERR! Windows_NT 10.0.14393\r\nnpm ERR! argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\" \"web3\"\r\nnpm ERR! node v6.11.0\r\nnpm ERR! npm  v3.10.10\r\nnpm ERR! code ELIFECYCLE\r\n\r\nnpm ERR! scrypt@6.0.3 install: `node-gyp rebuild'\r\nnpm ERR! Exit status 1\r\n```\r\n\r\n\r\nI've tried updating nodejs, npm, I've downloaded the windows SDK in the message, and visual studios. I have visual studios 2017 and 2015. I've tried npm install msvs=2008, and finally I tried switching over to linux. On ubuntu I get a different error, but still ultimately fails at \r\n\r\nnpm ERR! scrypt@6.0.3 install: `node-`node-scrypt-preinstall.js'\r\nnpm ERR! spawn ENOENT\r\n\r\nI don't think this is related to web3, but I can't install any ethereum packages, so can someone help me? \r\n\r\nI've been struggling with this for a week now and I don't know how to fix this. It looks like I may need a new computer to try programming some Dapps..."},{"labels":["bug",null],"text":"process count will increase when I execute web3.eth.getTransaction, and never decrease.\r\n\r\nfinally, my computer's process count is full so that I cannot open other app.\r\n\r\nps ax | wc -l"},{"labels":["bug",null],"text":"web3@1.0.0-beta.20\r\n\r\nIt seems `web3.eth.abi.decodeLog` doesn't handle cases when a string data in event log is empty, it throws:\r\n```\r\nUncaught Error: The parameter \"0x\" must be a valid HEX string.\r\n    at Object.hexToUtf8 (utils.js:186)\r\n    at SolidityTypeString.formatOutputString [as _outputFormatter] (formatters.js:209)\r\n    at type.js:246\r\n    at SolidityTypeString../node_modules/web3/packages/web3-eth-abi/src/types/type.js.SolidityType.decode (type.js:247)\r\n    at index.js:322\r\n    at Array.forEach (<anonymous>)\r\n    at ABICoder../node_modules/web3/packages/web3-eth-abi/src/index.js.ABICoder.decodeParameters (index.js:321)\r\n    at ABICoder../node_modules/web3/packages/web3-eth-abi/src/index.js.ABICoder.decodeLog (index.js:363)\r\n    at abi-decoder.js:181\r\n    at Array.map (<anonymous>)\r\n    at Object.decodeLogs (abi-decoder.js:119)\r\n    at XMLHttpRequest.xhr.onreadystatechange (ethHelper.js:150)\r\n```\r\n\r\nTo reproduce, based on \r\n[Tx1 (param \"narrative\" is \"test x\" in data)](https://rinkeby.etherscan.io/tx/0x7c40da71e7812b70cc55e65053de4b8fb0f2b0f78c6ae5c2e53f4ba22d629b7f#eventlog) and [Tx2 (param \"narrative\" is  \"\" in data)](https://rinkeby.etherscan.io/tx/0xdedc844b1f1bee627ee7067fef7003cffbd4704567757696169a398fb9889994#eventlog)\r\n```\r\nlet _inputs = [\r\n                { indexed: true, name: \"from\", type: \"address\" },\r\n                { indexed: true, name: \"to\", type: \"address\" },\r\n                { indexed: false, name: \"amount\", type: \"uint256\" },\r\n                { indexed: false, name: \"narrative\", type: \"string\" }\r\n            ];\r\n            let _topics = [\r\n                \"0x000000000000000000000000ae653250b4220835050b75d3bc91433246903a95\",\r\n                \"0x00000000000000000000000094011c67bc1e6448ed4b8682047358ca6cd09470\"\r\n            ];\r\n\r\n            let _logDataTx1 =\r\n                \"0x0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000067465737420780000000000000000000000000000000000000000000000000000\";\r\n            let _logDataTx2 =\r\n                \"0x000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000\";\r\n\r\n            let _decodedDataTx1 = web3.eth.abi.decodeLog(\r\n                _inputs,\r\n                _logDataTx1,\r\n                _topics\r\n            );\r\n            console.log(\"Decoded data Tx1:\", _decodedDataTx1);\r\n// ^^^^ output is correct, last param is there ^^^^\r\n            let _decodedDataTx2 = web3.eth.abi.decodeLog(\r\n                _inputs,\r\n                _logDataTx2,\r\n                _topics\r\n            );\r\n// ^^^^  Throws: Uncaught Error: The parameter \"0x\" must be a valid HEX string. ^^^^ \r\n            console.log(\"Decoded data Tx2:\", _decodedDataTx2);\r\n```\r\n \r\n"},{"labels":["bug"],"text":"If `myContract.methods.myMethod().call()` returns 0x and address is expected an error is thrown \r\n\"Error: Given address \"0x\" is not a valid Ethereum address.\"\r\n\r\nI'd like to handle this error like a promise rejection:\r\n\r\n`myContract.methods.myMethod().call().then( //no error ).catch( //error 0x ...)`\r\n\r\nBut this doesn't work.\r\n"},{"labels":["bug"],"text":"When using Web3 and connecting through websockets & subscriptions, if the connection drops (ex. Node goes offline), the entire application throws. This is not very developer friendly, as it risks taking down the entire application. There doesn't appear a great way to encapsulate this inside a try/catch or otherwise.\r\n\r\nError:\r\n```\r\n~/node_modules/web3/packages/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:111\r\n        throw new Error('cannot call send() while not connected');\r\n        ^\r\n\r\nError: cannot call send() while not connected\r\n    at W3CWebSocket.send (~/node_modules/web3/packages/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:111:15)\r\n    at WebsocketProvider.send ~/node_modules/web3/packages/web3-providers-ws/src/index.js:213:21)\r\n    at RequestManager.send (~/node_modules/web3/packages/web3-core-requestmanager/src/index.js:129:19)\r\n    at RequestManager.removeSubscription (~/node_modules/web3/packages/web3-core-requestmanager/src/index.js:209:14)\r\n    at Object.callback (~/node_modules/web3/packages/web3-core-subscriptions/src/subscription.js:273:50)\r\n    at ~/node_modules/web3/packages/web3-core-requestmanager/src/index.js:106:49\r\n    at Array.forEach (native)\r\n    at requestManagerNotification (~/node_modules/web3/packages/web3-core-requestmanager/src/index.js:104:50)\r\n    at ~/node_modules/web3/packages/web3-providers-ws/src/index.js:106:17\r\n    at Array.forEach (native)\r\n    at W3CWebSocket.connection.onclose (~/node_modules/web3/packages/web3-providers-ws/src/index.js:104:16)\r\n    at W3CWebSocket._dispatchEvent [as dispatchEvent] (~/node_modules/web3/packages/web3-providers-ws/node_modules/yaeti/lib/EventTarget.js:107:17)\r\n    at W3CWebSocket.onClose (~/node_modules/web3/packages/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:228:10)\r\n    at WebSocketConnection.<anonymous> (~/node_modules/web3/packages/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:201:17)\r\n    at emitTwo (events.js:106:13)\r\n    at WebSocketConnection.emit (events.js:191:7)\r\n    at WebSocketConnection.handleSocketClose (~/node_modules/web3/packages/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:382:14)\r\n    at emitOne (events.js:96:13)\r\n    at Socket.emit (events.js:188:7)\r\n    at TCP._handle.close [as _onclose] (net.js:497:12)\r\n```\r\n\r\n\r\n**To reproduce:**\r\n\r\n```\r\nvar Web3 = require('web3')\r\nvar web3 = new Web3('ws://localhost:8546')\r\nvar subscription = web3.eth.subscribe('pendingTransactions', function (error, transaction) {\r\n      if (error) {\r\n        console.log('pendingTransactions error', error)\r\n      }\r\n    })\r\n    .on('data', function (transaction) {\r\n      console.log('pendingTransactions data', transaction)\r\n      // web3.eth.getTransaction(transaction).then(console.log)\r\n    })\r\n    .on('changed', function (transaction) {\r\n      console.log('pendingTransactions changed', transaction)\r\n    })\r\n    .on('error', function (transaction) {\r\n      console.log('pendingTransactions error', transaction)\r\n    })\r\n```\r\n\r\nNow, restart your websocket node, and see if you can keep the application from exiting."},{"labels":["bug"],"text":"I have lots of Ether in the account and have tried various accounts.  \r\nWhen I run this code below against testrpc, it completes successfully, but once I switch to my private geth or ropsten, this error shows consistently. \r\n\r\nMy version of geth is 1.6.7\r\n\r\nI use Ubuntu 16.04.\r\n\r\nThis below is the code portion of the code which I'm running taken from the web3 examples \r\n\r\n`var Web3 = require('web3');\r\nvar web3 = new Web3(\r\n    new Web3.providers.HttpProvider('http://localhost:8545/')\r\n);\r\n\r\nvar key=\"xxx\"\r\nvar Tx = require('ethereumjs-tx');\r\nvar privateKey = new Buffer(key, 'hex')\r\n\r\nvar bytecode =\"6060604052341561000c57fe5b5b60a68061001b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806339ec021c14603a575bfe5b3415604157fe5b6058600480803560ff16906020019091905050605a565b005b6000600082600a0a60ff16629896800262ffffff1691508190505b5050505600a165627a7a723058201aa083f84301acc104a3de0151822aa682702844181a821c16490689e05d729e0029\";\r\n\r\nvar rawTx = {\r\n    nonce: \"0x2\",    \r\n    gasLimit: \"0x2DC6C0\",    \r\n    gasPrice: \"0x4A817C800\",  \r\n    value: '0x00', \r\n    data: '0x' + bytecode   \r\n};\r\n\r\nvar tx = new Tx(rawTx);\r\ntx.sign(privateKey);\r\n\r\nvar serializedTx = tx.serialize();\r\n\r\nweb3.eth.sendSignedTransaction( \"0x\" + serializedTx.toString('hex'))\r\n.on('receipt', console.log);\r\n`\r\n\r\n\r\n\r\nError shows like this.\r\n\r\nUnhandled rejection Error: Returned error: insufficient funds for gas * price + value\r\n    at Object.ErrorResponse (/home/bogdan/node_modules/web3/packages/web3-core-helpers/src/errors.js:29:16)\r\n    at /home/bogdan/node_modules/web3/packages/web3-core-requestmanager/src/index.js:137:36\r\n    at XMLHttpRequest.request.onreadystatechange (/home/bogdan/node_modules/web3/packages/web3-providers-http/src/index.js:64:13)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/home/bogdan/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:64:18)\r\n    at XMLHttpRequest._setReadyState (/home/bogdan/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:354:12)\r\n    at XMLHttpRequest._onHttpResponseEnd (/home/bogdan/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:509:12)\r\n    at IncomingMessage.<anonymous> (/home/bogdan/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:469:24)\r\n    at emitNone (events.js:91:20)\r\n    at IncomingMessage.emit (events.js:188:7)\r\n    at endReadableNT (_stream_readable.js:975:12)\r\n    at _combinedTickCallback (internal/process/next_tick.js:80:11)\r\n    at process._tickCallback (internal/process/next_tick.js:104:9)\r\n\r\n\r\n\r\n"},{"labels":["bug",null],"text":"Currently web3 is interpretating \"0x\" as signifying zero values\r\n\r\nI posted an issue on geth (https://github.com/ethereum/go-ethereum/issues/15102) thinking it was an issue there. I still think get should return a jsonrpc error for the case described in the issue but there might be other case where \"0x\" is a valid?  like calling a contract on a block where the contract did not exist yet ?\r\n\r\nI think web3 should in that case return an error instead of interpretating the return values as being zeroes since this can be misleading.\r\n\r\nAs described in the geth issue, you can never sure that your data is actually zero at that particular block or it is the node that has not synced fully yet.\r\n\r\n"},{"labels":["bug"],"text":"It appears that the new `web3.utils.toBN` does not return a true BigNumber object. It's missing a number of it's _most critical_ functions, including but not limited to\r\n\r\n`toFixed()`\r\n`toFormat()`\r\n\r\nI confirmed this by including BigNumbers.js separately, creating a `new BigNumber()` from web3's `BigNumber` object, and then calling `toFixed()` (it worked). If this was intentional, it should be noted somewhere. "},{"labels":["bug"],"text":"While trying get a block from ropsten `getBlock(2378)` succeed but `getBlock('0x0c5b789878042c12f3cd9d69f040be1c3f669aee2997654c0b570f40b7dd72bb')` fails, both refer the same block (https://ropsten.etherscan.io/block/0x0c5b789878042c12f3cd9d69f040be1c3f669aee2997654c0b570f40b7dd72bb).\r\n\r\nIt will work correctly with other blocks like 2377 and 2379.\r\n\r\nThe following script works without problems in v0.20.1 but fails with 1.0.0-beta.15. \r\n\r\n```\r\nconst Web3 = require('web3');\r\nconst Promise = require('bluebird');\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\n\r\nconst isV1 = typeof web3.version === 'string';\r\nconst getBlock = isV1 ? web3.eth.getBlock : Promise.promisify(web3.eth.getBlock);\r\n\r\nconst numBlock = 2378;\r\n\r\nasync function main() {\r\n  try {\r\n    const block1 = await getBlock(numBlock);\r\n    console.log(`${JSON.stringify(block1, null, '  ')}`);\r\n    const block2 = await getBlock(block1.hash);\r\n    console.log(`${JSON.stringify(block2, null, '  ')}`);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nmain();\r\n```\r\n\r\nThe callstack of the error is\r\n\r\n```\r\nError: invalid argument 0: json: cannot unmarshal hex string of odd length into Go value of type common.Hash\r\n    at Object.ErrorResponse (/ethereum/test/node_modules/web3/packages/web3-core-helpers/src/errors.js:29:16)\r\n    at /ethereum/test/node_modules/web3/packages/web3-core-requestmanager/src/index.js:137:36\r\n    at XMLHttpRequest.request.onreadystatechange (/ethereum/test/node_modules/web3/packages/web3-providers-http/src/index.js:64:13)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/ethereum/test/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:64:18)\r\n    at XMLHttpRequest._setReadyState (/ethereum/test/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:354:12)\r\n    at XMLHttpRequest._onHttpResponseEnd (/ethereum/test/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:509:12)\r\n    at IncomingMessage.<anonymous> (/ethereum/test/node_modules/web3/packages/web3-providers-http/node_modules/xhr2/lib/xhr2.js:469:24)\r\n    at emitNone (events.js:110:20)\r\n    at IncomingMessage.emit (events.js:207:7)\r\n    at endReadableNT (_stream_readable.js:1047:12)\r\n    at _combinedTickCallback (internal/process/next_tick.js:102:11)\r\n    at process._tickCallback (internal/process/next_tick.js:161:9)\r\n```"},{"labels":["bug"],"text":"I am using the current web3 (version 1.0.0-beta.13) library and have been getting this error continuously, after debugging through the web3 library it seem to return a promise object, which  should work with my current implementation.\r\n\r\nHere is the error that I am getting:\r\n```\r\n(node:24273) Warning: a promise was created in a handler but was not returned from it\r\n```\r\n```js\r\n{ blockHash: '0xd6613704cf1b2aa5e74082eb5ff2f3d3bd93741e97bc2126c7cc295be7207192',\r\n  blockNumber: 239,\r\n  contractAddress: null,\r\n  cumulativeGasUsed: 25290,\r\n  gasUsed: 25290,\r\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n  root: null,\r\n  transactionHash: '0x3679g30f86b763400a43bcdbb8bc3db113d3f40dcb47793ff00b8e7ce1dda20fb',\r\n  transactionIndex: 0,\r\n  events: {} }\r\n```\r\n\r\nI am currently calling the function with the current web3 api:\r\n```js\r\nMyContract.methods.create(‘name’).send({ from: ‘0x4516b04549bd109a3106764dcb473e51fd0cf835’ })\r\n.then(result => console.log(result))\r\n```"},{"labels":["bug"],"text":"Using Node, I'm trying to import web3.js as a dependency using Node in Terminal. When doing so, Node throws Unexpected Token over a line in the web3 code and I'm unable to find any other instance of users having the same issue. \r\n\r\nTerminal I/O is the following:\r\n\r\n```\r\nelem@elem-lean:~/Projects/testProjectg$ node\r\n> Web3 = require('web3')\r\n/home/elem/Projects/hello-world-voting/node_modules/web3/packages/web3-eth-accounts/node_modules/eth-lib/src/account.js:6\r\nconst {keccak256, keccak256s} = require(\"./hash\");\r\n      ^\r\nSyntaxError: Unexpected token {\r\n    at exports.runInThisContext (vm.js:53:16)\r\n    at Module._compile (module.js:374:25)\r\n    at Object.Module._extensions..js (module.js:417:10)\r\n    at Module.load (module.js:344:32)\r\n    at Function.Module._load (module.js:301:12)\r\n    at Module.require (module.js:354:17)\r\n    at require (internal/module.js:12:17)\r\n    at Object.<anonymous> (/home/elem/Projects/hello-world-voting/node_modules/web3/packages/web3-eth-accounts/src/index.js:29:15)\r\n    at Module._compile (module.js:410:26)\r\n    at Object.Module._extensions..js (module.js:417:10)\r\n    at Module.load (module.js:344:32)\r\n    at Function.Module._load (module.js:301:12)\r\n    at Module.require (module.js:354:17)\r\n    at require (internal/module.js:12:17)\r\n    at Object.<anonymous> (/home/elem/Projects/hello-world-voting/node_modules/web3/packages/web3-eth/src/index.js:36:16)\r\n    at Module._compile (module.js:410:26)\r\n    at Object.Module._extensions..js (module.js:417:10)\r\n    at Module.load (module.js:344:32)\r\n    at Function.Module._load (module.js:301:12)\r\n    at Module.require (module.js:354:17)\r\n    at require (internal/module.js:12:17)\r\n    at Object.<anonymous> (/home/elem/Projects/hello-world-voting/node_modules/web3/src/index.js:34:11)\r\n```"},{"labels":["bug",null],"text":"Using 1.0 beta13 against TestRPC, I can successfully subscribe as follows:\r\n```javascript\r\noracleInstance.events.allEvents((error,event) => console.log(event))\r\n.on('data', function(event) {\r\n  console.log('data!');\r\n  console.log(event);\r\n})\r\n.on('changed', function(event) {\r\n  console.log('change!');\r\n  console.log(event);\r\n})\r\n.on('error', console.error);\r\n```\r\n\r\nBut none of these fire when the event is called in the contract.\r\n\r\nI know the event has fired because getPastEvents includes the events I'm expecting.\r\n```javascript\r\noracleInstance.getPastEvents('allEvents', { fromBlock: 0 }).then(events => console.log(events));\r\n```\r\n\r\nDo subscriptions require web sockets? If so, that's a significant impact to the test toolchain that includes TestRPC\r\nI'll validate this shortly over ws:8546 against a real network and report back."},{"labels":["bug",null],"text":"Can't seem to be able to connect to a remote node via WebSocket. The browser console gives me the following error:\r\n![screenshot 103](https://user-images.githubusercontent.com/11412480/28749401-a780c872-74c6-11e7-9535-51af6824727c.jpg)\r\n\r\n\r\nRemote node is running on Geth 1.6.7 with\r\n`geth --light --ws --wsaddr redacted --wsport 8546 --wsorigins \"*\"`\r\n\r\nHere is the code in my script.js that is used to connect (as found [here](http://web3js.readthedocs.io/en/1.0/getting-started.html)).\r\n```\r\nvar web3 = new Web3(Web3.givenProvider || \"ws://redacted:8546\");\r\n\r\nweb3.eth.getProtocolVersion()\r\n.then(console.log);\r\n```\r\n\r\nThe code runs perfectly when ran via the Parity (1.7) browser, it results in `63` like it should. When ran via the regular browser, it results in the error stated above."},{"labels":["bug"],"text":"This is my source code in nodejs:\r\n\r\n    var Web3 = require('web3');\r\n    var web3 = new Web3();\r\n    web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));\r\n    var abi = ...\r\n    var contract = new web3.eth.Contract(abi, MAIN_CONTRACT_ID);\r\n    contract.events.Evt({fromBlock: 0, toBlock: 'latest'},function () {\r\n    }).on('data',function (evt) {\r\n            console.log(\"evt\",evt);\r\n        });\r\n\r\nBut I get this crash:\r\n\r\n\r\n    TypeError: Cannot read property 'on' of undefined\r\n        at Subscription.subscribe (C:\\Users\\steve\\Dropbox\\Projects\\dsd\\dsd\\web3test\\node_modules\\web3\\packages\\web3-core-subscriptions\\src\\subscription.js:199:45)\r\n        at Contract._on (C:\\Users\\steve\\Dropbox\\Projects\\dsd\\dsd\\web3test\\node_modules\\web3\\packages\\web3-eth-contract\\src\\index.js:623:18)\r\n\r\ncontract.Evt is undefined for me, contract is defined and contains contract.events.Evt.\r\n\r\nHow can I fix this?\r\n"},{"labels":["bug",null],"text":"This issue happens when invoking methods.myMethod.send types. Happens using the callback and event emitter. Runnin web3-1.0.0.11"},{"labels":["bug"],"text":"My meteor dApp relies on underscore and works fine with web3@0.18.2. However, when I npm install web3@1.0.0-beta.11 and run my dApp I get the following. Reverting back to 0.18 fixes the problem. Removing meteor's underscore package does not resolve the problem.\r\n\r\n![screen shot 2017-07-24 at 8 55 32 pm](https://user-images.githubusercontent.com/11956729/28555113-9069dfa6-70b2-11e7-93af-40a48fbcd270.png) \r\n\r\nAny ideas? What else should I try?"},{"labels":["bug"],"text":"i have successfully managed to create a local account, add it to wallet, unlock it and then transfer ether to it. Now, what i wanted was to send this ether from the unlocked local account to another but i always error out. Yet sending ether between the default accounts from getAccounts() always works.. my guess is that maybe it fails on signing using the new local accounts. below is my code and error i get\r\n\r\n\r\n```js\r\nvar web3 = new Web3('http://localhost:8545');\r\nvar accounts;\r\nvar fromAddress;\r\nweb3.eth.getAccounts().then(function(o) {\r\n    accounts = o;\r\n    //fromAddress previously created by createAccount with password of 'newjordah' and loaded with ether\r\n    fromAddress = \"0xD7325762c8017ff83d474AAa0ca266f178e1813c\";\r\n    loadAccount(\"newjordah\");\r\n    var toAddress = accounts[1];\r\n    sendEth(fromAddress, toAddress, 0.1);\r\n});\r\n\r\nfunction sendEth(_from, _to, _amount) {\r\n    web3.eth.sendTransaction({\r\n        from: _from,\r\n        to: _to,\r\n        value: web3.utils.toWei(_amount, 'ether'),\r\n        gas: '0x2710'\r\n    }).then(function(receipt) {\r\n        console.log(receipt);\r\n    });\r\n}\r\n\r\nfunction createAccount(_password) {\r\n    var nObj = web3.eth.accounts.create();\r\n    web3.eth.accounts.wallet.add(nObj);\r\n    web3.eth.accounts.wallet.save(_password);\r\n    return nObj;\r\n}\r\n\r\nfunction loadAccount(_password) {\r\n    try {\r\n        var l = web3.eth.accounts.wallet.load(_password);\r\n        console.log(\"Account Unlocked\")\r\n        return l;\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\n```\r\ni get this error\r\n```\r\n\r\nweb3.min.js:1 Unhandled rejection RangeError: Maximum call stack size exceeded\r\n    at String.slice (native)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620555)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\n    at t (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:620543)\r\nFrom previous event:\r\n    at i.d [as _captureStackTrace] (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:490583)\r\n    at i._then (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:519672)\r\n    at i.then (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:518042)\r\n    at m.signTransaction (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:676651)\r\n    at f (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:337277)\r\n    at Object.callback (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:337826)\r\n    at u (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:336909)\r\n    at file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:417689\r\n    at XMLHttpRequest.o.onreadystatechange (file:///C:/Users/Jordah/Desktop/react/ewallet/lerna-repo/dist/web3.min.js:1:703384)\r\n```"},{"labels":["bug",null],"text":"It appears that the latest update has broken contract methods, which are directly passed BigNumber objects now, from the following release change:\r\n`Checks for the right argument number in contract functions`\r\n\r\nThe error returned when passing a formerly working function, with a BigNumber as a parameter is:\r\n`Error: Invalid number of arguments to Solidity function`\r\n\r\nReverting to `18.2` or calling `.valueOf()` on the BigNumber parameter is a temporary patch, but I believe this should be fixed, as it states in the web3 API doc that the BigNumber type is a valid parameter to pass directly!\r\n\r\nThis issue was previously brought up on metamask https://github.com/MetaMask/metamask-extension/issues/1778"},{"labels":["bug"],"text":"After successful deployment of a contract via `web3.js` running on latest node.js (8.1.2), verified by copy/pasting the new contract address from the `geth` console (this is a private blockchain w/ custom `genesis.json`) and using with `MyContract.at(...)` to retrieve an object with expected and functioning contract methods, `Filter.outputLogFormatter` begins spewing errors into the node.js console, such as:\r\n\r\n`TypeError: Cannot create property 'blockNumber' on string '0x381a5df1fa5a342ecf0dca13f64f3c5445a241c4e1de5d6f623f33d4462c7598' at Filter.outputLogFormatter [as formatter] (/path/to/dapp/node_modules/web3/lib/web3/formatters.js:194:25`\r\n\r\nAt that point, the node.js console becomes barely usable and after digging around for some time, I have no idea if I'm doing something wrong or I've run into a bug, or...?"},{"labels":[null,"bug"],"text":"* If you run `web3.toBigNumber(\"99728875900000000000\").dividedBy(\"1000000000000000000\")` in Safari, it freezes.\r\n* If you run the same in Chrome, or Node, it works and does not freeze.\r\n\r\nThis appears to be caused by the [forked version](https://github.com/debris/bignumber.js) of BigNumber. Indeed, if you use its `bignumber.js`:\r\n\r\n* If you run `new BigNumber(\"99728875900000000000\").dividedBy(\"1000000000000000000\")` in Safari, it freezes.\r\n* If you run the same in Chrome, it works and does not freeze.\r\n\r\nAlso, the [original repo](https://github.com/MikeMcl/bignumber.js) does not freeze either Safari or Chrome.\r\n\r\n"},{"labels":[null,"bug"],"text":"when using web3.toHex to convert from number to hex, if the most significant nibble is zeros, it removes that nibble. this can case problem if that number will be passed to a contract and saved in bytes\r\n\r\nEx\r\n```\r\nvar a = 159340662;\r\na_hex = web3.toHex(a); //  result : a_hex = '0x97f5876' but the correct one is '0x097f5876'\r\n\r\ncontract test{\r\n   bytes a;\r\n   function test(bytes _a){\r\n     a = _a;\r\n   }\r\n   function get() returns(bytes){\r\n     return a\r\n   }\r\n}\r\n\r\n// running\r\ntest(web3.toHex(a))\r\nthe result of get function will be '0x97f587'\r\n\r\nweb3 gives '0x97f5876' and contract gives '0x97f587' but the correct one is  '0x097f5876'\r\n```"},{"labels":["bug"],"text":"There is error in web3.js:3802 \r\nSometimes i receive argument 'log' as string (like 0xABCDE0-9...).\r\n\r\nAnd i receive error, then web3 try to find param of string-like log. \r\nThis code attempt add parameter blockNumber to string.\r\nTherefore this condition always return TRUE and i receive error: \r\n\r\nUncaught TypeError: Cannot create property 'blockNumber' on string '0xabcde...'\r\n\r\nI recommend you to use next condition:\r\n   `if(log.blockNumber && log.blockNumber !== null)\r\n        log.blockNumber = utils.toDecimal(log.blockNumber);`\r\n\r\ninstead of \r\n`if(log.blockNumber !== null)\r\n        log.blockNumber = utils.toDecimal(log.blockNumber);`\r\n"},{"labels":[null,"bug"],"text":"Let's take e.g. `e1(string, uint)`, its json looks like\r\n```\r\n{\r\n  \"anonymous\": false,\r\n  \"inputs\": [\r\n    {\r\n      \"indexed\": false,\r\n      \"name\": \"\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"indexed\": false,\r\n      \"name\": \"\",\r\n      \"type\": \"uint256\"\r\n    }\r\n  ],\r\n  \"name\": \"e1\",\r\n  \"type\": \"event\"\r\n}\r\n```\r\nDecoding such an event we got only second argument in `args` property of resulting object. It caused by [using argument name](https://github.com/ethereum/web3.js/blob/develop/lib/web3/event.js#L157) as a key. Second argument just replaces first one in the map cause they both have same empy name `\"\"`"},{"labels":[null,"bug"],"text":"It reproduces from time to time, more frequent on a slow network. The problem is in these [two lines](https://github.com/ethereum/web3.js/blob/develop/lib/web3/filter.js#L185-L186). Some times `pollFilter` request is processed before `getLogsAtStart` which turns with double passing of same log entries to `watch` callback. Looks like `pollFilter` should run inside a callback to `getLogsAtStart`."},{"labels":["bug"],"text":"steps:\r\n1. install 0.18.1 (npm install web3)\r\n2. run node\r\n3. require('web3')\r\n\r\nresult:\r\nReferenceError: XMLHttpRequest is not defined\r\n    at Object.<anonymous> (/Users/iurimatias/Projects/embark-framework/node_modules/web3/lib/web3/httpprovider.js:37:20)\r\n\r\nprobably caused by this change https://github.com/ethereum/web3.js/compare/0.18.0...0.18.1#diff-aebc199fe327a7153e7d6274435f1476R30"},{"labels":["bug",null],"text":"Let me know if I'm doing something wrong, but I'm unable to get the web3js solidity compiler to work, whereas I am able to use the solc npm package to compile. \n\nThis works: \n\n```\nvar solc = require('solc');\nvar input = \"contract test {function multiply(uint a) returns(uint d) {return a * 7;}};\"\nvar output = solc.compile(input, 0); // this works \n```\n\nThis returns an error: \n\n```\nvar Web3 = require('web3');\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\nvar input = \"contract test {function multiply(uint a) returns(uint d) {return a * 7;}};\"\nvar output = web3.eth.compile.solidity(input); // this prints the following output\n```\n\n> Error: TypeError: Cannot read property 'split' of undefined\n>     at Compiler.compile_solidity (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/compiler.js:14:34)\n>     at Manager.eth_compileSolidity (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/manager.js:197:23)\n>     at Manager.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/manager.js:75:10)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at VmSubprovider.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/vm.js:42:12)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at GethDefaults.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/gethdefaults.js:17:12)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at FilterSubprovider.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/filters.js:76:7)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at Object.module.exports.InvalidResponse (/Users/johnmardlin/node_modules/web3/lib/web3/errors.js:35:16)\n>     at RequestManager.send (/Users/johnmardlin/node_modules/web3/lib/web3/requestmanager.js:61:22)\n>     at Object.send [as solidity](/Users/johnmardlin/node_modules/web3/lib/web3/method.js:145:58)\n>     at Object.<anonymous> (/Users/johnmardlin/Projects/eth-play/eth-arbitrary/myFlow/myFlow.js:12:31)\n>     at Module._compile (module.js:410:26)\n>     at Object.Module._extensions..js (module.js:417:10)\n>     at Module.load (module.js:344:32)\n>     at Function.Module._load (module.js:301:12)\n>     at Function.Module.runMain (module.js:442:10)\n>     at startup (node.js:136:18)\n> [Finished in 2.1s with exit code 7]\n\nOther functions of web3js are working fine.\n"},{"labels":["bug"],"text":"When I send a post message with a topic, these topic isn't in the message that the receiver gets back.\r\nI think every topic should be returnd to the receiver.\r\nSample Code:\r\n\r\n```js\r\nvar Web3 = require('web3');\r\n\r\n// define web3 object\r\nvar web3 = new Web3();\r\n\r\n// setup provider\r\nweb3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));\r\n\r\n// new identity, topic, payload\r\nvar identity = web3.shh.newIdentity();\r\nvar topic = 'TEST';\r\nvar payload = 'some payload text'+ Date.now();\r\nconsole.log(identity);\r\n\r\n// build message object\r\nvar message = {\r\n    from: identity,\r\n    topics: [web3.fromAscii(topic)],\r\n    payload: web3.fromAscii(payload)\r\n};\r\n\r\n// setup filter for messages on topic\r\nvar filter = web3.shh.filter({\r\n    topics: [web3.fromAscii(topic)]\r\n});\r\n\r\n// watch for changes on filter\r\nfilter.watch(function (err, result) {\r\n    console.log(err, result, web3.toAscii(result.payload), result.topics);\r\n});\r\n\r\nweb3.shh.post(message, function (err, result) {\r\n    console.log(err, result);\r\n});\r\n```\r\n"},{"labels":["bug",null],"text":"Though in the documentation https://github.com/ethereum/wiki/wiki/JavaScript-API#parameters-33, it is mentioned that \"Object - Additional filter options, see filters parameter 1 for more\"...Contract.allEvents does not support further filtering based on topics parameter in the option.\n\nIf we have a contract\n\n```\ncontract C1{\n    event E1(uint indexed e11);\n    event E2(uint indexed e22);\n\n    function test(uint i, uint j){\n        E1(i);\n        E2(j);\n    }\n}\n```\n\nLet's call the test() function once. So we have two events in the log.\n\nNow following code returns both the events though it is filtered by single topic.\n\n```\nc1.allEvents({fromBlock: 0, toBlock: 'latest', topics:[\"0x47e2689743f14e97f7dcfa5eec10ba1dff02f83b3d1d4b9c07b206cbbda66450\"]})\n.get(function(e,logs){console.log(logs);});\n```\n\nHowever filter works just fine and it returns a single event (E1)\n\n```\nweb3.eth.filter({fromBlock: 0, toBlock: 'latest', topics:[\"0x47e2689743f14e97f7dcfa5eec10ba1dff02f83b3d1d4b9c07b206cbbda66450\"], address:\"0x538c2b120085470ec0bb2fe90c626165f5d124dd\"})\n.get(function(e,logs){console.log(logs);});\n```\n"},{"labels":["bug"],"text":"http://ethereum.stackexchange.com/questions/3784/byte32-to-uint-convesion-is-incorrect?noredirect=1#comment3880_3784\n\n`10` is encoded as `0xa` instead of `0x00000...0a`\n"},{"labels":["bug"],"text":"I have the following output ABI definition for a contract call:\n\n`[{\"name\":\"major\",\"type\":\"uint32\"},{\"name\":\"minor\",\"type\":\"uint32\"},{\"name\":\"patch\",\"type\":\"uint32\"},{\"name\":\"commit\",\"type\":\"bytes20\"},{\"name\":\"pass\",\"type\":\"address[]\"},{\"name\":\"fail\",\"type\":\"address[]\"}]`\n\nCalling the specific method returns the following EVM output:\n\n`000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000945e4c7991a3d210c5efc1a2cb8feeabad7cb9ca0000000000000000000000000000000000000000000000000000000000000000`\n\nWeb3 (at least the one included in Geth) parses this as:\n\n`[1, 2, 4, \"0x0000000000000000000000000000000000000004\", [\"0x0000000000000000000000000000000000000002\"], []]`\n\nWhereas the Go ABI parser parses it (corrently) as:\n\n`{\"Major\": 1, \"Minor\": 2, \"Patch\": 4, \"Commit\": \"0x0000000000000000000000000000000000000004\", \"Pass\": [\"0x945e4c7991a3d210c5efc1a2cb8feeabad7cb9ca\"], \"Fail\": []}`\n"},{"labels":[null,"bug"],"text":"Watching event with string argument cause \"Uncaught BigNumber Error: new BigNumber() not a base 16 number: \" Exception.\r\n\r\nBelow is my Contract code to test event.\r\n\r\n```js\r\ncontract StringTest {\r\n    string stringHolder;\r\n\r\n    event stringChanged(string indexed changedString);\r\n\r\n    function setString(string _string)  {\r\n        stringHolder = _string;\r\n\r\n        stringChanged(stringHolder);\r\n    }\r\n\r\n    function getString() constant returns (string) {\r\n        return stringHolder;\r\n    }\r\n}\r\n```\r\n\r\nand Javascript side which runs on Chrome browser.\r\n\r\n```js\r\nvar Web3 = require('web3');\r\nvar web3 = new Web3();\r\nweb3.setProvider(new Web3.providers.HttpProvider(\"http://10.77.135.188:8547\"));\r\n\r\nvar abi = [{\"constant\":false,\"inputs\":[{\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"changedString\",\"type\":\"string\"}],\"name\":\"stringChanged\",\"type\":\"event\"}];\r\n\r\nvar code = \"<..... Contract Byte Code from online contract editor ...>\";\r\n\r\nvar sender = \"0x02C370C2B797B2E71AD79BD2D9810534F55A4F08\";\r\nweb3.personal.unlockAccount(sender, \"1111\");\r\n\r\nvar Contract = web3.eth.contract(abi);\r\nconsole.log(\"Deploying Contract..\");\r\nContract.new({ \"from\":sender , \"data\" : code, \"gas\" : 4700000}, function (error, contract) {\r\n    if (contract.address != undefined) {\r\n        console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\r\n\r\n        // Register Event Listener\r\n        contract.allEvents(function(error, log) {\r\n            if (error != undefined) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n\r\n            console.log(\"[Event Coming]\", log);\r\n        });\r\n\r\n        // Send setString() message transaction\r\n        contract.setString(\"I'm Testing String Event Log\", {\"from\":sender,\"gas\":4000000});\r\n        console.log(\"Contract Creation and Sending Message Done. Just waiting for event...\");\r\n    }\r\n});\r\n```\r\n\r\nthen I get result as below.\r\n\r\n```\r\nSynchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/.\r\nDeploying Contract..\r\nContract mined! address: 0x6c3cedb24ad719d2c32bd3bbdb83bd44a52dce02 transactionHash: 0x569b9170ce13a9a1781592e12e4ecdfad976a6c036308af216ed5a221ee11436\r\nContract Creation and Sending Message Done. Just waiting for event...\r\nUncaught BigNumber Error: new BigNumber() not a base 16 number: \r\n        raise    @    bignumber.js:1177\r\n        (anonymous function)    @    bignumber.js:1165\r\n        BigNumber    @    bignumber.js:212\r\n        formatOutputString    @    formatters.js:217\r\n        (anonymous function)    @    type.js:237\r\n        SolidityType.decode    @    type.js:238\r\n        (anonymous function)    @    coder.js:219\r\n        SolidityCoder.decodeParams    @    coder.js:218\r\n        SolidityEvent.decode    @    event.js:147\r\n        AllSolidityEvents.decode    @    allevents.js:66\r\n        (anonymous function)    @    filter.js:118\r\n        onMessage    @    filter.js:117\r\n        (anonymous function)    @    requestmanager.js:259\r\n        (anonymous function)    @    requestmanager.js:258\r\n        request.onreadystatechange    @    httpprovider.js:114\r\n```\r\n\r\nweb3.js = 0.16\r\nGeth = 1.3.5\r\nSolidity Editor's Solidity version = v0.3.1\r\n\r\nAnd I found another article about this issue also.\r\n(http://ethereum.stackexchange.com/questions/1741/what-does-the-web3-bignumber-not-a-base-16-number-error-mean#)\r\n\r\nIt should be fixed.\r\n"},{"labels":["bug"],"text":"Consider the following example:\n\n```\nvar Web3 = require('web3');\nvar web3 = new Web3();\nweb3.eth.defaultAccount = \"0x123\";\nconsole.log(web3.eth.defaultAccount);\nvar _web3 = new Web3();\nconsole.log(_web3.eth.defaultAccount); // should be undefined, but is 0x123\n```\n"},{"labels":[null,"bug"],"text":"A struct with bytesX where X < 32 will overflow the subsequent fields of the struct when called via web3. Placing the bytesX type last will work, however (if it is the only one of its kind in the struct). Using `web3@0.15.3`\n\nFor example\n\n```\nstruct SomeStruct {\n    bytes2 testB;\n    bytes32 testA;\n}\n\ntestStruct = SomeStruct({\n    testA: 0x0c98fceab753c7528a29469e19c7901cab3e987b379bf0627c4027ef0a6993c4,\n    testB: 0x1210\n});\n```\n\ntestStruct will return `[ '0x1210', '0x0000000000000000000000000000000000000000000000000000000000000c98' ]` when accessed\n\nreversing the field order results in correct values\n\n```\nstruct SomeStruct {\n    bytes32 testA;\n    bytes2 testB;\n}\n```\n"},{"labels":["bug"],"text":"This should work and doesn't:\n\n``` js\n// define web3 object\nvar web3 = new Web3();\n\n// setup provider\nweb3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));\n\n// new identity, topic, payload\nvar identity = web3.shh.newIdentity();\nvar topic = 'some-topic-example';\nvar payload = 'some payload text';\n\n// build message object\nvar message = {\n    from: identity,\n    topic: [topic],\n    payload: payload,\n    ttl: 100,\n    priority: 100\n};\n\n// setup filter for messages on topic\nvar filter = web3.shh.filter({\n    topics: [web3.fromAscii(topic)]\n});\n\n// watch for changes on filter\nfilter.watch(function (err, result) {\n    console.log(err, result, web3.toAscii(result.payload));\n});\n\nweb3.shh.post(message, function (err, result) {\n    console.log(err, result);\n});\n```\n\nGeth:\n\n```\ngeth --testnet --unlock \"0\" --shh --rpc --rpcapi=\"db,eth,net,web3,shh\" --rpcaddr=\"0.0.0.0\" --rpccorsdomain=\"*\"\n```\n\nNotes:\n\n(1) Filtering works fine when I use other apps to post messages to my node on the topic I'm listening for. Which validates that the filtering/topic filtering works with web3.js\n(2) I think it is something to do with the `web3.shh.post` method and the message object encoding that is causing problems here. Messages I post dont seem to get brought into the filters.\n(3) The examples in the docs don't specify whether the message object should/can/must contain a `priority` property or a `workToProve` property. That should be clarified.\n(4) The web3.shh methods seem tempermental at best and need to be re-tested with geth 1.5.1\n"},{"labels":["bug",null],"text":"In `lib/solidity/formatters.js`, the `formatOutputInt` function does detect negative values from param. However, it return a positive number after [L136](https://github.com/ethereum/web3.js/blob/master/lib/solidity/formatters.js#L136).\n"},{"labels":["bug"],"text":"I try use web3+meteor\n\nMy code at meteor side:\n\n``` js\nGetNumberInstance.SetTimeperiod({},{fromBlock: 0, toBlock: 'latest'}).watch(function(e, log) {\n    if(!e) {\n    console.log(\"Timeperiod: \" + log.args.value + \" blockNumber: \" + log.blockNumber + \" transactionHash: \" + log.transactionHash); \n    } else {\n        console.log(\"GetNumberInstance.SetTimeperiod call with error: \" + e);\n    }\n});\n\nThis code is absolutely unpredictable ways sometimes run without error\nI20160217-15:03:04.258(0)? Timeperiod: 120 blockNumber: 415092 transactionHash: 0x29f1e4d3610d5cead6936c9870aa26060bfeec1d8fd0a6a924fd4538be716665\nI20160217-15:03:04.305(0)? Timeperiod: 240 blockNumber: 415146 transactionHash: 0xeb09e07e9329d70e6c20ee893be40c5a527aa764a84e11a04cf7a9f826c14f25\n\n, sometimes with errors:\n\nI20160217-15:23:18.861(0)? GetNumberInstance.SetTimeperiod call with error: Error: Invalid JSON RPC response: \"Error: socket hang up\\n    at createHangUpError (http.js:1473:15)\\n    at Socket.socketOnEnd [as onend] (http.js:1569:23)\\n    at Socket.g (events.js:180:16)\\n    at Socket.emit (events.js:117:20)\\n    at _stream_readable.js:944:16\\n    at process._tickCallback (node.js:448:13)\"\n```\n\nGeth/v1.3.3/linux/go1.5.1\nRunning at localhost:8545\nFirewall off.\n\nHow to catch the source of the error?\n"},{"labels":["bug"],"text":"```\nvar ContractFactory = function (eth, abi) {\n    this.eth = eth;\n    this.abi = abi;\n\n    this.new.getData = this.getData.bind(this);\n};\n```\n\n`this.new.getData` is a member of the ContractFactory prototype and not of a ContractFactory instance. This is because `this.new` is not resolved to an instance, but is resolved through the prototype chain of ContractFactory.prototype. \n\nTherefore this.new.getData will always refer to the getData method of the last ContractFactory instance created because we are assigning it to the ContractFactory.prototype which is shared by all instances.\n"},{"labels":["bug"],"text":"bignumber throws in the process of calling back to the client code when I send ether to a contract account where I've got a listener for all events.\n\nThis is the command in geth command line:\n\n`eth.sendTransaction({from: someAccount, to: contractBeingListenedTo, value: 1})`\n\nI have this solidity event in my default contract function:\n\n```\n   event DefaultFuncEvent(address sender, bytes4 abi, uint gas, uint eth, bytes data);\n    function () {\n        DefaultFuncEvent(msg.sender, msg.sig, msg.gas, msg.value, msg.data);\n    }\n```\n\nthe snippet of code where I subscribe to the event (uses an RXJS subject but that shouldn't matter, there's none of my code in stack trace)\n\n```\n    contract.observer.web3hdlr = contract.allEvents(\n            {},\n            {fromBlock: 0, toBlock: 'latest'},\n            function(err, event) {\n                if(!err) {\n                    contract.observer.source.onNext(event);\n                }\n            });\n\n```\n\nHere's the version I'm running (basically Master from a month ago)\n\n```\nnpm ls  web3\nethdevenv@0.0.0 /home/barkthins/proj/hello.git/hello2/ethdevenv\n└── web3@0.15.1 \n\n```\n\nand the big throw output:\n\n```\nBigNumber Error: new BigNumber() not a base 16 number: \n    at raise (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/node_modules/bignumber.js/bignumber.js:1177:25)\n    at /home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/node_modules/bignumber.js/bignumber.js:1165:33\n    at new BigNumber (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/node_modules/bignumber.js/bignumber.js:212:28)\n    at formatOutputDynamicBytes [as _outputFormatter] (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/solidity/formatters.js:205:19)\n    at /home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/solidity/type.js:237:25\n    at SolidityType.decode (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/solidity/type.js:238:11)\n    at /home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/solidity/coder.js:219:29\n    at Array.map (native)\n    at SolidityCoder.decodeParams (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/solidity/coder.js:218:26)\n    at SolidityEvent.decode (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/web3/event.js:150:34)\n    at AllSolidityEvents.decode (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/web3/allevents.js:66:18)\n    at /home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/web3/filter.js:118:49\n    at Array.forEach (native)\n    at Object.onMessage [as callback] (/home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/web3/filter.js:117:22)\n    at /home/barkthins/proj/hello.git/hello2/ethdevenv/node_modules/web3/lib/web3/requestmanager.js:259:20\n    at Array.forEach (native)\n```\n"},{"labels":["bug"],"text":"Background: In general, deploying a single contract with something like:\n\nvar abi = [...];\nvar code = ‘0x…’;\nvar contract = web3.eth.contract(abi);\ncontract.new({data: code, from: web3.eth.coinbase, gas: 3141592});\n\nresults in the following 6 steps in order for web3 to create the contract object in Javascript:\n1.  eth_sendTransaction - deploy the contract\n2.  eth_newBlockFilter - wait for block\n3.  eth_getFilterChanges - check for new block\n4. eth_getTransactionReceipt - request transaction receipt to get contract address\n5. eth_getCode - get the code for the new contract\n6.  eth_uninstallFilter - uninstall the filter.\n\nHowever, when deploying multiple contracts in parallel, the packet flow gets convoluted, extra packets are generated, and in at least some cases the 6th step is missed (possibly others).\n\nIn addition, it appears that after attempting to create 8 or more contracts in parallel, in some cases a subsequent synchronous call from a node.js environment will hang indefinitely, with the CPU spiking to 100%.\n\nIn tracking this down, there are definitely bugs in the RPC packet flow from the sending side - so I'm filing this to web3.js hoping someone can confirm.\n\nI created a simple test case using node.js with 8 contracts that get deployed simultaneously (asynchronously).  It does not appear that the actual contract content is important - it's the management of the RPC communication channels on the web3.js side that appears to be in question.\n\nI captured a wireshark .pcap file with the packet capture here: https://drive.google.com/file/d/0B-Wpp3xJR_PHZ0lMS1V2UWZsY28\n\nThis is a nicer format spreadsheet showing the packet flow, color coded into the 6 stages above for each of the 8 contracts, with comments to the left pointing out what appear to be bugs / observations: https://docs.google.com/spreadsheets/d/133YWv7dwVqcfDETK_5SPfu3McMPNvfcMNcVFhZraKqw/edit?usp=sharing\n\nText version of the packet capture here: https://drive.google.com/file/d/0B-Wpp3xJR_PHTEU3b18wZ2R4Xzg\n"},{"labels":["bug"],"text":"I have a simple contract which can store and retrieve strings:\n\n``` js\n    contract NameRegistry\n    {\n      mapping(address => string[]) public DatReg;\n\n      function Add(string dat)\n      {  \n          DatReg[msg.sender].push(dat);\n      }\n      function Get (uint index) constant returns (string)\n      {\n          return (DatReg[msg.sender][index]);\n      }\n    }\n```\n\nI deploy the contract and tried adding a couple of strings like this:\n\n``` js\n    >instanceNameReg = web3.eth.contract(nameRegAbi).at(nameRegContractAddress);\n    >instanceNameReg.Add(\"test\")\n    >instanceNameReg.Add(\"This is a very long string: longer than 32 bytes\")\n```\n\nIt turns out that I can add strings up to 32 bytes in length. For longer strings I cannot read anything back. However, when manually sending a transaction I am able to add and read arbitrary length strings back, so I assume there is something wrong with web3 taking long strings as function arguments(?):\n\n``` js\n    >web3.eth.sendTransaction({from: web3.eth.accounts[0], to: nameRegContractAddress, gas:1000000, data:\"064152b2000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000305468697320697320612076657279206c6f6e6720737472696e673a206c6f6e676572207468616e20333220627974657300000000000000000000000000000000\"})\n    // wait for a bit (I'm mining these on a test net since I havent gotten the JS VM to work)\n    >instanceNameReg.Get(4)\n    \"This is a very long string: longer than 32 bytes\"\n```\n\nI am running geth 1.4.0-unstable and solc 0.2.0-0 on Ubuntu15.10 which compiles it to the following abi:\n\n``` js\n    [{\"constant\":false,\"inputs\":[{\"name\":\"dat\",\"type\":\"string\"}],\"name\":\"Add\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Get\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DatReg\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"}]\n```\n\nand this code:\n\n```\n0x60606040526103dd806100126000396000f3606060405260e060020a6000350463064152b2811461003157806360cd2685146100c7578063db48061514610170575b005b6040805160206004803580820135601f810184900484028501840190955284845261002f94919360249390929184019190819084018382808284375094965050505050505073ffffffffffffffffffffffffffffffffffffffff3316600090815260208190526040902080546001810180835582818380158290116102da576000838152602090206102da918101908301610349565b6101fc6004356040805160208181018352600080835273ffffffffffffffffffffffffffffffffffffffff33168152908190529190912080548390811015610002579060005260206000209001600050805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102c85780601f1061029d576101008083540402835291602001916102c8565b6101fc600435602435600060208190528281526040902080548290811015610002579060005260206000209001600050805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815294509192508301828280156102955780601f1061026a57610100808354040283529160200191610295565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f16801561025c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161027857829003601f168201915b505050505081565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b50505050509050919050565b50505050565b5050509190906000526020600020900160008390919091509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103ad57805160ff19168380011785555b506102d4929150610395565b50506001015b808211156103a9576000818150805460018160011615610100020316600290046000825580601f1061037b5750610343565b601f01602090049060005260206000209081019061034391905b808211156103a95760008155600101610395565b5090565b82800160010185558215610337579182015b828111156103375782518260005055916020019190600101906103bf56\n```\n"},{"labels":["bug"],"text":"web3 0.15.1\n\n``` js\nvar contract = initContract()\n\nvar event = contract.allEvents({}, {fromBlock: 0, toBlock: 'latest'})\n\nevent.watch(function (err, result) {\n  if (err) console.log(err)\n  console.log(result)\n})\n```\n\n```\n{ address: '0x7318ffe0cec891cdba72db4f8f1b48ae5116c281',\n  blockNumber: 1731,\n  logIndex: 0,\n  blockHash: '0x64c37edb40aeeea4c84ef8b033bbb47e3f78b526ed782d7057c6a6eb1826895e',\n  transactionHash: '0x384e885f0cf4e9632d55195e0b66429c565d0a60af52b14e73211320004ddd5f',\n  transactionIndex: 0,\n  event: 'commissioningAddEvent',\n  args: \n   { sender: '0x2595d94981fbf2abab6fb999c810ab47878fc645',\n     epc: 'urn:epc:id:sgtin:0614141.112345.654321',\n     disposition: 'urn:epcglobal:hls:disp:active' } }\n{ address: '0x7318ffe0cec891cdba72db4f8f1b48ae5116c281',\n  blockNumber: 1731,\n  logIndex: 1,\n  blockHash: '0x64c37edb40aeeea4c84ef8b033bbb47e3f78b526ed782d7057c6a6eb1826895e',\n  transactionHash: '0x384e885f0cf4e9632d55195e0b66429c565d0a60af52b14e73211320004ddd5f',\n  transactionIndex: 0,\n  event: 'locationLog',\n  args: \n   { epc: 'urn:epc:id:sgtin:0614141.112345.654321',\n     readPoint: 'urn:epc:id:sgln:0614141.00729.rp97',\n     bizLocation: 'urn:epc:id:sgln:0614141.00729.loc5' } }\n{ address: '0x7318ffe0cec891cdba72db4f8f1b48ae5116c281',\n  blockNumber: 1731,\n  logIndex: 2,\n  blockHash: '0x64c37edb40aeeea4c84ef8b033bbb47e3f78b526ed782d7057c6a6eb1826895e',\n  transactionHash: '0x384e885f0cf4e9632d55195e0b66429c565d0a60af52b14e73211320004ddd5f',\n  transactionIndex: 0,\n  event: 'timeLog',\n  args: \n   { epc: 'urn:epc:id:sgtin:0614141.112345.654321',\n     eventTime: '2006-06-25T00:01:00Z',\n     eventTimeZoneOffset: '-06:00' } }\n/media/SSD/node_modules/web3/lib/web3/filter.js:94\n                    callback(null, message);\n                    ^\n\nTypeError: callback is not a function\n    at /media/SSD/node_modules/web3/lib/web3/filter.js:94:21\n    at Array.forEach (native)\n    at /media/SSD/node_modules/web3/lib/web3/filter.js:93:26\n    at Object.callback (/media/SSD/node_modules/web3/lib/web3/filter.js:210:21)\n    at /media/SSD/node_modules/web3/lib/web3/method.js:142:25\n    at /media/SSD/node_modules/web3/lib/web3/requestmanager.js:89:9\n    at request.onreadystatechange (/media/SSD/node_modules/web3/lib/web3/httpprovider.js:114:13)\n    at dispatchEvent (/media/SSD/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:25)\n    at setState (/media/SSD/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:610:14)\n    at IncomingMessage.<anonymous> (/media/SSD/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:447:13)\n```\n"},{"labels":["bug",null],"text":"Hi,\n\nWeb3 parses event indexed args just like data args (https://github.com/ethereum/web3.js/blob/develop/lib/web3/event.js#L147), but in Solidity indexed arg can take only 32 bytes. So web3 fails to parse length of the value with the error: `Uncaught BigNumber Error: new BigNumber() not a base 16 number:`.\n\nSince version 0.1.7 of `solc` the topic is a hash of a value (#344), earlier it were the beginning 32 bytes of a value.\n"},{"labels":["bug"],"text":"Is this intentional? I see that doing an non-batched `eth_call` will append \"latest\" to the params if not already included\n\nBut this is not the case for batched requests. Specifying the `defaultBlock` param does not include one in the request params either. The javascript documentation does show a [batch request with the defautlBlock parameter](https://github.com/ethereum/wiki/wiki/JavaScript-API#batch-requests), which seems to indicate this could be a bug?\n"},{"labels":["bug"],"text":"In one of the contracts I have public mapping which is accessible by automatic accessor method.\nIn web3 I access it like this:\nTokens.balances(user_address, 'BTC')   // it's 2-level structure.\nAfter last web3.js update it stopped to work. Throws \"ivalid address\" error in formatters.js:270\nIf I execute web3.isAddress(user_address)  , it returns true.\n"},{"labels":[null,"bug"],"text":"Hello, I'm too lazy to fork this repo, but I fixed your fromAscii and toAscii functions\nYour from Ascii completely ignores the padding.\nYour to Asciii returns weird, ugly characters at the end of the result.\n\n``` js\nfromAscii = function(str, padding) {\n    var hex = '0x';\n    for (var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n    return hex + '0'.repeat(padding*2 - hex.length + 2);\n};\n\ntoAscii = function(hex) {\n    var str = '',\n        i = 0,\n        l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0) continue; // this is added\n        str += String.fromCharCode(code);\n    }\n    return str;\n};\n```\n\nHope this helps.\n"},{"labels":["bug"],"text":"eth.filter.watch() works as documented.\n\nHowever, I cannot get eth.filter.get() to work at all.\n\n```\nfilter = web3.eth.filter();\nfilter.get(function(error, result){ if (!error)   console.log(JSON.stringify(result)); }); // does not work\nfilter.options.fromBlock = 0;\nfilter.get(function(error, result){ if (!error)   console.log(JSON.stringify(result)); }); // does not work\nfilter.options.toBlock = 'latest';\nfilter.get(function(error, result){ if (!error)   console.log(JSON.stringify(result)); }); // does not work\nfilter.options.toBlock = 387229;\nfilter.get(function(error, result){ if (!error)   console.log(JSON.stringify(result)); }); // does not work\n```\n"},{"labels":["bug"],"text":"https://github.com/ethereum/web3.js/blob/d163c9dee41c5d641fdc4f8fa28ec78cd262cf50/lib/web3/method.js#L164-L166\n\nin the case of an error, it fails silently. should at least log to console.\n\n:smile_cat: \n"},{"labels":["bug"],"text":"Moved from https://github.com/ethereum/solidity/issues/84 : \nThe javascript interface to the following contract does not seem to encode or decode the values correctly:\nhttps://github.com/fivedogit/solidity-baby-steps/blob/abc6461b40271a1edd7b31e33bad3da1798a4894/contracts/57_fixedbytearray_to_byte_array.sol\n"},{"labels":["bug"],"text":"I am trying to hash the 32 bytes which are hex represented as '0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1'; in python the desired output is the first of the three given here:\n\n```\n>>> s = '0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1'\n >>> from ethereum.utils import sha3\n >>> sha3(s[2:].decode('hex')).encode('hex')\n'82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28'\n>>> sha3(s[2:]).encode('hex')\n'22ae1937ff93ec72c4d46ff3e854661e3363440acd6f6e4adf8f1a8978382251'\n>>> sha3(s).encode('hex')\n'd6c19311d63530fc619641d35f9d7dd795e79e5fa6218451e3ee7c66ec061d4c'\n```\n\nIn javascript, however, I get the following results depending on what parameters I put in:\n\n```\nweb3.sha3('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1')\nError: Invalid UTF-8 detected\nrequirement of using web3.fromAscii before sha3 is deprecated web3.min.js:1:16713\nnew usage: 'web3.sha3(\"hello\")' web3.min.js:1:16791\n \"see https://github.com/ethereum/web3.js/pull/205\" web3.min.js:1:16841\nif you need to hash hex value, you can do 'sha3(\"0xfff\", true)' web3.min.js:1:16906\nweb3.sha3('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1', true)\n\"d6c19311d63530fc619641d35f9d7dd795e79e5fa6218451e3ee7c66ec061d4c\"\n web3.sha3('3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1')\n\"22ae1937ff93ec72c4d46ff3e854661e3363440acd6f6e4adf8f1a8978382251\"\nweb3.sha3('3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1', true)\n\"22ae1937ff93ec72c4d46ff3e854661e3363440acd6f6e4adf8f1a8978382251\"\nweb3.sha3(web3.toAscii('0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1'))\n\"0f4e34bbedeb0e99897705101b1e49bd21b8718cc6951ded5812d3499d4ddebc\"\nweb3.sha3(web3.toAscii('3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1'))\n\"0f4e34bbedeb0e99897705101b1e49bd21b8718cc6951ded5812d3499d4ddebc\"\n```\n\nNone of these match up with the desired result, although some of them do match up with the results that I obtain from hashing the string without hex-decoding it, with and without the 0x prefix. The last two results are likely a result of Javascript's generally poor handling of strings that contain bytes >= 0x80.\n"},{"labels":["bug"],"text":"Given a simple contract\n\n```\ncontract test {\n    bytes32 public val;\n    mapping (bytes32 => bytes32) public keys;\n\n    function set(bytes32 key, bytes32 value) returns(bytes32) {\n        val = value;\n        keys[key] = value;\n        return keys[key];\n    }\n}\n```\n\nWhen getting the mapping value, after setting it via web3,js it always returns `0x` ie:\n\n```\n// assuming contract \"test\" has been created, mined and instantiated with web3\ntest.set( \"example\", \"myExampleValue\", { gas: 9999999, from: web3.eth.accounts[0] })\n// after mining transaction\ntest.val() // => \"0x6d794578616d706c6556616c7565000000000000000000000000000000000000\"\ntest.keys(\"example\") // => \"0x00...\"\n```\n\nReproduction steps/example and comparison to vm results: \nhttp://d11e9.github.io/universal-dapp/mappingBytes32.html\n"},{"labels":["bug"],"text":"`web3.sha3('0x80', true)` should return\n`56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421`\nbut it actually returns\n`6b03a5eef7706e3fb52a61c19ab1122fad7237726601ac665bd4def888f0e4a0`\n\nFurthermore, `web3.sha3(String.fromCharCode(0x80))` returns\n`0f50dcb7f76b82d3cf8c843adacd5cb4d1ce1b6de2ef1f2557f196d07c26f08e`\nwhich is not correct either.\n"},{"labels":["bug"],"text":"```\nWARNING in ./~/web3/lib/web3/httpprovider.js\nCritical dependencies:\n28:84-91 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/web3/lib/web3/httpprovider.js 28:84-91\n```\n"},{"labels":["bug"],"text":"```\nERROR in ./~/web3/lib/web3/ipcprovider.js\nModule not found: Error: Cannot resolve module 'net' in [...]/web3/lib/web3\n @ ./~/web3/lib/web3/ipcprovider.js 36:17-31\n```\n"},{"labels":["bug"],"text":"See this line: https://github.com/ethereum/web3.js/blob/master/lib/web3/eth.js#L174\n\nBackground: When I call `sendRawTransaction` with a signature of `sendRawTransaction(string, function)`, I receive an error stating I have passed the wrong number of input parameters. After stepping through the code, it turns out that because of the line above, the string I passed in gets clobbered leaving only the callback.\n\n@frozeman tells me `sendRawTransaction`'s inputFormatters array should instead be `[null]`\n"},{"labels":["bug",null],"text":"```\nError: could not decode, invalid type on field : not a number or string\n    at Object.module.exports.InvalidResponse (webpack:///./~/web3/lib/web3/errors.js?:35:16)\n    at RequestManager.send (webpack:///./~/web3/lib/web3/requestmanager.js?:76:22)\n    at Method.send (webpack:///./~/web3/lib/web3/method.js?:168:59)\n    at Filter.get (webpack:///./~/web3/lib/web3/filter.js?:197:40)\n```\n\nsince 0.6.0, same in 0.7.0 and develop, was working fine in 0.5.0\n"},{"labels":["bug"],"text":"``` js\n\"\\xc3\\xa4\\x00\\x00\\xc3\\xa4\"\n\"Ã¤Ã¤\"\n\nweb3.fromAscii(\"\\xc3\\xa4\\x00\\x00\\xc3\\xa4\")\n\"0xc3a40000c3a4\"\n\nweb3.toAscii('0xc3a40000c3a4')\n\"Ã¤\"\n```\n"},{"labels":["bug"],"text":"This leaves a number of connections in TIME_WAIT which could exhaust available connections to RPC depending on the user's configuration (i.e. max open files)\n\nNot sure it this should be handled on the client side or set on the server.\n\n```\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40653         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40439         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40452         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40609         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40365         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40627         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40353         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40230         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40286         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40348         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40605         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40699         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40449         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40464         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40476         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40416         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40740         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40301         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40511         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40471         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40629         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40369         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40193         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40417         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40455         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40703         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40423         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40274         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40473         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40383         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40574         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40419         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40406         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40524         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40651         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40518         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40620         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40263         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40280         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40744         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40341         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40306         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40307         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40219         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40538         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40669         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40555         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40695         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40202         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40549         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40615         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40179         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40565         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40671         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40593         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40700         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40293         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40548         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40358         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40420         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40541         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40275         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40679         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40305         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40733         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40371         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40581         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40288         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40373         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40650         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40451         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40743         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40506         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40251         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40688         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40559         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40638         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40285         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40323         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40282         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40298         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40283         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40643         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40454         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40711         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40564         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40255         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40567         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40718         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40248         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40368         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40621         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40622         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40550         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40604         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40380         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40719         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40566         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40634         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40468         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40660         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40290         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40485         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40484         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40488         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40199         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40370         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40628         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40345         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40239         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40458         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40579         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40294         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40258         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40528         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40418         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40631         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40198         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40475         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40357         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40240         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40375         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40401         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40478         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40250         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40625         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40681         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40317         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40385         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40705         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40526         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40554         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40498         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40546         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40360         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40389         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40396         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40289         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40611         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40472         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40340         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40247         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40560         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40636         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40424         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40320         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40272         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40512         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40404         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40499         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40723         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40456         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40582         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40390         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40414         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40350         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40495         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40509         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40612         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40328         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40710         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40517         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40187         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40295         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40474         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40678         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40491         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40680         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40632         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40297         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40428         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40487         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40520         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40610         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40213         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40262         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40647         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40575         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40588         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40580         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40479         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40745         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40269         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40316         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40568         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40747         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40694         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40188         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40339         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40465         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40646         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40513         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40725         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40603         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40352         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40318         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40656         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40393         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40521         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40470         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40394         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40483         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40665         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40685         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40736         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40261         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40642         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40337         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40399         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40467         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40648         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40184         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40732         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40608         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40645         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40516         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40552         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40343         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40309         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40599         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40421         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40592         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40403         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40596         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40372         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40196         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40313         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40489         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40630         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40402         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40503         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40585         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40335         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40312         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40587         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40649         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40379         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40346         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40515         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40735         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40287         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40220         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40182         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40542         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40321         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40545         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40741         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40185         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40734         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40492         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40426         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40722         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40409         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40717         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40698         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40494         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40292         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40531         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40563         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40701         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40183         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40677         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40570         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40529         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40381         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40738         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40724         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40259         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40237         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40310         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40400         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40572         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40709         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40481         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40583         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40434         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40273         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40639         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40713         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40614         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40635         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40391         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40314         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40453         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40573         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40205         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40246         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40395         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40302         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40500         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40218         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40300         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40607         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40514         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40537         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40180         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40584         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40388         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40457         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40527         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40398         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40675         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40598         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40412         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40600         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40606         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40626         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40267         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40641         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40405         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40397         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40410         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40351         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40437         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40221         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40707         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40714         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40673         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40344         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40435         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40194         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40523         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40440         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40633         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40244         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40276         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40504         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40227         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40502         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40223         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40407         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40623         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40363         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40413         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40436         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40349         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40561         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40447         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40597         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40746         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40364         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40658         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40652         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40490         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40241         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40690         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40362         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40586         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40322         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40662         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40571         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40551         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40544         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40668         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40522         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40284         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40327         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40296         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40602         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40342         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40442         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40197         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40689         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40325         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40264         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40191         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40556         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40716         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40461         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40304         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40266         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40308         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40493         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40347         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40569         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40613         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40319         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40226         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40425         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40664         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40252         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40519         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40539         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40271         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40387         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40338         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40392         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40249         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40257         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40212         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40721         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40469         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40329         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40720         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40366         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40448         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40382         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40422         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40530         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40200         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40210         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40361         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40209         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40543         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40222         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40208         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40195         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40590         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40508         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40462         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40235         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40384         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40659         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40644         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40415         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40547         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40663         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40336         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40233         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40236         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40589         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40482         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40270         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40496         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40243         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40655         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40378         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40408         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40190         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40441         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40411         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40684         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40510         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40214         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40591         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40324         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40192         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40486         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40704         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40640         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40260         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40299         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40595         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40367         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40181         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40315         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40505         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40507         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40466         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40540         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40242         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40616         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40480         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40654         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40268         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40355         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40594         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40501         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40525         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40460         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40334         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40661         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40291         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40687         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40438         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40696         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40742         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40359         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40326         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40377         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40431         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40601         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40374         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40281         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40553         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40477         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40497         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40330         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40311         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40683         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40186         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40429         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40459         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40670         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40691         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40672         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40557         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40356         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40624         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40657         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40686         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40637         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40303         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40715         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40231         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40430         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40256         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40558         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40562         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40450         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40702         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40386         TIME_WAIT   -\ntcp        0      0 127.0.0.1:8080          127.0.0.1:40427         TIME_WAIT   -\n```\n"},{"labels":["bug"],"text":"using web3.js 0.5.0 via atmospherejs.com\n\nwhen an eth_call returns 0x, SolidityFunction.unpackOutput slices it into \"\" which gets passed to decodeParams and an eventual error.  Here's the trace:\n\n```\nException in template helper: BigNumber Error: new BigNumber() not a base 16 number: \n    at raise (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:6755:25)\n    at http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:6743:33\n    at new BigNumber (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:5790:28)\n    at require.1.SolidityType.formatOutput (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:132:22)\n    at http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:252:29\n    at Array.map (native)\n    at require.1.SolidityCoder.decodeParams (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:249:18)\n    at require.18.SolidityFunction.unpackOutput (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:2810:24)\n    at require.18.SolidityFunction.call (http://localhost:3000/packages/ethereum_web3.js?8c764ae35219eaf9f3601ba16b9a461c7fca0972:2831:21)\n```\n"},{"labels":["bug"],"text":"fromAscii in lib/utils/utils.js should either reject non-ascii unicode strings or hex-encode them in e.g. utf8 (and then be renamed).\nThe string `\"xǺ\"` (= `\"x\\u01fa\"`) is encoded to `\"0x781fa\"`, i.e. the `Ǻ` is not correctly padded to an even number of hex characters.\n"},{"labels":["bug"],"text":"The `toAscii` function in https://github.com/ethereum/web3.js/blob/25d9f5121735b76481b2518fe49ae285b75bac4d/lib/utils/utils.js#L86 stops once it encounters a zero byte.\n\nSince javascript strings do support zero bytes and the current decoding throws away data, is this really justified?\n"},{"labels":["bug"],"text":"Currently bytes sometimes get decoded wrong, which make it impossible to use bytes as non-strings, because you can't reliable encode them back to bytes.\n\n``` js\nweb3.toAscii('731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b')\n\"s:ü\"\n\nweb3.toAscii('731a3afc')\n\"s:ü\"\n```\n\nInstead we need to re-introduce the `string` type in solidity and only decode this one to strings and keep bytes as is: https://www.pivotaltracker.com/n/projects/1189488/stories/95173586\n"},{"labels":["bug"],"text":"After calling `MyFilter.stopWatching()` i get:\n\n``` js\nUncaught TypeError: Cannot read property 'callback' of undefined    web3.js:3689\n```\n\npointing to:\n\n``` js\nRequestManager.prototype.poll = function () {\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n    if (!this.polls.length) {\n        return;\n    }\n\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return;\n    }\n\n    var payload = Jsonrpc.getInstance().toBatchPayload(this.polls.map(function (data) {\n        return data.data;\n    }));\n\n    var self = this;\n    this.provider.sendAsync(payload, function (error, results) {\n        // TODO: console log?\n        if (error) {\n            return;\n        }\n\n        if (!utils.isArray(results)) {\n            throw errors.InvalidResponse(results);\n        }\n\n        results.map(function (result, index) {\n            result.callback = self.polls[index].callback; // <- ERROR is here\n            return result;\n        }).filter(function (result) {\n            var valid = Jsonrpc.getInstance().isValidResponse(result);\n            if (!valid) {\n                result.callback(errors.InvalidResponse(result));\n            }\n            return valid;\n        }).filter(function (result) {\n            return utils.isArray(result.result) && result.result.length > 0;\n        }).forEach(function (result) {\n            result.callback(null, result.result);\n        });\n    });\n};\n```\n\nIt seems like the results returned still have the same index, which does fit with the callback index anymore.\nA quick fix would be to check `if(self.polls[index])`, but we probably should better check if the poll is not firing the non-existing filter anymore, as i got 101 errors of the above type.\n"},{"labels":["bug"],"text":"We need to make the optional `defaultBlock` and `callback` parameter possible for:\n- `new MyContract({from: ...} [, callback])`\n- `myContract.myMethod(param1, param2 [, {from: ...}] [, defaultBlock] [, callback])`\n- `myContract.myMethod.call(param1, param2 [, {from: ...}] [, defaultBlock] [, callback])`\n- `myContract.myMethod.sendTransaction(param1, param2 [, {from: ...}] [, callback])`\n"},{"labels":["bug",null],"text":"The idea is to allow specifying potentially nested topic lists to create complex filter criteria. At the highest level the `topics` argument is still a list, but each element may be one of:\n- string: as used previously\n- null: signalling a wildcard/match-all\n- string array: to match any element within\n\nA few samples:\n\n``` javascript\nshh.filter({}).watch(function(err, msg) {\n    console.log(\"Empty catcher:\", msg)\n})\nshh.filter({topics: [\"singleton\"]}).watch(function(err, msg) {\n    console.log(\"Single catcher:\", msg)\n})\nshh.filter({topics: [\"a\", \"b\"]}).watch(function(err, msg) {\n    console.log(\"Multi catcher:\", msg)\n})\nshh.filter({topics: [[\"1\", \"2\"]]}).watch(function(err, msg) {\n    console.log(\"Binary catcher:\", msg)\n})\nshh.filter({topics: [null, \"x\"]}).watch(function(err, msg) {\n    console.log(\"Wildcard catcher:\", msg)\n})\n```\n\nThese currently produce these JSON requests, the last two of which seem wrong\n\n``` javascript\n[{\"topics\":[]}]\n[{\"topics\":[\"0x73696e676c65746f6e\"]}]\n[{\"topics\":[\"0x61\",\"0x62\"]}]\n[{\"topics\":[\"0x5b2231222c2232225d\"]}]\n[{\"topics\":[\"0x6e756c6c\",\"0x78\"]}]\n```\n"},{"labels":["bug"],"text":"I can pass the default block to the call function like described in the documentation:\n\nweb3.eth.call(callObject [, defaultBlock] [, callback]);\n\nHowever if I call a function on my contract I dont see any possibility to pass the defaultblock:\n\ncontract.call().function_name();\n"},{"labels":["bug"],"text":""},{"labels":["bug"],"text":"When running `gulp build` after 123098ce79562be0d4ce87e15bcebe6a970f1ff6:\n\n```\n$ gulp build\n[12:09:03] Using gulpfile ~/Projects/ethereum/ethereum.js/gulpfile.js\n[12:09:03] Starting 'lint'...\n/Users/mids/Projects/ethereum/ethereum.js/lib/abi.js: line 49, col 12, Missing 'new' prefix when invoking a constructor.\n\n1 error\n/Users/mids/Projects/ethereum/ethereum.js/lib/autoprovider.js: line 38, col 9, 'web3' is not defined.\n/Users/mids/Projects/ethereum/ethereum.js/lib/autoprovider.js: line 47, col 29, 'web3' is not defined.\n/Users/mids/Projects/ethereum/ethereum.js/lib/autoprovider.js: line 61, col 33, 'web3' is not defined.\n/Users/mids/Projects/ethereum/ethereum.js/lib/autoprovider.js: line 63, col 33, 'web3' is not defined.\n\n4 errors\n/Users/mids/Projects/ethereum/ethereum.js/lib/contract.js: line 50, col 28, 'web3' is not defined.\n/Users/mids/Projects/ethereum/ethereum.js/lib/contract.js: line 56, col 28, 'web3' is not defined.\n\n2 errors\n/Users/mids/Projects/ethereum/ethereum.js/lib/main.js: line 265, col 65, Expected '===' and instead saw '=='.\n/Users/mids/Projects/ethereum/ethereum.js/lib/main.js: line 276, col 95, Don't make functions within a loop.\n/Users/mids/Projects/ethereum/ethereum.js/lib/main.js: line 277, col 21, Expected '===' and instead saw '=='.\n\n3 errors\n[12:09:04] Finished 'lint' after 266 ms\n[12:09:04] Starting 'clean'...\n[12:09:04] Finished 'clean' after 2.4 ms\n[12:09:04] Starting 'build'...\n\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: Parse Error: Line 29: Unexpected token * while parsing file: /Users/mids/Projects/ethereum/ethereum.js/lib/websocket.js\n```\n"},{"labels":["bug"],"text":"I pass the transact function two parameter say: \"0xf34926b54a83a89934e7034b5b5865cd8e99b220\" and \"5000\" with a function id of 0. This creates the below transaction and discards the 132 LSB :\n\ne9e8c4c57cdee43ea0da8bd400584a39e916088ce179cd517c797c42e6dfc88c\nFrom: 8ad211c31afb337c465ab1b07813a52662cd59e0\nTo: c9923753f8c56c9d9ff8c60da6171252505d8e07\nValue: 0 wei   #81\nGas price: 10000 Gwei\nGas: 145983\n0000 ??????????????I& 00 00 00 00 00 00 00 00 00 00 00 00 00 f3 49 26 \n0010 ?J?????????????? b5 4a 83 a8 **00 00 00 00 00 00 00 00 00 00 00 00** \n0020 ???????????????? **00** 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n0030 ???????????????? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13 \n0040 ?                88 \n\nI am not sure if this is a bug or something I am doing incorrectly when I create the 'contract' object. In my description I am declaring the input parameters as type uint256 as this code was created in serpent. There is no documentation on 'contract' objects so I am not sure if I am doing this right..\n"}]