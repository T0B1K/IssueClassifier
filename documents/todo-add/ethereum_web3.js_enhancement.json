[{"labels":[null,"enhancement"],"text":"Hi,\r\n\r\nI'm creating this issue because at Nomic Labs and Tenderly we've been working on removing node-gyp based native dependencies form the ecosystem. We already mentioned this in other issues/pull requests here. There's more info here: https://github.com/ethereum/js-organization/issues/18\r\n\r\nOne of the few packages that requires recompiling native dependencies on install is `web3`, as it uses `websocket`. Note that as `web3` is used by lots of other tools, this project won't finish here, but we need to coordinate with many `web3` consumers so they update their versions.\r\n\r\nIntially, we tried replacing `websocket` with `wc`, but that's not feasible, so we tried to fix this upstream. There's already [a PR](https://github.com/theturtle32/WebSocket-Node/pull/302) doing it, which the author of `websocket` said is ok but never merged nor released.\r\n\r\nI'm opening this issue to discuss if `web3` shouldn't fork `websocket` and incorporate those changes instead of waiting for an upstream release. This would let us continue this effort while we wait for upstream `websocket` to catch up.\r\n\r\nThis decision shouldn't be taken lightly, so here's an explanation of what the fork does:\r\n\r\n- `websocket` has two tiny modules that are written in C -- just utf8 validation and some `Buffer` helpers.\r\n- These are compiled whenever you install `websocket`\r\n- These modules were copied verbatim from `wc`\r\n- `wc` keeps those modules as separate npm packages\r\n- Those packages were migrated to N-API, so they don't require recompilation now\r\n- The `websocket` PR removes the imported modules, and used `wc`'s npm packages instead.\r\n- There aren't any functional changes in the PR\r\n\r\nWhat do you think?\r\n\r\n/cc @nebojsa94"},{"labels":[null,null,"enhancement"],"text":"#### Expected behavior\r\nWhen I'm using a websocket or other subscription-capable provider, I'd assume that a single `newHeads` subscription would be all that's necessary for web3 to be notified when my transaction is confirmed.\r\n\r\n#### Actual behavior\r\nWhen I'm using a websocket or other subscription-capable provider, web3.js sets up one `newHeads` subscription for every outstanding transaction.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Send a transaction.\r\n2. Quickly send another one before the previous one is mined.\r\n3. Count the number of `newHeads` subscriptions active on the client (it'll have increased by two).\r\n\r\n#### Environment\r\n\r\nI'm running into this primarily in a NodeJS environment while performance testing Hyperledger Besu.\r\n\r\nAdmittedly this likely isn't a major issue for public Ethereum, but it becomes quite substantial when submitting a high volume of transactions to a private network. For example, on a network with a 2s block time (typical for IBFT 2 networks), if the user is sending 100 transactions per second, there will be up to 200 `newHeads` subscriptions active on the client, all from a single user."},{"labels":[null,"enhancement",null],"text":"#3614 brought to light that the testing being conducted on web3-utils is lacking. Some basic unit tests should be added to cover some of the more common cases."},{"labels":["enhancement"],"text":"#### Expected behavior\r\n\r\nSome old code was pointed out by a contributed on Gitter channel:\r\n\r\nhttps://github.com/ethereum/web3.js/blob/a5e832fc20088cf4c4e916bc0ec3107ceb4428d0/packages/web3-core-requestmanager/src/batch.js\r\n\r\nThis is for doing multiple API calls parallel from 2015.\r\n\r\n#### Actual behavior\r\n\r\nModern JavaScript has similar functionality with `Promise.all` and some other Promise resolvers. Just make all your API calls as promises and then wait for all of these Promises to resolve once.\r\n\r\nI would suggest deprecating this code and then removing it in the next major release.\r\n\r\nHere is also an alternative if you want to have the responses, e.g. the call return values, recorded on an object:\r\n\r\nhttps://stackoverflow.com/questions/29292921/how-to-use-promise-all-with-an-object-as-input/51722274#51722274\r\n"},{"labels":[null,"enhancement"],"text":"### Expected behavior\r\n\r\nWhen a method returns an array of structs (e.g. `MyStruct[]`), web3js should decode it to an array of objects that have the same shape as MyStruct.\r\n\r\n#### Actual behavior\r\n\r\nWhen a method returns an array of structs (e.g. `MyStruct[]`), web3js decodes it as an array of arrays.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Deploy test contract\r\n\r\n```solidity\r\npragma solidity >= 0.5.0 < 0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract MyContract {\r\n  struct Entry {\r\n    uint inputAmount;\r\n    uint outputAmount;\r\n  }\r\n\r\n  Entry[] public entries;\r\n\r\n  constructor() public {\r\n    Entry memory entry = Entry({\r\n      inputAmount: 1,\r\n      outputAmount: 2\r\n    });\r\n    entries.push(entry);\r\n  }\r\n\r\n  // workaround: otherwise web3js can only index into the array\r\n  function entriesArray() external view returns (Entry[] memory) {\r\n    return entries;\r\n  }\r\n}\r\n```\r\n\r\n2. Call entriesArray() getter\r\n\r\n```javascript\r\nconst data = await myContract.methods.entriesArray().call();\r\n// returns [[\"1\", \"2\"]] but it should return:\r\n// [{ inputAmount: \"1\", outputAmount: \"2\" }]\r\n```\r\n\r\n#### Environment\r\n\r\n```\r\nweb3 1.2.9\r\n```"},{"labels":[null,null,"enhancement"],"text":"There are 3 CI jobs marked `continue-on-error` which always pass. \r\n\r\nWould be nice if there was an additional cue in the UI about whether they failed or not."},{"labels":[null,"enhancement"],"text":"RE #3420 @nivida noted in gitter that it would be better to reconstitute the failed transaction for replay as a call without making any extra server reqs. In #3420 the call params are obtained by fetching the transaction record.  \r\n\r\nAn equally terse and more efficient way would be to use [ethers.utils.parseTransaction][1]. \r\n\r\n[1]: https://docs.ethers.io/ethers.js/html/api-utils.html#transactions"},{"labels":[null,null,null,"enhancement"],"text":"It would be helpful if the PromiEvent that is returned when sending transactions fired off events that provided finer-grained detail on the transaction submission process. There are numerous benefits to this:\r\n\r\n- Makes it easier to ensure that transactions are submitted in order (see #1846)\r\n- Makes transaction timing in performance benchmarking tools more precise\r\n- Makes it easier to monitor the transaction submission process for debugging purposes\r\n\r\n#### Expected behavior\r\nPromiEvents for transactions would fire the following events\r\n\r\n| Event | Description |\r\n| -------- | --------------- |\r\n| `sending` | Fired immediately before transmitting the transaction request - connection to provider must be open when this is fired. Intermediate requests such as `eth_chainId`, `eth_estimateGas`, or `eth_gasPrice` must be completed prior this event being fired. |\r\n| `sent` | Fired immediately after the request body has been written to the client, but before the transaction hash is received |\r\n| `transactionHash` | Behaves as it does today |\r\n| `confirmation` | Behaves as it does today, but includes the block hash for the latest block in the event handler arguments |\r\n| `receipt` | Behaves as it does today |\r\n| `error` | Behaves as it does today |\r\n\r\n#### Actual behavior\r\n\r\nEvents are only fired for `transactionHash`, `receipt`, `confirmation`, and `error`. `Confirmation` events don't include the current block hash, meaning that applications must fetch it if they need that information.\r\n\r\n#### Versions\r\nApplies to all versions in existence today (`<=v1.2.6`, `v2.0.0-alpha`, and `v2.0.0-alpha.1`).\r\n\r\n#### Related Issues\r\n\r\n- #1846 \r\n- hyperledger/caliper#776"},{"labels":[null,null,"enhancement"],"text":"There was the suggestion by @ryanio in [this comment](https://github.com/ethereum/web3.js/pull/3376#issuecomment-590454282) to move the CI to GitHub Actions, being currently run on Travis, this was perceived positive by @cgewecke.\r\n\r\nI would tend to give this some stronger priority cause I think workflow of bringing PRs up-to-date and have the checks pass to be mergeable would profit a lot by CI being faster and better integrated. Currently it is somewhat arduous to wait for PR updates to re-finish with the CI run.\r\n\r\n@ryanio Can you take on this? Respectively other voices on this here?\r\n\r\nReferences:\r\n\r\n- [.travis.yml](https://github.com/ethereum/web3.js/blob/1.x/.travis.yml)"},{"labels":[null,null,null,null,"enhancement"],"text":"From what I understand the new build pipeline (https://github.com/ethereum/web3.js/pull/3160) support ESM.\r\nI'm trying to understand how far are we to support something like Pika.dev ? (https://www.pika.dev/search?q=web3) that requires a web-optimized \"module\" entrypoint in `package.json` like `\"module\": \"lib/esm/index.js\"`\r\n\r\nAs you probably know, the Pika people are trying to remove a lot of pain & weight in modern web tooling by leaving behind support for antique browsers. In the Ethereum space it totally makes sense as we most likely not gonna try to support IE 11.\r\nHaving web3.js support it would be pretty sweet & would unlock hopefully the whole ecosystem."},{"labels":["enhancement",null],"text":"### Description\r\n\r\nWith the last security patch release did we all noticed that the existing release guidelines aren't prepared for such an emergency case. The goal of this issue would be to discuss this in-depth and to create a related PR with the required improvements of the release guideline. Those rules should also be defined for all EF JS Team projects (A related issue does already exist [here](https://github.com/ethereum/js-organization/issues/6)).\r\n\r\nBy side of the required improvements of the guideline have we to overthink the whole process to provide the \"non-involved\" contributors a better overview during the release process and to automate as much as we can to prevent us from human failure. This could, for example, be achieved by introducing [conventional commits](http://conventionalcommits.org/) and automating the release through [semantic-release](https://github.com/semantic-release/semantic-release). \r\n\r\nRelated issues:\r\n\r\n- [Automating of Release](https://github.com/ethereum/web3.js/issues/3233)\r\n- [Moving of the CI pipeline to Azure](https://github.com/ethereum/web3.js/issues/3034)\r\n  + This could probably be the right point to move anything over to Azure or GitHub Actions\r\n\r\n#### Required Release Guideline Changes\r\n\r\n- The rules have to distinct between patch, minor, and major version releases.\r\n- Special rules for security patches have to be defined.\r\n- Defining of clear rules for the changeset a release PR can have.\r\n  + This is probably something that only does affect the emergency case.\r\n- A list of tasks we have to do during the release and after it got successfully published\r\n- Defining of different tracks we do have on npm\r\n\r\n\r\nFeel free to drop a comment here with your ideas and what you think about the proposed improvements from above. @holgerd77 @alcuadrado @michaelsbradleyjr @iurimatias @gnidan @cgewecke @joshstevens19 @JosefJ"},{"labels":[null,"enhancement"],"text":"#### Expected behavior\r\n\r\n``eth.sendSignedTransaction`` should return the revert reason string as expected.\r\n\r\n#### Actual behavior\r\n\r\n``eth.sendSignedTransaction`` does get executed but the signed transaction doesn't get decoded to get the revert reason string as expected.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1.  call ``eth.sendSignedTransaction`` and the revert instruction opcode does get called.\r\n\r\n#### Versions\r\nweb3.js: latest\r\n"},{"labels":[null,null,"enhancement"],"text":"#### Expected behavior\r\n\r\nwallet can be encrypted to keyStore with `aes-256-ctr` algorithm\r\n\r\n#### Actual behavior\r\n\r\n`browserify-cipher` throw an error:\r\n\r\n```bash\r\nError: Invalid key length\r\n    at Cipheriv.createCipherBase (internal/crypto/cipher.js:79:18)\r\n    at Cipheriv.createCipherWithIV (internal/crypto/cipher.js:115:20)\r\n    at new Cipheriv (internal/crypto/cipher.js:217:22)\r\n    at Object.createCipheriv (crypto.js:109:10)\r\n    at Accounts.encrypt (/Users/young/Documents/eth/web3.js/node_modules/web3-eth-accounts/src/index.js:406:23)\r\n    at Object.encrypt (/Users/young/Documents/eth/web3.js/node_modules/web3-eth-accounts/src/index.js:112:22)\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nwith the code \r\n\r\n```javascript\r\nconst Web3 = require('web3');\r\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\nconst wallet = web3.eth.accounts.create();\r\nwallet.encrypt('12345678', {cipher: 'aes-256-ctr'})\r\n```\r\n\r\n#### Logs\r\n\r\n#### Versions\r\nNode: 10.16.0\r\nSystem: macos\r\n![image](https://user-images.githubusercontent.com/52150262/72801091-c31c1000-3c83-11ea-8f29-b8642043df17.png)\r\n\r\n#### Reasons\r\n1. in this [file](https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/index.js#L414), the cipher key length has been limited in 16, it should be 32 if cipher is `aes-256-ctr`\r\n"},{"labels":[null,null,"enhancement"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I was looking for an solution on stackoverflow or something else.\r\n3. I was looking for an identical issue.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nENS should be supported on Goerli testnet. It is deployed at address `0x112234455c3a32fd11230c42e7bccd4a84e02010`.\r\n\r\n#### Actual behavior\r\nThis error is thrown:\r\n```\r\nENS is not supported on network: \"private\"\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\nTry to call `web3.eth.ens.getAddress(name)` when connected to a Goerli Provider.\r\n\r\n#### Versions\r\nweb3.js 2.0.0-alpha.1\r\n"},{"labels":[null,null,null,"enhancement",null],"text":"@lautarodragan has recommended the tool [semantic-release](https://github.com/semantic-release/semantic-release) to automate the release process of web3.js. On a first view does it actually look like something we can and should use.\r\n\r\nHighlights of semantic-release:\r\n\r\n- Fully automated release\r\n- Enforce Semantic Versioning specification\r\n- New features and fixes are immediately available to users\r\n- Notify maintainers and users of new releases\r\n- Use formalized commit message convention to document changes in the codebase\r\n- Integrate with your continuous integration workflow\r\n- Avoid potential errors associated with manual releases\r\n- Support any package managers and languages via plugins\r\n- Simple and reusable configuration via shareable configurations\r\n\r\nReleases can be triggered over the commit message and [specified key-words](https://github.com/semantic-release/semantic-release#commit-message-format).\r\n\r\nPhilosophy behind:\r\n\r\n- [Release Early, Release Often](https://haacked.com/archive/2011/04/20/release-early-and-often.aspx/)\r\n\r\n#### Expected behavior\r\n\r\nweb3.js patch, minor, or major release does get published immediately after the merge of a PR into the default branch.\r\n\r\n#### Actual behavior\r\n\r\nReleases do have to be done manually.\r\n"},{"labels":[null,null,null,"enhancement"],"text":"This is a tracking issue for improvements the ENS module - collecting various tickets for a push to improve.\r\n\r\n- [x] Increase test coverage (esp. ResolverMethodHandler)\r\n- [x] Increase code style consistency  \r\n- [x] E2E tests\r\n- [ ] Reduce impact on bundle size ( see #3179 )\r\n- [x] Add option to use custom registry addresses ( #3010 )\r\n- [ ] Support full registry API ( comments #2683 )\r\n- [ ] Support reverse lookup ( #2683 )\r\n- [ ] ENS name resolution wherever addresses are expected ( #540 )\r\n- [x] Add ENS support for Goerli testnet (#3252)\r\n- [ ] Improve the detection of the current network and the selection of the ENS registry\r\n  + Since all deployed registries do have the same address can we remove the ``config.js`` file \r\n- [ ] Fix error handling for callbacks (UnhandledPromiseRejectionWarning)\r\n\r\n"},{"labels":[null,"enhancement"],"text":"<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I've read the documentation.\r\n2. I was looking for an solution on stackoverflow or something else.\r\n3. I was looking for an identical issue.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\nSame as with non-BN numbers\r\n```js\r\n> coder.encodeParameters(['uint256'], [42])\r\n'0x000000000000000000000000000000000000000000000000000000000000002a'\r\n```\r\n#### Actual behavior\r\n```js\r\n> coder.encodeParameters(['uint256'], [new BN(42)])\r\nThrown:\r\nError: invalid number value (arg=\"\", coderType=\"uint256\", value=\"2a\")\r\n    at Object.throwError (./web3_test/node_modules/ethers/utils/errors.js:68:17)\r\n    at CoderNumber.encode (./web3_test/node_modules/ethers/utils/abi-coder.js:353:20)\r\n    at ./web3_test/node_modules/ethers/utils/abi-coder.js:605:59\r\n    at Array.forEach (<anonymous>)\r\n    at pack (./web3_test/node_modules/ethers/utils/abi-coder.js:604:12)\r\n    at CoderTuple.encode (./web3_test/node_modules/ethers/utils/abi-coder.js:764:16)\r\n    at AbiCoder.encode (./web3_test/node_modules/ethers/utils/abi-coder.js:897:77)\r\n    at ABICoder.encodeParameters (./web3_test/node_modules/web3-eth-abi/src/index.js:96:27) {\r\n  reason: 'invalid number value',\r\n  code: 'INVALID_ARGUMENT',\r\n  arg: '',\r\n  coderType: 'uint256',\r\n  value: BN { negative: 0, words: [ 42 ], length: 1, red: null }\r\n}\r\n> \r\n```\r\n\r\nThis breaks any abi encoding for contract methods, so I can't pass a BN to any method accepting uint. Like `Contract.methods.method(BN).encodeABI | call | send`\r\n#### Steps to reproduce the behavior\r\n```js\r\n> const BN = require('bn.js')\r\nundefined\r\n> const coder = require('web3-eth-abi')\r\nundefined\r\n> coder.encodeParameters(['uint256'], [42])\r\n'0x000000000000000000000000000000000000000000000000000000000000002a'\r\n> coder.encodeParameters(['uint256'], [new BN(42)])\r\nThrown:\r\n...\r\n```\r\n\r\n#### Logs\r\n\r\n#### Versions\r\n```\r\nnode --- v12.13.0\r\nweb3 --- 1.2.4\r\n```\r\n\r\nThe problem is actually in ethers.js, ethers-io/ethers.js#653\r\nI only create this issue to track progress on that and for visibility\r\nIf you could just update your dependencies when it is fixed, would be great.\r\n"},{"labels":[null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\nThe value was wrong in a `String` field of the `returnValues`.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCalling `contract.events.Authorized({ fromBlock: 8806769 }, function(error, event) {\r\n   console.log(event);\r\n})`\r\nshould return \r\n\r\n```\r\n......\r\n\"returnValues\":{\"0\":\"GeekGit\",......,\"name\":\"GeekGit\",......}\r\n......\r\n```\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nBut  returned \r\n\r\n```\r\n......\r\n\"returnValues\":{\"0\":\"0xef563641eef48cfa4dddd5f98049665d481ac4507793218a74d393e836c49d67\",......,\"name\":\"0xef563641eef48cfa4dddd5f98049665d481ac4507793218a74d393e836c49d67\",......}\r\n......\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n    1. Import `web3`\r\n    2. Set the provider to `WebsocketProvider`, i.e. infura\r\n    3. Fetch the block\r\n\r\n```\r\ncontract.events.Authorized({ fromBlock: 8806769 }, function(error, event) {\r\n   console.log(event);\r\n});   \r\n```\r\n\r\n\r\n\r\n\r\nABI JSON \r\n\r\n```\r\n      \"events\": {   \"0x6f7089ad02947bd25268f2724218c84efd1ec156c5ad2d3366599cae89ff71f9\": {\r\n          \"anonymous\": false,\r\n          \"inputs\": [\r\n            {\r\n              \"indexed\": true,\r\n              \"internalType\": \"string\",\r\n              \"name\": \"name\",\r\n              \"type\": \"string\"\r\n            },\r\n            {\r\n              \"indexed\": true,\r\n              \"internalType\": \"address\",\r\n              \"name\": \"owner\",\r\n              \"type\": \"address\"\r\n            },\r\n            {\r\n              \"indexed\": false,\r\n              \"internalType\": \"address\",\r\n              \"name\": \"from\",\r\n              \"type\": \"address\"\r\n            }\r\n          ],\r\n          \"name\": \"Authorized\",\r\n          \"type\": \"event\",\r\n          \"signature\": \"0x6f7089ad02947bd25268f2724218c84efd1ec156c5ad2d3366599cae89ff71f9\"\r\n        }\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* nodejs: v8.15.1\r\n* NPM: 6.9.2\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"(This proposal is continuation of #2682, a companion to #3070, and a tracking issue for all integration testing related topics for the 1.x branch) \r\n\r\n##  E2E\r\nWeb3 1.x's stability might benefit from following [ethereum/solidity][8]'s example and E2E testing its latest state against large projects that already use the package.  Solidity does this [nightly in CI][1] - they build a new solc, swap it into Zeppelin, Gnosis and Colony and run those projects' own tests using the new version.  \r\n\r\nSome targets that seem promising for this purpose here are: \r\n- [x] [@truffle/contract][3] \r\n- [ ] [gnosis/safe-react][4] \r\n\r\n**Technical**\r\n\r\nWeb3 is a Lerna monorepo and so are two of the potential targets listed above. Because its repo structure and published formats are quite different it won't just `npm install` from a github url. \r\n\r\nHowever, there's a nice tool called [verdaccio][5] that lets you set up a local private npm registry in CI. Web3 could \"publish\" a candidate branch to this ephemeral registry, clone an E2E target (ex: embark) and install the new web3 via npm proxy. Then run the target's tests.\r\n\r\nIt's also possible to chain publications together. For example, openzeppelin-solidity uses truffle so you could:\r\n+ publish a new Web3, \r\n+ install it in Truffle, \r\n+ publish a new Truffle, \r\n+ swap the new Truffle into Zeppelin and run Zeppelin's tests.\r\n\r\nAdditionally: \r\n+ could be used to verify that built assets are located correctly and usable. \r\n+ [ethereum-js][9] may migrate some things to monorepo in future. Any solution developed here might pay dividends there as well. \r\n\r\n## Integration\r\n\r\n**Clients**\r\n\r\nTo recap #2682 - Web3 1.x's unit tests rely primarily on mocked server responses. They're super fast but some things are hard to validate without testing against a node. There's also variance in behavior between the three most widely used clients. It would be good to create a small suite of tests for stuff like:\r\n\r\n+ simple send and call\r\n+ events\r\n+ subscriptions\r\n+ errors \r\n+ transaction signing \r\n\r\n..and make sure everything executes as expected across this matrix:\r\n\r\n| Client       | instamine | automine 2s |\r\n|--------------|-----------|-------------|\r\n| geth --dev   |     x     |      x      |\r\n| parity --dev |     x     |      x      |\r\n| ganache-cli  |     x     |             |\r\n\r\n\r\n**Client Helpers**\r\n\r\nTo simplify things in CI and make this work portable, Web3 could also publish small Node cli wrappers for the dockerized Parity and Geth dev clients.\r\n\r\nThese would:\r\n+ pull down any client version from docker hub \r\n+ abstract away most of command config flags, \r\n+ open all APIs, \r\n+ have many well-funded accounts\r\n+ make it easy for people to generate reproduction cases for client specific problems. \r\n\r\nSomething that launches like this:\r\n```\r\n$ web3-geth-dev --period 2 --tag latest\r\n```\r\n\r\nSee also: #2688 and #2693: I think access to these clients can be provided in a flexible way with JS wrappers alone - e.g without building any containers or using docker compose. \r\n  + [nomiclabs/builder-docker][10] provides a nice API for the general case of managing docker published resources from JS. \r\n  + [A basic geth dev wrapper][11] I've used in CI for other projects. Not perfect at all but [works][12]. \r\n\r\n- [ ] Parity dev Node cli wrapper\r\n- [x] Geth dev Node cli wrapper\r\n\r\n**Network Emulators**\r\n\r\n- [ ] Dropped connections are frequently mentioned in the issues. Emulate with [comcast][7]?\r\n\r\n## Installation\r\n\r\n- [x] Windows: see #2971, #3033\r\n- [ ] Mac OSX\r\n\r\nThe EF has an account with CircleCI. (EthereumJS uses it). They let you specify which OS a job is run with [pretty easily][14].\r\n\r\ncf: #3034 (Azure Pipelines)\r\n\r\n## Other stuff  :elephant:\r\nThere is definitely other stuff to test. Would be grateful for any and all community suggestions about this topic. \r\n\r\n- [ ] [generic create-react-app][15]\r\n- [x] [headless browser testing for chromium, firefox, safari][16] (PR #3146)\r\n\r\n\r\n[1]: https://github.com/ethereum/solidity/blob/develop/.circleci/config.yml#L590-L640\r\n[2]: https://github.com/embark-framework/embark\r\n[3]: https://github.com/trufflesuite/truffle\r\n[4]: https://github.com/gnosis/safe-react\r\n[5]: https://verdaccio.org/docs/en/e2e\r\n[7]: https://github.com/tylertreat/Comcast\r\n[8]: https://github.com/ethereum/solidity\r\n[9]: https://github.com/ethereumjs\r\n[10]: https://github.com/nomiclabs/buidler/tree/master/packages/buidler-docker\r\n[11]: https://github.com/cgewecke/geth-dev-assistant\r\n[12]: https://travis-ci.org/cgewecke/eth-gas-reporter/jobs/591355142#L1214\r\n[13]: https://github.com/ethereum/web3.js/issues/2971\r\n[14]: https://circleci.com/docs/2.0/hello-world-windows/\r\n[15]: https://github.com/ethereum/web3.js/issues/3018\r\n[16]: https://github.com/ethereum/web3.js/issues/2978"},{"labels":[null,"enhancement"],"text":"### Description\r\n\r\nI tried to include Web3 using a CDN:\r\n\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/web3@1.2.1/src/index.min.js\"></script>\r\n```\r\n\r\n#### Expected behavior\r\n\r\nWeb3 is available in the browser.\r\n\r\n#### Actual behavior\r\n\r\nIt breaks.\r\n\r\n```js\r\nUncaught ReferenceError: require is not defined\r\n    at index.js:31\r\n```\r\n\r\n#### Alternatives you tried\r\n\r\nI tried loading it directly from GitHub (using `\"https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.2.1/dist/web3.min.js\",`), but this breaks complaining about generators.\r\n\r\n```js\r\nUncaught ReferenceError: regeneratorRuntime is not defined\r\n    at Object.<anonymous> (web3.min.js:1)\r\n    at Object.380.buffer (web3.min.js:1)\r\n    at c (web3.min.js:1)\r\n    at web3.min.js:1\r\n    at Object.379../utils (web3.min.js:1)\r\n    at c (web3.min.js:1)\r\n    at web3.min.js:1\r\n    at Object.377../scrypt (web3.min.js:1)\r\n    at c (web3.min.js:1)\r\n    at web3.min.js:1\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.2.1\r\n* nodejs: -\r\n* browser: Chrome Version 77.0.3865.75 (Official Build) (64-bit)\r\n* ethereum node: -\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"At Nomic Labs we’ve been collaborating with the Ethereum Foundation to improve the developer experience on Ethereum, and we believe an important part of this process for the short-term is to help stabilize the web3.js library. In this document we propose a plan to move in this direction.\r\n\r\nFirst, some quick context:\r\n\r\n- The 1.0.0-beta-38 release of the library broke backwards compatibility\r\n- [Recently](https://medium.com/@samuel_91690/1-0-release-web3-js-ddd23d3c8f62), the library was split into two branches\r\n- 1.x branch continuing from where the 1.0.0-beta-37 left off\r\n- 2.x branch, continuing from 1.0.0-beta-55. This branch isn’t backward compatible with 1.x.\r\n\r\nThe versions that are widely used across the ecosystem right now are the 1.0.0-beta-37 and its subsequent 1.x releases. These releases still contain a significant amount of known bugs that have been reported, are fixed on the 2.x branch, but remain live in the versions used in production depoyments due to the releases that now exist in the 2.x branch not having significant adoption.\r\n\r\nThe fixes done on 2.x represent a ton of work that’s already been done, and it would be great if it were repackaged in a form that is usable on the web3.js deployments across the ecosystem.\r\n\r\nWe’ve gone through all the releases between 1.0.0-beta-38 and 1.0.0-beta-55 (the latest release that became the 2.x branch) and collected the list of issues that have been fixed. Thankfully @nivida has done a great job at documenting each release.\r\n\r\nOur simple proposal consists of backporting these bug fixes from the 2.x branch to the 1.x branch, where it makes sense. We assume there may be some issues in the list that shouldn’t be included or aren’t relevant anymore.\r\n\r\nThe main objective here is stabilizing the 1.x branch, so we believe stability should be the main driver for decision making throughout this process. From our perspective this would mean, at least:\r\n\r\n1. None of the backporting work should break backwards compatibility against the 1.0.0-beta-37 release\r\n2. If an issue in this list isn’t a bug it should be removed from the list\r\n3. If the bug reported in an issue in the list was introduced in a version later to beta-37, then the issue should be removed from the list\r\n4. Release management should be thoroughly considered\r\n\r\nIf an issue is removed from the list because of 2 or 3, it would be valuable to keep track of this.\r\n\r\nWhen it comes to releases we think there should be an RC release, which teams relying on the library can test comfortably, and once any issues that arise are fixed then the proper release.\r\n\r\nPrioritizing this list represents a difficult task to us, so we invite people with a more intimate knowledge of the codebase to highlight issues of major importance that should be included in the first release. The list is ordered in the exact same order the fixes were released on the 2.x branch, so we assume there’s been prioritization done by Samuel already. Overall, given that projects relying on the library have been a long time without a release that’s compatible with their deployments, and the work doesn’t need to be done from scratch, we think that just aiming to follow that same release order and getting them all released as soon as possible on 1.x is a reasonable approach.\r\n\r\nWhen it comes to the cadence of the releases containing these fixes, we wouldn’t prioritize speed. We think that appropriately spaced releases that allow the community to properly test each release candidate is important. The objective of such a stage in each release is to identify any new issues that might have been inadvertently introduced, and fix them before moving on to the final release. Given that the amount of issues is significant (244 in the unfiltered list we collected), there should be enough time in-between each release for proper testing. We believe this is somewhere between 3 and 6 weeks between each release.\r\n\r\nIn addition, given that the 1.x branch is considered the stable release and the 2.x branch is considered the development branch, we suggest the default branch on the Github repository be set to 1.x. The rationale being to help the userbase easily access the code they’re using as a reference when needed.\r\n\r\nWe welcome any ideas and suggestions that would add to this proposal for a short-term plan to bring more stability to web3.js.\r\n\r\nIf you agree this should be the way forward, please voice your support below in the comments or with a thumbs up reaction.\r\n------\r\n\r\n⚠️  **Tracking issue: active editing in progress...** ⚠️ \r\n\r\nThese are the items on @alcuadrado's / NomicLab's original list, organized into 4 categories:\r\n+ Needs investigation\r\n+ Triage (e.g we've identified that these need back-porting, regression tests, or both)\r\n+ Removals with a documented reason (e.g. is fixed, wont-fix, duplicate, etc)\r\n+ Removals based an initial pruning of the list by @nivida, waiting for a documented reason.\r\n  + Many of these may only be relevant to the 2.x branch\r\n\r\n(Goal is to move everything into the `Removals with Reason` category.)\r\n\r\n@joshstevens19 has added an additional set of PRs relating to stabilizing Typescript on 1.x in a second comment below.\r\n\r\nThere's a copy of the [original list here][1]\r\n\r\n**Editors:** (if you're editing, pls add your name here)\r\n+ ([nv][2]): @nivida \r\n+ ([cg][3]): @cgewecke \r\n+ ([js][4]): @joshstevens19 \r\n\r\n### Needs investigation\r\n\r\n**Bundling / Publication**\r\n- [x] #1986 Uncaught TypeError: Cannot read property 'node' of undefined. \r\n- [x] #2061 'TypeError: t.XMLHttpRequest is not a constructor' when using web3.min.js\r\n- [x] #2100 @@any-promise/REGISTRATION\r\n\r\n**Dependencies**\r\n- [x] #2792 Security vulnerability: extend 3.0.1 module in web3-bzz\r\n\r\n**Security** \r\n- [ ] Insecure credential storage: https://nodesecurity.io/advisories/877\r\n    + **breaking change** should be done on the 1.3.0 release and applied in 2.x as well \r\n    + Issue: https://github.com/ethereum/web3.js/issues/2739\r\n\r\n**Other**\r\n(Added back in because of recent reports that it's alive...) ([cg][3])\r\n- [ ] #1255 sendSignedTransaction: failing when calling getTransactionReceipt\r\n    + It looks like this might have been [a bug Geth fixed in 1.8.x][73] wrt tx availability?\r\n    + aionnetwork maintains their own web3 fork and fixed [by letting error ride][74]\r\n    + See also [this comment][85] about still being a problem for Parity .... ([cg][3])\r\n\r\n**Broken**\r\n- [x] #1239 Confirmation of transaction each second ([nv][2])\r\n   - [x] Needs fix [here][89] ([cg][3])\r\n   - [x] PR: #3140 \r\n   - [x] tests: **E2E**\r\n   - [x] docs: n/a \r\n\r\n**Typescript** \r\n\r\n@joshstevens19 will solve all of these.\r\n\r\nThese can probably all be addressed by a single back-port PR from 2.x, after modifying\r\nthe latest types as necessary and double-checking everything makes sense.\r\n\r\n- [x] #1248 Web3 typescript definition has no default export\r\n- [x] #1259 1.0 beta.27 not working for typescript \"resolves to a non-module entity\"\r\n- [x] #1408 TypeScript definition CommonJS compatibility\r\n- [x] #2514 web3.version.getNode() alternative in v1.0 using typescript\r\n- [x] #2228 Typescript return type of web3.eth.accounts.signTransaction() is incorrect.\r\n- [x] #2844 fix - 2819 - Block transactions on some instances returns an array of… \r\n- [x] #2645 fix: make auto-resolve to the root module when importing typings\r\n- [x] #2618 Write better types for ens and update the docs\r\n- [x] #2550 docs: show how you can get the types to work in a `commonjs` module\r\n- [x] #2516 `objects` to `any` on typing's return + dtslint fix + general test fixes\r\n- [x] #2471 `Sign` needed to have a signature on typing's + fix incorrect docs\r\n- [x] #2422 fix: `AbiItem` was missing `anonymous`\r\n- [x] #2417 fix: Accounts typings\r\n- [x] #2416 fix: `TransactionReceipt` typings\r\n- [x] #2415 fix: turn allowSyntheticDefaultImports to false\r\n- [x] #2336 add postinstall script in `files` in package.json\r\n- [x] #2322 remove reference comment to see if build passes \r\n- [x] #2288 fix: add `status` onto `TransactionReceipt`\r\n- [x] #2280 allow web3-utils to work in projects with `\"noImplicitAny\": true,\r\n- [x] #2278 write missing typing for `web3-eth-personal`\r\n- [x] #2262 fix: patch the angular `browser.js` to allow `{crypto: true, stream: …\r\n- [x] #2261 Fix/types reference node types\r\n- [x] #2253 remove redundant comments\r\n- [x] #2231 fix types for contract methods\r\n- [x] #2219 fix: install `@types/node` so you do not need to add types > node in … \r\n- [x] #2218 fix: `fromWei` and `toWei` typings\r\n- [x] #2217 fix: `signTransaction` should return `Promise<SignedTransaction>`\r\n- [x] #2203 Fix - allow web3 to work in iframes with third party cookies turned off \r\n- [x] #2134 Run all types tests \r\n- [x] #2133 Final web3 types PR\r\n- [x] #2128 Web3 shh typings\r\n- [x] #2125 Web3 bzz types\r\n- [x] #2123 Web3 types \r\n- [x] #2122 web3-eth typings\r\n- [x] #2121 Web3 net types\r\n- [x] #2119 Web3 eth contract types \r\n- [x] #2118 Web3 eth accounts\r\n- [x] #2114 Web3 core types\r\n- [x] #2113 move `web3-providers` down the tree to `web3-core`\r\n- [x] #2112 Web3 provider types\r\n- [x] #2096 Web3-eth-abi types \r\n- [x] #2090 Web3 eth iban types\r\n- [x] #2084 Web3 utils full test coverage for types \r\n- [x] #2078 fix unneeded `{}¬ in `bzz` `index.d.ts` \r\n- [x] #2073 Web3-bzz types\r\n- [x] #2056 Declaring types within the repos packages itself\r\n- [x] #2753 Transaction.to can be null \r\n- [x] #2672 Fix callback types\r\n- [x] #2643 Web3ModuleOptions interface updated \r\n- [x] #2619 Add index to Wallet type\r\n- [x] #2585 eth.subscribe types improvement\r\n- [x] #2575 Types for HttpProvider options updated\r\n- [x] #2557 DeployTransactionResponse renamed to ContractSendMethod \r\n- [x] #2556 EventOptions interface types updated\r\n- [x] #2529 Use genuine BN type\r\n- [x] #2479 Separate Transaction and TransactionConfig in typings\r\n- [x] #2478 AbiInput and AbiOutput interface update\r\n- [x] #2233 Types/fixes \r\n\r\n**Lower priority**\r\n- [ ] #1570 - updated incorrect tests for abi encoding and decoding\r\n     - [x] code: n/a\r\n     - [ ] test: might need change per [comment in 1570][31] ([cg][3])\r\n     - [x] docs: n/a\r\n- [ ] #1204 [1.0] account management inconsistency\r\n     - [ ] **breaking change**: wont-fix for 1.x ? ([cg][3])\r\n     - [ ] code: Needs discussion, needs [fix here][22], (see also #2631) ([cg][3])\r\n     - [ ] test: regression / E2E ([cg][3])\r\n     - [ ] docs: needs clarification about expected behavior ([cg][3])\r\n- [ ] #1905 block timestamp - \"Error: Number can only safely store up to 53 bits\"\r\n    - [ ] **breaking change**: wont-fix for 1.x ? ([cg][3]); This would have to be done in 1.3 ([nv][2])\r\n    - [ ] code: would [fix here][23], (see also #2791) ([cg][3])\r\n    - [ ] test: regression / E2E  Quorum ([cg][3])\r\n    - [ ] docs: changes receipt format ([cg][3])\r\n\r\n**PR Opened (back-porting...)**\r\n- [x] #1041 Where is dist folder and web3.min.js?\r\n    - [x] code: needs [fix here][29] ((see #1336) ([cg][3])\r\n    - [x] test: **E2E**/regression (vs. virtual registry & build-checker in CI; let us plan this in the e2e issue ([nv][2]))\r\n    - [x] docs: n/a\r\n- [x] #1085, #3092, #2994 Provider does not reconnect after failure, see #1966 (The PR from @gabmontes I've used as base for the implementation of it in 2.x could be used ([nv][2]))\r\n   - [x] PR: #3135\r\n- [x] #1015 feature: detect subscription support in provider (see #2632, backport) ([cg][3])\r\n    + [x] PR: #3116 ([nv][2])\r\n- [x] #1581 setter and getter method for TIMEOUTBLOCK ([nv][2])\r\n  - [x] PR: #3130 \r\n  - [x] tests: regression\r\n  - [x] docs: need updating\r\n- [x] #1859 Contract.methods.myMethod.send receipt is missing on error event ([nv][2])\r\n  - [x] PR: #3129 \r\n  - [x] tests: **E2E**/regression (as commented in the PR do we have to clean up the contract tests ([nv][2]))\r\n  - [x] docs: need updating\r\n- [x] #1802, #2978: 'request.withCredentials = true' breaks CORS\r\n    - [x] code: fixed by #3112 ([nv][2])\r\n    - [x] test: **E2E**/regression ([cg][3]); let us create new issues for adding e2e tests ([nv][2])\r\n    - [x] docs: **investigate**\r\n- [x] #1169 accounts.signTransaction: Invalid signature with testrpc\r\n   - [x] code: fixed by #3097 ([cg][3])\r\n   - [x] tests: **E2E**/regression vs ganache ([cg][3])\r\n   - [x] docs: n/a \r\n- [x] #2381 Possible invalid gas check\r\n   - [x] PR: #3123 ([nv][2])\r\n   - [x] tests: **E2E**/regression ([cg][3])  let us create new issues for adding e2e tests ([nv][2])\r\n   - [x] docs: n/a \r\n- [x] #2534 Documenting web3.eth.getChainId() ([nv][2])\r\n   - [x] PR: #3113 ([nv][2])\r\n   - [x] tests: added ([nv][2])\r\n   - [x] docs: n/a\r\n- [x] #2183 Possible incorrect parsing of receipt status\r\n   - [x] PR #3090\r\n   - [x] code: see [comment][81] in #2183 ([cg][3])\r\n   - [x] tests: regression ([cg][3])\r\n   - [x] docs: n/a\r\n- [x] #1490 web3.utils.randomHex does not produce consistent length strings\r\n    - [x] PR #3085\r\n    - [x] code: back-port from: #2794 ([cg][3])\r\n    - [x] test: regression (([cg][3])\r\n    - [x] docs: n/a (([cg][3])\r\n- [x] #2184 hexToNumberString sometimes interprets string as decimal  ([nv][2])\r\n    - [x] PR #3086\r\n    - [x] code: back-port from #2884 ([cg][3])\r\n    - [x] test: regression  ([cg][3])\r\n    - [x] docs: n/a\r\n- [x] #1777 isBN breaks in production\r\n    - [x] PR #3087\r\n    - [x] code: back-port #2793 ([cg][3])\r\n    - [x] test: n/a\r\n    - [x] docs: n/a\r\n- [x] #2468 Utils functions mention BigNumber instead of BN in error messages\r\n    - [x] PR #3088\r\n    - [x] code: back-port #2705 ([cg][3])\r\n    - [x] test: regression\r\n    - [x] docs: n/a\r\n- [x] #1100 fromBlock: 0 defaults to latest, fromBlock: 1 works correctly in eth.getPastLogs ([nv][2])\r\n   - [x] PR #3089 ([nv][2])\r\n   - [x] code: 1.x [needs fix][10] ([cg][3])\r\n   - [x] test: regression ([cg][3])\r\n   - [x] docs: n/a \r\n- [x] #2293 Explain \"Ethereum Signed Message\" prefix to the eth.personal.sign documentation\r\n    - [x] PR #3091\r\n    - [x] docs:  see #2295. (Adds clarifying example using ecRecover ) ([cg][3])\r\n- [x] #2378 Invalid chainId used to sign transactions\r\n   - [x] PR #3097\r\n   - [x] code: see 2378 ([cg][3])\r\n   - [x] tests: updated ([cg][3])\r\n   - [x] docs: n/a \r\n- [x] #2062 Unhandled Promise Rejection on 'sendRequest'\r\n   - [x] PR #3105\r\n   - [x] code: see also #2063\r\n   - [x] tests: needs **E2E**/regression (PR #3163) ([cg][3])\r\n   - [x] docs: n/a\r\n- [x] eth-util signing... ([nv][2])\r\n   - [x] docs: n/a \r\n   - [x] PR: #3141 (in-review)\r\n       + code: use ethereumjs-tx, see #2580 ([cg][3])\r\n       +  ethereumjs-tx api is tricky to map to the function signature. \r\n       + see [comment in 3125][87]\r\n       + tests: accounts.signTransaction E2E test is failing ([cg][3])\r\n   - [x] PR: #3125\r\n       + #1998 accounts.signTransaction: incorrect error from invalid private key \r\n       + #2033 accounts.signTransaction: Don't kill 1/2 bytes from private keys please\r\n       + #1074 web3.eth.accounts.signTransaction produced errant bytecode \r\n\r\n### Removals (with reason)\r\n**Duplicates**\r\n- [x] #1336 build dist into packages/web3/dist,fix (**Dup: #1041**) ([cg][3])\r\n- [x] #1391 Question: Keepalive for ws subscriptions? (**Dup: #1085**) ([cg][3])\r\n- [x] #1558 Reconnect on Websocket Drop (**Dup: #1085**) ([cg][3])\r\n- [x] #1591 (**Dup**: #1570)([cg][3])\r\n- [x] #1852 Reconnect feature missing when ws connection is closed. (**Dup**: #1085)([cg][3])\r\n- [x] #1933 Can't assign more than one handler to connection events (**Dup**: #1085)([cg][3])\r\n- [x] #1952 new Buffer is deprecated and unsafe (**Dup: #1950**) ([cg][3])\r\n- [x] #2013 Include minified file in npm release (**Dup**: #1041) ([cg][3])\r\n- [x] #2418 confirmations not returning correct confirmation information (**Dup** #1239) ([cg][3])\r\n- [x] #2781 Async methods never finish on non-200 HTTP responses (**Dup** #2396)([cg][3])\r\n- [x] #2265 returnValues doesn't exist on event object (**Dup** #2268)([cg][3])\r\n- [x] #2270 on version 1.0.0-beta.41, randomHex is undefined (**Dup** #1490) ([cg][3])\r\n- [x] #2383 Docs say to link \"dist/web3.min.js\" but DNE. (**Dup** #1041) ([cg][3])\r\n- [x] #2501 Release / Debug build generated json-rpc calls are different (**Dup** #2484) ([cg][3])\r\n- [x] #2559 Web3@1.0.0-beta.50 (Webkit, Gecko) CORS Error (**Dup** #1802) ([cg][3])\r\n- [x] #2563 Subscribe to logs is broken in beta.49+ (**Dup** #2611) ([cg][3])\r\n- [x] #2612 Can't get tx receipt of reverted transaction (**Dup** #2601) ([cg][3])\r\n- [x] #1517 sendRawTransaction: returns \"Invalid JSON RPC Response\" (**Dup** #1169) ([cg][3])\r\n- [x] #2246 Cannot read property of blockNumber of null (**Dup** #1255) ([cg][3])\r\n- [x] #1134 accounts.signTransaction: is not working (**Dup** #1074) ([cg][3])\r\n\r\n**Wont fix**\r\n- [x] #1377 Return events on sendTransaction (**Wont fix** [see comment][6])([cg][3]) \r\n- [x] #2707 Rename sha3 to keccak256 (**Wont fix**  fixed on 2.x / internal cosmetics)([cg][3])\r\n- [x] #2247 Using passphrase and private key (**Wont fix**:  is gitter question)([cg][3])\r\n- [x] #2856 EIP-1193 updates (Will be done after the EIP got finalized ([nv][2]))\r\n- [x] #1477 Getting contract deploy error even though deploy was successful\r\n   - This may need to be revisited, but appears to have been consequence of very erratic\r\n      behavior at Infura in Summer/Fall of 2018 on mainnet. Issue hasn't had much traffic since then.\r\n     See [comment][88] for diagnosis and potential solution if this needs to be re-addressed. ([cg][3])\r\n   \r\n**Is fixed in 1.2.1**\r\n- [x] #2375 getTransaction breaks trying to access blockNumber of null response ([nv][2])\r\n- [x] #854 (1.0 branch) 'new web3' overwrites the previous Contract._eth ([nv][2])\r\n- [x] #1681 Update WS library to newest version ^5.2.0\r\n- [x] #1760 Package bignumber.js is not up-to-date (complaint about the Frozeman fork)\r\n    + deps are bignumber.js 4.0.0 & ethers.js ([cg][3])\r\n- [x] #1926 Cannot read property 'name' of undefined at Contract._generateEventOptions\r\n   + is OK [here][5] ([cg][3])\r\n- [x] #528 Switch to different linting tool. \r\n   + linting LGTM ([cg][3]) \r\n- [x] #1950 new Buffer is deprecated and unsafe\r\n    + code is fixed (several locations) and [docs LGTM][34] ([cg][3])\r\n- [x] #1458 Setting gasPrice to 0 has no effect (web3 1.0-beta.30)\r\n   + was fixed in #1845\r\n- [x] #2500 sendTransaction: unhandled promise rejection (on eth_gasPrice failure)\r\n    + could not reproduce, (looks like issue opener is mis-formatting currentProvider.send)\r\n- [x] #2269 TypeError at NewAccountMethod.set\r\n    + Verified this works on 1.x using geth v1.9.5  ([cg][3])\r\n- [x] #2300 web3.eth.accounts.hashMessage() does not accept arbitrary hex input\r\n    + Verified this works on v1.2.1 ([cg][3])\r\n- [x] #2503 Use regular functions and not arrow functions in the index.js file of the modules.\r\n    + Verified there are no `() =>`  fns in 1.x. ([cg][3])\r\n- [x] #2565 ecRecover issue, please help\r\n    + Verified `ecRecover` works as expected on 1.x in #3091 ([cg][3])\r\n- [x] #2377 Personal ECRecover validates sig as address  \r\n    + Verified `ecRecover` works as expected on 1.x in #3091 ([cg][3])\r\n- [x] #2687 BN example does not work\r\n    + BN exported in web3-utils [here][63] ([cg][3])\r\n- [x] #2763 Cannot set provider on provider-less Web3 instance\r\n    + Verified works as expected on 1.x ([cg][3])\r\n- [x] #2835 isBigNumber is not available in web3-utils\r\n    + `isBigNumber` is exported [here][65] on 1.x\r\n- [x] #2494 contractInstance.options.jsonInterface is undefined\r\n    + Existing tests for this case on 1.x [here][70]\r\n    + Verified that options.jsonInterface can be JSON.stringified correctly per issue repro. ([cg][3])\r\n- [x] #1126 accounts.signTransaction: fails for rawTransaction with leading zeroes\r\n    + Fixed with #1288\r\n- [x] #2578 accounts.signTransaction: getGasPrice() invocation error in \r\n    + reported case (0 gas) is [handled][76] and [tested][77] in 1.x\r\n- [x] #2401 Encoding incompatibility in status transaction receipt\r\n    +  code: 1.x already [handles case correctly][32] ([cg][3])\r\n    + regression tests adding in #3090\r\n- [x] #2482 ecKey.getPublic(...).slice is not a function (Ubuntu)\r\n- [x] #1255 sendSignedTransaction: failing when calling getTransactionReceipt\r\n    + It looks like this might have been [a bug Geth fixed in 1.8.x][73] wrt tx availability?\r\n    + aionnetwork maintains their own web3 fork and fixed [by letting error ride][74]\r\n    + Couldn’t reproduce it ([nv][2])\r\n \r\n**Only relevant to 2.0 Branch**\r\n\r\n\r\n~~I've commented out the list here because the listed issues arent relevant to stabilize 1.0. ([nv][2])~~\r\nI've uncommented out this list so we can see the complete survey ([cg][3])\r\n\r\n- [x] #2431 this.methods.contractConstructor is not a function ([nv][2])\r\n- [x] #2469 web3-eth-accounts/dist/web3-eth-accounts wording error ([nv][2])\r\n- [x] #2488 Misleading error message: \"Can not send value to non-payable contract method or constructor\" ([nv][2])\r\n- [x] #2499 Not possible to call methods on existing contract ([nv][2])\r\n- [x] #2502 Wrong addresses when instancing two contract in contructor ([nv][2])\r\n- [x] #2508 Whisper and IPCProvider (1.0.0 beta 48) ([nv][2])\r\n- [x] #2532 Filter in options to filter contract events is no longer a valid parameter ([nv][2])\r\n- [x] #2539 Subscribe to pendingTransactions fails while using IPC Provider ([nv][2])\r\n- [x] #2553 Contract function send does not return the provider error. ([nv][2])\r\n- [x] #2587 Sending signed tx returns an error while tx was successfull ([nv][2])\r\n- [x] #2602 WebsocketProvider on React-Native url == null ([nv][2])\r\n- [x] #2607 Problem with decoding complex types returned from contract function ([nv][2])\r\n- [x] #2614 Error when when connection close while getting logs ([nv][2])\r\n- [x] #2670 ContractModuleFactory expects only three arguments, receives four. ([nv][2])\r\n- [x] #2689 Calling new Web3() without a provider breaks ([nv][2])\r\n- [x] #2711 WebsocketProvider event emitter problem ([nv][2])\r\n- [x] #2731 Improve error handling of subscriptions ([nv][2])\r\n- [x] #2733 Incorrect behavior for signTransaction function ([nv][2])\r\n- [x] #2815 Fix error on contract method proxy when method parameter is null. ([nv][2])\r\n- [x] #2851 Memory leak in 55 ([nv][2])\r\n- [x] #2862 Fix JSON-RPC response validation ([nv][2])\r\n- [x] #2950 convert salt to Buffer instance before encrypting ([nv][2])\r\n- [x] #2952 implement fallback from built-in scrypt to scryptsy/scrypt packages ([nv][2])\r\n- [x] #2955 Providers Improvements ([nv][2])\r\n- [x] #2993 Error handling fixed with callbacks for BatchRequests ([nv][2])\r\n- [x] #3007 clearSubscriptions method in AbstractSocketProvider fixed ([nv][2])\r\n- [x] #2369 web3.eth.getBlockTransactionCount do not return any response ([nv][2])\r\n- [x] #2385 Consider bumping the version of dependency scrypt.js from 0.2.0 to 0.3.0 ([nv][2])\r\n- [x] #2364 1.0.0-beta.46 subscribe events without callback throw exception: TypeError: callback is not a function ([nv][2])\r\n- [x] #2368 indexed parameters are shifted by one when decoding logs ([nv][2])\r\n- [x] #2285 payable is not assigned in the contructor (AbiItemModel) ([nv][2])\r\n- [x] #2289 web3.js 1.0.0-beta.41 batch.execute() : Error: Given input \"function (err, res) {....}\" is not a number. ([nv][2])\r\n- [x] #2342 Update ProviderResolver for the new EIP-1193 spec ([nv][2])\r\n- [x] #2329 Mistake a typing of EthereumProvider.send ([nv][2])\r\n- [x] #2243 1.0.0-beta.39 - External transaction signing with accounts.signTransaction does not work without default account ([nv][2])\r\n- [ ] #2424 Registry creation in ENS module throws an exception ([nv][2])\r\n- [x] #2290 web3-utils types not compatible with current @types/bn.js ([nv][2])\r\n- [x] #2260 Cannot find name 'Buffer'. Can't find module 'net'. ([nv][2])\r\n- [x] #2350 [types][web3-utils] Use bn.js directly for class BN instead of wrapper ([nv][2])\r\n- [x] #2374 [typescript] Account interface does not seems to be right ([nv][2])\r\n- [x] #2554 filter should be optional in EventOptions ([nv][2])\r\n- [x] #2583 web3.eth.subscribe(\"logs\", ..) types issue ([nv][2])\r\n- [x] #2591 web3.eth.accounts.wallet typings and documentation ([nv][2])\r\n- [x] #2819 web3.eth.getBlock return Block type in typescript have misleading transaction property ([nv][2])\r\n- [x] #2230 TypeError: DeployTransactionResponse estimateGas() types incorrect ([nv][2])\r\n- [x] #2551 Rename DeployTransactionResponse ([nv][2])\r\n- [x] #2382 allowSyntheticDefaultImports is too opinionated ([nv][2])\r\n- [x] #2939 Fix TypeScript 'ContractOptions' interface ([nv][2])\r\n- [x] #2919 Fix Subscription Type ([nv][2])\r\n- [x] #2667 Correctly list dependencies in subpackages ([nv][2])\r\n- [x] #2484 ProviderResolver is not minification safe ([nv][2])\r\n- [x] #1021 insufficient funds for gas * price + value ([see comment][30]) ([cg][3])\r\n- [x] #2225 Cannot find module '@babel/.../CallCheck' ([see comment][25]) ([cg][3])\r\n- [x] #2256 invalid bytes32 value ([see comment][12])([cg][3])  \r\n- [x] #2341 Send transaction don't parse \"from\" option ([see comment][13])([cg][3])\r\n- [x] #2396 Promise won't resolve on invalid RPC endpoint (could not repro on 1.x) ([cg][3])\r\n- [x] #2442 Docs for eth.signTransaction incorrect (see #2442 desc.)([cg][3])\r\n- [x] #2449 Return array in methods.myMethod.call ([see comment][16]) ([cg][3])\r\n- [x] #2453 Return multiple values ([see comment][15]) ([cg][3])\r\n- [x] #2490 Web3 constructor docs are wrong ( see #2644) ([cg][3])\r\n- [x] #2527 Invalid bytes string given: (could not reproduce on 1.x) ([cg][3])\r\n- [x] #2221 beta.38 Cannot find module ([see comment][36]) ([cg][3])\r\n- [x] #2223 beta.38 TypeError: ... non-iterable instance ([see comment][37]) ([cg][3])\r\n- [x] #2311 beta.41 getPastEvents not working ([see comment][38]) ([cg][3])\r\n- [x] #2316 .getPastEvents doesn't support \"allEvents\"  ([see comment][39]) ([cg][3])\r\n- [x] #2327 Websocket \"too many arguments\" err with beta.41 ([see comment][40]) ([cg][3])\r\n- [x] #2239 Wrong network ID and network type ([see comment][41]) ([cg][3])\r\n- [x] #2252 ETH Receipt errors in 1.0.0-beta.38 ([see comment][42]) ([cg][3])\r\n- [x] #2268 decodeLog() broken after updating to beta.41 ([see comment][43]) ([cg][3])\r\n- [x] #2266 Ganache providers invalidated by web3 ([see comment][44]) ([cg][3])\r\n- [x] #2287 Prop 'status' DNE on type 'TransactionReceipt'. ([see comment][44]) ([cg][3])\r\n- [x] #2296 beta.41 'getPastEvents' request timed out ([see comment][46]) ([cg][3])\r\n- [x] #2249  >= Beta.38: cannot find module '@babel/.../typeof' (see issue desc) ([cg][3])\r\n- [x] #2330 Subscription stopped working after 1.0.0-beta.37 (see issue desc) ([cg][3])\r\n- [x] #2340 MetaMask is Broken in beta.41 (works with beta.37) (see issue desc) ([cg][3])\r\n- [x] #2349 beta.43 when .send, metamask throws exception ([see comment][47]) ([cg][3])\r\n- [x] #2365 beta.46 send tx, when confirmed throw exception: ([see comment][48]) ([cg][3])\r\n- [x] #2411 methods.call() returns anonymousFunction()recursively ([see comment][49]) ([cg][3])\r\n- [x] #2441 Error: Transaction ran out of gas. Please provide more gas: ([see code][50]) ([cg][3])\r\n- [x] #2444 [beta.47] web3.eth.Contract can't parse ABI correctly ([see comment][51]) ([cg][3])\r\n- [x] #2447 beta.47  Error: invalid json request [1.0.0-] ([see comment][52]) ([cg][3])\r\n- [x] #2457 getPastLogs: wrong topics array after beta.37 (see issue desc) ([cg][3])\r\n- [x] #2465 web3.js does not work n vue production mode ([see comment][53]) ([cg][3])\r\n- [x] #2467 getPastEvents fails when called with 'allEvents' ([see comment][54]) ([cg][3])\r\n- [x] #2507 Shh newKeyPair first arg not optional ([see comment][55]) ([cg][3])\r\n- [x] #2533 npmjs package 1.0.0-beta.49 return 1.0.0-beta.48 (see issue desc) ([cg][3])\r\n- [x] #2555 The parameters that are sent to eth_sign is swapped ([see comment][56]) ([cg][3])\r\n- [x] #2558 this.getGasPrice is not a function; GasPriceMethod vs GetGasPriceMethod ([cg][3])\r\n- [x] #2569 Sending to infura and wallet account doesn't work ([see comment][57]) ([cg][3])\r\n- [x] #2570 Returning of BigNumber objects instead of strings (see #2570 thread) ([cg][3])\r\n- [x] #2571 Account.signTransaction(tx, callback) error ([see comment][58]) ([cg][3])\r\n- [x] #2601 No receipt after contract deploy ([see comment][59]) ([cg][3])\r\n- [x] #2611 myContract.events.MyEvent is broken in beta.49-51 ([see comment][60]) ([cg][3])\r\n- [x] #2647 web3.eth.accounts.wallet errors when using ([see comment][61]) ([cg][3])\r\n- [x] #2661 confirmation workflow over HTTP is wrong. ([see comment][62]) ([cg][3])\r\n- [x] #2854 Async validate on Web3EthereumProvider.send method (new provider arch.)([cg][3])\r\n- [x] #2806 fix typo  (2.0 docs)([cg][3])\r\n- [x] #2833 'syncing' event subscription crash the code ([see comment][64]) ([cg][3])\r\n- [x] #2877 TypeError: miner.startMining is not a function (2.0 extension API) ([cg][3])\r\n- [x] #1793 The signTransaction method does not work correctly. ([see comment][71]) ([cg][3])\r\n- [x] #2989 stripHexPrefix fixed (?; 2.x related helper function ([nv][2]))\r\n\r\n\r\n[1]: https://gist.github.com/cgewecke/ec59b274a2bfc1e321236a5760516569\r\n[2]: https://github.com/nivida \r\n[3]: https://github.com/cgewecke\r\n[4]: https://github.com/ethereum/web3.js/blob/1.x/docs/_build/html/_sources/web3-eth.txt#L1089\r\n[5]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-contract/src/index.js#L539-L541\r\n[6]: https://github.com/ethereum/web3.js/issues/1377#issuecomment-478931237\r\n[7]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L564\r\n[8]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L415\r\n[9]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/utils.js#L427-L445\r\n[10]: https://github.com/ethereum/web3.js/commit/9bf580321868430554b00c75a650bbdc856f9804\r\n[11]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-helpers/src/formatters.js#L219-L221\r\n[12]: https://github.com/ethereum/web3.js/issues/2256#issue-404098110\r\n[13]: https://github.com/ethereum/web3.js/issues/2341#issuecomment-465294963\r\n[14]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L310-L334\r\n[15]: https://github.com/ethereum/web3.js/issues/2453#issuecomment-469645560\r\n[16]: https://github.com/ethereum/web3.js/issues/2449#issuecomment-469407478\r\n[17]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L564-L582\r\n[18]: https://github.com/ethereum/web3.js/blob/1.x/test/method.buildCall.js#L179-L220\r\n[19]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L29\r\n[20]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-providers-http/src/index.js#L62\r\n[21]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-abi/src/index.js#L225-L227\r\n[22]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth/src/index.js#L225-L230\r\n[23]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-helpers/src/formatters.js#L239\r\n[24]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/utils.js#L244-L248\r\n[25]: https://github.com/ethereum/web3.js/issues/2221#issue-403513598\r\n[26]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/utils.js#L37-L40\r\n[27]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L235\r\n[28]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L267\r\n[29]: https://github.com/ethereum/web3.js/pull/1336/files#diff-b9e12334e9eafd8341a6107dd98510c9\r\n[30]: https://github.com/ethereum/web3.js/issues/1021#issuecomment-471956728\r\n[31]: https://github.com/ethereum/web3.js/issues/1570#issuecomment-385086829\r\n[32]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-helpers/src/formatters.js#L220\r\n[33]: https://web3js.readthedocs.io/en/v1.2.1/web3-net.html#getid\r\n[34]: https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#sendsignedtransaction\r\n[35]: https://github.com/ethereum/web3.js/blob/2.x/packages/web3-core-helpers/src/Formatters.js#L281-L285\r\n[36]: https://github.com/ethereum/web3.js/issues/2221#issue-403513598\r\n[37]: https://github.com/ethereum/web3.js/issues/2223#issue-403516052\r\n[38]: https://github.com/ethereum/web3.js/issues/2311#issue-406120702\r\n[39]: https://github.com/ethereum/web3.js/issues/2316#issue-406143324\r\n[40]: https://github.com/ethereum/web3.js/issues/2327#issue-406834251\r\n[41]: https://github.com/ethereum/web3.js/issues/2239#issue-403625452\r\n[42]: https://github.com/ethereum/web3.js/issues/2252#issue-403880590\r\n[43]: https://github.com/ethereum/web3.js/issues/2268#issue-404548020\r\n[44]: https://github.com/ethereum/web3.js/issues/2266#issuecomment-458888234\r\n[45]: https://github.com/ethereum/web3.js/issues/2287#issue-405631665\r\n[46]: https://github.com/ethereum/web3.js/issues/2296#issue-406027627\r\n[47]: https://github.com/ethereum/web3.js/issues/2349#issue-408142233\r\n[48]: https://github.com/ethereum/web3.js/issues/2365#issuecomment-464349478\r\n[49]: https://github.com/ethereum/web3.js/issues/2411#issuecomment-474726547\r\n[50]: https://github.com/ethereum/web3.js/issues/2441#issuecomment-470443721\r\n[51]: https://github.com/ethereum/web3.js/issues/2444#issue-416474822\r\n[52]: https://github.com/ethereum/web3.js/issues/2447#issue-416854637\r\n[53]: https://github.com/ethereum/web3.js/issues/2465#issuecomment-474408178\r\n[54]: https://github.com/ethereum/web3.js/issues/2467#issue-417935137\r\n[55]: https://github.com/ethereum/web3.js/issues/2507#issue-421425200\r\n[56]: https://github.com/ethereum/web3.js/issues/2555#issue-424029163\r\n[57]: https://github.com/ethereum/web3.js/issues/2569#issue-424906545\r\n[58]: https://github.com/ethereum/web3.js/issues/2571#issue-424919075\r\n[59]: https://github.com/ethereum/web3.js/issues/2601#issuecomment-477633293\r\n[60]: https://github.com/ethereum/web3.js/issues/2611#issue-427095628\r\n[61]: https://github.com/ethereum/web3.js/issues/2647#issue-429194942\r\n[62]: https://github.com/ethereum/web3.js/issues/2661#issue-430368216\r\n[63]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L316\r\n[64]: https://github.com/ethereum/web3.js/issues/2833#issue-446929132\r\n[65]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L318\r\n[70]: https://github.com/ethereum/web3.js/blob/1.x/test/contract.js#L330\r\n[71]: https://github.com/ethereum/web3.js/issues/1793#issuecomment-475332515\r\n[72]: https://github.com/ethereum/web3.js/issues/3070#issuecomment-531838893\r\n[73]: https://github.com/ethereum/web3.js/issues/1255#issuecomment-370671388\r\n[74]: https://github.com/aionnetwork/aion_web3/pull/63/files#diff-b87e4847acaf5b45ad88f78ed46732db\r\n[75]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L264\r\n[76]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/index.js#L224\r\n[77]: https://github.com/ethereum/web3.js/blob/1.x/test/eth.accounts.signTransaction.js#L36\r\n[78]: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\r\n[79]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L361-L371\r\n[80]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-utils/src/index.js#L43-L85\r\n[81]: https://github.com/ethereum/web3.js/issues/2183#issuecomment-539199620\r\n[85]: https://github.com/ethereum/web3.js/issues/1423#issuecomment-542684428\r\n[87]: https://github.com/ethereum/web3.js/pull/3125#issuecomment-542889572\r\n[88]: https://github.com/ethereum/web3.js/issues/1477#issuecomment-422579718\r\n[89]: https://github.com/ethereum/web3.js/blob/1.x/packages/web3-core-method/src/index.js#L482"},{"labels":[null,null,null,"enhancement"],"text":"### Description \r\nRunning npm install and then npm run bootstrap will fail with an unsupported version of node.\r\n.nvmrc can be used to guarantee everyone is developing with the same version of node.\r\n\r\nbefore running npm install the recommended command to run is nvm use which will set the appropriate version of node.\r\n\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `npm run bootstrap` should succeed\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `npm run bootstrap` with an unsupported version of node fails\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. clone the repo\r\n    2. npm install\r\n    3. npm run bootstrap\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Error Logs\r\n"},{"labels":[null,"enhancement"],"text":"### Description\r\n\r\nAccording to the example in the documentation, function `web3.eth.accounts.privateKeyToAccount` expects private key to be passed to hexadecimal string prefixed with \"0x\".  If private key is passed without \"0x\" prefix, the function silently returns incorrect result.\r\n\r\n#### Expected behavior\r\n\r\nFunction `web3.eth.accounts.privateKeyToAccount` throws on incorrect private key format, and always returns correct result on correctly formatted private keys.  Whether hexadecimal private key without \"0x\" prefix is correct or not is discussible.\r\n\r\n#### Actual behavior\r\n\r\nOn hexadecimal private key without \"0x\" prefix function `web3.eth.accounts.privateKeyToAccount` silently returns incorrect result.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nCall function `web3.eth.accounts.privateKeyToAccount` with parameters `0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709` and `348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709` and compare the results.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.55"},{"labels":[null,null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nExample from Embark:\r\nhttps://github.com/embark-framework/embark/blob/master/azure-pipelines.yml\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description\r\n\r\nMethods `web3.eth.signTransaction` and `web3.eth.accounts.signTransaction` have the same name, very similar parameters structure, very similar semantics, logically very similar results, though result structure is very different.  The former method packs result like this:\r\n\r\n    {\r\n        raw: '0xf86c808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a76400008025a04f4c17305743700648bc4f6cd3038ec6f6af0df73e31757007b7f59df7bee88da07e1941b264348e80c78c4027afc65a87b0a5e43e86742b8ca0823584c6788fd0',\r\n        tx: {\r\n            nonce: '0x0',\r\n            gasPrice: '0x4a817c800',\r\n            gas: '0x5208',\r\n            to: '0x3535353535353535353535353535353535353535',\r\n            value: '0xde0b6b3a7640000',\r\n            input: '0x',\r\n            v: '0x25',\r\n            r: '0x4f4c17305743700648bc4f6cd3038ec6f6af0df73e31757007b7f59df7bee88d',\r\n            s: '0x7e1941b264348e80c78c4027afc65a87b0a5e43e86742b8ca0823584c6788fd0',\r\n            hash: '0xda3be87732110de6c1354c83770aae630ede9ac308d9f7b399ecfba23d923384'\r\n        }\r\n    }\r\n\r\nwhile the latter packs like this:\r\n\r\n    {\r\n        messageHash: '0x88cfbd7e51c7a40540b233cf68b62ad1df3e92462f1c6018d6d67eae0f3b08f5',\r\n        v: '0x25',\r\n        r: '0xc9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895',\r\n        s: '0x727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68',\r\n        rawTransaction: '0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68'\r\n    }\r\n\r\nSome applications need to support both, accounts provided by Web3 enabled browser and accounts managed within application.  Such applications need to use both methods, and then use their results in similar way, but as long as results have different format, application has to convert one format into another which is inconvenient and error-prone.\r\n\r\n#### Expected behavior\r\n\r\nMethods `web3.eth.signTransaction` and `web3.eth.accounts.signTransaction` have the same result format.\r\n\r\n#### Actual behavior\r\n\r\nMethods `web3.eth.signTransaction` and `web3.eth.accounts.signTransaction` have different result formats.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nCompare the following documentation pages:\r\n\r\nhttps://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#signtransaction\r\nhttps://web3js.readthedocs.io/en/v1.2.1/web3-eth-accounts.html#signtransaction\r\n\r\n### Versions \r\n* web3.js: 1.0.0\r\n"},{"labels":[null,null,"enhancement"],"text":"# Description <!-- In plain words, what happened -->\r\n\r\nI just ran into the issue when using `Web3Utils.soliditySha3`. I was passing a Buffer as input instead of a String and then the resulting hash was different to the one inside the smart contract. The reason being that `Web3Utils.toHex` apparently doesn't accept a Buffer as input. However, it didn't throw an error / give a warning or anything.\r\n\r\nFor anyone reading this, I fixed it by passing a string:\r\n\r\n```\r\nconst hexString = '0x' + bytesBuffer.toString('hex')\r\nconst hash = Web3Utils.soliditySha3(hexString , someDataString)\r\n```\r\n\r\nAlternatively, you could use https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/README.md#const-buffertohex.\r\n\r\n#### Expected behavior\r\nCalling `Web3Utils.soliditySha3`/`Web3Utils.toHex` with Buffer as input should either work as expected or throw an error or at least give a warning. `Web3Utils.toHex` with a Buffer as input currently returns a very strange, very long result.\r\n\r\n### Versions \r\n* web3-utils 1.2.1\r\n"},{"labels":[null,"enhancement"],"text":"### Description\r\nWhen running a mini test program and no RPC endpoint is accessible i get the error message:\r\n```js\r\nError: Invalid JSON RPC response: \"\"\r\n```\r\nWhile both beta 0.55 and alpha 2.0.0 show the message:\r\n```js\r\nError: Connection refused or URL couldn't be resolved: http://localhost:8545\r\n```\r\nThe latter message is a better indicator of the underlying problem.\r\n\r\n#### Expected behavior\r\n```js\r\nError: Connection refused or URL couldn't be resolved: http://localhost:8545\r\n    at XMLHttpRequest.request.onreadystatechange (C:\\blockchain_test\\web3_2.0\\node_modules\\web3-providers\\dist\\web3-providers.cjs.js:776:22)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\blockchain_test\\web3_2.0\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js:34:22)\r\n    at XMLHttpRequest._setReadyState (C:\\blockchain_test\\web3_2.0\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:208:14)\r\n    at XMLHttpRequest._onHttpRequestError (C:\\blockchain_test\\web3_2.0\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:349:14)\r\n    at ClientRequest.<anonymous> (C:\\blockchain_test\\web3_2.0\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:252:61)\r\n    at ClientRequest.emit (events.js:198:13)\r\n    at Socket.socketErrorListener (_http_client.js:392:9)\r\n    at Socket.emit (events.js:198:13)\r\n    at emitErrorNT (internal/streams/destroy.js:91:8)\r\n    at emitErrorAndCloseNT (internal/streams/destroy.js:59:3) null\r\n```\r\n\r\n#### Actual behavior\r\n```js\r\nError: Invalid JSON RPC response: \"\"\r\n    at Object.InvalidResponse (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\web3-core-helpers\\src\\errors.js:42:16)\r\n    at XMLHttpRequest.request.onreadystatechange (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\web3-providers-http\\src\\index.js:92:32)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\xhr2-cookies\\dist\\xml-http-request-event-target.js:34:22)\r\n    at XMLHttpRequest._setReadyState (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:208:14)\r\n    at XMLHttpRequest._onHttpRequestError (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:349:14)\r\n    at ClientRequest.<anonymous> (C:\\Users\\gerar\\AppData\\Roaming\\npm\\node_modules\\web3\\node_modules\\xhr2-cookies\\dist\\xml-http-request.js:252:61)\r\n    at ClientRequest.emit (events.js:198:13)\r\n    at Socket.socketErrorListener (_http_client.js:392:9)\r\n    at Socket.emit (events.js:198:13)\r\n    at emitErrorNT (internal/streams/destroy.js:91:8)\r\n    at emitErrorAndCloseNT (internal/streams/destroy.js:59:3)\r\n    at process._tickCallback (internal/process/next_tick.js:63:19)\r\n```\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\ntest.js contains:\r\n```js\r\nWeb3 = require(\"web3\");\r\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\r\nweb3.eth.getAccounts(console.log);\r\n```\r\nrun\r\n```js\r\nnode test.js\r\n```\r\n\r\n\r\n### Versions \r\n* web3.js: 1.2.0 // 2.0.0-alpha // 1.0.0-beta.55\r\n* nodejs: v10.16.0\r\n* ethereum node: { not running }\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nUse dependencies if possible directly or replace them with better alternatives.\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"https://github.com/ethereum/web3.js/blob/2.x/packages/web3-eth-abi/src/AbiCoder.js#L153\r\n\r\nWould it be possible to make the `AbiCoder.decodeParameters()` return value iterable, so that the following isn't a `TypeError: (intermediate value) is not iterable`?\r\n```JavaScript\r\nconst [, inserted, hash] = await oracle.methods.rrdata('TXT', _ens).call();\r\n```\r\n\r\nWould changing AbiCoder.js line 153 from:\r\n```JavaScript\r\n        let returnValues = {};\r\n```\r\nto\r\n```JavaScript\r\n        let returnValues = [];\r\n```\r\nbe sufficient?"},{"labels":[null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n`web3.eth.accounts.privateKeyToAccount()` doesn't check for the input string length. Neither does it check for \r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCalling `const my_account = await web3.eth.accounts.privateKeyToAccount(<Really Long String>)` should throw an error pointing out that the string is too long for a typical Ethereum private key.\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nNo error is thrown. `console.log(my_account.privateKey)` prints out the huge string.\r\n\r\n#### Steps to reproduce the behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    1. Import `web3`\r\n    2. Set the provider to `localhost`\r\n    3. Fetch latest block\r\n\r\n    Please use the code blocks Markdown does provide:\r\n\r\n    ```js\r\n      \r\n        console.log('Pretty syntax!');\r\n    \r\n    ```\r\n----------------------------------------------------------------------->\r\n\r\n```js\r\nconst Web3 = require('web3')\r\n\r\nasync function convertKey() {\r\n  const web3 = new Web3(\"http://localhost:8545\")\r\n\r\n  const account = await web3.eth.accounts.privateKeyToAccount(<REALLY LONG HEX STRING>)\r\n\r\n  console.log(account.privateKey)\r\n\r\n}\r\n\r\nconvertKey()\r\n```\r\n\r\nSave it as `.js` file and run it using `node`.\r\n\r\n#### Additional\r\nThe problem seems to be in the [eth-lib](https://github.com/MaiaVictor/eth-lib/blob/d959c54faa1e1ac8d474028ed1568c5dce27cc7a/lib/account.js#L23) npm package. The `fromPrivate` method does not check for the key length. Also, it does not check if the first two characters are '0x', it just slices out the first two characters.\r\n\r\n### Versions \r\n* web3.js: v1.0.0-beta.55\r\n* nodejs: v12.1.0\r\n* browser: Not used\r\n* ethereum node: Not used\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description \r\nWith [Contract events](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#contract-events), including [getPastEvents](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#getpastevents), events are passed to a callback function for processing.  The callback function takes 2 parameters: an error, and an [event object](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#contract-events-return), in that order.\r\n\r\nSometimes, it is helpful to have some additional context when doing that processing, such as information from the event ABI or other context about why that event is being fetched.  Currently, one workaround is to set a global variable or similar prior to triggering the event watch/fetch, and then read that global in a callback.  However, globals are somewhat of an antipattern in programming.  There is a better workaround using closure as described [here](https://stackoverflow.com/a/40802112) and [here](https://stackoverflow.com/a/939206).  However, it seems like additional data in the event callback might be a relatively common use case to support directly.  This Issue provides a space for discussion on doing that.  \r\n\r\nNote: any implementation of this feature should not impact the ability to treat other parameters as optional, including the type-checking which supports that.\r\n\r\n#### Expected behavior\r\nAny event function which takes a callback as the last parameter takes a new optional parameter after that, which is copied at the time of the function call and passed on in that state as a third parameter to the callback function when an event arrives.  The callback function should ideally treat the third parameter as optional with at least reasonable error handling when it is absent.\r\n\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description\r\n\r\nInstance `new web3.eth.Contract` with a wrong address, and calling a method throws\r\n```\r\ninsufficuent data for address type (arg=\"\", coderType=\"address\", value=\"0x00\", version=4.0.29)\r\n```\r\n\r\n#### Expected behavior\r\n\r\nIt should say something about the instance. Perhaps, if a _wrong parameter_ error arrives, it should check the abi interface against the contract code and give a better error message.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.55\r\n* nodejs: v11.12.0\r\n* browser: latest chrome\r\n* ethereum node: https://public-node.rsk.co\r\n"},{"labels":[null,null,"enhancement"],"text":"**Possible improvement:**\r\n\r\nFirst: ```const signedTransaction = await web3.eth.accounts.signTransaction(tx, account.privateKey)```\r\n\r\nThen doing the following does not work:\r\n```\r\n  const receipt = await web3.eth.sendSignedTransaction(signedTransaction)\r\n```\r\nThrows: `Error: Returned error: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.`\r\n\r\nThis works:\r\n```\r\n  const receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction)\r\n```\r\n\r\nSeems a bit weird that you can't pass a `signTransaction` object to the `sendSignedTransaction()` method?\r\n\r\ncheers\r\n"},{"labels":[null,null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nCurrently, we have the ``AbstractMethodFactory`` class who is resolving the dependencies for the different method types based on a static ``Type`` property. This will complicate the architecture of the project in a long term view. \r\n\r\nThe solution for this would be to remove the static ``Type`` property and to implement static factory methods. \r\n\r\n\r\n#### Expected behavior\r\n\r\n``` javascript\r\nconst transactionMethod = AbstractObservedTransactionMethod.create();\r\n```\r\n\r\n#### Actual behavior\r\n\r\n``` javascript\r\nconst transactionMethod = new AbstractObservedTransactionMethod(...);\r\n```\r\n\r\n### Versions \r\n* web3.js: latest\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,"enhancement"],"text":"### Description\r\n\r\n`web3.eth.ens.getContenthash` does not return the decoded content as documented.\r\nNot clear if the doc or the behavior is wrong.\r\n\r\n#### Expected behavior\r\n\r\n```javascript\r\nweb3.eth.ens.getContenthash('pac-txt.eth').then((result) => {\r\n    console.log(result);\r\n});\r\n> 'QmdTEBPdNxJFFsH1wRE3YeWHREWDiSex8xhgTnqknyxWgu'\r\n```\r\n\r\n#### Actual behavior\r\n\r\n```javascript\r\nweb3.eth.ens.getContenthash('pac-txt.eth').then((result) => {\r\n    console.log(result);\r\n});\r\n> '0xe30101701220e08ea2458249e8f26aee72b95b39c33849a992a3eff40bd06d26c12197adef16'\r\n```\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description \r\n\r\nAccording to PR #2727 and the addition of `chainId` to checksum validations, input address formatters should be adapted.\r\nThe key method here is `inputAddressFormatter` from `web3-core-helpers/src/Formatters.js`.\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Passing a checksummed address with chainId should return the address in lowercase.\r\n----------------------------------------------------------------------->\r\n\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    It's not possible to apply a chainId to a checksummed address, therefore it throws an exception.\r\n----------------------------------------------------------------------->\r\n\r\n### Versions \r\n* web3.js: branch 1.0\r\n* nodejs:\r\n* browser:\r\n* ethereum node:\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nThe idea is to implement the possibility to use Observables for subscribing to the transaction confirmation workflow. \r\n\r\nThe goal would be to rename the ``PromiEvent`` to ``Output`` and to implement the [Observable](https://github.com/tc39/proposal-observable) proposal. \r\n\r\n``` javascript\r\ninterface Output {\r\n  subscribe({next: Function, error: Function, complete: Function}): Observable;\r\n  unsubscribe();\r\n  then(): Promise;\r\n  catch(): Promise;\r\n  on(): EventEmitter;\r\n  once(): EventEmitter;\r\n}\r\n```\r\n\r\n#### Expected behavior\r\n\r\n``` javascript \r\ncontract.methods.method().send().subscribe() \r\ncontract.methods.method().send().on()\r\ncontract.methods.method().send().then() \r\n```\r\n\r\n\r\n#### Actual behavior\r\n\r\n``` javascript \r\ncontract.methods.method().send().on()\r\ncontract.methods.method().send().then()\r\n```\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"This is not a bug per se, but a request for discussion and if approved as a feature request and if assigned to me, I am volunteering to implement it and submit a PR sometime in the cycle between 1.0 and 2.0.\r\n\r\nHere is the deal...\r\nhttps://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#wallet-save\r\n\r\nWhen a wallet is saved, it presently encrypts it into local storage and you need a password to load the wallet.  The problem is that once loaded, the privatekey is available and this leaves the privatekey vulnerable to XSS.\r\n\r\nA better solution would be to have 2 passwords, an app level password which is used for marshalling the wallet into and out of storage, and a user supplied password required for signing.\r\nThe privatekey should remain encrypted until needed.\r\n\r\nThere are only a handful of times that anyone actually needs the private key.  Basically it's only used for signing purposes.  So how about we don't store the private key at all?\r\n\r\nInstead, we could store half the key, by XORing it against a the bytes derived from a user supplied password \"p\" stretched into it's own key using a password based key derivation function pbkdf.\r\n\r\nWe would upgrade the transaction signing logic to require a Uint8Array[32] which would be the bytes from, pbkdf(p).  Each time a signing needs to occur, then we supply the user's half of the key, which ideally we should be prompting the user for.  Then we just XOR the user supplied part, pbkdf(p), with the stored part to recover the private key, long enough to sign with before disposing of it properly again.\r\n\r\nThe reason for using typed arrays here is so that they can be zero'd out after each use.\r\n\r\nNow keep in mind, there already exist PBKDF and PBKDF2 which are both standards, but are not specifically what I'm talking about.  Instead we could either roll our own using [argon2](\r\nhttps://www.npmjs.com/package/argon2)\r\n, or just re-use whatever they are doing in [ethereumjs-wallet](https://github.com/ethereumjs/ethereumjs-wallet) which appears to be 262144 rounds of HMAC-SHA256 according to their README.\r\n```\r\nFor pbkdf2:\r\n\r\nc - Number of iterations. Defaults to 262144.\r\nprf - The only supported (and default) value is hmac-sha256. So no point changing it.\r\n\r\n```\r\nThat particular function is slow, but could easily be accelerated in the browser using [crypto.subtle](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest), the built in crypto library...  \r\n\r\nThere are other things we could do to limit pain points.  However I think it goes without saying that our current model has a serious flaw and the only reason it isn't being taken advantage of in the wild, is that it isn't widely known.  DApps with their own wallets are presently vulnerable to key leakage if they are storing a wallet in the browser.\r\n\r\nIf you'd like to see an example of my proposed fix in action, I am taking this direction on one of the projects I'm working on and will be glad to post a link as soon as it's live.  This way you can see what the code would look like.\r\n\r\nThank you for taking the time to read this!\r\n"},{"labels":["enhancement"],"text":"As per [EIP56](https://github.com/ethereum/EIPs/issues/59), I think we should rename sha3 to keccak256. \r\nhttps://web3js.readthedocs.io/en/1.0/web3-utils.html?highlight=sha3#sha3\r\n\r\nWe can still put sha3, an alias of keccak256 if someone wants.\r\n\r\n- [x]  Enhancement"},{"labels":[null,null,"enhancement"],"text":"[Currently](https://web3js.readthedocs.io/en/1.0/web3-utils.html) the instance of `web3` has a member variable `utils` which provides **static** util methods. So a lot of people who only need a static utils method like `randomHex` do this:\r\n\r\n```js\r\nimport Web3 from 'web3'\r\nconst web3 = new Web3()\r\nweb3.utils.randomHex('...')\r\n```\r\n\r\nWhich is totally wrong an awkward. There is no reason to attach the utils to the instance of web3. Right now one can use the package `web3-utils` for an easier approach:\r\n\r\n```js\r\nimport * as web3Utils from 'web3-utils'\r\nweb3Utils.randomHex('...')\r\n```\r\n\r\nThis is nicer but also a little annoying to do. I recommend to export the Utils as a variable at the global export object. Then one can do this:\r\n\r\n```js\r\nimport Web3 from 'web3'\r\nWeb3.utils.randomHex('...')\r\n```\r\n\r\nTo emphasize: Any method or variable that does not need instance state should always be static and never a member variable of a classes instance."},{"labels":[null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nThe Web3.js library QA should get improved with integration tests. The goal is to test it against several node types (Geth, Parity, and Ganache).\r\nThese integration tests should run in a docker image for later adding it to the [GitHub actions](https://github.com/features/actions).\r\n\r\n#### Expected behavior\r\n\r\nI can execute ``npm run e2e`` and it will test the whole library with several node types.\r\n\r\n#### Actual behavior\r\n\r\nThere are no integration tests.\r\n"},{"labels":[null,null,null,"enhancement"],"text":"### Description\r\n\r\nThe current documentation on [contract event subscriptions](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#contract-events) are a bit vague as to the _actual_ behaviour of event subscriptions.\r\n\r\nLooking [under the hood](https://github.com/ethereum/web3.js/blob/cd32de24bf/packages/web3-core-subscriptions/src/subscriptions/eth/LogSubscription.js#L53), an `undefined`, `0`, or `'latest'` value for `fromBlock` skips the `eth_getlogs` call and immediately places a subscription.\r\n\r\nIt would be great if this was documented publicly and advertised as part of the API. We specifically have use cases where we want to avoid merge `eth_getlogs` and `eth_subscribe`'s results together in a transparent manner, to allow us to know when we've finished syncing past log state. We also sometimes want to only subscribe to new events.\r\n\r\n#### Expected behavior\r\n\r\nMore information would be available in the documentation.\r\n\r\n\r\n#### Actual behavior\r\n\r\nDocumentation is vague."},{"labels":[null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nCheck the method object names and bring more consistency to the web3-core-method module. \r\n\r\n#### Expected behavior\r\n\r\nAll objects name following the same pattern.\r\n\r\n### Versions \r\n* web3.js: latest\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description\r\n\r\nThe `sendSignedTransaction` errors due to a breaking provider interface change\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n```js\r\nWeb3 = require('web3')\r\nweb3 = new Web3(new Web3.providers.HttpProvider('https://xxx'))\r\nweb3.eth.sendSignedTransaction()\r\n```\r\n\r\n#### Error Logs \r\n\r\n```\r\nThrown:\r\nTypeError: moduleInstance.currentProvider.supportsSubscriptions is not a function\r\n    at MethodFactory.getTimeout (/Code/node_modules/web3-eth/node_modules/web3-core-method/dist/web3-core-method.cjs.js:554:43)\r\n    at MethodFactory.createTransactionObserver (/Code/node_modules/web3-eth/node_modules/web3-core-method/dist/web3-core-method.cjs.js:562:75)\r\n    at MethodFactory.createMethod (/Code/node_modules/web3-eth/node_modules/web3-core-method/dist/web3-core-method.cjs.js:543:77)\r\n    at Object.get (/Code/node_modules/web3-core-method/dist/web3-core-method.cjs.js:690:36)\r\n```\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.52\r\n"},{"labels":[null,null,"enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nThe following sections are describing the concepts to decouple the internal API from the exposed public API.\r\n\r\n### Classes And Methods\r\n\r\nAll internal dependencies are handled through wrapping of the method or pre-injecting required dependencies into the desired class.\r\n\r\n#### Classes\r\n\r\nExample: \r\n\r\n``` javascript \r\nimport web3 from '../web3.js';\r\nimport InternalDependency from './folder/file.js';\r\nimport MyClass from './MyClass.js';\r\n\r\nexport default class PublicApiWrapper extends MyClass {\r\n   /**\r\n   * @constructor\r\n   */\r\n   constructor(context = null) {\r\n     if (context) {\r\n        super(new InternalDependency(), context);\r\n     }\r\n     \r\n     super(new InternalDependency(), web3.default);\r\n   }\r\n}\r\n```\r\n\r\n#### Methods \r\n\r\nExported methods are aliases for static methods of the related value objects or wrappers for JSON-RPC methods. It is required to implement the issue https://github.com/ethereum/web3.js/issues/2801 for being able to update the public API layer of the ``web3-utils`` and ``web3-core-helpers`` module.\r\n\r\nExample (Value Object): \r\n\r\n``` javascript \r\nimport Address from '../types/Address';\r\n  \r\nexport const isAddress = function (address) => {\r\n    try {\r\n        new Address(address);\r\n    } catch (e) {\r\n        return false;\r\n    } \r\n    \r\n    return true;\r\n}\r\n```\r\n\r\n\r\nExample (JSON-RPC Method): \r\n\r\n``` javascript \r\nimport web3 from '../web3.js';\r\nimport GetBalanceMethod from '../methods/GetBalanceMethod.js';\r\n  \r\nexport const getBalance = function (address, context = null) {\r\n  if (context) {\r\n    return new GetBalanceMethod({address}, context).execute();\r\n  }\r\n    \r\n  return new GetBalanceMethod({address}, web3.default).execute();\r\n};\r\n```\r\n### Folders\r\n``` \r\nweb3-eth\r\n  src/\r\n  lib/\r\n  tests/\r\n  public_api/\r\n  index.js\r\n```\r\n### Modules\r\n\r\n- [ ] web3\r\n- [x] web3-core\r\n- [ ] web3-core-method\r\n- [ ] web3-core-subscriptions\r\n- [ ] web3-core-helpers\r\n- [ ] web3-eth\r\n- [ ] web3-eth-contract\r\n- [ ] web3-eth-abi\r\n- [ ] web3-eth-accounts\r\n- [ ] web3-eth-admin\r\n- [ ] web3-eth-debug\r\n- [ ] web3-eth-ens\r\n- [ ] web3-eth-iban\r\n- [ ] web3-eth-miner\r\n- [ ] web3-eth-personal\r\n- [ ] web3-eth-txpool\r\n- [ ] web3-net\r\n- [ ] web3-providers\r\n- [ ] web3-shh\r\n- [ ] web3-utils\r\n\r\n[Web3.js 2.0 Specification (in-progress)](https://github.com/ethereum/web3-examples/pull/19)\r\n\r\n### Versions \r\n* web3.js: latest\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":[null,null,"enhancement"],"text":"### Description <!-- In plain words, what happened -->\r\n\r\nNo `web3.min.js` available since v1.0.0-beta.38.\r\n\r\n#### Expected behavior\r\n\r\nA `web3.min.js` file should be pre-packed and is ready to use directly.\r\n\r\n#### Actual behavior\r\n\r\nThe collaborator said \"he\" always use webpack to bundle the js files.\r\nhttps://github.com/ethereum/web3.js/issues/2475#issuecomment-470934021\r\n\r\n### Versions \r\n* web3.js: >=1.0.0-beta.38\r\n\r\n----\r\n\r\nCan someone explain the reason behind this decision? It is too troublesome to use a bundler in order to use this library. I don't see why we can't have a `web3.min.js`. Many people are sticking with v1.0.0-beta.37 because of this.\r\n\r\n(You may view this issue as a question or a feature request)"},{"labels":[null,null,null,"enhancement"],"text":"### Description\r\nIn the `TransactionObserver` class, the polling rate is set to poll every 1000 ms. While this is fine for the mainnet and testnets, people using private networks or ganache have experienced a significant performance dip.\r\nI personally have fixed this locally by changing the observer to poll every 100ms.\r\nPerhaps this could be added as a configurable option (with a default of 1000), similar to the options added under this new transaction confirmation workflow.\r\nPlus it's nice to remove hardcoded values in the codebase.\r\n\r\n#### Expected behavior\r\nTransaction confirmations are processed multiple times per second.\r\n\r\n\r\n#### Actual behavior\r\nConfirmations take up to 1000ms each, a hardcoded value.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\nConfigure web3 with any private network that has a high transaction throughput and try to run many transactions in a row.\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.51\r\n"},{"labels":[null,null,"enhancement",null],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nIt is said that\r\n>Instead of transforming numbers to string values do we return now the BigNumber object we get from the AbiCoder.\r\n\r\nSeems like these BigNumber come from ethers.js which [enwraps BN's](https://github.com/ethers-io/ethers.js/blob/master/utils/bignumber.js) making it impossible to operate them in conjuncture with pure BN.\r\n\r\n```js\r\nimport BN from 'bn.js';\r\n\r\n// ...\r\n\r\nconst value = await myContract.methods.method.call();\r\nconst half = value.div(new BN(2)); //  <-- Throws here \r\n```\r\n\r\n#### Expected behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` should return an array.\r\n----------------------------------------------------------------------->\r\nCode above works\r\n\r\n#### Actual behavior\r\n<!---------------------------------------------------------------------\r\n    Example:\r\n    Calling `await web3.eth.getAccounts()` returns \"monkey\".\r\n----------------------------------------------------------------------->\r\nThe error is `Error: invalid BigNumber value (arg=\"value\", value=\"2\", version=4.0.27)`\r\n\r\n\r\n### Versions \r\n* web3.js: 1.0.0-beta.51\r\n* browser: Chrome 71\r\n* ethereum node: Rinkeby\r\n\r\n\r\n<!---------------------------------------------------------------------\r\n                    Thanks for your cooperation!\r\n----------------------------------------------------------------------->\r\n"},{"labels":["enhancement"],"text":"<!---------------------------------------------------------------------------------------\r\n\r\nWelcome to the Web3.js Issue Template!\r\n\r\nIf you're new around here, reading this will make sure you're helped ASAP.\r\nThe more details you include, the better the community will be able to help you!\r\n\r\n---------------------------------------------------------------------------------------->\r\n\r\n### Description <!-- In plain words, what happened -->\r\n\r\nIt's returning strings instead of BigNumber objects on a contract method call.\r\n\r\n#### Expected behavior\r\n\r\nReturns a BigNumber object instead of a string.\r\n\r\n#### Actual behavior\r\n\r\nReturns a number as string.\r\n\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n``` javascript\r\ncontract.methods.method().send().then(console.log);\r\n```\r\n\r\n#### Error Logs \r\n-\r\n\r\n\r\n### Versions \r\n* web3.js: latest\r\n"},{"labels":["enhancement"],"text":"I have upgraded to 1.0.0-beta.49 in package.json ( \"web3\": \"1.0.0-beta.49\" )\r\n\r\nThe file node_modules/web3/dist/web3.cjs.js contains:\r\n```\r\n...\r\nvar version = \"1.0.0-beta.48\";\r\n...\r\n```\r\nSo when a create a provider, the version is 1.0.0-beta48. "},{"labels":[null,null,null,"enhancement"],"text":"## Improving of the EventLog interface\r\n\r\nCurrently the indexed and the non-indexed decoded returned input parameters are returned within the ``returnValues`` property of the ``EventLog`` object. This property does contain an object which contains the returned topics and data properties encoded and added by the input name and input index.\r\n\r\nThe ``returnValues`` property does exist in a returned transaction receipt of a ``Contract`` method call or when you subscribe to a ``Contract`` event.\r\n\r\n[``decodeLog(inputs: Array, data: string, topics: Array)``](https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-abi/src/AbiCoder.js#L191)\r\n\r\nFeel free to write a comment with your opinion about it.\r\n\r\n#### Expected behavior\r\n\r\n``` javascript\r\n{\r\n  outputs: {\r\n    namedParameter: 'value',\r\n    nonIndexedNamedParameter: 'value'\r\n  }\r\n}\r\n```\r\n\r\n#### Actual behavior\r\n\r\n``` javascript\r\n{\r\n  returnValues: {\r\n    namedParameter: 'value',\r\n    0: 'value',\r\n    nonIndexedNamedParameter: 'value',\r\n    1: 'value'\r\n  }\r\n}\r\n```\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Subscribe to a contract event\r\n\r\n#### Versions\r\nWeb3.js latest version\r\n"},{"labels":[null,null,"enhancement"],"text":"The idea is to provide more security with calling the default methods of ``AbstractWeb3Module`` classes over a ``Proxy`` with a strict setter and getter handler. This should also be added to the ``Account`` class in the eth-accounts module.\r\n\r\n#### Expected behavior\r\n\r\nIt's not possible to overwrite a method of the public API.\r\n\r\n#### Actual behavior\r\n\r\nIt's possible right now in some ``AbstractWeb3Module`` based classes and the ``Account`` class.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Create a ``AbstractContract`` or ``Accounts`` class and overwrite an implemented method.\r\n2. call this method\r\n\r\n#### Versions\r\nWeb3.js - latest\r\n"},{"labels":[null,"enhancement"],"text":"#### Expected behavior\r\n\r\nWhen i hook onto `PromiEvent` event listener on confirmations i get the correct confirmation number at the correct time not just random count of confirmations number every second.\r\n\r\n#### Actual behavior\r\n\r\nWhen i hook onto `PromiEvent` event listener on confirmations it seems its not inline with when the next block has been mined, on Rinkeby it's every 15 seconds but on web3 it returns the confirmation every second which is not correct.\r\n\r\n```\r\nweb3.eth.sendSignedTransaction(rawTransaction)\r\n.on(\r\n            'confirmation',\r\n            (confirmationNumber: number, receipt: TransactionReceipt) => {\r\n              // fires new confirmation number up to 24 every second\r\n            },\r\n          )\r\n```\r\n\r\nIt also states in the documentation that it stops the event listener firing after 12 confirmations yet it goes up to 24. \r\n\r\nThis should be in line with the proper confirmations number and fire correctly and not just return a fake confirmation number every second.\r\n\r\n#### Versions\r\n1.0.0-beta.46\r\n"},{"labels":[null,null,"enhancement"],"text":"**All issues which aren't created with this template will get immediately closed.**\r\n\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\nI'm using eth node on remote servers. HTTP RPC endpoint is behind nginx, which checks client ssl certificate to authorise access. I want Web3 HttpProvider to accept certificate options and use them when instantiating `https.Agent`.\r\n\r\n#### Actual behavior\r\n\r\nThe only option that is currently passed to the Agent is `keepAlive`.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. [First step]\r\n2. [Second step]\r\n3. [and so on...]\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\n\r\nWeb3.js 1.0.0-beta46"},{"labels":["enhancement"],"text":"#### Expected behavior\r\n\r\n The now deprecated [node-scrypt](https://github.com/barrysteyn/node-scrypt) should be an optional dependency.\r\n\r\n#### Actual behavior\r\n\r\nweb3-eth-accounts depends on [scrypt.js](https://github.com/axic/scrypt.js) which has recently released a new [version.](https://github.com/axic/scrypt.js/pull/3)\r\n\r\nThis version allows the users to optionally exclude the package [node-scrypt](https://github.com/barrysteyn/node-scrypt)\r\n\r\nnode-scrypt is treated as an optional dependency and users specifying --no-optional will install the JS-version of scrypt, scryptsy, only. \r\n\r\nThis is important because node-scrypt relies on node-gyp bindings and is problematic to install on some systems. \r\n\r\nBy bumping scrypt.js to 0.3.0 we will also be making node-scrypt optional.\r\n\r\nUsers not specifying --no-optional on installation will not be affected by this change. \r\n\r\n#### Steps to reproduce the behavior\r\n1. npm install --save web3@1.0.0-beta.46\r\n2. it installs scrypt.js 0.2.0\r\n\r\n#### Versions\r\nweb3.js 1.0\r\n\r\nOn a side note, node-scrypt is considered deprecated by the author since Node now has a standard library for [scrypt.](https://nodejs.org/api/crypto.html#crypto_crypto_scrypt_password_salt_keylen_options_callback)\r\n\r\nIt would be awesome if we could move to this long-term."},{"labels":["enhancement"],"text":"\r\n\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\nyes\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\nI've seen many tangentially related issues but mine is very straight forward\r\n3. I checked the issue list if an identical issue already exists.\r\nno\r\n-->\r\n\r\n#### Expected behavior\r\nI should get a decimal number\r\n#### Actual behavior\r\nI get an error\r\n#### Steps to reproduce the behavior\r\n\r\n```\r\nconst Web3 = require('web3');\r\nconst net = 'https://mainnet.infura.io/';\r\nconst walletAddress = '0x44...';\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(net));\r\nweb3.eth.getBalance(walletAddress).then((bal) => {\r\n    bal = web3.utils.toDecimal(bal);\r\n    console.log(bal);\r\n});\r\n```\r\n\r\n#### Error Logs\r\n\r\n> (node:50698) UnhandledPromiseRejectionWarning: Error: Number can only safely store up to 53 bits\r\n>     at assert (/Users/ekkis/dev/eth/node_modules/number-to-bn/node_modules/bn.js/lib/bn.js:6:21)\r\n>     at BN.toNumber (/Users/ekkis/dev/eth/node_modules/number-to-bn/node_modules/bn.js/lib/bn.js:506:7)\r\n>     at Object.hexToNumber (/Users/ekkis/dev/eth/node_modules/web3-utils/dist/web3-utils.cjs.js:103:22)\r\n>     at web3.eth.getBalance.then (/Users/ekkis/dev/eth/index.js:9:19)\r\n>     at process.internalTickCallback (internal/process/next_tick.js:77:7)\r\n> (node:50698) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n> (node:50698) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n> \r\n\r\n#### Versions\r\nNPM: 6.7.0\r\nNode: 11.5.0\r\nWeb3.js: '1.0.0-beta.43'\r\nOS: OSX 10.14\r\n"},{"labels":["enhancement"],"text":"#### Expected behavior\r\nA provider implemented with the EIP-1193 standard which does not have the name ``EthereumProvider`` will be resolved and handled as EIP-1193 provider. \r\n\r\n#### Actual behavior\r\nOnly EIP-1193 providers with the name ``EthereumProvider`` will be handled as valid EIP-1193 provider.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. Inject an EIP-1193 provider without the name ``EthereumProvider``\r\n\r\n#### Error Logs\r\n \r\nWill throw an invalid provider error.\r\n\r\n#### Versions\r\nWeb3.js - v1.0.0-beta.43\r\n"},{"labels":[null,null,"enhancement"],"text":"**All issues which aren't created with this template will get immediately closed.**\r\n\r\n<!---\r\n\r\nSteps before creating an issue: \r\n\r\n1. I have read the documentation.\r\n2. I was looking for an solution on stackoverflow or somewhere else.\r\n3. I checked the issue list if an identical issue already exists.\r\n\r\n-->\r\n\r\n#### Expected behavior\r\n\r\n`const contract = web3js.eth.Contract(abi, address);`\r\n\r\nshould (and used to) return a contract instance\r\n\r\n#### Actual behavior\r\n\r\ninstead it throws this error\r\n`web3-core-method.umd.js?b3db:226 Uncaught (in promise) TypeError: Duplicated method __ob__. This method is defined as RPC call and as Object method.`\r\n\r\n#### Steps to reproduce the behavior\r\n\r\n1. [First step]\r\n2. [Second step]\r\n3. [and so on...]\r\n\r\n#### Error Logs\r\n\r\n```\r\nweb3-core-method.umd.js?b3db:226 Uncaught (in promise) TypeError: Duplicated method __ob__. This method is defined as RPC call and as Object method.\r\n    at Object.get (web3-core-method.umd.js?b3db:226)\r\n    at observe (vue.runtime.esm.js?2b0e:961)\r\n    at defineReactive$$1 (vue.runtime.esm.js?2b0e:1002)\r\n    at Observer.walk (vue.runtime.esm.js?2b0e:914)\r\n    at new Observer (vue.runtime.esm.js?2b0e:902)\r\n    at observe (vue.runtime.esm.js?2b0e:970)\r\n    at defineReactive$$1 (vue.runtime.esm.js?2b0e:1002)\r\n    at Observer.walk (vue.runtime.esm.js?2b0e:914)\r\n    at new Observer (vue.runtime.esm.js?2b0e:902)\r\n    at observe (vue.runtime.esm.js?2b0e:970)\r\n```\r\n\r\n#### Versions\r\n[NPM, Node, Web3.js, OS, device...]\r\n\r\nmost recent versions of npm, node, web3.js (beta 41). in browser (Chrome with metamask)"},{"labels":["enhancement"],"text":"Once again, thank you for your awesome work with Web3 v1.x. \r\n\r\nAnother thing that we found kind of cumbersome when migrating ZeppelinOS to Web3 v1.x, is that Web3 Contract objects no longer have an `.address` property, but an `._address` or an `.options.address` property. We ended up having to modify the produced Web3 Contract instances by addind a `.address` getter. Could this be avoided in future releases of Web3? Is there any reason for not doing what we did?\r\n\r\nThx! <3\r\n\r\n#### Expected behavior\r\n\r\nI see no reason for a Web3 Contract instance object not to have an `address` property.\r\n\r\n#### Actual behavior\r\n\r\nInstead, Web3 Contract instances have a `_address` and `options.address` properties.\r\n\r\n#### Steps to reproduce the behavior\r\n\r\nDeploy any contract and console log the resulting instance.\r\n\r\n#### Error Logs\r\n\r\n#### Versions\r\nWeb3 1.0.0-beta.37\r\n"},{"labels":[null,"enhancement"],"text":"Right now there are no preview links for the docs in the PRs, right? This can be quickly achieved with netlify."},{"labels":[null,"enhancement"],"text":"As far as I can tell the docs are built with `npm run docs`. This will then build a bunch of PDF files. Is this really the dev cycle? Is there not some \"watch mode\" which rebuilds on file change?"},{"labels":[null,null,null,"enhancement"],"text":"Stop supporting callbacks in the API. Just support promises, it is the future. If anyone is old-school and wants callbacks, they can use https://www.npmjs.com/package/callbackify"},{"labels":["enhancement"],"text":"Web3 v1 is great, thank you for all your amazing work! :tada: \r\n\r\nWe encountered a small annoyance when migrating ZeppelinOS to Web3 v1 though. Some Web3 methods that receive a txParams (or \"options\") object, which contain properties such as gas, from, value, etc. currently alter the incoming object. This may not have significant consequences when making a few, isolated calls to Web3, but they do cause problems that are very difficult to debug in more complex applications.\r\n\r\nThis may not sound like a big deal at first, but it actually hinders the DX of Web3 a lot. Our solution was to only pass a copy of txParams when interacting with Web3  by doing `{ ...txParams }`  instead of the actual object.\r\nFor example: https://github.com/zeppelinos/zos/blob/1aad03c6bdbccf336a8fc95602d4e7fec31937fd/packages/lib/src/utils/Transactions.ts#L104\r\n\r\nIf Web3 performed the copy internally, and hence avoided contaminating the incoming object, all these problems could easily be avoided."},{"labels":[null,null,null,"enhancement"],"text":"I believe that the lax requirements for the `Transaction` object parameter keep coming back with more problemas behind it. The package should instead include a class `Transaction` that can only take values `(foo|'auto')`, where auto means the package will use the RPC magic to calculate e.g. gas amount.\r\n\r\nAlthough it might seem like a favor to developers by not having to expose all of the transaction parameters, it is probably more harmful overall by allowing people to half-understand what is going on. Let me know if you think this should be included in 1.0.0 and I can work on the feature, @nivida, @frozeman."},{"labels":[null,"enhancement"],"text":"When we have a revert in a transaction, webę throws an error, and the error message contains the revert reason, which is great. However, the message looks like `Returned error: VM Exception while processing transaction: revert Name of storage is required -- Reason given: Name of storage is required.`. Which means that we have to parse the message in order to get the revert reason, and the parser code is going to break every time the message formatting is changed (e.g. \"Reason given\" is changed to \"Reason provided\").\r\n\r\nWould be great to have it structured, e.g. have a separate field that contains the revert reason. Or even something like this:\r\n```\r\n{\r\n  message: \"Returned error: VM Exception while processing transaction: revert Name of storage\r\nis required -- Reason given: Name of storage is required.\",\r\n  inner: {\r\n    message: \"VM Exception while processing transaction: revert\",\r\n    status: \"REVERT\",  //something that won't be changed or localized\r\n    inner: {\r\n      message: \"Name of storage is required.\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe reason (pun intended) is that we need to know 1) if the error was due to a revert and 2) if yes, what was the revert reason. This would be particularly helpful in automated tests, but also in UI."},{"labels":[null,null,null,"enhancement"],"text":"While porting OpenZeppelin's test suite to bn.js, we found a lot of pain points, some of which could have security implications.\r\n\r\nFor example, scientific notation is not supported, but instead of erroring it produces completely unrelated numbers.\r\n\r\n```javascript\r\n> new BN('5e+18').toString()\r\n'63518'\r\n```\r\n\r\nThis appears to have been fixed in the repository in 2017, but the current latest release on npm is from before that, so doesn't include those fixes. This makes me think perhaps we should consider the library to be unmaintained...\r\n\r\nThe error messages produced by the library are also very unhelpful.\r\n\r\n```javascript\r\n> new BN(5000000000000000000000000000)\r\nError: Assertion failed\r\n> a = new BN(0)\r\n> a.add(3)\r\nTypeError: Cannot create property 'negative' on number '3'\r\n```\r\n\r\nThis will make for a terrible development experience for web3.js users.\r\n\r\nIs bn.js really a good choice for web3.js? Have you considered alternatives?"},{"labels":[null,null,"enhancement"],"text":"https://web3js.readthedocs.io/en/latest/ is empty yet continues to show up in search engines and in the docs' navigation bar under \"Versions\". It also happens to be what you get redirected to when you go to https://web3js.readthedocs.io.\r\n\r\nThe \"Edit on GitHub\" button links to https://github.com/ethereum/web3.js/blob/master/index.rst which doesn't exist.\r\n"},{"labels":[null,null,null,null,"enhancement"],"text":"## Motivation\r\n\r\nThere might be more than one block with a specific number on the blockchain and using the block hash avoid ambiguity.\r\nMy personal motivation is to be able to cache historical events on a nginx. With the block hash, I do believe that the cache is much more reliable as the client could simply check the blockhash and use it in the request. Different request, different cache or another request ;-)\r\n\r\n## Implementation\r\n\r\nI am not familiar with Geth and other RPC server implementations which is why I am posting my request here. Hence, some impacts might be exist on the rpc server to allow this type of mechanisms.\r\n\r\nOn the client side, it is desired to be able to control at least some of the http mechanisms which relates to caching: \r\n- the method to use (POST vs GET),\r\n- 'Cache-Control' header"},{"labels":[null,null,null,"enhancement"],"text":"I'm getting up to date with the recent changes to this project, and read in [@nivida's post](https://medium.com/@samuel_91690/my-first-months-as-the-maintainer-of-web3-js-7715470b7ef7) that there will be different bundles of web3.js for different use-cases. This gave me some ideas that I'm sharing here.\r\n\r\nMy understanding is that web3 was modularized in many packages so users could pick the parts they need and avoid importing the entire lib, as it's really big. While node users also benefit from smaller packages, they are specially important for web development, and there's lots of tooling focused on that that could be leveraged.\r\n\r\nExporting an ESM-based version of web3 let users take advantage of bundlers' tree-shaking capabilities, resulting in small bundles (probably smaller than the current module-specific ones) without having to manage nor think about multiple packages. This may require some changes, but would also simplify the project, which could be once again a single package.\r\n\r\nNote that this approach is becoming fairly standard in web development, and many of the most used libraries are adopting it. Some examples are: lodash, underscore and date-fns.\r\n\r\nI haven't spent much time thinking about how big of a change this would be, or how much impact it would have on current users of the beta versions, but a quick look at [web3](https://www.npmjs.com/package/web3) and [web3-eth](https://www.npmjs.com/package/web3-eth) on npm reveals that the intermediate packages have very few direct users."},{"labels":[null,null,null,null,"enhancement"],"text":"I have just spent many hours trying to find which line of code in my contracts could possibly cause a revert.\r\n\r\nNaturally, I started in the main contract's fallback function (invoked when transferring funds to that contract), and followed down the line to every other function invoked from it.\r\n\r\nI have investigated by disabling different parts of the code, until arriving at the point where a single increment operation (`++`) made the difference (`sendTransaction` reverted when this line was included, and did not revert when this line was excluded).\r\n\r\nAt this point, I started suspecting that this was a `gas` issue.\r\nSo I added `gas: Number.MAX_SAFE_INTEGER` when calling `sendTransaction`, and voila!\r\n\r\nNow please correct me if I'm wrong, but shouldn't the function throw an `insufficient gas` exception or something like that? Throwing a `revert` exception is extremely misleading IMO.\r\n\r\nPlease note that this problem occurs when testing with Truffle v4.1.14, which uses web3.js v0.18.4, so it might be irrelevant for more recent versions of web3.js.\r\n\r\nThanks\r\n\r\nUPDATE:\r\n\r\nI realize that this problem could in fact go back to the Ethereum node itself, so to add some related info, I am using ganache-cli v6.1.8."},{"labels":[null,"enhancement"],"text":"Hi,\r\n\r\nI needed a function to generate the r, s, v parameters of the signature of a message that I signed with web3, and was surprised that I couldn't find such a function available in web3 (unless I missed something of course). Does it fit within the scope of the project to include this? I can make a pull request if so, this is my current implementation:\r\n\r\n```\r\n    getSignatureParameters( signature ) {\r\n        const r = signature.slice( 0, 66 );\r\n        const s = `0x${signature.slice( 66, 130 )}`;\r\n        let v = `0x${signature.slice( 130, 132 )}`;\r\n        v = this.web3.utils.toDecimal( v );\r\n\r\n        if ( ![ 27, 28 ].includes( v ) ) v += 27;\r\n\r\n        return {\r\n            r,\r\n            s,\r\n            v\r\n        };\r\n    };\r\n```"},{"labels":[null,null,null,"enhancement"],"text":"[EIP712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md) proposes a standard for hashing and signing of typed structured data as opposed to just bytestrings.\r\n\r\nSimilarly to ethereum message who are sign using\r\n``\r\necsign(keccak256(\"\\x19Ethereum Signed Message:\\n\" | message.length | message))\r\n``\r\nEIP712 proposes to sign arbitrary structures using:\r\n``\r\necsign(keccak(\"\\x19\\x01\" | domainSeparator | hashStruct(message)))\r\n``\r\nwith `domainSeparator` et `hashStruct` described by the proposal.\r\n\r\nI have implemented these functions, meaning I am able to compute `keccak(\"\\x19\\x01\" | domainSeparator | hashStruct(message)))` ... I am only missing the ecsign part. I understand that exposing ecsign can be dangerous in production application (you don't control what people sign) but for the sake of testing and debuging my smartcontract in truffle/ganache I need a way to sign my custom message.\r\n\r\nUsing `web3.eth.sign` includes the `\"\\19Ethereum Signed Message:\\n\" + message.length` salting so it doesn't meet my needs.\r\n\r\n`ethereumjs-util.ecsign` could be a solution but it requires the private key that I don't know how to access.\r\n\r\nAny solution for me ? Is support for EIP712 signature planned ?"},{"labels":[null,"enhancement"],"text":"Using version  '1.0.0-beta.36'\r\nwhen using web3.utils...like such\r\n <img width=\"300\" alt=\"screen shot 2018-09-25 at 3 54 25 pm\" src=\"https://user-images.githubusercontent.com/14198661/46042600-65050a00-c0db-11e8-9c6f-aab5fdf921fc.png\">\r\n\r\nCurrently the web3.utils.stringToHex() function and other, are returning single quote strings of hex values, which is problematic since solidity only accepts them as a double quoted character.\r\n\r\nExample:\r\n\r\n> web3.utils.stringToHex(\"test\")\r\n'0x74657374'\r\n\r\nSolidity reject this as a valid hex string argument\r\n\r\nShouldnt it  Be (docs use double quotes in examples too):\r\n\"0x74657374\"\r\n\r\nThe serialized output with single quotes causes issues inside solidity:\r\n![err1](https://user-images.githubusercontent.com/14198661/46043125-bfeb3100-c0dc-11e8-9ac9-e5963951eb29.png)\r\n\r\nserialized output with double quotes now works:\r\n![err2](https://user-images.githubusercontent.com/14198661/46043324-54ee2a00-c0dd-11e8-9bfe-c75ffdf0232a.png)\r\n\r\nThe read the docs, example do indeed show double quotes:\r\n<img width=\"919\" alt=\"screen shot 2018-09-25 at 4 21 41 pm\" src=\"https://user-images.githubusercontent.com/14198661/46044026-3db03c00-c0df-11e8-8c69-d268a29f4b49.png\">\r\n\r\n"},{"labels":["enhancement"],"text":"When calling `web3.eth.sendTransaction()` or `web3.eth.sendSignedTransaction()`, the PromiEvent returned does not provide `receipt` as the second parameter to it's `error` event [like the docs suggest here](https://web3js.readthedocs.io/en/1.0/web3-eth.html#eth-sendtransaction-return):\r\n\r\n```javascript\r\n// using the event emitter\r\nweb3.eth.sendTransaction({\r\n    from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\r\n    to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\r\n    value: '1000000000000000'\r\n})\r\n.on('transactionHash', function(hash){\r\n    ...\r\n})\r\n.on('receipt', function(receipt){\r\n    ...\r\n})\r\n.on('confirmation', function(confirmationNumber, receipt){ ... })\r\n.on('error', console.error); // If a out of gas error, the second parameter is the receipt.\r\n\r\n```\r\n\r\nInstead, it appears to be `JSON.stringify`-ing the receipt and just appending it to the error message, which isn't super useful if you need to read some data off the receipt object. As a workaround, I can just call `web3.eth.getTransactionReceipt()` in the error handler (or like, `JSON.parse()` everything after the first line break in `error.message`?), but that's not ideal since the receipt _should_ be available to me already.\r\n\r\nAfter digging around a bit, I found that [this line](https://github.com/ethereum/web3.js/blob/1.0/packages/web3-core-method/src/index.js#L362) is indeed `JSON.stringify`-ing the receipt and appending it to the error message.\r\n\r\nYou can test this with some trivial example code:\r\n\r\n```javascript\r\nweb3.eth.sendTransaction(transactionData) // specify a gasLimit you know will be too low for the contract method you're calling\r\n\r\n  .on('error', (error, receipt) => {\r\n    // receipt is undefined and error.message is:\r\n    //\r\n    // Transaction has been reverted by the EVM:\r\n    // {\r\n    //   \"transactionHash\": \"0xa2ac91c7affd59a761dd088230008082a0bcd3c43e46dd70a70e79db9c5df993\",\r\n    //   \"transactionIndex\": 0,\r\n    //   \"blockHash\": \"0x8efa4a788fd29ccc0d25a893635c4c37ebe9ddc452df83f7c249181451f8c0e0\",\r\n    //   \"blockNumber\": 267,\r\n    //   \"gasUsed\": 240358,\r\n    //   \"cumulativeGasUsed\": 240358,\r\n    //   \"contractAddress\": null,\r\n    //   \"logs\": [],\r\n    //   \"status\": false,\r\n    //   \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\r\n    // }\r\n  })\r\n```"},{"labels":["enhancement"],"text":"I'd like to catch `end` event in one place and do reconnect and resubscribe to `.allEvents` in another place, but I can't assign more than function to `connect` `end` and `error` events of websocket provider. Here is part of code explaining why it happens\r\n```\r\nWebsocketProvider.prototype.on = function (type, callback) {\r\n\r\n    if(typeof callback !== 'function')\r\n        throw new Error('The second parameter callback must be a function.');\r\n\r\n    switch(type){\r\n        case 'data':\r\n            this.notificationCallbacks.push(callback);\r\n            break;\r\n\r\n        case 'connect':\r\n            this.connection.onopen = callback;\r\n            break;\r\n\r\n        case 'end':\r\n            this.connection.onclose = callback;\r\n            break;\r\n\r\n        case 'error':\r\n            this.connection.onerror = callback;\r\n            break;\r\n    }\r\n```"},{"labels":[null,null,null,null,"enhancement"],"text":"Node-gyp is not support python 3 at least 10 years. And why we use it in 2018?\r\nMaybe [cmake-js](https://github.com/cmake-js/cmake-js) is better?\r\nAll packages that depend on web3 have problems with installation now under windows."},{"labels":["enhancement"],"text":"Imagine we have 2 events:\r\n\r\n```\r\nTransfer(address,address,uint256)\r\nTransfer(address,address,uint256,bytes)\r\n```\r\ni should be able to make a call like\r\n```\r\nawait tokenContract.getPastEvents('Transfer(address,address,uint256)', {})\r\n```\r\n\r\n\r\nI can only do it with subscriptions:\r\n\r\n`tokenContract.events['Transfer(address,address,uint256)']`"},{"labels":[null,"enhancement"],"text":"After calling `new Web3('ws://localhost:8545')` the node.js process never ends but instead hangs forever\r\nCalling `web3.currentProvider.connection.close()` does not help and throws error when using with the `HttpProvider`.\r\n (Of course you can call `process.exit(0)` but it's ugly)\r\n"},{"labels":[null,null,null,"enhancement"],"text":"Here's something that worked without any issues in MetaMask but did not work using web3 + http rpc on a private go ethereum blockchain:\r\n\r\n1) Add a wallet to web3 using a private key\r\n2) Deploy two contracts at the same time using\r\n```\r\nPromise.all([contract1.deploy({...}).send(), contract2.deploy({...}).send()])\r\n```\r\n3) Get error\r\n```\r\nError: Returned error: replacement transaction underpriced\r\n    at Object.ErrorResponse (/.../node_modules/web3-core-helpers/src/errors.js:29:16)\r\n    at /.../node_modules/web3-core-requestmanager/src/index.js:140:36\r\n    at XMLHttpRequest.request.onreadystatechange /.../node_modules/web3-providers-http/src/index.js:79:13)\r\n    at XMLHttpRequestEventTarget.dispatchEvent (/.../node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:22)\r\n    at XMLHttpRequest._setReadyState (/.../node_modules/xhr2-cookies/dist/xml-http-request.js:208:14)\r\n    at XMLHttpRequest._onHttpResponseEnd (/.../node_modules/xhr2-cookies/dist/xml-http-request.js:318:14)\r\n    at IncomingMessage.<anonymous> (/.../node_modules/xhr2-cookies/dist/xml-http-request.js:289:61)\r\n    at emitNone (events.js:111:20)\r\n    at IncomingMessage.emit (events.js:208:7)\r\n    at endReadableNT (_stream_readable.js:1064:12)\r\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\r\n    at process._tickCallback (internal/process/next_tick.js:180:9)\r\n```\r\n4) Ethereum blockchain continues to deploy only one contract\r\n\r\n__Workaround__: Instead of using `Promise.all()`, running the deploy in sequence works, albeit at a much slower speed.\r\n\r\n__Question__: What is different in how MetaMask handles nonces vs. web3?\r\n\r\nEdit: I'm using `web3@1.0.0-beta.35`"},{"labels":[null,"enhancement"],"text":"There is a version `0.20.7` published on NPM. I think this is a mistake. I cannot find the source code for it or a tag with that version."},{"labels":["enhancement",null],"text":"https://github.com/ethereum/web3.js/blob/798e8b97dc38e58cce4cdd92957dc756dabac9d8/lib/web3/contract.js#L105-L115\r\n\r\nCan we move this hardcoded parameter `if (count > 50)`  to the configuration ? "},{"labels":[null,"enhancement"],"text":"I just noticed some strange behavior when passing strings via bytes32 arrays (to get around dynamic array restriction).\r\n\r\nQuick test code showing output when passing in >32 chars in the arrays:\r\n\r\n**web3:**\r\n```\r\nlet str64chars  = '///////////////////////////////////////////////////////////////1';\r\nlet str48chars  = '-----------------------------------------------2';\r\nlet str16chars  = '+++++++++++++++3';\r\nlet str16chars2 = '^^^^^^^^^^^^^^^4';\r\nlet str32chars  = '###############################5';\r\n\r\nawait testContract.testingBytes32Arrays([str64chars, str48chars, str16chars, str16chars2, str32chars]);\r\n```\r\n\r\n\r\n**contract:**\r\n```\r\nfunction bytes32ToString(bytes32 _bytes) internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(_bytes.length);\r\n\r\n        uint charCount = 0;\r\n        for (uint i = 0; i < _bytes.length; ++i) {\r\n            byte char = byte(_bytes[i]);\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                ++charCount;\r\n            }\r\n        }\r\n\r\n        return string(bytesString);\r\n}\r\n\r\n function testingBytes32Arrays(bytes32[] _arrays)\r\n    external {\r\n        for (uint256 i = 0; i < _arrays.length; ++i) {\r\n            LibLog.log(bytes32ToString(_arrays[i]));\r\n        }\r\n }\r\n\r\n```\r\n\r\n**output:**\r\n    \r\n```\r\n    Events emitted during test:\r\n    ---------------------------\r\n\r\n    LogString(: ////////////////////////////////)\r\n    LogString(: ///////////////////////////////1)\r\n    LogString(: --------------------------------)\r\n    LogString(: ---------------2)\r\n    LogString(: +++++++++++++++3)\r\n\r\n    ---------------------------\r\n```\r\n\r\n\r\nI don't have time to look at the root of this atm but can maybe do so soon if this is not a known problem already on on someone's plate.\r\n\r\nI think the best solution would be to fail when passing >32 bytes for that type as while the user should be doing the check too, it's easy to slip here I imagine."},{"labels":["enhancement"],"text":"web3js lists github.com/frozeman/bignumber.js-nolookahead as a dependency and causes issues when installing, can we please add this as a package "},{"labels":[null,"enhancement"],"text":"According to [Solidity 0.4.22 release](https://github.com/ethereum/solidity/releases/tag/v0.4.22), we can specify the reason in `revert` or `require` function. \r\n\r\nAfter web3 1.0 alpha (or stable) version released, should plan to support reason string."},{"labels":[null,null,"enhancement"],"text":"Support tuple and array of tuples in soliditySha3 function in web3-utils."},{"labels":["enhancement"],"text":"Please update the WS library to the newest version of 5.2.0. There are some issues with Windows users with the older version of WS 3.3.3. Thank you."},{"labels":[null,"enhancement"],"text":"I use websocket (ws) coneection to Infura node \r\n\r\n`web3 = new Web3(new Web3.providers.WebsocketProvider(\"wss://ropsten.infura.io/ws\"));`\r\n\r\nsometimes it's works fine or sometimes it give error on console : \r\n\r\n`Error: CONNECTION ERROR: Couldn't connect to node on WS.`\r\n\r\n`Uncaught (in promise) Error: CONNECTION ERROR: Couldn't connect to node on WS.`\r\n\r\nI am not getting why its happening.\r\n"},{"labels":[null,null,"enhancement"],"text":"`web3.eth.accounts.sign(data, privateKey);`\r\nwe should  be able to pass chainId so that `v` value  could be different"},{"labels":[null,"enhancement"],"text":"In the WebSocket-Node\r\n\r\nhttps://github.com/frozeman/WebSocket-Node/blob/master/lib/WebSocketFrame.js#L256\r\n\r\n`maskKey = nullMask ? 0 : (Math.random()*0xFFFFFFFF) | 0;`\r\n\r\nTo above out of range,change to\r\n`maskKey = nullMask ? 0 : ((Math.random() * 0xFFFFFFFF) >>> 0);`\r\nor Update WebSocket-Node to the latest version?\r\n\r\nThx"},{"labels":["enhancement"],"text":"Hello, \r\n\r\nI am making a websocket connection to Infura Ropsten\r\n`wss://ropsten.infura.io/ws`\r\n\r\nand then making contract event subscription like so\r\n` contract.events.MyEvent()\r\n        .on('data', function(event) {\r\n            console.log('Event Generated', data)\r\n        })\r\n        .on('error', function(error) {\r\n            console.log('Event Error', error)\r\n        })`\r\n\r\nInfuras websockets seem to be unstable and drop randomly. Unfortunately the websocket drops silently in the background and my event never receives the error. My app just continues to work and stops receiving event data. \r\n\r\nI can tell that websocket drops by running `setInterval` on\r\n`web3.eth.net.isListening()`\r\n\r\nIs there a graceful way to catch the websocket drop and reconnect immediately? If not what is a safe interval to run isListening on?\r\n\r\nThanks!\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"`PromiEvent`s are automatically converted to `Promise`s when used in combination with `Promise`s or async functions:\r\n\r\n1. In the first case, whenever a `PromiEvent` is returned by a callback passed to `then()` a `Promise` is returned. This may be fixed by using `Symbol.species`, but the semantics of a `PromiEvent` after a `then()` may not be clear.\r\n\r\n2. Async functions always return a built-in `Promise`. If the returned value is a `Thenable` it is awaited and a promise with its value/error is returned.\r\n\r\nMy understanding is that async functions [are designed to only work with native promises](https://github.com/tc39/ecmascript-asyncawait/issues/40#issuecomment-94590953), which makes  safe `Promise` extensions pretty much impossible, as the not-so-versed-in-ES programmer will naturally try to use them in conjunction with async functions.\r\n\r\nHere is a script with examples of both issues. I tested it with web3@1.0.0-beta.33.\r\n\r\n```js\r\n// This is just an example of something that the user may want to do/get\r\n// asynchronously.\r\nfunction getValue() {\r\n  // Note: This could also be implemented with an async function, but the result\r\n  // would be the same.\r\n  return Promise.resolve(0);\r\n}\r\n\r\nfunction sendTxSync(web3, account) {\r\n  // Here we do nothing async, so we hardcode the value\r\n  return web3.eth.sendTransaction({from: account, to: account, value: 0});\r\n}\r\n\r\n// Case 1\r\nfunction sendTxPromise(web3, account) {\r\n  return getValue()\r\n    // The callback returns a PromiEvent, but it's transformed to a Promise.\r\n    .then(value => web3.eth.sendTransaction({from: account, to: account, value}));\r\n}\r\n\r\n// Case 2\r\nasync function sendTxAsync(web3, account) {\r\n  // This function is async because we want to use await here\r\n  const value = await getValue();\r\n\r\n  // Most users would expect that this returns a PromiEvent, but it doesn't\r\n  return web3.eth.sendTransaction({from: account, to: account, value});\r\n}\r\n\r\nfunction isPromiEvent(object) {\r\n  return object.on !== undefined && object.then !== undefined;\r\n}\r\n\r\nasync function main() {\r\n  const web3 = new Web3(Web3.givenProvider);\r\n  const accounts = await web3.eth.getAccounts();\r\n\r\n  const promiEvent = sendTxSync(web3, accounts[0])\r\n  console.log(\"Is return value of sendTxSync a promiEvent?\", isPromiEvent(promiEvent)); // true\r\n\r\n  const withAsync = sendTxAsync(web3, accounts[0])\r\n  console.log(\"Is return value of sendTxASync a promiEvent?\", isPromiEvent(withAsync)); // false\r\n\r\n  const withPromise = sendTxPromise(web3, accounts[0])\r\n  console.log(\"Is return value of sendTxPromise a promiEvent?\", isPromiEvent(withPromise)); // false\r\n}\r\n\r\nmain().catch(console.error);\r\n```"},{"labels":[null,null,"enhancement"],"text":"\"Invalid number of solidity arguments\" is AIDS.\r\n\r\nYou have the freaking ABI that defines which inputs are expected, their order, and their type. Why such a miserable error message? FFS... it's so unnecessarily difficult to debug this error, especially since you (rather idiotically) try to infer the different inputs (which CAN be objects) from the transaction options (which IS an object).\r\n\r\nIt infuriates me, and countless others.\r\n\r\nJUST FREAKING FIX THIS.  LET ME PASS AN ARRAY OF INPUTS."},{"labels":[null,null,"enhancement"],"text":"Currently, [new contract](http://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#new-contract) will always succeed, even if there's no contract deployed at the given address or if the deployed contract doesn't match the ABI. Only when invoking contract methods, it will fail - often with obscure error messages, for example [this one](https://github.com/ethereum/web3.js/issues/898).\r\n\r\nFor better usability, instantiation should fail if there's no contract with matching ABI deployed at the given address."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\nThe WebsocketProvider stores callbacks by ID, which it then looks up after receiving the response. However, there may be multiple consumers of the WebsocketProvider that are unaware of each other and duplicate IDs, leading to incorrect responses.\r\n\r\n---\r\n## Long story\r\nI ran into this issue while building an app using `truffle-contract`, which comes bundled with it's own version of web3. I also use my own version of web3 for making calls directly.\r\n\r\nThe problem comes from the two versions of web3 not sharing the same RequestManager, which is responsible for generating ID numbers. This results in duplicate IDs and incorrect responses.\r\n\r\n## Workaround\r\n\r\nThis issue can be fixed by generating two different WebsocketProviders, passing one to instances of truffle-contract, and using the other for web3.\r\n\r\n## Proposed change\r\n\r\nID numbers in the JSONRPC are essentially meaningless. The WebsocketProvider could replace the ID provided in a data payload with a random integer."},{"labels":["enhancement"],"text":"Currently the `BatchRequest` object has an `execute` function. This function will execute the batch request (presumably in order, although the documentation does not say so). The script which calls `execute` does not learn that execution has occurred and therefore the process will hang because you cannot call `process.exit()`.\r\n\r\nReturning a promise would fix that."},{"labels":["enhancement"],"text":"I figured out that when I called the `estimateGas` method,  the `inputFormatter`  is called and changed the values of the estimateGas's `params` object. \r\n\r\nIt's great to convert and cast values to make the method work but I think will be better to make a local copy of `params` instead of updating the given reference and avoid introducing side effects to web3 functions.\r\n\r\nFor instance, if I have a `value` property in `params` and the value is in `wei` after `estimateGas` ends the original `params` reference is updated and `value` will be cast to hex.\r\n\r\n### `estimateGas()` => Gets a `params` object.\r\n\r\n```javascript\r\n// web3.js/packages/web3-eth/src/index.js\r\n    var estimateGas = new Method({\r\n        name: 'estimateGas',\r\n        call: 'eth_estimateGas',\r\n        params: 1,\r\n        inputFormatter: [formatters.inputCallFormatter],\r\n        outputFormatter: utils.toDecimal\r\n    });\r\n```\r\n\r\n### `inputCallFormatter()` => Updates given `params` reference.\r\n\r\n```javascript\r\n// web3.js/packages/web3-core-helpers/src/formatters.js\r\n\r\nvar inputCallFormatter = function (options){\r\n\r\n    var from = options.from || config.defaultAccount;\r\n\r\n    if (from) {\r\n        options.from = inputAddressFormatter(from);\r\n    }\r\n\r\n    if (options.to) { // it might be contract creation\r\n        options.to = inputAddressFormatter(options.to);\r\n    }\r\n\r\n    ['gasPrice', 'gas', 'gasLimit', 'value', 'nonce'].filter(function (key) {\r\n        return options[key] !== undefined;\r\n    }).forEach(function(key){\r\n        options[key] = utils.fromDecimal(options[key]);\r\n    });\r\n\r\n    return options;\r\n};\r\n```\r\n\r\nNot sure if you are intentionally doing this. If not, I can work on PR to find this kind of patterns and \r\navoid side effects in web3 methods."},{"labels":[null,null,"enhancement"],"text":"We implemented a new API a few months back in the web3.py stack that we call Middleware.\r\n\r\nHere are the docs: http://web3py.readthedocs.io/en/latest/middleware.html\r\n\r\nPreviously our API calls looked something like this:\r\n\r\n```\r\nWeb3Method <-> Manager <-> Provider  <-> RPC Node\r\n```\r\n\r\nWhat we found was that implementing many things like normalization of request/response parameters, caching, in-flight-transaction signing was majorly problematic.\r\n\r\nWith the introduction of middleware, it looks like this.\r\n\r\n```\r\nWeb3Method <-> Manager <-> (middlewares) <-> Provider  <-> RPC Node\r\n```\r\n\r\nEvery JSON-RPC request passes through the middleware layer.  The middleware receives the method, parameters, and web3 object itself.  Each middleware can freely modify the request or the subsequent response, or even produce it's own response, completely bypassing the Provider and RPC node.\r\n\r\nThis API has proven insanely powerful as both an internal API and an external API for others to build on top of.  Currently we are using it for the following:\r\n\r\n- in flight transaction signing.\r\n- request and response normalization\r\n- checksumming addresses returned by web3\r\n- enforcing checksums on input addresses\r\n- caching\r\n- checking that we aren't interacting with a node which is disconnected from the chain and serving *old* chain data.\r\n- retrying certain classes of failed requests.\r\n\r\nI'd highly recommend looking into adding something like this if you don't already have it."},{"labels":["enhancement"],"text":"Is there a way to obtain generated events on sendTransaction call (in the same way I get it from contract.methods.method_name.send())?\r\n\r\nThis could be useful to observe events on deferred transactions (since I can't use regular send() on contract in this case) or when transfer goes through a fallback payable function (for example token minting generates events)?\r\n\r\nThat's what I'm getting now as a result from sendTransaction:\r\n\r\n```\r\n{ transactionHash: '0xee0a4aa8aba9f8ceae4ba21e6d73190b093ee6671bcb1992cff1aeefd414c6e2',\r\n  transactionIndex: 0,\r\n  blockHash: '0xc956e5b6b87e255d462ad8a49619051f2227a97c486ad3e0fc52b119f8f46d60',\r\n  blockNumber: 346,\r\n  gasUsed: 99616,\r\n  cumulativeGasUsed: 99616,\r\n  contractAddress: null,\r\n  logs:\r\n   [ { logIndex: 0,\r\n       transactionIndex: 0,\r\n       transactionHash: '0xee0a4aa8aba9f8ceae4ba21e6d73190b093ee6671bcb1992cff1aeefd414c6e2',\r\n       blockHash: '0xc956e5b6b87e255d462ad8a49619051f2227a97c486ad3e0fc52b119f8f46d60',\r\n       blockNumber: 346,\r\n       address: '0xa9FBC415b2969f3B65F2021F76F422ba82c9A062',\r\n       data: '0x0000000000000000000000000000000000000000000000000000000000000001',\r\n       topics: [Array],\r\n       type: 'mined',\r\n       id: 'log_eca044e4' },\r\n     { logIndex: 1,\r\n       transactionIndex: 0,\r\n       transactionHash: '0xee0a4aa8aba9f8ceae4ba21e6d73190b093ee6671bcb1992cff1aeefd414c6e2',\r\n       blockHash: '0xc956e5b6b87e255d462ad8a49619051f2227a97c486ad3e0fc52b119f8f46d60',\r\n       blockNumber: 346,\r\n       address: '0xa9FBC415b2969f3B65F2021F76F422ba82c9A062',\r\n       data: '0x00000000000000000000000000000000000000000000003635c9adc5dea00000',\r\n       topics: [Array],\r\n       type: 'mined',\r\n       id: 'log_c18ea743' },\r\n     { logIndex: 2,\r\n       transactionIndex: 0,\r\n       transactionHash: '0xee0a4aa8aba9f8ceae4ba21e6d73190b093ee6671bcb1992cff1aeefd414c6e2',\r\n       blockHash: '0xc956e5b6b87e255d462ad8a49619051f2227a97c486ad3e0fc52b119f8f46d60',\r\n       blockNumber: 346,\r\n       address: '0x83BaB5D9066F354daA49a0C435b1bCD8AD5f1462',\r\n       data: '0x0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000003635c9adc5dea00000',\r\n       topics: [Array],\r\n       type: 'mined',\r\n       id: 'log_ba247c28' } ],\r\n  status: 1 }\r\n```"},{"labels":[null,"enhancement"],"text":"In web3-core-helpers/src/formatters.js, line no. 220,\r\nblock.timestamp = utils.hexToNumber(block.timestamp);\r\nthe conversion from hex to Number throws an error, \"Error in parsing.....\"\r\nTo fix this, \r\nblock.timestamp = utils.hexToNumberString(block.timestamp);\r\n\r\nI think this change should be made into the repo."},{"labels":[null,"enhancement"],"text":"For some reason the following code fails if I comment out the chainId property:\r\n\r\n```\r\nvar account = web3.eth.accounts.wallet[0]\r\naccount.signTransaction({\r\n  gas: 4612388,\r\n  to: \"0x56BEaa3C8C87c04584b48C9aF037c01d2677B8B2\",\r\n  value: web3.utils.toWei(\"0.01\", \"ether\"),\r\n  chainId: 1 // Commenting out this line results in an invalid rawTransaction\r\n})\r\n.then(signedTx => {\r\n    console.log(\"Valid transaction:\", web3.utils.isHex(signedTx.rawTransaction))\r\n    return web3.eth.sendSignedTransaction(signedTx.rawTransaction)\r\n})\r\n.then(receipt => console.log(\"Transaction succeeded\", receipt))\r\n.catch(error => console.error(error))\r\n```\r\n\r\nThis took me many hours of frustration to find and debug, but I finally found the answer in #1169. Can we add a default value for chainId?"},{"labels":[null,null,null,"enhancement"],"text":"Hi,\r\n\r\nNow that the library is being split into smaller modules, are there any plans to use Typescript as the primary language? I won't list all the pros/cons as most of us already know what's at stake, I'd just point out that the current definition file is <sub><sup>very</sup></sub> often out-of-sync and it would help fixing this issue 🙂.\r\n\r\nI'd gladly volunteer to start converting code (starting with web3-utils) but I'd like to know what's your stance on it.\r\n\r\nThank you in advance!"},{"labels":[null,"enhancement"],"text":"# INFO\r\n**Which Web3.js version?**: 1.0.0-beta.27\r\n**Which operating system?**: MacOS\r\n**How installed?**: NPM\r\n\r\n# **actual behaviour, expected behaviour, and steps to reproduce**\r\n\r\nI’m using Web3.js v1.0.0-beta.27.\r\nWhen I follow the documentation and pass a Callback as the second argument of a subscription it works successfully by creating a subscription\r\n\r\n```\r\n// Subscriptions - http://web3js.readthedocs.io/en/1.0/web3-eth-subscribe.html#\r\nlet subscriptionToPendingTransactions = web3.eth.subscribe('pendingTransactions', \r\n  (error, transaction) => {\r\n    if (!error) {\r\n      console.log(`Subscription - Pending Transaction: `, transaction);\r\n    } else {\r\n      console.log(`Error - Subscription - Pending Transaction: `, error);\r\n    }\r\n  })\r\n  .on(\"data\", function(transaction) {\r\n    console.log(`Subscription - Pending Transaction Data: `, transaction);\r\n  });\r\n```\r\n\r\nBut if instead I try to use a Promise instead with `.then`, it gives me error `Unhandled rejection TypeError: web3.eth.subscribe(...).then is not a function`\r\n\r\n```\r\nlet subscriptionToLogs = web3.eth.subscribe('logs', {\r\n    address: senderAddress,\r\n    topics: [null]\r\n  })\r\n  .then((log) => { \r\n    console.log(`Subscription - Log: `, log); \r\n  })\r\n  .catch((error) => {\r\n    console.log(`Error - Subscription - Log: `, error);\r\n  })\r\n  .on(\"data\", function(log) {\r\n    console.log(`Subscription - Log Data: `, log);\r\n  })\r\n  .on(\"changed\", function(log) {\r\n    console.log(`Subscription - Log Changed: `, log);\r\n  });\r\n```\r\n\r\nAnd when I use Promises with Events:\r\n\r\n```\r\nnewContractInstance.once('Created', {\r\n    fromBlock: 0\r\n  })\r\n  .then(function(event){\r\n    console.log(`Once event received event: `, event); \r\n  }).catch((error) => {\r\n    console.log(`Error - Once event: `, error);\r\n  });\r\n```\r\n\r\nIt gives error: `Unhandled rejection Error: Once requires a callback as the second parameter.`\r\n\r\nBut it works with Callbacks, as required by the docs\r\n```\r\nnewContractInstance.once('Created', {\r\n    fromBlock: 0\r\n  },\r\n  (error, createdEvent) => {\r\n    if (!error) {\r\n      console.log(`Once event received event: `, createdEvent); \r\n    } else {\r\n      console.log(`Error - Once event: `, error);\r\n    }\r\n  });\r\n```\r\n\r\nIs it desired functionality to be able to use Promises with the Subscriptions and Events? "},{"labels":["enhancement",null],"text":"in solidity verion 0.4.19 tuples are supported, which allow structs as input-params. The current encoder in `web3-eth-abi` does not support them yet.\r\na definition of them can be found here: http://solidity.readthedocs.io/en/develop/abi-spec.html?highlight=tuple#handling-tuple-types\r\n\r\nexample:\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"f\",\r\n    \"type\": \"function\",\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"s\",\r\n        \"type\": \"tuple\",\r\n        \"components\": [\r\n          {\r\n            \"name\": \"a\",\r\n            \"type\": \"uint256\"\r\n          },\r\n          {\r\n            \"name\": \"b\",\r\n            \"type\": \"uint256[]\"\r\n          },\r\n          {\r\n            \"name\": \"c\",\r\n            \"type\": \"tuple[]\",\r\n            \"components\": [\r\n              {\r\n                \"name\": \"x\",\r\n                \"type\": \"uint256\"\r\n              },\r\n              {\r\n                \"name\": \"y\",\r\n                \"type\": \"uint256\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"t\",\r\n        \"type\": \"tuple\",\r\n        \"components\": [\r\n          {\r\n            \"name\": \"x\",\r\n            \"type\": \"uint256\"\r\n          },\r\n          {\r\n            \"name\": \"y\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"a\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"outputs\": []\r\n  }\r\n]\r\n```"},{"labels":["enhancement"],"text":"I'm trying to get a payload of 22meg from the blockchain but I get the exception `Frame size of 21980028 bytes exceeds maximum accepted frame size`\r\n\r\nThe `maxReceivedFrameSize` and `maxReceivedMessageSize` are set in the websocket client class. If these are increased the code works fine. \r\n\r\nCould a config object be passed to `Ws` when its instantiated in web3-providers-ws?"},{"labels":[null,null,"enhancement"],"text":"I am getting a lot of [nodejs] [defunct] process when run this code. Is there a way to check if an account is already unlocked or lock the account to properly close the nodejs process it starts so that there are not too many nodejs defunct processes.\r\n\r\n    const Web3 = require('web3');\r\n    const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n    let txHashArray = [];\r\n    \r\n    try {\r\n        if (web3.isConnected()) {\r\n            \r\n            const abi = '[{\"constant\":false,\"inputs\":[{\"name\":\"_int\",\"type\":\"uint16\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"arrayLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"name\":\"arrayLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]';\r\n            const contract = web3.eth.contract(JSON.parse(abi));\r\n            const contractAddress = '0x4D0f2e99a871A276da395538C8107275C17bCe12';\r\n            contractInstance = contract.at();\r\n            \r\n            for (let i = 0; i < 1000; i++) {\r\n                web3.personal.unlockAccount(web3Config.defaultAccount,\r\n                    web3Config.defaultAccountPwd);\r\n                /*\r\n                \r\n                const txHash = contractInstance.set(i,{from:web3Config.defaultAccount, gas:'9040000', gasPrice:'0'});\r\n                \r\n                txHashArray.push(txHash);         \r\n                */\r\n               \r\n                console.log(i)\r\n            }\r\n            /*\r\n            // Write txHash to file to check later\r\n            var txfile = fs.createWriteStream('txfile.csv');\r\n            txfile.on('error', function(err) { /* error handling */ });\r\n            txHashArray.forEach(function(v) { \r\n                txfile.write(v + '\\n'); \r\n            });\r\n            txfile.end();\r\n            */\r\n            \r\n        } else {\r\n            console.log('web3 is not connected');\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n"},{"labels":["enhancement"],"text":"Trying to use the new eth.accounts to manage the local wallet, noticed that in [Method.sendRequest](https://github.com/ethereum/web3.js/blob/17e1631bb4f93c6f670017739d2f2dfd18bfa26b/packages/web3-core-method/src/index.js#L503), it only routed 2 RPC to the accounts object: `eth_sendTransaction` and `eth_sign`, but not `eth_accounts` .... so potentially eth.getAccouts() and eth.accounts could return different results... is that by design or just a bug?"},{"labels":[null,null,null,"enhancement"],"text":"According to https://github.com/ethereum/EIPs/issues/59\r\n\r\nSolidity has already been updated \r\nhttps://github.com/ethereum/solidity/blob/develop/Changelog.md#0417-2017-09-21\r\nhttps://github.com/ethereum/solidity/pull/1164/files\r\n\r\nAnd the [Yellowpaper](https://github.com/ethereum/yellowpaper/) also mentions it at every occasion except for the OP-code name itself."},{"labels":[null,null,"enhancement",null],"text":"The browserify-compiled web3 bundle is crazy huge. I'm using the 1.0 beta and pre-minification web3 is 1.3 megs. Minification halves that, but its still way bigger than it needs to be.\r\n\r\n```\r\n$ cat foo.js \r\nrequire('web3')\r\n$ browserify foo.js -o bundle.js\r\n$ ls -l bundle.js \r\n-rw-r--r--  1 josephg  staff  1365873 15 Nov 16:00 bundle.js\r\n```\r\n\r\nMost of the bundle is transitive dependancies of dubious usefulness that the dapp I'm writing certainly won't need - like an ASN1 parser, an elliptic curve cyper, a 160k promise wrapper (wat) and the distributed filesystem libraries.\r\n\r\nHave a browse of the [contents of the compiled bundle](http://josephg.com/web3disc.html).\r\n\r\nFixing this will not just lower download size, it will also make dapps load faster and improve the experience from nodejs. Node currently needs nearly 1 second to parse all that JS even on my fancy macbook:\r\n\r\n```\r\n$ node\r\n> console.time('load'); require('web3'); console.timeEnd('load')\r\nload: 750.081ms\r\n```"},{"labels":["enhancement",null],"text":"`c = new web3.eth.Contract([{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"bytes32\"},{\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"bIsWrong\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\",\"stateMutability\":\"view\"}])`\r\n\r\n`c.methods.bIsWrong('a'.repeat(64), 'b'.repeat(64)).encodeABI()`\r\nreturns\r\n`0x020e2724aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb`\r\nwhich is fine\r\n\r\n`c.methods.bIsWrong('a'.repeat(65), 'b'.repeat(64)).encodeABI()`\r\nreturns\r\n`0x020e2724aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb`\r\nwhich is wrong, because second argument gets wrong value `a000000000000000000000000000000000000000000000000000000000000000`\r\n\r\nExpected behaviour is raising error, because first argument exceeded length of specified in ABI type"},{"labels":[null,null,"enhancement"],"text":"First of all, it is great to see account management API made it to web3, I think it will go a long way to reduce friction for dapp development. \r\n\r\nA few questions to make sure I understand the idea behind the design: \r\n\r\n1. Is there any particular reason the current accounts implementation does not support HD wallet (BIP32/BIP39) for account creation? \r\n1. the current Wallet.save/Wallet.load is hard-coded with localStorage, will it make sense to allow customization?\r\n1. while there is a clear extension point for `provider`, it didn't seem to be one for accounts. Most of the wallets out there used provider interface to inject its own accounts. It's a necessary evil before, but now with the modular accounts API, I wonder would it make sense to split extension points and allow accounts to be customized independent of the provider? (better for composition and less monolithic)\r\n"},{"labels":[null,null,"enhancement"],"text":"For a lack of a better place, I am here suggesting a change to web3  in regard to contracts : \r\n https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#eth-contract\r\n\r\nIt seems to me the abstraction used for contract is a bit confusing\r\n\r\nShould we not separate the contract \"factory\" (which knows about the interface but do not provide it) and the contract instance which refer to a deployed contract (with a specific address) and which we can call to act on the smart contract.\r\n\r\nIn the current web3 1.0 they are both the same \"type\" as deploying a contract generate a new identical instance, except for its address being set.\r\n\r\nThis is a bit confusing since while the contract \"factory\" have the methods, calling them will fail unless its address has been set.\r\n\r\nI think ethjs do it well . See https://github.com/ethjs/ethjs-contract\r\n\r\nAny plan to do something along these lines ?"},{"labels":[null,"enhancement"],"text":"Currently web3 is interpretating \"0x\" as signifying zero values\r\n\r\nI posted an issue on geth (https://github.com/ethereum/go-ethereum/issues/15102) thinking it was an issue there. I still think get should return a jsonrpc error for the case described in the issue but there might be other case where \"0x\" is a valid?  like calling a contract on a block where the contract did not exist yet ?\r\n\r\nI think web3 should in that case return an error instead of interpretating the return values as being zeroes since this can be misleading.\r\n\r\nAs described in the geth issue, you can never sure that your data is actually zero at that particular block or it is the node that has not synced fully yet.\r\n\r\n"},{"labels":[null,"enhancement"],"text":"currently in a lot of lines in the code the provider is checked whether is supports subscribe. This is done by simply checking, if the `on`-function exists \r\n```javascript\r\nif (provider.on)\r\n   ...\r\nelse\r\n   ...\r\n```\r\nSince we also use different Wrappers, which even dynamically change the inner provider, this means, we must add and delete a function during runtime depending on the inner provider.\r\nI would rather suggest a function `supportsSubscription()`. This would make it cleaner and easier to implement and even delegate this call to the inner wrapper.\r\n\r\n```javascript\r\nif (provider.supportsSubscription())\r\n   ...\r\nelse\r\n   ...\r\n```\r\n"},{"labels":[null,"enhancement"],"text":"It should be possible to setup an instant finalty delay (in blocks) using web3. In instant finalty mode, a web3 should report a chain state to be N blocks behind actual chain HEAD, preventing (most) chain reorganisations to break the dapp state.\r\n\r\nHier is the correspondend Issue on [Parity\r\n](https://github.com/paritytech/parity/issues/6351)"},{"labels":["enhancement"],"text":"When I try to hash this message:\r\n```javascript\r\nweb3.eth.accounts.hashMessage('0x01234567890ABCDEF01234567890ABCDEF01234567890ABCDEF01234567890ABCDEF01234567890ABCDEF01234567890ABCDEF01234')\r\n```\r\n\r\nI get \r\n```\r\nError: Invalid UTF-8 detected\r\n    at decodeSymbol (/Users/simon/ws/slock/usn/usn-lib/node_modules/web3/packages/web3-utils/node_modules/utf8/utf8.js:194:9)\r\n    at Object.utf8decode [as decode] (/Users/simon/ws/slock/usn/usn-lib/node_modules/web3/packages/web3-utils/node_modules/utf8/utf8.js:206:17)\r\n    at Object.hexToUtf8 (/Users/simon/ws/slock/usn/usn-lib/node_modules/web3/packages/web3-utils/src/utils.js:207:17)\r\n    at Accounts.hashMessage (/Users/simon/ws/slock/usn/usn-lib/node_modules/web3/packages/web3-eth-accounts/src/index.js:176:45)\r\n\r\n```"},{"labels":["enhancement"],"text":"TypeScript has gained a lot of popularity in recent years. It is non-trivial to use web3 in TypeScript without a lot of configuration. An official set of type declarations for the library would make it much easier for developers to incorporate web3 into their library.\r\n\r\nThere are several half-baked web3 type definition files floating around online, but an official one that is maintained in parallel with the library would allow for a much smoother development experience. It might make most sense to add this alongside (or after) version 1.0 once the API is not in flux.\r\n\r\nSee https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html for information about declaration files."},{"labels":["enhancement"],"text":"Please correct me if I'm wrong, but when using `contract.allEvents().watch(...)` you don't really have a way to identify the event that was received in the callback, as there can be multiple events with the same name but different signatures.\r\n\r\nShouldn't the event object include the signature as well?"},{"labels":["enhancement"],"text":"since parity --chain dev is using its InstantSealEngine and creating Block as soon as a new Transaction is send, the subscribed event for the new BlockHeader will come too late. This results in a waiting forever for a new Block, which never comes. So we must first check whether the transaction has already been mined before subscribing for new Blocks.\r\n"},{"labels":["enhancement",null],"text":"**Description:**\r\nSpamming Web3.js with a few thousand transactions or calls in quick succession will eventually (about 30 seconds) cause all available dynamic ports (16384 on Windows) to be consumed - however the vast majority are sitting in TIME_WAIT state (which can be confirmed by running netstat). The onreadystatechange event handler in the sendAsync function in HttpProvider will get called, but [request.responseText is empty](https://github.com/ethereum/web3.js/blob/develop/lib/web3/httpprovider.js#L113), causing an exception to be thrown, which is caught but results in an unhelpful error - `error: Invalid JSON RPC response: \"\"` \r\n\r\n**Steps to reproduce:**\r\nExecute many successive contract function calls via Web3\r\n\r\n**Actual Behaviour:**\r\n`error: Invalid JSON RPC response: \"\"` Error message is being passed into the web3 callback function.\r\n\r\n**Expected Behaviour:**\r\nIf all dynamic ports are consumed, then either return a descriptive error message, or hold off until ports are freed by the operating system, or make sure ports are being properly closed after use.\r\n\r\n**Notes:**\r\nTo anyone seeing the same issue, it can be temporarily resolved by setting a timeout to wait until the ports are released by the operating system, or by manually increasing available dynamic TCP ports.\r\nFor more info - https://blogs.technet.microsoft.com/askds/2008/10/29/port-exhaustion-and-you-or-why-the-netstat-tool-is-your-friend/\r\n\r\n**Versions:**\r\nGeth 1.6.5 - Clique PoA\r\nWeb3.js 0.18.4\r\nWindows 10"},{"labels":[null,null,"enhancement"],"text":"When calls result in exceptions, it seems possible to tack on additional information to the error object that may help the user.  Even better would be including some of this info in the message itself.\r\n\r\nFor example:\r\n\r\n```\r\nsomeInstance.doSomeCallThatWillFail(5, 10, \"hello\").catch(function(e){\r\n   console.log(e.callInfo);\r\n   /*  This would log:\r\n      {\r\n           address: \"0x123...\",\r\n           method: \"doSomeCallThatWillFail\",\r\n           params: [5, 10, \"hello\"]\r\n      }\r\n   */\r\n});\r\n```"},{"labels":[null,null,"enhancement"],"text":"I'm not sure if this is already slated, but it would be _massively_ helpful to have interactions with Web3 be as simple as possible.  Variable length arguments are not simple.\r\n\r\nIt would be great if calls / constructors always took two params:\r\n`myContract.someFunction( argsToSomeFunc, opts )` and `MyContract.net(constructorArgs, opts)`\r\n\r\nIt would also be great if the args could be a object with name/value pairs.  An error can be thrown if incorrect params are passed, omitted, or of the wrong type.  This would catch errors a lot sooner and would be extremely helpful to developers.  Moreover, it would make code read much better.\r\n\r\neg:\r\n\r\n```\r\n// assume an ABI declares a constructor with three params:\r\n// uint wingspan, bytes32 chirpNoise, uint age\r\n\r\n// compare this, which may cause unexpected results (since the `age` param may be defaulted to 0)\r\nBird.new(10, \"tweet\");\r\n\r\n//to this, which is more readable, and will immediately throw `param 'uint age' not provided`\r\nBird.new({wingspan: 10, chirpNoise: \"tweet\"});\r\n\r\n// this would also throw:  `unknown param 'chirpSound'`\r\nBird.new({wingspan: 10, chirpSound: \"tweet\", age: 3});\r\n````\r\n\r\nAt the very least, please please please consider having the \"arguments\" be an array rather than cardinal:\r\n\r\n`Bird.new([10, \"tweet\", 3], {.. opts ..})`\r\n\r\nFor a few reasons:\r\n* It's so much easier knowing that `.new` always takes two parameters.\r\n* It's easier to pass an array than it is to call .apply or .call\r\n* Dealing with variable length arguments leads to difficult-to-read code, and ambiguities"},{"labels":["enhancement"],"text":"Just now when I use HttpProvider,i got a very strange exception ```Error: Invalid JSON RPC response: undefined```, and I Google it and I got many other answers which are totally useless for my  situation. And after a lot of time, I found that because the node server is down. So I open the node and my problem is solved. Then I changed the address into a wrong address, then I got the same error information.\r\n\r\nSo I wish I can get some more detailed information for the errors instead of an information for many different kinds of errors."},{"labels":[null,null,"enhancement"],"text":"It might be better suited for an EIP but I post it here as it belongs to the wider ethereum wallet ecosystem where some of the call to web3 api pass by middleware each having different behavior (that might not be specified at the node level).\r\n\r\nCurrently there is no standard for error code for any of the web3 methods. It means that dapps have no way to react differently to different type of errors.\r\n\r\nThe main one that many dapp must encounter is that currently every web3 provider that deal with user permission return an error when the tx is rejected by the user. This is because the web3 api does not have any mechanism to means rejection without making it an error.\r\n\r\nOn top of that since there is no error code standard, the dapp can only react in one way whether it was really the user canceling the transaction or if it was a legitimate error.\r\n\r\nWhile for that particular case, a new improved api would be better, a standard error code would allow to solve it and provide better handling for all the other error types.\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"There's extraneous whitespace floating around the code which makes diffs harder to read.\r\n\r\nJSHint used to have an flag for warning about extra whitespace but it was removed.  Let's switch to a modern linter such as [ESLint](http://eslint.org/) or even better adopt [JavaScript Standard Style](http://standardjs.com/) instead."},{"labels":["enhancement"],"text":"Hello,\n\ni am wondering currenlty if this is a bug or if this is intended behaviour.\nAs from my understanding web3.eth.estimateGas simulates the sending of an transation but does not broadcast it to other peers, thats why i thought if an transaction has an 'Exceeds block gas limit', the web3.eth.estimateGas method would already tell me that in advance that the transaction will be 'rejected / exceed an limit' later  in web3.eth.sendRawTransaction\n\nWould appreciated any answer which can shed some light on this.\n\nThanks a lot\n"},{"labels":[null,"enhancement"],"text":"Let me know if I'm doing something wrong, but I'm unable to get the web3js solidity compiler to work, whereas I am able to use the solc npm package to compile. \n\nThis works: \n\n```\nvar solc = require('solc');\nvar input = \"contract test {function multiply(uint a) returns(uint d) {return a * 7;}};\"\nvar output = solc.compile(input, 0); // this works \n```\n\nThis returns an error: \n\n```\nvar Web3 = require('web3');\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\nvar input = \"contract test {function multiply(uint a) returns(uint d) {return a * 7;}};\"\nvar output = web3.eth.compile.solidity(input); // this prints the following output\n```\n\n> Error: TypeError: Cannot read property 'split' of undefined\n>     at Compiler.compile_solidity (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/compiler.js:14:34)\n>     at Manager.eth_compileSolidity (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/manager.js:197:23)\n>     at Manager.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/manager.js:75:10)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at VmSubprovider.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/vm.js:42:12)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at GethDefaults.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/lib/gethdefaults.js:17:12)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at FilterSubprovider.handleRequest (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/subproviders/filters.js:76:7)\n>     at next (/Users/johnmardlin/.nvm/versions/node/v6.5.0/lib/node_modules/ethereumjs-testrpc/node_modules/web3-provider-engine/index.js:93:18)\n>     at Object.module.exports.InvalidResponse (/Users/johnmardlin/node_modules/web3/lib/web3/errors.js:35:16)\n>     at RequestManager.send (/Users/johnmardlin/node_modules/web3/lib/web3/requestmanager.js:61:22)\n>     at Object.send [as solidity](/Users/johnmardlin/node_modules/web3/lib/web3/method.js:145:58)\n>     at Object.<anonymous> (/Users/johnmardlin/Projects/eth-play/eth-arbitrary/myFlow/myFlow.js:12:31)\n>     at Module._compile (module.js:410:26)\n>     at Object.Module._extensions..js (module.js:417:10)\n>     at Module.load (module.js:344:32)\n>     at Function.Module._load (module.js:301:12)\n>     at Function.Module.runMain (module.js:442:10)\n>     at startup (node.js:136:18)\n> [Finished in 2.1s with exit code 7]\n\nOther functions of web3js are working fine.\n"},{"labels":[null,null,"enhancement"],"text":"When a web3.js instance is cerated and no provider is given, the system tries to find it using the `ETHEREUM_SOCKET` environment variable.\n"},{"labels":["enhancement"],"text":"It aims to be a lightweight ABI implementation and could replace the internal Solidity coder. Also supports Serpent type notation and Solidity's tight packing methods (`sha3(1, \"hello\", 0x1234)`).\n\nIt is currently used in browser-solidity for decoding response values.\n"},{"labels":[null,"enhancement"],"text":"In Solidity, casting an `address` or other shorter numeric value to a `bytes32` left-pads the value, as you'd expect, so casting back again gives the correct result. When web3 is given a hex string to pass to a function that expects `bytes32`, it instead right-pads it, leading to rather odd results:\n\ntest.js:\n\n```\ncontract('address cast to bytes32', function(accounts) {\n    it('should be left padded and cast back correctly', function(done) {\n        var test = Test.deployed();\n        test.implicitCast.call(test.address).then(function(ret) {\n            assert.equal(ret, test.address);\n        }).then(done).catch(done);\n    })\n});\n```\n\nTest.sol:\n\n```\ncontract Test {\n    function implicitCast(bytes32 a) returns (address) {\n        return address(a);\n    }\n}\n```\n\nOutput:\n\n```\n$ truffle test test/test.js\nUsing environment test.\nCompiling contracts...\n\n\n  Contract: address cast to bytes32\n    1) should be left padded and cast back correctly\n    > No events were emitted\n\n\n  0 passing (587ms)\n  1 failing\n\n  1) Contract: address cast to bytes32 should be left padded and cast back correctly:\n     AssertionError: expected '0x1fe28adc7c10597f000000000000000000000000' to equal '0x691436bbdd1b6a0ed90044e01fe28adc7c10597f'\n      at test.js:6:11\n```\n"},{"labels":["enhancement"],"text":"The following  stateless functions attached to prototype should be instead attach to Web3 directly\n\nThis way we could access them without the need to get a hang on an instance of Web3.\n\n```\nWeb3.prototype.toHex = utils.toHex;\nWeb3.prototype.toAscii = utils.toAscii;\nWeb3.prototype.toUtf8 = utils.toUtf8;\nWeb3.prototype.fromAscii = utils.fromAscii;\nWeb3.prototype.fromUtf8 = utils.fromUtf8;\nWeb3.prototype.toDecimal = utils.toDecimal;\nWeb3.prototype.fromDecimal = utils.fromDecimal;\nWeb3.prototype.toBigNumber = utils.toBigNumber;\nWeb3.prototype.toWei = utils.toWei;\nWeb3.prototype.fromWei = utils.fromWei;\nWeb3.prototype.isAddress = utils.isAddress;\nWeb3.prototype.isChecksumAddress = utils.isChecksumAddress;\nWeb3.prototype.toChecksumAddress = utils.toChecksumAddress;\nWeb3.prototype.isIBAN = utils.isIBAN;\n\n\nWeb3.prototype.sha3 = function(string, options) {\n    return '0x' + sha3(string, options);\n};\n\n/**\n * Transforms direct icap to address\n */\nWeb3.prototype.fromICAP = function (icap) {\n    var iban = new Iban(icap);\n    return iban.address();\n};\n```\n"},{"labels":["enhancement"],"text":"Since we have web3.eth.sign, I'm thinking that it would only make sense to also have ecrecover.\n"},{"labels":["enhancement"],"text":"https://github.com/ethereum/web3.js/blob/29e3efb8d88d41e1a7ef0fdfba0d652b503d63e0/lib/web3/function.js#L79-L81\n\nI need access to the signature function. Could you expose it?\n"},{"labels":["enhancement"],"text":"Hello, this is my little contribution, a function that wraps web3 sendTransaction on a particular contract;\n\nI find it **very useful** to wait for a particular function call to be mined, before continuing; I think this should be included in web3;\n\n``` javascript\nvar waitTx = function(txHash, callback) {\n  /*\n  * Watch for a particular transaction hash and call the awaiting function when done;\n  * Ether-pudding uses another method, with web3.eth.getTransaction(...) and checking the txHash;\n  * on https://github.com/ConsenSys/ether-pudding/blob/master/index.js\n  */\n  var blockCounter = 15;\n  // Wait for tx to be finished\n  var filter = web3.eth.filter('latest').watch(function(err, blockHash) {\n    if (blockCounter<=0) {\n      filter.stopWatching();\n      filter = null;\n      console.warn('!! Tx expired !!');\n      if (callback)\n        return callback(false);\n      else\n        return false;\n    }\n    // Get info about latest Ethereum block\n    var block = web3.eth.getBlock(blockHash);\n    --blockCounter;\n    // Found tx hash?\n    if (block.transactions.indexOf(txHash) > -1) {\n      // Tx is finished\n      filter.stopWatching();\n      filter = null;\n      if (callback)\n        return callback(true);\n      else\n        return true;\n    // Tx hash not found yet?\n    } else {\n      // console.log('Waiting tx..', blockCounter);\n    }\n  });\n};\n\nvar instantiateContract = function(abi, address) {\n  /*\n  * Create web3 contract instance and attach waitTransaction;\n  */\n  // Create new\n  var Contract = web3.eth.contract(abi);\n  var Instance = Contract.at(address);\n\n  // Add waitTransaction on all not-constant functions\n  abi.filter(function(json) {\n    if (!json.constant && json.type === 'function') {\n      var fname = json.name;\n      Instance[fname].waitTransaction = function() {\n        var args = Array.prototype.slice.call(arguments).filter((a)=> {return a !== undefined});\n        var old_call;\n        if (typeof(args[args.length - 1])==='function')\n          old_call = args.pop(); // Modify the args array!\n        var new_call = function(_, tx) {\n          waitTx(tx, old_call);\n        };\n        args.push(new_call);\n        Instance[fname].sendTransaction.apply(Instance, args);\n      };\n    }\n  });\n\n  return Instance;\n};\n```\n"},{"labels":["enhancement"],"text":"Functions `fromUtf8` and `fromAscii` doesn't work as advertised (optional `padding` parameter is ignored). Shall I do a pull request?\n\nfromUtf8: https://github.com/ethereum/web3.js/blob/0ae82cf895b74b264d309d21feecbf3645713d0b/lib/utils/utils.js#L139-L159\n\nfromAscii: https://github.com/ethereum/web3.js/blob/0ae82cf895b74b264d309d21feecbf3645713d0b/lib/utils/utils.js#L161-L178\n"},{"labels":[null,"enhancement"],"text":"Hi,\n\nWeb3 parses event indexed args just like data args (https://github.com/ethereum/web3.js/blob/develop/lib/web3/event.js#L147), but in Solidity indexed arg can take only 32 bytes. So web3 fails to parse length of the value with the error: `Uncaught BigNumber Error: new BigNumber() not a base 16 number:`.\n\nSince version 0.1.7 of `solc` the topic is a hash of a value (#344), earlier it were the beginning 32 bytes of a value.\n"},{"labels":[null,null,null,"enhancement"],"text":"Arrays (including `bytes` and `string`) cannot be used as event topics as they are. Solidity automatically sha3-hashes such arguments them before setting them as topic. It might be worthwhile to do this also automatically in web3.js when filtering for events.\n"},{"labels":["enhancement"],"text":"Solidity recently added the library feature which allows you to deploy library functions in external contracts.  Right now there's no way to compile/deploy contracts that use this functionality\n\n```\nsolc --bin --libraries \"somelibrary:someaddress\"  MyContractThatUsesSomeLibrary.sol\n```\n\nThis should be exposed to web3 like such:\n\n```\nweb3.compile.solidity(<code>,{libraries: {somelib: someaddress}})\n```\n"},{"labels":["enhancement"],"text":"We need to expose `web3.toIBAN` and `web3.fromIBAN` and similar functions, to make working with the new IBAN style addresses possible.\n"},{"labels":["enhancement"],"text":"Code example:\n\n```\nweb3.eth.filter('latest', function(err, block) { console.log(1) });\nweb3.eth.filter('latest', function(err, block) { console.log(2) });\nweb3.eth.filter('latest', function(err, block) { console.logcnunqwqwt(3) });\nweb3.eth.filter('latest', function(err, block) { console.log(4) });\n```\n\nThis will print 1 and 2, but not 4, as the third line triggers an error from trying to function-call `undefined`. Suggested fix: in the JS that implements this, place each function execution inside a `setTimeout(function() { ... }, 0)` wrapper so they do not interfere with each other.\n"},{"labels":["enhancement"],"text":"Improvement suggestions by vitalik\nhttps://github.com/ethereum/wiki/wiki/Javascript-Development-Deficiencies\n"},{"labels":["enhancement"],"text":"`web3.eth.contract` outputs bigNumber objects when returning outputs of functions; however, `web3.toWei` outputs strings. This essentially means that we now have three ways of representing numbers in web3:\n- As javascript numbers (basically, double-precision floats, 53 bit mantissa + 11 bit exponent so perfect accuracy only up to ~9 finney)\n- As strings\n- As bigNumber objects\n\nAnd there doesn't seem to be much logic behind why one format is chosen over the other. I recommend that we consider adding some consistency here, as it is otherwise confusing when outputs to web3 methods sometimes appear in one format and sometimes in the other. Perhaps we should restrict to two output types, so functions that return small numbers (eg. getTransactionCount) only return javascript numbers, and everything that might return a big number (especially including toWei) go into bigNumber format. Also, fromWei should IMO return an integer; it seems prudent to adopt the convention that values denominated in wei are meant to be exact, but everything else is for representation only and so using javascript numbers is fine.\n"},{"labels":["enhancement"],"text":"Particularly:\n\n```\n> contract.foo(3)\ninvalid address\n```\n\nThis confused me for a while before I realized that it was looking for either a json object containing a from parameter or for the method to be constant. Perhaps, if no json object is provided or if the from parameter is missing, the error should instead be \"Sender address not specified. Please either specify a sender address or make sure the method you are calling is constant\"\n"},{"labels":["enhancement"],"text":"Hey,\n\nI want to work with 2 web3 providers at the same time. As I see, web3 is not supposed to be used with multiple instances. Can you help me with some workaround for it?\n"},{"labels":["enhancement"],"text":"The ABI decoder functions return valid data for invalid input. I.e. if a function that returns a uint actually returns the empty byte array, it should not return \"0\", but signal an error.\n"},{"labels":["enhancement"],"text":""},{"labels":["enhancement"],"text":"For compilers that support optimisation (such as Solidity), users should be able to enable this option.\n\nSuggest to add second parameter to the compile Solidity functions in web3.js and RPC which exposes this optional boolean parameter to the user, defaulting to false.\n\nThe argument to enable this with solc is `--optimize 1`\n"},{"labels":["enhancement"],"text":"For future:\nI'm finding that dapps/frontends/JS have to duplicate the constants that a contract has.  If there was a mechanism that the JS could access them more directly, it would avoid duplication and potential errors.\n\nFor an example of more direct access, the JS already has access to the abi/contract description object ( first param of eth.contract https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethcontract ).  If contract constants were also added to this object eg\n\n```\nvar abi = [ { SUCCESS_FOO: 20, ERROR_BAR: 700 .... },\n{\n     name: 'myConstantMethod',\n     type: 'function',\n     constant: true,\n     inputs: [{ name: 'a', type: 'string' }],\n     outputs: [{name: 'd', type: 'string' }]}\n} ...\n```\n\nthen the JS could access constants like abi[0].SUCCESS_FOO\n\nThe above is simply demo of the idea and the mechanism/implementation could be very different.\n"},{"labels":[null,"enhancement"],"text":"```\nError: could not decode, invalid type on field : not a number or string\n    at Object.module.exports.InvalidResponse (webpack:///./~/web3/lib/web3/errors.js?:35:16)\n    at RequestManager.send (webpack:///./~/web3/lib/web3/requestmanager.js?:76:22)\n    at Method.send (webpack:///./~/web3/lib/web3/method.js?:168:59)\n    at Filter.get (webpack:///./~/web3/lib/web3/filter.js?:197:40)\n```\n\nsince 0.6.0, same in 0.7.0 and develop, was working fine in 0.5.0\n"},{"labels":["enhancement"],"text":"Solidity's sha3() can hash a group of numbers, while web3.sha3() can only hash a single string.\n\nConsider a contract (an auction, say, or in my case a simple game) with secret numerical bids. Suppose the contract stores preimages of the bid hashed with a nonce and maybe a salt. When the bidding is over, the bidders can submit the bid and the nonce to confirm the bid, and solidity can hash them all to confirm the bid is accurate, then work with the bid. This part works fine.\n\nBut how does the client generate the preimages to send? web3.sha3() can only hash one string. The string \"100\" is not the same as the integer one hundred. If I send the string \"100\" however, the contract would have to waste gas parsing the string. It'd be far easier if web3.sha3 could just hash numbers on its own.\n"},{"labels":["enhancement"],"text":"Many apps, like the multisig wallet and the democracy DAO, allows the users to ask the contract to execute a custom solidity call to another contract. This is a very powerful feature that allows, for example the user to have a second authentication for any transaction in the wallet contract; or allows the DAO to own and maintain names in the registrar, or the DAO to own custom coins. \n\nThis is usually done with the solidity .call feature that will have this parameters:\n\n``` js\nsomeAddress.call.value(_amount)(_data);\n```\n\nWhere `someAddress` is an address to another contract, _amount is amount of ether in wei and _data is a custom abi encode of function that the user wants to call. The issue is that there is no user exposed function that will help build that _data field. \n\nThis is already half baked into web3.js in the Solidity Functions Prototype:\n\n``` js\noptions.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n```\n\nI propose that we expose a function in web3 that would have the following parameters:\n\n``` js\nweb3.encodeSolidityFunctionCall('myFunctionName',\n     [{\n       name: '_parameter1',\n       type: 'address',\n       value: '0x2345678..'\n    },{\n       name: '_parameter2',\n       type: 'uint',\n       value: '901'\n    }])\n    ...\n```\n\nThis would return an ABI encoded string that could be passed as data on to any contracts methods, which use this data in calls to other contracts.\n"},{"labels":["enhancement"],"text":"I just adapted my application to work asynchronously using callbacks. The DAPP is way more responsive now. But it still lags sometimes. It could be due to the sha3 calls that are made for every request to get function signatures.\n"},{"labels":["enhancement"],"text":"Please add the `estimateGas` function to contract events, so that specific contract function calls can be easily estimated\n"},{"labels":[null,null,"enhancement"],"text":"For GO see: https://github.com/ethereum/go-ethereum/issues/768\n"},{"labels":[null,"enhancement"],"text":"The idea is to allow specifying potentially nested topic lists to create complex filter criteria. At the highest level the `topics` argument is still a list, but each element may be one of:\n- string: as used previously\n- null: signalling a wildcard/match-all\n- string array: to match any element within\n\nA few samples:\n\n``` javascript\nshh.filter({}).watch(function(err, msg) {\n    console.log(\"Empty catcher:\", msg)\n})\nshh.filter({topics: [\"singleton\"]}).watch(function(err, msg) {\n    console.log(\"Single catcher:\", msg)\n})\nshh.filter({topics: [\"a\", \"b\"]}).watch(function(err, msg) {\n    console.log(\"Multi catcher:\", msg)\n})\nshh.filter({topics: [[\"1\", \"2\"]]}).watch(function(err, msg) {\n    console.log(\"Binary catcher:\", msg)\n})\nshh.filter({topics: [null, \"x\"]}).watch(function(err, msg) {\n    console.log(\"Wildcard catcher:\", msg)\n})\n```\n\nThese currently produce these JSON requests, the last two of which seem wrong\n\n``` javascript\n[{\"topics\":[]}]\n[{\"topics\":[\"0x73696e676c65746f6e\"]}]\n[{\"topics\":[\"0x61\",\"0x62\"]}]\n[{\"topics\":[\"0x5b2231222c2232225d\"]}]\n[{\"topics\":[\"0x6e756c6c\",\"0x78\"]}]\n```\n"},{"labels":["enhancement"],"text":"Doable only when karma-runner/karma-phantomjs-launcher#56 is solved.\n"},{"labels":["enhancement"],"text":"Hi, near as I can tell, the contract.html example code won't work if the user presses the second button before waiting for the contract to be confirmed first. (at least when using the go-ethereum client)\n\nShouldn't there be some code that waits for the contract to be confirmed before enabling the ability to call?\n\nThis would be especially valuable since there is little documentation as to how one actually can tell when a transaction has confirmed... I realize I can use \"web3.eth.filter('latest').watch()\", but that function doesn't seem to give me any info on a specific transaction's confirmation status...\n\nAlso: I believe your examples are still missing the \"From\" parameter that is required by the latest go-ethereum client.\n"},{"labels":["enhancement"],"text":"On develop branch commit de5de9e\n\n1.\nsendTransaction() sync is currently returning an address if it creates a contract. For a non-creation, what will it return?\n\n2.\nIn the async case, sendTransaction() callback returns an address before the contract is even mined, which loses the point of it being async.  Can the async sendTransaction() callback only fire after the contract has been mined successfully?\n\n3.\nWhen calling sendTransaction(), Alethzero warning dialog pops up which allows the user to Reject the tx.  Currently sendTransaction() ignores the user's response to this dialog.  If the user chooses \"Reject\" on the dialog, sendTransaction() should return that the user rejected the tx.\n\nSome suggestions for the above:\n- make the sync version of sendTransaction() return nothing\n- the async version will then return one of the following:\n- a) false (bool) if user Rejects the tx\n- b) contract address if a contract was created\n- c) transaction id\n"},{"labels":["enhancement"],"text":"To avoid issues like #111 .\n"},{"labels":["enhancement"],"text":"https://github.com/indutny/bn.js/\n\nIt's one of the (if not) fastest.\neg:\nhttp://blog.bitpay.com/2014/07/22/bitcore-3000-is-three-times-faster-for-bitcoin-on-the-web.html\nhttps://gist.github.com/wanderer/5aab77502625d6e2e1d5\n"},{"labels":["enhancement"],"text":"- refactor methods with complexity > 3\n- change minimum complexity in jshintrc to 3\n"},{"labels":["enhancement"],"text":""},{"labels":["enhancement",null],"text":""},{"labels":["enhancement"],"text":""},{"labels":["enhancement"],"text":"e.g. gas is an integer and must be passed as such (e.g. web3.eth.transact({gas: '69'}) is wrong); whereas gasPrice is a string (e.g. web3.eth.transact({gasPrice: 69}) is wrong)\nthis is no good. so let's make everything a string in the JSONRPC - no integers there at all. so it'll correctly accept integers, BigIntegers, decimal strings and 0x-prefixed hex strings.\n"},{"labels":["enhancement"],"text":""},{"labels":["enhancement"],"text":""},{"labels":["enhancement"],"text":"add method to reset web3 object (watches... etc.)\n"},{"labels":["enhancement"],"text":"https://travis-ci.org/ethereum/ethereum.js\n"}]