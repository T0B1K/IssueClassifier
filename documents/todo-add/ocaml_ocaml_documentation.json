[{"labels":["documentation"],"text":"https://caml.inria.fr/pub/docs/manual-ocaml/libref/index_exceptions.html\r\n\r\ndoes not currently include exceptions like Not_found, etc."},{"labels":[null,"documentation",null],"text":"http://caml.inria.fr/pub/docs/manual-ocaml/runtime.html contains a documentation of most OCAMLRUNPARAM settings, but several are missing:\r\n\r\n- H (huge pages)\r\n- M, m, n (custom space usage stuff)\r\n- t (\"trace level\"?)\r\n- w (caml major window size)\r\n- W (runtime warnings)"},{"labels":["documentation"],"text":"It would be nice if next version of Visual Studio had explicit support for Visual Studio 2019.  I tried this out and it works great for me with ocaml-4.08.0+beta3 .\r\n\r\nFor example the simplest version called \"Visual Studio Build Tools 2019\" available from https://visualstudio.microsoft.com/downloads/ .\r\n\r\nReference: https://github.com/ocaml/ocaml/blob/trunk/README.win32.adoc\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 1852\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2007-12-12T14:54:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.11+dev\n**Category:** documentation\n\n## Bug description\n\nThe OCAML toplevel accepts\r\n\r\n   module X = struct 3 + 4 end;;\r\n\r\nbut the grammar at http://caml.inria.fr/ocaml/htmlman/manual019.html\r\nsays you can only have definitions inside struct...end, and bare\r\nexpressions aren't definitions.  I think you should add bare\r\nexpressions as definitions to the grammar.\r\n\r\n-- \r\nTim Freeman                                                  tim@fungible.com\r\nGPG public key fingerprint ECDF 46F8 3B80 BB9E 575D  7180 76DF FE00 34B1 5C78\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 1795\n**Reporter:** administrator\n**Status:** acknowledged\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n\n## Bug description\n\nFull_Name: Yamagata Yoriyuki\r\nVersion: 3.06\r\nOS: Linux\r\nSubmission from: p2114-adsau14honb7-acca.tokyo.ocn.ne.jp (220.106.58.114)\r\n\r\n\r\nThe current refman.info doesn't seem to follow GNU convention of info.  In\r\nparticular, I'd like to suggest the following improvement.\r\n\r\n1) It is better if chapters and sections are referred by their name, not\r\nnumbers.  This change enables a user to use \"m\" command to jump desired sections\r\nand chapters.\r\n\r\n2) Make all chapters listed in the top index, while move licence conditions or\r\nlike to their own sections.\r\n\r\n3) Remove decorative ****** and *=*=*=*\r\n\r\nIn general, I think it is preferable to create info from texi, not directly from\r\nlatex files by havea.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 1651\n**Reporter:** administrator\n**Status:** resolved (set by @damiendoligez on 2012-09-11T07:18:11Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** \"Hendrik Tews\" smithjoshuab\n\n## Bug description\n\nHi,\r\n\r\nAppendix A (quotations) of the camlp4 reference manual is\r\nincorrect or incomplete in the following cases:\r\n\r\n1. there are no quotations documented for the two types \r\n   MLast.row_field and MLast.with_constr. Further there is no\r\n   location function \"loc_of_...\" defined for these two types. \r\n\r\n\r\n2. for the following constructors from MLast there is no\r\n   quotation or the given quotation contains errors:\r\n\r\nExVrn (_, _)\r\nExSnd (_, _, _)\r\nExOvr (_, _)\r\nExOlb (_, _, _)\r\nExNew (_, _)\r\nExLmd (_, _, _, _)\r\nPaVrn (_, _)\r\nPaTyp (_, _)\r\nPaRec (_, _)\r\nPaOlb (_, _, _, _)\r\nPaLab (_, _, _)\r\nPaFlo (_, _)\r\nPaArr (_, _)\r\nTyObj (_, _, true)\r\nSgInc (_, _)\r\nSgDir (_, _, _)\r\nSgClt (_, _)\r\nSgCls (_, _)\r\nStInc (_, _)\r\nStDir (_, _, _)\r\nStClt (_, _)\r\nStCls (_, _)\r\nMeTyc (_, _, _)\r\nCtSig (_, _, _)\r\nCrMth (_, _, _, _, _)\r\n\r\n\r\n3. the following quotations do not work as given, they produce\r\n   the following error messages:\r\n\r\n<:patt< { $ppl$ } >>: record.\r\nParse error: '=' expected after [patt_label_ident] (in [label_patt])\r\n\r\n<:module_expr< ( $me$ : $mt$ ) ] >>: module type constraint.\r\nParse error: end of input expected after [module expression] (in [module\r\n  expression])\r\n\r\n<:class_type< object $s$ $list:csil$ end >>: class object type\r\nParse error: ';' expected after [class signature item] (in [class\r\ntype])\r\n\r\n<:class_str_item< method $s$ : $t$ >>: method.\r\nParse error: '=' expected after [type] (in [class structure item])\r\n\r\n\r\n<:class_str_item< method private $s$ : $t$ >>: private method.\r\nParse error: '=' expected after [type] (in [class structure item])\r\n\r\n4. the quotation\r\n\r\n<:class_sig_item< value $mut:m$ $s$ = $t$ >>: value.\r\n\r\n   should be \r\n\r\n<:class_sig_item< value $mut:m$ $s$ : $t$ >> ....\r\n\r\n\r\nFor the compilation of these errors I used the attached ocaml\r\nfile. It would be nice if the next camlp4 release would contain\r\nan example file with a complete pattern match over the syntax\r\ntree written entirely with quotations.\r\n\r\n\r\nBye,\r\n\r\nHendrik\r\n\r\n\r\n----------------\r\n\r\n(* A.2 Quotation expr *)\r\n\r\nlet f = function\r\n  | <:expr< $e1$ . $e2$ >> -> ()\r\n  | <:expr< $anti:e$ >> -> ()\r\n  | <:expr< $e1$ $e2$ >> -> ()\r\n  | <:expr< $e1$ .( $e2$ ) >> -> ()\r\n  | <:expr< [| $list:el$ |] >> -> ()\r\n  | <:expr< $e1$ := $e2$ >> -> ()\r\n  | <:expr< $chr:c$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:expr< ($e$ :> $t$) >> -> ()\r\n  | <:expr< ($e$ : $t1$ :> $t2$) >> -> ()\r\n\r\n  | <:expr< $flo:s$ >> -> ()\r\n  | <:expr< for $s$ = $e1$ $to:b$ $e2$ do { $list:el$ } >> -> ()\r\n  | <:expr< fun [ $list:pwel$ ] >> -> ()\r\n  | <:expr< if $e1$ then $e2$ else $e3$ >> -> ()\r\n  | <:expr< $int:s$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:expr< ~ $i$ : $e$ >> -> ()\r\n  | <:expr< lazy $e$ >> -> ()\r\n\r\n  | <:expr< let $rec:b$ $list:pel$ in $e$ >> -> ()\r\n  | <:expr< $lid:s$ >> -> ()\r\n  | <:expr< match $e$ with [ $list:pwel$ ] >> -> ()\r\n  | <:expr< { $list:eel$ } >> -> ()\r\n  | <:expr< do { $list:el$ } >> -> ()\r\n  | <:expr< $e1$ .[ $e2$ ] >> -> ()\r\n  | <:expr< $str:s$ >> -> ()\r\n  | <:expr< try $e$ with [ $list:pwel$ ] >> -> ()\r\n  | <:expr< ( $list:el$ ) >> -> ()\r\n  | <:expr< ( $e$ : $t$ ) >> -> ()\r\n  | <:expr< $uid:s$ >> -> ()\r\n  | <:expr< while $e$ do { $list:el$ } >> -> ()\r\n\r\n(* missing\r\n(ExVrn (_, _)|ExSnd (_, _, _)|ExOvr (_, _)|ExOlb (_, _, _)|ExNew (_, _)|\r\nExLmd (_, _, _, _))\r\n*)\r\n\r\n\r\n\r\n\r\n\r\n(* A.3 Quotation patt *)\r\n\r\nlet f = function\r\n  | <:patt< $p1$ . $p2$ >> -> ()\r\n  | <:patt< $anti:e$ >> -> ()\r\n  | <:patt< ( $p1$ as $p2$ ) >> -> ()\r\n  | <:patt< _ >> -> ()\r\n  | <:patt< $p1$ $p2$ >> -> ()\r\n  | <:patt< $chr:c$ >> -> ()\r\n  | <:patt< $int:s$ >> -> ()\r\n  | <:patt< $lid:i$ >> -> ()\r\n  | <:patt< $p1$ | $p2$ >> -> ()\r\n  | <:patt< $p1$ .. $p2$ >> -> ()\r\n\r\n  (* | <:patt< { $ppl$ } >> -> () *)\r\n(* error message \r\nParse error: '=' expected after [patt_label_ident] (in [label_patt])\r\n*)\r\n\r\n  | <:patt< $str:s$ >> -> ()\r\n  | <:patt< ( $list:pl$ ) >> -> ()\r\n  | <:patt< ( $p$ : $t$ ) >> -> ()\r\n  | <:patt< $uid:s$ >> -> ()\r\n\r\n(*missing\r\n(PaVrn (_, _)|PaTyp (_, _)|PaRec (_, _)|PaOlb (_, _, _, _)|PaLab (_, _, _)|\r\nPaFlo (_, _)|PaArr (_, _))\r\n*)\r\n\r\n\r\n\r\n(* A.5 Quotation ctyp *)\r\n\r\nlet f = function\r\n  | <:ctyp< $t1$ . $t2$ >> -> ()\r\n  | <:ctyp< $t1$ as $t2$ >> -> ()\r\n  | <:ctyp< _ >> -> ()\r\n  | <:ctyp< $t1$ $t2$ >> -> ()\r\n  | <:ctyp< $t1$ -> $t2$ >> -> ()\r\n  | <:ctyp< # $list:sl$ >> -> ()\r\n  | <:ctyp< ~ $s$ : $t$ >> -> ()\r\n  | <:ctyp< $lid:s$ >> -> ()\r\n  | <:ctyp< $t1$ == $t2$ >> -> ()\r\n  | <:ctyp< < $list:fl$ > >> -> ()\r\n  | <:ctyp< ? $s$ : $t$ >> -> ()\r\n\r\n(* was\r\n  | <:ctyp< ! $list:sl$ : $t$ >> -> ()\r\n but fixed in new docs *)\r\n\r\n  | <:ctyp< ! $list:sl$ . $t$ >> -> ()\r\n\r\n  | <:ctyp< '$s$ >> -> ()\r\n  | <:ctyp< { $list:sbtl$ } >> -> ()\r\n  | <:ctyp< [ $list:stll$ ] >> -> ()\r\n  | <:ctyp< ( $list:tl$ ) >> -> ()\r\n  | <:ctyp< $uid:s$ >> -> ()\r\n  | <:ctyp< [| $list:rfl$ |] >> -> ()\r\n(*missing\r\nTyObj (_, _, true)\r\n*)\r\n\r\n\r\n\r\n(* A.6 Quotation sig_item *)\r\n\r\nlet f = function\r\n  | <:sig_item< declare $list:sil$ end >> -> ()\r\n  | <:sig_item< exception $s$ of $list:tl$ >> -> ()\r\n  | <:sig_item< external $s$ : $t$ = $list:sl$ >> -> ()\r\n  | <:sig_item< module $s$ : $mt$ >> -> ()\r\n  | <:sig_item< module type $s$ = $mt$ >> -> ()\r\n  | <:sig_item< open $sl$ >> -> ()\r\n  | <:sig_item< type $list:sslt$ >> -> ()\r\n  | <:sig_item< value $s$ : $t$ >> -> ()\r\n(* missing\r\n(SgInc (_, _)|SgDir (_, _, _)|SgClt (_, _)|SgCls (_, _))\r\n*)\r\n\r\n\r\n(* A.7 Quotation str_item *)\r\n\r\nlet f = function\r\n  | <:str_item< declare $list:stl$ end >> -> ()\r\n  | <:str_item< exception $s$ of $list:tl$ >> -> ()\r\n  | <:str_item< $exp:e$ >> -> ()\r\n  | <:str_item< external $s$ : $t$ = $list:sl$ >> -> ()\r\n  | <:str_item< module $s$ = $me$ >> -> ()\r\n  | <:str_item< module type $s$ = $mt$ >> -> ()\r\n  | <:str_item< open $sl$ >> -> ()\r\n  | <:str_item< type $list:sslt$ >> -> ()\r\n  | <:str_item< value $rec:b$ $list:pel$ >> -> ()\r\n(*missing\r\n(StInc (_, _)|StDir (_, _, _)|StClt (_, _)|StCls (_, _))\r\n*)\r\n\r\n\r\n\r\n\r\n(* A.8 Quotation module_type *)\r\n\r\nlet f = function\r\n  | <:module_type< $mt1$ . $mt2$ >> -> ()\r\n  | <:module_type< $mt1$ $mt2$ >> -> ()\r\n  | <:module_type< functor ( $s$ : $mt1$ ) -> $mt2$ >> -> ()\r\n  | <:module_type< $lid:i$ >> -> ()\r\n\r\n(* in new version *)\r\n  | <:module_type< '$i$ >> -> ()\r\n\r\n  | <:module_type< sig $list:sil$ end >> -> ()\r\n  | <:module_type< $uid:i$ >> -> ()\r\n  | <:module_type< $mt$ with $list:wcl$ >> -> ()\r\n\r\n\r\n(* A.9 Quotation module_expr *)\r\n\r\nlet f = function\r\n  | <:module_expr< $me1$ . $me2$ >> -> ()\r\n  | <:module_expr< $me1$ $me2$ >> -> ()\r\n  | <:module_expr< functor ( $s$ : $mt$ ) -> $me$ >> -> ()\r\n  | <:module_expr< struct $list:stl$ end >> -> ()\r\n\r\n(*\r\n  | <:module_expr< ( $me$ : $mt$ ) ] >> -> ()\r\n\r\nerror :\r\nParse error: end of input expected after [module expression] (in [module\r\n  expression])\r\n*)\r\n\r\n  | <:module_expr< $uid:i$ >> -> ()\r\n(*missing\r\nMeTyc (_, _, _)\r\n*)\r\n\r\n\r\n(* A.10 Quotation class_expr *)\r\n\r\nlet f = function\r\n  | <:class_expr< $ce$ $e$ >> -> ()\r\n  | <:class_expr< $list:sl$ [ $list:tl$ ] >> -> ()\r\n  | <:class_expr< fun $p$ -> $ce$ >> -> ()\r\n  | <:class_expr< let $rec:b$ $list:lb$ in $ce$ >> -> ()\r\n  | <:class_expr< object $p$ $list:csil$ end >> -> ()\r\n  | <:class_expr< ( $ce$ : $ct$ ) >> -> ()\r\n\r\n\r\n(* A.11 Quotation class_type *)\r\n\r\nlet f = function\r\n  | <:class_type< $list:sl$ [ $list:tl$ ] >> -> ()\r\n  | <:class_type< [ $t$ ] -> $ct$ >> -> ()\r\n\r\n(* \r\n  | <:class_type< object $s$ $list:csil$ end >> -> ()\r\nerror:\r\nParse error: ';' expected after [class signature item] (in [class type])\r\n*)\r\n(* missing\r\nCtSig (_, _, _)\r\n*)\r\n\r\n\r\n(* A.12 Quotation class_sig_item *)\r\n\r\nlet f = function\r\n  | <:class_sig_item< type $t1$ = $t2$ >> -> ()\r\n  | <:class_sig_item< declare $list:csil$ end >> -> ()\r\n  | <:class_sig_item< inherit $ct$ >> -> ()\r\n  | <:class_sig_item< method $s$ : $t$ >> -> ()\r\n  | <:class_sig_item< method private $s$ : $t$ >> -> ()\r\n\r\n(*\r\n  | <:class_sig_item< value $mut:m$ $s$ = $t$ >> -> ()\r\nerror\r\nParse error: ':' expected after [label] (in [class signature item])\r\n\r\nshould be\r\n*)\r\n  | <:class_sig_item< value $mut:m$ $s$ : $t$ >> -> ()\r\n\r\n\r\n  | <:class_sig_item< method virtual $s$ : $t$ >> -> ()\r\n  | <:class_sig_item< method virtual private $s$ : $t$ >> -> ()\r\n\r\n\r\n(* A.13 Quotation class_str_item *)\r\n\r\nlet f = function\r\n  | <:class_str_item< declare $list:csil$ end >> -> ()\r\n  | <:class_str_item< type $t1$ = $t2$ >> -> ()\r\n  | <:class_str_item< inherit $ct$ >> -> ()\r\n  | <:class_str_item< initializer $e$ >> -> ()\r\n\r\n(*\r\n  | <:class_str_item< method $s$ : $t$ >> -> ()\r\nerror\r\nParse error: '=' expected after [type] (in [class structure item])\r\n*)\r\n\r\n(*\r\n  | <:class_str_item< method private $s$ : $t$ >> -> ()\r\nerror\r\nParse error: '=' expected after [type] (in [class structure item])\r\n*)\r\n\r\n  | <:class_str_item< method virtual $s$ : $t$ >> -> ()\r\n  | <:class_str_item< method virtual private $s$ : $t$ >> -> ()\r\n  | <:class_str_item< value $mut:m$ $s$ = $t$ >> -> ()\r\n(*missing\r\nCrMth (_, _, _, _, _)\r\n*)\r\n\r\n\r\n(* missing types \r\nand row_field =\r\n\r\nand with_constr =\r\n *)\r\n\r\n(*** Local Variables: ***)\r\n(*** version-control: t ***)\r\n(*** kept-new-versions: 5 ***)\r\n(*** compile-command: \"ocamlc -pp \\\"camlp4o q_MLast.cmo\\\" -c -I \\\"`camlp4 -where`\\\" quotation_test.ml\" ***)\r\n(*** delete-old-versions: t ***)\r\n(*** End: ***)\r\n----------------\r\n----------------\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7936\n**Reporter:** @dbuenzli\n**Assigned to:** @gasche\n**Status:** resolved (set by @Octachron on 2019-03-04T16:33:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.1\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nSee this page:\r\n\r\nhttps://caml.inria.fr/pub/docs/manual-ocaml/objectexamples.html\r\n\r\n(I verified, this seem to still be the case in the docset distributed for the beta 4.08)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7922\n**Reporter:** lcorrenson\n**Assigned to:** @Octachron\n**Status:** acknowledged (set by @Octachron on 2019-02-15T09:31:18Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** @nojb @gasche\n\n## Bug description\n\nAn easy access to the index of top-level modules of the « standard library » is missing.\r\n\r\nThe only access to such an index is currently :\r\n - at the very end of the Stdlib section § 23.3, spawning a list over more 5 pages on 21' screen display (sic)\r\n - among the terribly verbose index of all module names\r\n\r\nThis is very inconvenient. In OCaml 4.07 manual, the index fits into the front page of §26 !\r\n\r\nSource :\r\n\r\nhttps://caml.inria.fr/distrib/ocaml-4.08\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7921\n**Reporter:** blanqui\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2019-02-14T15:10:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n\n## Bug description\n\nIn http://caml.inria.fr/pub/docs/manual-ocaml/ocamldoc.html, http://www.research.att.com/sw/tools/graphviz/ is invalid. Should be https://graphviz.org/ perhaps.\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 7913\n**Reporter:** ramsdell0\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2019-02-18T08:45:19Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** x86_64\n**OS:** Mac OS\n**OS Version:** Mojave\n**Version:** 4.07.1\n**Category:** documentation\n**Related to:** #7804\n**Monitored by:** @nojb\n\n## Bug description\n\nThe enclosed program shows a case in which a line of text is broken in an unexpected place.  The pretty printer only allows line breaks after commas, but the program breaks a line after an open parenthesis.\r\n\r\nThe output of the enclosed program is:\r\n\r\n$ ./ppterm\r\npred(a12(x1, y1), a1234(x1, y1), a1234(x1, y1), a1234(x1, y1), a1234(\r\n     x1, y1), a1234(x1, y1))\n\n## Steps to reproduce\n\n$ ocamlc -o ppterm ppterm.ml\r\n$ ./ppterm\n\n## File attachments\n\n- [ppterm.ml](https://gist.githubusercontent.com/vicuna/09148e57514ab5ab9ff0db2506e05f83/raw/bc793a5df3dc9737f5677f3c803c860b5bae5fba/ppterm.ml)\n"},{"labels":[null,null,null,"documentation"],"text":"**Original bug ID:** 7900\n**Reporter:** Vincent Cheval\n**Status:** acknowledged (set by @nojb on 2019-01-24T09:41:11Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** major\n**Platform:** Mac OS X and Unix\n**OS:** MacOs 10.14 and Unbuntu\n**Version:** 4.07.1\n**Category:** back end (clambda to assembly)\n**Monitored by:** @nojb @glondu\n\n## Bug description\n\nHello,\r\n\r\nI noticed that when we define mutual recursive functions that are tail recursive, the number of arguments  impacts  whether or not ocamlopt actually optimize the functions. More specifically, as soon as there is more than 10 arguments (strictly) then the calls are not optimized anymore. Is it an expected behavior ? If so, would it be possible that the flag [@tailcall] detects this or at least to include the expected behavior in the documentation ? Because all my examples (even the one not working do not raise any flags). \r\n\r\nNote that when the function is not mutual recursive, the number of argument does not seem to be problematic.\r\n\r\nNote also that if the mutual recursive functions have less then 10 arguments but another function is defined inside them then the problem also arises.\r\n\r\nBest,\r\nVincent Cheval\n\n## Steps to reproduce\n\nI put below different cases that I tried to determine the behavior of ocamlopt.\r\n\r\n\r\n(* This function is tail recursive and behaves accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1) (x11+1) (x12+1) (x13+1) (x14+1) (x15+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive and behaves accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nand test2 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1)\r\n\r\nand test2 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x2+1) (x3+1) (x4+1) (x5+1) (x6+1) (x7+1) (x8+1) (x9+1) (x10+1) (x10+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test2[@tailcall]) x1\r\n\r\nand test2 x1 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1 1\r\n\r\n(* These functions are tail recursive but do not behave accordingly with ocamlopt *)\r\nlet rec test1 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test1 (%d)\\n%!\" stack.Gc.stack_size;\r\n  let sub_test1 z =\r\n    (test2[@tailcall]) (x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+z)\r\n  in\r\n  (sub_test1[@tailcall]) (x1+1)\r\n\r\nand test2 x1 =\r\n  let stack = Gc.stat () in\r\n  Printf.printf \"test2 (%d)\\n%!\" stack.Gc.stack_size;\r\n  (test1[@tailcall]) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1) (x1+1)\r\n\r\nlet _ = test1 1 1 1 1 1 1 1 1 1 1\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7891\n**Reporter:** sfuric\n**Status:** new\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.0\n**Category:** documentation\n**Monitored by:** @nojb @shindere @Yakobowski\n\n## Bug description\n\nDocumentation of module Float is wrong regarding IEEE 754 evaluation rules. It says ``any arithmetic operation with nan as argument returns nan as result'' and ``Any floating-point operation with nan as argument returns nan as result'' which is wrong, as demonstrated by OCaml itself:\r\n-8<-----------------------------------------\r\n        OCaml version 4.07.0\r\n# 1.0 ** nan;;\r\n- : float = 1.\r\n# nan ** 0.0;;\r\n- : float = 1.\r\n#\r\n-8<-----------------------------------------\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7885\n**Reporter:** julia\n**Status:** new\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe information about how to install OCaml with opam on the OCaml web page is now more helpful.  It would also be helpful to give an example of how to upgrade to the latest version.  This should make it clear how OCaml versions are named.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7881\n**Reporter:** filliatr\n**Assigned to:** @Armael\n**Status:** resolved (set by @nojb on 2018-12-16T17:50:04Z)\n**Resolution:** fixed\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe documentation for Queue.of_seq says \"Create an array...\" instead of \"Create a queue...\" (most likely a copy-paste from module Array).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7875\n**Reporter:** 0xc0\n**Status:** new\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe Changes file is currently over 8000 lines, with the first 700 lines devoted to working changes. Because this file is currently in just a text format, there is scrolling and/or text search required to see changes of even recently released versions.\r\n\r\nBy moving to a parsable format such as AsciiDoc or Markdown, editors which already have support for parsing such a format can outline and collapse the structure of this file.\r\n\r\nAdditionally, such a change can give the ocaml source code root directory a slightly more modern feel than a plain text file.\n\n## Additional information\n\nThe file is already parsable as a Markdown file, with the exception that there is a semantic distinction between a bulleted item beginning with \"-\" and a bulleted item beginning with \"*\" (Markdown treats these as equivalent).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7870\n**Reporter:** @damiendoligez\n**Assigned to:** @damiendoligez\n**Status:** assigned (set by @damiendoligez on 2018-11-05T14:49:28Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe following letters are used for parameters in OCAMLRUNPARAM but not documented in ocamlrun.m:\r\nc, H, t, w, W\r\n\r\nThe following are not documented in runtime.etex:\r\nH, t, w, W\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7868\n**Reporter:** skaller\n**Assigned to:** @gasche\n**Status:** resolved (set by @alainfrisch on 2018-10-26T13:30:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.07.1\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Monitored by:** @nojb\n\n## Bug description\n\nThe docs say Set.diff is \"set difference\".\r\n\r\nAs I pointed out years ago (why isn't this fixed!!) there are TWO operations called set difference. Both should be provided IMHO but at least the one that is provided should be properly specified.\r\n\r\nIs this (a) the symmetric difference, equal to the union with the intersection removed, OR is it (b) the asymmetric difference, the elements of the first set with those of the second which are in it removed?\n\n## Steps to reproduce\n\nJust read the docs.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7825\n**Reporter:** @gasche\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2018-09-12T07:56:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.08.0+dev/beta1/beta2\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Related to:** #7247\n**Monitored by:** @nojb @Yakobowski\n\n## Bug description\n\nWitness this reddit question ( https://www.reddit.com/r/ocaml/comments/8znh3d/using_location_module/ ) by giltho: \r\n\r\n> I'm building a Parser with Menhir and I'm trying to use the Location module.\r\n> However, open Location fails with the message Unbound module Location,\r\n> am I missing something ? Location isn' t part of the core library ?\r\n\r\nIf you look at the OCaml manual per-module,\r\n\r\n  https://caml.inria.fr/pub/docs/manual-ocaml-4.07/libref/Location.html\r\n\r\nor \r\n\r\n  https://caml.inria.fr/pub/docs/manual-ocaml-4.07/libref/\r\n\r\nit indeed isn't visible at all that some modules are part of the standard library (have an outward-facing interface with stability guarantees) and others are part of the compiler-libs (haphazard documentation, no stability from version to version).\r\n\r\nIt is important to allow people to distinguish these two kind of modules, and in fact it may have been a mistake to include the compiler-libs documentation online without a clearer separation. I think we should think about a clearer separation, and maybe revisit the idea of includling compiler-libs in the manual in this way. We *could* describe compiler-libs and encourage people to read .mli file, for example, which has the advantage of clearly marking the fact that they are doing something \"more advanced\" -- and more fragile.\n"},{"labels":["documentation"],"text":"**Original bug ID:** 7785\n**Reporter:** ArthurMilchior\n**Status:** new\n**Resolution:** open\n**Priority:** normal\n**Severity:** trivial\n**Category:** documentation\n\n## Bug description\n\nIn the page https://caml.inria.fr/pub/docs/manual-ocaml/libref/Format.html\r\nFor the sake of consistency, the second argument of pp_open_tag should be tag and not string.\r\n\r\nFunction pp_set_formatter_out_channel belongs to the section\r\n«Redirecting the standard formatter output». It appears before it, by error I presume\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7783\n**Reporter:** pmetzger\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2018-04-24T14:14:22Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** N/A\n**OS:** N/A\n**OS Version:** N/A\n**Version:** 4.06.1\n**Category:** documentation\n**Related to:** #5883\n**Monitored by:** @nojb @hhugo @gasche\n\n## Bug description\n\nThe manual does not sufficiently explain a subtle point. Consider the following declaration:\r\n\r\ntype foo = \r\n| A of int*int\r\n| B of (int*int)\r\n\r\nAlthough these look similar, A and B are quite different. A is a constructor taking two arguments, even though it looks like it takes a tuple, while B of course takes a tuple.\r\n\r\nThis means that the two cannot be used interchangeably and in fact have different enough meanings to matter in a lot of contexts.\r\n\r\nThis is confusing to a beginner because it would seem like the parentheses are just meaningless precedence grouping, but they aren’t, they’re syntactically quite significant, and it would seem like the * in the A case means “tuple” but it does not.\r\n\r\n(Note that I myself didn't understand this distinction. The manual does not make it particularly clear. That is why I am filing this bug report. A discussion on the discord chat channel seemed to reveal that _many_ beginners were confused about this.)\r\n\r\nIt would be good to make this _very_ explicit in the manual.\n\n## Steps to reproduce\n\n1. Try learning OCaml\r\n2. Become confused about multi-argument constructors vs. tuple constructors in sum types.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7776\n**Reporter:** rescueme\n**Status:** closed (set by @xavierleroy on 2018-05-21T16:41:36Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nDiscover cool things to buy online, ranging from innovative gadgets, to outrageously expensive luxuries, to utterly useless items.\r\n\r\nhttps://awesomeshityoucanbuy.com/category/gear-and-gadgets-gifts\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7735\n**Status:** closed (set by @xavierleroy on 2018-02-21T18:37:25Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nA gig economy is a condition in which brief positions are ordinary and affiliations contract with free specialists for right now engagements.\n\n## Additional information\n\nThe career world has rapidly changed and these days, long-term careers and people working in just one job are slowly but steadily becoming a thing of the past. In fact, according to research, in the year 2015, between three people, one person in Australia was doing some sort of freelance or contract work. There are many reasons that are attributed to the growth of the gig economy. First of all, there has been an emergence of technology that cannot be ignored and that has played a tremendous role in connecting businesses with freelancers.\r\nOn a light note, Robin Chase who is Zipcar’s founder put it that her father worked in one job, worked for six jobs himself and now, she foresees her children working for six jobs at once. Many people have been very pessimistic when matters related to the advantages that accompany the gig economy.\r\nhttps://www.fieldengineer.com/blogs/freelance-field-engineers-telecom-using-gig-economy-bring-change-lives/\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7708\r\n**Reporter:** @hannesm\r\n**Status:** new\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Version:** 4.06.0\r\n**Category:** ocamldoc\r\n**Monitored by:** @Drup\r\n\r\n## Bug description\r\n\r\nThe very nice manual includes a \"list of exceptions\" at http://caml.inria.fr/pub/docs/manual-ocaml/libref/index_exceptions.html\r\n\r\nThis is very useful to read up on exceptions, but the builtin ones, like Invalid_argument, Out_of_memory, Failure, etc. are not listed there (they are explained the manual (https://caml.inria.fr/pub/docs/manual-ocaml/core.html#sec547)).\r\n\r\nIt would be really great to extend the index with these builtin exceptions (and types) for a better user experience.\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7698\n**Reporter:** jfehrle\n**Assigned to:** @Octachron\n**Status:** assigned (set by @Octachron on 2018-01-02T13:58:02Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Category:** documentation\n**Monitored by:** @nojb @Yakobowski\n\n## Bug description\n\nI found \"The OCaml system release 4.06\" was not so easy to read and understand.  This will tend to slow down and discourage people who want to learn and use OCaml.  I will be looking at some OCaml books, but so far I haven't found one that looks to be what I want.  Something that's as readable as \"The C Programming Language\" would be fabulous.\r\n\r\nThese comments are for the first 2 1/2 chapters.  I'd be happy to a) read revisions and b) submit comments on the other chapters if someone undertakes improving the document.\n\n## Additional information\n\nOCaml Comments:\r\n\r\nPage 13:\r\n\r\n“A good familiarity with programming in conventional languages (say, Pascal or C) is assumed, but no prior exposure to functional languages is assumed.”\r\n\r\nThe text assumes a number of details that would be unfamiliar to a C programmer.  No need to mention Pascal any more, it is little used.  You might refer to Java or C++, which could be useful for comparison in Chapter 3.\r\n\r\n\r\n“1.1 Basics”\r\n\r\nI’d like a very high-level overview of OCaml in just a few pages before seeing any examples.  This is to get context and so I have an idea what to expect in the document before providing a full discussion of a topic.  Some repetition is helpful to the reader. From my OCaml beginner’s perspective, some of the interesting points to get out early would be:\r\n-\tThe extensive type system\r\n-\tType inference (but you can specify explicitly when necessary in some places?)\r\n-\tThe use of type variables\r\n-\tCreating variant types that are unions of other types\r\n-\tThe fact that the type checking is totally rigorous and that there are no automatic conversions\r\n-\tThat type information is not available at runtime (unlike Reflection in Java, for example).\r\n-\tData types (primitive, arrays, lists, tuples, records, classes/objects, ?)\r\n-\tPatterns\r\n-\tSupport for functional, imperative and object-oriented paradigms\r\n-\tModules for managing large projects\r\n-\tDifferences between the top level and compiled programs (e.g. for modules)  (Note that the top level is good for experimentation but probably not as useful for large multi-file projects such as Coq)\r\n\r\nWhat is the relation to ML?  Would any of the ML documentation be helpful in learning OCaml?\r\n\r\nAlso, it would great to include some motivational examples of things that you do easily in OCaml that are harder to do in C++/Java.\r\n\r\nExplain ;; would generally not be used in programs complied from source files rather than typed into the top level.\r\n\r\nExplain that “float -> float” or “int -> int -> int” is a function signature.  This notation would be completely unknown to C/Java developers.  Also say a little about where this notation came from (mathematical logic) and why it is preferred over more common notation such as “f(int, int) -> int” or “int f(int, int)”.\r\n\r\nPage 14:\r\n\r\n“General mechanisms for defining your own data structures are also provided.”\r\n\r\nHow about saying “There are also general mechanisms for defining your own data structures.  These are records and classes, which will be covered shortly.”?\r\n\r\n“List patterns have the exact same shape as list expressions.”\r\n\r\nUnless “shape” is a technical term, I think “form” is probably a much word choice.\r\n\r\n“and” in code example – would be helpful to say what this means rather than let the reader guess.  Why use the “and” instead of 2 top-level let’s?  Also, somewhere say something about indentation conventions.  This seems like it may be the convention, but it is unfamiliar to C/Java developers:\r\n\r\nlet x = … in\r\nlet y = … in\r\nlast_expression\r\n\r\nPage 15:\r\n\r\n“modify in-place a list” -> “modify a list in place”  (English syntax)\r\n\r\n“sin’” – mention what characters are allowed in identifiers.  Apostrophe is not allowed in C or Java.\r\n\r\nPage 16:\r\n\r\n“to expand directly” -> “to directly expand”\r\n\r\nPage 17:\r\n\r\nMention “with” is a keyword.\r\n\r\n“all possible shapes” -> “all possible forms”\r\n\r\nIn “Float of float”, the “of” is a keyword, just syntactic sugar?  And the “int” or “float” could be any type, such as an array of int tuples?\r\n\r\n “Constructor names are capitalized” – would be good to naming conventions a short section so it can be found later and indexed.\r\n\r\n“match (n1, n2)” – this is matching on a tuple, right?  Maybe worth noting.  Can you match on simple types (booleans, ints)?  Anything else?\r\n\r\nPage 18:\r\n\r\n“’a” - Mention the convention that a symbol starting with an apostrophe is a type variable.\r\n\r\n“two subtrees containing also” -> “two subtrees also containing”\r\n\r\nPage 19:\r\n\r\n“Arrays are given in extension between [| and |] brackets, …” – the first part of the sentence lets you give the values of the array elements, while Array.make is much less flexible.  “given in extension” is not standard English.  Maybe split into 2 sentences.  “Arrays containing values can be provided as a series of semicolon-separated values betwees [| and |] brackets.”\r\n\r\n“… references, which are mutable indirection cells (or one-element arrays)”  seems inconsistent with the statement on page 20: “… references: they are implemented as a single-field mutable record, as follows:”\r\n\r\nPage 20:\r\n\r\n“let ( ! ) = …”  Would you explain the syntax of “( ! )”?  You couldn’t do this in C/Java.  Probably in C++.\r\n\r\nJust curious:  Is there a way to explicitly specify the type of a functions’ arguments?  Or is it always inferred?\r\n\r\n“Without user-provided type annotations, this is not allowed, as polymorphism is only introduced on a global level.”  This sentence is hard to understand; the negative “without” and “not allowed” are a little confusing.  Maybe say something like “Doing this requires user-provided type annotation, since polymorphism is only introduced automatically for global (top-level?) definitions.”?\r\n\r\n“mutable id: ’a. ‘a -> ‘a”  The period is just to mark the end of the type of id?\r\n\r\nPage 21:\r\n\r\n“Exceptions can also be used as a general-purpose non-local control structure.”  At least within the Java community, I think many people would disagree with this.  It can easily be abused.  Exceptions should be for truly exceptional conditions (errors), not as a general-purpose control structure.\r\n\r\n“The with part is actually a regular pattern-matching on the exception value.”  “regular” makes me think of regular expressions.  I think you mean it does the usual/normal pattern matching.  Maybe \r\nsay “The with part does pattern matching on the exception value.”?\r\n\r\n“then raising again the exception” -> “then raising the exception again”\r\n\r\nPage 22:\r\n\r\n“expression * expression” – I don’t fully understand the syntax.  Is this defining a tuple?  Why is the “*” needed?  Of course, it is not multiplication, but a little odd to see in an expression evaluator when the comments use “*” to mean multiplication, slightly confusing, maybe worth a short comment.\r\n\r\nPage 27:\r\n\r\nWhen I hear the term “structure,” it makes me think of data structures.  In C, “struct” is a keyword used to define their equivalent to records.\r\n\r\nThe simpler use of modules is to manage a large body of code and its name spaces.  Functors more complex and are fairly similar to parameterized classes in Java.  I would introduce these two uses in that order.  Key points on managing a large body of code:\r\n-\tEach module has its own namespace\r\n-\tBy default, each source file defines a separate module matching the file name.\r\n-\tUse PrioQueue.empty to refer to an item in module PrioQueue.  (How do you distinguish between the modules from 2 source files dir1/foo.ml and dir2/foo.ml?)\r\n-\tUse open to include another module’s definitions in the current name space.  (What happens if the name is used in 2 imports?  Or used in an import but also defined in the current module?)\r\n-\t“let open xxx in” construct\r\n-\tCreating multiple modules in one source file?  (Is it possible and is it a good practice?  Seem like it would simpler to stick to using the file name as the module name.)\r\n-\tCan module definitions be nested?  If that’s useful.\r\n-\tThe relationship between .mli files and modules (section 2.5 with some editing to avoid introducing signatures)\r\n\r\nI wouldn’t mention signatures or show them in examples until after the above points are covered.\r\n\r\nPage 31:\r\n\r\n“Functors are ‘functions’ from structures to structures”  They are not general functions at all, are they?  As far as I can tell, they only allow substitution for specific parameters.  So the first sentence is misleading and would best be removed.  The paragraph could begin with “Functors let you create parameterized signatures and then provide the parameter(s) to get a specific implementation.  For instance …”\r\n\r\nThe example is so long it’s a bit hard to follow.  Maybe it could be done in two parts: first, a skeleton of the high-level structure with a few comments, such as:\r\n\r\n\tmodule type ORDERED_TYPE =  sig …\r\n\tmodule Set = \r\n\t\tfunctor (Elt: ORDERED_TYPE) ->  struct …\r\n\tmodule OrderedString = struct …\t(* matching the signature of ORDERED_TYPE *)\r\n\tmodule StringSet = Set(OrderedString);;\r\n\r\nThen show the details of ORDERED_TYPE, Set and OrderedString.\r\n\r\nPage 33:\r\n\r\nFor the first example, it would help to describe what’s been changed or highlight the differences more thoroughly.  That saves the reader from having to do a diff in their heads between the two pages.  If the differences could be in boldface, that would be great.\r\n\r\nAlso, I notice the signature for ‘add’ is slightly different between this example and the earlier one.  Maybe worth mentioning/explaining?\r\n\r\nThe rest of section 2.4 is too much detail at this point.  Plus it’s a bit of work to pick out the differences compared to the earlier examples.  The lengthy discussion and example makes me think it’s complicated.\r\n\r\nPage 37:\r\n\r\nTo me, this section seems to be showing how powerful the type system is and how you can get all kinds of different behavior for subclassing, self, etc.  It’s too much.  I would suggest taking examples from Java and C++ classes/objects and showing how to create equivalent constructs in OCaml—more of a cookbook approach.  It seems to me there are a huge number of things you can do with the type system, of which only a few are really useful.  If you’re writing a program with classes and objects, you probably want them all to have similar behavior with regards to subclassing, self, etc. just for your own sanity.\r\n\r\nPage 39:\r\n\r\nThe first example (with “new point;;” and “new point 7;;”) is confusing.  In the latter, “new point” is done first, then the resulting function is called with an argument of 7?  Then seems to go against the grain of OCaml expressions and is worthy of explanation.  “new” is a keyword, right?\r\n\r\nPage 40:\r\n\r\n“let minmax x y =”\r\n\r\nThis is contrived example.  No one would write this in real life.  Would be better to have a realistic example.  Also using more lines for the example with better indentation would help readability.\r\n\r\n\r\nPage 41:\r\n\r\n“can send messages to self”  This is confusing.  I think what’s meant is that it’s possible to refer to methods and variables that are part of the object.  I’m vaguely aware of an object metaphor based on messages, but it seems to me OCaml does not actually create messages.\r\n\r\nPage 42:\r\n\r\n“Virtual methods”  Could mention that these are called abstract methods in Java.  C++ has virtual methods but I think the concept is slightly different.\r\n\r\nI’ll stop here.  Enough for now.\r\n\r\n\r\nScoping?\r\nFlow of control (and loops, etc.)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7677\n**Reporter:** @dbuenzli\n**Status:** acknowledged (set by @xavierleroy on 2017-11-26T16:25:09Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.06.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Monitored by:** @dbuenzli @Yakobowski\n\n## Bug description\n\nThe release notes of 4.04.0 point to \r\n\r\n https://github.com/ocaml/ocaml/commit/da56cf6dfdc13c09905c2e07f1d4849c8346eec8\r\n\r\nas explaining that. However it seems that part of this work was invalidated by: \r\n\r\nhttps://github.com/ocaml/ocaml/pull/761\r\n\r\nand nowadays trying to use `ocamlc -o DEST -c file.c` results in the following error: \r\n\r\n  Options -c and -o are incompatible when compiling C files\r\n\r\nIt seems build systems using ocaml are doomed for life to need to move the produced `file.o` manually from the `cwd` to the desired destination directory.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7655\n**Reporter:** @mmottl\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-14T23:43:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche @mmottl\n\n## Bug description\n\nThe manual does not seem to specify the behavior of external function declarations with the [@@noalloc] attribute if both a byte and native code entry point are declared.  Though one would typically expect both entry points to have the same allocation behavior, this is eminently not the case when the function also declares that it returns unboxed values.\r\n\r\nE.g. many numeric functions in Pervasives return unboxed doubles, which have to be explicitly allocated for byte code but not for native code.  The functions are nevertheless declared with [@@noalloc].  I guess the byte code interpreter always ignores this attribute, otherwise the current Pervasives implementation would not be safe.\r\n\r\nI think the expected behavior of [@@noalloc] with byte and native code should be documented in the C-interface section of the manual.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7647\n**Reporter:** @yawaramin\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-10-08T16:01:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nThe OCaml readme section 'Keeping in Touch with the Caml Community' mentions the ocaml.org website at the end of the section, and doesn't mention the discuss.ocaml.org forum at all. These two resources should be at the top of the section so users can immediately access them, and the older fora should be mentioned later.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7627\n**Reporter:** furuse\n**Assigned to:** @lpw25\n**Status:** resolved (set by @gasche on 2017-09-15T09:16:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n\n## Bug description\n\n- Resurrect tabulation boxes in module Format. Rewrite/extend documentation\r\n  of tabulation boxes.\r\n\r\nThis changes the signature of Format and several applications which improve Format by themselves such as spotlib and omake fail to compile in 4.06.0+trunk.\r\n\r\nThe changes themselves are ok but please mark it as a breaking change.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7613\n**Reporter:** coventry\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-04-01T14:04:53Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Fixed in version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nCurrently this section: https://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec241\r\n\r\nThe \"and redundancy\" in the title makes it sound like refutation cases are something defined elsewhere, and have some relationship to GADTs via redundancy. The fact that redundancy isn't mentioned anywhere in the section is also confusing -- I think it means branches of a pattern match which are redundant due to being untypable. \"which are both untypable\" would be clarified by adding \"because deep expects a [char t]\".\r\n\r\nMy confusion was cleared up by https://discuss.ocaml.org/t/matching-incompatible-gadt-constructors/682 , FWIW. I think it's much clearer.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7604\n**Reporter:** miod\n**Assigned to:** @Octachron\n**Status:** resolved (set by @gasche on 2017-08-16T11:20:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.05.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\npdf generated documentation for module Ephemeron has a duplicated sentence, and a word gets omitted, which causes a sentence to lose its meaning.\r\n\r\nSuggested fix is attached.\n\n## File attachments\n\n- [ephemeron.mli.diff](https://gist.githubusercontent.com/vicuna/5fa86b62489ad3d560273e0074a81822/raw/43b2b366c16ac95d976151ade8245ce6152d9e39/ephemeron.mli.diff)\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 7600\n**Reporter:** @gasche\n**Status:** acknowledged (set by @xavierleroy on 2017-09-30T09:06:22Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Version:** 4.06.0 +dev/beta1/beta2/rc1\n**Target version:** later\n**Category:** documentation\n**Related to:** #7599\n\n## Bug description\n\nThere is documentation about the bootstrap process in two places:\r\n\r\n- in INSTALL.adoc#bootstrap, there are accessible explanations on what a bootstrap from a working compiler does\r\n- in Makefile, the \"hard bootstrap how-to\" explains how to do bootstrap across changes that break stuff (and thus require a bootstrap)\r\n\r\nTo my knowledge there is no public description of when to bootstrap, and of the commit process around a bootstrap. (I believe both changed in the last couple years, with the primitive stuff requiring less bootstraps and the consensus to separate bootstrap commits from the rest.)\n\n## Additional information\n\nThis is related to #7599 (documentation for magic number updates) given that documenting the commit process around magic numbers requires being able to explain the bootstrap part.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7599\n**Reporter:** @gasche\n**Status:** acknowledged (set by @xavierleroy on 2017-09-21T08:32:40Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #7598 #7600\n\n## Bug description\n\nCurrently external contributors may not know about magic numbers, when to update them, and what is the process to update them (in particular, I believe that a bootstrap is needed?).\r\n\r\nThis could be explained in comments in utils/config.mlp (I like having documentation close to the code) or maybe in utils/HACKING.adoc.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7588\n**Reporter:** zozozo\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-08-22T08:27:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nMentionning the existence of the Format.pp_{set,get}_formatter_out_functions in the paragraph/section talking about the formatter_out_functions, or at least mentioning it is possible to change these functions on a specific formatter and not only the standard one would greatly increase their visibility and usability.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7584\n**Reporter:** @gasche\n**Status:** acknowledged (set by @gasche on 2017-07-12T19:07:31Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** text\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nThe \"overview of the compiler\" sections of the ocamlc and ocamlopt sections of the manual give a summary of the role of various file extensions consumed or produced by the ocaml compilers\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec265\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/native.html#sec286\r\n\r\nUnfortunately, they were never updated to describe .cmt* files, so users that look at the build artifacts of a project may not know what those are.\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7551\n**Reporter:** @Octachron\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2019-02-20T05:14:22Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** feature\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Tags:** manual, junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nFollowing a recent change in the manual build, it is now possible to use the \"caml_example\" pseudo-environment in the language extension chapter of the manual.\r\n\r\nCompared to the standard verbatim environment, this pseudo-environment has the advantage to check that the written code is valid, protecting it from bitrot; it also offers the possibility of showing the result of the evaluation of toplevel phrase.\r\n\r\nTherefore, it might be a good idea to go through the language extension chapter and replace \"verbatim\" environment with eitheir \"caml_example\" or \"caml_example*\" environment whenever appropriate. The \"caml_example\" environment should be used whenever the result of the written code is illustrative, whereas the \"caml_example*\" one discards this results. Another useful environment would be the \"caml_eval\" environment which can be used to setup the right variables and definition for the \"caml_example\"'s without displaying anything.\r\n\r\nNote that sometimes the verbatim environment is used to introduce \"ocaml pseudo-code\", in these cases, keeping the verbatim environment is probably better.\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7550\r\n**Reporter:** @Octachron\r\n**Status:** acknowledged (set by @Octachron on 2017-07-11T19:44:17Z)\r\n**Resolution:** open\r\n**Priority:** low\r\n**Severity:** feature\r\n**Category:** documentation\r\n**Tags:** manual, junior_job\r\n**Monitored by:** @gasche\r\n\r\n## Bug description\r\n\r\nInjectivity is never mentioned in the manual. Consequently, there are no explanation on why the \"B\" case cannot be refuted in\r\n\r\n```ocaml\r\nmodule M: sig type 'a t end = struct type 'a t = private T end\r\nopen M\r\ntype 'a s = A: int t s | B: float t s\r\nlet f:int t s -> int = function A -> 0 | _ -> .\r\n```\r\n\r\nwhereas the apparently similar refutation case works fine:\r\n\r\n```ocaml\r\nmodule M: sig type 'a t = private T end = struct type 'a t = private T end\r\nopen M\r\ntype 'a s = A: int t s | B: float t s\r\nlet f:int t s -> int = function A -> 0\r\n```\r\n\r\nAdding a short example and explanation in the GADTs section of the language extension chapter would make the previous example less mysterious.\r\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7549\n**Reporter:** @Octachron\n**Status:** acknowledged (set by @Octachron on 2017-07-11T19:44:43Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** feature\n**Category:** documentation\n**Tags:** manual, junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nThe documentation on compiler plugins is quite scarce. A first step to a minimal documentation might be https://github.com/ocaml/ocaml/pull/1187 is a first step to a minimal documentation. A potentially interesting second step would be to add an example of plugins for every plugin hook added in the compiler, i.e. adding an example of plugin using Typemod.{Implementation,Interface}Hooks and Simplif.Hooks.\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7548\n**Reporter:** @Octachron\n**Status:** acknowledged (set by @Octachron on 2017-07-11T19:45:06Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** feature\n**Category:** documentation\n**Tags:** manual, junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nCurrently, the tutorial part of the manual takes some time to describe the pretty printing of symbolic expressions at http://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html#sec15 . However, this example uses neither the \"Printf\" nor the \"Format\" module. Since pretty printing is a major use of both modules and \"Printf\" and \"Format\" relies on a potentially surprising feature of OCaml, it would be nice to extend the existing example with a version using either \"Printf\" or \"Format\".\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7547\n**Reporter:** @Octachron\n**Status:** acknowledged (set by @Octachron on 2017-07-11T19:45:18Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** feature\n**Category:** documentation\n**Tags:** manual, junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nLazy expressions (and patterns) are only described in the language part of the manual and the \"Lazy\" module documentation. Since the existence of this feature is hard to infer from the rest of the language, it would be nice to have at least one short example of lazy expression in the tutorial part of the manual and a link to the module documenation. One possible good emplacement for this example might be a new \"Lazy expressions\" section right the after the \"Exceptions\" section (http://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html#sec13) in the core language chapter.\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 7546\n**Reporter:** @Octachron\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-09-12T07:53:07Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** feature\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nNumerous modules which are part of the compiler library appear in the manual library index at http://caml.inria.fr/pub/docs/manual-ocaml/libref.\r\n\r\nIt would help the readability of this index if\r\n\r\n- all modules had a short description\r\n- the short description of every module of the compiler-libs started with a \"Compiler-libs:\" or equivalent prefix.\r\n\r\nNote that this short description of module is extracted from the first sentence of the first documentation comment in the module \".mli\" file.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7542\n**Reporter:** toots\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2017-05-28T15:11:58Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nI was looking for the latest released version of the compiler/language and found out that:\r\n- ocaml.org references a really old 4.01 release\r\n- caml.inria.fr stops at 4.03\r\n\r\nThe only way to find a clear information was through the github release page, which listed, I believe, 4.04.1 as the latest stable release, a month and a half ago.\r\n\r\nPerhaps it's time to clean all of this and have a single, canonical entry point to list OCaml releases?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7539\n**Reporter:** prevosto\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-24T18:41:02Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nthe page\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/ocamldoc.html\r\n\r\nprovides links to ocamldoc's sources in its section on custom generators, such as e.g. http://caml.inria.fr/cgi-bin/viewvc.cgi/ocaml/version/4.04/ocamldoc/odoc_html.ml?view=markup. These links are dead. They should probably be updated to something like https://github.com/ocaml/ocaml/blob/4.04/ocamldoc/odoc_html.ml\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7530\n**Reporter:** igo_weiqi_baduk\n**Assigned to:** @damiendoligez\n**Status:** resolved (set by @Octachron on 2017-10-01T08:42:57Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.04.1\n**Category:** documentation\n\n## Bug description\n\nWill the documentation for the OCaml 4.04.1 Release be provided \r\n(as for the 4.02.1 for example) ?\r\n\r\nOr do we have to wait for the 4.05 Release ?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7507\n**Reporter:** @Armael\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-08T21:18:54Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n\n## Bug description\n\nIn stdlib/printf.mli, the documentation for the %g format states:\r\n\r\n   - [g] or [G]: convert a floating-point argument to decimal notation, in style [f] or [e], [E] (whichever is more compact).                                                                                                                                                          \r\n\r\nHowever:\r\n\r\n- [Printf.printf \"%f\" 1.] prints \"1.000000\"\r\n- [Printf.printf \"%e\" 1.] prints \"1.000000e+00\"\r\n- [Printf.printf \"%g\" 1.] prints \"1\", which corresponds to neither \"%f\" or \"%e\".\r\n\r\nThis seems to indicate that the documentation for %g is quite vague, at best.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7499\n**Reporter:** @gasche\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2017-03-03T17:14:08Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** text\n**Category:** documentation\n**Related to:** #7426\n\n## Bug description\n\nThis flambda error occurs in existing OCaml programs, where it is *not always* the sign of an erroneous use of unsafe features. This is a delicate issue and I don't know what guidance to give to users that encounter this error.\r\n\r\nThe meaning of this error, and how to diagnoze and fix the situation, should be documented in the flambda manual: https://caml.inria.fr/pub/docs/manual-ocaml/flambda.html\n\n## Additional information\n\nThis error seems occurs with Frama-C for example:\r\n  https://github.com/ocaml/opam-repository/pull/8599#issuecomment-283976536\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 7497\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-03-18T13:01:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Version:** 4.04.0\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nThis is clearly a usability improvement:\r\n\r\nWarning 57: Ambiguous or-pattern variables under guard;\r\nvariable s may match different arguments. (See manual section 8.5)\r\n\r\nHowever you then turn to http://caml.inria.fr/pub/docs/manual-ocaml/\r\nand are a bit lost where that section could be.\r\n\r\nThanks.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7462\n**Reporter:** @oandrieu\n**Assigned to:** @dra27\n**Status:** resolved (set by @alainfrisch on 2017-01-24T10:59:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nThe README.win32 file mentions that « Cygwin-generated .exe files refer to a DLL that is distributed under the GPL. Thus, these .exe files can only be distributed under a license that is compatible with the GPL. »\r\n\r\nMind that the Cygwin licence has changed since version 2.5.2 and the cygwin DLL is now licensed under the LGPLv3, with a static linking exception: https://cygwin.com/licensing.html .\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7415\n**Reporter:** william\n**Status:** resolved (set by @Octachron on 2016-12-06T22:28:46Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** 4.04.0\n**Category:** documentation\n\n## Bug description\n\nHello,\r\nin 4.04, looking at the standard library, there are many undocumented modules, or modules written with very specific language. Maybe it would be nice to document them better so that we can use them ? At least, explain the purpose of the module in understandable language, so that if we think we are concerned by that module we start to look for complementary documentation on the web. Or say it is for internal ocaml purposes and that it is unlikely to be reused. Without it I don't even know if I could benefit from the module.\r\n\r\n- Arg_helper ?\r\n\r\n- .Arith_status not mentionned in Floating-point arithmetic documentation\r\n- Ast* ? + make link to Builtin_attributes ?\r\n- Builtin_attributes : rename in Ast_builtin_attributes ?\r\n- Attr_helper : rename in Ast_attr_helper ?\r\n\r\n- Ccomp ?\r\n- Condition : to group with Thead or ThreadUnix ?\r\n- Config ?\r\n- Consistbl ?\r\n- ArrayLabels, ListLabels to be moved in StdLabels ?\r\n- MoreLabels to mark as deprecated ?\r\n- Strongly_connected_components\t?\r\n- Tbl ?\r\n- Terminfo ?\r\n\r\netc...\r\n\r\nBest regards\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7412\n**Reporter:** @edwintorok\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-02-23T23:44:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nThe documentation for Unix.single_write_substring doesn't have a since 4.02 annotation: https://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\r\nOTOH Buffer.add_subbytes has the correct annotation\n\n## Steps to reproduce\n\nView https://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\n\n## Additional information\n\nWhile viewing https://github.com/dbuenzli/jsonm/commit/ba629f79317c6e97a1caa65139583a8cfd461397#diff-48d1573a3f8c418ee1ac7b85e6a0ac30L46 I thought that Unix.single_write_substring could be used instead of the Bytes.unsafe_to_string conversion, however since that library targets 4.01 that function is not available.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7394\n**Reporter:** bartjacobs\n**Status:** resolved (set by @xavierleroy on 2017-02-16T09:53:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n**Related to:** #7392\n\n## Bug description\n\nThe new warning 52 documentation (Sec. 8.5.1, under Batch compilation) encourages users to catch Failure _ to detect a particular failure mode for a function they're calling. That's a bad idea, because it's too easy for the implementors of that function to inadvertently propagate a Failure, raised for another reason, from a nested call. In other words, it's a bad idea because you don't know that a Failure you catch was raised for the reason you think.\r\n\r\nIn fact, typically the documentation for standard library functions that throw Failure does not even explicitly state that the function will throw Failure *only* for the reasons stated. (See my #7392 on this.)\r\n\r\nBut even if the docs did explicitly state that, it would still be problematic because it would be hard to ensure that the implementations actually conform to the specs (and continue to do so as code evolves).\r\n\r\nI think the fix is to use functions that indicate specific conditions that users may want to detect as a special return value (e.g. None), enabled by a richer return type, e.g. 'a option instead of 'a, instead of throwing Failure.\r\n\r\nAn alternative but less advisable fix is to use functions that raise a special-purpose exception, instead of the generic Failure. However, this approach still suffers from the (smaller) risk of the exception being propagated inadvertently from a nested call.\r\n\r\nI propose that the warning 52 documentation be updated.\r\n\r\n(I also propose that variants of the standard library functions that throw Failure for specific conditions that users want to detect be provided that allow detecting such conditions through a special return value. But (just to pick one home for each work item) I propose that this latter proposal be tracked through #7392 instead of this one.)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7392\n**Reporter:** bartjacobs\n**Status:** resolved (set by @xavierleroy on 2016-12-07T18:14:17Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** documentation\n**Related to:** #7394\n**Monitored by:** @gasche\n\n## Bug description\n\nSince #254 (Warning on fragile literals in constructor argument patterns) (released in OCaml 4.03), the documentation for int_of_string, which says \"Raise Failure \"int_of_string\" if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\", is inconsistent with the OCaml implementation (specifically, file typing/predef.ml), which declares exception Failure with the warn_on_literal_pattern attribute. The documentation for int_of_string is pretty unequivocal that the behavior of int_of_string in case of malformed input is exactly to raise the exception Failure \"int_of_string\". The warn_on_literal_pattern attribute, on the other hand, suggests that the value of the argument of Failure should not be relied upon, i.e. that instead of throwing Failure \"int_of_string\", int_of_string might in a future OCaml release throw something else in case of malformed input.\r\n\r\nThis is problematic for someone trying to write code that uses int_of_string and that does something other than propagating the exception in case of malformed input.\r\n\r\nThe warning 52 documentation (Sec. 8.5.1, in the Batch compilation chapter) suggests that this person should simply catch any exception that matches Failure _.\r\n\r\nHowever, this raises the following question: What if int_of_string throws a Failure exception for a reason other than malformed input? Perhaps, for int_of_string this is a rather far-fetched scenario, but (without looking at the source code) it is not entirely inconceivable. And for some of the other similar cases, such as int_of_big_int, with presumably a more complex implementation with more failure modes, this is somewhat more conceivable still. And in any case, the documentation for these functions does not state that this will not happen.\r\n\r\nClient code should propagate such an exception instead of treating it as if it indicated malformed input.\r\n\r\nTo fix this problem in a backward-compatible way, I suggest to update the documentation for int_of_string and similar functions (including int_of_big_int), by adding the sentence \"Do not raise a Failure for any other reason.\" Another way to put it is to replace \"Raise Failure \"int_of_string\" if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\" by \"Raise Failure if (and only if) the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.\" (while of course continuing to raise only Failure \"int_of_string\" for backward compatibility).\r\n\r\n(Of course, one should also check that the current implementations of these functions do indeed not throw Failure for other reasons!)\r\n\r\n(Note: a (much less severe) lack of clarity in the documentation of int_of_string and similar functions existed already before OCaml 4.03: it did not explicitly guarantee that it would not throw Failure \"int_of_string\" for a reason other than malformed input. To see how this is not entirely inconceivable, one could vaguely imagine an implementation that would in some cases directly or indirectly perform a nested int_of_string call with some other input. Again, this is more conceivable with functions that are more complex than int_of_string. But again, the main argument is not about whether it is conceivable, but about whether the documentation should be explicit about it, which seems a clear \"yes\" since people do rely on it and furthermore it's not hard to fix.)\r\n\r\n((Even more parenthesized note: for any function with a non-trivial implementation that involves nested function calls, it is not actually easy to guarantee that the function will *not* throw any given exception, especially if the exception is a generic one such as Failure. This suggests that attaching any postcondition (other than \"true\") to a function raising an exception is dubious, and instead the function's return type should probably be enriched (from 'a to 'a option or 'a + string) so that the exceptional condition can be indicated as a special return value. A client who wishes to ignore the exceptional case can easily turn the special return value into an exception using a partial match (or a helper function that raises an appropriate exception). Note that this is pretty much how error handling is done in Erlang. So, perhaps a better solution would be to introduce a new function, perhaps called int_option_of_string, that returns an int option.))\n\n## Additional information\n\n(I put Severity \"minor\" because this issue is unlikely to lead to many problems at run time, but on the other hand I think this is currently impacting many people who care about writing clearly correct code.)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7387\n**Reporter:** fbalestrieri\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-11-02T14:17:22Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Tags:** github\n**Monitored by:** @gasche\n\n## Bug description\n\nThe keyword \"nonrec\" is missing from the index of keywords.\n\n## Steps to reproduce\n\nsearch for \"nonrec\" at:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual045.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7375\n**Reporter:** @johnwhitington\n**Status:** acknowledged (set by @gasche on 2016-09-28T12:18:47Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n\n## Bug description\n\nThe following code in a try...with block:\r\n\r\n     | Exit as e ->\r\n         if !debug then raise e;\r\n         exit 0\r\n\r\ngives:\r\n\r\nRaised at file \"eval.ml\", line 615, characters 27-31\r\nCalled from file \"ocamli.ml\", line 232, characters 10-25\r\nCalled from file \"ocamli.ml\", line 292, characters 21-26\r\nRe-raised at file \"ocamli.ml\", line 300, characters 30-31\r\nCalled from file \"ocamli.ml\", line 307, characters 31-36\r\n\r\nBut the original code, which ought to do the same:\r\n\r\n     | Exit ->\r\n         if !debug then raise Exit;\r\n         exit 0\r\n\r\ngives just:\r\n\r\nRaised at file \"ocamli.ml\", line 300, characters 30-34\r\nCalled from file \"ocamli.ml\", line 307, characters 31-36\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7371\n**Reporter:** furuse\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2016-10-11T08:50:44Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Related to:** #6956\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nProgram with external declaration only mli file fail to link since 4.03.0.  I guess this is due to the fix of #4166 and #6956.\r\n\r\nThe reference manual section 19.6 shows a complete example of adding C primitives in an mli only module but this is no longer working with 4.03.0.\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 7363\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-10-05T20:57:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nA bit of an uninteresting work and issue but it seems that in the stdlib headers in comments start at level 6 which means that subheaders are 7 which is a div with class .h7 since h6 is the last html header tag you can get. TBH I find that a bit ridiculous.\r\n\r\nMany (most ?) libraries out there simply start at {1 } which is the natural thing to do when you write your comments in an mli file. \r\n\r\nIn my stylesheets I restart the style at h6 so that they look like h1 but I think that the stdlib should be changed to start at 1 so that sub-heading (now fake 7, after h2) can benefit of semantic markup.\r\n\r\nHere's an example of a level 7 header and it corresponding div in ocamldoc generated documentation.\r\n\r\nhttps://github.com/ocaml/ocaml/blob/trunk/stdlib/scanf.mli#L20\r\nhttp://docs.mirage.io/ocaml/Scanf.html#7_Functionalinputwithformatstrings\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7362\n**Reporter:** @dbuenzli\n**Status:** closed (set by @damiendoligez on 2016-10-25T15:03:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** @gasche @hcarty @dbuenzli\n\n## Bug description\n\nIn the opkg project we automatically generate cross-linked API documentation for installed packages. The way packages are supposed to indicate what should be present in the generated API documentation is by installing mli and cmi (for ocamldoc generation) and cmti (for odoc generation) files for the modules that constitutes your API and you would like to see documented (more control through the package meta-data file may be provided in the future though). \r\n\r\nWhile the ocamldoc path renders ocaml's package quite well with this convention (see http://docs.mirage.io/ocaml/index.html). It fails quite badly on the odoc path (see http://docs.mirage.io/odoc/ocaml/index.html). \r\n\r\nThere are two reasons.  \r\n\r\n1. A lot of cmti files are installed for modules that are not part of the public API (at least their mli is not installed); those are mainly files in the compiler-libs/ directory. \r\n\r\n2. It seems that the cmti files for otherlibs are not installed, e.g. bigarray.cmti, str.cmti, unix.cmti, etc. are all missing.\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 7356\r\n**Reporter:** @yallop\r\n**Status:** acknowledged (set by @damiendoligez on 2016-09-28T11:50:22Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** feature\r\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\r\n**Category:** documentation\r\n**Monitored by:** braibant @dbuenzli\r\n\r\n## Bug description\r\n\r\nflambda's optimisations can change whether a value is finalisable.  For example, the following program executes without error when compiled with 4.04.0+beta1, but exits with an exception (Invalid_argument(\"Gc.finalise\")) when compiled with 4.04.0+beta1+flambda\r\n\r\n```ocaml\r\n   let f x = Gc.finalise ignore (fun () -> x; ())\r\n   let () = f ()\r\n```\r\n\r\nA section on finalisability would fit well in the flambda chapter alongside the sections about inhibition of optimisation (20.14) and about unsafe operations (20.15).\r\n\r\n    http://caml.inria.fr/pub/docs/manual-ocaml/flambda.html#inhibition\r\n    http://caml.inria.fr/pub/docs/manual-ocaml/flambda.html#sec507\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7355\n**Reporter:** @yallop\n**Status:** closed (set by @damiendoligez on 2016-09-28T11:46:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** braibant @dbuenzli\n\n## Bug description\n\nThe Gc module documentation says\r\n\r\n   Note that values of types [float] and ['a lazy] (for any ['a]) are\r\n   sometimes allocated and sometimes not, so finalising them is unsafe,\r\n   and [finalise] will also raise [Invalid_argument] for them.\r\n\r\n   https://github.com/ocaml/ocaml/blob/5c4c41ba/stdlib/gc.mli#L296-L298\r\n\r\nHowever, passing a lazy value to Gc.finalise does not always raise an exception:\r\n\r\n   # Gc.finalise ignore (lazy ignore);;\r\n   - : unit = ()\r\n\r\n[There's also a second small bug above: the documentation has \"'a lazy\" where it should have \"'a Lazy.t\"]\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7322\n**Reporter:** junsli\n**Status:** closed (set by @damiendoligez on 2016-09-27T14:26:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nCall site of loop' seems incorrect.\r\n\r\nlet f x =\r\n  let rec loop' xs inv_0 inv_1 =\r\n    match xs with\r\n    | [] -> inv_0 + inv_1\r\n    | x::xs -> x + loop2' xs inv_0 inv_1\r\n  and loop2' ys inv_0 inv_1 =\r\n    match ys with\r\n    | [] -> 4\r\n    | y::ys -> y - loop' ys inv_0 inv_1\r\n  in\r\n  Printf.printf \"%d\\n\" (loop' (x + 42) (x + 43) [1; 2; 3])\r\n\r\nIf this phase doesn't change the order of arguments, the call is supposed to be\r\n\r\nloop' [1; 2; 3] (x + 42) (x + 43)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7311\n**Reporter:** @gasche\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2016-11-03T13:25:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Related to:** #7007\n\n## Bug description\n\nThe file ocaml_compiler_internal_params introduced by \r\n\r\n  https://github.com/ocaml/ocaml/pull/428\r\n\r\nis undocumented. Not knowing about it can make it difficult for users to properly debug an OCaml environment to understand where some options are coming from.\n\n## Additional information\n\nDocumentation should be added in the chapter \"Batch compilation (ocamlc)\", section \"Options\" (manual/manual/cmds/comp.etex), and also in \"Native-code compilation\" (manual/manual/cmds/native.etex).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7288\n**Reporter:** tormen\n**Status:** closed (set by @damiendoligez on 2016-09-27T14:21:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n\n## Bug description\n\nAs Ocaml tends to be MINMAL in terms of functions in the std lib, I was a bit confused that there is List.flatten and List.concat.\r\n\r\nThis plus the fact that there was not ONLY written \"Same as concat\" for flatten made me wonder if they are in deed really 100% identical.\r\n\r\nTo effectively prevent such confusion I propose to simply remove the \r\n\" Not tail-recursive (length of the argument + length of the longest sub-list).\"\r\nand ONLY keep the sentence \"Same as concat.\" :)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7273\n**Reporter:** MonsieurPi\n**Assigned to:** @gasche\n**Status:** closed (set by @gasche on 2016-06-15T18:54:54Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Category:** documentation\n**Monitored by:** MonsieurPi\n\n## Bug description\n\nThe operator (^) disappeared from the String documentation and in the Bytes documentation we can find the function cat but no mention to (^). \r\n\r\nThis is strange because I kind of remember reading in the documentation that the use of (^) was not adviced but since it still exists, it would be great to have it documented. \r\n\r\nFor a beginner in OCaml, reading the module documentation makes him/her think that there is no other way than String.concat \"\" [s1; s2] to concatenate s1 and s2.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7272\n**Reporter:** olh\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-02-18T19:59:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Linux\n**OS:** openSUSE\n**OS Version:** Tumbleweed\n**Version:** 4.03.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.04.0\n**Category:** documentation\n**Related to:** #6341\n**Monitored by:** @gasche\n\n## Bug description\n\nEach module has an html file, like libref/Arg.html. In this file there a link to the types, like \"Module Arg\" which links to libref/type_Arg.html.\r\nIn 4.02.3 the html code has several [br] tags to force a newline.\r\nIn 4.03 these [br] tags are missing.\r\n\r\nThis happens in all created files by ocamldoc.\r\n\r\nIts appearently broken upstream as well.\n\n## Steps to reproduce\n\nCompare these two URLs:\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/type_Arg.html\r\nvs.\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.03/libref/type_Arg.html\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7254\r\n**Reporter:** @hannesm\r\n**Assigned to:** @mshinwell\r\n**Status:** resolved (set by @mshinwell on 2017-03-10T14:56:00Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** text\r\n**Platform:** UNIX\r\n**OS:** FreeBSD\r\n**OS Version:** CURRENT\r\n**Version:** 4.03.0\r\n**Category:** documentation\r\n**Monitored by:** @diml @hcarty\r\n\r\n## Bug description\r\n\r\nexecuting ./ocamlnat leads to exception:\r\n\r\n        OCaml version 4.03.1+dev0-2016-04-25 - native toplevel\r\n\r\nFatal error: exception Cmi_format.Error(_)\r\n\r\n## Steps to reproduce\r\n\r\ncheck out the 4.03 branch (525799bfb56cb58d41f4a2f46ad183c70493ae60);\r\n./configure ; gmake world.opt ; gmake ocamlnat\r\n./ocamlnat\r\n\r\n## Additional information\r\n\r\nI also tried trunk/master, and got the same result (a crashing ocamlnat)\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7247\n**Reporter:** rbonichon\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2018-09-12T08:00:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.03.0\n**Fixed in version:** 4.08.0+dev/beta1/beta2\n**Category:** documentation\n**Related to:** #7825\n\n## Bug description\n\nIt seems as if too many modules were exported for the documentation of 4.03 of the new release. I am not sure it qualifies as a bug but it does not feel right to me.\r\n\r\nComparing\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/index.html\r\n\r\nwith\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.03/libref/\r\n\r\ngives an idea of the differences.\r\n\r\nFor example, I am not sure one wants Identifiable or Syntaxerr to be documented in libref.\r\n\r\nIf they indeed must be exported, it might be better to show these modules on another dedicated page.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7245\n**Reporter:** william\n**Assigned to:** @gasche\n**Status:** resolved (set by @mshinwell on 2016-09-08T09:19:12Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Target version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Monitored by:** @hcarty\n\n## Bug description\n\nIt would be nice to replace \"52 Fragile constant pattern\" by \"52 Fragile constant pattern (see detailed section below)\"\r\n\r\nAlso, I would replace the following explanations :\r\n\r\n\"If your code raises this warning, you should not change the way you test for the specific string to avoid the warning (for example using a string equality inside the right-hand-side instead of a literal pattern), as your code would remain fragile. You should instead enlarge the scope of the pattern by matching on all possible values. This may require some care: if the scrutinee may return several different cases of the same pattern, or raise distinct instances of the same exception, you may need to modify your code to separate those several cases.\"\r\n\r\n\r\nBy this :\r\nIf your code raises this warning, you should not change the way you test for the specific string to avoid the warning (for example using a string equality inside the right-hand-side instead of a literal pattern), as your code would remain fragile. You should instead enlarge the scope of the pattern by matching on all possible values, such as in this example :\r\n\r\nlet warning = function\r\n  | Foo _ -> 0\r\n  | _ -> 1\r\n\r\nThis may require some care: if the scrutinee may return several different cases of the same pattern, or raise distinct instances of the same exception, you may need to modify your code to separate those several cases. For example [...]\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7236\r\n**Reporter:** @gasche\r\n**Status:** acknowledged (set by @gasche on 2016-04-20T15:35:52Z)\r\n**Resolution:** open\r\n**Priority:** low\r\n**Severity:** feature\r\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\r\n**Category:** documentation\r\n**Monitored by:** runhang @hcarty\r\n\r\n## Bug description\r\n\r\nThere are many tips that we could provide to our users about how to use the bug tracker, for example in the CONTRIBUTING.md document. Some useful information would be:\r\n\r\n- how to search for similar bugs (I use google \"site:caml.inria.fr/mantis\" and it's surprisingly effective)\r\n- how to choose a reporting category or Target version\r\n- how to contribute if they want to help triaging:\r\n  -- suggesting \"related\" bugs\r\n  -- how to filter for bugs to solve or triage before the next release,\r\n     what kind of triaging works helps accelerate the release process\r\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7205\n**Reporter:** william\n**Assigned to:** @alainfrisch\n**Status:** resolved (set by @alainfrisch on 2017-02-24T14:57:37Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** tweak\n**Platform:** linux\n**OS:** debian\n**OS Version:** 8\n**Version:** 4.02.3\n**Target version:** undecided\n**Category:** documentation\n\n## Bug description\n\nHello,\r\nList.map works (on my platform) with a list length limit of 131033 elements. \r\n\r\n* List.map documentation should say that above this limit, there is a \"Stack Overflow\" exception (and for beginners it could be nice to indicate to use above this limit the \"List.rev_map\" function)\r\n\r\n* Or List.map documentation should refer to some other documentation parts explaining the limits of non tail recursive function, and wath is the limit of the \"Stack\"\r\n\r\n* same problem with recursive functions, it seems to be limited to 262065 calls\r\n\r\nBest regards\n\n## Steps to reproduce\n\nlet rec make_n n = if n = 0 then [] else n::(make_n (n-1));;\r\nlet test i = \r\n  let lst = make_n i in\r\n  Printf.printf \"ok\\n%!\";\r\n  List.map (fun i -> 0) lst;;\r\n\r\ntest 131033;;\r\ntest 131034;;\r\ntest 262065;; (* ok still printed *)\r\ntest 262066;; (* ok not printed any more *)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7195\n**Reporter:** MonsieurPi\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:08Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** text\n**Version:** 4.02.3\n**Category:** documentation\n\n## Bug description\n\nsubtraction instead of substraction :\r\n\r\nval sub : t -> t -> t\r\n\r\nSubtraction\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7179\r\n**Reporter:** goswin\r\n**Status:** acknowledged (set by @damiendoligez on 2016-03-14T13:34:46Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Category:** documentation\r\n**Monitored by:** @jmeber\r\n\r\n## Bug description\r\n\r\nWhen an ocaml function is used as callback from C code and the last thing the callback does is call a C stub returning unit and the return register happens to contain ((x & 3) == 2) then this is taken as an exception. When caml_callback() is used this carshes and when caml_callback_exn is garbage is returned from Extract_exception().\r\n\r\nOcaml should sanitize the return register after calling the C stub.\r\n\r\n## Steps to reproduce\r\n\r\n% make\r\nocamlopt -g -c -o main.cmx main.ml\r\ngcc -O2 -W -Wall -g -c -o stubs.o stubs.c\r\nocamlopt -o test main.cmx stubs.o\r\n./test\r\ntest(0x61ea78)\r\nfail\r\ntest: callback got exception 0x0\r\n\r\n==> Makefile <==\r\n        ocamlopt -o $@ $+\r\n\r\n%.cmx: %.ml\r\n        ocamlopt -g -c -o $@ $<\r\n\r\n%.o: %.c\r\n        gcc -O2 -W -Wall -g -c -o $@ $<\r\n\r\nclean:\r\n        rm -f test *.o *.cmx *.cmi *~\r\n\r\n==> main.ml <==\r\nexternal fail : unit -> unit = \"fail\"\r\nexternal test : (unit -> unit) -> unit = \"test\"\r\n\r\nlet callback () =\r\n  fail ()\r\n   \r\nlet () =\r\n  test callback\r\n\r\n\r\n==> stubs.c <==\r\n    CAMLparam1(callback);\r\n    CAMLlocal1(res);\r\n    printf(\"%s(0x%lx)\\n\", __PRETTY_FUNCTION__, callback);\r\n    res = caml_callback_exn(callback, Val_unit);\r\n    if (Is_exception_result(res)) {\r\n        res = Extract_exception(res);\r\n        fprintf(stderr, \"%s: callback got exception 0x%lx\\n\", __PRETTY_FUNCTION__, res);\r\n    }\r\n    CAMLreturn0;\r\n}\r\n\r\n## Additional information\r\n\r\nhttps://github.com/mrvn/ocam-problems/tree/false-exception\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7174\n**Reporter:** MonsieurPi\n**Status:** resolved (set by @xavierleroy on 2017-02-17T15:13:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n\n## Bug description\n\nI found a \"bug\" in the Graphics library in OCaml :\r\n\r\nIf you write \r\n\r\n  let () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33567|];\r\n    ignore (read_key ())\r\n\r\nNo problem.\r\n\r\nBut if you write \r\n\r\n  let () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33568|];\r\n    ignore (read_key ())\r\n\r\n(I just changed 33567 to 33568.)\r\n\r\nYou have no line.\r\n\r\nStrange, no ? \r\n\r\nWell, actually, no. The coordinates are coded on 16 bits signed integers which corresponds to a range between [-32768, 32767] and if you add to it the size of my graph (here, 800) + 1 it goes out (which corresponds to 33568)\r\n\r\nThis behaviour is normal but the documentation of Graphics should add a remark about it because in the OCaml manual (http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual040.html) it's specified that \"Drawing is clipped to the screen.\"\r\n\r\nRegards\n\n## Steps to reproduce\n\nlet () = \r\n    let open Graphics in\r\n    open_graph \" 800x800\";\r\n    draw_segments [|200,0,200,33568|];\r\n    ignore (read_key ())\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7146\n**Reporter:** @Octachron\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:52Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n\n## Bug description\n\nCurrently, the manual tools and examples are build using the system ocaml\r\ninstallation. This can lead to subtle bugs in the manual examples when the\r\nsystem and in-tree compiler are out-of-sync: in particular, uses of newly deprecated function become harder to spot.\r\n\r\nFor the specific case of the in-manual examples, it is relatively easy to fix the problem by modifying the manual's makefiles. However, it might make sense to factorize this work with the test subtree which has already solved the very same issues.\r\n\r\nUnfortunately, I am not sure how to do that in a portable way.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7109\n**Reporter:** @edwintorok\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/Bigarray.html#TYPEkind vs\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.02/libref/Bigarray.html#TYPEkind\r\n\r\nIn 4.02 the comment seems to be associated with the last variant, and not the type as the whole, and the documentation is rendered in an unpleasant way\n\n## Additional information\n\nFrom #ocaml:\r\noctachron: edwin, as an information complement, the problem is with the new association rule for docstring comment on constructors\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7105\n**Reporter:** fdsouthern\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Monitored by:** @hcarty\n\n## Bug description\n\nThe manual section '1.8 Pretty-Printing and parsing' <http://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html#sec15> is missing any content on parsing.  There is such content in the manual for 4.01 <http://caml.inria.fr/pub/docs/manual-ocaml-4.01/coreexamples.html#sec15>.  I assume it was removed due to the decoupling of Camlp4.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7096\n**Reporter:** pierpa\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** any\n**OS:** any\n**OS Version:** any\n**Version:** 4.02.3\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nFor an example look in:\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/libref/Big_int.html\r\n\r\nthe doc for is_int_big_int\n\n## Additional information\n\nChecked with Chrome and FireFox.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7094\n**Reporter:** @gasche\n**Assigned to:** @gasche\n**Status:** resolved (set by @gasche on 2016-04-19T16:17:30Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Monitored by:** @hcarty\n\n## Bug description\n\nThere is currently no documentation of compiler warnings and errors. The best we have is $(ocamlc -warn-help), and\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec251\r\n\r\nwhich lists the -warn-help output. This is not enough as it does not list compiler errors (only a handful of them are listed as \"Common errors\" in a section below on the same page) and because this is probably not the right place to give longer explanations for warnings.\n\n## Additional information\n\nThe motivation for this PR is that people requested that the warning text for the new warning 57 (ambiguous pattern variables used in guard) be made shorter, see https://github.com/ocaml/ocaml/pull/317 . The idea was to keep a short warning text, and redirect users for the documentation to actually understand the warning (which takes a bit more explaining than some others), but there is actually no good place for this documentation!\r\n\r\nAfter discussing the matter with Damien, I decided to set the target for 4.03. It is not very hard (and external contributions to do so are warmly welcome) to just take the current `-warn-help` output and put it in a dedicated section of the manual (we can discuss where exactly), and add more content only on warnings that need clarification (typically warning 57, but we have the text written in the GPRs and in code comments). So this should be fixable in time for the 4.03 release.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7092\n**Reporter:** @alainfrisch\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThis ticket is to check that at least new syntactic forms are documented in 4.03 (from the \"Language features\" section of the Changes file):\r\n\r\n=================================================================\r\n\r\nDONE:\r\n\r\n - Inlined records\r\n\r\n - \"_ t\" as a short-hand for \"(_, ... _) t\".\r\n\r\n - \"(type a b)\" as syntactic sugar for \"(type a) (type b)\".\r\n\r\n - Short functor syntax \"S -> T\".\r\n\r\n - Field punning in object copying expressions \"{< x = x; y = y >}\".\r\n\r\n - Type annotations on record fields.\r\n\r\n - Type annotations before the \"->\" in \"fun <args> -> <expr>\".\r\n\r\n - Hexadecimal notation for fp literals.\r\n\r\n- Unreachable cases (\"pat -> .\")\r\n\r\n- #5780: Strange type variable names in error messages (GADTs)\r\n  (only made the names more informative)\r\n\r\n- #112: octal escape sequences for char and string literals\r\n\r\n- #234: Allow ``[]`` as a user-defined constructor\r\n  https://github.com/ocaml/ocaml/pull/234 \r\n\r\n\r\n- immediate attribute: commit 461b2597c2be8be8032692e4c74ec9721d120b56\r\n\r\n- #6113: Add descriptions to directives, and display them via #help: commits 213f51a77b141593117c924e3a7f275aae22a3ef and 58c6347420233bae6296acab70653142ffec0c34\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 7087\n**Reporter:** @Octachron\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:11Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** text\n**Category:** documentation\n**Duplicate of:** #7075\n\n## Bug description\n\nIn trunk version, the documentation for the Scanf module ends up being completely scrambled. Section titles and entire subsections are repeated multiple times. For instance, I count no less than 8 repetitions of the \"Introduction\" section title. The pervasives module suffers from a less acute form of this problem. The problem seems to stem from the presence of consecutive sequences of separated documentation comments. Merging together these documentation comments remove the stuttering.\r\n\r\nMoreover, there is also redoubled section title in the following module documentation\r\n  * Ast_mapper\r\n  * Bigarray\r\n  * Random\r\nand some empty section titles in\r\n  * Parsing\r\n  * Lexing\n\n## Steps to reproduce\n\nBuild the ocaml manual from trunk and try to read the Stdlib/Scanf section.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7084\n**Reporter:** junsli\n**Status:** acknowledged (set by @gasche on 2015-12-11T05:57:07Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.3\n**Category:** documentation\n**Has duplicate:** #7187\n**Related to:** #5901\n\n## Bug description\n\nTake this example in foo.ml\r\n\r\n(** This comments should associate with function xxx\r\n    @version 1\r\n    @param x {!class1:my_class111}\r\n    @param1 y {!class:my_class123}}\r\n    *)\r\nlet xxx x y = x - y\r\n\r\nIt reports the following parsing error:\r\nFile \"foo.ml\", line 0, character 23:\r\ny {!class:my_class123}}\r\n                       ^\r\n1 error(s) encountered\r\n\r\n\"line 0\" is incorrect, as ocamldoc extracts each comment block (and inner element) out and parses them separately as strings, which causes the global location information missing.\r\n\r\n(See also issue #5901, where the location info is not provided in the warning. The two bugs suffers from the same design issue, and probably shares the same solution)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7075\n**Reporter:** @johnwhitington\n**Assigned to:** @lpw25\n**Status:** closed (set by @damiendoligez on 2016-02-03T16:19:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Has duplicate:** #7087\n**Related to:** #6964\n\n## Bug description\n\nFor example, in Pervasives. See attached screenshot.\r\n\r\nThe problem is not in the source file. The problem does not occur in 4.02.3.\n\n## File attachments\n\n- [docbug.png](https://gist.githubusercontent.com/vicuna/7e7ea190c06451dc6cb875aa6b2366e2/raw/04eba7895418df4b8d5a9f3ce0e31ca09f14d5e2/docbug.png)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7062\n**Reporter:** @damiendoligez\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.3\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nThe manual documents some options of `ocamldep` but not all. The missing ones are:\r\n\r\n    -absname\r\n    -all\r\n    -impl\r\n    -intf\r\n    -one-line\r\n    -open\r\n    -ppx\r\n    -sort\r\n\r\nLikewise, the man page fails to mention:\r\n\r\n    -all\r\n    -impl\r\n    -intf\r\n    -one-line\r\n    -open\r\n    -sort\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7047\n**Reporter:** @gasche\n**Status:** closed (set by @alainfrisch on 2015-11-30T08:20:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Related to:** #6895\n**Monitored by:** @hcarty\n\n## Bug description\n\nAt the developer meeting yesterday, Alain proposed to integrate the OCaml manual\r\n\r\n  https://github.com/ocaml/ocaml-manual\r\n\r\ninto the main OCaml development repository\r\n\r\n  https://github.com/ocaml/ocaml\r\n\r\nand streamline the build system in the process.\n\n## Additional information\n\nFrançois Bobot seemed willing to lend a hand in preserving the commit history of the manual during the migration.\r\n\r\nWe also discussed specific targets to build ocamldoc output for the .mli of commented files in some part of the distribution; I think that for this we could extend the \"html_doc\" target of the Makefile (contributed by Simon Cruanes, it generates ocamldoc output for the stdlib/*.mli files).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 7007\n**Reporter:** wiml\n**Status:** closed (set by @damiendoligez on 2016-11-03T13:25:30Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.2\n**Target version:** later\n**Fixed in version:** 4.04.0 +dev / +beta1 / +beta2\n**Category:** documentation\n**Related to:** #7311\n\n## Bug description\n\nOCAMLPARAM seems to be the way to provide an installation-specific compiler option when using opam, but OCAMLPARAM's format (and existence) is undocumented.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6955\n**Reporter:** @gasche\n**Status:** acknowledged (set by @gasche on 2015-08-09T10:06:59Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0+dev / +beta1\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nSome options are mentioned in --help but missing from the manpages, or not handled by OCAMLPARAM.\n\n## Additional information\n\nIt would be helpful to check the list of OCAMLPARAM-supported options to see if we have forgotten something else.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6915\n**Reporter:** adrien\n**Status:** closed (set by @damiendoligez on 2015-07-22T14:40:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nThe mingw-w64 project has a new website which is hosted at http://mingw-w64.org . README.win32 links to the page on sourceforge which redirects properly to the new website but that might disappear at some point in the future.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6912\n**Reporter:** @Octachron\n**Status:** closed (set by @alainfrisch on 2015-12-14T16:41:13Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Target version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nIt seems that some of the user facing changes introduced in 4.02.2 have not been documented in the manual. Particularly, I could not find any documentation for\r\n\r\n* the new #-prefixed operators\r\n* the new nonrec keyword\r\n* the changes in attribute syntax\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6896\n**Reporter:** @edwintorok\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:15:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #5021\n**Monitored by:** @gasche\n\n## Bug description\n\nNum.float_of_num depends on the precision set with Arith_status.set_floating_precision, but that is not immediately obvious from the documentation: \"This parameter is the number of digits displayed when approx_printing is on\". approx_printing is not on in the example below.\r\n\r\nPlease document in Num.float_of_num that it depends on Arith_status.set_floating_precision, and in Arith_status.set_floating_precision that it influences Num.float_of_num.\n\n## Steps to reproduce\n\n#use \"topfind\";;\r\n#require \"num\";;\r\n(* enable this to increase float_of_num precision:\r\nArith_status.set_floating_precision 13;; *)\r\nlet a = 32012049433 and b = 8 in\r\nlet n =  Num.div_num (Num.Int a) (Num.Int b) in\r\nlet f = Num.float_of_num n in let f0 = (float_of_int a) /. (float_of_int b) in\r\nPrintf.eprintf \"%g\\n\" (f -. f0)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6895\n**Reporter:** @johnwhitington\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:16:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.1\n**Target version:** 4.02.3+dev\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #7047\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nI'd like to work on Bug 6676, and do some other work on the documentation. However, it's better to be able to build it locally, rather than presenting patches to the source blind.\r\n\r\nAs of now, the code in the SVN repository at /ocamldoc/ doesn't seem to build, relying on a number of external files and environment variables which are not present.\r\n\r\nWould it be possible to fix this, or if not, to provide instructions on how to do a \"dummy\" build? I looked at \"csl-checklist\" and \"ocaml-development-process\" and couldn't find anything.\r\n\r\nWhy is the documentation build system not in /ocaml/ anyway? If it could be made to build on any platform, it would be easier to keep is sync? The dependencies would have to be clarified, of course, and building it would be an optional part of building the compiler.\n\n## File attachments\n\n- [README-improved.txt](https://gist.githubusercontent.com/vicuna/1d2fe2bd8a113e22d684250196108dc4/raw/f9a2fdada951812bd9be53520cd8421c5cfe0b19/README-improved.txt)\n- [README.txt](https://gist.githubusercontent.com/vicuna/1d2fe2bd8a113e22d684250196108dc4/raw/1141c2ffdfde264d0584d0232cc4370ca2631df2/README.txt)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6894\n**Reporter:** furuse\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:16:14Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.1\n**Target version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nIt is rejected as a syntax error.  Should be [@@@warning \"+9\"].\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6885\n**Reporter:** @gasche\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-02-23T23:49:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.03.0+dev / +beta1\n**Target version:** later\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #6139\n\n## Bug description\n\nThe bigarray access syntax is documented as an extension in the manual:\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec240\r\n\r\nWe should explicitly document the fact that, starting at 4.03, \"open Bigarray\" needs to be used for this syntax to be available for bigarrays. This is one of the breaking changes coming with 4.03.\r\n\r\nThere are discussions of having a tailored error message, or maybe even supporting the bigarray-syntax with a deprecated backward-compatibility mode for now, but in any case we should document \"open Bigarray\" as the proper long-term solution.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6855\n**Reporter:** Martin Keegan\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:49:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.01.0\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nA zero-length .annot file is generated under certain circumstances.\n\n## Steps to reproduce\n\nClone the repo provided under additional information, and build.\r\n\r\nCheck that the royalty.annot file is zero length; note that building with ocamlc rather than ocamlopt generates a royalty.annot file with proper contents.\r\n\r\nI notice that failing to add the main.ml file to the list of files to be compiled also affects whether the bug manifests.\n\n## Additional information\n\nSee smallish project at: https://github.com/mk270/example-annot\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6854\n**Reporter:** @lpw25\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nThe example in:\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual033.html#toc147\r\n\r\ninitializes a `struct custom_operations` but does not include a value for the `compare_ext` field.\r\n\r\nSince `custom_compare_ext_default` is `NULL` this is not technically a bug, but it seems better to include it (and it will cause warnings in gcc if you use `-Wextra`).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6848\n**Reporter:** mcc\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:49:00Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.02.1\n**Category:** documentation\n\n## Bug description\n\nIn section 7.9.3 of the manual:\r\n\r\n\"Polymorphic variant types can be refined in two ways, either to allow the addition of new constructors, or to allow the disparition of declared constructors\"\r\n\r\n\"Disparition\" is a beautiful word but it is unfortunately not English (it is not listed in dictionary.com or m-w.com). I think a different word is required, as a reader if I cannot look up the words used in the dictionary then I cannot be sure I am correctly interpreting the sentence.\n\n## Steps to reproduce\n\nAccess http://caml.inria.fr/pub/docs/manual-ocaml/extn.html\n\n## Additional information\n\nAn alternate acceptable solution for this bug would be to convince modern dictionaries to add \"disparition\". Apparently it is in the 1913 Webster's.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6844\n**Reporter:** furuse\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:48:58Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Version:** 4.02.1\n**Category:** documentation\n\n## Bug description\n\nAs indicated in http://stackoverflow.com/questions/29788717/ocaml-when-guard-in-fun , the refman's BNF (http://caml.inria.fr/pub/docs/manual-ocaml/expr.html) says fun can take a guard:\r\n\r\n| fun multiple-matching  \r\n\r\nmultiple-matching\t::=\t { parameter }+  [when expr] ->  expr  \r\n\r\nbut it does not.\r\n\r\nThe section \"Guards in pattern-matchings\" also states fun can take a guard.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6810\n**Reporter:** @dbuenzli\n**Assigned to:** @mshinwell\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:49:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.02.1\n**Target version:** 4.02.2+dev / +rc1\n**Fixed in version:** 4.02.2+dev / +rc1\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @hcarty\n\n## Bug description\n\nIt should mention that the function raises Sys_error in case of error.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6789\n**Reporter:** william\n**Status:** resolved (set by @damiendoligez on 2016-04-18T12:03:46Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.1\n**Category:** documentation\n\n## Bug description\n\nin ocamlbuild documentation, the section \"18.3.20  Debugging byte code and profiling native code\" could be a bit clearer.\r\n\r\n\"The preferred way of compiling code suitable for debugging with ocamldebug or profiling native code with ocamlprof is to use the appropriate target extensions, .d.byte for debugging or .p.native.\"\r\n=>\r\n\"To compile code suitable for debugging with ocamldebug, use the target extension .d.byte. To compile code suitable for profiling with gprof, use the target extension .p.native\"\r\n\r\n\"Please note that the byte-code profiler works in a wholly different way and is not supported by ocamlbuild.\"\r\n=>\r\n\"Please note that the byte-code profiler ocamlprof works in a wholly different way and is not supported by ocamlbuild.\"\r\n\r\n\r\nFurthermore, ocamlprof can be replaced if I have well understood by gprof -A. So it would be nice to add to the last comment :\r\n\"[...] is not supported by ocamlbuild. Use if possible the target .p.native along with gprof -A to insert information in source code\".\r\nBut in this case, \"true:debug\" must be added in order for gprof -A to work. So I was wondering if \".p.profile\" should also add debug tag...\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6764\n**Reporter:** braibant\n**Assigned to:** @mshinwell\n**Status:** closed (set by @mshinwell on 2015-05-06T15:31:20Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** text\n**Version:** 4.02.1\n**Target version:** 4.02.2+dev / +rc1\n**Category:** documentation\n**Related to:** #4702 #6776\n**Monitored by:** @gasche @yallop\n\n## Bug description\n\nLooking at section 19.10.1 \"Registering threads created from C\" in the manual, I am slightly puzzled by the documentation. I am not quite sure if that means what it means in the context of an OCaml library that's called from a third party C program using dynamic linking. \r\n\r\nObviously, there is no way to register all the threads that this third party application is going to create. Does that mean that it is not possible to use this kind of mix of OCaml/C? This does not seem to be the case reading the next paragraph in the manual, so I am a bit lost here.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6761\n**Reporter:** oliver\n**Status:** closed (set by @alainfrisch on 2017-02-24T12:22:19Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Platform:** ./.\n**OS:** ./.\n**OS Version:** ./.\n**Target version:** undecided\n**Category:** documentation\n\n## Bug description\n\nA table with filename-extensions used by OCaml would be very helpful.\r\nI browsed the reference manual but could not find such a table.\r\n\r\nA way, that shows what should be added can be seen on page 202 of OCaml-Oreilly-book:\r\n\r\nhttp://caml.inria.fr/pub/docs/oreilly-book/ocaml-ora-book.pdf\r\n\r\n(\"Naming Rules for File Extensions\", Chapter 7, page 202)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6739\n**Reporter:** oliver\n**Status:** confirmed (set by @damiendoligez on 2015-01-05T18:04:38Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Platform:** ./.\n**OS:** ./.\n**OS Version:** ./.\n**Target version:** later\n**Category:** documentation\n\n## Bug description\n\nGood helper for orientation in the documentation\r\nwould be, to have the ocaml-version being part of the documents\r\nheadline or footline.\r\n\r\nSo, if you have different versions of the documentation,\r\nyou can see, which one is the newer, to which OCaml-version it refers.\r\n\r\nThis makes much sense especially, if it's a printed document,\r\nand here especially, if it's not the full documentation with titlepage,\r\nbut just some pages or an interesting chapter.\r\n\r\n (Printing the full docs always can become expensive, so printing\r\n  just new parts, like for example, just Bytes-module, which was\r\n  one of the main changes  following 4.00, would be nice.)\r\n\r\nHaving multiple printouts of the same chapter,\r\nit then is not that obvious, which is the old and new version,\r\nif it is not visible on every printed page.\r\n\r\n\r\nThis is not theoretically enhancement.\r\nI reallylike to have printed refman.\r\nAnd adding this information to the refman would be very helpful,\r\nespecially when doing partial printing of the docs....\n\n## Steps to reproduce\n\nLook at the refman pages ;-)\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 6709\n**Reporter:** @dbuenzli\n**Assigned to:** @Octachron\n**Status:** resolved (set by @dra27 on 2017-05-14T13:26:11Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Version:** 4.02.1\n**Target version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @hcarty @dbuenzli\n\n## Bug description\n\nWould be nice to have that directly in the API documentation. Rather than having to dig for http://caml.inria.fr/pub/docs/manual-ocaml/expr.html and compute the actual associativity according to the structure of the operator.\n"},{"labels":[null,null,"documentation",null],"text":"**Original bug ID:** 6700\n**Reporter:** michipili\n**Status:** acknowledged (set by @gasche on 2014-12-15T14:17:34Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Platform:** amd64\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche @hcarty\n\n## Bug description\n\nWhen I run ocamlopt -shared and use -o to arrange to that the output file is not\r\nin the same directory as the source file, I see that by-products (*.o and *.cmi)\r\nare stored along the source file.\r\n\r\nIt is expected that these by products are stored in the same directory as the file given as argument to the -o option.  Indeed,\r\n\r\n1. This is the behaviour of the compiler when producing a cmi as a a by-product\r\n   of a cmo file.\r\n\r\n2. The sources can sit on a read-only media and the user guarantees that the\r\n   path used with the -o file is writeable.\r\n\r\n3. Makefiles using the objdir-system¹ to store object files in a directory\r\n   distinct from the sources are easier to use if no object file is created\r\n   in the source directory.\r\n\r\n\r\n¹: esp BSD Owl (https://github.com/michipili/bsdowl/wiki/DevelopOCamlSoftware)\n\n## Steps to reproduce\n\nmkdir remote\r\ntouch remote/module.ml\r\nocamlopt -shared -o module.cmxs remote/module.ml\r\nls -R\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 6676\r\n**Reporter:** @johnwhitington\r\n**Status:** acknowledged (set by @damiendoligez on 2014-12-24T16:31:43Z)\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** feature\r\n**Target version:** later\r\n**Category:** documentation\r\n**Monitored by:** @gasche @jmeber @hcarty @Yakobowski\r\n\r\n## Bug description\r\n\r\nI've noticed, a couple of times recently, programmers missing features of OCaml because they have not read through this, now huge, heterogeneous, chapter. It contains many things which are used even inside the compiler (Range Patterns, say). Or which were introduced many moons ago. Are they really extensions?\r\n\r\nWhat is the rationale which decides what is considered 'Core Language' and 'Language Extensions'?\r\n\r\nWhy do we need to document a feature \"Removed in Objective Caml 3.07\" here?\r\n\r\nIs this chapter a historical record, or can we trim or reorganise it? Lots of the content is interesting, especially for recently-introduced features (for example, complicated ones to do with the module system).\r\n\r\nIs everything in it actually covered elsewhere in the manual? It is intended to be?\r\n\r\n## File attachments\r\n\r\n- [remove_stream.txt](https://gist.githubusercontent.com/vicuna/db588d3541e721cbe6fd8c6161fe54b2/raw/b663675ddefdf5623e549f192ed2fabaa031a576/remove_stream.txt)\r\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6668\n**Reporter:** @lpw25\n**Status:** closed (set by @damiendoligez on 2016-03-23T13:10:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nThe grammar for \"mod-constraint\" includes:\r\n\r\n    type [type-params]  typeconstr  type-equation\r\n\r\nit should actually be:\r\n\r\n    type [type-params]  typeconstr  type-equation { type-constraint }\r\n\r\nbecause constraints are allowed on `with` constraints (although they don't actually do anything since they must match the definition and are not required if the definition does have them).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6619\n**Reporter:** @johnwhitington\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:36:51Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Fixed in version:** 4.02.2+dev / +rc1\n**Category:** documentation\n**Monitored by:** @diml @hcarty\n\n## Bug description\n\nCurrently, we have:\r\n\r\n---\r\nPrintexc.set_uncaught_exception_handler fn registers fn as the handler for uncaught exceptions. The default handler prints the exception and backtrace on standard error output.\r\n\r\nNote that when fn is called all the functions registered with at_exit have already been called. Because of this you must make sure any output channel fn writes on is flushed.\r\n\r\nIf fn raises an exception, it is ignored.\r\n---\r\n\r\nFollowing discussion on caml-list, I would suggest the final paragraph be replaced by something like:\r\n\r\n\"If an exception is raised inside the handler fn and remains uncaught, neither the default handler nor fn is called: the exception is ignored.\"\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6607\n**Reporter:** @alainfrisch\n**Status:** closed (set by @damiendoligez on 2015-02-27T04:16:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.02.2+dev / +rc1\n**Fixed in version:** 4.02.2+dev / +rc1\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nbyterun/compact.c:  caml_gc_message (0x200, \"FL size at phase change = %\"\r\nbyterun/compact.c:  caml_gc_message (0x200, \"Estimated overhead = %\"\r\nbyterun/compact.c:    caml_gc_message (0x200, \"Automatic compaction triggered.\\n\", 0);\r\nbyterun/compact.c:    caml_gc_message (0x200, \"Measured overhead: %\"\r\nbyterun/gc_ctrl.c:  caml_gc_message (0x200, \"Estimated overhead (lower bound) = %\"\r\nbyterun/gc_ctrl.c:    caml_gc_message (0x200, \"Automatic compaction triggered.\\n\", 0);\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6603\n**Reporter:** @alainfrisch\n**Assigned to:** @lpw25\n**Status:** assigned (set by @alainfrisch on 2014-10-08T08:20:43Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nThe behavior of extension constructor definitions/declarations when the target type is an abstract one is not documented in the manual.  The behavior is:\r\n\r\n - In structures, it is allowed to rebind existing constructors to a type which is abstract in the current scope; it is not allowed to add new constructors, tough.\r\n\r\n - In signatures, it is possible to specify constructors added to an abstract type.\r\n\r\n\r\nThe following is thus accepted:\r\n\r\n<pre>\r\nmodule type S = sig  type t  type t += A  end;;\r\nmodule F(X : S) : S =  struct type t = X.t  type t += A = X.A  end;;\r\n</pre>\r\n\r\nI assume that the rationale is to allow \"sealing\" an extensible type in a signature (together with a list of known constructors) , while allowing from the outside to expose subsets of its known constructors.\r\n\r\nI suggest to describe the behavior in the manual, and give hints of situations where declaring extension constructors on abstract types is useful.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6601\n**Reporter:** madroach\n**Status:** resolved (set by @damiendoligez on 2017-04-10T13:04:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @whitequark @gasche @hcarty\n\n## Bug description\n\nSince 4.02 OCaml provides ocaml_strdup to get rid of unsafe strcpy calls.\r\nSo please don't recommend strcpy in the manual anymore. (first code example in 19.10.2)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6597\n**Reporter:** @gasche\n**Status:** resolved (set by @xavierleroy on 2017-02-06T19:00:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0\n**Target version:** 4.03.1+dev\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml/lex.html\r\n\r\ndoes not mention the new string literal syntax {foo|...|foo}\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6576\n**Reporter:** zakki\n**Status:** closed (set by @damiendoligez on 2014-09-28T20:01:22Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0+beta1 / +rc1\n**Target version:** 4.02.1+dev\n**Category:** documentation\n\n## Bug description\n\n\"%\" in HTML and plain text are \"\\char045\".\n\n## Steps to reproduce\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec243\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6548\n**Reporter:** pveber\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-05-08T21:24:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0+beta1 / +rc1\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #6589\n\n## Bug description\n\nIn \"Language extensions\", paragraph 7.9.2 says that \r\n\r\n\"For ambiguity reasons, typexpr cannot be an object or polymorphic variant type, but a similar behaviour can be obtained through private row types.\"\r\n\r\nActually private row types behave in a different way than what would be expected from private type abbreviation of a polymorphic variant:\r\n\r\n# module T\r\n  : sig    type t = private [> `a | `b] end\r\n  = struct type t =           [`a | `b] end\r\n;;\r\nmodule T : sig type t = private [> `a | `b ] end\r\n# let f (x : T.t) = match x with | `a -> true | `b -> false;;\r\nCharacters 18-57:\r\nWarning 8: this pattern-matching is not exhaustive. Here is an example of a value that is not matched:\r\n`AnyExtraTag\r\nval f : T.t -> bool = <fun>\r\n\r\nThat is, exhaustivity check is not possible any more with private row types. The limitation of this workaround should be indicated, and other workarounds could be suggested:\r\n\r\n- defining an auxiliary type:\r\n\r\nmodule T\r\n  : sig    type t = private u and u = [ `a | `b] end\r\n  = struct type t = [`a | `b] and u = t end;;\r\n\r\n- using abstract types :\r\n\r\nmodule T\r\n  : sig type t val repr : t -> [`a | `b] end\r\n  = struct type t = [`a | `b] let repr x = x end\r\n;;\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6540\n**Reporter:** drichman\n**Assigned to:** @diml\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:34:41Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0+beta1 / +rc1\n**Fixed in version:** 4.02.1+dev\n**Category:** documentation\n\n## Bug description\n\nbyterun/config.h\r\n\r\n    /* Default size of the minor zone. (words)  */\r\n    #define Minor_heap_def 262144\r\n\r\ndoesn't match stdlib/gc.mli\r\n\r\n  { mutable minor_heap_size : int;\r\n    (** The size (in words) of the minor heap.  Changing\r\n       this parameter will trigger a minor collection.  Default: 32k. *)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6515\n**Reporter:** @yallop\n**Status:** closed (set by @damiendoligez on 2014-08-18T13:09:19Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nThe documentation says that nativeint has the same width as a long:\r\n\r\n   This module provides operations on the type nativeint of signed 32-bit integers (on 32-bit platforms) or signed 64-bit integers (on 64-bit platforms). This integer type has exactly the same width as that of a long integer type in the C compiler.\r\n   http://caml.inria.fr/pub/docs/manual-ocaml/libref/Nativeint.html\r\n\r\nbut from my reading of the source it's actually given the same width as a pointer:\r\n\r\n   #elif SIZEOF_PTR == SIZEOF_INT\r\n   /* Hypothetical IP32L64 model */\r\n   typedef int intnat;\r\n\r\n   https://github.com/ocaml/ocaml/blob/fcc2da384/byterun/config.h#L69-L72\r\n\r\nI have a need in ctypes for an OCaml integer type that has the same width as a pointer, and it'd be useful if nativeint were guaranteed to be a suitable choice.\n"},{"labels":[null,null,"documentation",null],"text":"**Original bug ID:** 6504\n**Reporter:** @damiendoligez\n**Status:** confirmed (set by @damiendoligez on 2014-09-03T22:40:47Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** minor\n**Version:** 4.01.0\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nThe environment variable CAML_DEBUG_SOCKET is used by ocamlrun but not documented in the man page nor in the main documentation.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6503\n**Reporter:** norm\n**Assigned to:** @yallop\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:34:22Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** text\n**Platform:** Irrelevant\n**Version:** 4.01.0\n**Category:** documentation\n\n## Bug description\n\nThe OCaml version 4.01.0 top level accepts the following degenerate but evidently meaningful statement:\r\nlet e : type a. int = 3;;\r\nI cannot parse this expression according to the official syntax at:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/language.html\r\nI would guess that an additional alternative to let-binding is needed.\r\nProbably another syntactic category is needed to produce text such as \"type a b.\".\n\n## Steps to reproduce\n\nThis involves mainly reading the page at:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/expr.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6453\n**Reporter:** furuse\n**Status:** closed (set by @damiendoligez on 2014-07-21T21:06:07Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.02.0+beta1 / +rc1\n**Target version:** 4.02.0+dev\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n\n## Bug description\n\nI found Lexer.set_preprocessor is added to OCaml 4.02.0 and played with it a bit. It is cool!\r\n\r\nOne tricky thing I have experienced that preprocessors receive lexer token streams a bit different from the original. They contain EOL. The code is in the token rule and it was hard to find out first for me. \r\n\r\nThis must be documented at the comment of the function in lexer.mli\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6436\n**Reporter:** @johnwhitington\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:27:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n\n## Bug description\n\nPatch against trunk attached.\r\n\r\nI thought about adding [@@ocaml.deprecated] too, but that appears to not be used in every place @deprecated is used in the stdlib .mli files. Would you like a patch for that too?\n\n## File attachments\n\n- [array_labels_depricated.diff](https://gist.githubusercontent.com/vicuna/572f66beb71a9819ce4d95cc4faf8ffb/raw/2d3919f4d22a560f42a3a4eb123bd5cb980dd327/array_labels_depricated.diff)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6355\n**Reporter:** @dbuenzli\n**Assigned to:** @mshinwell\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:27:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.01.0\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n\n## Bug description\n\nIf I understand correctly there's no control on which thread a finalizer function is going to be called. This should be mentioned in the documentation of Gc.finalize.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6298\n**Reporter:** @alainfrisch\n**Assigned to:** @mshinwell\n**Status:** closed (set by @damiendoligez on 2014-07-16T15:47:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nThe manual does not mention the 'a' switch in OCAMLRUNPARAM.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6296\n**Reporter:** @hhugo\n**Status:** closed (set by @xavierleroy on 2017-09-24T15:32:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Related to:** #4323 #5829 #6649 #6701\n**Monitored by:** braibant\n\n## Bug description\n\nfloat_of_string does not understand the octal string representation where other conversion functions do.\r\n`float_of_string \"0o123\"` -> fail\r\n(int_/Int64./Int32.)of_string \"0o132\" -> work\r\n\r\nneed to document the behavior or to fix it.\r\n\r\nalso I just discovered (reading strtod manpage) the syntax \"0x1p8\".\r\n\r\nwould need either documentation of accepted formats (like is it done with int conversion) or link to documentation of underlying c function\r\n\r\nrelated to ocaml/ocaml#5829\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 6280\n**Reporter:** berenger\n**Status:** closed (set by @damiendoligez on 2014-07-16T09:07:11Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Tags:** junior_job\n**Duplicate of:** #5841\n\n## Bug description\n\nThe type of the exception should be in the ocamldoc\r\nfor lockf (Unix.Unix_error).\r\nMaybe this is the case for all exceptions\r\nin this module but is written nowhere in the doc.\r\n\r\nRegards,\r\nF.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6253\n**Reporter:** zakki\n**Status:** closed (set by @damiendoligez on 2013-11-30T21:53:52Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.01.0\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nC file name isn't consistent. \"curses_stubs.c\" and \"curses.c\" in \"19.6  A complete example\".\r\nAnd function names in mli file are something like curses_initscr, but in c they have caml_ prefix like caml_curses_initscr, caml_curses_endwin.\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.01/intfc.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6245\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2013-11-30T22:15:21Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** trivial\n**Version:** 4.01.0\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n\n## Bug description\n\n`Arg' module exports, among other things, these functions:\r\n- parse\r\n- parse_dynamic\r\nSignature of the latter function is declared to be:\r\n\r\nval parse_dynamic : (string * spec * string) list ref -> anon_fun -> string -> unit\r\n\r\nShouldn't it be, consistently with the signature of `parse', instead:\r\n\r\nval parse_dynamic : (key * spec * doc) list ref -> anon_fun -> usage_msg -> unit\r\n\r\n?\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6225\n**Reporter:** DYNO_doxa\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-10-16T06:58:35Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Platform:** i386\n**OS:** XP\n**OS Version:** SP3\n**Version:** 4.01.0\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Tags:** junior_job\n**Related to:** #5607\n\n## Bug description\n\nDefining\r\n\r\n  let new_array = Array.make 7\r\n\r\nreturns a surprising type\r\n\r\n  '_a -> '_a array\r\n\r\nthat is not documented in the manual.\n\n## Steps to reproduce\n\ncompile and see:\r\n\r\nmodule Days = struct\r\n\tlet  newArrayOf = Array.make 7 \r\nend\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6189\n**Reporter:** Hendrik Tews\n**Assigned to:** @damiendoligez\n**Status:** feedback (set by @damiendoligez on 2014-01-22T15:23:28Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.01.0\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche warwick\n\n## Bug description\n\nHi,\r\n\r\nas always, I am reporting some points that I found during the\r\npreparation of the enhanced OCaml documentation. As always, some\r\nof these points are bugs but for others I am not sure.\r\n\r\n1. the compiler accepts ``for (+) = 2 to 2 print_int (+) done'',\r\n   is this really intended?\r\n\r\n2. some ocamlopt options are not documented, for instance -nostdlib\r\n\r\n3. in ocamldoc.html, the references for {% string %} and \r\n   {! string } in 15.2.4 point to some sub-sub-section, but they\r\n   print as 15.2.4, which is not really helpful, especially in\r\n   the pdf version.\r\n\r\n4. in 15.3.1, the links the some source code examples point to\r\n   4.00 versions of these files.\r\n\r\n5. the functions Format.set_all_formatter_output_functions and\r\n   Format.get_all_formatter_output_functions are new in 4.01 and\r\n   not deprecated since 4.00.\r\n\r\n6. The documentation of Format.set_formatter_out_functions\r\n   mentions the functions out_string and out_flush, which, IMO,\r\n   do not exists.\r\n\r\n7. In the 4.00 docs, the pretty printing indication @@ was\r\n  deprecated. Now, it is not deprecated any more, but it is still\r\n  recommended to use %@.\r\n\r\n8. In libref/Scanf.html, why are there backslashes in the\r\n   conversion specification \\( fmt %\\), when the examples use no\r\n   backslashes?\r\n\r\n9. In libref/Scanf.html, the paragraph after the conversion spec\r\n   \\( fmt %\\) seems to be wrongly indented. \r\n\r\n10. In libref/Unix.html, the sentence \"The flags to\r\n    Unix.openfile.\", which follows the doc entry for open_flag,\r\n    is not properly indented.\r\n\r\n11. In libref/Str.html, in the doc entry for matched_string,\r\n    there seems to be a formatting error following\r\n    Str.substitute_first.\r\n\r\n12. In classes.html, section 6.9.2, subsection \"Method\r\n    definition\", there is a list of the special expressions\r\n    available in method bodies. IMHO, the expression consisting\r\n    just of \"inst-var-name\" is missing there.\r\n\r\nBye,\r\n\r\nHendrik\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 6168\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2014-05-25T18:14:07Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** trivial\n**Version:** 4.00.0\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Tags:** junior_job\n**Duplicate of:** #5841\n\n## Bug description\n\nUnix.stat function may raise Unix.Unix_error exception.\r\n\r\nLike in case of Unix.execv and others, it would be beneficial to state it also explicitely in case of Unix.stat function.\r\n\r\n(If that is the intended documenting policy concerning exceptions.)\n\n## Additional information\n\nI've reported similar problem before:\r\nocaml/ocaml#5841\r\n(for openfile)\r\n\r\nThere may be more of these kind of omissions.\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 6141\n**Reporter:** @johnwhitington\n**Status:** feedback (set by @damiendoligez on 2014-11-24T17:05:49Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n**Tags:** patch, junior_job\n**Monitored by:** @gasche @dbuenzli\n\n## Bug description\n\nRationale:\r\n\r\n1) Char.unsafe_chr is widely used in third-party low level libraries which are not part of stdlib.\r\n\r\n2) People who don't know Char.unsafe_chr exists replicate it using Obj.magic (this is what I used to do) This is bad.\r\n\r\n3) It's no more unsafe that other unsafe_ functions in the stdlib which are documented.\r\n\r\nAs an example, in very fast lexing code, where we know an integer is actually a byte in the range 0...255, Char.chr can be quite a cost.\n\n## File attachments\n\n- [unsafe_chr_documentation.diff](https://gist.githubusercontent.com/vicuna/c948c58161b75cc10c7b1dad19cd53a6/raw/fb1af073db8dbf6187857e4fc027c0ebea418b10/unsafe_chr_documentation.diff)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6136\n**Reporter:** @yallop\n**Status:** closed (set by @mshinwell on 2016-12-13T10:45:30Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.03.1+dev\n**Category:** documentation\n**Related to:** #7346\n**Monitored by:** @ygrek @hcarty @xavierleroy\n\n## Bug description\n\nThe manual says that OCaml application is multi-argument\r\n\r\n   The expression expr argument1 … argumentn evaluates the expression expr and\r\n   those appearing in argument1 to argumentn.\r\n\r\nand that the order of evaluation of the arguments and the function is\r\nunspecified:\r\n\r\n   The order in which the expressions expr, argument1, …, argumentn are\r\n   evaluated is not specified.\r\n\r\nHowever, the time of the actual call is specified: it takes place after the\r\nfunction expression and all the argument expressions have been evaluated:\r\n\r\n   The expression expr must evaluate to a functional value f, which is then\r\n   applied to the values of argument1, …, argumentn.\r\n\r\nIn practice, there's more variation in the behaviour; it shows up when a\r\nfunction performs an effect after receiving arguments.  Here's an example\r\nshowing the different behaviour between ocamlc and ocamlopt, and with known\r\nand unknown functions:\r\n\r\nFirst, the example.  (The function syntactically takes two arguments, but its\r\ntype 'a -> 'b -> 'a allows more.)\r\n\r\n   $ cat call.ml\r\n   let f g x = ignore (failwith \"called f\"); g\r\n\r\n   let g x = x\r\n\r\n   let h = f g 2 (failwith \"third argument\")\r\n\r\nWith ocamlc the function is never called, since the evaluation of the third\r\nargument raises an exception:\r\n\r\n   $ ocamlc call.ml -o call && ./call\r\n   Fatal error: exception Failure(\"third argument\")\r\n\r\nWith ocamlopt the function is called before receiving all three arguments, so\r\nthe third argument is never evaluated:\r\n\r\n   $ ocamlopt call.ml -o call && ./call\r\n   Fatal error: exception Failure(\"called f\")\r\n\r\nHere's a variation of the example where f is no longer statically visible:\r\n\r\n   $ cat call2.ml\r\n   let f g x = ignore (failwith \"called f\"); g\r\n\r\n   let g x = x\r\n\r\n   let h f =\r\n     f g 2 (failwith \"third argument\")\r\n\r\n   let _ = h f\r\n\r\nNow ocamlopt evaluates all three arguments before calling the function:\r\n\r\n   $ ocamlopt call2.ml -o call2 && ./call2\r\n   Fatal error: exception Failure(\"third argument\")\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6135\n**Reporter:** Hendrik Tews\n**Assigned to:** @whitequark\n**Status:** closed (set by @whitequark on 2017-05-18T10:55:56Z)\n**Resolution:** fixed\n**Priority:** urgent\n**Severity:** minor\n**Version:** 4.01.0+beta/+rc\n**Target version:** 4.02.1+dev\n**Category:** documentation\n**Monitored by:** @whitequark @hcarty\n\n## Bug description\n\nLooking at the 4.01beta reference manual I cannot find -ppx!\r\n\r\nApart from including -ppx it would be nice to have some basic information about ppx commands (howto read/write the syntax tree, the type of the syntax tree), as well as a pointer to more extensive documentation.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6126\n**Reporter:** vbmithr\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:23:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** documentation\n**Related to:** #8395 #5971\n**Monitored by:** @gasche\n\n## Bug description\n\nIn section 29.2.2  Accessing an OCaml bigarray from C or Fortran, there is a mention of the function Data_bigarray_val(v).\r\n\r\nThis function is not in bigarray.h, but in compat.h (or whatever it is really), and is probably deprecated. \r\n\r\nThe manual should indicate Cam_ba_array_val(v) instead.\n\n## File attachments\n\n- [manual-bigarray.patch](https://gist.githubusercontent.com/vicuna/b97e51239ce20f588a2c790e05479831/raw/41572e8ab379bf49ab420bef839046e41176a5f3/manual-bigarray.patch)\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 6086\n**Reporter:** william\n**Status:** acknowledged (set by @damiendoligez on 2014-04-02T14:37:55Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n**Tags:** patch\n\n## Bug description\n\nHello,\r\nI had a look at the recommanded tutorial for ocamlbuild. There is a section \"Using an external library\" that brings to :\r\nhttp://brion.inria.fr/gallium/index.php/Using_an_external_library\r\n\r\nIt is too bad an example is not given using ocamlfind in _tags files. To that end, I send you a little working example using cairo.\r\nBest regards\n\n## File attachments\n\n- [ocamlbuild_ocamlfind.tar.gz](https://gist.githubusercontent.com/vicuna/6ecfc1487c490c061d23c3599d456ba3/raw/98b977de91532cac6f268c7ccb54f255865f0b95/ocamlbuild_ocamlfind.tar.gz)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6082\n**Reporter:** @rixed\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:21:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\n\"This is achieved by the -make_runtime and -use_runtime flags to ocamlc\"\r\nshould be:\r\n\r\n\"This is achieved by the -make-runtime and -use-runtime flags to ocamlc\"\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6051\n**Reporter:** @dbuenzli\n**Status:** closed (set by @damiendoligez on 2014-07-22T21:38:58Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Target version:** 4.02.0+dev\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @gasche\n\n## Bug description\n\nThere are quite a few functions in Sys that may raise Sys_error (e.g. Sys.remove). It would be nice to document that in the mli.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6050\n**Reporter:** rgrinberg\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:19:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml/libref/Genlex.html\r\n\r\n'let parse_expr..' should be 'let rec parse_expr..'\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6048\n**Reporter:** sesquized\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:19:57Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nThe section 19.10.1 of the manual describes the caml_acquire_runtime_system() and caml_release_runtime_system().\r\n\r\nI don't see where the text addresses what happens if you call acquire more than once from the same thread.\r\n\r\nI looked at the Windows code and it appeared that you just need to match the number of releases to the number of acquires and you can acquire the lock more than once safely. (But I'm not certain and don't know if it's true for other OSs/build environments.) \r\n\r\nIt would be good if the topic was explained specifically.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6043\n**Reporter:** sdailly\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:19:54Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\nThe first class module exemple give syntax error when tryin to reproduce\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual021.html#toc81\n\n## Steps to reproduce\n\n$ rlwrap.exe ocaml\r\n        OCaml version 4.00.1\r\n\r\n# module type DEVICE = sig  end;;\r\nmodule type DEVICE = sig  end\r\n# let devices : (string, module DEVICE) Hashtbl.t = Hashtbl.create 17;;\r\nCharacters 23-29:\r\n  let devices : (string, module DEVICE) Hashtbl.t = Hashtbl.create 17;;\r\n                         ^^^^^^\r\nError: Syntax error\n\n## Additional information\n\nparen are missing arount « module DEVICE » :\r\n\r\n# let devices : (string, (module DEVICE)) Hashtbl.t = Hashtbl.create 17;;\r\nval devices : (string, (module DEVICE)) Hashtbl.t = <abstr>\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6027\n**Reporter:** SpiceGuid\n**Status:** resolved (set by @xavierleroy on 2013-06-10T13:11:40Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\nThe portability of Marshal.to_channel/from_channel between 32bits and 64 bits platforms is totally obscure/undocumented.\r\n\r\n? Is there absolutely NO guarantee ? (it should be documented)\r\n? Is there some guarantee from 32bits to 64 bits ? (it would be great to know)\r\n? Is there some guarantee from 32bits to 64 bits if some restriction applies? (it would be great to know)\r\n? Is there some guarantee both ways ? (it would be great to know)\r\n? Is there some guarantee both ways if some restriction applies? (it would be great to know)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 6018\n**Reporter:** oliver\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:19:35Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nThe reliable Unix signals need the function sigaction(2) to install the signal-related action.\r\nsigaction(2) is one of the signal functions, accompanied by sigprocmask(2), sigsuspend(2), sigpending(2).\r\n\r\nIn the doc for the Unix-module, there is only mentioned, that signal numbers must be taken from Sys-module, and that signal handlers also will be set via Sys-module.\r\n\r\nWhen reading the description in Sys-module it is also not mentioned that sigaction(2) is used.\r\n\r\nSo, when looking only at the docs for Sys- and Unix-module, it is not clear if signal(2) or sigaction(2) is used to establish the signal handler.\r\n\r\nSomeone coming from the C-world will miss sigaction(2) at least to be mentioned. That it is used as \"hidden magic\" under the hood of Sys-module is not enough, IMHO.\r\nsigpending(2) and the other signal-functions are also available in Unix-module.\r\n\r\nSo it would be more consequently (from the Unix-systems view) to also make sigaction(2) available in Unix-module.\r\n\r\nTo have all signal-installation handling in Sys-module also makes sense somehow (regarding platform-independence), but then it should be mentioned that sigaction(2) is used in case of Unix-systems via the Sys-module. (This is not so consequently regarding platform-seperation, because Unix-stuff should belong to Unix-module).\r\n\r\nThe state of the docs and implementation looks like a compromise between platform-independence in usage of the modules vs. platform-seperation.\r\nPut signal-installation into Sys independent of platform makes sense; seperate Unixoid systemhandler-installation intto Unix-module also makes sense.\r\nSo, the way it is done at the moment, is ok from a certain point of view.\r\n\r\nBut in in both cases, the documentation need to mention sigaction(2) somehow, somewhere; otherwise switching from C to OCaml can be confusing at this point.\r\n\r\nSomething like:\r\n  \"OCaml is weird, it has sigprocmask(2) and sigpending(2) and so on, but does\r\n   not provide sigaction(2). Can this be seen as a reliable language?\r\n   Is there some hidden sigaction(2) magic? If so, it might be seen as \r\n   reliable, but weird.\"\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 6015\n**Reporter:** @dbuenzli\n**Status:** closed (set by @xavierleroy on 2016-12-07T10:47:35Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** documentation\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nI never understood this behaviour:\r\n\r\n# sin -3.14;;\r\nError: This expression has type float -> float\r\nbut an expression was expected of type int\r\n\r\n# pred -1;;\r\nError: This expression has type int -> int\r\nbut an expression was expected of type int\r\n\r\nIf you follow the grammar production of the docs from expr [1] to integer or float literals the above programs should be interpreted correctly. So what is wrong the lexer [4,5] or the docs ? \r\n\r\nEither one should be fixed (and I'd prefer the lexer to be fixed). \r\n\r\n[1] http://caml.inria.fr/pub/docs/manual-ocaml/expr.html#expr\r\n[2] http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#float-literal\r\n[3] http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#integer-literal\r\n[4] https://github.com/ocaml/ocaml/blob/trunk/parsing/lexer.mll#L246\r\n[5] https://github.com/ocaml/ocaml/blob/trunk/parsing/lexer.mll#L248\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5988\n**Reporter:** vbmithr\n**Status:** closed (set by @damiendoligez on 2013-07-12T12:25:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.00.1\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation page for Native-code compilation does not list -impl as a flag for ocamlopt, whereas it is accepted by ocamlopt.\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 5987\n**Reporter:** @alainfrisch\n**Status:** confirmed (set by @damiendoligez on 2013-06-19T11:57:36Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Monitored by:** @hcarty @garrigue\n\n## Bug description\n\nThe manual says:\r\n\r\ntype-constraint ::= constraint 'ident = typexpr  \r\n\r\nbut the parser recognizes:\r\n\r\nconstrain:\r\n        core_type EQUAL core_type          { $1, $3, symbol_rloc() }\r\n;\r\n\r\n\r\n(I wonder whether even the simpler form of constraints on type declarations is actually used...)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5978\n**Reporter:** @bobzhang\n**Status:** closed (set by @damiendoligez on 2013-04-10T11:52:04Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nexpr :=\r\n   | value-path       (* 1  *)\r\n   | ....\r\n   | inst-var-name  (* 2 *)\r\nproduction 2 overlaps with production 1, and I did not see the production 2 in the yacc file either.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5974\n**Reporter:** william\n**Status:** closed (set by @damiendoligez on 2013-06-19T11:48:48Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Monitored by:** @gasche\n\n## Bug description\n\nI had troubles using the Str library. found answers in bug report 0001281. \r\nespecially with the \"\\(\" vs \"\\\\(\" trick.\r\n\r\nWould it be possible to add one or two examples in ocaml documentation ? :\r\n\r\nStr.replace_first (Str.regexp \"hello \\\\([A-Za-z]+\\\\)\") \"\\\\1\" \"hello world\";;\r\n- : string = \"world\"\r\n\r\nBest regards\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5972\n**Reporter:** jfc\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2013-04-04T09:25:05Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 4.00.0\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nSection 7.18 of the ocaml 4.00 documentation lists an extension to type constructor syntax:\r\n\r\nconstr-decl ::= ... | constr-name : typexpr  { * typexpr } -> typexpr\r\n\r\nThis implies that an arrow must appear, but the arrow is optional.  I can also declare\r\n\r\ntype _ t = Foo : unit t;;\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5971\n**Reporter:** @Leonidas-from-XIV\n**Assigned to:** meyer\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:21:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.00.1\n**Fixed in version:** 4.00.2+dev\n**Category:** documentation\n**Related to:** #6126\n\n## Bug description\n\nHi,\r\n\r\nSection 19.4.4 - Allocating blocks, says:\r\n\r\ncaml_copy_int32(i), copy_int64(i) and caml_copy_nativeint(i) return a value of OCaml type int32, int64 and nativeint, respectively, initialized with the integer i.\r\n\r\nBut in the int64 type, it forgets to add the \"caml_\" prefix. Now I know that this is still valid because there are compatibility wrappers, it would be great if someone could just change \"copy_int64(i)\" to \"caml_copy_int64(i)\" to promote the more modern versions.\r\n\r\nregards,\r\nMarek\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5962\n**Reporter:** vbmithr\n**Status:** closed (set by @damiendoligez on 2014-07-30T18:47:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**OS:** MacOSX\n**Version:** 4.00.1\n**Target version:** 4.02.0+dev\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nThe OCaml documentation (doc/ocaml/manual033.html#toc152) says that ocamlmklib performs \r\n\r\nocamlc -a -o zip.cma zip.cmo -dllib -lzip \\\r\n        -cclib -lzip -cclib -lz -ccopt -L/usr/local/zlib\r\nocamlopt -a -o zip.cmxa zip.cmx -cclib -lzip \\\r\n        -cclib -lzip -cclib -lz -ccopt -L/usr/local/zlib\r\ngcc -shared -o dllzip.so zipstubs.o -lz -L/usr/local/zlib\r\nar rc libzip.a zipstubs.o\r\n\r\nwhereas on MacOSX, I have something like that:\r\n\r\nMacBook-Pro-van-Harrie:_build vincent$ /usr/local/bin/ocamlmklib -o lib/tuntap_stubs lib/tuntap_stubs.o -v\r\n+ cc -bundle -flat_namespace -undefined suppress -o lib/dlltuntap_stubs.so lib/tuntap_stubs.o    \r\n+ ar rc lib/libtuntap_stubs.a  lib/tuntap_stubs.o; ranlib lib/libtuntap_stubs.a\r\n\r\n\r\nThe \"gcc -shared ...\" line is very different on the mac: -bundle is used instead of -shared, etc.\r\n\r\nThe doc should be clearer about that since some people might rely on it to write their own build systems. It should clearly specify that the commands that will be issued by ocamlmklib might differ according to the architecture/system used.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5928\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2013-02-26T10:37:17Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** trivial\n**Version:** 3.12.1\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nBy typing:\r\n\r\n  man ocamlmktop\r\n\r\nI get manual page for ocamlmktop.\r\n\r\nThere, in the OPTIONS section, is a line:\r\n\r\n   -vnumor-version\r\n\r\nThere are two missing spaces there. It should probably be:\r\n\r\n    -vnum or -version\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5926\n**Reporter:** @bobzhang\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:18:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\ntag-spec-full is documented as follows:\r\ntag-spec-full\t::=\t`tag-name  [ of typexpr ]  { & typexpr }  \r\n\r\nIt seems that `tag-name {& expr} will result in a syntax error.\r\nIs there any documentation explaining how conjuctive types work?\r\nI did not get a working example yet.\r\nThanks\r\n-----------------------------------------\r\n# type 'a z = [< `c  & u2] as 'a;;                      \r\nError: Syntax error\r\n# type 'a z = [< `c  of & u2] as 'a;;\r\nError: Type declarations do not match:\r\n         type 'a z = 'a constraint 'a = [< `c of & u2 ]\r\n       is not included in\r\n         type 'a z = 'a constraint 'a = [< `c of & u2 ]\r\n# type 'a u3 = [< `b | `a of & int & bool & int ] as 'a;;\r\nError: Type declarations do not match:\r\n         type 'a u3 = 'a constraint 'a = [< `a of & int & bool | `b ]\r\n       is not included in\r\n         type 'a u3 = 'a constraint 'a = [< `a of & int & bool | `b ]\r\n# type 'a u3 = [< `b | `a of & int  & int ] as 'a;;      \r\nError: Type declarations do not match:\r\n         type 'a u3 = 'a constraint 'a = [< `a of & int | `b ]\r\n       is not included in\r\n         type 'a u3 = 'a constraint 'a = [< `a of & int | `b ]\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5922\n**Reporter:** Julien Signoles\n**Status:** closed (set by @bobzhang on 2013-02-16T15:38:35Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\nIn Section 6.7 \"Expressions\" of the reference manual, the BNF for expressions 'expr' seems to be incomplete. At least, it should reference \"let module M = m in e\" and \"fun (type t) (x:t) -> e\".\r\n\r\nIn the same way, Section 6.10 \"Module types\" should reference \"module type of\" while Section 6.8 \"Type and Expression definitions\" should reference GADTs.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5883\n**Reporter:** norm\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2013-01-17T03:12:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac\n**OS:** OS X\n**OS Version:** 10.7.5\n**Version:** 4.00.1\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Related to:** #7783\n\n## Bug description\n\nThe syntax does not seem to produce the expression “S (3, 4)” in the context of the declaration “type w = S of int * int”. The rule: expr ::= constr expr might suggest that expr could be a tuple, but then “let u = 4, 8 in S u” should be legal but ocaml 4.00.1 rejects it.\n\n## Additional information\n\nFor prettier text and soap box see:\r\nhttp://cap-lore.com/Languages/ocaml/bugs/e.html\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 5882\n**Reporter:** norm\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2013-01-10T07:08:08Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac\n**OS:** OS X\n**OS Version:** 10.4.7\n**Category:** documentation\n**Duplicate of:** #3835\n\n## Bug description\n\nThe BNF produces \"type s = [int]\" which is probably a mistake.\r\nSee http://cap-lore.com/Languages/ocaml/bugs/a.html\r\nfor the complete production tree.\n\n## Steps to reproduce\n\nOCaml version 4.00.1\r\n\r\n# type s = [int];;\r\nError: Syntax error\r\n#\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5881\n**Reporter:** norm\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:18:21Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Platform:** Mac\n**OS:** OS X\n**OS Version:** 10.7.5\n**Version:** 4.00.1\n**Category:** documentation\n\n## Bug description\n\nThe code below works. I think that it once required ocaml -rectypes. The manual says that it is still required. The manual and 4.00.1 OCaml are out of sync. I suppose that the option should be retained but described as vestigial.\n\n## Steps to reproduce\n\ntype 'a lst = NIL | C of 'a * 'a lst;;\r\nC (3.3, C (2.3, NIL));;\n\n## Additional information\n\nSee http://cap-lore.com/Languages/ocaml/bugs/f.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5880\n**Reporter:** prevosto\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:18:25Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.00.1\n**Fixed in version:** 4.00.2+dev\n**Category:** documentation\n\n## Bug description\n\nThe online manual says that the lexer returned by Genlex.make_lexer may raise Parse_error (I suppose that it should be interpreted as Parsing.Parse_error), but this is not what the implementation does (true in 4.00.0 as well as 4.00.1)\r\n\r\n# let lex = Genlex.make_lexer [];;\r\nval lex : char Stream.t -> Genlex.token Stream.t = <fun>\r\n# let foo = Stream.of_string \"()\";;\r\nval foo : char Stream.t = <abstr>\r\n# let bar = lex foo;;\r\nval bar : Genlex.token Stream.t = <abstr>\r\n# Stream.next bar;;\r\nException: Stream.Error \"Illegal character (\".\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5875\n**Reporter:** norm\n**Status:** closed (set by @damiendoligez on 2013-02-19T11:54:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nI failed to parse an example from the manual for GADTs.\r\nI sent e-mail to the Caml-list and Jacques.Garrigue suggested that there is indeed a missing production.\r\nDate of e-mail 2013 Jan 5 16:07 GMT+8 (California)\r\nHe suggests \"constr-name : typexpr\" as an additional production for category constr-decl.\r\nI think that that indeed solves my problem.\r\nMy problem summary is at:\r\nhttp://cap-lore.com/Languages/ocaml/bb.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5850\n**Reporter:** micinski\n**Status:** closed (set by @damiendoligez on 2013-02-19T10:54:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.0\n**Category:** documentation\n\n## Bug description\n\nIn the Manual, Chapter 4 on Polymorphic variants reads as follows:\r\n\r\n\"That is, if you have defined type myvariant = [`Tag1 int | `Tag2 bool], then the pattern #myvariant is equivalent to writing (`Tag1(_ : int) | `Tag2(_ : bool)).\"\r\n\r\nHowever, this is not correct, it should read:\r\n\r\nThat is, if you have defined type myvariant = [`Tag1 of int | `Tag2 of bool], then the pattern #myvariant is equivalent to writing (`Tag1(_ : int) | `Tag2(_ : bool)).\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5841\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2014-05-25T18:13:41Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** trivial\n**Version:** 4.00.0\n**Target version:** 4.01.1+dev\n**Fixed in version:** 4.02.0+dev\n**Category:** documentation\n**Tags:** junior_job\n**Has duplicate:** #6168 #6280\n\n## Bug description\n\nUnix.openfile function may raise Unix.Unix_error exception.\r\n\r\nLike in case of Unix.execv and others, it would be beneficial to state it also explicitely in case of Unix.openfile function.\r\n\r\n(If that is the intended documenting policy concerning exceptions.)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5840\n**Reporter:** kosik\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:18:25Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** trivial\n**Version:** 4.00.0\n**Fixed in version:** 4.00.2+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation of the Unix module\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\r\nomits a small bit of information. In case of \"lseek\", it does not explain the meaning of the returned value.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5833\n**Reporter:** sesquized\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2013-08-19T18:25:04Z)\n**Resolution:** fixed\n**Priority:** high\n**Severity:** minor\n**Platform:** Windows\n**OS:** Windows\n**OS Version:** Vista 64\n**Version:** 4.00.1\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Related to:** #5830\n\n## Bug description\n\nReadme.win32 says to put in .msenv64\r\na path of \"${VCPATH}:$PATH:${FLPATH}\"\r\n\r\nHowever, if flexdll is installed with cygwin, this can have the make system try to use an old flexlink and fail.    I think it would be better to say\r\n${FLPATH}:${VCPATH}:$PATH\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5804\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2013-01-03T16:02:44Z)\n**Resolution:** open\n**Priority:** low\n**Severity:** trivial\n**Version:** 4.00.0\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nIn the documentation of the Sys module (standard library), the explanation of\r\n\r\n  signal_behavior\r\n\r\nappears at an unusual place (on the right, not below) the actual type definition.\r\n\r\nProbably some literate-programming tag might have been mistyped.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5743\n**Reporter:** khooyp\n**Status:** closed (set by @alainfrisch on 2012-08-28T07:15:32Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** crash\n**Platform:** OS X 10.6.8/Linux RHEL5\n**Version:** 4.00.0\n**Category:** documentation\n**Has duplicate:** #5744\n\n## Bug description\n\nRunning ocamldoc on a class with a \"val virtual\" leads to an error:\r\n\r\n% cat>foo.ml<<EOF\r\nclass virtual t = object val virtual x : int end\r\nEOF\r\n% ocamldoc foo.ml\r\nClass attribute Foo.t.x was not found in typed tree.\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 5733\n**Reporter:** gerd\n**Status:** confirmed (set by @damiendoligez on 2012-11-15T14:30:52Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Version:** 4.00.0\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @ygrek @hcarty @dbuenzli\n\n## Bug description\n\nBasically, it is up to the user how to call the C compiler for compiling stublibs. However, in many build systems I see that users do it the wrong way (e.g. hardcode the compiler \"gcc\", or forget to pass switches like -fPIC which are sometimes required). My wish is that the section \"Interfacing C with OCaml\" includes examples how to do it right - which is absolutely simple, because you just need to use ocamlc as driver even for C sources.\r\n\r\nThere could e.g. be a new section before \"Statically linking C code with OCaml code\" about \"Compiling C code\". Contents:\r\n\r\n - How to use ocamlc as driver for C sources: Sample command\r\n - Mention that the stdlib is automatically in the include path\r\n - Mention that the switches are ok for dynamically loadable code\r\n - The created .o files can be args of ocamlmklib\r\n - use -I, -ccopt, -cclib to pass args\r\n - Mention that ocamlc -config can be used to extract the compiler path and switches if lower-level calls are needed\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5726\n**Reporter:** kosik\n**Status:** closed (set by @damiendoligez on 2012-09-27T12:09:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Platform:** all\n**OS:** all\n**OS Version:** all\n**Version:** 3.12.1\n**Target version:** 4.00.1+dev\n**Category:** documentation\n\n## Bug description\n\nIn the manual the following line:\r\n\r\n  let devices : (string, module DEVICE) Hashtbl.t = Hashtbl.create 17\r\n\r\ncontains a syntax error. It should read:\r\n\r\nlet devices : (string, (module DEVICE)) Hashtbl.t = Hashtbl.create 17\n\n## Additional information\n\nThe same syntax error was carried from Ocaml version 3.12 documentation to version 4.0.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5712\n**Reporter:** Hendrik Tews\n**Assigned to:** @garrigue\n**Status:** resolved (set by @garrigue on 2017-02-24T10:17:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 4.00.0\n**Target version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Fixed in version:** 4.05.0 +dev/beta1/beta2/beta3/rc1\n**Category:** documentation\n**Parent of:** #5720\n**Monitored by:** @lefessan @glondu @hcarty\n\n## Bug description\n\nThis is the usual bug report about problems that I found while\r\npreparing the enhanced OCaml documentation. The list is shorter\r\nthan for previous versions. Congratulations!\r\n\r\n1- ``??'' is not accepted as prefix-symbol, although it is\r\n   permitted by the grammar\r\n\r\n2- the meta symbol ``label-name'' is defined twice, in 6.3 and 6.1\r\n\r\n3- ``#load_rec \"camlp4o.cma\";;'' fails in the usual way, although\r\n   the documentation says it should load dynlink recursively.\r\n\r\n4- the default set of enabled warnings for ocamlopt has changed,\r\n   the documentation still contains the old one\r\n\r\n5- ``Format.printf \"@%\" does not print a ``%'' as documented\r\n\r\n6- OCAMLRUNPARAM flag R is not documented\r\n\r\n7- String.{iteri,map} are missing in the documentation of StdLabels\r\n   (in file /libref/StdLabels.String.html)\r\n\r\n8- ArrayLabels, ListLabels, StringLabels are missing in the txt\r\n   version of the documentation\r\n\r\n9- new option -bin-annot is not documented\r\n\r\nBye,\r\n\r\nHendrik\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5709\n**Reporter:** @johnwhitington\n**Assigned to:** @lefessan\n**Status:** closed (set by @damiendoligez on 2012-07-31T13:40:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.0\n**Category:** documentation\n\n## Bug description\n\nGo to\r\n\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/\r\n\r\nand click 'Bundle of HTML files':\r\n\r\nNot Found\r\n\r\nThe requested URL /distrib/ocaml-4.00/ocaml-4.00-refman.html.tar.gz was not found on this server.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5681\n**Reporter:** @ygrek\n**Assigned to:** @lefessan\n**Status:** closed (set by @damiendoligez on 2012-07-18T15:20:38Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Target version:** 4.00.0+dev\n**Category:** documentation\n\n## Bug description\n\nI do not think this is the problem per se, but changelog says that cfi and debug info are enabled in ocamlopt -g only. This is not true since r12665.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5669\n**Reporter:** dario\n**Assigned to:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:07:05Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 4.00.0+beta2/+rc1\n**Category:** documentation\n\n## Bug description\n\n4.00 seems to have introduced a backwards incompatible change to Camlp4 which is not reported as such in the changelog: 'loc' is no longer accepted, only '_loc'.\r\n\r\nNote that the \"bug\" is the supposed absence from the changelog, not the change itself.  This issue was first reported by Richard Jones on the PG'OCaml mailing list: https://lists.forge.ocamlcore.org/pipermail/pgocaml-general/2012-July/000013.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5616\n**Reporter:** mehdi\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:04:40Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n**Monitored by:** @glondu\n\n## Bug description\n\nHi,\r\n\r\nIt seems that files shipped under \"ocamlbuild/manual/\" do not have a\r\ndeclared copyright owner or a license. Admittedly, manual.tex's has a\r\nlist of authors but they are not the copyright holders (it is not said\r\nexplicitly). So we cannot redistribute them or do anything useful with\r\nthem.\r\n\r\nThe LICENSE file says the following:\r\n\r\n> and \"the Compiler\" refers to all files marked \"Copyright INRIA\" in the\r\n> following directories and their sub-directories:\r\n> \r\n>   asmcomp, boot, build, bytecomp, debugger, driver, lex, man,\r\n>   ocamlbuild, ocamldoc, parsing, testsuite, tools, toplevel, typing,\r\n>   utils, yacc\r\n\r\nbut affected files are not maked \"Copyright INRIA\" and thus not\r\ncovered by the LICENSE file.\r\n\r\nCan you please clarify their license and copyright holders?\r\n\r\nBesides, it would nice to also provide the ocamlbuild's manual\r\n(generated .pdf and .html) in\r\nhttp://caml.inria.fr/pub/distrib/ocaml-$ver/ since it looks like a\r\ncanonical location for ocaml documentation.\r\n\r\nRegards,\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5612\n**Reporter:** @gasche\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:24:00Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** text\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Tags:** junior_job\n**Monitored by:** @hcarty\n\n## Bug description\n\nA beginners_list discussion revealed that some beginners are confused by the spacing style used in the introduction, that plays a dubious ambiguity between OCaml parenthesing rules and the more familiar f(x) notation. Terms like fib(n-2) or square(cos pi) are a potential recipe for disaster once the beginner uses currified functions.\r\n\r\nIn my experience, such parenthesing and escaping mistakes are actually the number one problem among early OCaml beginners. This section of the manual should be updated to avoid that style.\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 5607\n**Reporter:** @gasche\n**Assigned to:** @Octachron\n**Status:** resolved (set by @Octachron on 2017-10-16T06:56:25Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Target version:** 4.07.0+dev/beta2/rc1/rc2\n**Fixed in version:** 4.06.0 +dev/beta1/beta2/rc1\n**Category:** documentation\n**Tags:** manual\n**Related to:** #6225\n**Monitored by:** @hcarty\n\n## Bug description\n\nUsers, even familiar with the language, mostly do not not about variance annotations, and in particular their interaction with the relaxed value restriction. The problem they observe is that expressions at an abstract type representing a polymorphic data structure do not get generalized as expected.\r\n\r\nI think that would be a good addition in the FAQ, in the spirit of \"A function obtained through partial application is not polymorphic enough\".\n\n## Additional information\n\nThis problem has been discussed twice recently:\r\n- on the caml-list\r\n  https://sympa-roc.inria.fr/wws/arc/caml-list/2012-05/msg00032.html  \r\n\r\n- on reddit: \r\n  http://www.reddit.com/r/ocaml/comments/t8g2e/pdf_relaxing_the_value_restriction_by_jacques/c4kf68s\r\n\r\nMy reddit message might be a good basis for a FAQ answer; I hope to receive additional feedback on which wording would be best.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5606\n**Reporter:** alexey.rodriguez\n**Assigned to:** meyer\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:49:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** major\n**Platform:** x86_64\n**OS:** Ubuntu\n**OS Version:** 11.10\n**Version:** 3.12.1\n**Category:** documentation\n**Monitored by:** wagerlabs @hcarty\n\n## Bug description\n\nThe documentation does not warn strongly enough about using Extract_exception on exception results before calling a function that can trigger a GC.\r\n\r\nFor reference see the discussion on the mailing list:\r\n\r\nhttps://sympa-roc.inria.fr/wws/arc/caml-list/2012-05/msg00003.html\r\n\r\nThe attached patch includes a warning and an example to this purpose.\n\n## File attachments\n\n- [warning_exception.patch](https://gist.githubusercontent.com/vicuna/3e417a556eafc30f467a97cd7286b662/raw/b2cb80bb9cf1d892d33613a5f59046935b02e42f/warning_exception.patch)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5590\n**Reporter:** samuelh\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2012-04-18T12:53:01Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n\n## Bug description\n\nIn chater 3.16 of OCaml object documentation : \"money1\" should be \"money\"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5587\n**Reporter:** @glondu\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2012-04-18T13:33:02Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n**Monitored by:** mehdi\n\n## Bug description\n\nThe phrase \"allow to\" (and its variant \"allows to\") appears in several locations in OCaml sources, in particular in ocamldoc manpage, and some comments that end up in ocamldoc-generated documentation.\r\n\r\nThe blind fix is to replace with \"allow one to\", but replacing with \"allow ${verb in -ing form}\" might be more appropriate in some circumstances. In case of doubt, ask a native English speaker for their opinion.\r\n\r\nFor the record, I am not a native speaker. This issue has been brought to my attention because of https://bugs.launchpad.net/ubuntu/+source/lintian/+bug/608231\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5565\n**Reporter:** @gasche\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:23:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Monitored by:** @gasche @damiendoligez\n\n## Bug description\n\nEugen Zalinescu reported on the beginner's list that the \"Format mini-guide\" contains stale code using (Format.printf \"%a\") that does not type anymore.\r\n\r\nformat guide: http://caml.inria.fr/resources/doc/guides/format.en.html\r\n\r\nlist discussion: http://tech.groups.yahoo.com/group/ocaml_beginners/message/13423\r\n\r\nThe problem is that `Format.printf \"%a\"` takes a formatter-parametrized (formatter -> 'a -> unit) argument, rather than simply ('a -> unit) as this mini-guide assumes.\r\n\r\nI believe the easiest fix would be to remove this \"using printf\" section entirely, as the following \"using fprintf\" section provides the same information.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5539\n**Reporter:** eugenz\n**Status:** closed (set by @damiendoligez on 2012-03-14T16:13:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.12.1\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation of the Format module contains a broken link: http://caml.inria.fr/resources/doc/guides/format.html.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5517\n**Reporter:** grande\n**Status:** closed (set by @damiendoligez on 2012-03-26T09:39:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n**Monitored by:** @damiendoligez\n\n## Bug description\n\nThe link ftp://ftp.inria.fr/INRIA/publication/RT/RT-0141.ps.gz found in the introduction of chapter 22 (The num library) of the manual is broken.\r\n\r\nThe document can actually be found here (in an archive):\r\nftp://ftp.inria.fr/INRIA/Projects/cristal/caml/V3.1/doc_arith.tar.Z\r\n\r\nor here (with page number mismatch):\r\nhttp://hal.inria.fr/docs/00/07/00/27/PS/RT-0141.ps\r\nhttp://hal.inria.fr/docs/00/07/00/27/PDF/RT-0141.pdf\r\n\r\nBTW, maybe it could be a real link (vs. just the address).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5506\n**Reporter:** kosik\n**Assigned to:** meyer\n**Status:** closed (set by @damiendoligez on 2012-09-20T16:17:40Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** text\n**Version:** 3.12.0\n**Target version:** 4.00.1+dev\n**Category:** documentation\n\n## Bug description\n\nIn the reference manual\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual003.html#toc11\r\n\r\nFor consistency,\r\n\r\n\t#load \"camlp4o.cma\";;\r\n\r\nshould also be prefixed with a black hash-character to indicate that in addition to # prompt, the user must type # also himself (like it is in the #load \"dynlink.cma\";; case)\r\n-------------------------------------------------------------------------------\r\nSimilarly, this line:\r\n\r\n  let lexer = make_lexer [\"(\"; \")\"; \"+\"; \"-\"; \"*\"; \"/\"];;\r\n\r\nshould in the text (showing toplevel-interaction) be prefixed with '#', just like:\r\n\r\n  #let token_stream = lexer(Stream.of_string \"1.0 +x\");;\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5497\n**Reporter:** kosik\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:46:32Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 3.12.1\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Related to:** #5261\n**Monitored by:** @maranget @dbuenzli\n\n## Bug description\n\nThe program that renders HTML and PDF version of the Reference Manual projects ordinary apostrophe-character to (in case of HTML)\r\n\r\n  &#X2019;\r\n\r\nand in case of PDFs probably to some non-ASCII character.\r\n\r\nAs a result, when reader tries to copy-paste provided examples to Ocaml toplevel, e.g.\r\n\r\n   http://caml.inria.fr/pub/docs/manual-ocaml/manual003.html#toc5\r\n\r\nhe gets an error:\r\n\r\n   # ??a’;;\r\n   Error: Illegal character (\\128)\r\n\r\n\"Reader-friendly-ness\" can be improved if source-code excerpts, that include apostrophe-characters, can be freely copy-pasted without the need to manually translate characters.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5496\n**Reporter:** kosik\n**Assigned to:** @protz\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:46:21Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.12.1\n**Category:** documentation\n**Has duplicate:** #4833\n**Related to:** #5261\n\n## Bug description\n\nSection 7.2 of the Reference Manual:\r\n\r\n  http://caml.inria.fr/pub/docs/manual-ocaml/manual021.html#toc69\r\n\r\ninstructs the reader to perform:\r\n\r\n  #load \"camlp4o.cma\";;\r\n\r\nif he wants to take advantage of syntactic sugar for stream literals.\r\n\r\nThat does not seem to be enough.\n\n## Steps to reproduce\n\nIf one tries, one will get an error message:\r\n\r\n  Error: Reference to undefined global `Dynlink'\r\n\r\nThe complete instructions are, e.g.:\r\n\r\n  $ rlwrap ocaml\r\n  # #load \"dynlink.cma\";;\r\n  # #load \"camlp4o.cma\";;\r\n\r\nThen we can use stream literals:\r\n\r\n  # [< '3 >];;\r\n  - : int Stream.t = <abstr>\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5489\n**Reporter:** mehdi\n**Assigned to:** @lefessan\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:44:31Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1+dev\n**Fixed in version:** 3.12.1+dev\n**Category:** documentation\n\n## Bug description\n\nHi,\r\n\r\nThere is a typo in stdlib/format.mli at line 644. I think the author of the patch meant \"@since 3.12.2\" instead of \"@since 3.12.2\".\r\n\r\nRegards,\r\n\r\n-- \r\nMehdi\n\n## Additional information\n\nIntroduced in r11281.\r\nSee http://caml.inria.fr/cgi-bin/viewvc.cgi/ocaml/version/3.12/stdlib/format.mli?r1=11281&r2=11280&pathrev=11281\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5486\n**Reporter:** blue_prawn\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:44:30Z)\n**Resolution:** not a bug\n**Severity:** trivial\n**Platform:** noarch\n**Version:** 3.12.1\n**Category:** documentation\n\n## Bug description\n\ntm_sec : int;  (*  Seconds 0..60  *)\r\n\r\nthe range is in fact 0..59\n\n## File attachments\n\n- [unix_tm_sec_0_59.patch](https://gist.githubusercontent.com/vicuna/006c24b11a6dd142519d116f067a10c0/raw/dc0c529b77431dadbd735820c90cb6e35e17f3f4/unix_tm_sec_0_59.patch)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5479\n**Reporter:** kosik\n**Assigned to:** @lefessan\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:44:20Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Version:** 3.12.0\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Monitored by:** kosik\n\n## Bug description\n\nSo far, every exception that may be raised by a particular function is also mentioned in the documentation to that function. This practise is violated in case of Num.num_of_string function which is probably a mistake.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5464\n**Reporter:** mehdi\n**Assigned to:** @lefessan\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:44:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Monitored by:** @lefessan @glondu\n\n## Bug description\n\nThere is one problem in the info file\r\n\tusr/share/info/ocaml.info.gz\r\nbecause it does not ship info dir sections. Thus, calling install-info (the GNU version) on these files issue a warning:\r\n\tinstall-info: warning: no info dir entry in `/usr/share/info/...'\r\nand the file is not included in the dir file.\r\n\r\nThe source of this problem is the following missing entry in the\r\ntexinfo source:\r\n\t@dircategory Package short info\r\n\t@direntry\r\n\t* menu item 1: (infofile).\t\tDescription.\r\n\t* menu item 2: (infofile2).\t\tDescription.\r\n\t@end direntry\n\n## Additional information\n\nAdditional information can be found in:\r\n  http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=528887\r\n  http://lintian.debian.org/tags/info-document-missing-dir-entry.html\r\n  http://lintian.debian.org/tags/info-document-missing-dir-section.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5455\n**Reporter:** @dbuenzli\n**Status:** closed (set by @damiendoligez on 2011-12-29T22:11:53Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** tweak\n**Version:** 3.12.1\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nThe README of the emacs mode should also mention to add the two lines below to the .emacs. They allow to automatically invoke caml-mode when a source file starts with one of these lines : \r\n\r\n#!/usr/local/bin/ocamlrun /usr/local/bin/ocaml\r\n#!/usr/bin/env ocaml\r\n\r\nBest,\r\n\r\nDaniel\r\n\r\n--- ocaml-3.12.1/emacs/README.old       2011-12-29 14:06:28.000000000 +0100\r\n+++ ocaml-3.12.1/emacs/README   2011-12-29 14:07:50.000000000 +0100\r\n@@ -19,6 +19,8 @@\r\n           (cons '(\"\\\\.ml[iylp]?$\" . caml-mode) auto-mode-alist))\r\n     (autoload 'caml-mode \"caml\" \"Major mode for editing Caml code.\" t)\r\n     (autoload 'run-caml \"inf-caml\" \"Run an inferior Caml process.\" t)\r\n+    (add-to-list 'interpreter-mode-alist '(\"ocamlrun\" . caml-mode))\r\n+    (add-to-list 'interpreter-mode-alist '(\"ocaml\" . caml-mode))\r\n \r\n I added camldebug.el from the original distribution, since there will\r\n soon be a debugger for Objective Caml, but I do not know enough about\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5422\n**Reporter:** ripoche\n**Assigned to:** @protz\n**Status:** closed (set by @protz on 2011-12-21T14:16:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.12.1\n**Category:** documentation\n**Monitored by:** @jberdine\n\n## Bug description\n\nA quick glance to otherlibs/win32unix/unix.ml reveals that:\r\n- (set|clear)_nonblock are implemented.\r\n- rewinddir is implemented by closing and reopening the directory.\r\n- times is implemented (could probably be improved).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5415\n**Reporter:** @Chris00\n**Assigned to:** @xavierleroy\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:48:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n**Monitored by:** @gasche @Chris00\n\n## Bug description\n\nThe manual, section 18.7.2, describes a way to obtain an OCaml closure using Callback.register.  However, this is not always desirable.  Take the example of a C function, say [root], finding a root of a function [f: float -> float].  Passing [f] through Callback.register means that the code will not work when using [root] from different threads.  More important even is that [f] cannot call [root] (which is sometimes the case)!  Therefore, it would be nice if the manual were saying that an alternative way, as the one described below, is guaranteed to work.\r\n\r\nCAMLexport value root(value vf, value x)\r\n{\r\n  CAMLparam2(vf, x);\r\n  value *closure_f = &vf;\r\n\r\n...\r\n  caml_callback(*closure_f, x);\r\n...\r\n}\n\n## Additional information\n\nP.S. Of course one could create a new string on each call of [root], appending a number to a given prefix.  This is both heavy and impractical given the poor C string handling library.\n\n## File attachments\n\n- [manual032-2.txt](https://gist.githubusercontent.com/vicuna/3f43c715789109ea0d5a06fb6c21f5fc/raw/8d2c5619ac85220248cbf2a70e5e1ed698a0e51f/manual032-2.txt)\n- [manual032.txt](https://gist.githubusercontent.com/vicuna/3f43c715789109ea0d5a06fb6c21f5fc/raw/653f3f4b8d343d3ea2207e67f42a20830dff4101/manual032.txt)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5394\n**Reporter:** arj\n**Assigned to:** meyer\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:46:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1\n**Category:** documentation\n**Monitored by:** arj @protz\n\n## Bug description\n\nIn man ocamlc, the documentation for -dtypes is missing.\r\nWhen calling ocamlc --help, it says?:\r\n-dtypes  (deprecated) same as -annot\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5381\n**Reporter:** gerd\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:19:28Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1\n**Category:** documentation\n**Related to:** #6022\n**Monitored by:** @protz @ygrek\n\n## Bug description\n\nObviously, this file was modified in the download directory, because the checksum changed recently.\r\n\r\nI do not know the reason, and can only speculate: Maybe the site was hacked, and an intruder replaced the file. Maybe there was a patch release under the same file name.\n\n## Additional information\n\nIf the change is because of a patch release, please don't do this. All distributors run into problems when a file is updated under the same name, because we cannot distinguish between intentional and non-intentional changes, and our distribution mechanisms do not handle this type of change well. Either the file is rejected because an intrusion is suspected, or the update is just ignored and not seen. Also, the replication mechanisms are sometimes confused. I'm reporting as GODI maintainer, but I know this problem exists basically everywhere in the one or other form.\r\n\r\nWorkaround: add a patch version number to the file.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5372\n**Reporter:** kosik\n**Assigned to:** @protz\n**Status:** closed (set by @protz on 2011-12-21T13:50:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.12.1\n**Category:** documentation\n\n## Bug description\n\nOn this page:\r\n\r\nhttp://caml.inria.fr/resources/doc/guides/debug.en.html\r\n\r\nis a sample code:\r\n\r\n(* file uncaught.ml *)\r\nlet l = ref [];;\r\nlet find_address name = List.assoc name !l;;\r\nlet add_address name adress = l := (name, address) :: ! l;;\r\nadd_address \"IRIA\" \"Rocquencourt\";;\r\nprint_string (find_address \"INRIA\"); print_newline ();;\r\n\r\nIt is not compilable. There is unbound variable \"address\".\n\n## Additional information\n\nFormal parameter \"adress\" must be changed to \"address\".\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5326\n**Reporter:** sergstesh\n**Status:** closed (set by @damiendoligez on 2011-08-03T15:51:54Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Version:** 3.12.1\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/download.en.html and http://caml.inria.fr/pub/distrib/ocaml-3.12/ show [   ]  ocaml-3.12-refman.* and not [   ]  ocaml-3.12.1-refman.* as they should.\r\n\r\nI.e. the documentation is for version 3.12 and not for the newest 3.12.1 version.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5317\n**Reporter:** guttman\n**Status:** closed (set by @damiendoligez on 2011-07-29T15:22:04Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Category:** documentation\n**Duplicate of:** #5132\n\n## Bug description\n\nAt URL http://caml.inria.fr/pub/docs/manual-ocaml/manual003.html\r\nas of today, there are errors reported in the code being illustrated. \r\n\r\nThe first error is \r\n\r\n##load \"camlp4o.cma\";;\r\nCharacters -1–1:\r\nError: Reference to undefined global ‘Dynlink’\r\n \r\nafter which there are of course others, such as \r\n\r\nError: Syntax error\r\n \r\n#let parse_expression = parser [< e = parse_expr; _ = Stream.empty >] -> e;;\r\nError: Syntax error\r\nComposing the lexer and parser, we finally obtain a function to read an expression from a character string:\r\n\r\n#let read_expression s = parse_expression(lexer(Stream.of_string s));;\r\nError: Unbound value parse_expression\n\n## Additional information\n\nas of 20 July 2011.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5264\n**Reporter:** znajem\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:46:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Child of:** #5261\n\n## Bug description\n\nThe parsing part of the (symbolic processing of expressions) example reports errors. The error messages are included in both the HTML and PDF versions of the release 3.12 manual. \r\n\r\nTo fix, I added the following line to the beginning of the code:\r\n##load \"dynlink.cma\" \r\n\r\n-------\r\n\r\nAs a minor suggestion, I think the example should indicate that it uses polymorphic variants (which is not introduced until section 4.2) rather than the normal variants that were introduced in section 1.4\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5261\n**Reporter:** @rixed\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:46:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Category:** documentation\n**Has duplicate:** #4833 #5132\n**Related to:** #5496 #5497\n**Parent of:** #5264\n\n## Bug description\n\nIn section 1.8 (Pretty-printing and parsing), the code samples result in various toplevel errors.\r\nAccording to Rémi Vanicat's message on ocaml_beginners ML of the 02 May 2011:\r\n\r\n\"  The first problem is a lacking #load \"dynlink.cma\";; before\r\nthe #load \"camlp4o.cma\";; Then there is an encoding problem: the ' in\r\nparser should be the ' char and not the ??? char.  \"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5253\n**Reporter:** @Chris00\n**Status:** closed (set by @damiendoligez on 2016-03-22T15:14:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.13.0+dev\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n**Tags:** patch\n**Monitored by:** @dbuenzli @Chris00\n\n## Bug description\n\nIt is rather inconvenient to have to go back to the manual [1] to find out whether a function has been implemented under windows.  It would be more convenient to have this information right in the documentation of the Unix module (especially if one searches the API with ocamldoc).  Moreover, I believe this would keep the doc. more in sync: for example [getgid] is reported twice with different comments, [getegid] is said to be not implemented while it is, [geteuid] is not mentioned,...\r\n\r\n\r\n[1] http://caml.inria.fr/pub/docs/manual-ocaml/manual035.html\n\n## File attachments\n\n- [unix.patch](https://gist.githubusercontent.com/vicuna/e7eb95244850db96795f25ffc8c73dd4/raw/3728b94cba3e07dd4f4c438e2e3f415bb4e4db9a/unix.patch)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5252\n**Reporter:** @glondu\n**Status:** closed (set by @damiendoligez on 2011-04-29T19:33:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.1+dev\n**Category:** documentation\n\n## Bug description\n\n\"ouput\" is used instead of \"output\" at several places in the source tree. Attached is a patch that fixes that.\n\n## File attachments\n\n- [0001-Fix-typo-ouput-output.patch](https://gist.githubusercontent.com/vicuna/a1d06990be8dec0f99a722013f9f7fee/raw/11a40b3221707a65361b04d70effe301dba202bc/0001-Fix-typo-ouput-output.patch)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5230\n**Reporter:** Pascal Cuoq\n**Assigned to:** @pierreweis\n**Status:** closed (set by @xavierleroy on 2012-09-25T18:06:17Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Category:** documentation\n\n## Bug description\n\nThe documentation of Scanf.Scanning.open_in reuses that of previous function from_file. Instances of \"from_file\" in the body of the documentation have not been renamed.\r\n\r\nFrom http://caml.inria.fr/pub/docs/manual-ocaml/libref/Scanf.Scanning.html :\r\n\r\nval open_in : string -> in_channel\r\nBufferized file reading in text mode. The efficient and usual way to scan text mode files (in effect, from_file returns a scanning buffer that reads characters in large chunks, rather than one character at a time as buffers returned by from_channel below do). Scanning.from_file fname returns a scanning buffer which reads from the given file fname in text mode.\r\nSince 3.12.0\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5228\n**Reporter:** @dbuenzli\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2012-09-25T18:06:17Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.12.1+dev\n**Category:** documentation\n**Monitored by:** \"Julien Signoles\"\n\n## Bug description\n\nshould mention that Sys_error may be raised. \r\n\r\nThanks,\r\n\r\nDaniel\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5211\n**Reporter:** william\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2012-09-25T18:07:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Fixed in version:** 3.12.1+dev\n**Category:** documentation\n**Has duplicate:** #5298\n\n## Bug description\n\nthe parser example in the Genlex documentation is not complete : it took me hours to compile a similar example with ocamlbuild.\r\nFirst it is not \"let parse_expr = parser [...]\" but \"let rec parse_expr = parser [...]\".\r\nSecond, to compile this example in a file called example.ml, one needs to do :\r\necho \"<example.ml>:pp(camlp4o)\" > _tags\r\nocamlbuild example.d.byte\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5202\n**Reporter:** william\n**Status:** closed (set by @damiendoligez on 2011-01-12T17:49:54Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Fixed in version:** 3.12.1+dev\n**Category:** documentation\n**Monitored by:** @Chris00\n\n## Bug description\n\nthe documentation associated to atan2 is :\r\n\"atan x y returns the arc tangent of y /. x. The signs of x and y are used to determine the quadrant of the result. Result is in radians and is between -pi and pi.\"\r\n\r\nBut it should be \r\n\"atan y x returns the arc tangent of y /. x. The signs of x and y are used to determine the quadrant of the result. Result is in radians and is between -pi and pi.\"\r\n\r\nx and y are swapped !!!!!\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5151\n**Reporter:** @Chris00\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2012-03-24T14:01:42Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Fixed in version:** 3.12.1+dev\n**Category:** documentation\n\n## Bug description\n\nContrarily to what the documentation says <http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#toc146>, -pthread is not anymore supported by ocamlmklib.\n\n## Additional information\n\n$ ocamlmklib -pthread\r\nUnknown option -pthread\r\n$ ocamlmklib -h\r\nUsage: ocamlmklib [options] <.cmo|.cma|.cmx|.cmxa|.ml|.mli|.o|.a|.obj|.lib|.dll files>\r\nOptions are:\r\n-cclib <lib>   C library passed to ocamlc -a or ocamlopt -a only\r\n-ccopt <opt>   C option passed to ocamlc -a or ocamlopt -a only\r\n-custom        disable dynamic loading\r\n-dllpath <dir> Add <dir> to the run-time search path for DLLs\r\n-F<dir>        Specify a framework directory (MacOSX)\r\n-framework <name>    Use framework <name> (MacOSX)\r\n-help          Print this help message and exit\r\n--help         Same as -help\r\n-h             Same as -help\r\n-I <dir>       Add <dir> to the path searched for Caml object files\r\n-failsafe      fall back to static linking if DLL construction failed\r\n-ldopt <opt>   C option passed to the shared linker only\r\n-linkall       Build Caml archive with link-all behavior\r\n-l<lib>        Specify a dependent C library\r\n-L<dir>        Add <dir> to the path searched for C libraries\r\n-ocamlc <cmd>  Use <cmd> in place of \"ocamlc\"\r\n-ocamlopt <cmd> Use <cmd> in place of \"ocamlopt\"\r\n-o <name>      Generated Caml library is named <name>.cma or <name>.cmxa\r\n-oc <name>     Generated C library is named dll<name>.so or lib<name>.a\r\n-rpath <dir>   Same as -dllpath <dir>\r\n-R<dir>        Same as -rpath\r\n-verbose       Print commands before executing them\r\n-v             same as -verbose\r\n-version       Print version and exit\r\n-vnum          Print version number and exit\r\n-Wl,-rpath,<dir>     Same as -dllpath <dir>\r\n-Wl,-rpath -Wl,<dir> Same as -dllpath <dir>\r\n-Wl,-R<dir>          Same as -dllpath <dir>\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5132\n**Reporter:** jeremy\n**Status:** closed (set by @damiendoligez on 2011-07-29T15:18:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0\n**Category:** documentation\n**Duplicate of:** #5261\n**Has duplicate:** #5317\n\n## Bug description\n\nChapter 1.8 : Pretty Printing and Parsing\r\n\r\nIn the currently posted version of this manual section, what actually gets demonstrated is camlp4 failing to load, and a bunch of resulting errors.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5113\n**Reporter:** Vassili Karpov\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:07:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nOutline (table of contents/index) inside ocaml-3.12-refman.pdf contains\r\ngarbage in some of the entries:\r\n\r\n7.1\r\nInteger literals for types =5.77pt plus 1.83pt minus 1.22ptint32, =5.77pt plus 1.83pt minus 1.22ptint64 and =5.77pt plus 1.83pt minus 1.22ptnativeint 136\r\n\r\n9.5\r\nBuilding custom toplevel systems: =5.77pt plus 1.83pt minus 1.22ptocamlmktop 172\r\n\r\nAnd likewise in 12.1,12.3,18.11,21.2\r\n\r\nEasily visible with any PDF viewer: xpdf, okular or llpp (to get to the outline\r\none must press 'o')\r\n\r\nThe problem is present in 3.11 refman too.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5097\n**Reporter:** nlinger\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2012-03-24T14:01:44Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.12.0+beta1 or 3.12.0+rc1\n**Category:** documentation\n**Monitored by:** milanst sweeks yminsky\n\n## Bug description\n\nI'm not sure if this is a documentation bug or a type system bug.\r\n\r\nThe documentation for named type parameters in the 3.12 documentation (section 7.13) states that a type parameter [a] in [fun (type a) -> expr] \"is considered abstract in the scope of the sub-expression\".\r\n\r\nThis explanation makes sense of the following error message:\r\n\r\n  let const_nine (type a) (x:a) : a = 9\r\n  --> \r\n  Error: This expression has type int but an expression was expected of type a\r\n\r\nHowever, there is the following caveat at the end of 7.13: \"This construction by itself does not make polymorphic the type variable it introduces\".  I don't know what this means.  It seems to contradict the first excerpt and the above error message.\r\n\r\nThen there is the example I have included in the \"additional information\" section, which seems to fit more with the caveat.  At this point, I don't know what to assume about [a] when I say [let f ... (type a) ... = ...].\n\n## Additional information\n\nFor the following fragment of a GADT-like typed object language implementation\r\n\r\n  module type Equal = sig\r\n    type ('a, 'b) t\r\n    val cast : ('a, 'b) t -> 'a -> 'b\r\n  end\r\n\r\n  module M (Equal:Equal) = struct\r\n\r\n    type 'a expr =\r\n      | Plus of (int, 'a) Equal.t * int expr * int expr\r\n\r\n    let rec foo : 'a. 'a expr -> 'a = fun e ->\r\n      match e with\r\n      | Plus (p, e1, e2) -> Equal.cast p (foo e1 + foo e2)\r\n    ;;\r\n\r\n    let rec bar (type a) (e : a expr) : a =\r\n      match e with\r\n      | Plus (p, e1, e2) -> Equal.cast p (bar e1 + bar e2)\r\n    ;;\r\n\r\n  end\r\n\r\nthe type checker infers the following types\r\n\r\n  module type Equal = sig\r\n    type ('a, 'b) t val cast : ('a, 'b) t -> 'a -> 'b\r\n  end\r\n  module M :\r\n    functor (Equal : Equal) -> sig\r\n      type 'a expr = Plus of (int, 'a) Equal.t * int expr * int expr\r\n      val foo : 'a expr -> 'a\r\n      val bar : int expr -> int\r\n    end\r\n\r\nI'm surprised that the evaluator [bar] was assigned a type at all rather than causing a type error like [const_nine] does.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5085\n**Reporter:** mehdi\n**Assigned to:** @xavierleroy\n**Status:** closed (set by @xavierleroy on 2010-07-06T12:00:11Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.2\n**Category:** documentation\n\n## Bug description\n\nHi,\r\n\r\nWhile reading [1], I stumbled upon a tiny typo:\r\n\r\n  \"Unlike the Pervasive module\"\r\n\r\nshould be\r\n\r\n  \"Unlike the Pervasives module\"\r\n\r\nI guess. I didn't check if there were other similar typos.\r\n\r\n[1] http://caml.inria.fr/pub/docs/manual-ocaml/manual034.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5082\n**Reporter:** herbelin\n**Assigned to:** @pierreweis\n**Status:** closed (set by @pierreweis on 2011-06-07T09:32:27Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** text\n**Category:** documentation\n\n## Bug description\n\nHI, there are a few problems at http://caml.inria.fr/resources/doc/guides/format.html, especially in paragraph \"Practical advices\". Some text \"... after the =Don't ...\" is obviously broken. At some other places, one find uopt for up, strins for strings. Also, abbreviating \"parens\" is understandable but surprising. In « \" =\" », the space would be better rendered if non-breaking. Best regards.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5060\n**Reporter:** KKostya\n**Status:** closed (set by @garrigue on 2010-05-26T04:57:39Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.2\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n\n## Bug description\n\nIn 18.7.2 :\r\nlet f x = print_string \"f is applied to \"; print_int n; print_newline()\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 5035\n**Reporter:** kaustuv\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:18:30Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.11.2\n**Target version:** 4.00.2+dev\n**Category:** documentation\n**Duplicate of:** #3688\n\n## Bug description\n\nThe manual page for expressions (http://caml.inria.fr/pub/docs/manual-ocaml/expr.html) does not document the forms\r\n\r\n   | expr.{expr}\r\n   | expr.{expr} <- expr\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 5025\n**Reporter:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2010-04-18T08:38:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n**Monitored by:** @ygrek\n\n## Bug description\n\nThe manual page for the Unix module says that lockf is not implemented for Win32 ports. As far as I can see, this is not the case.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4985\n**Reporter:** @ygrek\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2012-03-24T14:01:47Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.2\n**Category:** documentation\n\n## Bug description\n\nFrom Chapter 6.8.1 http://caml.inria.fr/pub/docs/manual-ocaml/manual016.html\r\n\r\nThis variance information is used to decide subtyping relations when checking the validity of :> coercions (see section 6.7.5).\r\n\r\nProbably should reference section 6.7.6 (Coercions) instead.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4980\n**Reporter:** yziquel\n**Status:** closed (set by @xavierleroy on 2010-04-18T12:38:28Z)\n**Resolution:** not fixable\n**Priority:** normal\n**Severity:** major\n**Version:** 3.11.1\n**Category:** documentation\n**Monitored by:** yziquel\n\n## Bug description\n\nI just happened to stumble on the following bug.\r\n\r\nocaml/ocaml#4537\r\n\r\nThe bug is closed, or rather \"won't fix\"ed and I believe it's a shame. Here's the context.\r\n\r\nI've been trying to embed OCaml code in a main C app. I'm on a amd64. I look at the manual, with the -output-obj option. Doesn't seem to work, at least not the way it is presented there. So I simply compile my C app in a .o file, my OCaml slave code in a .cmx, and ocamlopt the bunch of the two. Concerning headers, I put them when the C compiler requires them. So I had \r\n\r\n#include <caml/memory.h>\r\n#include <caml/mlvalues.h>\r\n#include <caml/callback.h>\r\n\r\nwithout caml/alloc.h, as the C compiler didn't complain. So I was doing a caml_copy_string, and doing an allocation. Type truncation -> invalid pointer -> segfault.\r\n\r\nI believe the issue should be solved, as a header issue in the C API is something that is sensitive. I you do not care to fix it, then at least please provide an example in the manual of embedding OCaml into C with the following constraints:\r\n\r\n-1- Compiles seamlessly (you currently have pervasives symbols missing when trying to link)\r\n-2- Allocates OCaml values from C side (a string or a custom block; not a Val_int...)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4962\n**Reporter:** mehdi\n**Status:** closed (set by @xavierleroy on 2010-04-18T09:19:27Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.1\n**Category:** documentation\n**Monitored by:** @glondu \"Julien Signoles\"\n\n## Bug description\n\nThe summary is self explanatory but here are the steps to show the described behaviour:\r\n\r\n1) cd `mktemp -d`\r\n2) echo 'let _ = Sys.remove \"toto\"' > toto.ml\r\n3) ocamlc -o toto toto.ml\r\n4) ./toto\r\nFatal error: exception Sys_error(\"toto: No such file or directory\")\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4954\n**Reporter:** @rixed\n**Status:** closed (set by @damiendoligez on 2010-01-07T14:45:28Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.1\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n\n## Bug description\n\nChapter 20 (standard library) does not link to the Pervasive module description,\r\nalthough section 6.7.4 refer to this page for further documentation on the operators : \r\n\r\n\"(See the description of the standard library module Pervasive in chapter 20 for more details)\".\r\n\r\nPervasive module description should be added in chapter 20.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4948\n**Reporter:** @dbuenzli\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:04:29Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** tweak\n**Version:** 3.11.1\n**Category:** documentation\n**Related to:** #5038\n**Monitored by:** @dbuenzli @Chris00\n\n## Bug description\n\nThe documentation makes it sound like there exists a single NaN value. \r\n\r\nThe following improvements could be done : \r\n\r\n1) In the documentation of compare, note that compare equates all NaN value.\r\n2) In the paragraph preceding floating point functions, indicate that\r\n   0. /. 0. returns a NaN value (instead of Pervasives.nan) and that\r\n   any function taking a NaN (instead of Pervasives.nan) value returns a \r\n   NaN value (instead of Pervasives.nan).\r\n3) In the documentation of Pervasives.nan, indicate that nan is a NaN value\r\n   but that may not be the one you get in 0. /. 0.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4942\n**Reporter:** RolandGilead\n**Status:** closed (set by @xavierleroy on 2009-12-30T14:54:04Z)\n**Resolution:** duplicate\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n**Related to:** #4941\n\n## Bug description\n\nsee ocaml/ocaml#4941\r\nthe issue with ID 0004941\r\n\"Physical equality is a very subtle beast.\" - ertai\r\n\r\nOne should not have to experiment to determine semantics.\r\n\r\nUnder what conditions physical equality holds is not wholly documented except for objects and it is incongruous that object equality uses (=) not (==) even though (==) is the physical equality operator and  \"Two objects are equal if and only if they are physically equal. In particular, an object and its copy are not equal.\"\n\n## Additional information\n\nQuick fix, from Pervasives.html\r\n\"On mutable structures, e1 == e2 is true if and only if physical modification of e1 also affects e2.\"\r\nshould be changed to \r\n\"On mutable structures, if e1 == e2 is true, physical modification of e1 also affects e2.\"\r\n\r\nThis way A-->B rather than the current A<-->B.\r\n<-- = --> = \"implies\"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4920\n**Reporter:** ecc\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:23:48Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.11.1\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nIn the manual chapter \"Interfacing C with Objective Caml\", subsection \"Advanced topic: callbacks from C to Caml\", sub-subsection \"Embedding the Caml code in the C code\":\r\n\r\n1. It's not necessary to include unix.cma in the ocamlopt command, or -lunix in the gcc command (unless required by the OCaml code, of course)\r\n\r\n2. It is necessary to add both \"-lm\" and \"-ldl\" at the end of the gcc command line.\r\n\r\n(on Linux, at least)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4893\n**Reporter:** @rixed\n**Status:** closed (set by @garrigue on 2010-04-30T01:31:04Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.1\n**Category:** documentation\n\n## Bug description\n\nHere is what the book says :\r\n\r\n\"Normally the compiler generates a type error if you attempt to pass to a\r\nfunction a parameter whose type is different from the expected one. However, in\r\nthe specific case where the expected type is a non-labeled function type, and\r\nthe argument is a function expecting optional parameters, the compiler will\r\nattempt to transform the argument to have it match the expected type, by\r\npassing None for all optional parameters.\"\r\n\r\nActually, None is just a particular case when no other default value is given. If so, this default value is used instead to make the type compatible.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4881\n**Reporter:** ali\n**Status:** closed (set by @damiendoligez on 2009-10-02T09:15:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.1\n**Category:** documentation\n\n## Bug description\n\nAt http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html\r\nUnder \"Advanced use\"\r\nSentence\r\n\"To make this even more confortable, you may use type definitions ...\"\r\nShould read\r\n\"To make this even more comfortable, you may use type definitions ...\"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4866\n**Reporter:** Christophe\n**Status:** closed (set by @xavierleroy on 2013-08-31T10:48:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.1\n**Fixed in version:** 4.00.0+dev\n**Category:** documentation\n**Related to:** #5310\n\n## Bug description\n\nWhy the module Ratio, used by module Num, is not in the official documentation ?\r\nIt would be nicer, and more convenient !\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4837\n**Reporter:** rdr\n**Status:** closed (set by @damiendoligez on 2011-05-31T14:17:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.0\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n\n## Bug description\n\nIn 12.2.5 of the Ocaml Reference Manual lexeme_end is documented as returning:\r\n\r\n \"... the absolute position in the input text of\r\n   the end of the matched string.\"\r\n\r\nThe offset returned is actually of the first character past the matched string. This is correctly documented in the documentation for the Lexing module.\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4833\n**Reporter:** larsr\n**Status:** closed (set by @damiendoligez on 2012-02-01T12:52:06Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Fixed in version:** 3.12.1\n**Category:** documentation\n**Duplicate of:** #5261 #5496\n\n## Bug description\n\nOn http://caml.inria.fr/pub/docs/manual-ocaml/manual003.html#toc11\r\nit says you should #load \"camlp4o.cma\";;\r\nbut this fails with the message\r\nError: Reference to undefined global `Dynlink'\r\n\r\nThis is because you have to do #load \"dynlink.cma\";; first\r\n\r\nThe documentation should be updated to reflect this, to help the new users who just pick up the tutorial to try out ocaml\n\n## Additional information\n\nHere is a user who (like me) stumbled into this trap:\r\nhttp://www.nabble.com/Problem-using-camlp4o-on-windows.-td21688501.html\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4831\n**Reporter:** Julien Signoles\n**Assigned to:** @zoggy\n**Status:** closed (set by @zoggy on 2010-05-31T11:53:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n**Monitored by:** @ygrek\n\n## Bug description\n\nIt would be great if the documentation of the ocaml stdlib uses the ocamldoc tag @since in order to know when an element was introduced. Without this information, it is very hard for a library provider to preserve the compatibility with an old ocaml version: remember yourself when any recent feature was introduced is quite impossible.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4807\n**Reporter:** lavi\n**Assigned to:** @garrigue\n**Status:** closed (set by @xavierleroy on 2012-03-24T14:01:46Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n**Monitored by:** @ygrek\n\n## Bug description\n\nd'après le paragraphe 6.9.2 de la doc,\r\n\"fun x -> class ...\" est une fonction des valeurs vers les classes,\r\net l'application est comme l'application d'expression...\r\nDans l'exemple suivant, on s'attendrait donc à ce que les classes a et c produisent le même résultat. L'application devrait donc être plus détaillée.\r\n\r\n\r\nclass a = let () = print_endline \"hello\"\r\n  in object end\r\n\r\nclass b s =\r\n  let () = print_endline s\r\n  in object end\r\n\r\nclass c = b \"hello\"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4803\n**Reporter:** gildor\n**Status:** closed (set by @xavierleroy on 2010-05-14T08:25:55Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n**Related to:** #4753\n\n## Bug description\n\nI think the subsection \"18.3.6  Variants\" is misnamed, since it is only talking about \"Polymorphic variants\". Renaming chapter to \"18.3.6 Polymorphic variants\" should be better.\r\n\r\nAlso a couple of simple examples for \"18.3.4  Concrete types\" should also be welcomed, to illustrate variant value:\r\n\r\nConstructed term: None\r\nRepresentation: Value_int(0); first constant constructor of None | Some int\r\n\r\nConstructed term: Some 1234\r\nRepresentation: Block with size = 1 and tag = 0; first non-constant constructor of None | Some int and first field contains Value_int(1234) \r\n\r\nThanks\r\nSylvain Le Gall\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4779\n**Reporter:** warwick\n**Assigned to:** @pierreweis\n**Status:** closed (set by @xavierleroy on 2011-05-29T10:14:13Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.11.0\n**Category:** documentation\n\n## Bug description\n\nI'd like to suggest modifications to the documentation for the trigonometric functions in Pervasives...\r\n\r\nThis suggestion is motivated by my experience of using the atan2 function and not being 100% sure of whether the parameters should be specified in the order (atan2 y x) or (atan2 x y). It was straightforward to load up ocaml and test it out, but it would have been better to be documented.\r\n\r\n(* pervasives.mli ... *)\r\n\r\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" \"float\"\r\n(** [cos a] calculates the cosine of the angle [a] (specified in radians). *)\r\n\r\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" \"float\"\r\n(** [sin a] calculates the sine of the angle [a] (specified in radians). *)\r\n\r\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" \"float\"\r\n(** [tan a] calculates the tangent of the angle [a] (specified in radians). *)\r\n\r\nexternal acos : float -> float = \"caml_acos_float\" \"acos\" \"float\"\r\n(** [acos x] calculates the arc cosine of the number [x], returning an angle in radians. *)\r\n\r\nexternal asin : float -> float = \"caml_asin_float\" \"asin\" \"float\"\r\n(** [asin x] calculates the arc sine of the number [x], returning an angle in radians. *)\r\n\r\nexternal atan : float -> float = \"caml_atan_float\" \"atan\" \"float\"\r\n(** [atan x] calculates the arc tangent of the number [x], returning an angle in radians. *)\r\n\r\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\" \"float\"\r\n(** [atan2 y x] calculates the arc tangent of the point [y/x], returning an angle in radians. *)\r\n\r\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\" \"float\"\r\n(** [cosh h] calculates the hyperbolic cosine of the angle [h]. *)\r\n\r\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\" \"float\"\r\n(** [sinh h] calculates the hyperbolic sine of the angle [h]. *)\r\n\r\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\" \"float\"\r\n(** [tanh h] calculates the hyperbolic tangent of the angle [h]. *)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4753\n**Reporter:** @damiendoligez\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2010-04-27T07:08:56Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n**Related to:** #4803\n\n## Bug description\n\nEveryone calls them \"polymorphic variants\", but the documentation calls them \"variants\".\r\nTo many people, that term evokes the constructors or values of regular concrete types.\r\n\r\nIn order to remove the ambiguity, I think we should rename them to something like\r\n\"open variants\" or \"dynamic variants\".\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4743\n**Reporter:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2015-12-11T18:21:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n**Monitored by:** @hcarty\n\n## Bug description\n\n1. Chapter 18 mentions the new functions caml_register_generational_global_root and caml_remove_generational_global_root, but not caml_modify_generational_global_root. Moreover, the sentence \"The garbage collector takes advantage of the guarantee that v is not modified to scan it less often.\" leads to believe that generational global roots are really immutable.\r\n\r\n2. My understanding is that the new interface is always more efficient for immutable value. However, assignment (through caml_modify_generational_global_root) can make the new interface slower than the old one, although the slowdown would usually be negligible. Is this correct?  In which cases should we keep using the old interface instead of the new one?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4739\n**Reporter:** Mathias Kende\n**Status:** closed (set by @xavierleroy on 2009-03-28T15:50:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n\n## Bug description\n\nParagraph 18.5.1 of the documentation (Interfacing with C), speaks of the functions : caml_register_generational_global_root and caml_remove_generational_global_root. But these functions seem not to exist and should be removed from the documentation.\r\n\r\nAlso, paragraph 18.3.3 should mentions \"caml_modify\" and not \"modify\" to write in array of values.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4729\n**Reporter:** gildor\n**Status:** closed (set by @xavierleroy on 2009-03-28T17:00:15Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n\n## Bug description\n\nSupport for PF_INET6 is not implemented on windows. This should be written in \r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual035.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4728\n**Reporter:** gildor\n**Status:** closed (set by @xavierleroy on 2009-03-28T16:53:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n\n## Bug description\n\nI think windows 9x is no more supported as compilation target for OCaml. So there is no point explaining that functions are not available there.\r\n\r\nIn README.win32:\r\n\"Windows 95, 98 and ME are no longer supported.\"\r\nMain documentation target:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual035.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4727\n**Reporter:** gildor\n**Status:** closed (set by @xavierleroy on 2009-03-28T16:53:49Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n**Monitored by:** @Chris00\n\n## Bug description\n\nThe documentation tell the user that those three functions are not implemented on Windows. But they seem to be (at least Unix.select doesn't have the restriction stated).\r\n\r\nThose three functions should be removed from the Unix incompatibility with Windows documentation:\r\nhttp://caml.inria.fr/pub/docs/manual-ocaml/manual035.html\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4715\n**Reporter:** berke\n**Status:** closed (set by @xavierleroy on 2009-08-28T08:59:52Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n**Related to:** #3322\n**Monitored by:** @Yakobowski\n\n## Bug description\n\nThe compare_equal, etc. primitives do not first check for physical equality,\r\nleading to unnecessary comparisons on possibly deep structures when using = or match.\r\n\r\nThis would be a one-line fix.\n\n## Additional information\n\nMay be related to #3322\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4712\n**Reporter:** Pascal Cuoq\n**Status:** closed (set by @xclerc on 2009-09-16T12:52:07Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0\n**Category:** documentation\n\n## Bug description\n\nAccording to the documentation of printf, %g\r\n\"convert[s] a floating-point argument to decimal notation,\r\nin style f or e[...] (whichever is more compact)\".\r\n\r\nBut:\r\n\r\n        Objective Caml version 3.11.0\r\n\r\n# Format.printf \"%f\" 10. ;;\r\n10.000000- : unit = ()\r\n# Format.printf \"%e\" 10. ;;\r\n1.000000e+01- : unit = ()\r\n# Format.printf \"%g\" 10. ;;\r\n10- : unit = ()\r\n\r\nOn this example the string output with %g is identical neither \r\nto that with %f nor to that with %e.\r\nMy interpretation of the documentation\r\nis that it should. And my aesthetic sense says that the\r\noutput string should contain a decimal dot.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4664\n**Reporter:** @Chris00\n**Status:** closed (set by @xavierleroy on 2009-04-01T16:35:18Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Fixed in version:** 3.12.0+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation of Format.print_tab should read:\r\n\r\n  (** [print_tab ()] is equivalent to [print_tbreak 0 0]. *)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4656\n**Reporter:** matt\n**Status:** closed (set by @garrigue on 2008-11-28T23:38:17Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0+beta\n**Category:** documentation\n\n## Bug description\n\nChapter 3.10\r\n\r\nNote that since immediate objects do not define a class type, the have no such restriction.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4655\n**Reporter:** matt\n**Status:** closed (set by @xavierleroy on 2008-12-02T17:11:35Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0+beta\n**Category:** documentation\n\n## Bug description\n\nManque 2008 dans la ligne copyright du système Objective Caml, page 7\r\n\r\nSalutations\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4649\n**Reporter:** dario\n**Status:** closed (set by @xavierleroy on 2008-11-24T15:55:37Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10.2\n**Category:** documentation\n\n## Bug description\n\nThe Ocamlc manual page says the following about the -ccopt:\r\n\r\n\"Pass the given option to the C compiler and linker, when linking in “custom\r\nruntime” mode (see the -custom option). For instance, -ccopt -Ldir causes the\r\nC linker to search for C libraries in directory dir.\"\r\n\r\nThis states that -ccopt is only applicable in custom runtime mode.  But is it\r\nnot the case that -ccopt can also be used for dynamic linking?  I think that a\r\nmere rearrangement of the punctuation will make its true meaning clearer:\r\n\r\n\"Pass the given option to the C compiler and linker.  When linking in “custom\r\nruntime” mode, for instance, -ccopt -Ldir causes the C linker to search for C\r\nlibraries in directory dir (see the -custom option).\"\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4646\n**Reporter:** zack\n**Status:** closed (set by @xavierleroy on 2008-12-02T17:20:05Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.11.0+beta\n**Category:** documentation\n\n## Bug description\n\nthe exception Sys_blocked_io can actually be raised by I/O operations on {in,out}_channels, but is (surprisingly, to me) not documented anywhere.\r\n\r\nGrepping for it in the standard library directory does not return anything.\r\n\r\nCan you please document it somewhere in pervasives.mli?\r\n\r\nI see two possible places: as [Sys_error], i.e. everywhere it can be raised, or as a more generic comment after (** {6 Input/output} *) stating that all channels, when masking some non-blocking file descriptor, can raise [Sys_blocked_io].\r\n\r\nThanks in advance\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4635\n**Reporter:** warren\n**Status:** closed (set by @damiendoligez on 2008-12-03T14:05:32Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10.2\n**Category:** documentation\n\n## Bug description\n\nThe table in section 6.7 shows the relative precedences and associativity of operators and non-closed constructions. One row of this table states:\r\n\r\n  comparisons (= == <  etc.), all other infix symbols\r\n\r\nHowever this wording requires the reader to refer back to section 6.1 (Prefix and infix symbols) and to section 6.7.4 in order to piece together what these \"other infix symbols\" might be. It would be clearer if the manual simply stated:\r\n\r\n  comparisons (= <> == != < <= > >=), all other infix symbols (=... <... >... |... $...)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4634\n**Reporter:** warren\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2008-11-13T10:40:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.10.2\n**Category:** documentation\n\n## Bug description\n\nThe current documentation for Weak pointers states the following:\r\n\r\n  A weak pointer is a value that the garbage collector may erase at any time.\r\n\r\n(http://caml.inria.fr/pub/docs/manual-ocaml/libref/Weak.html) However, this is not the case. A more correct wording might be:\r\n\r\n  A weak pointer is a value that the garbage collector may erase whenever there is no other non-weak reference to the value of the weak pointer within the scope of the program.\n\n## Additional information\n\nSee this thread: http://caml.inria.fr/pub/ml-archives/caml-list/2008/10/0f4821421e9ec25aaa4e44a320c74cfa.en.html\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4629\n**Reporter:** @glondu\n**Status:** closed (set by @damiendoligez on 2008-10-29T12:39:30Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** tweak\n**Version:** 3.11.0+beta\n**Category:** documentation\n\n## Bug description\n\nThere are a few errors in manpages of ocamlc and ocamlopt, which are fixed by the attached patch.\n\n## File attachments\n\n- [ocaml-manpages.diff](https://gist.githubusercontent.com/vicuna/215e80490ed73239b30686613bd25778/raw/b60c6b760a2b347f0b8abb985f9572cf01dae08c/ocaml-manpages.diff)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4600\n**Reporter:** warren\n**Status:** closed (set by @damiendoligez on 2008-09-04T13:35:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10.2\n**Fixed in version:** 3.11+dev\n**Category:** documentation\n\n## Bug description\n\nWhen attempting to redefine the (&) operator in my module I discovered that it is right-associative although the manual says it is left-associative. Same goes for (&&) and (||). The manual should probably be corrected. (http://caml.inria.fr/pub/docs/manual-ocaml/expr.html#htoc70)\n"},{"labels":["documentation",null,null],"text":"**Original bug ID:** 4581\n**Reporter:** zheng-li\n**Assigned to:** @zoggy\n**Status:** closed (set by @zoggy on 2009-03-11T07:23:57Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n\n## Bug description\n\nThe problem is that RSS1 doesn't assign for each news item a time stamp. This can often confuse some feed readers.\r\n\r\nBtw, the bug report system should have a category on \"OCaml website\", or should we fire this kind of report elsewhere?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4547\n**Reporter:** gildor\n**Status:** closed (set by @xavierleroy on 2008-08-01T13:57:57Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.10.2\n**Category:** documentation\n\n## Bug description\n\nAll is in the title.\r\n\r\nI think the README.win32 file should be more precise about what is required from cygwin to be able to build MSVC version of the compiler.\r\n\r\nncurses (tput), make and diffutils (cmp) are required package from cygwin. I can make all the target using this additional 3 packages.\r\n\r\nRegards\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4525\n**Reporter:** @Chris00\n**Status:** closed (set by @damiendoligez on 2008-04-01T15:43:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10.1\n**Fixed in version:** 3.10.3+dev\n**Category:** documentation\n\n## Bug description\n\nThe Bigarray mli file repeatedly says that [Invalid_arg] is raised on various occasions while it is obviously [Invalid_argument] which is meant.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4514\n**Reporter:** Mathias Kende\n**Status:** closed (set by @damiendoligez on 2008-02-29T15:47:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.10.1\n**Fixed in version:** 3.11+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation for interfacing Caml with C has a reference in http://caml.inria.fr/pub/docs/manual-ocaml/manual032.html#htoc226 to the string_length function. I believe that it is deprecated and the documentation should say caml_string_length instead.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4488\n**Reporter:** barnier\n**Status:** closed (set by @damiendoligez on 2012-02-07T14:44:03Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10.0\n**Fixed in version:** 3.13.0+dev\n**Category:** documentation\n**Monitored by:** \"Julien Signoles\" jm\n\n## Bug description\n\nIn the documentation, it is specified that including:\r\n\r\n  module S = struct type t = int let x = 2 end\r\n\r\nin another module:\r\n\r\n  struct include S  let y = (x + 1 : t) end\r\n\r\nis equivalent to write:\r\n\r\n  struct type t = int  let x = 2  let y = (x + 1 : t) end\r\n\r\nHowever it is clearly not the case whenever side-effects\r\nare involved as in the following example:\r\n\r\nbarnier@beige:~$ ocaml\r\n        Objective Caml version 3.10.0\r\n\r\n# module M = struct let v = ref 1 end;;\r\nmodule M : sig val v : int ref end\r\n# module T = struct include M end;; \r\nmodule T : sig val v : int ref end\r\n# M.v := 2;;\r\n- : unit = ()\r\n# T.v;;\r\n- : int ref = {contents = 2}\r\n\r\nI don't know if the bug is in the doc or in the compiler,\r\nbut if it is the documentation, I would say that include\r\nconstructs are equivalent to write something like :\r\n\r\nmodule T = struct let v = M.v end\r\n\r\nwhich is quite different IMHO.\r\n\r\nRegards\r\n\r\n-- Nicolas Barnier\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4408\n**Reporter:** skaller\n**Status:** closed (set by @xavierleroy on 2007-11-06T16:07:47Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Version:** 3.10.0\n**Category:** documentation\n\n## Bug description\n\nocamldep options such as -modules is not documented in the manual nor in the man pages (the usage shows it though).\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4390\n**Reporter:** @alainfrisch\n**Assigned to:** @xavierleroy\n**Status:** closed (set by @xavierleroy on 2008-09-18T11:30:16Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nLe chapitre 18 du manuel ne dit pas comment lever une exception à plus d'un argument. Il faudrait ajouter soit des \"caml_raise_with_arg{2,3,..}\" dans fail.h, soit expliquer dans le manuel comment se débrouiller avec \"caml_raise\" (qui n'est pas mentionné). D'ailleurs, décrire la structure mémoire des exceptions semble nécessaire pour pouvoir capturer des exceptions spécifiques depuis le C.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4372\n**Reporter:** Oliver Bandel\n**Status:** closed (set by @xavierleroy on 2007-11-06T16:10:36Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** major\n**Version:** 3.10.0\n**Category:** documentation\n\n## Bug description\n\nfrom the documentation:\r\n\r\n=========================================\r\nmatch\texpr \r\nwith\tpattern1\t->\texpr1 \r\n|\t… \r\n|\tpatternn\t->\texprn\r\n=========================================\r\n\r\n\r\nshould be:\r\n=========================================\r\n\r\nmatch\texpr \r\nwith\tpattern1\t->\texpr1; expr1_2; expre1_3; ... \r\n|\t… \r\n|\tpatternn\t->\texprn; exprn_2; exprn_3; ...\r\n\r\n=========================================\r\n\r\n\r\nThe pattern match \"slurps up\" any expression of a sequence\r\nof expressions, that follows the \"->\" after a pattern.\n\n## Additional information\n\nThe documentation does not make clear the following behaviour:\r\n\r\n====================================================\r\nlet _ =\r\n\r\n  match \"a\" with\r\n      \"a\"  -> print_endline \"a found\"\r\n   |  \"b\"  -> print_endline \"b found\"\r\n   |  \"c\"  -> print_endline \"c found\"\r\n   | _ -> print_endline \"something else.\"\r\n   ;\r\n   print_endline \"After_all_matches!\"\r\n====================================================\r\n\r\nmust be coded as follows:\r\n====================================================\r\nlet _ =\r\n\r\n  begin\r\n    match \"a\" with\r\n        \"a\"  -> print_endline \"a found\"\r\n     |  \"b\"  -> print_endline \"b found\"\r\n     |  \"c\"  -> print_endline \"c found\"\r\n     | _ -> print_endline \"something else.\"\r\n   end\r\n   ;\r\n   print_endline \"After_all_matches!\"\r\n====================================================\r\n\r\n\r\nSo the documentation is not clear here.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4335\n**Reporter:** fmadero\n**Status:** closed (set by @xavierleroy on 2007-10-25T07:53:11Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** trivial\n**Version:** 3.10.0\n**Category:** documentation\n\n## Bug description\n\nI don't believe fib function on pg.12 is corect and I have verified it against another program http://csc.colstate.edu/summers/NOTES/Cs463/fibo.html and the definition http://en.wikipedia.org/wiki/Fibonacci_number.\r\n\r\nthe program could be changed to:\r\n# let rec fib n =\r\n     if n = 0 then 0\r\n     else if n = 1 then 1 else fib(n - 1) + fib(n - 2);;\r\n\r\nhere is the sample output, and it follows the definition\r\n# fib 0;;\r\n- : int = 0\r\n# fib 1;;\r\n- : int = 1\r\n# fib 2;;\r\n- : int = 1\r\n# fib 3;;\r\n- : int = 2\r\n# fib 4;;\r\n- : int = 3\r\n# fib 5;;\r\n- : int = 5\r\n# fib 6;;\r\n- : int = 8\r\n# fib 7;;\r\n- : int = 13\r\n# fib 10;;\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4284\n**Reporter:** Jean-Christophe Filliatre\n**Status:** closed (set by @xavierleroy on 2007-11-01T09:05:45Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10+dev\n**Category:** documentation\n\n## Bug description\n\nIn the online reference manual of version 3.10.0, section 11.4 still says\r\nregarding the use of OCAMLRUNPARAM with ocamlopt\r\n``option b is ignored (stack backtraces on uncaught exceptions are not printed)''\r\n(contrary to what the changes say).\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4270\n**Reporter:** eda\n**Assigned to:** @garrigue\n**Status:** assigned (set by @xavierleroy on 2007-11-10T14:35:00Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Version:** 3.09.2\n**Category:** documentation\n**Tags:** patch\n\n## Bug description\n\nWritten a man page for ocamlbrowser according to The Objective Caml user's manual.\n\n## File attachments\n\n- [ocamlbrowser.1](https://gist.githubusercontent.com/vicuna/e4b33f9381dd5d44cf2aec69749739c5/raw/99e4a8a2bd90f8074c05d9604ce64d98aeefd3a0/ocamlbrowser.1)\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4269\n**Reporter:** eda\n**Assigned to:** @garrigue\n**Status:** resolved (set by @damiendoligez on 2014-09-25T15:39:58Z)\n**Resolution:** suspended\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.2\n**Target version:** undecided\n**Category:** documentation\n**Tags:** patch\n\n## Bug description\n\nThis is a \"small\" man page for the labltk command. I've omitted the \"Options\" section (since it is the same as the one for ocaml).\n\n## File attachments\n\n- [labltk.1](https://gist.githubusercontent.com/vicuna/018b7dbe354a199404bec4d65e63c9a8/raw/5657f6f4c6d4349c40450c2405600e98491536c8/labltk.1)\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4247\n**Reporter:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2007-05-10T09:23:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nLe manuel (Chapitre 24) indique que tous les objets linkés avec l'option -thread doivent avoir été compilés avec la même option. Je pense que c'est nécessaire uniquement pour les modules qui utilisent la bibliothèque threads (heureusement, sinon on ne pourrait pas linker d'autres bibliothèques compilées sans -thread).\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 4229\r\n**Reporter:** @alainfrisch\r\n**Assigned to:** @mshinwell\r\n**Status:** resolved (set by @mshinwell on 2017-06-09T15:18:46Z)\r\n**Resolution:** duplicate\r\n**Priority:** normal\r\n**Severity:** minor\r\n**Target version:** later\r\n**Category:** documentation\r\n**Tags:** patch\r\n**Related to:** #4231 #4839 #6462 #6950 #6957\r\n**Monitored by:** @glondu @jmeber \"Julien Signoles\" monate @dbuenzli @Chris00 ertai\r\n\r\n## Bug description\r\n\r\nDynlink autorise à charger un module déjà présent dans le programme principal ou déjà dynlinké avant (si sa signature est la même). En particulier, cela permet de redéfinir l'implémentation d'un type abstrait et donc de casser le typage. Certes, il faut vraiment le chercher (cf plus bas).\r\n\r\nUne solution un peu moche consisterait à empecher de cacher un symbole global. \r\n\r\nDans symtable.ml:\r\n\r\nlet slot_for_setglobal id =\r\n  if Tbl.mem id !global_table.num_tbl then 0xffff\r\n  else enter_numtable global_table id\r\n\r\n\r\nDans interp.c:\r\n\r\n    Instruct(SETGLOBAL):\r\n      if (*pc != 0xffff) caml_modify(&Field(caml_global_data, *pc), accu);\r\n      accu = Val_unit;\r\n      pc++;\r\n      Next;\r\n\r\n## Steps to reproduce\r\n\r\nabstract.mli:\r\ntype t\r\nval print: t -> unit\r\nval x: t\r\n\r\nabstract.ml:\r\ntype t = int\r\nlet print i = Printf.printf \"Abstract %i\\n\" i\r\nlet x = 10\r\n\r\nstatic.ml:\r\nlet f = Abstract.print\r\n\r\nclient.ml:\r\nlet () = Static.f Abstract.x\r\n\r\nsub/abstract.mli = abstract.ml\r\n\r\nsub/abstract.ml:\r\ntype t = string\r\nlet print i = Printf.printf \"Abstract %s\\n\" i\r\nlet x = \"foo\"\r\n\r\nmain.ml:let () =\r\n  Dynlink.init ();\r\n  Dynlink.loadfile \"client.cmo\"; (* utilise abstract.cmo *)\r\n  Dynlink.loadfile \"sub/abstract.cmo\";\r\n  Dynlink.loadfile \"client.cmo\"  (* utilise sub/abstract.cmo *)\r\n\r\n\r\nOn compile tout ça...\r\n\r\n$ ocamlc -o main dynlink.cma abstract.cmo static.cmo main.cmo\r\n$ ./main\r\nAbstract 10\r\nAbstract 67345600\r\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4217\n**Reporter:** Christophe\n**Status:** closed (set by @xavierleroy on 2007-11-10T12:48:14Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** feature\n**Version:** 3.09.3\n**Category:** documentation\n\n## Bug description\n\nIt would be very good to explain in the documentation the associativity of each symbols (left, right...)\r\nand the priority between them (I guess that * is \"greater\" than +, but it's hard to guess and remember the order between $ and &, and what happens with &$: and |:!  ?!) (the last one is just ponctuation :)\r\n\r\nThis could make life of hardcoders easier \r\n\r\nthank you\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4182\n**Reporter:** cookedm\n**Status:** closed (set by @damiendoligez on 2006-12-18T13:59:09Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.3\n**Fixed in version:** 3.10+dev\n**Category:** documentation\n\n## Bug description\n\nIf you have in your .mli file this\r\n\r\nexception Exc of (string * string)\r\n\r\nand in your .ml file this\r\n\r\nexception Exc of string * string\r\n\r\nthen ocamlc will complain that\r\nException declarations do not match:\r\n  exception Exc of string * string\r\nis not included in\r\n  exception Exc of (string * string)\r\n\r\nNote that this problem doesn't occur for type definitions.\r\n\r\nHardly a major bug, but it is surprising, as typexpr and (typexpr) should be equivalent.\n\n## Additional information\n\n$ ocamlc -config\r\nversion: 3.09.3\r\nstandard_library_default: /opt/godi/lib/ocaml/std-lib\r\nstandard_library: /opt/godi/lib/ocaml/std-lib\r\nstandard_runtime: /opt/godi/bin/ocamlrun\r\nccomp_type: cc\r\nbytecomp_c_compiler: gcc -fno-defer-pop -no-cpp-precomp -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT \r\nbytecomp_c_linker: gcc  -L/opt/godi/lib\r\nbytecomp_c_libraries: -lcurses -lpthread\r\nnative_c_compiler: gcc -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT\r\nnative_c_linker: gcc  -L/opt/godi/lib\r\nnative_c_libraries: \r\nnative_partial_linker: ld -r \r\nranlib: ranlib\r\ncc_profile: -pg\r\narchitecture: i386\r\nmodel: default\r\nsystem: macosx\r\next_obj: .o\r\next_asm: .s\r\next_lib: .a\r\next_dll: .so\r\nos_type: Unix\r\ndefault_executable_name: a.out\r\nsysthread_supported: true\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4157\n**Reporter:** nicolas\n**Status:** closed (set by @damiendoligez on 2006-11-15T11:43:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.2\n**Category:** documentation\n**Monitored by:** nicolas\n\n## Bug description\n\nBonjour,\r\nIl serait utile de préciser, au début du chapitre 25 de l'aide d'OCaml, qu'open_graph est une fonction disponible dans le module Graphics : une erreur courante pour les débutants pressés d'essayer la fenêtre graphique est d'appeler open_graph sans avoir auparavant ouvert le module Graphics.\r\nJe pense qu'il serait suffisant de remplacer les deux occurences de open_graph par Graphics.open_graph dans la phrase suivante :\r\nHere are the graphics mode specifications supported by open_graph on the X11 implementation of this library: the argument to open_graph has the format \"display-name geometry\", where display-name is the name of the X-windows display to connect to, and geometry is a standard X-windows geometry specification.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4155\n**Reporter:** letaris\n**Status:** closed (set by @xavierleroy on 2015-07-24T08:39:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.3\n**Fixed in version:** 4.00.0\n**Category:** documentation\n\n## Bug description\n\nIt should be documented that threads created by C cannot call caml code. In my case it caused me to have to do some needless debugging, and I'm sure that has been the case with others as well.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4153\n**Reporter:** m-e-leypold\n**Assigned to:** @xclerc\n**Status:** closed (set by @xavierleroy on 2011-05-29T10:20:33Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.3\n**Category:** documentation\n\n## Bug description\n\nMan page to ocamlc doesn't contain the -pack option. Shouldn't it be there?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4151\n**Reporter:** Colas\n**Status:** closed (set by @xavierleroy on 2009-08-28T09:06:53Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Fixed in version:** 3.11.2+dev\n**Category:** documentation\n**Monitored by:** @dbuenzli\n\n## Bug description\n\nmin and max behaviour on the uncomparable float NaN is not documented.\r\n\r\nFrom the documentation on compare, \"max 0. nan\" may:\r\n - raise an error: \"the comparison predicates treat nan  as different from any other float value, including itself\"\r\n - return 0.: \"compare treats nan as equal to itself and less than any other float value\"\r\n\r\nor return nan: \"any operation with nan as argument returns nan as result\"\r\n(introduction of Floating-point arithmetic section)\r\n\r\nIt does none of the above, and change between 3.08.3 and 3.09.2 without being in the changelog:\r\n        Objective Caml version 3.08.3\r\n\r\n# max 0. nan;;\r\n- : float = nan\r\n# max nan 0.;;\r\n- : float = 0.\r\n# min 0. nan;;\r\n- : float = nan\r\n# min nan 0.;;\r\n- : float = 0.\r\n\r\n_____________\r\n\r\n        Objective Caml version 3.09.2\r\n\r\n# max 0. nan;;\r\n- : float = nan\r\n# max nan 0.;;\r\n- : float = 0.\r\n# min 0. nan;;\r\n- : float = 0.\r\n# min nan 0.;;\r\n- : float = nan\r\n\r\n\r\n\r\n-- \r\nColas\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 4148\n**Reporter:** @alainfrisch\n**Status:** acknowledged (set by @damiendoligez on 2006-11-15T12:16:33Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Related to:** #7223\n**Monitored by:** @Chris00\n\n## Bug description\n\nLa description de -pack dans le manuel devrait indiquer les faits suivants:\r\n\r\n1. il est possible de fournir des .cmi (qui n'exportent pas de valeurs) à packer;\r\n\r\n2. si un .mli est présent pour le module packé, alors il doit y avoir un .cmi\r\ncorrespondant qui est compatible avec le type du module produit; le .cmi\r\nest produit par -pack seulement si le .mli n'existe pas.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4138\n**Reporter:** @mjambon\n**Status:** closed (set by @damiendoligez on 2013-07-29T12:25:26Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.2\n**Target version:** 4.01.0+dev\n**Fixed in version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nThe documentation says:\r\n\r\nval mkdir : string -> file_perm -> unit\r\n       Create a directory with the given permissions.\r\n\r\nIt should mention something about the permission mask being applied when there is one.\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4085\n**Reporter:** @hcarty\n**Assigned to:** @mshinwell\n**Status:** resolved (set by @mshinwell on 2016-12-06T21:29:36Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n**Monitored by:** ertai\n\n## Bug description\n\nAs a person interested in the OCaml language but unfamiliar with the language or its surrounding community, I have found it quite difficult to sort through the existing documentation to find out what is relevant to the current state of the OCaml language and related tools and what is out of date.\r\n\r\nOne specific example of this is the revised syntax documentation - the document indicates that the syntax is different from the \"normal\" syntax, but there is no indication of its use or continued development/maintenance.  It seems to be a relatively minor issue once one has started using OCaml and working with the community, but it is a barrier for entry when something as simple as syntax is left ambiguous.\r\n\r\nAnother example is the development of OCaml itself.  To be quite honest, from the outside the project looks almost completely stagnant.  Some form of news or other information access on the future direction/development of the language and tools would be both useful and comforting for potential users of the language.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4055\n**Reporter:** pascal_cuoq\n**Status:** closed (set by @damiendoligez on 2006-08-29T15:24:12Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.1\n**Category:** documentation\n\n## Bug description\n\nList.nth may raise (Invalid_argument \"List.nth\") under some circumstances.\r\nThis is not documented.\r\n\r\nIn addition :\r\nThe circumstances mentionned above are not as simple as they should.\r\nWith the current implementation, the integer must be strictly negative and the list must be\r\nnon-empty for Invalid_argument to be raise.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4046\n**Reporter:** moy\n**Assigned to:** @zoggy\n**Status:** closed (set by @zoggy on 2006-06-15T09:09:34Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.2\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/resources/doc/faq/core.en.html#eta-expansion\r\n\r\nlet map_id l = List.map (function x ->; x) l\r\n                                      ^\r\n\r\n=> Je suppose que le \";\" est de trop.\r\n\r\nhttp://caml.inria.fr/resources/doc/faq/core.en.html#weak-type-variables\r\n\r\n=> Il y a un bout de Français dans la FAQ anglaise !\r\n\r\n=> Le lien eta-expansion devrait avoir le #eta-expansion à la fin.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4020\n**Reporter:** jaberg\n**Status:** closed (set by @xavierleroy on 2006-06-13T09:42:39Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.10+dev\n**Category:** documentation\n\n## Bug description\n\nmany functions in bigarray.mli are not mentioned in the standard library documentation.  If we consider that documenation is something of an endorsement of stability... the noobie (me) is left wondering if the bigarray interface is finalized? or just undocumented?\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 4019\n**Reporter:** jrouquie\n**Status:** closed (set by @damiendoligez on 2012-09-11T14:45:59Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Version:** 3.09.0\n**Target version:** 4.00.1+dev\n**Category:** documentation\n**Monitored by:** jrouquie\n\n## Bug description\n\nThe documentation of Str.matched_string says \"matched_string s returns the substring of s that was matched by the latest Str.string_match, Str.search_forward or Str.search_backward.\"\r\n\r\nIt should says  \"matched_string s returns the substring of s that was matched by the latest Str.string_match, Str.search_forward, Str.search_backward or Str.global_substitute.\"\r\n\r\nOther functions of the Str module are probably to be added to the list.\r\n\r\nTest:\r\n\r\n#load \"str.cma\"\r\nlet r = Str.regexp \"\\\\([a-z]\\\\)\\\\([A-Z]\\\\)\"\r\nlet subst line =\r\n  let s = Str.matched_string line in\r\n  assert (String.length s = 2);\r\n  Printf.sprintf \"%c_%c\" s.[0] (Char.lowercase s.[1])\r\n;;\r\nStr.global_substitute r subst \"camlCase and caml_style\"\r\n\r\nproduces:\r\n\r\n- : string = \"caml_case and caml_style\"\n"},{"labels":["documentation",null],"text":"**Original bug ID:** 4006\n**Reporter:** Pasinelli\n**Status:** confirmed (set by @damiendoligez on 2012-04-10T15:48:01Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Version:** 3.09.2\n**Category:** documentation\n**Monitored by:** ertai\n\n## Bug description\n\nI put here this message for I wasted hours in understandig why my code did not work. This is due to a lack of information provided in Camlp4's Reference Manual and Tutorial, although these ones are generally speaking very usefull.\r\n\r\nThe INT and FLOAT statements only work with positive numbers : this might be trivial if you have a look to Camlp4's source code, but it is not \"natural\" at all.\r\n\r\nI have put down a whole session under Solaris 9, running the 3.06 version, but it is reproductible with any version up to 3.09, I guess, for the source code I examined was the one of the 3.09 version.\r\n\r\n> ocaml\r\n        Objective Caml version 3.06\r\n\r\n# #load \"camlp4o.cma\";;\r\n        Camlp4 Parsing version 3.06\r\n\r\n# #load \"pa_extend.cmo\";;\r\n# let gram = Grammar.gcreate (Plexer.gmake ());;\r\nval gram : Grammar.g = <abstr>\r\n# let flottant = Grammar.Entry.create gram \"flottant\";;\r\nval flottant : '_a Grammar.Entry.e = <abstr>\r\n# let entier = Grammar.Entry.create gram \"entier\";;\r\nval entier : '_a Grammar.Entry.e = <abstr>\r\n# EXTEND\r\n          flottant :\r\n          [\r\n                  [ z = FLOAT -> print_endline z ]\r\n          ]\r\n          ;\r\n\r\n          entier :\r\n          [\r\n                  [ e = INT -> print_endline e ]\r\n          ]\r\n          ;\r\n  END\r\n  ;;\r\n- : unit = ()\r\n# let apply_flottant s = Grammar.Entry.parse flottant (Stream.of_string s);;\r\nval apply_flottant : string -> unit = <fun>\r\n# let apply_entier s = Grammar.Entry.parse entier (Stream.of_string s);;\r\nval apply_entier : string -> unit = <fun>\r\n# apply_flottant \"-3.5676876\";;\r\nException:\r\nStdpp.Exc_located ((0, 1), Stream.Error \"illegal begin of flottant\").\r\n# apply_entier \"-586689\";;\r\nException:\r\nStdpp.Exc_located ((0, 1), Stream.Error \"illegal begin of entier\").\r\n# apply_flottant \"8.7697\";;\r\n8.7697\r\n- : unit = ()\r\n# apply_entier \"65765\";;\r\n65765\r\n- : unit = ()\r\n# #quit;;\r\n>\n\n## Additional information\n\nWhen you have -3.5676876 there is two tokens, that's all.\r\nThe camlp4 doc needs an update but that's not the topic here.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3975\n**Reporter:** alexis\n**Status:** closed (set by @garrigue on 2006-02-21T01:08:38Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** tweak\n**Version:** 3.09.1\n**Category:** documentation\n\n## Bug description\n\nThe following is the BNF for the labels. Shouldn't the (a ... z) be *letter* instead? Can't I start the name of a label with an upper case letter?\r\n\r\n\r\nlabel \t::= \t ~ (a … z) { letter&#8739; 0…9&#8739; _&#8739; ' } :\r\noptlabel \t::= \t ? (a … z) { letter&#8739; 0…9&#8739; _&#8739; ' } :\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3973\n**Reporter:** anonymous\n**Status:** closed (set by @damiendoligez on 2006-02-09T14:21:23Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.1\n**Category:** documentation\n\n## Bug description\n\nhttp://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html says:\r\n\r\n val execvpe : string -> string array -> string array -> 'a\r\n\r\n Same as Unix.execvp respectively, except that the program is searched in the path.\r\n\r\nWhat you meant is one of:\r\n\r\n Same as Unix.execvp, except that the third argument provides the environment to the program executed.\r\n\r\n Same as Unix.execve, except that the program is searched in the path.\n\n## Additional information\n\nI think that the word \"respectively\" is used incorrectly in this and the execve description, but I'm not a native English speaker.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3967\n**Reporter:** rillig\n**Status:** closed (set by @damiendoligez on 2006-02-01T14:24:08Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.0\n**Category:** documentation\n\n## Bug description\n\nThe documentation says, ``Return the absolute value of the argument.'', but in case of int_min, this is not possible.\r\n\r\nIt should be documented whether the result of ``abs min_int'' is guaranteed to be non-negative, or if the behavior is implementation-defined.\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 3957\n**Reporter:** alexbaretta\n**Status:** acknowledged (set by @damiendoligez on 2006-03-29T14:34:19Z)\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Related to:** #3835\n\n## Bug description\n\nroot@alex:~# ledit ocaml\r\n        Objective Caml version 3.09.1+dev5 (2005-12-05)\r\n\r\n# type 'a foo = [ `Foo of 'a ];;\r\ntype 'a foo = [ `Foo of 'a ]\r\n# let x : [> 'x foo as 'x] option = None;;\r\nSyntax error\r\n# #load \"camlp4o.cma\";;\r\n        Camlp4 Parsing version 3.09.1+dev5 (2005-12-05)\r\n\r\n# let x : [> 'x foo as 'x] option = None;;\r\nval x : [> ('a foo as 'a) foo ] option = None\n\n## Additional information\n\nThe problem is hardly significant, as the camlp4 based parsers easily allow to overcome it.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3915\n**Reporter:** aballier\n**Assigned to:** @damiendoligez\n**Status:** closed (set by @damiendoligez on 2008-09-15T14:26:25Z)\n**Resolution:** fixed\n**Priority:** low\n**Severity:** minor\n**Fixed in version:** 3.11+dev\n**Category:** documentation\n**Monitored by:** smimram vanicat\n\n## Bug description\n\nThe -cc option of ocamlc (and ocamlopt) is documented in the manual but not in the man page. This would have saved me quite some time since I assumed there is\r\nno such option based on man page.\r\n\r\nMaybe there are other omissions.  I didn't check.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3901\n**Reporter:** Hendrik Tews\n**Status:** closed (set by @damiendoligez on 2005-12-15T12:46:43Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.0\n**Category:** documentation\n\n## Bug description\n\nThe format \\( fmt %\\) from the Printf manual does not work. It\r\nshould probably be ( fmt %) instead.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3900\n**Reporter:** aballier\n**Assigned to:** @xavierleroy\n**Status:** closed (set by @xavierleroy on 2007-11-01T16:47:09Z)\n**Resolution:** not a bug\n**Priority:** low\n**Severity:** minor\n**Version:** 3.09.0\n**Category:** documentation\n\n## Bug description\n\nThe content of the html version of the reference manual is\r\ndifferent from the txt, ps, and info version.\r\n\r\nFor instance: { fmt %} format in the Printf module is only\r\npresent in the html version.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3884\n**Reporter:** anonymous\n**Status:** closed (set by @damiendoligez on 2005-11-29T12:09:03Z)\n**Resolution:** not a bug\n**Priority:** normal\n**Severity:** minor\n**Version:** 3.09.0\n**Category:** documentation\n\n## Bug description\n\nHello,\r\n\r\nUnix.fork() documentation does not cointain an information about\r\nthe possible fail of a fork().\r\n\r\nIs this implemented correctly, then the documentation should be updated.\r\nIf there is no exception... this would be a bug... :(\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3878\n**Reporter:** anonymous\n**Status:** closed (set by @damiendoligez on 2005-11-22T11:59:27Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Category:** documentation\n\n## Bug description\n\nSTAT(2)                     BSD System Calls Manual                    STAT(2)\r\n\r\nNAME\r\n     stat, lstat, fstat - get file status\r\n\r\nSYNOPSIS\r\n     #include <sys/types.h>\r\n     #include <sys/stat.h>\r\n\r\n     int\r\n     stat(const char *path, struct stat *sb);\r\n\r\n     int\r\n     lstat(const char *path, struct stat *sb);\r\n\r\n     int\r\n     fstat(int fd, struct stat *sb);\r\n\r\nDESCRIPTION\r\n     The stat() function obtains information about the file pointed to by\r\n     path.  Read, write or execute permission of the named file is not\r\n     required, but all directories listed in the path name leading to the file\r\n     must be searchable.\r\n\r\n[...]\n\n## Additional information\n\nfixed DD 2005-11-22\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3830\n**Reporter:** administrator\n**Assigned to:** @garrigue\n**Status:** closed (set by @garrigue on 2007-11-30T01:51:29Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n**Related to:** #8336\n**Monitored by:** \"Hendrik Tews\"\n\n## Bug description\n\nHi,\r\n\r\nI would like to bring the following points to your attention:\r\n\r\n- Wrong error message in:\r\n\r\n   101> echo \"5;;\" > a.ml\r\n   102> /usr/local/stow/ocaml-3.09.0/bin/ocamlopt -c a.ml\r\n   103> /usr/local/stow/ocaml-3.09.0/bin/ocamlopt -pack -o c.cmx a.cmx\r\n   File a.cmx was not compiled with the `-pack C' option\r\n                                          \r\n should probably be `-for-pack C' \r\n\r\n- true, false, (), and :: can still be used as constructors,\r\n  although they have been deleted from constr-name already in\r\n  3.07\r\n\r\n- libref/Unix and libref/UnixLabels contain different information\r\n  for instance for\r\n  - write\r\n  - Locking\r\n  - tm_sec\r\n\r\n- the notes in bug #1893 suggest the optlabel problem has been\r\n  fixed. However, optlabel is still used in the explanation of\r\n  function types (in 6.4). The statement about ambiguities in\r\n  Section \"Naming labels\" in 6.1 and the way labels appear in the\r\n  grammar, namely as sequence of three tokens, seems slightly\r\n  contradictory. \r\n\r\n- in the txt version all apostrophes appear as \"-\", eg\r\n\r\n                         Documentation and user-s manual\r\n\r\n  #-a-;;\r\n  - : char = -a-\r\n\r\n  val sort : -a list -> -a list = <fun>\r\n\r\n  Character literals are delimited by - (single quote) characters. The two\r\n\r\n- the txt version contains lots of spurious \r\n  0.5cm\r\n  lines\r\n\r\n- some html files contain very long lines, eg libref/StdLabels.Array.html\r\n\r\n- sometimes the grammar tables are shifted against each other, eg\r\n  in \"Variant types\" manual012.html, manual015.html, \"Class\r\n  expressions\" manual017.html\r\n\r\n\r\nBye,\r\n\r\nHendrik\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3683\n**Reporter:** administrator\n**Status:** closed (set by @damiendoligez on 2012-07-11T15:20:05Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nFull_Name: Thierry Martinez\r\nVersion: 3.08\r\nOS: Debian GNU/Linux\r\nSubmission from: rezo-mtrg-229.ens.fr (129.199.224.229)\r\n\r\n\r\nParagraph 6.8.1 : the rule \"constr-decl ::= constr-name of typexpr\" and the\r\nsentence \"the constructor declaration constr-name of  typexpr declares the name\r\nconstr-name as a non-constant constructor, whose argument has type typexpr.\"\r\nseem to allow some declarations, eg. \"type a = A of int -> int\", which are not\r\nallowed.\r\nMoreover, the difference between \"type a = A of (int -> int)\" and \"type a = A of\r\nint * int\" and the associated pattern-matching restrictions seem not to be\r\ncovered by the documentation.\n"},{"labels":[null,null,"documentation"],"text":"**Original bug ID:** 3468\n**Reporter:** administrator\n**Status:** acknowledged\n**Resolution:** open\n**Priority:** normal\n**Severity:** minor\n**Category:** documentation\n\n## Bug description\n\nFull_Name: Didier Remy\r\nVersion: 3.08\r\nOS: \r\nSubmission from: quincy.inria.fr (128.93.8.52)\r\n\r\n\r\nSys_error est je pense très mal documentée.\r\nDans Core Library, il est correctement dit: \r\n\r\n        Exception raised by the input/output functions to report  an\r\n        operating system error. \r\n\r\nMais dans Pervasives, la plupart des fonctions qui peuvent la  lever \r\n(output_*, etc.) ne le disent pas. C'est d'autant plus trompeur que certaines\r\nle disent (open_*, close_*) ce qui sugèrerait que seules celles-ci peuvent \r\neffectivement la lever. \r\n\r\nPar ailleurs, c'est à la limite de l'erreur de documentation de faire\r\n[Index of exceptions]\r\n\r\n        http://caml.inria.fr/ocaml/htmlman/libref/index_exceptions.html\r\n\r\net de ne pas trouver Sys_error et toutes les autres exceptions qui sont\r\nprimitives! (Pour la même raison, on peut vérifier qu'on ne trouve pas le\r\ntype int dans index of types, etc.) J'en comprends bien la raison, mais \r\nl'utilisateur lambda aura du mal à la comprendre... et une fois comprise à\r\naccepter l'explication.\r\n\r\nAmicalement,\r\n\r\n        Didier\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 3238\r\n**Reporter:** administrator\r\n**Status:** acknowledged\r\n**Resolution:** open\r\n**Priority:** normal\r\n**Severity:** feature\r\n**Category:** documentation\r\n\r\n## Bug description\r\n\r\nFull_Name: Jean-Christophe Filliâtre\r\nVersion: ocaml 3.08.1\r\nOS: Linux\r\nSubmission from: pc8-142.lri.fr (129.175.8.142)\r\n\r\n\r\n\r\nBonjour,\r\n\r\nJe me permets  de vous faire remonter une  (petite) critique, issue de\r\nnotre utilisation d'ocaml avec les étudiants de maîtrise d'Orsay.\r\n\r\nComme  chaque année  ils écrivent  un compilateur  en ocaml,  et comme\r\nchaque  année nous  exigeons d'eux  que leur  compilateur  affiche des\r\nmessages d'erreurs bien localisés, i.e. donnant la ligne et la colonne\r\nconernées. Pendant des années, cette  petite exigeance a été une vraie\r\nsouffrance pour les étudiants (qui torturaient leur lexeur, écrivaient\r\nune recherche de la ligne a posteriori, etc.)\r\n\r\nHeureusement, depuis ocaml 3.07 il  y a le type Lexing.position. Merci\r\npour cela.\r\n\r\nMalheureusement, le  comportement d'ocamllex vis-à-vis de  ce type est\r\npeu spécifié.\r\n\r\nD'une part  le commentaire expliquant  que seul le champ  pos_cnum est\r\nmis à jour n'est pas très bien placé : en effet si on lit seulement la\r\ndocumentation  de lexeme_start_p et  du type  position alors  on loupe\r\ncette info essentielle et pourtant on  a bien lu tout ce dont on avait\r\nbesoin (il n'est  pas nécessaire d'aller comprendre ce  qu'est le type\r\nlexbuf a priori).\r\n\r\nMais surtout il  n'est expliqué nulle part (je ferai  mon mea culpa si\r\nj'ai tord)  que la machinerie d'ocamllex  copie la valeur  de tous les\r\nchamps autres  que pos_cnum  (probablement par une  construction with,\r\ncomme on  l'imagine facilement).  Du coup il  n'est pas  évident qu'il\r\nsuffit  de mettre  à  jour les  champs  pos_lnum et  pos_bol à  chaque\r\nretour-chariot seulement.\r\n\r\nBien entendu, il  suffit de lire les sources  d'ocaml pour voir qu'une\r\npetite fonction du genre\r\n\r\n```\r\n  let newline lexbuf =\r\n    let pos = lexbuf.lex_curr_p in\r\n    lexbuf.lex_curr_p <- \r\n      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }\r\n```\r\nappelée à chaque retour-chariot suffit  (ce qui est un net progrès par\r\nrapports aux anciennes manières de procéder), mais nos étudiants n'ont\r\npas le réflexe d'aller lire les sources d'ocaml :-)\r\n\r\nBref, ne  prenez pas mal  cette petite critique,  mais un peu  plus de\r\ndocumentation à cet endroit-là  aiderait (une petite illustration dans\r\nla  doc  du module  Lexing,  avec  la  fonction ci-dessus  donnée  par\r\nexemple, serait parfait).\r\n\r\nUne autre critique que font  souvent nos étudiants : certains messages\r\nd'erreur d'ocamlyacc sont affichés dans un format incompatible avec la\r\nfonction next-error d'Emacs. C'est vraiment pénible...\r\n\r\nCordialement,\r\n-- \r\nJean-Christophe\r\n"},{"labels":[null,"documentation",null,null],"text":"**Original bug ID:** 784\n**Reporter:** administrator\n**Status:** acknowledged\n**Resolution:** open\n**Priority:** normal\n**Severity:** feature\n**Category:** documentation\n**Tags:** junior_job\n\n## Bug description\n\nFull_Name: Winfried Dreckmann\r\nVersion: Ocaml 3.04\r\nOS: Suse Linux 6.4 on PowerPC\r\nSubmission from: t3o901p49.telia.com (62.20.253.49)\r\n\r\n\r\nThese are some wishes concerning the documentation. At the end I will also\r\nreport what I believe is a bug. This is all low priority, but I am curious to\r\nget hints.\r\nI am using the low level C interface, and I want to write code which is\r\nmaximally compatible with future versions of Ocaml. As I understand it, the\r\ncontents of the C interface header files may change. The features which are\r\ndocumented may also change, but less so. Therefore, I would like to see\r\n\r\n(1) the macro \"Max_wosize\" documented,\r\n(2) a documented macro or some other way to make the maximal size of a custom\r\nblock accessible to C functions,\r\n(3) the macros \"Max_long\" and \"Min_long\" documented (accessible through\r\n\"max_int\" and \"min_int\" from the core library, but this is clumsy),\r\n(4) a documented macro or some other way to get the maximal size of an Ocaml\r\nstring (accessible through Sys.max_string_size, but again clumsy).\r\n\r\nAlso, it seems implicitly clear that a \"value\" is always a C long integer. A\r\ncandidate for explicit documentation?\r\n\r\nI realize that the size restrictions for marshaling are still a little vague,\r\neven in the source code. Trying to understand the source code (\"intern.c\",\r\n\"extern.c\") I made the following observation: It seems possible to read a\r\nmarshaled block on a 32 bit machine, even it it was created on a 64 bit machine\r\n(good!) with a size exceeding the 32 bit limits (dubious). Moreover,  the header\r\non the 32 bit machine will be wrong (wrong size bits), and I guess some things\r\n(toplevel \"compare\" ?) will not always work correctly.\r\n\r\nI think the low level C interface is an excellent feature. In principle, I hope\r\nthat much more can be documented, but I see the difficulties.\r\n\r\nWinfried Dreckmann\n"},{"labels":[null,"documentation",null],"text":"**Original bug ID:** 3056\n**Reporter:** administrator\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @alainfrisch on 2012-07-12T04:00:51Z)\n**Resolution:** won't fix\n**Priority:** normal\n**Severity:** minor\n**Target version:** 4.01.0+dev\n**Category:** documentation\n\n## Bug description\n\nFull_Name: Samuel Mimram\r\nVersion: 3.08.0\r\nOS: \r\nSubmission from: babasse.csbnet.se (193.11.251.151)\r\n\r\n\r\nHello,\r\n\r\nThe camlp4 documentation mentions:\r\n\r\n\"Warning: this manual may not be up-to-date with respect with the current\r\nimplementation. We are planning to release a new documentation after the 3.07\r\nfinal release.\"\r\n\r\nSince ocaml 3.08 is out, could you please update the documentation to this\r\nversion? (maybe the documentation is up-to-date but only the version of the\r\nmanual is wrong)\r\n\r\nThanks in advance.\r\n\r\nRegards,\r\n\r\nSamuel.\n"},{"labels":[null,"documentation"],"text":"**Original bug ID:** 3019\n**Reporter:** administrator\n**Assigned to:** @alainfrisch\n**Status:** closed (set by @xavierleroy on 2017-02-16T14:18:20Z)\n**Resolution:** fixed\n**Priority:** normal\n**Severity:** text\n**Target version:** 4.03.0+dev / +beta1\n**Fixed in version:** 4.03.0+dev / +beta1\n**Category:** documentation\n\n## Bug description\n\nHi,\r\n\r\nI am currently developing a distributed file system for a customer\r\nand have run into a serious problem with POSIX-threads (native code)\r\nthat leads to segfaults.  There were also reports about instability with\r\nVM-threads, but I haven't yet managed to reproduce that.  I'm a bit at a\r\nloss now where this problem really comes from, but I suspect that there\r\nmay be something wrong with the GC.\r\n\r\nHere are some stack backtraces of a core dump (OCaml 3.08.0+1 / Linux 2.6.7):\r\n\r\nThe thread which raised this problem:\r\n\r\n  (gdb) bt\r\n  #0  0x08086484 in caml_do_local_roots ()\r\n  #1  0x0807f786 in caml_thread_scan_roots ()\r\n  #2  0x08086353 in caml_oldify_local_roots ()\r\n  #3  0x08087c2d in caml_empty_minor_heap ()\r\n  #4  0x08087d08 in caml_minor_collection ()\r\n  #5  0x08088773 in caml_alloc_string ()\r\n  #6  0x080857e8 in alloc_inet_addr ()\r\n  #7  0x08085a1e in alloc_sockaddr ()\r\n  #8  0x08085755 in unix_accept ()\r\n  #9  0x0805421b in camlMs_common_impl__start_1514 ()\r\n  #10 0x0000000b in ?? ()\r\n  #11 0xbffff9a8 in ?? ()\r\n  #12 0x080541f0 in camlMs_common_impl__start_1514 ()\r\n  #13 0x0000000b in ?? ()\r\n  #14 0x00000001 in ?? ()\r\n  #15 0x00000015 in ?? ()\r\n  #16 0x401d22ac in ?? ()\r\n  #17 0x0804ca38 in camlServer__entry ()\r\n  #18 0x080c39fc in ?? ()\r\n  #19 0x08095ef8 in camlServer__11 ()\r\n  #20 0x0804b9f9 in caml_startup__code_begin ()\r\n  #21 0x08092bfa in caml_start_program ()\r\n  #22 0x00000000 in ?? ()\r\n  #23 0xbffff9f8 in ?? ()\r\n  #24 0xbffffa20 in ?? ()\r\n  #25 0xbffffa94 in ?? ()\r\n  #26 0x080ab200 in caml_termination_hook ()\r\n  #27 0x08085d62 in caml_main ()\r\n  Previous frame inner to this frame (corrupt stack?)\r\n\r\nThe above thread doesn't do anything else but wait for network connections\r\nand start a thread for each of those.\r\n\r\nThe other threads:\r\n\r\n(gdb) info threads\r\n  6 process 21185  0x401343c7 in select () from /lib/tls/libc.so.6\r\n  5 process 21188  0x40031266 in __lll_mutex_lock_wait ()\r\n   from /lib/tls/libpthread.so.0\r\n  4 process 21189  0x40031266 in __lll_mutex_lock_wait ()\r\n   from /lib/tls/libpthread.so.0\r\n  3 process 21190  0x401343c7 in select () from /lib/tls/libc.so.6\r\n  2 process 21204  0x40134667 in sync () from /lib/tls/libc.so.6\r\n* 1 process 21184  0x08086484 in caml_do_local_roots ()\r\n\r\nThread #2 was just handling a write transaction and spent time in\r\nthe \"sync\" system call while thread #1 crashed.\r\n\r\nThread #3 waits with Thread.delay and periodically unlocks a mutex.\r\nNothing special here.\r\n\r\nThread #4 just locks on a mutex to wait for shutdown requests.\r\n\r\nThread #5 locks on the mutex which is periodically released by thread #3.\r\n\r\nThread #6 is the \"tick\" thread.\r\n\r\nThe initial part of the disassembled code of \"caml_do_local_roots\"\r\nlooks as follows:\r\n\r\n  (gdb) disassemble\r\n  Dump of assembler code for function caml_do_local_roots:\r\n  0x0808644a <caml_do_local_roots+0>:     push   %ebp\r\n  0x0808644b <caml_do_local_roots+1>:     mov    %esp,%ebp\r\n  0x0808644d <caml_do_local_roots+3>:     push   %edi\r\n  0x0808644e <caml_do_local_roots+4>:     push   %esi\r\n  0x0808644f <caml_do_local_roots+5>:     push   %ebx\r\n  0x08086450 <caml_do_local_roots+6>:     sub    $0x1c,%esp\r\n  0x08086453 <caml_do_local_roots+9>:     mov    0xc(%ebp),%eax\r\n  0x08086456 <caml_do_local_roots+12>:    mov    %eax,0xfffffff0(%ebp)\r\n  0x08086459 <caml_do_local_roots+15>:    mov    0x10(%ebp),%ebx\r\n  0x0808645c <caml_do_local_roots+18>:    mov    0x14(%ebp),%edx\r\n  0x0808645f <caml_do_local_roots+21>:    mov    %edx,0xffffffec(%ebp)\r\n  0x08086462 <caml_do_local_roots+24>:    test   %eax,%eax\r\n  0x08086464 <caml_do_local_roots+26>:    je     0x80864f6 <caml_do_local_roots+172>\r\n  0x0808646a <caml_do_local_roots+32>:    mov    %ebx,%eax\r\n  0x0808646c <caml_do_local_roots+34>:    shr    $0x3,%eax\r\n  0x0808646f <caml_do_local_roots+37>:    and    0x80ab328,%eax\r\n  0x08086475 <caml_do_local_roots+43>:    mov    0x80ab318,%ecx\r\n  0x0808647b <caml_do_local_roots+49>:    mov    0x80ab328,%edx\r\n  0x08086481 <caml_do_local_roots+55>:    mov    (%ecx,%eax,4),%edi\r\n  0x08086484 <caml_do_local_roots+58>:    cmp    %ebx,(%edi)\r\n  0x08086486 <caml_do_local_roots+60>:    je     0x808648d <caml_do_local_roots+67>\r\n  [snip]\r\n\r\nSo the segfault happens due to the cmp-opcode.  Inspecting the registers\r\nit turns out that %edi is NULL :-(\r\n\r\n  (gdb) info registers\r\n  eax            0x1      1\r\n  ecx            0x80d9ef0        135110384\r\n  edx            0x1fff   8191\r\n  ebx            0x1      1\r\n  esp            0xbffff768       0xbffff768\r\n  ebp            0xbffff790       0xbffff790\r\n  esi            0x0      0\r\n  edi            0x0      0\r\n  eip            0x8086484        0x8086484\r\n  eflags         0x10202  66050\r\n  cs             0x73     115\r\n  ss             0x7b     123\r\n  ds             0x7b     123\r\n  es             0x7b     123\r\n  fs             0x0      0\r\n  gs             0x33     51\r\n\r\nSome more details about the stack frame:\r\n\r\n  (gdb) info frame\r\n  Stack level 0, frame at 0xbffff798:\r\n   eip = 0x8086484 in caml_do_local_roots; saved eip 0x807f786\r\n   called by frame at 0xbffff7c8\r\n   Arglist at 0xbffff790, args: \r\n   Locals at 0xbffff790, Previous frame's sp is 0xbffff798\r\n   Saved registers:\r\n    ebx at 0xbffff784, ebp at 0xbffff790, esi at 0xbffff788, edi at 0xbffff78c,\r\n    eip at 0xbffff794\r\n\r\nIf you have an intuition of what might be going wrong, I'd find it easier\r\nto isolate the problem.  What should I be looking out for to help you\r\ntrack down the bug?\r\n\r\nBest regards,\r\nMarkus\r\n\r\n-- \r\nMarkus Mottl          http://www.oefai.at/~markus          markus@oefai.at\n"}]