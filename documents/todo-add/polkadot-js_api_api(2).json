[{"labels":[null,"api",null],"text":"https://github.com/paritytech/ink/pull/296\r\n\r\nThis opens the door to get rid of the custom parser and just define the objects and parse directly into them."},{"labels":[null,"api",null],"text":"https://github.com/paritytech/ink/pull/264"},{"labels":["api"],"text":"when i use it in my vueJs project ,it occurs this error once i  compile code.\r\n\r\n```\r\nCannot destructure property `strings` of 'undefined' or 'null'.\r\n    at new MetadataRegistryLookup (MetaRegistry.js?1408:44)\r\n    at new MetaRegistry (MetaRegistry.js?1408:117)\r\n    at new ContractRegistry (ContractRegistry.js?25d1:56)\r\n    at new ContractAbi (Abi.js?14ba:22)\r\n```\r\n\r\npackage.json:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"@polkadot/api\": \"0.96.1\",\r\n    \"@polkadot/keyring\": \"^1.6.1\",\r\n    \"@polkadot/util\": \"^1.6.1\",\r\n    \"@polkadot/util-crypto\": \"^1.6.1\",\r\n    \"@polkadot/api-contract\": \"0.96.1\",\r\n    \"@polkadot/types\": \"0.96.1\",\r\n    \"@polkadot/app-contracts\": \"^0.36.1\",\r\n    \"core-js\": \"^2.6.9\",\r\n    \"vue\": \"^2.6.10\",\r\n    \"vue-class-component\": \"^7.1.0\",\r\n    \"vue-i18n\": \"^8.14.0\",\r\n    \"vue-property-decorator\": \"^8.2.2\",\r\n    \"vue-router\": \"^3.1.3\",\r\n    \"vuex\": \"^3.1.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/pdfjs-dist\": \"^2.1.0\",\r\n    \"@types/qrcode\": \"^1.3.4\",\r\n    \"@vue/cli-plugin-babel\": \"^3.11.0\",\r\n    \"@vue/cli-plugin-typescript\": \"^3.11.0\",\r\n    \"@vue/cli-service\": \"^3.11.0\",\r\n    \"ts-import-plugin\": \"^1.6.1\",\r\n    \"typescript\": \"^3.6.2\",\r\n    \"vue-template-compiler\": \"^2.6.10\",\r\n    \"vuetable-2\": \"^1.7.5\",\r\n    \"webpack\": \"^4.39.3\"\r\n  }\r\n```\r\n\r\ntsconfig.json:\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"esnext\",\r\n    \"module\": \"esnext\",\r\n    \"strict\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"importHelpers\": true,\r\n    \"moduleResolution\": \"node\",\r\n    \"experimentalDecorators\": true,\r\n    \"esModuleInterop\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"sourceMap\": true,\r\n    \"baseUrl\": \".\",\r\n    \"allowJs\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"types\": [\r\n      \"webpack-env\"\r\n    ],\r\n    \"paths\": {\r\n      \"@/*\": [\r\n        \"src/*\"\r\n      ]\r\n    },\r\n    \"lib\": [\r\n      \"esnext\",\r\n      \"dom\",\r\n      \"dom.iterable\",\r\n      \"scripthost\"\r\n    ]\r\n  },\r\n  \"include\": [\r\n    \"src/**/*.ts\",\r\n    \"src/**/*.tsx\",\r\n    \"src/**/*.vue\",\r\n    \"tests/**/*.ts\",\r\n    \"tests/**/*.tsx\"\r\n  ],\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}\r\n```"},{"labels":[null,"api",null],"text":" I used the latest available [apps](https://github.com/polkadot-js/apps) `7048a65c3dc0bea2061a653a7f63baf8b192ddb4` and [substate node](https://github.com/paritytech/substrate) `7874be8668ba6ff43c107c5da26105f934654cc2` to `deploy` an [erc20 contract]()  and found that the value set in `on_deploy` is not the same as the value returned by the `total_supply` method. I recently found this bug with the new ABI, but I am not sure if it is caused by [api](https://github.com/polkadot-js/api) or `substrate node`.This is the [abi file ](https://github.com/polkadot-js/api/files/3823230/abi.txt) I am using.This problem exists with all method calls in the contract instance.\r\n"},{"labels":[null,"api",null],"text":"When I tested the contract rpc call method, the main code is as follows:\r\n```\r\nimport { Abi, PromiseContract as ApiContract } from '@polkadot/api-contract';\r\nimport { ContractCallOutcome } from '@polkadot/api-contract/types';\r\nimport { ApiPromise } from '@polkadot/api';\r\nimport { stringToU8a,hexToU8a,hexToString,u8aToHex } from'@polkadot/util';\r\nimport * as get_method_test from \"../contract_test.json\";\r\n\r\nconst abi_str = (<any>get_method_test);\r\nconst abi = getAbiObj(abi_str);\r\n\r\nnew ApiPromise().isReady.then((api) => {\r\n \r\n    const contractApi = new ApiContract(api, abi, \"5EUE4FAE9wGyxhKdFkhNsm9T8x55VRACzzpPpMDyWEE6h1is\");\r\n    const {fn,def} = contractApi.getMessage(\"get_original_nonce\");\r\n    let data = fn();\r\n    console.log(\"message data:\"+u8aToHex(data)); \r\n    const contract_method = contractApi.call('rpc',def.name,0,500000);\r\n     contract_method.send(\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\").then(\r\n        (outcome:ContractCallOutcome):void =>{\r\n            console.log(\"isSuccess:\"+outcome.isSuccess+\",value:\"+outcome.output.toString());\r\n        }\r\n    );\r\n});\r\n```\r\nAn error message appears when I run:\r\n```\r\n(node:26072) UnhandledPromiseRejectionWarning: ReferenceError: name is not defined\r\n    at PromiseContract.getMessage (/home/jeremy/work/demo/typescript/substrate-ts-api-test/node_modules/@polkadot/api-contract/base/util.js:38:100)\r\n    at /home/jeremy/work/demo/typescript/substrate-ts-api-test/src/index.ts:13:11\r\n```\r\nAccording to the prompt, I find the corresponding file and modify the field corresponding to the line `31,38`: After the `name` is changed to `def.name`, the program can run normally.But seeing that your [apps](https://polkadot.js.org/apps/#/explorer) is working fine, I don't know if I am calling the wrong way.\r\nI use `@polkadot/api-contract,@polkadot/api` version is `0.96.0-beta.34`,test using [ABI](https://github.com/polkadot-js/api/files/3818526/contract_test.txt)\r\n"},{"labels":[null,"api",null],"text":" I get an error `main.749f3709.js:21450 Uncaught Error: createType({ \"elems\": \"Vec\" }):: Unable to find plain type for {\"info\":6,\"type\":\"Vec\"}`, when I call deploy at https://polkadot.js.org/apps/#/contracts/code.\r\n![sALNPfuHKHgwCxEqXIRgdfDM](https://user-images.githubusercontent.com/13585788/68310368-d985e700-00ea-11ea-8d9e-c8783e277fb4.png)\r\n When I remove Vec<u8> in deploy, the contract can be instantiated normally."},{"labels":[null,"api",null],"text":"The ink! ABI JSON encoding changed with these two issues being fixed:\r\n\r\nhttps://github.com/paritytech/ink/issues/199\r\nKeys in the layout section of a contract metadata were previously encoded as an array of 32 bytes. They are now encoded as a hex string of the form `\"0xABCâ€¦\"` (the `0x` prefix is in there, despite the original issue description).\r\n\r\nhttps://github.com/paritytech/ink/issues/200\r\nFunction/constructor selectors in the JSON representation of the contract metadata were previously encoded as `u32`. To prevent issues with misinterpretation because of endian-ness we encode them as four hex-encoded bytes in an array now (`\"selector\":[\"0x07\",\"0x5B\",\"0xCD\",\"0x15\"]`).\r\n\r\nThe old ABI stays the same in both cases."},{"labels":[null,null,"api",null,null],"text":"https://github.com/paritytech/substrate/pull/2905\r\n\r\nAdditionally derive fees needs to cater for both 1.x and 2.x with feature detection"}]