[
{"labels":["confirmed-bug","repl"],"text":"* **Version**: v15.0.0-pre\r\n* **Platform**: Linux 4.15.0-108-generic #109-Ubuntu SMP Fri Jun 19 11:33:10 UTC 2020 x86_64 \r\n* **Subsystem**: REPL\r\n\r\n### What steps will reproduce the bug?\r\n1. Run Node REPL.\r\n2. Choose your favorite global object.\r\n3. Type it into the REPL with the dot-style property accessor like so: `<global object>.`\r\n4. Hit tab.\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nAlways.\r\n\r\n### What is the expected behavior?\r\nDeprecation warning is not shown.\r\n\r\n### What do you see instead?\r\nDeprecation warning is shown.\r\n\r\n```\r\n./node --trace-deprecation\r\nWelcome to Node.js v15.0.0-pre.\r\nType \".help\" for more information.\r\n> Array. /* hit tab */\r\nArray.__defineGetter__      Array.__defineSetter__      Array.__lookupGetter__      Array.__lookupSetter__      Array.__proto__             Array.hasOwnProperty        Array.isPrototypeOf\r\nArray.propertyIsEnumerable  Array.toLocaleString        Array.valueOf\r\n\r\nArray.apply                 Array.arguments             Array.bind                  Array.call                  Array.caller                Array.constructor           Array.toString\r\n\r\nArray.from                  Array.isArray               Array.length                Array.name                  Array.of                    Array.prototype\r\n\r\n> Array.(node:13081) [DEP0097] DeprecationWarning: Using a domain property in MakeCallback is deprecated. Use the async_context variant of MakeCallback or the AsyncResource class instead.\r\n    at emitMakeCallbackDeprecation (domain.js:123:13)\r\n    at Connection.topLevelDomainCallback (domain.js:134:5)\r\n    at Connection.callbackTrampoline (internal/async_hooks.js:121:14)\r\n    at Session.post (inspector.js:118:28)\r\n    at internal/repl/utils.js:291:15\r\n    at sendInspectorCommand (internal/util/inspector.js:16:12)\r\n    at getInputPreview (internal/repl/utils.js:290:5)\r\n    at showPreview (internal/repl/utils.js:443:5)\r\n    at REPLServer.repl._refreshLine (internal/repl/utils.js:462:5)\r\n    at readline.js:567:10\r\n```\r\n\r\n### Additional information\r\nThis warning is triggered in several other ways in REPL. For example certain function calls can trigger it:\r\n```\r\n> child_process.execFile('vim', [], {timeout: 1});\r\n...\r\n> (node:14593) [DEP0097] DeprecationWarning: Using a domain property in MakeCallback is deprecated. Use the async_context variant of MakeCallback or the AsyncResource class instead.\r\n    at emitMakeCallbackDeprecation (domain.js:123:13)\r\n    at Pipe.topLevelDomainCallback (domain.js:134:5)\r\n    at Pipe.callbackTrampoline (internal/async_hooks.js:121:14)\r\n```\r\nIt makes me believe there is a common point for whole REPL that triggers this warning. I am eager to investigate further if provided with some clues (especially on how to debug asynchronous handling in the C++ part of node)."},
{"labels":["confirmed-bug","vm"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v12.14.1\r\n* **Platform**: Recreated on Catalina 10.15.4 and Windows 10 x64\r\n* **Subsystem**:\r\n\r\n### What steps will reproduce the bug?\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n```js\r\nconst repl = require('repl');\r\nconst r = repl.start('> ');\r\nObject.defineProperty(r.context, 'db', {\r\n  set: (val) => {\r\n    throw new Error('test error');\r\n  }\r\n});\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nEvery time\r\n\r\n### What is the expected behavior?\r\n\r\nThe error that is thrown should be reported in the default eval function, and it should be catchable.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\n\r\n```\r\nFATAL ERROR: v8::FromJust Maybe value is Nothing.\r\n 1: 0x10007f231 node::Abort() [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 2: 0x10007f3b5 node::OnFatalError(char const*, char const*) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 3: 0x100178f00 v8::V8::FromJustIsNothing() [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 4: 0x100399618 v8::internal::PropertyCallbackArguments::CallNamedSetter(v8::internal::Handle<v8::internal::InterceptorInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 5: 0x1004aaa32 v8::internal::(anonymous namespace)::SetPropertyWithInterceptorInternal(v8::internal::LookupIterator*, v8::internal::Handle<v8::internal::InterceptorInfo>, v8::Maybe<v8::internal::ShouldThrow>, v8::internal::Handle<v8::internal::Object>) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 6: 0x1004ef1ab v8::internal::Object::SetPropertyInternal(v8::internal::LookupIterator*, v8::internal::Handle<v8::internal::Object>, v8::Maybe<v8::internal::ShouldThrow>, v8::internal::StoreOrigin, bool*) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 7: 0x1004eefe8 v8::internal::Object::SetProperty(v8::internal::LookupIterator*, v8::internal::Handle<v8::internal::Object>, v8::internal::StoreOrigin, v8::Maybe<v8::internal::ShouldThrow>) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 8: 0x10038ce16 v8::internal::StoreIC::Store(v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::StoreOrigin) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n 9: 0x10038c725 v8::internal::StoreGlobalIC::Store(v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n10: 0x100392436 v8::internal::Runtime_StoreGlobalICNoFeedback_Miss(int, unsigned long*, v8::internal::Isolate*) [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n11: 0x1009311f9 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\n12: 0x100985e16 Builtins_StaGlobalHandler [/Users/anna/.nvm/versions/node/v12.14.1/bin/node]\r\nAbort trap: 6\r\n```\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\nWe need to be able to throw an error if a user tries to assign a context value to a disallowed type.\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","http","stream"],"text":"```js\r\nw.end();\r\nw.end('asd', (err) => {\r\n  assert.strictEqual(err.code, 'ERR_STREAM_WRITE_AFTER_END'); // Fails\r\n});\r\n```"},
{"labels":["confirmed-bug","http"],"text":"Following test fails:\r\n\r\n```js\r\n  const msg = new OutgoingMessage();\r\n  assert.strictEqual(msg.destroyed, false);\r\n  msg.destroy();\r\n  assert.strictEqual(msg.destroyed, true);\r\n  let callbackCalled = false;\r\n  msg.write('asd', common.mustCall((err) => {\r\n    assert.strictEqual(err.code, 'ERR_STREAM_DESTROYED');\r\n    callbackCalled = true;\r\n  }));\r\n  msg.on('error', common.mustCall((err) => {\r\n    assert.strictEqual(err.code, 'ERR_STREAM_DESTROYED');\r\n    assert.strictEqual(callbackCalled, true);\r\n  }));\r\n  msg.on('close', common.mustCall(() => {\r\n    // Won't call\r\n    msg.end();\r\n  }));\r\n```"},
{"labels":["ES Modules","confirmed-bug"],"text":"loader.mjs:\r\n\r\n```js\r\nexport function transformSource() {\r\n  return {\r\n    source: {\r\n      boom: true,\r\n    },\r\n  };\r\n}\r\n```\r\n\r\ntest.mjs:\r\n\r\n```js\r\nimport fs from 'fs';\r\n```\r\n\r\n```\r\n> node --loader ./loader.mjs test.mjs\r\nC:\\Program Files\\PowerShell\\7\\pwsh.exe[28872]: c:\\ws\\src\\module_wrap.cc:131: Assertion `args[2]->IsString()' failed.\r\n```"},
{"labels":["ES Modules","confirmed-bug","module"],"text":"* **Version**: `v14.2.0`\r\n* **Platform**: `Linux c89b7c439bd7 4.19.76-linuxkit #1 SMP Fri Apr 3 15:53:26 UTC 2020 x86_64 Linux`\r\n\r\n### What steps will reproduce the bug?\r\n\r\nCreate docker image that generates `package.json` and `index.js` in *root of filesystem*:\r\n```docker\r\nFROM node:14-alpine\r\n\r\nRUN echo '{ \"type\": \"module\" }' > package.json\r\nRUN echo 'import fs from \"fs\";' > index.js\r\n\r\nCMD [\"node\", \"index.js\"]\r\n```\r\nBuild and run the container:\r\n```bash\r\ndocker build -t app .\r\ndocker run --rm app\r\n```\r\nOutput:\r\n```\r\n(node:1) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n/index.js:1\r\nimport fs from \"fs\";\r\n^^^^^^\r\n\r\nSyntaxError: Cannot use import statement outside a module\r\n    at Object.compileFunction (vm.js:344:18)\r\n    at wrapSafe (internal/modules/cjs/loader.js:1106:15)\r\n    at Module._compile (internal/modules/cjs/loader.js:1140:27)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1196:10)\r\n    at Module.load (internal/modules/cjs/loader.js:1040:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:929:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nAlways.\r\n\r\n### What is the expected behavior?\r\n`index.js` should be loaded as es module because the nearest `package.json` has `\"type\": \"module\"` field.\r\n\r\n### What do you see instead?\r\n`index.js` is being loaded as commonjs.\r\n\r\n### Additional information\r\nIf `package.json` and `index.js` are generated in some subdirectory - everything works. You can check it with the following image:\r\n```docker\r\nFROM node:14-alpine\r\n\r\n# add workdir to generate files in /app not in /\r\nWORKDIR app \r\n\r\nRUN echo '{ \"type\": \"module\" }' > package.json\r\nRUN echo 'import fs from \"fs\";' > index.js\r\n\r\nCMD [\"node\", \"index.js\"]\r\n```\r\n\r\nThe reason of such behavior is [this line](https://github.com/nodejs/node/blob/c1ee70ec168eedc3f9d193473d141b9c03e2df88/lib/internal/modules/cjs/loader.js#L289):\r\n```\r\n(separatorIndex = checkPath.lastIndexOf(path.sep)) > rootSeparatorIndex\r\n```\r\nWhen `checkPath = '/index.js'`, both `separatorIndex` and `rootSeparatorIndex` are equals to `0` and condition does not pass.\r\n"},
{"labels":["confirmed-bug","util"],"text":"Consider following code\r\n```\r\nclass A {\r\n    getA() { return 0; }\r\n    constructor() {}\r\n}\r\nclass B extends A {\r\n    getB() { return 0; }\r\n    constructor() { super(); }\r\n}\r\nconsole.log((new A()));\r\nconsole.log((new A()).__proto__);\r\nconsole.log((new A()).__proto__ instanceof A);\r\nconsole.log((new A()).__proto__ instanceof Object);\r\nconsole.log((new B()));\r\nconsole.log((new B()).__proto__);\r\nconsole.log((new B()).__proto__ instanceof B);\r\nconsole.log((new B()).__proto__ instanceof A);\r\n```\r\n\r\nNode 14 produces:\r\n\r\n```\r\nA {}\r\nA {}\r\nfalse\r\ntrue\r\nB {}\r\nB {}\r\nfalse\r\ntrue\r\n```\r\n\r\nThis is wrong since `(new B()).__proto__` is an instance of `A`. I guess the confusing part is that `(new B()).__proto__.constructor` is `class B` (which is because of https://tc39.es/ecma262/#sec-makeconstructor)\r\n\r\nFor reference, Chrome DevTools produces:\r\n\r\n```\r\nA {}\r\n{constructor: ƒ, getA: ƒ}\r\nfalse\r\ntrue\r\nB {}\r\nA {constructor: ƒ, getB: ƒ}\r\nfalse\r\ntrue\r\n```"},
{"labels":["confirmed-bug","stream"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v12.16.0\r\n* **Platform**: MacOS\r\n* **Subsystem**: Darwin ... 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 x86_64\r\n\r\n### What steps will reproduce the bug?\r\n\r\n```js\r\n// open the node repl\r\nx = new stream.Duplex({writableObjectMode: true})\r\nx.writableObjectMode // undefined - should be true\r\n```\r\nbut the mode is set correctly:\r\n```js\r\n...\r\n_writableState: WritableState {\r\n    objectMode: true,\r\n   ...\r\n```\r\n\r\nit does work on a Writable stream:\r\n\r\n```js\r\nx = new stream.Writable({objectMode: true})\r\nx.writableObjectMode // true\r\n```\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\n100%\r\n\r\n### What is the expected behavior?\r\n\r\nReturn the actual value of whether the stream is in object mode."},
{"labels":["confirmed-bug","fs","good first issue","mentor-available"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: 12.16.3\r\n* **Platform**: linux64\r\n* **Subsystem**: gentoo\r\n\r\n### What steps will reproduce the bug?\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\nreading directory with files names using buffer as path does not work.\r\n```\r\nconst fs = require('fs');\r\nfs.readdir( Buffer.from( \".\"),{withFileTypes:true,encoding:\"buffer\"},(e,d)=>console.log(\"dir\",d));\r\n```\r\nIt works correct in version 12.14.0 but after upgrade it stopped to work.\r\nusing it without files types works:\r\n// fs.readdir( Buffer.from( \".\"),{withFileTypes:false,encoding:\"buffer\"},(e,d)=>console.log(\"dir\",d));\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nevery time\r\n\r\n### What is the expected behavior?\r\nget directory entries with file types i.e. array of Dirent objects\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\nerror message:\r\n```\r\nUncaught:\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string. Received an instance of Buffer\r\n    at validateString (internal/validators.js:117:11)\r\n    at Object.join (path.js:1039:7)\r\n    at getDirents (internal/fs/utils.js:159:39)\r\n    at FSReqCallback.req.oncomplete (fs.js:858:7) {\r\n  code: 'ERR_INVALID_ARG_TYPE'\r\n}\r\n```\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\nThis bug is degradation because it doesn't exists in version 12.14.0 and present in versions 12.16.1 and 12.16.3 at least. \r\nI use buffer instead of string because working with my old archives with non utf-8 names.\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["V8 Engine","confirmed-bug","memory","v12.x"],"text":"This issue is continuation of [#32737](https://github.com/nodejs/node/issues/32737)\r\n\r\n**Version:**\r\nv12.16.2 (but v12.13 on production)\r\n\r\n**Platform:**\r\nDarwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 x86_64\r\n(but docker with node:12.13.0-alpine on production)\r\n\r\n**Subsystem:**\r\n? runtime, heap, garbage collection\r\n\r\n**Description:**\r\nAs in previous ticket: \"We recently upgrade our production servers with docker containers with node v8 to docker containers with node v12.10 (node:12.13.0-alpine). At first all seems fine, but then we started noticing pod restarts by Kubernetes being OOM Killed. Since the upgrade, memory usage seems to increase over time sometimes in steep inclines until reaching ~500MB at which time they are killed by Kuberenetes.\"\r\n\r\nWith the same code base and dependencies, when switching between 3 versions of node (8.17.0, 10.20.1, 12.16.2) different memory usage observed. With version 12.16.2 node service crashes with logs:\r\n\r\n```\r\nTESTED_SERVICE.GetData took 1691 ms (queue-time = 409 ms, process-time = 1282 ms, processing-count = 100, queue-size = 124)\"}\r\n{\"@timestamp\":\"2020-05-06T10:49:42.337Z\",\"level\":\"debug\",\"message\":\"GRPC server call TESTED_SERVICE.GetData took 1724 ms (queue-time = 431 ms, process-time = 1293 ms, processing-count = 100, queue-size = 123)\"}\r\n\r\n<--- Last few GCs --->\r\ncr[35106:0x102aac000] 10407728 ms: Mark-sweep 543.8 (546.1) -> 543.7 (546.1) MB, 158.9 / 0.0 ms  (+ 2.9 ms in 2 steps since start of marking, biggest step 2.9 ms, walltime since start of marking 163 ms) (average mu = 0.102, current mu = 0.010) finalize incr[35106:0x102aac000] 10407914 ms: Mark-sweep 543.8 (546.1) -> 543.7 (546.1) MB, 177.3 / 0.0 ms  (+ 5.1 ms in 2 steps since start of marking, biggest step 5.0 ms, walltime since start of marking 186 ms) (average mu = 0.058, current mu = 0.018) finalize incr\r\n\r\n<--- JS stacktrace --->\r\n\r\n==== JS stack trace =========================================\r\n\r\n    0: ExitFrame [pc: 0x10097d5b9]\r\n    1: StubFrame [pc: 0x1009e8f05]\r\nSecurity context: 0x1fc1cc0c08d1 <JSObject>\r\n    2: new constructor(aka Op) [0x1fc1b415e939] [/Users/robertdittmann/Documents/Tutorials/node-memory-test/node_modules/protobufjs/src/writer.js:21] [bytecode=0x1fc1cf4764f1 offset=0](this=0x1fc1ca0d2b61 <Op map = 0x1fc11cbd1199>,0x1fc1b415e979 <JSFunction noop (sfi = 0x1fc1712aee81)>,0,0)\r\n    3: ConstructFrame [pc: 0x1008fe7...\r\n\r\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 0x1010248bd node::Abort() (.cold.1) [/usr/local/bin/node]\r\n 2: 0x100084c4d node::FatalError(char const*, char const*) [/usr/local/bin/node]\r\n 3: 0x100084d8e node::OnFatalError(char const*, char const*) [/usr/local/bin/node]\r\n 4: 0x100186477 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [/usr/local/bin/node]\r\n 5: 0x100186417 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/usr/local/bin/node]\r\n 6: 0x1003141c5 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [/usr/local/bin/node]\r\n 7: 0x100315a3a v8::internal::Heap::RecomputeLimits(v8::internal::GarbageCollector) [/usr/local/bin/node]\r\n 8: 0x10031246c v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [/usr/local/bin/node]\r\n 9: 0x10031026e v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/usr/local/bin/node]\r\n10: 0x10030f2b1 v8::internal::Heap::HandleGCRequest() [/usr/local/bin/node]\r\n11: 0x1002d4551 v8::internal::StackGuard::HandleInterrupts() [/usr/local/bin/node]\r\n12: 0x10063e79c v8::internal::Runtime_StackGuard(int, unsigned long*, v8::internal::Isolate*) [/usr/local/bin/node]\r\n13: 0x10097d5b9 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit [/usr/local/bin/node]\r\n14: 0x1009e8f05 Builtins_StackCheckHandler [/usr/local/bin/node]\r\n[1]    35106 abort      node --max-old-space-size=384 app.js\r\n```\r\n\r\n**What steps will reproduce the bug?**\r\n\r\n1. Download prepared sample \"slim version\" of service code (without other parts like Redis, DynamoDB, Prometheus, Zippkin, Routes etc.): [node-sample](https://github.com/RobertDittmann/node-memory-test)\r\n2. Download prepared sample client: [java-sample](https://github.com/RobertDittmann/nodememorytest)\r\n3. Change node version on 12.16.2\r\n4. For node service (rebuild and run):\r\n```\r\nrm -rf node-modules\r\nnpm install\r\nnode --max-old-space-size=384 app.js\r\n```\r\n5. For java service (rebuild and run):\r\n```\r\nmvn clean install\r\nmvn spring-boot:run\r\n```\r\n6. After around 3-4 hours node service should throws above exception. Node service in its directory will fill with data csv file called **memory_usage.csv** (it contains process memory in MB per 1 minute).\r\n\r\nSame situation appears on production environment but it takes few days to happen. \r\n\r\nBelow comparison of node vesions:\r\n\r\n- node v12.16.2 started with command: node --max-old-space-size=384 app.js (crashed - results as above logs)\r\n ![image](https://user-images.githubusercontent.com/11576433/81183989-23735b00-8fb0-11ea-95e9-10124ac1b99c.png)\r\n\r\n- node v12.16.2 started with command: node app.js \r\n![image](https://user-images.githubusercontent.com/11576433/81184343-97156800-8fb0-11ea-8f3e-00336a6f5a1c.png)\r\n\r\n- node v10.20.1 started with command: node app.js (it shows also memory when load stopped)\r\n![image](https://user-images.githubusercontent.com/11576433/81184587-d8a61300-8fb0-11ea-820e-2626c71c3145.png)\r\n\r\n- node v8.17.0 started with command: node app.js \r\n![image](https://user-images.githubusercontent.com/11576433/81184779-186cfa80-8fb1-11ea-882a-ef16d9f03ed9.png)\r\n\r\n\r\n**How often does it reproduce? Is there a required condition?**\r\nAlways. \r\n\r\n**What is the expected behavior?**\r\nA stable heapUsed like in v8.17 and no spikes in memory usage causing OOM kills/ GCs issues.\r\n\r\n**What do you see instead?**\r\nMemory increase and GCs issues.\r\n\r\n**Additional information**\r\nI am looking for solutions. Seems that used last years services cannot be used with LTS v12 on production. \r\n\r\nPlease let me know how I can help further,\r\n\r\nKind regards,\r\nRobert\r\n\r\n"},
{"labels":["buffer","confirmed-bug","v14.x"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v14.2.0\r\n* **Platform**: mac OS 10.13.6\r\n\r\n\r\n### What steps will reproduce the bug?\r\nWhen communicating a Uint8 Array Buffer from a worker to the parent process with `postMessage`, which is included in the `transferList` argument and then calling `unref` on the worker, I get a Segfault: `'node index.js' terminated by signal SIGSEGV (Address boundary error)`.\r\n\r\n`index.js`\r\n```js\r\nconst path = require('path')\r\nconst { Worker } = require('worker_threads')\r\n\r\nconst worker = new Worker(path.join(__dirname, 'worker.js'))\r\nworker.postMessage({})\r\nworker.on('message', (message) => {\r\n  const hash = Buffer.from(message.value).toString('hex')\r\n  console.log(hash)\r\n  worker.unref()\r\n})\r\n```\r\n\r\n`worker.js`\r\n```js\r\nconst fs = require('fs')\r\nconst crypto = require('crypto')\r\nconst { parentPort } = require('worker_threads')\r\n\r\nparentPort.on('message', (message) => {\r\n  const hasher = crypto.createHash('sha256')\r\n  fs.createReadStream('example.txt')\r\n    .pipe(hasher)\r\n    .on('finish', () => {\r\n      const { buffer } = hasher.read()\r\n      parentPort.postMessage({ value: buffer }, [buffer])\r\n    })\r\n})\r\n```\r\n\r\n\r\nReproduction here: https://github.com/timsuchanek/segfault-node-14\r\n\r\n### lldb backtrace\r\n```\r\nProcess 40610 stopped\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x20)\r\n    frame #0: 0x000000010007b095 node`node::Buffer::New(node::Environment*, char*, unsigned long, bool)::$_2::__invoke(void*, unsigned long, void*) + 21\r\nnode`node::Buffer::New(node::Environment*, char*, unsigned long, bool)::$_2::__invoke(void*, unsigned long, void*):\r\n->  0x10007b095 <+21>: movq   0x20(%rcx), %rcx\r\n    0x10007b099 <+25>: movq   %rax, %rdi\r\n    0x10007b09c <+28>: popq   %rbp\r\n    0x10007b09d <+29>: jmpq   *%rcx\r\nTarget 0: (node) stopped.\r\n```\r\n\r\n\r\nThis works fine in Node 13 or lower and it seems, that this bug was introduced in Node 14."},
{"labels":["confirmed-bug","repl"],"text":"* **Version**: v14.1.0\r\n* **Platform**: Linux lt2.cfware.com 5.5.10-100.fc30.x86_64 #1 SMP Wed Mar 18 14:34:46 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: REPL\r\n\r\n### What steps will reproduce the bug?\r\n\r\nInstall a package that has sub-directories (lets say `nano` for an example).  Run repl with `node` and type `require('nano` without the closing quote:\r\n![Screenshot from 2020-05-04 14-29-04](https://user-images.githubusercontent.com/903597/81000158-dd819000-8e13-11ea-8e4b-6bca9b6cb305.png)\r\n\r\nNote the position of the cursor and the suggested `/`, this is valid.  Typing `')` to close the `require` call does not remove the suggested `/`.  At this point pressing keyboard left, end or tab causes an additional `/` to be displayed.\r\n\r\nTyping `require('nano/')` then pressing tab causes `nano/lib/` and `nano/package` to be suggested.\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nEvery time.\r\n\r\n### What is the expected behavior?\r\nCompletion of the string passed to `require()` should end as soon as the closing `'` is typed.\r\n\r\n### What do you see instead?\r\n\r\n![Screenshot from 2020-05-04 14-40-51](https://user-images.githubusercontent.com/903597/81001197-6220de00-8e15-11ea-83df-7bd3abd5d388.png)\r\n\r\n### Additional information\r\nSorry for using screen-captures it's difficult to show what I'm seeing otherwise."},
{"labels":["ES Modules","V8 Engine","confirmed-bug","repl","vm"],"text":"@nodejs/modules...\r\n\r\n```\r\nWelcome to Node.js v14.1.0.\r\nType \".help\" for more information.\r\n> import('piscina')\r\nPromise { <pending> }\r\n> import('piscina').then(console.log)\r\nPromise { <pending> }\r\n> [Module] {\r\n  Piscina: [Function: Piscina],\r\n  default: [Function: Piscina],\r\n  isWorkerThread: false,\r\n  version: '1.2.0',\r\n  workerData: undefined\r\n}\r\n> import('piscina').then(console.log)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nSpotted this while working on a module. Happens regularly for me with any ESM. Calling import twice on the same module leads to a segfault. Happens regularly but may take a few calls to import to trigger... lldb backtrace shows:\r\n\r\n```\r\n* thread #1, name = 'node', stop reason = signal SIGSEGV: invalid address (fault address: 0x10)\r\n  * frame #0: 0x0000000000978050 node`node::loader::ImportModuleDynamically(v8::Local<v8::Context>, v8::Local<v8::ScriptOrModule>, v8::Local<v8::String>) (.cold.291)\r\n    frame #1: 0x000000000431adc0\r\n    frame #2: 0x0000000000ce6a58 node`v8::internal::Isolate::RunHostImportModuleDynamicallyCallback(v8::internal::Handle<v8::internal::Script>, v8::internal::Handle<v8::internal::Object>) + 120\r\n    frame #3: 0x000000000105530f node`v8::internal::Runtime_DynamicImportCall(int, unsigned long*, v8::internal::Isolate*) + 175\r\n```"},
{"labels":["ES Modules","confirmed-bug"],"text":"* **Version**: 14.1.0\r\n* **Platform**: Ubuntu 19\r\n* **Subsystem**: entrypoint handling\r\n\r\n### What steps will reproduce the bug?\r\n\r\n```\r\nmkdir empty-dir\r\ncd empty-dir\r\necho '{}' > package.json\r\ntouch entrypoint\r\ntouch hooks.mjs\r\nnode ./entrypoint # <-- no error; no output; exit code 0\r\nnode --loader ./hooks.mjs ./entrypoint # <-- error that \"\" is not a recognized file extension by the default ESM loader\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nAlways\r\n\r\n### What is the expected behavior?\r\n\r\n`./entrypoint` is executed as a CommonJS module whether or not `--loader` is passed.\r\n\r\n### What do you see instead?\r\n\r\nWhen --loader is passed, node always tries to load entrypoint scripts as ESM, ignoring that `package.json` wants the file to be treated as CJS.  This does not happen when --loader is omitted, suggesting that this behavior is a bug.\r\n\r\n```\r\n\"\" is not a recognized file extension by the default ESM loader\r\n(node:26067) ExperimentalWarning: --experimental-loader is an experimental feature. This feature could change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\ninternal/modules/run_main.js:54\r\n    internalBinding('errors').triggerUncaughtException(\r\n                              ^\r\n\r\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \"\" for /d/Personal-dev/@TypeStrong/ts-node-repros/empty-dir/entrypoint\r\n    at Loader.defaultGetFormat [as _getFormat] (internal/modules/esm/get_format.js:65:15)\r\n    at Loader.getFormat (internal/modules/esm/loader.js:113:42)\r\n    at Loader.getModuleJob (internal/modules/esm/loader.js:244:31)\r\n    at async Loader.import (internal/modules/esm/loader.js:178:17) {\r\n  code: 'ERR_UNKNOWN_FILE_EXTENSION'\r\n}\r\n```\r\n\r\n### Additional information\r\n\r\n#33223 \r\n"},
{"labels":["C++","confirmed-bug","wasi"],"text":"This is an issue for node's WASI integration with emscripten.\r\n\r\nboth global ctors need to be called, and ostream being used in the WASM standalone mode (emsdk latest upstream). \r\n\r\nI have a case where I need to call the global static initializers(need to call _start before running other functions), but also have ostream in the code. \r\n\r\nWhat was happening is that when ostream is being used in the code and it somehow triggers certain things to be added to global ctors, and then calling global ctors resulted in a segfault. So far I only get this error on node14, and I am not sure if it is related to the use of WASI.\r\n\r\n### C++\r\n```c++\r\n#include <emscripten.h>\r\n#include <vector>\r\n#include <sstream>\r\n\r\n// static intializer, need to call _start\r\nstatic std::vector<int> x = {1, 2, 3};\r\n\r\nextern \"C\" {\r\nEMSCRIPTEN_KEEPALIVE\r\nint GetX(int i) {\r\n   // use of ostream somehow makes _start fail.\r\n    std::ostringstream os;\r\n    os << \"x\";\r\n    return x[i];\r\n}\r\n}\r\n```\r\n```Makefile\r\nwasm_test.wasm: wasm_test.cc\r\n\t@mkdir -p $(@D)\r\n\temcc -O3 -std=c++11 -o $@ $<\r\n```\r\n\r\n### NodeJS\r\n\r\n```js\r\nconst { WASI } = require('wasi');\r\n\r\nconst wasi = new WASI({\r\n    args: process.argv,\r\n    env: process.env\r\n  });\r\n\r\nconst binary = require('fs').readFileSync('build/wasm_test.wasm');\r\n\r\nWebAssembly.instantiate(binary,\r\n    { env: {}, wasi_snapshot_preview1: wasi.wasiImport }).then(({ instance }) => {\r\n  // trigger ctors\r\n  instance.exports._start();\r\n  // test the static vars are correctly initialized.\r\n  console.log(instance.exports.GetX(0));\r\n});\r\n```\r\n```\r\nnode --experimental-wasi-unstable-preview1  --experimental-wasm-bigint test_wasm.js \r\n```\r\n\r\nRelevant issue in the emscripten https://github.com/emscripten-core/emscripten/issues/11001"},
{"labels":["confirmed-bug","libuv","windows"],"text":"* **Version**: v12.16.2\r\n* **Platform**: 64 bit Microsoft Windows 10 [Version 10.0.18362.778]\r\n* **Subsystem**: fs\r\n\r\n### What steps will reproduce the bug?\r\n\r\n1. Check if `%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps` exists.\r\n2. Install https://www.microsoft.com/en-us/p/python-38/9mssztt1n39l\r\n3. Call `fs.statSync(\"c:\\\\Users\\\\kanadig\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\python.exe\")`\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nThis repros 100%, make sure you are calling it on the files under `%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\` with 0 size.\r\n\r\n### What is the expected behavior?\r\n\r\nShould not throw exception.\r\n\r\n### What do you see instead?\r\n\r\n```\r\n> fs.statSync(\"c:\\\\Users\\\\bpasero\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\GameBarElevatedFT_Alias.exe\")                 \r\nThrown:                                                                                                                  \r\n{ Error: UNKNOWN: unknown error, stat 'c:\\Users\\bpasero\\AppData\\Local\\Microsoft\\WindowsApps\\GameBarElevatedFT_Alias.exe' \r\n    at Object.statSync (fs.js:855:3)                                                                                     \r\n  errno: -4094,                                                                                                          \r\n  syscall: 'stat',                                                                                                       \r\n  code: 'UNKNOWN',                                                                                                       \r\n  path:                                                                                                                  \r\n   'c:\\\\Users\\\\bpasero\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\GameBarElevatedFT_Alias.exe' }                           \r\n> fs.lstatSync(\"c:\\\\Users\\\\bpasero\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\GameBarElevatedFT_Alias.exe\")                \r\nThrown:                                                                                                                  \r\n{ Error: UNKNOWN: unknown error, lstat 'c:\\Users\\bpasero\\AppData\\Local\\Microsoft\\WindowsApps\\GameBarElevatedFT_Alias.exe'\r\n    at Object.lstatSync (fs.js:845:3)                                                                                    \r\n  errno: -4094,                                                                                                          \r\n  syscall: 'lstat',                                                                                                      \r\n  code: 'UNKNOWN',                                                                                                       \r\n  path:                                                                                                                  \r\n   'c:\\\\Users\\\\bpasero\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\GameBarElevatedFT_Alias.exe' }                           \r\n>     \r\n```\r\n\r\n### Additional information\r\n\r\nSee https://github.com/microsoft/vscode/issues/95828\r\n"},
{"labels":["confirmed-bug","windows"],"text":"As subject says. It only happens with large amounts of text, maybe something in relation to the buffer size?\r\n\r\nnode version v12.16.2\r\n64 bit Windows 10\r\n* **Subsystem**: none\r\n\r\n### What steps will reproduce the bug?\r\n\r\nOpen CMD, type \"node\" press enter to get the node repl. Now copy the below code, then right click in the node console to paste text. It will only paste the first line of code and freeze up node. It becomes completely unresponsive.\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nEverytime when the copied code seems to be over a certain size. Don't know what that size is but happens no matter what the code is. The sample code provided will replicate the issue.\r\n\r\n### What is the expected behavior?\r\nAll text is pasted and executed line by line like other copy and paste operations.\r\n\r\n### What do you see instead?\r\n\r\nNode locks up after the first line of the copied text\r\n\r\n### Additional information\r\n\r\nSample code below. Here is a quick vid of node locking up as described above. https://streamable.com/ep7wqt The cursor just flashes but it is unresponsive to key strokes and doesn't do anything else.\r\nNOTE; the code has been changed to take out the IP so IF does execute it will error as I just replaced some keywords with random text. Ignore this, the point of it is to show that it won't copy and paste past the first line, it will freeze.\r\n\r\n```\r\n//{\"_id\":\"56aba3108d6d183da42403c2\"}\r\n//placeholder\r\nconst request = require('request');\r\nvar mongoose = require (\"mongoose\");\r\nvar lodash = require (\"lodash\");\r\nvar myFuncs = require(\"./functions\");\r\n\r\n\r\n\r\nvar item_urls;\r\nvar options = {\r\n    json: true\r\n  };\r\n\r\nvar test = [] ;\r\nfunction updateDB (){\r\n    var url = \"get stuff\";\r\n\r\n\r\n    request(url, options, (error, res, body) =>{\r\n        if (error) {\r\n            return console.log(error)\r\n          };\r\n\r\n          if (!error && res.statusCode == 200) {\r\n            console.log(\"executing cb1\");\r\n            item_urls = body.payload.items;\r\n            myFuncs.fixItemIDs (item_urls);\r\n            var primes = item_urls.filter(item => item.item_name.includes(\"Strun Wraith Set\")); \r\n            for (item in primes) \r\n            {\r\n                let url = `https://get more stuff/v1/items/${primes[item].url_name}`;\r\n               // console.log (url);\r\n                request(url, options, (error, res, body) =>{\r\n                    if (error) {\r\n                        return console.log(error)\r\n                      };\r\n\r\n                      if (!error && res.statusCode == 200) {\r\n\r\n                          console.log(`Getting item ${url}`);\r\n                          test.push(body.payload.item);\r\n                          myFuncs.fixItemIDs (test);\r\n                      }\r\n                    });\r\n\r\n            };  \r\n            console.log (\"done\");          \r\n\r\n\r\n          };\r\n    });\r\n}\r\n\r\nupdateDB();\r\n```"},
{"labels":["confirmed-bug","fs"],"text":"https://github.com/nodejs/node/blob/f22a9cac36f731d5bdbf1b7c542b36fa4c13f4de/lib/internal/fs/utils.js#L543\r\n\r\nThis check can produce confusing error message when `offse`t is equal to `bufferLength`. Which is error, but message shows, that it is correct (<=)\r\n```\r\nif (offset < 0 || offset >= bufferLength) {\r\n      throw new ERR_OUT_OF_RANGE('offset',\r\n                                 `>= 0 && <= ${bufferLength}`, offset);\r\n    }\r\n```\r\n\r\n\r\n"},
{"labels":["buffer","confirmed-bug"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v12.16.0\r\n* **Platform**: Linux vul337 4.15.0-91-generic #92-Ubuntu SMP Fri Feb 28 11:09:48 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: buffer\r\n\r\n### What steps will reproduce the bug?\r\nDirectly run the following code snippet using node:\r\n```\r\nlet buffer = require('buffer');\r\nnew buffer.Buffer.prototype.lastIndexOf(1, 'str');\r\n```\r\nIt is worth noting that the following code would not cause this abort:\r\n```\r\nnew  require('buffer').Buffer.prototype.lastIndexOf(1, 'str');\r\n```\r\nThus we doubt there may be something wrong in somewhere.\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nNo. This potential bug can always be reproduced.\r\n\r\n### What is the expected behavior?\r\nThis is a misuse of 'buffer.Buffer.prototype.lastIndexOf'. The function should throw an exception or other similar error-reporting stuff rather than crash the whole nodejs process.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\nThis is the stack dump produced during abort:\r\n```\r\n./node[40968]: ../src/node_buffer.cc:1014:void node::Buffer::(anonymous namespace)::IndexOfNumber(const FunctionCallbackInfo<v8::Value> &): Assertion `args[2]->IsNumber()' failed.\r\n 1: 0x13f9b30 node::Abort() [./node]\r\n 2: 0x13f9709  [./node]\r\n 3: 0x13b765e  [./node]\r\n 4: 0x17b379c v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [./node]\r\n 5: 0x17b23d5  [./node]\r\n 6: 0x17b1092  [./node]\r\n 7: 0x2717a59  [./node]\r\n[2]    40968 abort      ./node\r\n```\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v12.16.0\r\n* **Platform**:  Linux vul337 4.15.0-91-generic #92-Ubuntu SMP Fri Feb 28 11:09:48 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: process\r\n\r\n### What steps will reproduce the bug?\r\nDirectly run the following code snippet using node:\r\n```\r\nrequire('process').setuid(-0)\r\n```\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nNo. This potential bug can always be reproduced.\r\n\r\n### What is the expected behavior?\r\nThe argument to 'process.setuid' should be a Uint32 or string value, but we passed a -0 into it. The function should throw an exception or other similar error-reporting stuff rather than crash the whole nodejs process.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\nThis is the stack dump produced during abort:\r\n```\r\n./node[37487]: ../src/node_credentials.cc:247:void node::credentials::SetUid(const FunctionCallbackInfo<v8::Value> &): Assertion `args[0]->IsUint32() || args[0]->IsString()' failed.\r\n 1: 0x13f9b30 node::Abort() [./node]\r\n 2: 0x13f9709  [./node]\r\n 3: 0x13ea56b  [./node]\r\n 4: 0x17b379c v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [./node]\r\n 5: 0x17b23d5  [./node]\r\n 6: 0x17b1092  [./node]\r\n 7: 0x2717a59  [./node]\r\n[2]    37487 abort      ./node\r\n```\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","crypto"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v12.16.0\r\n* **Platform**: Linux vul337 4.15.0-91-generic #92-Ubuntu SMP Fri Feb 28 11:09:48 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: crypto\r\n\r\n### What steps will reproduce the bug?\r\nDirectly run the following code snippet using node:\r\n```\r\nrequire('crypto').createDiffieHellman('str', 3.14);\r\n```\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nNo. This potential bug can always be reproduced.\r\n\r\n### What is the expected behavior?\r\nThe second argument to 'crypto.createDiffieHellman(prime: string, prime_encoding: HexBase64Latin1Encoding)' should be a 'HexBase64Latin1Encoding' value as the encoding of the first argument, but we passed a float pointer value into it. The function should throw an exception or other similar error-reporting stuff rather than crash the whole nodejs process.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\nThis is the stack dump produced during abort:\r\n```\r\n./node[36752]: ../src/util-inl.h:495:node::ArrayBufferViewContents<char, 64>::ArrayBufferViewContents(v8::Local<v8::Value>) [T = char, kStackStorageSize = 64]: Assertion `value->IsArrayBufferView()' failed.\r\n 1: 0x13f9b30 node::Abort() [./node]\r\n 2: 0x13f9709  [./node]\r\n 3: 0x160c480 node::crypto::DiffieHellman::DiffieHellmanGroup(v8::FunctionCallbackInfo<v8::Value> const&) [./node]\r\n 4: 0x17b379c v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [./node]\r\n 5: 0x17b1c91  [./node]\r\n 6: 0x17b104c  [./node]\r\n 7: 0x2717a59  [./node]\r\n[1]    36752 abort      ./node\r\n```\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","worker"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**:v12.16.0\r\n* **Platform**:Linux vul337 4.15.0-91-generic #92-Ubuntu SMP Fri Feb 28 11:09:48 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: process\r\n\r\n### What steps will reproduce the bug?\r\nDirectly run the following code snippet using node:\r\n```\r\nrequire('worker_threads').receiveMessageOnPort(0)\r\n```\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nNo. This potential bug can always be reproduced.\r\n\r\n### What is the expected behavior?\r\n\r\nThe argument to 'worker_threads.receiveMessageOnPort' should be a 'MessagePort' object, but we passed an integer value into it. The function should throw an exception or other similar error-reporting stuff rather than crash the whole nodejs process.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\n\r\nThis is the stack dump produced during abort:\r\n```\r\n./node[17081]: ../src/node_messaging.cc:878:static void node::worker::MessagePort::ReceiveMessage(const FunctionCallbackInfo<v8::Value> &): Assertion `args[0]->IsObject()' failed.\r\n 1: 0x13f9b30 node::Abort() [./node]\r\n 2: 0x13f9709  [./node]\r\n 3: 0x148b6c0 node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&) [./node]\r\n 4: 0x17b379c v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [./node]\r\n 5: 0x17b23d5  [./node]\r\n 6: 0x17b1092  [./node]\r\n 7: 0x2717a59  [./node]\r\n[1]    17081 abort      ./node\r\n```\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","crypto"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: 12.16.0\r\n* **Platform**: Linux vul337 4.15.0-91-generic #92-Ubuntu SMP Fri Feb 28 11:09:48 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: crypto\r\n\r\n### What steps will reproduce the bug?\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\nDirectly run the following code snippet using `node`:\r\n\r\n```javascript\r\nrequire('crypto').createDiffieHellman(0.123)\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nNo. This potential bug can always be reproduced.\r\n\r\n### What is the expected behavior?\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\nThe argument to `crypto.createDiffieHellman` should be an integer, but we passed a floating point number into it. The function should throw an exception or other similar error-reporting stuff rather than crash the whole nodejs process.\r\n\r\n### What do you see instead?\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\nThis is the stack dump produced during `abort`:\r\n```\r\nnode[55090]: ../src/node_buffer.cc:211:char *node::Buffer::Data(Local<v8::Value>): Assertion `val->IsArrayBufferView()' failed.\r\n 1: 0x10003c597 node::Abort() [/usr/local/bin/node]\r\n 2: 0x10003b5b9 node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*) [/usr/local/bin/node]\r\n 3: 0x10004e3dd node::Buffer::Data(v8::Local<v8::Object>) [/usr/local/bin/node]\r\n 4: 0x10011f6c3 node::crypto::DiffieHellman::New(v8::FunctionCallbackInfo<v8::Value> const&) [/usr/local/bin/node]\r\n 5: 0x10023663f v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo*) [/usr/local/bin/node]\r\n 6: 0x1002357db v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<true>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) [/usr/local/bin/node]\r\n 7: 0x1002351f7 v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) [/usr/local/bin/node]\r\n 8: 0x2b916465be3d\r\n[1]    55090 abort      node\r\n```\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","fs","repl"],"text":"When launching the node.js REPL with the `--trace-sync-io` option, then typing sync fs statements, the repl prints one or two trace sync io statements for every key press following the opening `(` ... See screenshot:\r\n\r\n![image](https://user-images.githubusercontent.com/439929/78677080-2806ff80-789c-11ea-8eb4-c31d0b4e5706.png)\r\n\r\n/cc @BridgeAR "},
{"labels":["confirmed-bug","fs","libuv"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v13.10.1\r\n* **Platform**: Darwin dirac.imetrical.com 18.7.0 Darwin Kernel Version 18.7.0: Sun Dec  1 18:59:03 PST 2019; root:xnu-4903.278.19~1/RELEASE_X86_64 x86_64\r\n* **Subsystem**: fs.stat\r\n\r\n### What steps will reproduce the bug?\r\n\r\n```js\r\n// statPreEpoch.js\r\nconst fs = require('fs')\r\nconst path = 'coco.txt'\r\nconst { mtime } = fs.statSync(path)\r\nconsole.log(`mtime of ${path}: ${mtime}`)\r\n```\r\n\r\n*This is on Darwin (macOS)*\r\n\r\n```bash\r\n# This is correct\r\n$ touch -mt 197001010000.00 coco.txt\r\n$ stat coco.txt \r\n16777220 104232499 -rw-r--r-- 1 daniel staff 0 0 \"Mar 19 13:26:22 2020\" \"Jan  1 00:00:00 1970\" \"Mar 19 15:01:21 2020\" \"Dec 31 19:00:00 1969\" 4096 0 0 coco.txt\r\n$ node statPreEpoch.js \r\nmtime of coco.txt: Thu Jan 01 1970 00:00:00 GMT-0500 (GMT-05:00)\r\n\r\n# This is the bug:\r\ntouch -mt 196805160000.00 coco.txt \r\nstat coco.txt \r\n16777220 104232499 -rw-r--r-- 1 daniel staff 0 0 \"Mar 19 13:26:22 2020\" \"May 16 00:00:00 1968\" \"Mar 19 15:00:23 2020\" \"Dec 31 19:00:00 1969\" 4096 0 0 coco.txt\r\n$ node statPreEpoch.js \r\nmtime of coco.txt: Invalid Date\r\n```\r\n\r\nThis is on Linux (in Docker\r\n```bash\r\n$ docker run --rm -it -v $(pwd)/statPreEpoch.js:/src/statPreEpoch.js node:13.10 bash\r\n$ uname -a\r\nLinux 38f95bbffb38 4.19.76-linuxkit #1 SMP Thu Oct 17 19:31:58 UTC 2019 x86_64 GNU/Linux\r\n$ touch -mt 197001010000.00 coco.txt\r\n$ stat coco.txt \r\n  File: coco.txt\r\n  Size: 0         \tBlocks: 0          IO Block: 4096   regular empty file\r\nDevice: abh/171d\tInode: 2910905     Links: 1\r\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\r\nAccess: 2020-03-19 19:10:48.080137057 +0000\r\nModify: 1970-01-01 00:00:00.000000000 +0000\r\nChange: 2020-03-19 19:10:48.080137057 +0000\r\n$ node  /src/statPreEpoch.js\r\nmtime of coco.txt: Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\r\n\r\n# This is the bug\r\n$ touch -mt 196805160000.00 coco.txt \r\n$ stat coco.txt \r\n  File: coco.txt\r\n  Size: 0         \tBlocks: 0          IO Block: 4096   regular empty file\r\nDevice: abh/171d\tInode: 2910905     Links: 1\r\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\r\nAccess: 2020-03-19 19:10:48.080137057 +0000\r\nModify: 1968-05-16 00:00:00.000000000 +0000\r\nChange: 2020-03-19 19:12:24.343012135 +0000\r\n Birth: -\r\n$ node  /src/statPreEpoch.js\r\nmtime of coco.txt: Invalid Date\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nEvery time that mtime < unix epoch (1970-01-01T00:00:00Z)\r\n\r\n### What is the expected behavior?\r\n\r\nReturn a valid Date Object, for example\r\n\r\n```bash\r\n$ node  /src/statPreEpoch.js\r\nmtime of coco.txt: Thu May 16 1968 00:00:00 GMT+0000 (Coordinated Universal Time)\r\n```\r\n\r\n```js\r\n> new Date(\"1968-05-16T00:00:00-04:00\")\r\n1968-05-16T04:00:00.000Z\r\n> new Date(\"1968-05-16T00:00:00-04:00\").getTime()\r\n-51393600000\r\n```\r\n\r\n### What do you see instead?\r\n\r\n```bash\r\n$ node  /src/statPreEpoch.js\r\nmtime of coco.txt: Invalid Date\r\n```\r\n\r\n### Additional information\r\n\r\nI discovered this behavior by trying to use `fs.utimes` which is also not able to correctly handle dates before unix epoch, although `fs.utimes` seems to have a workaround by using the string representation of unix time."},
{"labels":["confirmed-bug","crypto"],"text":"* **Version**: v13.10.1\r\n* **Platform**: Ubuntu 18.04\r\n* **Subsystem**: crypto\r\n\r\nIf you call `crypto.privateDecrypt(...)` with an passphrase-encrypted private RSA key PEM but without providing a passphrase, it correctly raises `TypeError: Passphrase required for encrypted key`. But after that, if you try to call it again with an *unencrypted* private RSA key PEM, then the same error is raised. It seems like the first call corrupts some internal state (maybe openssl one) breaking subsequent calls. Example follows:\r\n\r\n```js\r\n// 1- Generate RSA key pair\r\nconst crypto = require('crypto')\r\nconst pair = crypto.generateKeyPairSync('rsa', { modulusLength : 1024 })\r\n\r\n// 2- Create a PEM uncrypted and the same one but encrypted with a passphrase\r\nconst privPEM        = pair.privateKey.export({ type : 'pkcs1', format : 'pem'})\r\nconst privPEMcrypted = pair.privateKey.export({ type : 'pkcs1', format : 'pem', \r\n                                                cipher : 'aes128', passphrase : 'mysecret'})\r\n\r\n// 3- Encrypt some data with public Key, works OK.\r\nconst dataEncrypted = crypto.publicEncrypt(pair.publicKey, Buffer.from(\"raw data\"))\r\n\r\n// 4- Try to decrypt it using the uncrypted Priv PEM (FIRST TIME)\r\nconst decrypt = (pem) => crypto.privateDecrypt(pem, dataEncrypted).toString()\r\n\r\n// As expected, this works ok:\r\nconsole.log('decrypt privPEM 1:', decrypt(privPEM)) \r\n\r\n// 5- Now try to decrypt it using the crypted Priv PEM but WITHOUT specifing a\r\n// passphrase. This will expectedly fail raising an exception:\r\ntry { \r\n    decrypt(privPEMcrypted)\r\n    // => TypeError: Passphrase required for encrypted key\r\n} catch(e) {\r\n    console.log('Ok, I expected this error:', e)\r\n}\r\n\r\n// 6- Now repeat the SAME step 4, this will FAIL with the same 'Passphrase\r\n// required for encrypted key' error from step 5, but this PEM is uncrypted, so\r\n// we found a bug.\r\nconsole.log(\"\\n\\nNow this must not fail... but it does:\")\r\n\r\nconsole.log('decrypt privPEM 2:', decrypt(privPEM))\r\n// => TypeError: Passphrase required for encrypted key\r\n```\r\nOutput:\r\n\r\n```\r\n$ node test-crypto-bug.js \r\ndecrypt privPEM 1: raw data\r\nOk, I expected this error: TypeError: Passphrase required for encrypted key\r\n    at Object.privateDecrypt (internal/crypto/cipher.js:63:12)\r\n    at decrypt (/tmp/test-crypto-bug.js:14:33)\r\n    at Object.<anonymous> (/tmp/test-crypto-bug.js:22:5)\r\n    at Module._compile (internal/modules/cjs/loader.js:1147:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1167:10)\r\n    at Module.load (internal/modules/cjs/loader.js:996:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:896:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47 {\r\n  code: 'ERR_MISSING_PASSPHRASE'\r\n}\r\n\r\n\r\nNow this must not fail... but it does:\r\ninternal/crypto/cipher.js:63\r\n    return method(data, format, type, passphrase, buffer, padding, oaepHash,\r\n           ^\r\n\r\nTypeError: Passphrase required for encrypted key\r\n    at Object.privateDecrypt (internal/crypto/cipher.js:63:12)\r\n    at decrypt (/tmp/test-crypto-bug.js:14:33)\r\n    at Object.<anonymous> (/tmp/test-crypto-bug.js:33:35)\r\n    at Module._compile (internal/modules/cjs/loader.js:1147:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1167:10)\r\n    at Module.load (internal/modules/cjs/loader.js:996:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:896:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47 {\r\n  code: 'ERR_MISSING_PASSPHRASE'\r\n}\r\n/tmp$ \r\n```\r\n"},
{"labels":["ES Modules","confirmed-bug"],"text":"* **Version**: 13.9.0\r\n* **Platform**: Linux\r\n\r\n### What steps will reproduce the bug?\r\n\r\n1. Clone https://github.com/dandv/node-cant-find-module-with-main-not-index.js\r\n2. `npm start`\r\n\r\n### What is the expected behavior?\r\n\r\nThe script should display `Success!`, and does do so if `mypackage/Lib.js` is renamed to `mypackage/index.js`.\r\n\r\n### What do you see instead?\r\n\r\n```\r\ninternal/modules/esm/resolve.js:61\r\n  let url = moduleWrapResolve(specifier, parentURL);\r\n            ^\r\n\r\nError: Cannot find module /home/dandv/prg/node-cant-find-module-with-main-not-index.js/mypackage imported from /home/dandv/prg/node-cant-find-module-with-main-not-index.js/run.js\r\n    at Loader.defaultResolve [as _resolve] (internal/modules/esm/resolve.js:61:13)\r\n    at Loader.resolve (internal/modules/esm/loader.js:85:40)\r\n    at Loader.getModuleJob (internal/modules/esm/loader.js:191:28)\r\n    at ModuleWrap.<anonymous> (internal/modules/esm/module_job.js:42:40)\r\n    at link (internal/modules/esm/module_job.js:41:36) {\r\n  code: 'ERR_MODULE_NOT_FOUND'\r\n}\r\n```\r\n\r\n### Additional information\r\n\r\nI'm trying to run node with `-experimental-specifier-resolution=node` because [TypeScript can't output .mjs files](https://github.com/microsoft/TypeScript/issues/18442) and I want to use extension-less `import` statements. I prefer to use `Lib.js` instead of `index.js` to distinguish in my IDE between the main files of multiple packages in my monorepo that otherwise would all look like `index.js`."},
{"labels":["async_hooks","confirmed-bug","tls"],"text":"* **Version**: 13.9, 13.10\r\n* **Platform**: All\r\n* **Subsystem**:\r\n\r\n### What steps will reproduce the bug?\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\nI am maintainer of [cWS](https://github.com/ClusterWS/cWS) which is C++ WebSocket  bindings for Node js. To reproduce issue you can fork repo use node 13.8 then run `node ./examples/ssl.js` and navigate to `https://localhost:3000` (in dev tools you will see that wss connection established properly). Then after upgrading to node 13.9 or 13.10 wss connection does not work any more. In Firefox i am getting `ssl_error_rx_record_too_long`. By the way cWS runs on `TLSv1_2_method`\r\n\r\n### How often does it reproduce? Is there a required condition?\r\nAlways\r\n\r\n### What is the expected behavior?\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\nWork the same way as Node 13.8 and correctly establish wss connection and work\r\n\r\n### What do you see instead?\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\nSSL errors after connect\r\n"},
{"labels":["async_hooks","confirmed-bug"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: master\r\n* **Platform**: Linux\r\n* **Subsystem**: async_hooks\r\n\r\n### What steps will reproduce the bug?\r\n\r\nI have been trying to write some new scenarios for AsyncLocalStorage class, as mentioned in https://github.com/nodejs/node/issues/31978, and came across this issue:\r\n\r\n\r\n```js\r\nconst { AsyncLocalStorage } = require('async_hooks');\r\nconst http = require('http')\r\nconst cls = new AsyncLocalStorage();\r\n\r\nconst server = http.createServer((req, res) => {\r\n  res.write('hello')\r\n  setTimeout(() => {\r\n    res.end(' world!')\r\n  }, 1000)\r\n})\r\n\r\nserver.listen(12000, () => {\r\n  cls.run(() => {\r\n    const req = http.get('http://localhost:12000', (res) => {\r\n      const store = cls.getStore()\r\n      store.set('foo', '')\r\n      res.on('data', (d) => { console.log(cls.getStore()) });\r\n    })\r\n    req.end()\r\n  })\r\n})\r\n```\r\n\r\nIn this simple client-server program, the server is sending two chunks of data, forcing the `ondata` handler to be invoked twice.\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nevery time\r\n\r\n### What is the expected behavior?\r\n\r\nI get an empty Map every time in the ondata callback\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\n\r\nUnfortunately, the store is `undefined` after the first invocation:\r\n\r\n```trace\r\n$ node foo.js\r\nMap(1) { 'foo' => '' }\r\nundefined\r\n^C\r\n$\r\n```\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\nIf I replace this with a simple timer code, this logic works fine:\r\n\r\n```js\r\nconst { AsyncLocalStorage } = require('async_hooks');\r\nconst cls = new AsyncLocalStorage();\r\n\r\ncls.run(() => {\r\n  const store = cls.getStore()\r\n  store.set('foo', 'bar')\r\n  setInterval(() => {\r\n    console.log(cls.getStore().get('foo'))\r\n  }, 1000)\r\n}) \r\n```\r\n\r\n$ node timer.js\r\n```trace\r\nbar\r\nbar\r\nbar\r\nbar\r\n^C\r\n```\r\n\r\n\r\nAm I missing something?\r\n\r\nPing @vdeturckheim \r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["confirmed-bug","windows"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: 12.x\r\n* **Platform**: Windows\r\n* **Subsystem**:\r\n\r\nI took the documentation specified in Building.md and converted that into a DockerFile. I had to make some additions to supplement the boxstarter scripts because that ran into errors installing the build tools. To get around that issue I installed those first via npm, [following guidelines in this post](https://spin.atomicobject.com/2019/03/27/node-gyp-windows/), then called the boxstarter scripts. This enabled me to get passed that particular problem but now I have a new issue which is detailed below in the console output. I have included a dockerfile to reproduce the issue. Any assistance will be greatly appreciated.\r\n\r\nOutput of the build\r\n```Powershell\r\nC:\\node>.\\vcbuild full-icu download-all\r\nLooking for Python\r\nPython 2 found in C:\\Python27\\\\python.exe\r\nLooking for NASM\r\nLooking for Visual Studio 2017\r\nFound MSVS version 15.0\r\nconfigure  \"--download=all\" --with-intl=full-icu --dest-cpu=x64\r\nINFO: Using floating patch \"tools/icu/patches/64/source/common/putil.cpp\" from \"tools/icu\"\r\nINFO: Using floating patch \"tools/icu/patches/64/source/i18n/dtptngen.cpp\" from \"tools/icu\"\r\nWarning: Missing input files:\r\ntools\\msvs\\genfiles\\node_etw_provider.rc\r\ntools\\msvs\\genfiles\\node_etw_provider.h\r\ntools\\v8_gypfiles\\..\\..\\deps\\v8\\src\\regexp\\regexp-special-case.h\r\nINFO: configure completed successfully\r\nProject files generated.\r\nThe system cannot find the file specified.\r\n```\r\n\r\nDockerfile to reproduce the behaviour\r\n\r\n```Dockerfile\r\nARG version=ltsc2019\r\nFROM mcr.microsoft.com/windows/servercore:$version\r\n\r\nENV chocolateyUseWindowsCompression false\r\n\r\nRUN powershell -Command \\\r\n    iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')); \\\r\n    choco feature disable --name showDownloadProgress  \r\n\r\nRUN powershell choco install nodejs-lts -y\r\nRUN npm install --global --production windows-build-tools\r\nRUN npm config set msvs_version 2017 -global\r\nRUN npm install --global node-gyp --no-optional\r\nRUN powershell choco install vim -y \r\n\r\n\r\nRUN powershell -Command \\\r\n    iex ((New-Object System.Net.WebClient).DownloadString('https://boxstarter.org/bootstrapper.ps1')) ; \\\r\n    Get-Boxstarter -Force ; \\\r\n    Install-BoxstarterPackage https://raw.githubusercontent.com/nodejs/node/master/tools/bootstrap/windows_boxstarter -DisableReboots\r\n\r\nRUN powershell git clone https://github.com/nodejs/node.git\r\nRUN powershell  Set-Location -Path C:\\Node; git checkout v12.x    \r\n\r\nRUN powershell Set-Location -Path C:\\Node; .\\vcbuild full-icu download-all\r\n```\r\n"},
{"labels":["V8 Engine","confirmed-bug"],"text":"* **Version**: v13.9.0\r\n* **Platform**: Linux and MacOS\r\n* **Subsystem**: ?\r\n\r\nAlso reproduced in v12 but not in v10 or v11.\r\n\r\n### What steps will reproduce the bug?\r\n\r\n```js\r\nasync function* gen() {\r\n  try {\r\n    yield 42\r\n  } catch(e) {\r\n    console.log('Error caught!')\r\n  }\r\n}\r\n\r\n(async () => {\r\n  const g = gen()\r\n  await g.next() // go to yield 42\r\n  try {\r\n    await g.throw(new Error()) // throw error from the yield\r\n  } catch (e) {\r\n    console.error('e has been rethrown !')\r\n  }\r\n})()\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nThis happens only:\r\n - with async generators\r\n - on the last yield\r\n - without any explicit return (in the generator)\r\n\r\n### What is the expected behavior?\r\n\r\n`g.throw()` should return a result `{ done: true, value: undefined }`\r\n\r\n### What do you see instead?\r\n\r\n`g.throw()` rethrows the error.\r\n\r\n### Additional information\r\n"},
{"labels":["confirmed-bug","crypto"],"text":"When you verify a 'ieee-p1363' encoded signature it fails, even if the signature is correct.\r\n* **Version**: v13.8.0\r\n* **Platform**: 64-bit Windows 10\r\n* **Subsystem**: crypto\r\n\r\n### What steps will reproduce the bug?\r\n```\r\nconst crypto = require('crypto');\r\nconst key = crypto.generateKeyPairSync('ec', { namedCurve: 'P-256' });\r\n\r\n//ieee-p1363 signature, which seems to be the correct.\r\nconst signatureP1363 = crypto.createSign('SHA256').update('abc').sign({ key: key.privateKey, dsaEncoding: 'ieee-p1363' });\r\n//ieee-p1363 verification, which fails.\r\nconsole.log(crypto.createVerify('SHA256').update('abc').verify({ key: key.publicKey, dsaEncoding: 'ieee-p1363' }, signatureP1363));\r\n\r\n//Compared to der signature and verification, which work as expected:\r\nconst signatureDER = crypto.createSign('SHA256').update('abc').sign({ key: key.privateKey, dsaEncoding: 'der' });\r\nconsole.log(crypto.createVerify('SHA256').update('abc').verify({ key: key.publicKey, dsaEncoding: 'der' }, signatureDER));\r\n```\r\n\r\n### Additional information\r\nThe problem seems to be the verification algorithm, not the signing algorithm. You can test that the generated signature is correct in chrome using:\r\n\r\n```\r\n//key.publicKey.export({ format: 'der', type: 'spki' }).toString('base64');\r\nconst base64key = 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/V0xKgeZJeIFra+gshXB6OpM5IKuhHwcBkpu5ZdMZZM62x+GahHJdrll+Q3aihYNfakkzf7W65dIdDAhLImu0w==';\r\n//signatureP1363.toString('base64');\r\nconst base64sig = '+aocUpmRHRSxfpCJpwCCuQoFagatOlsFganmXiqtztFo9iBHqE6z7A7KQcMs1k9VASt3cgtkJqyPKAY4OTyJ8A==';\r\n//Verify the signature\r\nconst uint8key = Uint8Array.from(atob(base64key), (c) => c.charCodeAt(0));\r\nconst uint8sig = Uint8Array.from(atob(base64sig), (c) => c.charCodeAt(0));\r\nconst uint8data = Uint8Array.from('abc', (c) => c.charCodeAt(0));\r\nconst params = { name: 'ECDSA', hash: 'SHA-256', namedCurve: 'P-256' };\r\nconst cryptokey = await window.crypto.subtle.importKey('spki', uint8key, params, false, ['verify']);\r\nawait window.crypto.subtle.verify(params, cryptokey, uint8sig, uint8data);\r\n```"},
{"labels":["confirmed-bug","http"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: 12.16.0 | 13.8.0\r\n* **Platform**: Darwin Kernel Version 18.6.0\r\n* **Subsystem**:\r\n\r\n### What steps will reproduce the bug?\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\nThrowing from a response listener (callback) to `http.get()` will not trigger `process.once('uncaughtException', () => {})`. Interestingly, throwing from a request listener (callback) to `http.createServer()`  will still. \r\n\r\nThis behavior changed with 12.16.0, I'm guessing likely due to the porting of the emit changes?\r\n\r\n```js\r\nconst http = require('http')\r\n\r\nlet server\r\nlet request\r\n\r\nprocess.once('uncaughtException', function() {\r\n  // never gets here from response listener in 12.16, works fine < 12.16.\r\n  console.log('in uncaughtException handler')\r\n\r\n  server.close(done)\r\n})\r\n\r\nserver = http.createServer(function cb_createServer(request, response) {\r\n  // Throw from request listener will result in uncaughtException\r\n  //throw new Error('wat')\r\n  response.writeHead(200, {'Content-Type': 'text/plain'})\r\n  response.end()\r\n})\r\n\r\nserver.listen(8183, function() {\r\n  request = http.get({host: 'localhost', port: 8183}, function() {\r\n    // Throw from response listener will not result in uncaughtException\r\n    throw new Error('whoah')\r\n  })\r\n})\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nConsistently does not trigger `uncaughtException` / does not allow handling via `process.on('uncaughtException', ...)`.\r\n\r\n### What is the expected behavior?\r\n\r\nShould be able to notice the uncaught exception thrown from the handler.\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### What do you see instead?\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n"},
{"labels":["ES Modules","confirmed-bug","module","v12.x"],"text":"Repro: clone https://github.com/ljharb/has-package-exports\r\n\r\nIt has a dev dep of `\"has-package-exports\": \"file:.\"`, so that in every node version, i can `require('has-package-exports')` from within the package, and it works.\r\n\r\nIn node v13.6 and v12.15, `node test` passes without issuing `(node:96292) ExperimentalWarning: Package name self resolution is an experimental feature. This feature could change at any time` as a warning.\r\n\r\nIn node v13.7, the warning is correctly issued, and the local dev dep is byassed.\r\n\r\nHowever, in node v12.16, without passing any flags, the warning is issued and the local dev dep is bypassed. v12.16 and v12.15 should behave identically with respect to this feature, regardless of the presence of \"exports\" in package.json.\r\n\r\ncc @nodejs/modules-active-members "},
{"labels":["child_process","confirmed-bug"],"text":"<!--\r\nThank you for reporting an issue.\r\n\r\nThis issue tracker is for bugs and issues found within Node.js core.\r\nIf you require more general support please file an issue on our help\r\nrepo. https://github.com/nodejs/help\r\n\r\n\r\nPlease fill in as much of the template below as you're able.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify affected core module name\r\n-->\r\n\r\n* **Version**: v13.8.0, v12.16.0\r\n* **Platform**: macOS 10.15.3, Ubuntu 16.04.6 (4.15.0-70-generic)\r\n* **Subsystem**: child_process, src/spawn_sync.c\r\n\r\n### What steps will reproduce the bug?\r\n\r\n<!--\r\nEnter details about your bug, preferably a simple code snippet that can be\r\nrun using `node` directly without installing third-party dependencies.\r\n-->\r\n\r\n```\r\n$ cat test.c\r\n#include <unistd.h>\r\n#include <stdio.h>\r\nint main() { setuid(0); while (1) printf(\"hello\"); }\r\n\r\n$ gcc -o test test.c; sudo chown root test; sudo chmod 4755 test\r\n\r\n$ node -e \"require('child_process').spawnSync('./test')\"\r\n```\r\n\r\nOR\r\n\r\n```\r\n$ node -e \"require('child_process').spawnSync('sudo', ['bash', '-c', 'ls -lR /'])\"\r\n```\r\n\r\n### How often does it reproduce? Is there a required condition?\r\n\r\nAlways\r\n\r\n### What is the expected behavior?\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\nI expect to get `ENOBUF` (because of maxBuffer reached) and/or `EPERM` (because child process cannot be killed), so I can handle it somehow - but not crash.\r\n\r\n### What do you see instead?\r\n\r\n<!--\r\nIf possible please provide textual output instead of screenshots.\r\n-->\r\n\r\n```\r\nnode[68984]: ../src/spawn_sync.cc:611:void node::SyncProcessRunner::Kill(): Assertion `r >= 0 || r == UV_ESRCH' failed.\r\n 1: 0x100ba0c4a node::Abort() (.cold.1) [/usr/local/bin/node]\r\n 2: 0x100084961 node::FatalError(char const*, char const*) [/usr/local/bin/node]\r\n 3: 0x100084719 node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode) [/usr/local/bin/node]\r\n 4: 0x10010657d node::SyncProcessRunner::Kill() [/usr/local/bin/node]\r\n 5: 0x1006cb116 uv__stream_io [/usr/local/bin/node]\r\n 6: 0x1006d23a8 uv__io_poll [/usr/local/bin/node]\r\n 7: 0x1006c2fa2 uv_run [/usr/local/bin/node]\r\n 8: 0x10010598f node::SyncProcessRunner::TryInitializeAndRunLoop(v8::Local<v8::Value>) [/usr/local/bin/node]\r\n 9: 0x100105674 node::SyncProcessRunner::Run(v8::Local<v8::Value>) [/usr/local/bin/node]\r\n10: 0x100105513 node::SyncProcessRunner::Spawn(v8::FunctionCallbackInfo<v8::Value> const&) [/usr/local/bin/node]\r\n11: 0x1001cb578 v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [/usr/local/bin/node]\r\n12: 0x1001cac02 v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) [/usr/local/bin/node]\r\n13: 0x1001ca40e v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) [/usr/local/bin/node]\r\n14: 0x1007503d9 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit [/usr/local/bin/node]\r\nzsh: abort      node -e \"require('child_process').spawnSync('./test')\"\r\n```\r\n\r\n### Additional information\r\n\r\n<!--\r\nTell us anything else you think we should know.\r\n-->\r\n\r\nAccording to documentation, `child_process.spawnSync()` terminates child process if it's output is larger than `maxBuffer`. If child process can't be killed (because of setuid call), node crashes in `CHECK()` below https://github.com/nodejs/node/blob/master/src/spawn_sync.cc#L611:\r\n\r\n```\r\n    // If uv_kill failed with an error that isn't ESRCH, the user probably\r\n    // specified an invalid or unsupported signal. Signal this to the user as\r\n    // and error and kill the process with SIGKILL instead.\r\n    if (r < 0 && r != UV_ESRCH) {\r\n      SetError(r);\r\n\r\n      r = uv_process_kill(&uv_process_, SIGKILL);\r\n      CHECK(r >= 0 || r == UV_ESRCH);\r\n    }\r\n```\r\n\r\nShouldn't we also check for UV_EPERM?"},
{"labels":["confirmed-bug","crypto","fs","stream"],"text":"<!-- Please remove this line and fill the template -->\r\n\r\n* **Node.js Version**: v12.15.0\r\n* **OS**: Linux 5.5.2-arch1-1\r\n* **Scope (install, code, runtime, meta, other?)**: code\r\n* **Module (and version) (if relevant)**: crypto (openssl: '1.1.1d')\r\n\r\nWith a 32768 bytes message, the AES-128-CCM cipher and decipher both work well. \r\nWith a 32769 bytes message, the AES-128-CCM cipher works well, but the decipher failed with a message:\r\n\r\n```\r\nError: Unsupported state or unable to authenticate data\r\n    at Decipheriv._flush (internal/crypto/cipher.js:139:29)\r\n    at Decipheriv.prefinish (_stream_transform.js:140:10)\r\n    at Decipheriv.emit (events.js:223:5)\r\n    at prefinish (_stream_writable.js:670:14)\r\n    at finishMaybe (_stream_writable.js:678:5)\r\n    at endWritable (_stream_writable.js:698:3)\r\n    at Decipheriv.Writable.end (_stream_writable.js:627:5)\r\n    at ReadStream.onend (_stream_readable.js:693:10)\r\n    at Object.onceWrapper (events.js:312:28)\r\n    at ReadStream.emit (events.js:228:7)\r\n```\r\n\r\nI can't understand why. Whatever I change the AAD/IV/authTagLength, it can‘t work.\r\n\r\nHere is my code:\r\n\r\n```js\r\n// execute after: dd if=/dev/random of=random.bin count=1 bs=32769\r\nconst $Crypto = require(\"crypto\");\r\nconst $fs = require(\"fs\");\r\n\r\nconst key = $Crypto.randomBytes(16);\r\n\r\nconst iv = $Crypto.randomBytes(8);\r\n\r\nconst aad = $Crypto.randomBytes(1);\r\n\r\nconst stream = $Crypto.createCipheriv(\"aes-128-ccm\", key, iv, {\r\n    authTagLength: 16\r\n});\r\n\r\nstream.setAAD(aad, {\r\n    plaintextLength: 32769\r\n});\r\n\r\n$fs.createReadStream(\"./random.bin\").pipe(stream).pipe(\r\n    $fs.createWriteStream(\"./random.bin.ciphertext\")\r\n).on(\"finish\", function() {\r\n\r\n    console.info(\"encrypted\");\r\n\r\n    const destream = $Crypto.createDecipheriv(\"aes-128-ccm\", key, iv, {\r\n        authTagLength: 16\r\n    });\r\n    \r\n    destream.setAAD(aad, {\r\n        plaintextLength: 32769\r\n    });\r\n\r\n    destream.setAuthTag(stream.getAuthTag());\r\n    \r\n    $fs.createReadStream(\"./random.bin.ciphertext\").pipe(destream).pipe(\r\n        $fs.createWriteStream(\"./random.bin.plaintext\")\r\n    );\r\n});\r\n```"},
{"labels":["confirmed-bug","fs"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: `v12.4.0`\r\nPlatform: `Linux 5.5.2-arch1-1#1 SMP PREEMPT Tue, 04 Feb 2020 18:56:18 +0000 x86_64 GNU/Linux`\r\nSubsystem: `fs`\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: `v12.4.0`\r\n* **Platform**: `Linux 5.5.2-arch1-1#1 SMP PREEMPT Tue, 04 Feb 2020 18:56:18 +0000 x86_64 GNU/Linux`\r\n* **Subsystem**: `fs`\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nHi,\r\n\r\nWhen using `fs.chown`, I can't find a way to change only one of the two ids. It seems node isn't actually conforming to the `glibc` call linked in the documentation. When passing -1 (which according to [chown](http://man7.org/linux/man-pages/man2/chown.2.html) should result in a noop for this id), I get an error :\r\n\r\n```\r\nThe value of \"uid\" is out of range. It must be >= 0 && < 4294967296. Received -1\r\n```\r\n\r\nIs there a way to specify only one of the two ids ? If yes, can I kindly suggest that it should be added to the docs ?\r\n\r\nThanks\r\n"},
{"labels":["benchmark","confirmed-bug","test"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: Master\r\n* **Platform**: Custom Suites Freestyle\r\n* **Subsystem**: benchmark\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n```\r\ninternal/readline/utils.js:163\r\n  return str.replace(ansi, '');\r\n             ^\r\n\r\nTypeError: Cannot read property 'replace' of undefined\r\n    at stripVTControlCharacters (internal/readline/utils.js:163:14)\r\n    at getStringWidth (internal/readline/utils.js:71:11)\r\n    at main (/home/iojs/build/workspace/node-test-commit-custom-suites-freestyle/benchmark/misc/getstringwidth.js:24:5)\r\n    at /home/iojs/build/workspace/node-test-commit-custom-suites-freestyle/benchmark/common.js:40:28\r\n    at processTicksAndRejections (internal/process/task_queues.js:79:11)\r\nassert.js:102\r\n  throw new AssertionError(obj);\r\n  ^\r\n\r\nAssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\r\n\r\n1 !== 0\r\n\r\n```\r\n\r\nThis has been failing node-daily-master since 10-01-2020. \r\nhttps://ci.nodejs.org/view/Node.js%20Daily/job/node-daily-master/1802/\r\nhttps://ci.nodejs.org/view/Node.js%20Daily/job/node-daily-master/1803/\r\nhttps://ci.nodejs.org/view/Node.js%20Daily/job/node-daily-master/1804/\r\nhttps://ci.nodejs.org/view/Node.js%20Daily/job/node-daily-master/1805/\r\nhttps://ci.nodejs.org/view/Node.js%20Daily/job/node-daily-master/1806/"},
{"labels":["confirmed-bug","doc","tls"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 10.x+\r\n* **Platform**: All\r\n* **Subsystem**: tls\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nWhen I try to create a secure connection over an existing stream, implementing something similar to STARTTLS, the suggested way is to use new tls.TLSSocket(<duplex stream>).\r\n\r\nI also want to use mutual certification authentication but the tlsSocket.authorized is never set to true for the Server even when the client certificate is signed correctly by the expected CA. From the _tls_wrap.js code, it seems this flag is only set for the server when the underlying stream is an actual socket.\r\n\r\nOn the client side things are working as expected, as the client side connection is created with tls.connect().\r\n\r\nIt used to be that the deprecated pair returned by tls.createSecurePair() has access to the internal SSL object, which I can use verifyError() to check the validity of the client certificate. But this hidden feature has also been removed in recent versions.\r\n\r\nWhat is the correct approach to mca for \"upgraded\" connection?\r\n"},
{"labels":["confirmed-bug","repl"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: master\r\n* **Platform**: macOS\r\n* **Subsystem**: repl\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nWhen the length of preview output is exactly equal to the terminal width, the cursor's position move to the end of current line, which seems to be a bug.\r\n\r\n![Kapture 2020-01-10 at 17 56 23](https://user-images.githubusercontent.com/23313266/72143954-9c7fee80-33d2-11ea-8622-f13d4fc1d214.gif)\r\n\r\n/cc @BridgeAR "},
{"labels":["build","confirmed-bug"],"text":"I'm using clang 9.0.0 on linux 5.4. gcc libc++ is at 9.2.0\r\n\r\n```\r\n/usr/bin/ld: node/out/Release/mkcodecache: section .tbss._ZN2v88internal12trap_handler21g_thread_in_wasm_codeE lma 0x3ad7d10 adjusted to 0x3ad7d18\r\n/usr/bin/ld: node/out/Release/mkcodecache: section .tbss._ZN2v88internal4wasm12_GLOBAL__N_123current_code_refs_scopeE lma 0x3ad7d10 adjusted to 0x3ad7d1c\r\n/usr/bin/ld: node/out/Release/node_mksnapshot: section .tbss._ZN2v88internal12trap_handler21g_thread_in_wasm_codeE lma 0x3adc138 adjusted to 0x3adc140\r\n/usr/bin/ld: node/out/Release/node_mksnapshot: section .tbss._ZN2v88internal4wasm12_GLOBAL__N_123current_code_refs_scopeE lma 0x3adc138 adjusted to 0x3adc144\r\n/usr/bin/ld: /usr/lib/libc_nonshared.a(elf-init.oS): in function `__libc_csu_init':\r\n(.text+0x9): undefined reference to `__init_array_start'\r\n/usr/bin/ld: (.text+0x20): undefined reference to `__init_array_end'\r\n/usr/bin/ld: node/out/Release/mkcodecache: hidden symbol `__init_array_end' isn't defined\r\n/usr/bin/ld: final link failed: bad value\r\nclang-9: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[1]: *** [mkcodecache.target.mk:211: node/out/Release/mkcodecache] Error 1\r\nmake[1]: *** Waiting for unfinished jobs....\r\n/usr/bin/ld: /usr/lib/libc_nonshared.a(elf-init.oS): in function `__libc_csu_init':\r\n(.text+0x9): undefined reference to `__init_array_start'\r\n/usr/bin/ld: (.text+0x20): undefined reference to `__init_array_end'\r\n/usr/bin/ld: node/out/Release/node_mksnapshot: hidden symbol `__init_array_end' isn't defined\r\n/usr/bin/ld: final link failed: bad value\r\nclang-9: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[1]: *** [node_mksnapshot.target.mk:211: node/out/Release/node_mksnapshot] Error 1\r\n/usr/bin/ld: node/out/Release/cctest: section .tbss._ZN2v88internal12trap_handler21g_thread_in_wasm_codeE lma 0x3d1a090 adjusted to 0x3d1a098\r\n/usr/bin/ld: node/out/Release/cctest: section .tbss._ZN2v88internal4wasm12_GLOBAL__N_123current_code_refs_scopeE lma 0x3d1a090 adjusted to 0x3d1a09c\r\n/usr/bin/ld: /usr/lib/libc_nonshared.a(elf-init.oS): in function `__libc_csu_init':\r\n(.text+0x9): undefined reference to `__init_array_start'\r\n/usr/bin/ld: (.text+0x20): undefined reference to `__init_array_end'\r\n/usr/bin/ld: /node/out/Release/cctest: hidden symbol `__init_array_end' isn't defined\r\n/usr/bin/ld: final link failed: bad value\r\nclang-9: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[1]: *** [cctest.target.mk:236: node/out/Release/cctest] Error 1\r\nrm 2c2d90d92af32fa2bd6374898760f9e3aec01744.intermediate 92dd4eeebf8d109ba8aadeb5d36dbd389740ec6b.intermediate f12c036df8642cb80f280f6ba7af1a2f28745260.intermediate 81e1bdc2cb7a88361a91e3d45a5b35e6715c2ab6.intermediate\r\nmake: *** [Makefile:101: node] Error 2\r\n```"},
{"labels":["async_hooks","confirmed-bug"],"text":"* **Version**: 13.5.0\r\n* **Platform**: Darwin tau.local 19.0.0 Darwin Kernel Version 19.0.0: Thu Oct 17 16:17:15 PDT 2019; root:xnu-6153.41.3~29/RELEASE_X86_64 x86_64 (but irrelevant to this issue)\r\n* **Subsystem**: async hooks\r\n\r\nThe change in https://github.com/nodejs/node/pull/30965 means that Node now relies on `process._fatalException` calling `emitAfter(asyncId);`\r\n\r\nHowever, this cannot be done in userland code, because the `emitAfter` method is not exposed.\r\n\r\nWith the deprecation of domains in Node.js version 4, [as far as I've been able to tell](https://github.com/nodejs/node/issues/10843), patching `process._fatalException` and tracking the process flow through async hooks is the _only_ way to reliably tie an error back to a chain of continuations.  (And it doesn't even work 100% reliably, because [Promises break async hooks](https://github.com/nodejs/node/issues/26794).)\r\n\r\nFor node-tap, in order to fail the appropriate test when an error is thrown or promise is rejected (most of the time, at least), I'm using [async-hook-domain](http://npm.im/async-hook-domain).  I used to use domains, but was scared off by the noisy warnings.\r\n\r\nNow, a test like this:\r\n\r\n```js\r\nconst t = require('tap')\r\nt.test('failure', t => {\r\n  throw new Error('nope')\r\n})\r\n```\r\n\r\nwhich should output this:\r\n\r\n```\r\n$ node fail.js\r\nTAP version 13\r\n# Subtest: failure\r\n    not ok 1 - nope\r\n      ---\r\n      stack: |\r\n        Test.<anonymous> (fail.js:3:9)\r\n      at:\r\n        line: 3\r\n        column: 9\r\n        file: fail.js\r\n        function: Test.<anonymous>\r\n      tapCaught: testFunctionThrow\r\n      test: failure\r\n      source: |\r\n        t.test('failure', t => {\r\n          throw new Error('nope')\r\n        --------^\r\n        })\r\n      ...\r\n\r\n    1..1\r\n    # failed 1 test\r\nnot ok 1 - failure # time=18.611ms\r\n```\r\n\r\ninstead (as of 503900b4633a541ecbebc159487f775c2669f54d) outputs this:\r\n\r\n```\r\n$ node fail.js\r\nTAP version 13\r\n# Subtest: failure\r\n    not ok 1 - nope\r\n      ---\r\n      stack: |\r\n        Test.<anonymous> (fail.js:3:9)\r\n      at:\r\n        line: 3\r\n        column: 9\r\n        file: fail.js\r\n        function: Test.<anonymous>\r\n      tapCaught: testFunctionThrow\r\n      test: failure\r\n      source: |\r\n        t.test('failure', t => {\r\n          throw new Error('nope')\r\n        --------^\r\n        })\r\n      ...\r\n\r\n    1..1\r\n    # failed 1 test\r\nnot ok 1 - failure # time=18.611ms\r\n\r\nError: async hook stack has become corrupted (actual: 18, expected: 1)\r\n 1: 0x10000b8d9 node::AsyncHooks::pop_async_id(double) [/usr/local/bin/node]\r\n 2: 0x10000189a node::InternalCallbackScope::Close() [/usr/local/bin/node]\r\n 3: 0x10000149a node::InternalCallbackScope::~InternalCallbackScope() [/usr/local/bin/node]\r\n 4: 0x1000b3f45 node::NodeMainInstance::Run() [/usr/local/bin/node]\r\n 5: 0x10005e46f node::Start(int, char**) [/usr/local/bin/node]\r\n 6: 0x7fff657932e5 start [/usr/lib/system/libdyld.dylib]\r\n 7: 0x2\r\n```\r\n\r\nWhat has to happen to get error handling and continuation tracking shipped in core?  The pieces are all there, they're just not exposed in any kind of useful way.  I'm happy to help.\r\n\r\nFailing that, I'd suggest reverting 503900b4633a541ecbebc159487f775c2669f54d."},
{"labels":["confirmed-bug","fs"],"text":"* **Version**: v13.3.0\r\n* **Platform**: Linux pc 5.3.15-1-MANJARO #1 SMP PREEMPT Thu Dec 5 11:01:29 UTC 2019 x86_64 GNU/Linux\r\n* **Subsystem**: fs\r\n\r\nWhen executing:\r\n```js\r\nrequire('fs').writeFileSync('/tmp/empty-file');\r\n```\r\nIt creates a file containing \"undefined\" string:\r\n```bash\r\n% hexdump -C /tmp/empty-file\r\n00000000  75 6e 64 65 66 69 6e 65  64                       |undefined|\r\n00000009\r\n```\r\n\r\nThis is unexpected behavior as I just wanted to create an empty file. I expect it to either write an empty file or throw but in no case have \"undefined\" written as the file content."},
{"labels":["confirmed-bug","http"],"text":"* **Version**: master, v12.14.0, v10.18.0\r\n* **Platform**: Ubuntu\r\n* **Subsystem**: http\r\n\r\n**Describe the bug**\r\nRunning `benchmark/http/incoming_headers.js` fails with error \"autocannon produced strange output\" for:\r\n* master\r\n* v12.14.0\r\n* v10.18.0\r\n\r\n**To Reproduce**\r\nFollow instructions in [running benchmarks](https://github.com/nodejs/node/blob/651c43082698ba3bfa4f2417944719f771c09f04/benchmark/writing-and-running-benchmarks.md#running-benchmarks) to run `benchmark/http/incoming_headers.js`\r\n\r\nExample:\r\n```console\r\n$ node -v\r\nv12.14.0\r\n\r\n$ node benchmark/http/incoming_headers.js\r\nError: autocannon produced strange output: {\"url\":\"http://127.0.0.1:12346/\",\"requests\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"total\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0,\"sent\":89280},\"latency\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0},\"throughput\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"total\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0},\"errors\":0,\"timeouts\":0,\"duration\":5.03,\"start\":\"2019-12-18T17:05:17.412Z\",\"finish\":\"2019-12-18T17:05:22.440Z\",\"connections\":50,\"pipelining\":1,\"non2xx\":0,\"1xx\":0,\"2xx\":0,\"3xx\":0,\"4xx\":0,\"5xx\":0}\r\n\r\n    at ChildProcess.<anonymous> (/home/trivikr/workspace/node/benchmark/_http-benchmarkers.js:235:16)\r\n    at Object.onceWrapper (events.js:300:26)\r\n    at ChildProcess.emit (events.js:210:5)\r\n    at maybeClose (internal/child_process.js:1021:16)\r\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:283:5)\r\n\r\n$ nvm use 10\r\nNow using node v10.18.0 (npm v6.13.4)\r\n\r\n$ node benchmark/http/incoming_headers.js\r\nError: autocannon produced strange output: {\"url\":\"http://127.0.0.1:12346/\",\"requests\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"total\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0,\"sent\":90101},\"latency\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0},\"throughput\":{\"average\":0,\"mean\":0,\"stddev\":0,\"min\":0,\"max\":0,\"total\":0,\"p0_001\":0,\"p0_01\":0,\"p0_1\":0,\"p1\":0,\"p2_5\":0,\"p10\":0,\"p25\":0,\"p50\":0,\"p75\":0,\"p90\":0,\"p97_5\":0,\"p99\":0,\"p99_9\":0,\"p99_99\":0,\"p99_999\":0},\"errors\":0,\"timeouts\":0,\"duration\":5.11,\"start\":\"2019-12-18T17:09:06.423Z\",\"finish\":\"2019-12-18T17:09:11.532Z\",\"connections\":50,\"pipelining\":1,\"non2xx\":0,\"1xx\":0,\"2xx\":0,\"3xx\":0,\"4xx\":0,\"5xx\":0}\r\n\r\n    at ChildProcess.child.once (/home/trivikr/workspace/node/benchmark/_http-benchmarkers.js:235:16)\r\n    at Object.onceWrapper (events.js:286:20)\r\n    at ChildProcess.emit (events.js:198:13)\r\n    at maybeClose (internal/child_process.js:982:16)\r\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:259:5)\r\n```\r\n\r\n**Expected behavior**\r\nThe `benchmark/http/headers.js` runs without any error\r\n\r\n**Additional context**\r\nI came across this issue as part of running benchmarks while moving to `for...of` loop in the initial commits of https://github.com/nodejs/node/pull/30958"},
{"labels":["confirmed-bug","promises"],"text":"* **Version**: 12.13.1 / 13.3.0\r\n* **Platform**: `Linux lt2.cfware.com 5.3.11-200.fc30.x86_64 #1 SMP Tue Nov 12 19:25:25 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\nTake the following script:\r\n```js\r\n'use strict';\r\n\r\nPromise.reject('rejection 1');\r\nPromise.reject('rejection 2').catch(() => {});\r\n```\r\n\r\nThe expected result is an unhandledRejection for `rejection 1`.  This script produces no warnings on node.js 12 or 13."},
{"labels":["confirmed-bug","fs"],"text":"* **Version**: 13.3.0\r\n* **Platform**: Windows 10 x64\r\n```js\r\nconst fs = require('fs')\r\nfs.readFile('nonexistentfile', (err) => console.log(err.stack))\r\n```\r\n**What is the expected output?**\r\nThe err.stack should contain error text and stack\r\nSame as readFileSync function:\r\n> Error: ENOENT: no such file or directory, open 'nonexistentfile'\r\n>     at Object.openSync (fs.js:446:3)\r\n>     at Object.readFileSync (fs.js:348:35)\r\n> ...\r\n\r\n**What do you see instead?**\r\nerr.stack only contains error text\r\n> Error: ENOENT: no such file or directory, open 'C:\\dev\\projects\\ntest\\nonexistentfile'\r\n\r\n\r\n`fs.writeFile` have same trouble\r\nАnother strange thing is that the error text is also different (local/absolute path)\r\n\r\n"},
{"labels":["confirmed-bug","wasi","wasm"],"text":"when `preopens` directory not really exists, Node.js failed with \r\n\r\n```console\r\nnode[55811]: ../src/node_wasi.cc:88:node::wasi::WASI::WASI(node::Environment *, Local<v8::Object>, uvwasi_options_t *): Assertion `(uvwasi_init(&uvw_, options)) == (0)' failed.\r\n 1: 0x100081683 node::Abort() [/usr/local/bin/node]\r\n 2: 0x10008142b node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode) [/usr/local/bin/node]\r\n 3: 0x1000e58be node::wasi::WASI::WASI(node::Environment*, v8::Local<v8::Object>, uvwasi_options_s*) [/usr/local/bin/node]\r\n 4: 0x1000e5e5b node::wasi::WASI::New(v8::FunctionCallbackInfo<v8::Value> const&) [/usr/local/bin/node]\r\n 5: 0x1001ec8d0 v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) [/usr/local/bin/node]\r\n 6: 0x1001ebb9d v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<true>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) [/usr/local/bin/node]\r\n 7: 0x1001eb557 v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) [/usr/local/bin/node]\r\n 8: 0x100951939 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit [/usr/local/bin/node]\r\nfish: 'node --experimental-wasi-unstab…' terminated by signal SIGABRT (Abort)\r\n```\r\n\r\nRepro code:\r\n```js\r\n\"use strict\";\r\nconst fs = require('fs');\r\nconst { WASI } = require('wasi');\r\nconst wasi = new WASI({\r\n    args: process.argv,\r\n    env: process.env,\r\n    preopens: {\r\n        '/sandbox': '/not/real/path'\r\n    }\r\n})\r\n```\r\n\r\nI think maybe we can add some pre-check here ? The current error message doesn't provide much information.\r\n\r\ncc @nodejs/wasi "},
{"labels":["assert","confirmed-bug"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 10, 12\r\n* **Platform**: macOS High Sierra 10.13.6\r\n* **Subsystem**: Assert\r\n\r\n<!-- Please provide more details below this comment. -->\r\nUnder Node 10 and Node 12, generating an exception from an assertion failure returns a different assertion failure message depending on differences in whitespace. It seems that with a certain whitespace configuration we see the Node 8 assertion failure message `0 == true`, other configurations will generate the Node 10 message `The expression evaluated to a falsy value`.  This issue only seems to affect the exception message, all other behaviour seems consistent.\r\n\r\nThis will affect anything that runs minified source.\r\n\r\nI have included a simple reproduction of the issue [here](https://github.com/AndrewFinlay/node_exception_example)\r\n"},
{"labels":["confirmed-bug","net"],"text":"See https://github.com/nodejs/node/pull/30839\r\n\r\n`_writeGeneric` waits for `'connect'` https://github.com/nodejs/node/blob/cf5ce2c9e1aab5eadbae107c697fdd11c6fb93a9/lib/net.js#L759 which might never be emitted due to https://github.com/nodejs/node/blob/cf5ce2c9e1aab5eadbae107c697fdd11c6fb93a9/lib/net.js#L1106-L1108\r\n\r\nI believe this will fail:\r\n```js\r\nconst socket = createSocketBeforeConnect();\r\nsocket.write('asd', common.mustCall());\r\nsocket.destroy();\r\n```"},
{"labels":["confirmed-bug","repl"],"text":"## Where?\r\n\r\n* **Version**: v10.15.3, v12.13.1, v13.3.0\r\n* **Platform**: x86_64 GNU/Linux\r\n* **Subsystem**: require\r\n\r\n## Repo Steps\r\n\r\nGiven the following tree:\r\n\r\n```bash\r\nmkdir testrequire\r\ncd testrequire\r\n\r\nmkdir node_modules\r\necho 'module.exports = `yes`' > node_modules/foo.js\r\n```\r\n\r\nThe following code will produce different behavior when executed as a main module, required module, or from the REPL\r\n\r\n```js\r\nrequire('./foo') // this should always throw an error, but works on the REPL\r\n```\r\n\r\n## Tests\r\n\r\n### 1. As main module:\r\n\r\n```\r\n↪ echo 'require(`./foo`)' > main.js; node main.js\r\ninternal/modules/cjs/loader.js:800\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module './foo'\r\n```\r\n\r\n### 2. As stdin input:\r\n\r\n```\r\n↪ echo 'require(`./foo`)' | node\r\ninternal/modules/cjs/loader.js:800\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module './foo'\r\n```\r\n\r\n### 3. As REPL commands:\r\n\r\nThis is the surprising behavior\r\n\r\n```\r\n↪ node\r\nWelcome to Node.js v12.13.1.\r\nType \".help\" for more information.\r\n> require('./foo')\r\n'yes'\r\n```\r\n\r\n#### 4. As REPL but indirectly loaded\r\n\r\n```\r\n↪ echo 'require(`./foo`)' > main.js\r\n↪ node\r\nWelcome to Node.js v12.13.1.\r\nType \".help\" for more information.\r\n> require('./main')\r\nThrown:\r\nError: Cannot find module './foo'\r\n```\r\n\r\n## Is this a bug?\r\n\r\nI'm not sure if this is a bug or not, but it is quite surprising to me.\r\n\r\nI'd expect `require` to behave the same no matter from where it is being executed. Why is that the REPL behaves differently?\r\n"},
{"labels":["confirmed-bug","repl"],"text":"Discovered in https://github.com/nodejs/node/pull/30740\r\n\r\nWhen the REPL is started with `useGlobal: false`, the autocomplete for globals doesn't include values that are present in the primordials object.\r\nExample with Node.js 13.3.0:\r\n\r\n![image](https://user-images.githubusercontent.com/2352663/70158731-03193a80-16b8-11ea-9b1c-dd2f9cce8377.png)\r\n\r\nI pressed \"N\", \"TAB\", \"TAB\". The output doesn't include `Number`.\r\n"},
{"labels":["CI / flaky test","confirmed-bug","fs"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: master \r\n* **Platform**: linux-containerized\r\n* **Subsystem**: readline\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n\r\n```\r\nnot ok 1632 parallel/test-readline-async-iterators-destroy\r\n  ---\r\n  duration_ms: 0.177\r\n  severity: fail\r\n  exitcode: 1\r\n  stack: |-\r\n    events.js:194\r\n          throw er; // Unhandled 'error' event\r\n          ^\r\n    \r\n    Error: EBADF: bad file descriptor, read\r\n    Emitted 'error' event on ReadStream instance at:\r\n        at internal/fs/streams.js:183:12\r\n        at FSReqCallback.wrapper [as oncomplete] (fs.js:480:5) {\r\n      errno: -9,\r\n      code: 'EBADF',\r\n      syscall: 'read'\r\n    }\r\n  ...\r\n\r\n```\r\n\r\nref: https://ci.nodejs.org/job/node-test-commit-linux-containered/nodes=ubuntu1804_sharedlibs_openssl111_x64/16239/consoleText"},
{"labels":["child_process","confirmed-bug"],"text":"The `child_process` module allows to bypass the JavaScript validation logic and to pass a custom array into C++, which then crashes the process:\r\n\r\n```js\r\nconst { spawn } = require('child_process');\r\n\r\nspawn('ls', Object.assign([], {\r\n  slice() {\r\n    return this;\r\n  },\r\n  unshift(arg) {\r\n    [].unshift.call(this, arg);\r\n    Object.defineProperty(this, '0', {\r\n      get() { throw new Error(); }\r\n    });\r\n  }\r\n}));\r\n```\r\n\r\nThis should be virtually impossible to exploit, so I am not marking this as a security issue."},
{"labels":["ES Modules","confirmed-bug","good first issue","help wanted"],"text":"Currently when using the `--experimental-resolve-self` flag, with the following:\r\n\r\n```json\r\n{\r\n  \"name\": \"test\",\r\n  \"exports\": \"./test.js\"\r\n}\r\n```\r\n\r\nIf including a `require('test')` in the `test.js` file and running `node --experimental-resolve-self pkg/test.js` this will throw an error.\r\n\r\nIt works with \"main\" and exports subpaths though so may be a sugar-specific or main-specific error case for this flag."},
{"labels":["confirmed-bug"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: `v13.2.0`\r\n* **Platform**: `Linux nicolo-XPS-15-9570 5.3.0-23-generic #25-Ubuntu SMP Tue Nov 12 09:22:33 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux`\r\n* **Subsystem**: ?\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nAfter upgrading from node 13.1.0 to 13.2.0, after running `lerna` node doesn't exit normally but crashes:\r\n\r\n```\r\nlerna success Bootstrapped 155 packages\r\n/home/nicolo/n/bin/node[20139]: ../src/signal_wrap.cc:159:void node::DecreaseSignalHandlerCount(int): Assertion `(new_handler_count) >= (0)' failed.\r\n 1: 0x9f0390 node::Abort() [/home/nicolo/n/bin/node]\r\n 2: 0x9f0417  [/home/nicolo/n/bin/node]\r\n 3: 0xa91bdc node::DecreaseSignalHandlerCount(int) [/home/nicolo/n/bin/node]\r\n 4: 0xa91cb4  [/home/nicolo/n/bin/node]\r\n 5: 0x98fbd5 node::Environment::CleanupHandles() [/home/nicolo/n/bin/node]\r\n 6: 0x98fe6b node::Environment::RunCleanup() [/home/nicolo/n/bin/node]\r\n 7: 0xa2d2f0 node::NodeMainInstance::Run() [/home/nicolo/n/bin/node]\r\n 8: 0x9c1311 node::Start(int, char**) [/home/nicolo/n/bin/node]\r\n 9: 0x7f14c1fd71e3 __libc_start_main [/lib/x86_64-linux-gnu/libc.so.6]\r\n10: 0x95ed25  [/home/nicolo/n/bin/node]\r\nAborted (core dumped)\r\n```\r\n\r\nSteps to reproduce this bug: (you need `make` and `yarn`)\r\n```\r\ngit clone https://github.com/babel/babel.git\r\ncd babel\r\nmake bootstrap\r\n```\r\n\r\ncc @addaleax (author of 55f98df303939774639bb597c6392c1c85bae6dd, which introduced the assertion)"},
{"labels":["confirmed-bug","util"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: `v12.13.0`. \r\n* **Platform**: `Darwin will.local 18.7.0 Darwin Kernel Version 18.7.0: Sat Oct 12 00:02:19 PDT 2019; root:xnu-4903.278.12~1/RELEASE_X86_64 x86_64`\r\n* **Subsystem**: `internal/util/inspect.js`\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nThe following program crashes on node `v12.13.0`:\r\n\r\n##### `error-12.js`\r\n```js\r\nconst err = new Error('bloop');\r\nerr.name = 404;\r\nconsole.log(err);\r\n```\r\n\r\nwith the following logged:\r\n\r\n```\r\n$ node error-12.js\r\ninternal/util/inspect.js:880\r\n      name.endsWith('Error') &&\r\n           ^\r\n\r\nTypeError: name.endsWith is not a function\r\n    at formatError (internal/util/inspect.js:880:12)\r\n    at formatRaw (internal/util/inspect.js:681:14)\r\n    at formatValue (internal/util/inspect.js:569:10)\r\n    at inspect (internal/util/inspect.js:223:10)\r\n    at formatWithOptions (internal/util/inspect.js:1651:40)\r\n    at Object.Console.<computed> (internal/console/constructor.js:272:10)\r\n    at Object.log (internal/console/constructor.js:282:61)\r\n    at Object.<anonymous> (/Users/williammyers/projects/js/error-12.js:3:9)\r\n    at Module._compile (internal/modules/cjs/loader.js:774:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:785:10)\r\n```\r\n\r\nOn node `v10.15.1`, the program doesn't crash and instead logs:\r\n\r\n```\r\n$ node error-12.js\r\n{ 404: bloop\r\n    at Object.<anonymous> (/Users/williammyers/projects/js/error-12.js:1:75)\r\n    at Module._compile (internal/modules/cjs/loader.js:689:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)\r\n    at Module.load (internal/modules/cjs/loader.js:599:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)\r\n    at startup (internal/bootstrap/node.js:283:19)\r\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3) name: 404 }\r\n```\r\n\r\nI appreciate that node might not consider this a bug that is theirs to fix (the `name` property being non-string could be viewed as a userland error), but wanted to file the issue in case it was concerning. \r\n\r\nI discovered this doing an upgrade to node 12--it turns out the official [aws-sdk](https://github.com/aws/aws-sdk-js/blob/master/lib/util.js#L597) will set the `name` property of HTTP response errors to the _numeric_ HTTP response code. \r\n\r\nI suspect this was introduced in https://github.com/nodejs/node/commit/e54f237afe53324ff6d6f1504a40f26b9fe7711c. "},
{"labels":["confirmed-bug","crypto","tls"],"text":"* **Version**: 13.1.0 and 10.17.0\r\n* **Platform**: windows 64-bit\r\n* **Subsystem**: crypto / tls\r\n\r\nclient.js  (run-of-the-mill TLS client):\r\n```javascript\r\nconst tls = require(\"tls\");\r\nconst fs = require(\"fs\");\r\nconst client = tls.connect({\r\n\thost: \"localhost\",\r\n\tport: 12345,\r\n\tca: fs.readFileSync(\"./server.crt\"),\r\n}, () => {\r\n\tconsole.log(\"secureConnect\");\r\n\tclient.write(\"foo\");\r\n\tclient.end();\r\n});\r\nclient.setEncoding('utf8');\r\nclient.on(\"data\", (data) => {\r\n\tconsole.log(\"client.data\", data);\r\n});\r\nclient.on(\"end\", () => {\r\n\tconsole.log(\"client.end\");\r\n});\r\n```\r\n\r\nserver.js (run-of-the-mill TLS server):\r\n```javascript\r\nconst tls = require(\"tls\");\r\nconst fs = require(\"fs\");\r\n\r\nlet server = tls.createServer({\r\n\tcert: fs.readFileSync(\"./server.crt\"),\r\n\tkey: fs.readFileSync(\"./server.key\"),\r\n}, (socket) => {\r\n\tconsole.log(\"server.secureConnection\");\r\n\tsocket.setEncoding(\"utf8\");\r\n\tsocket.on(\"data\", (data) => {\r\n\t\tconsole.log(\"server.socket.data\", data);\r\n\t\tsocket.write(data);\r\n\t});\r\n\tsocket.on(\"end\", () => {\r\n\t\tconsole.log(\"server.socket.end\");\r\n\t});\r\n\tsocket.on(\"error\", console.error);\r\n});\r\nserver.listen({ port: 12345 }, () => {\r\n\tconsole.log(\"listening!\")\r\n});\r\n```\r\n\r\nserver.crt:\r\n```\r\n-----BEGIN CERTIFICATE-----\r\nMIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMRIwEAYDVQQDEwlsb2Nh\r\nbGhvc3QxCzAJBgNVBAYTAk5MMRYwFAYDVQQIEw1Ob29yZC1CcmFiYW50MRIwEAYD\r\nVQQHEwlFaW5kaG92ZW4xDDAKBgNVBAoTA0FCQjESMBAGA1UECxMJU3Bpcml0IElU\r\nMB4XDTE5MTExODA4MjIzN1oXDTI5MTExODA4MjIzN1owbzESMBAGA1UEAxMJbG9j\r\nYWxob3N0MQswCQYDVQQGEwJOTDEWMBQGA1UECBMNTm9vcmQtQnJhYmFudDESMBAG\r\nA1UEBxMJRWluZGhvdmVuMQwwCgYDVQQKEwNBQkIxEjAQBgNVBAsTCVNwaXJpdCBJ\r\nVDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJjXZnfBDFer7oGt9pP\r\nN68yLEnKOaYpy31Bw4rNdpX4KgqwqeENKDgbmdl0kL7vEkAXNG6i+vfnGRlfuFw3\r\noGcKW+xCaTf/T/CJqCCKJnBYKoR3Oxz3iu99/9+5U5Z3wErpKPc4Cc5dwwOyrkvi\r\nbbm2AsFXtd7VL3fjgP+V0+HT3rsfPXJVzwuW7GD/8ujBT2LFgYqQ7a5JNJUIaECa\r\nQ20158H8YSDh42NHvE6/68yd9OELnu1ene/OYeSdWzZ3ejc1l63IcJtHnqnODc3W\r\nti9K2UTZFVdmA5xpMFcU3ni91tUlwduPplcWDfLGi8uXwUzBdGPQl+/+Ke+DqrmC\r\nBo8CAwEAAaOBuzCBuDAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIC9DA7BgNVHSUE\r\nNDAyBggrBgEFBQcDAQYIKwYBBQUHAwIGCCsGAQUFBwMDBggrBgEFBQcDBAYIKwYB\r\nBQUHAwgwEQYJYIZIAYb4QgEBBAQDAgD3MCwGA1UdEQQlMCOGEGh0dHA6Ly9sb2Nh\r\nbGhvc3STCWxvY2FsaG9zdIcEfwAAATAdBgNVHQ4EFgQUOc37CHYprVsgXM0RC+PA\r\nNXMS22owDQYJKoZIhvcNAQEFBQADggEBACcwRa4GiLmFrR34rOjR3fwLq6m9r9Rb\r\nLny4WzHKwRLEDfe2yPuNZjoOG4XT80KWpgLopiWViR7WPkfDcbAN+sXmpmdc3Oxa\r\nTR7RsxfqnDYMp6PSO+3qQfTuz5sAsKf292Qu9BEJMkU8rWFmwmwNjRGZGoT06yCs\r\nDFxRFuyS+w1x3jZNbkMtwZiPHGwEkbWd8WY8UQXZR8Y3YpwipJn9EzCOOXKRokrJ\r\nZ7UTUKSrjIl6oHgrrhxBdw3kOUMKWx9M26A8Ua8Lyjbtcq3huy9M/J6DaZ6X4/Hs\r\ndIgL/SLdnc3WFonsCmfMk4iaJD5NE4NAYCIBWwq8RpThLm3UlPm0RVg=\r\n-----END CERTIFICATE-----\r\n```\r\n\r\nserver.key:\r\n```\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIEpQIBAAKCAQEAsmNdmd8EMV6vuga32k83rzIsSco5pinLfUHDis12lfgqCrCp\r\n4Q0oOBuZ2XSQvu8SQBc0bqL69+cZGV+4XDegZwpb7EJpN/9P8ImoIIomcFgqhHc7\r\nHPeK733/37lTlnfASuko9zgJzl3DA7KuS+JtubYCwVe13tUvd+OA/5XT4dPeux89\r\nclXPC5bsYP/y6MFPYsWBipDtrkk0lQhoQJpDbTXnwfxhIOHjY0e8Tr/rzJ304Que\r\n7V6d785h5J1bNnd6NzWXrchwm0eeqc4Nzda2L0rZRNkVV2YDnGkwVxTeeL3W1SXB\r\n24+mVxYN8saLy5fBTMF0Y9CX7/4p74OquYIGjwIDAQABAoIBAB8QFnh40S4Xotnt\r\n2Y32RWgIgJXI1QkONhT1oqtE4+VxdUCvSqWZuOssQzoOhjX5Q2BNqh+p2bHZWBGH\r\nDX9hYFkRALi/R7sshisIjXI9HDxr3dt7N5vvrw3NDwVSLDADYkSpHS0PYQXCZfb6\r\n4kbsgtbXztsD/vNyg/WIdCoNWPv1slAa9qIOA/MofJK9K4e6hX3jOOx5E2uL7SkC\r\nMM9Na0EOxBe/+pghyQVefCRDi1tG2X/nkKYo1ouawK0/f9Wom8tf5R1G2juMdYDk\r\n8m6VV9uE41aN5o1J1atUqp1mGyX/af+WuQ3IqLNbvCgPYnxMQuWJ3zKg9f494A8D\r\n7G3KVIECgYEA31PAZ5RWldIvdcRUFNO/STFmhDDyXRGDoWZkPRzr7dAVreIgmIzT\r\nxZKANkYYH9QUcVSA6CiqJrURLT8ZRpJuaSTMIPKfseWJnXSFBsQO/zFLG8BUUA+7\r\nSuQhpCaA/cj7azjkMiuhq9gB1RjNrRrUx3ev9eFpJrbK6PaFyMn49T8CgYEAzHyE\r\no91atAnWYDJkTTzNU0MIKFZvGZ3GAfpX22zwxF/5b9XlmeqL5GhBQOFFXxCgBMnN\r\nutt2iUFZmVLe3PtsL5SeCOAJ+oGMczmJjv1nBU6mThXahx18LM3xGAhcxWgB8wkV\r\nIWXGLB3kOjO2aZmMtQ8ESY6xi5857pSVifY0CrECgYEA0ZyCUrXgLu8ArMCBSqsU\r\nN1auqhRm5wOxUKQSIWor5yIPtw0vGv/TJPXEcSyJKBaeuWBfPYgta/c3EAjRaHO4\r\nPefT0Hjpese+ypK66QbMLKnPnVR/zkV1vW0yRif9mjYyBQl45b4eGHS+A40sPvWY\r\nEUA9X8MaNsQK323DVBp+GXECgYEArLEgB49iEZgZPsZv5LbLpFyA4CgWzahr17HH\r\nTt1S/FUdP/CBZhopqGzPZu6Yem985G5VW1AKbGIPPCg7ZJ7Ev+4gBNjINJIBvjHC\r\nVUr2HQpN8rYMBn3FJ8WIrcYqKuDqfIiYGstrsEhSPUD89XOi3CnhcgmbMZH4B9/d\r\n5lRRoRECgYEA1vK9QtIDaW5pnWYDNnyZ7EFUcOLteuIP/xEdjc0gowvIfXwvjMPB\r\n6IWZVifow2OwGs44EgZ7hjPaB/4qTWZXcBhTJCzBOU/m0qovyAwBucqJbZOxhV+x\r\nab7NKOxOYy1UB3JJJknTvDLV+f/sQwieofNwsa+eKqYkoUx4ALj5m6I=\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\n1. Start node ./server.js\r\n2. Start node ./client.js\r\n\r\nOutput of client.js using node v10.17.0:\r\n```shell\r\n$ node ./client.js\r\nMINGW64:/c/Source/modules/exlent-est-client[17368]: c:\\ws\\src\\node_crypto.cc:1619: Assertion `(1) == (X509V3_EXT_print(bio.get(), ext, 0, 0))' failed.\r\n 1: 00007FF63CD37DDA v8::internal::GCIdleTimeHandler::GCIdleTimeHandler+4506\r\n 2: 00007FF63CD12876 node::MakeCallback+4534\r\n 3: 00007FF63CD1292F node::MakeCallback+4719\r\n 4: 00007FF63CC0E523 X509_getm_notAfter+69619\r\n 5: 00007FF63CC20981 X509_getm_notAfter+144465\r\n 6: 00007FF63D23E1D2 std::vector<v8::internal::compiler::MoveOperands * __ptr64,v8::internal::ZoneAllocator<v8::internal::compiler::MoveOperands * __ptr64> >::_Umove+79442\r\n 7: 00007FF63D23F65D std::vector<v8::internal::compiler::MoveOperands * __ptr64,v8::internal::ZoneAllocator<v8::internal::compiler::MoveOperands * __ptr64> >::_Umove+84701\r\n 8: 00007FF63D23E6B6 std::vector<v8::internal::compiler::MoveOperands * __ptr64,v8::internal::ZoneAllocator<v8::internal::compiler::MoveOperands * __ptr64> >::_Umove+80694\r\n 9: 00007FF63D23E59B std::vector<v8::internal::compiler::MoveOperands * __ptr64,v8::internal::ZoneAllocator<v8::internal::compiler::MoveOperands * __ptr64> >::_Umove+80411\r\n10: 0000013E942DC5C1\r\n```\r\n\r\n\r\nOutput of client.js using node v13.1.0:\r\n```shell\r\n$ node ./client.js \r\nMINGW64:/c/Source/modules/exlent-est-client[16720]: c:\\ws\\src\\node_crypto.cc:2015: Assertion `(1) == (X509V3_EXT_print(bio.get(), ext, 0, 0))' failed.\r\n 1: 00007FF7E882F22F napi_wrap+125087\r\n 2: 00007FF7E87CFAA6 v8::base::CPU::has_sse+35302\r\n 3: 00007FF7E87CFDC3 v8::base::CPU::has_sse+36099\r\n 4: 00007FF7E8711C11 EVP_PKEY_meth_set_keygen+4913\r\n 5: 00007FF7E86FCC84 uv_loop_size+62996\r\n 6: 00007FF7E8F9BE30 v8::internal::Builtins::builtin_handle+324848\r\n 7: 00007FF7E8F9B370 v8::internal::Builtins::builtin_handle+322096\r\n 8: 00007FF7E8F9B6B8 v8::internal::Builtins::builtin_handle+322936\r\n 9: 00007FF7E8F9B4BE v8::internal::Builtins::builtin_handle+322430\r\n10: 00007FF7E942B2FD v8::internal::SetupIsolateDelegate::SetupHeap+545005\r\n11: 00007FF7E93B0869 v8::internal::SetupIsolateDelegate::SetupHeap+42585 \r\n12: 00007FF7E93B0869 v8::internal::SetupIsolateDelegate::SetupHeap+42585 \r\n13: 00007FF7E93B0869 v8::internal::SetupIsolateDelegate::SetupHeap+42585\r\n14: 00007FF7E93B0869 v8::internal::SetupIsolateDelegate::SetupHeap+42585\r\n15: 00007FF7E93B0869 v8::internal::SetupIsolateDelegate::SetupHeap+42585\r\n16: 00007FF7E93ADD7E v8::internal::SetupIsolateDelegate::SetupHeap+31598\r\n17: 00007FF7E93AD96C v8::internal::SetupIsolateDelegate::SetupHeap+30556\r\n18: 00007FF7E8EF57D2 v8::internal::Execution::CallWasm+1410\r\n19: 00007FF7E8EF5149 v8::internal::Execution::Call+185\r\n20: 00007FF7E8FC68C0 v8::Function::Call+608\r\n21: 00007FF7E884B798 node::CallbackScope::~CallbackScope+1608\r\n22: 00007FF7E88449E3 v8::internal::interpreter::BytecodeNode::operand_scale+179\r\n23: 00007FF7E86ED34C std::basic_ostream<char,std::char_traits<char> >::put+27324\r\n24: 00007FF7E89A4662 SSL_set_tlsext_max_fragment_length+56898\r\n25: 00007FF7E89ADA31 SSL_is_init_finished+2913\r\n26: 00007FF7E89AD829 SSL_is_init_finished+2393\r\n27: 00007FF7E89D5524 SSL_set_default_read_buffer_len+3716\r\n28: 00007FF7E89CE0A0 i2d_SSL_SESSION+9680\r\n29: 00007FF7E89CE011 i2d_SSL_SESSION+9537\r\n30: 00007FF7E89C4747 SSL_write_ex+5943\r\n31: 00007FF7E89C1A02 SSL_read+66\r\n32: 00007FF7E86EA495 std::basic_ostream<char,std::char_traits<char> >::put+15365\r\n33: 00007FF7E86EA958 std::basic_ostream<char,std::char_traits<char> >::put+16584\r\n34: 00007FF7E86ECDC3 std::basic_ostream<char,std::char_traits<char> >::put+25907\r\n35: 00007FF7E874B175 v8::internal::Debug::break_frame_id+1093\r\n36: 00007FF7E88630FB uv_tty_set_vterm_state+8299\r\n37: 00007FF7E8877F5C uv_loop_init+844\r\n38: 00007FF7E8878294 uv_run+244\r\n39: 00007FF7E879C312 v8::internal::AsmJsScanner::GetIdentifierString+30882\r\n40: 00007FF7E87F72D0 node::Start+288\r\n41: 00007FF7E86B666C RC4_options+339308\r\n42: 00007FF7E94E1B08 v8::internal::SetupIsolateDelegate::SetupHeap+1292536\r\n43: 00007FFBD2D57BD4 BaseThreadInitThunk+20\r\n44: 00007FFBD346CED1 RtlUserThreadStart+33\r\n```\r\n\r\n\r\nThere is almost certainly something wrong with the server certificate content. However I would expect BOTH the server and client to throw a proper error instead of the client asserting.\r\n\r\n\r\n\r\n\r\n"},
{"labels":["confirmed-bug","n-api"],"text":"* **Version**: v10.16.3\r\n* **Platform**: Linux\r\n\r\nIf NODE_EXPERIMENTAL is defined then `napi_get_last_error_info()` asserts due to the fact that it ignores experimental error codes (e.g. `napi_bigint_expected`):\r\n\r\n```\r\n../src/node_api.cc:1412:napi_status napi_get_last_error_info(napi_env, const napi_extended_error_info**):\r\nAssertion `(env->last_error.error_code) <= (napi_callback_scope_mismatch)' failed.\r\n```\r\n\r\nDocumentation does not say clearly whether nodejs should be recompiled with NODE_EXPERIMENTAL or not."},
{"labels":["confirmed-bug","util"],"text":"* **Version**: v12.12.0\r\n* **Platform**: Darwin [redacted] 18.7.0 Darwin Kernel Version 18.7.0: Sat Oct 12 00:02:19 PDT 2019; root:xnu-4903.278.12~1/RELEASE_X86_64 x86_64\r\n* **Subsystem**: util\r\n\r\nI was very surprised to discover that in node v12, `util.format('%s', v)` does not consistently call `String(v)`.  Checking [the docs](https://nodejs.org/api/util.html#util_util_format_format_args), I read:\r\n\r\n> `%s`: `String` will be used to convert all values except `BigInt`, `Object` and `-0`. `BigInt` values will be represented with an `n` and Objects that have no user defined `toString` function are inspected using `util.inspect()` with options `{ depth: 0, colors: false, compact: 3 }`.\r\n\r\nThis is a surprising (and in my view undesirable) change from the previous behaviour, which was to consistently call `String` in response to `%s`.  It also appears to be a semantically breaking change introduced, via #27621 and #27799, in 12.3.0, despite that not being a new major version.  If so, it should be entirely reverted (and good riddance, in my opinion).\r\n\r\nIf there is some compelling argument for why the new behaviour is actually desirable, then at least the code should be made consistent with the documentation or vice versa.\r\n\r\nIn particular, whether a user defined toString function is called depends in non-documented and non-obvious ways on the value of the `.constructor` property of the object, which is otherwise normally of no significance:\r\n\r\n```JS\r\n// ES6 subclassing:\r\nclass A {\r\n  toString() { return 'custom A'; }\r\n}\r\nclass B extends A {}\r\n\r\n// ES5 subclassing:\r\nfunction C() {}\r\nC.prototype.toString = function() { return 'custom C'; };\r\n\r\nfunction D() { C.call(this); }\r\nD.prototype = Object.create(C.prototype);\r\n// What if we forget to set the .constructor?\r\n// D.prototype.constructor = D;\r\n\r\nconsole.log('%s', new A());\r\nconsole.log('%s', new B());\r\nconsole.log('%s', new C());\r\nconsole.log('%s', new D());\r\n\r\n// Fix forgotten .constructor:\r\nD.prototype.constructor = D;\r\nconsole.log('%s', new D());\r\n```\r\n\r\nActual output:\r\n\r\n```\r\ncustom A\r\nB {}\r\ncustom C\r\ncustom C\r\nD {}\r\n```\r\n\r\nExpected / documented output:\r\n\r\n```\r\ncustom A\r\ncustom A\r\ncustom C\r\ncustom C\r\ncustom C\r\n```\r\n\r\nConsistently applying the documented behaviour would go some way to remedying the breaking nature of this change, since at least user supplied `.toString` implementations would always be called, as was previously the case.\r\n"},
{"labels":["ES Modules","confirmed-bug"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 13.0.1\r\n* **Platform**: macOS Mojave\r\n* **Subsystem**:\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n[ECMAScript modules Document](https://nodejs.org/api/esm.html#esm_package_scope_and_file_extensions) says:\r\n\r\n> A package.json lacking a `\"type\"` field is treated as if it contained `\"type\": \"commonjs\"`.\r\n\r\nTo confirm this, I have created folders and files as follows (file contents are written after colons).\r\n\r\n```\r\nroot/\r\n  package.json   : { \"type\": \"module\" }\r\n  sub1/\r\n    foo.js       : const fs = require('fs');\r\n    package.json : {}\r\n  sub2/\r\n    foo.js       : const fs = require('fs');\r\n    package.json : { \"repository\": { \"type\": \"git\" } }\r\n```\r\n\r\nWhen I execute `$ node --experimental-modules ./sub1/foo.js` in the `root` folder, it results in an error `Error [ERR_REQUIRE_ESM]: Must use import to load ES Module`, while `$ node --experimental-modules ./sub2/foo.js` does not throw any error.\r\nTherefore, the document is incorrect and it is likely non-top-level `\"type\"` fields in `package.json` file affects whether the JS files are treated as ES modules or CommonJS modules."},
{"labels":["V8 Engine","confirmed-bug"],"text":"**Version:** v12.4.0 and v13.0.1\r\n**Platform:** Linux 5.3.7-arch1-2-ARCH\r\n\r\nMinimum code to reproduce:\r\n```js\r\nlet id = 0;\r\nconst genId = () => (id)++;\r\n\r\nfor (let i = 0; i < 10000; i++) {\r\n    console.log(genId());\r\n}\r\n```\r\nIn node 12 and 13 it doesn't output values 1..9999. It outputs values sequentially till some value, for example 6146 and then repeats this value.\r\nHowever this snippet works as expected in node 10 and 8 (that is where I checked).\r\nAlso it works correctly in node 12 and 13 if there is no parentheses around id variable:\r\n```js\r\nlet id = 0;\r\nconst genId = () => id++;\r\n\r\nfor (let i = 0; i < 10000; i++) {\r\n    console.log(genId());\r\n}\r\n```\r\n"},
{"labels":["confirmed-bug","dgram"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v8.16.0 and greater\r\n* **Platform**: MacOS\r\n* **Subsystem**: dgram socket\r\n\r\n<!-- Please provide more details below this comment. -->\r\nWhen binding to a broadcast socket using-\r\n\r\n```\r\nconst doSocketBind = () => {\r\n    this.socket.bind(broadcastPort, undefined, () => {\r\n        console.log('Success');\r\n    });\r\n};\r\n```\r\n\r\nAnd retrying the bind after a failure-\r\n\r\n```\r\nthis.socket.on('error', (err: Error) => {\r\n    if (err['code'] === 'EADDRINUSE') {\r\n        setTimeout(() => {\r\n            doSocketBind();\r\n        }, 5000);\r\n    }\r\n});\r\n```\r\n\r\nAfter a few failures I receive this message-\r\n\r\n`(node:68039) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 listening listeners added. Use emitter.setMaxListeners() to increase limit`\r\n\r\nFor example, if something else has bound to the same broadcast port and has locked the port.\r\n\r\nThe issue is caused by-\r\n\r\nhttps://github.com/nodejs/node/blob/eac614332be7453633273cdd20aedd15295e551c/lib/dgram.js#L194\r\n\r\n`arguments[arguments.length - 1]` is intended to be the callback.  In the case of a failure, the callback doesn't execute and the callback remains in the event queue waiting to be executed.  If there are 10 bind failures the callback will execute 10 times after being able to successfully bind in the 11th retry.\r\n\r\nA workaround-\r\n\r\nDefine the callback as a named function and remove the callback if an error is encountered.\r\n\r\n```\r\nthis.socket.on('error', (err: Error) => {\r\n    this.socket.removeListener('listening', onSocketBind);\r\n\r\n    if (err['code'] === 'EADDRINUSE') {\r\n        setTimeout(() => {\r\n            doSocketBind();\r\n        }, 5000);\r\n    }\r\n});\r\n```"},
{"labels":["ES Modules","confirmed-bug"],"text":"```\r\n$ node --experimental-modules --experimental-loader i-dont-exist test.mjs\r\n(node:480349) ExperimentalWarning: The ESM module loader is experimental.\r\n(node:480349) ExperimentalWarning: --experimental-loader is an experimental feature. This feature could change at any time\r\n(node:480349) UnhandledPromiseRejectionWarning: Error: Cannot find package 'i-dont-exist' imported from /home/mzasso/test/m/\r\n    at Loader.resolve [as _resolve] (internal/modules/esm/default_resolve.js:84:13)\r\n    at Loader.resolve (internal/modules/esm/loader.js:74:33)\r\n    at Loader.getModuleJob (internal/modules/esm/loader.js:148:40)\r\n    at Loader.import (internal/modules/esm/loader.js:132:28)\r\n    at internal/process/esm_loader.js:60:31\r\n    at Object.initializeLoader (internal/process/esm_loader.js:64:5)\r\n    at runMainESM (internal/bootstrap/pre_execution.js:480:20)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:1049:5)\r\n    at internal/main/run_main_module.js:16:11\r\n(node:480349) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\r\n(node:480349) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\n```\r\n$ node --experimental-modules --experimental-loader ./i-have-syntax-error.mjs test.mjs\r\n(node:480438) ExperimentalWarning: The ESM module loader is experimental.\r\n(node:480438) ExperimentalWarning: --experimental-loader is an experimental feature. This feature could change at any time\r\n(node:480438) UnhandledPromiseRejectionWarning: SyntaxError: Unexpected end of input\r\n    at Loader.moduleStrategy (internal/modules/esm/translators.js:84:18)\r\n    at async link (internal/modules/esm/module_job.js:36:21)\r\n(node:480438) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:480438) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```"},
{"labels":["build","confirmed-bug","i18n-api"],"text":"Cannot compile node 13.0.1 with flags `./configure --fully-static --with-intl=full-icu` inside docker image for node\r\n\r\nGetting this output\r\n\r\n```\r\n  LD_LIBRARY_PATH=/node/out/Release/lib.host:/node/out/Release/lib.target:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd ../tools/v8_gypfiles; mkdir -p /node/out/Release/obj/gen/src/regexp; python ../../deps/v8/tools/run.py \"/node/out/Release/gen-regexp-special-case\" \"/node/out/Release/obj/gen/src/regexp/special-case.cc\"\r\ntools/v8_gypfiles/run_gen-regexp-special-case.target.mk:13: recipe for target '/node/out/Release/obj/gen/src/regexp/special-case.cc' failed\r\nmake[1]: *** [/node/out/Release/obj/gen/src/regexp/special-case.cc] Error 245\r\nmake[1]: *** Waiting for unfinished jobs....\r\nrm 889aa6e08bf291915b2edfb5755eacba271e7d14.intermediate\r\nMakefile:101: recipe for target 'node' failed\r\nmake: *** [node] Error 2\r\n```\r\n\r\nSteps to reproduce: \r\n1) Install docker\r\n2) `docker run -it node bash`\r\n//inside docker shell\r\n3) `git clone https://github.com/nodejs/node.git`\r\n4) `cd node`\r\n5) `git checkout v13.0.1`\r\n6) `./configure --fully-static --with-intl=full-icu`\r\n7) `make -j8`\r\n\r\nAlso not working with flags `./configure --fully-static --enable-static --with-intl=full-icu` with the same error\r\n\r\nBut it compiles without errors with version 11.1.0 with flags `./configure --fully-static --with-intl=full-icu --download=all`"},
{"labels":["async_hooks","confirmed-bug"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: `v12.13.0`\r\n* **Subsystem**: `global`\r\n\r\n\r\n* **Platform**: `Linux rankong-wacai-env 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n![image](https://user-images.githubusercontent.com/3054411/67365445-3d18fc00-f5a4-11e9-8a2f-35e580c172d7.png)\r\n\r\n* **Platform**: `Darwin RanWithMeow-RMPB 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64`\r\n\r\n![image](https://user-images.githubusercontent.com/3054411/67365552-6b96d700-f5a4-11e9-94be-751376f48c28.png)\r\n\r\n"},
{"labels":["V8 Engine","confirmed-bug"],"text":"* Node 12.*:\r\n* Windows 64bit, Debian 64bit:\r\n\r\nThe `--use-strict` flag doesn't apply strict mode to script.\r\nreproduction:\r\n```\r\necho a = 1 > test.js && node --use-strict test\r\n```\r\nexpected behavior:\r\n    `ReferenceError: a is not defined` is thrown.\r\nbehavior:\r\n    script executes without any issue.\r\n\r\nhowever it works as expected when node is started first and script is called from repl.\r\n<12 versions aren't affected. \r\n\r\n```\r\nnode --use-strict\r\nWelcome to Node.js v12.12.0.\r\nType \".help\" for more information.\r\n> a = 1\r\nThrown:\r\nReferenceError: a is not defined\r\n>\r\n```"},
{"labels":["confirmed-bug","dgram","macos"],"text":"* **Version**:\r\nv12.12.0\r\n* **Platform**:\r\nmacos catalina/10.15 (19A602)\r\n* **Subsystem**:\r\nn/a\r\n<!-- Please provide more details below this comment. -->\r\nWhen sending an empty udp message, the message will not be received until another non-empty udp message is received.\r\n\r\nExample/Reproduce: (may only affect macos 10.15?)\r\n\r\n\r\nfile `server.js`\r\n```\r\nvar PORT = 33333;\r\nvar HOST = '127.0.0.1';\r\n\r\nvar dgram = require('dgram');\r\nvar server = dgram.createSocket('udp4');\r\n\r\nserver.on('listening', function() {\r\n  var address = server.address();\r\n console.log('UDP Server listening on ' + address.address + ':' + address.port);\r\n});\r\n\r\nserver.on('message', function(message, remote) {\r\n console.log(remote.address + ':' + remote.port +' - ' + message);\r\n});\r\n\r\nserver.bind(PORT, HOST);\r\n```\r\n\r\nfile `client_test.js`\r\n\r\n```\r\nvar PORT = 33333;\r\nvar HOST = '127.0.0.1';\r\n\r\nvar dgram = require('dgram');\r\n\r\n\r\nvar client = dgram.createSocket('udp4');\r\nvar message = Buffer.from('abc');\r\n\r\nclient.send(message, 0, message.length, PORT, HOST, function(err, bytes) {\r\n  if (err) throw err;\r\n  console.log('UDP message sent to ' + HOST +':'+ PORT);\r\n  client.close();\r\n});\r\n```\r\n\r\nfile `client_0.js`\r\n\r\n```\r\nvar PORT = 33333;\r\nvar HOST = '127.0.0.1';\r\n\r\nvar dgram = require('dgram');\r\n\r\n\r\nvar client = dgram.createSocket('udp4');\r\nvar message = Buffer.from('');\r\n\r\nclient.send(message, 0, message.length, PORT, HOST, function(err, bytes) {\r\n  if (err) throw err;\r\n  console.log('UDP message sent to ' + HOST +':'+ PORT);\r\n  client.close();\r\n});\r\n```\r\n\r\n\r\nrun the server code, then run the `client_0.js`: no response in server.\r\nfollowed by running client_test.js: server got empty and the \"abc\" message."},
{"labels":["confirmed-bug","fs","stream"],"text":"Here's my OS info:\r\nEdition: Windows 10\r\nVersion: 1903\r\nOS Build: 18362.356\r\n\r\nHere's the output from Node 10.16.3 x64\r\n```\r\nc:\\code\\temp>node -v\r\nv10.16.3\r\n\r\nc:\\code\\temp>node readBytes.js\r\nsize > bufferSize : true\r\nnull segment: true\r\nnull segment: true\r\n```\r\n\r\nHere's the output from Node 8.15.1 x64\r\n```\r\nc:\\code\\temp>node -v\r\nv8.15.1\r\n\r\nc:\\code\\temp>node readBytes.js\r\nsize > bufferSize : true\r\nnull segment: true\r\nnull segment: true\r\nnull segment: false\r\nnull segment: true\r\nnull segment: false\r\nnull segment: true\r\nnull segment: false\r\nnull segment: true\r\ndone! 3 chunks\r\n```\r\n\r\nhere's the contents of *readBytes.js* which illustrates the problem\r\n```\r\nconst fs = require('fs');\r\nconst filepath = 'C:/code/temp/21_MB_File';\r\nconst bufferSize = 10 * 1024 * 1024;\r\n\r\nconst chunks = [];\r\nconst stats = fs.statSync(filepath);\r\nconsole.log(`size > bufferSize : ${stats.size > bufferSize}`);\r\n\r\nconst readableStream = fs.createReadStream(filepath);\r\nlet segmentIndex = 1;\r\nreadableStream.on('readable', () => {\r\n\tlet segment = readableStream.read(bufferSize);\r\n\tconsole.log(`null segment: ${segment === null}`);\r\n\twhile (segment !== null) {\r\n\t\tchunks.push({ index: segmentIndex++, body: segment });\r\n\t\tsegment = readableStream.read(bufferSize);\r\n\t\tconsole.log(`null segment: ${segment === null}`);\r\n\t}\r\n});\r\nreadableStream.on('end', () => {\r\n\tconsole.log(`done! ${chunks.length} chunks`);\r\n});\r\n```\r\n"},
{"labels":["confirmed-bug","crypto"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 12.11.1 and 12.7.0 (and more, i believe)\r\n* **Platform**: Linux dev 5.3.5-arch1-1-ARCH #1 SMP PREEMPT Mon Oct 7 19:03:08 UTC 2019 x86_64 GNU/Linux\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n`crypto.createPrivateKey` raise an assertation failure when trying to import a public key.\r\n\r\nOutput of v12.11.1:\r\n\r\n```\r\n> keyPair.publicKey.export({format:'der',type:'spki'}).toString('base64')\r\n'PUBLIC_KEY_IN_BASE64'\r\n> pubkey=require('crypto').createPrivateKey({key:Buffer.from('PUBLIC_KEY_IN_BASE64','base64'),format:'der',type:'spki'})\r\nnode[8267]: ../src/node_crypto.cc:3299:node::crypto::ParseKeyResult node::crypto::ParsePrivateKey(node::crypto::EVPKeyPointer*, const node::crypto::PrivateKeyEncodingConfig&, const char*, size_t): Assertion `(config.type_.ToChecked()) == (kKeyEncodingSEC1)' failed.\r\n 1: 0x9d33e0 node::Abort() [node]\r\n 2: 0x9d3467  [node]\r\n 3: 0xace6ea  [node]\r\n 4: 0xadf83e  [node]\r\n 5: 0xae03e7 node::crypto::KeyObject::Init(v8::FunctionCallbackInfo<v8::Value> const&) [node]\r\n 6: 0xb9ec19  [node]\r\n 7: 0xba0a07 v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) [node]\r\n 8: 0x136d639  [node]\r\nAborted (core dumped)\r\n```\r\n\r\nI have tried `keyPair=require('crypto').generateKeyPairSync('rsa',{modulusLength:4096})` and `keyPair=require('crypto').generateKeyPairSync('ec',{namedCurve:'P-256'})`, the result are the same."},
{"labels":["confirmed-bug","http2"],"text":"Demo:\r\n\r\nhttps://runkit.com/szmarczak/5d90f849ecc28e001ac8f3e1\r\n\r\nCurrent output:\r\n```\r\nclient side - 4294967295\r\nclient side - 4294967295\r\nserver side - 4294967295\r\nserver side - 2\r\n```\r\n\r\nExpected output:\r\n```\r\nclient side - 4294967295\r\nclient side - 2\r\nserver side - 4294967295\r\nserver side - 2\r\n```\r\n\r\nAs per the spec:\r\n### [6.5. SETTINGS](https://httpwg.org/specs/rfc7540.html#SETTINGS)\r\n\r\n> SETTINGS parameters are not negotiated; they describe characteristics of the sending peer, which are used by the receiving peer. Different values for the same parameter can be advertised by each peer. For example, a client might set a high initial flow-control window, whereas **a server might set a lower value to conserve resources**.\r\n\r\n> A SETTINGS frame MUST be sent by both endpoints at the start of a connection and **MAY be sent at any other time by either endpoint over the lifetime of the connection**. Implementations MUST support all of the parameters defined by this specification.\r\n\r\n> **Each parameter in a SETTINGS frame replaces any existing value for that parameter**. Parameters are processed in the order in which they appear, and **a receiver of a SETTINGS frame does not need to maintain any state other than the current value of its parameters**. Therefore, **the value of a SETTINGS parameter is the last value that is seen by a receiver**.\r\n\r\nSounds like a bug."},
{"labels":["V8 Engine","confirmed-bug"],"text":"* **Version**: v12.11.0\r\n* **process.versions**: \r\n```js\r\nprocess.versions\r\n{\r\n  node: '12.11.0',\r\n  v8: '7.7.299.11-node.12',\r\n  uv: '1.32.0',\r\n  zlib: '1.2.11',\r\n  brotli: '1.0.7',\r\n  ares: '1.15.0',\r\n  modules: '72',\r\n  nghttp2: '1.39.2',\r\n  napi: '5',\r\n  llhttp: '1.1.4',\r\n  http_parser: '2.8.0',\r\n  openssl: '1.1.1c',\r\n  cldr: '35.1',\r\n  icu: '64.2',\r\n  tz: '2019a',\r\n  unicode: '12.1'\r\n}\r\n```\r\n* **Platform**: Darwin pmbp 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64\r\n* **Subsystem**: V8\r\n\r\n\r\nRunning this in node v12.11.0 fails:\r\n\r\n```js\r\nObject.getPrototypeOf(new Proxy(Object.create(null), {\r\n  getPrototypeOf(target) {\r\n    return Reflect.getPrototypeOf(target)\r\n  }\r\n}))\r\n```\r\n\r\nPasting it in node's REPL gives this error:\r\n```\r\nThrown:\r\nTypeError: 'getPrototypeOf' on proxy: trap returned neither object nor null\r\n    at Function.getPrototypeOf (<anonymous>)\r\n```\r\n\r\nExpected behavior: it should just print `null`."},
{"labels":["confirmed-bug","fs","macos"],"text":"This is a container bug for issues caused by PR https://github.com/libuv/libuv/pull/2082. Disparate reports but the root cause is the linked PR.\r\n\r\n#25856 \r\n#27869\r\n#28512\r\n#28882\r\n#28917\r\n\r\nFixing it turned out to be not so easy (https://github.com/libuv/libuv/pull/2313) and simply reverting trades one regression for another."},
{"labels":["confirmed-bug","crypto","v10.x"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 10.16.3\r\n* **Platform**: Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019\r\n* **Subsystem**:\r\n\r\n<!-- Please provide more details below this comment. -->\r\nNodeJS is frozen on RSA key generation with public exponent 3. It works fine in NodeJS v12\r\n```js\r\nconst crypto = require(\"crypto\");\r\n\r\nconst keys = crypto.generateKeyPairSync(\"rsa\", {\r\n  modulusLength: 2048,\r\n  publicExponent: 3,\r\n  publicKeyEncoding: {\r\n    format: \"der\",\r\n    type: \"spki\",\r\n  },\r\n  privateKeyEncoding: {\r\n    format: \"der\",\r\n    type: \"pkcs8\",\r\n  },\r\n});\r\n\r\nconsole.log(keys);\r\n```\r\n"},
{"labels":["confirmed-bug","good first issue","repl"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: master\r\n* **Platform**: macOS X 10.14.4\r\n* **Subsystem**: repl\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nSmall bug on macOS (when, e.g., I have `node-core-utils` in `/Users/Projects`):\r\n\r\n```js\r\nfs.readFileSync('node-<tab>\r\n\r\nEXPECTED: fs.readFileSync('node-core-utils\r\nACTUAL:   fs.readFileSync('node-ode-core-utils\r\n```\r\n\r\nRefs: https://github.com/nodejs/node/pull/26648#issuecomment-493638851\r\n\r\ncc @antsmartian "},
{"labels":["confirmed-bug","doc","tls"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v8.16.1, v10.16.3, v12.8.1\r\n* **Platform**: Linux tufopad 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: tls\r\n\r\n<!-- Please provide more details below this comment. -->\r\nIt seems to be a bit of discordance in the emission of the `secure` event across versions of node and also if you use the deprecated `createSecurePair` vs `new tls.TLSSocket`.\r\n\r\n# Steps to reproduce\r\nFirst, you'll need to clone [this repo](https://github.com/tufosa/tls-secure-event) containing the sample code.\r\n\r\nThis program starts a `tls.Server`, and then two clients, one using the deprecated `createSecurePair` and the other using `tls.TLSSocket`. It just opens the connections and wait for the different events to trigger. Each event leaves a trace. It reproduces 2 cases per client (4 in total): one just opening the connection (`write: false`) and the other opening the connection and immediately writing an empty string to the socket (`write: true`). Therefore the 4 cases are:\r\n\r\n- SecurePair-write-false\r\n- SecurePair-write-true\r\n- TLSSocket-write-false\r\n- TLSSocket-write-true\r\n\r\nIn order to reproduce the bug, run `node main.js` using different versions of nodejs and observe the differences in behaviour through the traces left by the program. It seems like both the `secure` and `secureConnection` events are emitted with different criteria depending on the version of node used.\r\n\r\nI undestand that `createSecurePair` is deprecated and therefore should not be used, but I believe that the new way of doing things (`tls.TLSSocket`) should have the same behaviour as the old `createSecurePair` in order to make the transition easier. It seems reasonable to wait for the `secure` event before attempting to write anything. This is how the old `createSecurePair` behaved in node v8.16.1, but this behaviour has been changed in node 10 and node 12.\r\n\r\nAlso [the documented `secureConnect`](https://nodejs.org/docs/latest-v8.x/api/tls.html#tls_event_secureconnect) event is never emitted. An undocumented `secure` event is emitted instead. I see that this has been reported before (at least [here](https://github.com/nodejs/node/issues/10555) and [here](https://github.com/nodejs/node/issues/13368)), but the docs haven't been fixed.\r\n\r\n## node v8.16.1\r\n```\r\nCreating SecurePair write false client...\r\n(node:31271) [DEP0064] DeprecationWarning: tls.createSecurePair() is deprecated. Please use tls.TLSSocket instead.\r\nsecureConnection\r\nsecure\r\n\r\nCreating TLSSocket write false client...\r\nERROR:  TLSSocket with write false did NOT receive secure event\r\n\r\nCreating SecurePair write true client...\r\nsecureConnection\r\nsecure\r\n\r\nCreating TLSSocket write true client...\r\nsecureConnection\r\nsecure\r\n\r\nFinished\r\n```\r\nThe only case not emitting any event is TLSSocket-write-false.\r\n\r\n## node v10.16.3\r\n```\r\nCreating SecurePair write false client...\r\n(node:31533) [DEP0064] DeprecationWarning: tls.createSecurePair() is deprecated. Please use tls.TLSSocket instead.\r\nERROR:  SecurePair with write false did NOT receive secure event\r\n\r\nCreating TLSSocket write false client...\r\nERROR:  TLSSocket with write false did NOT receive secure event\r\n\r\nCreating SecurePair write true client...\r\nsecureConnection\r\nsecure\r\n\r\nCreating TLSSocket write true client...\r\nsecureConnection\r\nsecure\r\n\r\nFinished\r\n```\r\nAll write-false cases fail (as in do not emit events) and all write-true cases\r\npass.\r\n\r\n## node v12.8.1\r\n```\r\nCreating SecurePair write false client...\r\n(node:31828) [DEP0064] DeprecationWarning: tls.createSecurePair() is deprecated. Please use tls.TLSSocket instead.\r\nERROR:  SecurePair with write false did NOT receive secure event\r\n\r\nCreating TLSSocket write false client...\r\nERROR:  TLSSocket with write false did NOT receive secure event\r\n\r\nCreating SecurePair write true client...\r\nsecure\r\n\r\nCreating TLSSocket write true client...\r\nsecureConnection\r\nsecure\r\n\r\nFinished\r\n```\r\nAll write-false cases fail and the write-true cases behave slightly different,\r\nas one of them (SecurePair-write-true) never emit the `secureConnection` event.\r\n\r\n"},
{"labels":["V8 Engine","confirmed-bug","promises"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v10.15.3, node 12.0.0-nightly20190331bb98f27181, node 12.0.0-v8-canary201903313c649ecee6, v13.0.0-nightly20190822775048d54c\r\n* **Platform**: Ubuntu 14.04.5 LTS, Trusty Tahr x64 / Win7x64, \r\n* **Subsystem**:\r\n\r\n<!-- Please provide more details below this comment. -->\r\n[Test case](https://gist.github.com/Slayer95/1aed510b091dbacacbb3d4e61704a1a8): https://gist.github.com/Slayer95/1aed510b091dbacacbb3d4e61704a1a8\r\n\r\n**What steps will reproduce the problem?**\r\n1. Run the test case.\r\n2. Watch the memory consumption. Increase total run time with the constant SUITE_SIZE\r\n\r\n**What is the expected output?**\r\nMemory consumption is kept constant.\r\n\r\n**What do you see instead?**\r\nAn increasingly high memory consumption over time, and the process crashes for OOM.\r\n\r\n**Supporting info:**\r\n- Memory consumption was constant under Node 8.15.1\r\n- Switching the deepCloneSync() function for any of its commented-out variants removes the leak.\r\n- Awaiting for a setImmediate() to resolve every nth \"game\" is run suppresses the leak.\r\n\r\nOriginally reported as https://bugs.chromium.org/p/v8/issues/detail?id=9069\r\n\r\n/cc @MayaLekova "},
{"labels":["V8 Engine","build","confirmed-bug"],"text":"version: 12.9.0\r\ngcc: 8.2\r\n\r\nmessage:\r\n```\r\n#\r\n# Fatal error in , line 0\r\n# Check failed: (isolate_->embedded_blob()) != nullptr.\r\n#\r\n#\r\n#\r\n#FailureMessage Object: 0x7fff837402c0  (core dumped)\r\n```\r\n\r\n"},
{"labels":["confirmed-bug","tools"],"text":"Refs: #29222\r\n\r\nAs that PR shows, there are some unused imports that `tools/check-imports.py` doesn't catch because:\r\n\r\n1. They're used in comments.\r\n2. The tool doesn't match at word boundaries (e.g. `FromJust` is considered a use of `Just`.)"},
{"labels":["confirmed-bug","net"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: current master\r\n* **Platform**: Unix, at least Ubuntu 18.04. The callback issue also affects Windows.\r\n* **Subsystem**: net\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nDiscovered while working on https://github.com/nodejs/node/pull/28858. I investigated this for a while but wasn't able to solve the issue. Opening this to keep track, or to get an explanation if someone knows what's going on.\r\n\r\nThere seem to be two (possibly related) issues when using a pipe with net.Server:\r\n\r\n<details>\r\n<summary>The pipe file descriptor is not closed (or one of them? there seems to be more than one in some cases).</summary>\r\n\r\nPatch to reproduce:\r\n```diff\r\ndiff --git a/test/parallel/test-child-process-server-close.js b/test/parallel/test-child-process-server-close.js\r\nindex d70926f2e8..180f51499d 100644\r\n--- a/test/parallel/test-child-process-server-close.js\r\n+++ b/test/parallel/test-child-process-server-close.js\r\n@@ -7,6 +7,13 @@ const net = require('net');\r\n const tmpdir = require('../common/tmpdir');\r\n tmpdir.refresh();\r\n\r\n+const { execSync } = require('child_process');\r\n+const lsof = `lsof -p ${process.pid} | grep -e ^COMMAND -e tmp`;\r\n+process.on('exit', () => {\r\n+  const openFiles = execSync(lsof, { encoding: 'utf8' });\r\n+  console.error(`Open files (${lsof}):\\n${openFiles}`);\r\n+});\r\n+\r\n const server = net.createServer((conn) => {\r\n   spawn(process.execPath, ['-v'], {\r\n     stdio: ['ignore', conn, 'ignore']\r\ndiff --git a/test/parallel/test-tls-wrap-econnreset-pipe.js b/test/parallel/test-tls-wrap-econnreset-pipe.js\r\nindex b400e35d41..5d1070b63c 100644\r\n--- a/test/parallel/test-tls-wrap-econnreset-pipe.js\r\n+++ b/test/parallel/test-tls-wrap-econnreset-pipe.js\r\n@@ -11,6 +11,13 @@ const net = require('net');\r\n const tmpdir = require('../common/tmpdir');\r\n tmpdir.refresh();\r\n\r\n+const { execSync } = require('child_process');\r\n+const lsof = `lsof -p ${process.pid} | grep -e ^COMMAND -e tmp`;\r\n+process.on('exit', () => {\r\n+  const openFiles = execSync(lsof, { encoding: 'utf8' });\r\n+  console.error(`Open files (${lsof}):\\n${openFiles}`);\r\n+});\r\n+\r\n const server = net.createServer((c) => {\r\n   c.end();\r\n }).listen(common.PIPE, common.mustCall(() => {\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>The callback of `server.close()` is never called.</summary>\r\n\r\nPatch to reproduce:\r\n```diff\r\ndiff --git a/test/parallel/test-child-process-server-close.js b/test/parallel/test-child-process-server-close.js\r\nindex d70926f2e8..b63245b160 100644\r\n--- a/test/parallel/test-child-process-server-close.js\r\n+++ b/test/parallel/test-child-process-server-close.js\r\n@@ -7,6 +7,9 @@ const net = require('net');\r\n const tmpdir = require('../common/tmpdir');\r\n tmpdir.refresh();\r\n\r\n+const runsOk = common.mustCall(function runsOk() {});\r\n+const neverRuns = common.mustCall(function neverRuns() {});\r\n+\r\n const server = net.createServer((conn) => {\r\n   spawn(process.execPath, ['-v'], {\r\n     stdio: ['ignore', conn, 'ignore']\r\n@@ -17,7 +20,8 @@ const server = net.createServer((conn) => {\r\n   const client = net.connect(common.PIPE, common.mustCall());\r\n   client.on('data', () => {\r\n     client.end(() => {\r\n-      server.close();\r\n+      runsOk();\r\n+      server.close(neverRuns);\r\n     });\r\n   });\r\n });\r\ndiff --git a/test/parallel/test-tls-wrap-econnreset-pipe.js b/test/parallel/test-tls-wrap-econnreset-pipe.js\r\nindex b400e35d41..e02a2f08b6 100644\r\n--- a/test/parallel/test-tls-wrap-econnreset-pipe.js\r\n+++ b/test/parallel/test-tls-wrap-econnreset-pipe.js\r\n@@ -11,6 +11,9 @@ const net = require('net');\r\n const tmpdir = require('../common/tmpdir');\r\n tmpdir.refresh();\r\n\r\n+const runsOk = common.mustCall(function runsOk() {});\r\n+const neverRuns = common.mustCall(function neverRuns() {});\r\n+\r\n const server = net.createServer((c) => {\r\n   c.end();\r\n }).listen(common.PIPE, common.mustCall(() => {\r\n@@ -21,6 +24,7 @@ const server = net.createServer((c) => {\r\n       assert.strictEqual(e.port, undefined);\r\n       assert.strictEqual(e.host, undefined);\r\n       assert.strictEqual(e.localAddress, undefined);\r\n-      server.close();\r\n+      runsOk();\r\n+      server.close(neverRuns);\r\n     }));\r\n }));\r\n```\r\n\r\n</details><br>\r\n\r\nThis doesn't happen with all the tests that use pipes, but only with [`parallel/test-child-process-server-close`](https://github.com/nodejs/node/blob/61f3a5c60ad78506e9e0caae061a04ccab878ca1/test/parallel/test-child-process-server-close.js) and [`parallel/test-tls-wrap-econnreset-pipe`](https://github.com/nodejs/node/blob/61f3a5c60ad78506e9e0caae061a04ccab878ca1/test/parallel/test-tls-wrap-econnreset-pipe.js). The first one passes the pipe as the stdout of a child process and the second triggers an error in the server, so this issue may be related to that and actually expected.\r\n\r\ncc @bnoordhuis, @indutny, @nodejs/streams\r\n"},
{"labels":["C++","confirmed-bug","fs"],"text":"* **Version**: `v12.7.0` installed with nvm\r\n* **Platform**: `Linux lt2.cfware.com 5.1.20-300.fc30.x86_64 #1 SMP Fri Jul 26 15:03:11 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux`\r\n* **Subsystem**: `fs`\r\n\r\nTested in REPL:\r\n```js\r\nconst fs = require('fs')\r\nfs.closeSync(4294967296)\r\nfs.closeSync(4294967295)\r\n```\r\n`fs.closeSync(4294967296)` produces a JS exception:\r\n```\r\nThrown:\r\nRangeError [ERR_OUT_OF_RANGE]: The value of \"fd\" is out of range. It must be >= 0 && < 4294967296. Received 4294967296\r\n    at Object.closeSync (fs.js:405:3)\r\n    at repl:1:4\r\n    at Script.runInThisContext (vm.js:126:20)\r\n    at REPLServer.defaultEval (repl.js:384:29)\r\n    at bound (domain.js:415:14)\r\n    at REPLServer.runBound [as eval] (domain.js:428:12)\r\n    at REPLServer.onLine (repl.js:700:10)\r\n    at REPLServer.emit (events.js:208:15)\r\n    at REPLServer.EventEmitter.emit (domain.js:471:20)\r\n    at REPLServer.Interface._onLine (readline.js:316:10)\r\n```\r\n`fs.closeSync(4294967295)` trips a C++ assertion:\r\n```\r\nnode[28006]: ../src/node_file.cc:802:void node::fs::Close(const v8::FunctionCallbackInfo<v8::Value>&): Assertion `args[0]->IsInt32()' failed.\r\n 1: 0x9afed0 node::Abort() [node]\r\n 2: 0x9aff57  [node]\r\n 3: 0x9ba25a node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&) [node]\r\n 4: 0xb90726  [node]\r\n 5: 0xb92647 v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) [node]\r\n 6: 0x1318979  [node]\r\nAborted (core dumped)\r\n```\r\n\r\nObviously this is not a reasonable thing to do but an invalid fd it should produce a JS exception and not core dump."},
{"labels":["confirmed-bug","libuv","macos","process"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v10.16.1\r\n* **Platform**: 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 20 18:42:21 PDT 2019; root:xnu-4903.270.47~4/RELEASE_X86_64 x86_64\r\n* **Subsystem**: `process`\r\n\r\n<!-- Please provide more details below this comment. -->\r\nHello\r\n\r\nIn `v10.16.1`\r\n```js\r\nprocess.title = \"test\";\r\n```\r\nstops changing process name\r\n\r\nIn `v10.15.3`\r\nAll works as expected"},
{"labels":["confirmed-bug","crypto"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: master\r\n* **Platform**: all\r\n* **Subsystem**: crypto\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\nPassing getters for the scrypt parameters `N`, `r`, `p` (or their aliases) can cause the process to crash with an assertion error if the getters don't return the same value at all times:\r\n\r\n```\r\n> crypto.scryptSync('', '', 1, { count: 0, get N() { if (++this.count > 2) return undefined; return 1; } })\r\nnode[15812]: c:\\ws\\src\\node_crypto.cc:6070: Assertion `args[3]->IsUint32()' failed.\r\n```\r\n\r\nI'm not labeling this `security` since it is virtually impossible to exploit remotely."},
{"labels":["confirmed-bug","dns"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: 11.16.0 & 12.6.0\r\n* **Platform**: macOS 10.14.5 & Ubuntu 18.04.2 LTS (4.15.0-54-generic)\r\n* **Subsystem**: dns\r\n\r\n<!-- Please provide more details below this comment. -->\r\n\r\n## Bug description\r\n\r\ndns.resolveSoa may produce unexpected \"serial\" results, when the serial does not follow the YYYYMMDDHH format (or if the serial reaches a certain date ;)\r\n\r\n## Code sample\r\n```\r\nvar dns = require(\"dns\")\r\ndns.resolveSoa(\"some.host\", function(e,o) {console.log(o)})\r\n ```\r\n\r\n## Expected results\r\n\r\n{\r\n  nsname: 'ns1.some.host',\r\n  hostmaster: 'hostmaster.some.host',\r\n  serial: 4294867295,\r\n  refresh: 86400,\r\n  retry: 7200,\r\n  expire: 1209600,\r\n  minttl: 3000\r\n}\r\n\r\n## Actual results\r\n\r\n{\r\n  ...\r\n  serial: -100001,  // this is weird\r\n  ...\r\n}\r\n\r\n## Observations\r\n\r\nAfter some tests, it appears the lowest serial number under which this issue appears is 2147483648 (something to do with dates?)\r\n\r\n\r\n"},
{"labels":["async_hooks","async_wrap","confirmed-bug"],"text":"* **Version**: v11.15.0\r\n* **Platform**: Linux\r\n\r\nRun the following script with ``node --inspect script.js``, connect a debugger with Google Chrome and instruct it to do a heap snapshot.\r\n\r\n**Edit:** See my comment below for a better snippet.\r\n\r\n```js\r\nfunction memoryLeak() {\r\n    return new Promise(() => {});\r\n}\r\n\r\nfunction loop() {\r\n    for (let i = 0; i < 10000; i++) {\r\n        memoryLeak();\r\n    }\r\n\r\n    setTimeout(loop, 0);\r\n}\r\n\r\nloop();\r\n```\r\n\r\nRoughly half of the time node will crash with \"pure virtual method called\".\r\n\r\nThat code actually causes a [memory leak](https://github.com/nodejs/node/issues/28787), but it will likely be annoying to debug if this isn't fixed first."},
{"labels":["confirmed-bug","worker"],"text":"* **Version**: 12.6.0\r\n* **Platform**: macOS\r\n* **Subsystem**: worker_threads\r\n\r\nThe following code causes a segfault:\r\n\r\n```javascript\r\nconst {Worker} = require('worker_threads');\r\n\r\nconst w = new Worker(`\r\n  const { parentPort } = require('worker_threads');\r\n  parentPort.on('message', () => {\r\n    const sharedArrayBuffer = new SharedArrayBuffer(12);\r\n    parentPort.postMessage(sharedArrayBuffer);\r\n  });\r\n`, { eval: true });\r\nw.unref();\r\nw.once('message', () => {\r\n console.log('done');\r\n});\r\nw.postMessage('go');\r\n```\r\n\r\nThe segfault occurs due to usage of `unref()` on the worker. Without that call, the process exits as normal (when `process.exit()` is called from within the `message` handler, otherwise it keeps running).\r\n\r\nBacktrace from lldb:\r\n\r\n```\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x20)\r\n  * frame #0: 0x00000001001947dd node`v8::ArrayBufferDeleter(void*, unsigned long, void*) + 13\r\n    frame #1: 0x00000001000ed298 node`node::worker::SharedArrayBufferMetadata::~SharedArrayBufferMetadata() + 24\r\n    frame #2: 0x00000001000ed55d node`std::__1::__shared_ptr_pointer<node::worker::SharedArrayBufferMetadata*, std::__1::default_delete<node::worker::SharedArrayBufferMetadata>, std::__1::allocator<node::worker::SharedArrayBufferMetadata> >::__on_zero_shared() + 23\r\n    frame #3: 0x00007fff6cc7fd42 libc++.1.dylib`std::__1::__shared_weak_count::__release_shared() + 40\r\n    frame #4: 0x00000001000ed453 node`node::worker::(anonymous namespace)::SABLifetimePartner::~SABLifetimePartner() + 33\r\n    frame #5: 0x00000001000387d4 node`node::Environment::RunCleanup() + 164\r\n    frame #6: 0x00000001000ac686 node`node::NodeMainInstance::Run() + 658\r\n    frame #7: 0x0000000100056ccc node`node::Start(int, char**) + 237\r\n    frame #8: 0x00007fff6fa4a3d5 libdyld.dylib`start + 1\r\n    frame #9: 0x00007fff6fa4a3d5 libdyld.dylib`start + 1\r\n```\r\n\r\nThe cause (within node) appears to be in the destructor of `SharedArrayBufferMetadata`: https://github.com/nodejs/node/blob/b6bfc193788b1838bee73d584fe089e1104b9f88/src/sharedarraybuffer_metadata.cc#L120-L124\r\n\r\nPossibly this is a race between the main thread and worker thread, but I'm not familiar enough with node's internals to debug further."},
{"labels":["confirmed-bug","worker"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v12.6.0\r\n* **Platform**: Windows 64-bit\r\n* **Subsystem**:\r\n\r\nIt is possible that I'm doing something wrong, but I believe the program should not crash.\r\n\r\nBy running the following code, the program crashes (most of the time) with C0000005.ACCESS_VIOLATION.\r\n\r\n```js\r\nconst { Worker } = require( \"worker_threads\" );\r\n\r\nconst workerCode = `\r\nconst v8 = require( \"v8\" );\r\nconst { parentPort } = require( \"worker_threads\" );\r\n\r\nfunction share( contents ) {\r\n  const shared = new SharedArrayBuffer( contents.length );\r\n  const buffer = Buffer.from( shared );\r\n  contents.copy( buffer );\r\n  return shared;\r\n}\r\n\r\nfunction serialize( value ) {\r\n  return share( v8.serialize( value ) );\r\n}\r\n\r\nparentPort.on( \"message\", () => {\r\n  parentPort.postMessage( serialize( {} ) );\r\n} );\r\n`;\r\n\r\nfunction createWorker( id ) {\r\n  const child = new Worker( workerCode, {\r\n    eval: true\r\n  } );\r\n  child.postMessage( {} );\r\n  child.on( \"message\", () => {\r\n    child.terminate();\r\n  } );\r\n  child.on( \"error\", err => console.error( \"error\", id, err ) );\r\n  child.once( \"exit\", () => {\r\n    console.log( \"exit\", id );\r\n  } );\r\n}\r\n\r\nconsole.log( \"5 secs...\" );\r\n\r\nsetTimeout( () => {\r\n  for ( let i = 0; i < 10; i++ ) {\r\n    createWorker( i );\r\n  }\r\n}, 5000 );\r\n```\r\n\r\nI've used `procdump64 -e node` to produce a dump file (available in the following zip file).\r\n[node.exe_190719_222025.zip](https://github.com/nodejs/node/files/3412780/node.exe_190719_222025.zip)\r\n\r\nOpening the dump file in Visual Studio, shows me this:\r\n\r\n![image](https://user-images.githubusercontent.com/18088420/61566821-49f1f500-aa75-11e9-8eab-04eb25067065.png)\r\n\r\n\r\n<!-- Please provide more details below this comment. -->\r\n"},
{"labels":["confirmed-bug","errors"],"text":"backtrace truncated if msg contains null character `\\0`\r\n\r\n```\r\n$ node main.js\r\n\r\nabcdef\r\n/main/t02.js:6\r\n    throw new Error(a);\r\n    ^\r\n\r\nError: abc\r\n```\r\n\r\nwith this program\r\n\r\n```js\r\nfunction test(){\r\n  var a = \"abc\\0def\"\r\n  var a2 = \"abcdef\"\r\n  console.log(a); // not truncated\r\n  if(true) // change to false and backtrace works\r\n    throw new Error(a); // backtrace msg truncated at `\\0`, the whole stack frames are missing\r\n  else\r\n    throw new Error(a2); // backtrace shown correctly\r\n}\r\n\r\ntest()\r\n```\r\n\r\n##\r\n\r\nwithout the `\\0` the backtrace shows fine:\r\n```\r\nabcdef\r\n/main/t02.js:8\r\n    throw new Error(a2);\r\n    ^\r\n\r\nError: abcdef\r\n    at test (/main/t02.js:8:11)\r\n    at Object.<anonymous> (/main/t02.js:11:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:774:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:785:10)\r\n    at Module.load (internal/modules/cjs/loader.js:641:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:837:10)\r\n    at internal/main/run_main_module.js:17:11\r\n```\r\n\r\n##\r\nnode -v\r\nv12.3.1\r\n\r\nuname -a\r\nDarwin  18.5.0 Darwin Kernel Version 18.5.0\r\n\r\n## note\r\naccording to https://stackoverflow.com/questions/13698677/null-character-in-strings \r\n\r\n>> a NUL byte should simply be \"yet another character value\" and have no special meaning, as opposed to other languages where it might end a SV (String value).\r\n\r\nconsole.log correctly shows the string (no truncation) but the backtrace doesn't work when running node on cmd line. \r\n\r\nnote that on a browser (eg chrome) it works: no truncation:\r\n```\r\nthrow new Error(\"abc\\0def\");\r\nVM9405:1 Uncaught Error: abc\u0000def\r\n    at <anonymous>:1:7\r\n```\r\n\r\n"},
{"labels":["confirmed-bug","fs","windows"],"text":"* **Version**: 10.16.0, 11.14.0, 12.6.0\r\n* **Platform**: Windows 10\r\n* **Subsystem**: fs\r\n\r\nIf the name of the dir to be created is invalid, fs.mkdir never calls back and fs.mkdirSync blocks:\r\n\r\n```\r\nconst fs = require('fs')\r\n\r\nconsole.log(\"1\")\r\nfs.mkdir('invalid1:', {recursive: true}, (err) => {\r\n  console.log(\"is not called\")\r\n  if (err) throw err\r\n})\r\n\r\nconsole.log(\"2\")\r\nfs.mkdirSync('invalid2:', {recursive: true})\r\nconsole.log(\"is not reached\")\r\n```\r\n\r\nBTW, the error message that is reported with {recursive: false} appears a bit strange:\r\n\r\n> Error: ENOENT: no such file or directory, mkdir 'invalid2:'\r\n\r\nWouldn't it be more convenient to use EPERM, EACCES or ENOTDIR?\r\n"},
{"labels":["confirmed-bug","performance","stream"],"text":"Seeing major performance regression, ~50% drop in throughput, in one of our benchmarks. I will work on creating a minimal repro. In the meantime though, here are some snippets of the profile outputs - it is pretty strange that 12.6.0 is spending ~70% of the time in shared library land (maybe there's an issue with the profile too?) \r\n\r\n```\r\n#uname -a\r\nLinux ledion-vm 4.10.0-33-generic #37~16.04.1-Ubuntu SMP Fri Aug 11 14:07:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n10.16.0\r\n```\r\n [Shared libraries]:\r\n   ticks  total  nonlib   name\r\n   1021    2.5%          /lib/x86_64-linux-gnu/libc-2.23.so\r\n    724    1.8%          /lib/x86_64-linux-gnu/libpthread-2.23.so\r\n     17    0.0%          [vdso]\r\n      6    0.0%          /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21\r\n\r\n\r\n [Summary]:\r\n   ticks  total  nonlib   name\r\n  26260   63.9%   66.8%  JavaScript\r\n  11860   28.9%   30.2%  C++\r\n    947    2.3%    2.4%  GC\r\n   1768    4.3%          Shared libraries\r\n   1178    2.9%          Unaccounted\r\n\r\n\r\n [Bottom up (heavy) profile]:\r\n   ticks parent  name\r\n    3566    8.7%  Builtin: LoadIC\r\n     858   24.1%    LazyCompile: *onwrite _stream_writable.js:450:17\r\n     358   41.7%      LazyCompile: *afterTransform _stream_transform.js:78:24\r\n     349   97.5%        LazyCompile: *Transform._read _stream_transform.js:185:37\r\n     349  100.0%          LazyCompile: *Readable.read _stream_readable.js:377:35\r\n     348   99.7%            LazyCompile: *pipeOnDrainFunctionResult _stream_reada\r\n```\r\n\r\n\r\n12.6.0\r\n```\r\n [Shared libraries]:\r\n   ticks  total  nonlib   name\r\n  28413   64.4%          /usr/local/bin/node\r\n   1845    4.2%          /lib/x86_64-linux-gnu/libc-2.23.so\r\n    455    1.0%          /lib/x86_64-linux-gnu/libpthread-2.23.so\r\n      7    0.0%          [vdso]\r\n      6    0.0%          /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21\r\n      4    0.0%          /lib/x86_64-linux-gnu/libm-2.23.so\r\n\r\n [Summary]:\r\n   ticks  total  nonlib   name\r\n   8697   19.7%   65.1%  JavaScript\r\n   4515   10.2%   33.8%  C++\r\n   1969    4.5%   14.7%  GC\r\n  30730   69.7%          Shared libraries\r\n    154    0.3%          Unaccounted\r\n\r\n\r\n   ticks parent  name\r\n  28413   64.4%  /usr/local/bin/node\r\n   6958   24.5%    LazyCompile: *Readable.read _stream_readable.js:394:35\r\n   6901   99.2%      LazyCompile: *pipeOnDrainFunctionResult _stream_readable.js\r\n   6901  100.0%        LazyCompile: *emit events.js:153:44\r\n   6901  100.0%          LazyCompile: *EventEmitter.emit domain.js:460:39\r\n   6901  100.0%            LazyCompile: *onwrite _stream_writable.js:445:17\r\n   3237   11.4%    LazyCompile: *ondata _stream_readable.js:711:18\r\n   3237  100.0%      LazyCompile: *emit events.js:153:44\r\n   3237  100.0%        LazyCompile: *Readable.read _stream_readable.js:394:35\r\n   3214   99.3%          LazyCompile: *pipeOnDrainFunctionResult _stream_readabl\r\n   3214  100.0%            LazyCompile: *emit events.js:153:44\r\n```\r\n"},
{"labels":["confirmed-bug","worker"],"text":"* **Version**: 12.6.0\r\n* **Platform**: *Linux* dc 4.4.62-1.el7.elrepo.x86_64 #1 SMP Tue Apr 18 11:02:11 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux and 64-bit *Windows*\r\n* **Subsystem**: worker_threads\r\n\r\n**MainThread**\r\n```JavaScript\r\nconst { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\r\n\r\nfunction allocateSharedMemory(objSharedBuffer, strBufferType, nBytesCount)\r\n{\r\n\tobjSharedBuffer[strBufferType] = new SharedArrayBuffer(nBytesCount);\r\n\tconst arrSharedMemoryView = new Uint32Array(objSharedBuffer[strBufferType]);\r\n\tarrSharedMemoryView[0] = nBytesCount;\r\n}\r\n\r\nconst arrFruit = [\r\n\t\"apples\",\r\n\t\"bananas\",\r\n\t\"oranges\",\r\n];\r\n\r\nconst objToShare = {};\r\n\r\nfor(let strFruit of arrFruit)\r\n{\t\r\n\tobjToShare[strFruit] = {};\r\n\tobjToShare[strFruit][\"type\"] = {};\r\n\t\r\n\tobjToShare[strFruit][\"type\"][\"sunlight\"] = {};\r\n\t\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"sunlight\"], \"lastHour\", 100);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"sunlight\"], \"lastDay\", 104);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"sunlight\"], \"lastMonth\", 108);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"sunlight\"], \"lastYear\", 112);\r\n\r\n\tobjToShare[strFruit][\"type\"][\"water\"] = {};\r\n\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"water\"], \"lastHour\", 116);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"water\"], \"lastDay\", 120);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"water\"], \"lastMonth\", 124);\r\n\tallocateSharedMemory(objToShare[strFruit][\"type\"][\"water\"], \"lastYear\", 128);\r\n}\t\r\n\r\nfor(let i = 0; i < 4; i++)\r\n{\r\n\tconst w = new Worker(\"./WorkerThread.js\");\r\n\t\r\n\tw.postMessage(objToShare);\r\n\t\r\n\t/*w.on('message', (msg) => {\r\n\t\tconst arrDataPoints = new Uint32Array(objToShare[\"bananas\"][\"type\"][\"sunlight\"][\"lastHour\"]);\r\n\t});*/\t\r\n}\r\n```\r\n\r\n**WorkerThread**\r\n\r\n```JavaScript\r\nconst {  parentPort, workerData } = require('worker_threads');\r\n\r\nparentPort.once('message', (value) => {\r\n\r\n\tconst objGranularities = {\r\n\t\t\"lastHour\": 100,\r\n\t\t\"lastDay\": 104,\r\n\t\t\"lastMonth\": 108,\r\n\t\t\"lastYear\": 112\r\n\t}\r\n\r\n\tfor(let strGranularity in objGranularities)\r\n\t{\r\n\t\tconst sharedBuffer = value[\"bananas\"][\"type\"][\"sunlight\"][strGranularity];\r\n\t\tconst sharedBufferView = new Uint32Array(sharedBuffer);\r\n\t\tconst nByteLengthReceived = sharedBuffer.byteLength;\r\n\t\tconst nByteLengthExpected = objGranularities[strGranularity]; \r\n\t\t\r\n\t\tif(nByteLengthExpected === nByteLengthReceived)\r\n\t\t{\r\n\t\t\tconsole.log(\"[Pass]\", \"receivedLength =\", nByteLengthReceived, \"expectedLength =\", nByteLengthExpected, \"firstValue =\", sharedBufferView[0], \"type =\", strGranularity);\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconsole.log(\"[Fail]\", \"receivedLength =\", nByteLengthReceived, \"expectedLength =\", nByteLengthExpected, \"firstValue =\", sharedBufferView[0],  \"type =\", strGranularity);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tparentPort.postMessage(\"finished\");\r\n\r\n});\r\n```\r\n\r\n***Output***\r\n```\r\n[Fail] receivedLength = 104 expectedLength = 100 firstValue = 104 type = lastHour\r\n[Fail] receivedLength = 108 expectedLength = 104 firstValue = 108 type = lastDay\r\n[Fail] receivedLength = 104 expectedLength = 100 firstValue = 104 type = lastHour\r\n[Fail] receivedLength = 112 expectedLength = 108 firstValue = 112 type = lastMonth\r\n[Fail] receivedLength = 108 expectedLength = 104 firstValue = 108 type = lastDay\r\n[Fail] receivedLength = 128 expectedLength = 112 firstValue = 128 type = lastYear\r\n[Fail] receivedLength = 112 expectedLength = 108 firstValue = 112 type = lastMonth\r\n[Fail] receivedLength = 128 expectedLength = 112 firstValue = 128 type = lastYear\r\n[Fail] receivedLength = 104 expectedLength = 100 firstValue = 104 type = lastHour\r\n[Fail] receivedLength = 108 expectedLength = 104 firstValue = 108 type = lastDay\r\n[Fail] receivedLength = 112 expectedLength = 108 firstValue = 112 type = lastMonth\r\n[Fail] receivedLength = 128 expectedLength = 112 firstValue = 128 type = lastYear\r\n[Fail] receivedLength = 104 expectedLength = 100 firstValue = 104 type = lastHour\r\n[Fail] receivedLength = 108 expectedLength = 104 firstValue = 108 type = lastDay\r\n[Fail] receivedLength = 112 expectedLength = 108 firstValue = 112 type = lastMonth\r\n[Fail] receivedLength = 128 expectedLength = 112 firstValue = 128 type = lastYear\r\n```\r\n\r\n**The order of creating the keys in the object matters.\r\nIt appears there's some optimization in V8 which is disabled partially (object keys reordering).**\r\n\r\nWhen ordered this way, everything works fine:\r\n```\r\nconst arrFruit = [\r\n\t\"bananas\",\r\n\t\"oranges\",\r\n\t\"apples\",\r\n];\r\n\r\n{\r\n  bananas: { type: { sunlight: [Object], water: [Object] } },\r\n  oranges: { type: { sunlight: [Object], water: [Object] } },\r\n  apples: { type: { sunlight: [Object], water: [Object] } }\r\n}\r\n```\r\n\r\nI get the following output: \r\n```\r\n[Pass] receivedLength = 100 expectedLength = 100 firstValue = 100 type = lastHour\r\n[Pass] receivedLength = 104 expectedLength = 104 firstValue = 104 type = lastDay\r\n[Pass] receivedLength = 108 expectedLength = 108 firstValue = 108 type = lastMonth\r\n[Pass] receivedLength = 112 expectedLength = 112 firstValue = 112 type = lastYear\r\n[Pass] receivedLength = 100 expectedLength = 100 firstValue = 100 type = lastHour\r\n[Pass] receivedLength = 104 expectedLength = 104 firstValue = 104 type = lastDay\r\n[Pass] receivedLength = 100 expectedLength = 100 firstValue = 100 type = lastHour\r\n[Pass] receivedLength = 108 expectedLength = 108 firstValue = 108 type = lastMonth\r\n[Pass] receivedLength = 104 expectedLength = 104 firstValue = 104 type = lastDay\r\n[Pass] receivedLength = 112 expectedLength = 112 firstValue = 112 type = lastYear\r\n[Pass] receivedLength = 108 expectedLength = 108 firstValue = 108 type = lastMonth\r\n[Pass] receivedLength = 112 expectedLength = 112 firstValue = 112 type = lastYear\r\n[Pass] receivedLength = 100 expectedLength = 100 firstValue = 100 type = lastHour\r\n[Pass] receivedLength = 104 expectedLength = 104 firstValue = 104 type = lastDay\r\n[Pass] receivedLength = 108 expectedLength = 108 firstValue = 108 type = lastMonth\r\n[Pass] receivedLength = 112 expectedLength = 112 firstValue = 112 type = lastYear\r\n```\r\n\r\n\r\n"},
{"labels":["confirmed-bug","errors"],"text":"* **Version**:  v12.6.0\r\n* **Platform**: Darwin Bastians-MBP 18.6.0 Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019; root:xnu-4903.261.4~2/RELEASE_X86_64 x86_64\r\n\r\nUp to version 12.5.0, when rethrowing the error from an `uncaughtException` handler, the original stack trace would be preserved. In version 12.6.0, this is no longer the case. Instead, a stack trace with only one line is printed, showing the callsite where the error has been rethrown. \r\n\r\n`rethrow.js`:\r\n\r\n```\r\n'use strict';\r\n\r\nprocess.on('uncaughtException', err => {\r\n  throw err;\r\n});\r\n\r\nfunction throwUncaughtError() {\r\n  throw new Error('Boom');\r\n}\r\n\r\nthrowUncaughtError();\r\n```\r\n\r\nRunning the above in 12.5.0 and 12.6.0 shows the difference:\r\n\r\n```\r\n> nvm use 12.5.0 && node rethrow\r\n\r\nNow using node v12.5.0 (npm v6.9.0)\r\n/Users/bastian/instana/code/nodejs/packages/collector/test/uncaught/apps/rethrow.js:4\r\n  throw err;\r\n  ^\r\n\r\nError: Boom\r\n    at throwUncaughtError (/Users/bastian/instana/code/nodejs/packages/collector/test/uncaught/apps/rethrow.js:8:9)\r\n    at Object.<anonymous> (/Users/bastian/instana/code/nodejs/packages/collector/test/uncaught/apps/rethrow.js:11:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:776:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)\r\n    at Module.load (internal/modules/cjs/loader.js:643:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:839:10)\r\n    at internal/main/run_main_module.js:17:11\r\n\r\n> nvm use 12.6.0 && node rethrow\r\n\r\nNow using node v12.6.0 (npm v6.9.0)\r\n/Users/bastian/instana/code/nodejs/packages/collector/test/uncaught/apps/rethrow.js:4\r\n  throw err;\r\n  ^\r\n\r\nError: Boom\r\n\r\n>\r\n\r\n```\r\n\r\nCommits 0fd652468003fcf00cadd04ff5bf7ee7fc07af84 and 5b92eb468663809f9075e930d10cf97bc1eb0762 might be related to this change in behaviour."},
{"labels":["confirmed-bug","path"],"text":"## What happens in node < 12\r\n\r\n```js\r\nconst Path = require('path');\r\nPath.relative('/page1/page2/foo', '/');\r\n// '../../..'\r\nPath.relative('/page1/page2/foo', '/page1/');\r\n// '../..'\r\nPath.relative('/page1/page2/foo', '/page1/page2/');\r\n// '..'\r\n```\r\n\r\n## What happens in node => 12\r\n\r\n```js\r\nconst Path = require('path');\r\nPath.relative('/page1/page2/foo', '/');\r\n// '../../../'\r\n//          ^--- Note the trailing slash\r\nPath.relative('/page1/page2/foo', '/page1/');\r\n// '../..'\r\nPath.relative('/page1/page2/foo', '/page1/page2/');\r\n// '..'\r\n```\r\n\r\nNote the inconsistency when resolving a path against root. In node 12 we now get a trailing slash.\r\n\r\n## What I expect should happen\r\n\r\nWe either resolve all paths with or without trailing slashes but not mix both.\r\nNodes behavior prior to 12 was more consistent.\r\n\r\n* 12.6.0\r\n* OSX 10.14.5\r\n\r\n"},
{"labels":["confirmed-bug","repl"],"text":"@estrada9166 recently brought up that `test/parallel/test-repl-save-load.js` is not working as it should. It should fail as is it but the errors are swallowed due to calling `complete`.\r\n\r\nIt seems like the domain does not propagate the error properly and it's silently swallowed. Adding an error listener to the active domain in the complete function that throws the error fixes the problem but it causes some side effects in other cases. We should only add the listener to the domains that do not handle the error properly at the moment.\r\n\r\nPing @Trott since you fixed some of these cases before."},
{"labels":["confirmed-bug"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v12.5.0 and greater\r\n* **Platform**: Darwin MacBook-Pro.local 18.6.0 Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019; root:xnu-4903.261.4~2/RELEASE_X86_64 x86_64\r\n* **Subsystem**:\r\n\r\n<!-- Please provide more details below this comment. -->\r\nSimply run `cat <(node -v)`\r\nrelated: https://github.com/robbyrussell/oh-my-zsh/issues/7972"},
{"labels":["confirmed-bug","crypto"],"text":"With today's master:\r\n```js\r\nconst assert = require('assert');\r\nconst crypto = require('crypto');\r\nfor (let bits = 3; bits <= 15; bits++) {\r\n  const p = crypto.createDiffieHellman(bits).getPrime();\r\n  assert.strictEqual(p.length, 2);\r\n  assert.strictEqual(p.readUInt16BE(0), 35963);\r\n}\r\n```\r\nI'd expect the test case to fail (it should find different primes) but it returns the same prime for sizes 3 to 15. It's only at `bits >= 16` that it starts to find different primes.\r\n\r\nI'm not sure if this is a Node.js or an openssl bug. `log2(35963) > 15` though so it definitely seems wrong to return that prime (and only that prime) for `bits <= 15`."},
{"labels":["confirmed-bug","process"],"text":"<!--\r\nThank you for reporting a possible bug in Node.js.\r\n\r\nPlease fill in as much of the template below as you can.\r\n\r\nVersion: output of `node -v`\r\nPlatform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)\r\nSubsystem: if known, please specify the affected core module name\r\n\r\nIf possible, please provide code that demonstrates the problem, keeping it as\r\nsimple and free of external dependencies as you can.\r\n-->\r\n\r\n* **Version**: v11.15.0\r\n* **Platform**: Linux tsundberg-dev 4.18.0-20-generic #21~18.04.1-Ubuntu SMP Wed May 8 08:43:37 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n* **Subsystem**: process\r\n\r\n<!-- Please provide more details below this comment. -->\r\n---\r\nTo run the following tests paste them into `index.js` and run `node index.js; echo $?`\r\n\r\n---\r\n#### Case 1\r\nThe following results in an expected output:\r\n```node\r\nprocess.kill(process.pid, 'SIGTERM')\r\n```\r\nOutput:\r\n```\r\nTerminated\r\n143\r\n```\r\n---\r\n#### Case 2\r\nAdding a SIGTERM results in an exit code of 0, and the handler never runs:\r\n```node\r\nprocess.on('SIGTERM', () => {\r\n    console.error('Handle ran!')\r\n    process.exit(1)\r\n})\r\n\r\nprocess.kill(process.pid, 'SIGTERM')\r\n```\r\nOutput:\r\n```\r\n0\r\n```\r\n---\r\n#### Case 3\r\nAdding a timeout or some other task that keeps node alive results in the expected behavior:\r\n```node\r\nprocess.on('SIGTERM', () => {\r\n    console.error('Handle ran!')\r\n    process.exit(1)\r\n})\r\n\r\nprocess.kill(process.pid, 'SIGTERM')\r\n\r\nsetTimeout(() => {}, 100000)\r\n```\r\nOutput:\r\n```\r\nHandle ran!\r\n1\r\n```"},
{"labels":["C++","cli","confirmed-bug"],"text":"Check failure is this: `../src/node.cc:649:void node::ResetStdio(): Assertion `(err) != (-1)' failed.`\r\n\r\nhttps://github.com/nodejs/node/blob/dec5b2258a853b524e125542667b5b2dfc5afb74/src/node.cc#L646-L649\r\n\r\nReproduction:\r\n\r\n1. Make sure you are on >=12.5.0\r\n2. clone https://github.com/engine262/engine262\r\n3. `npm run build && npm run test`\r\n4. Tests start running, hit ctrl+c to kill it\r\n5. Check failure happens consistently here"},
{"labels":["V8 Engine","confirmed-bug","i18n-api","v10.x"],"text":"There is a timezone bug in Node 10.16.0. It is the same bug that I reported to Chromium here:\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=928068\r\n\r\nRun the code in comment 1, from there, to reproduce the bug in Node 10.16.0.\r\n\r\nI'm not sure if this is a V8 thing or if each environment has to fix the bug. If it is a V8 thing, perhaps this bug will go away by itself eventually. Otherwise, it needs to be addressed in Node."},
{"labels":["V8 Engine","build","confirmed-bug"],"text":"latest node source code doesn't work well with \"--enable-vtune-profiling\", the log is below:\r\ngyp: /home/benchmark/Downloads/node/tools/v8_gypfiles/v8vtune.gyp not found (cwd: /home/benchmark/Downloads/node) while loading dependencies of /home/benchmark/Downloads/node/node.gyp while trying to load /home/benchmark/Downloads/node/node.gyp\r\nError running GYP\r\n"}]