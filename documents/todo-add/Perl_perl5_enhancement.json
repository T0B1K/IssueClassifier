[{"labels":["enhancement",null],"text":"Coroutines would be a useful building block for many features, like generators, complex exception systems which allow resuming of operations, asynchronous operation. There are existing solutions on CPAN of high quality: https://metacpan.org/pod/Coro::State (even offering a nice, cooperative threading model), but it is a very large module which is modifying lots of Perl internals, leading to concerns that it might go out of maintenance one day with a future Perl update, if the author ever loses interest.\r\n\r\nI thereby propose that either an agreement is made with the author, to at least include the perl core dependendant parts of Coro into Perl itself, thereby ensuring future maintenance, or that the most important building blocks for coroutines are added to Perl.\r\n\r\n(This is not meant as an offense to the author of the module, but it's my firm belief, that the TIMTOWTDI principle, applied to even basic language building blocks like coroutines, threading, exception objects or objects in general is, what has brought Perl into today's situation. It's fine to have multiple web frameworks, it's not fine to use 10 CPAN modules and have three event loops, 15 exception systems and 8 fully fledged object systems running. Some stuff simply has to be \"official\" to build a solid, enduring ecosystem around that in which people can trust)."},{"labels":["enhancement",null],"text":"Currently, the Perl core does not include a convenient way to install modules\r\nfor the system Perl or another Perl version into a user-local directory using\r\nthe common `cpan` or `cpanm` tools.\r\n\r\nThere is a pre-existing implementation with local::lib .\r\n\r\nThe other alternative of using `plenv` to install a completely separate\r\ninstallation of Perl does not necessarily solve the problem, since the system\r\nadministrator may have pre-installed a Perl version which includes modules\r\nlike Net::SSLeay that require other system headers already.\r\n\r\nI see three approaches to solve this issue :\r\n\r\n1) Distribute local::lib under cpan/ so it comes pre-installed with every\r\nPerl version starting with 5.34.0 / 7.0 .\r\n\r\n2) Distribute something like local::lib and/or teach the module installation\r\ntools to prefer and respect other installation locations.\r\n\r\n3) Do nothing and have users install local::lib manually before being able\r\nto use the included module installation tool, `cpan`."},{"labels":["enhancement",null],"text":"The function `popcount' (population count) should count the bits on in an integer and is often used in logic using bit operations. Some programming or scripting languages provide it.\r\n\r\nAlternate names:\r\n\r\n- `bitcount`\r\n- ' count_bits`\r\n- `popcount`\r\n- `popcnt`\r\n\r\nDescription\r\n\r\n```\r\ninteger = popcount(integer)\r\n```\r\n\r\nExamples \r\n\r\n```\r\nprint popcount(3)                       # prints 2\r\nprint popcount(-1)                      # prints 64 (or 32 on 32-bit Perls)\r\nprint popcount(0xffffffffffffffff) # prints 64\r\n```\r\n\r\nImplementation as pure Perl and portable to any language including C:\r\n\r\n```\r\nsub _count_bits {\r\n    my $v = shift;\r\n\r\n    # use integer;\r\n    # no warnings 'portable'; # for 0xffffffffffffffff\r\n\r\n    if ($width == 64) {\r\n        $v = $v - (($v >> 1) & 0x5555555555555555);\r\n        $v = ($v & 0x3333333333333333) + (($v >> 2) & 0x3333333333333333);\r\n        # (bytesof($v) -1) * bitsofbyte = (8-1)*8 = 56 ----------------------vv\r\n        $v = (($v + ($v >> 4) & 0x0f0f0f0f0f0f0f0f) * 0x0101010101010101) >> 56;\r\n        return $v;\r\n    }\r\n    else {\r\n       # for exactly 32 bits\r\n        #$v = $v - (($v >> 1) & 0x55555555);\r\n        #$v = ($v & 0x33333333) + (($v >> 2) & 0x33333333);\r\n        ## (bytesof($v) -1) * bitsofbyte = (4-1)*8 = 24 ------vv\r\n        #$v = (($v + ($v >> 4) & 0x0f0f0f0f) * 0x01010101) >> 24\r\n\r\n       # for any length\r\n        my $c; # count\r\n        for ($c = 0; $v; $c++) {\r\n            $v &= $v - 1; # clear the least significant bit set\r\n        }\r\n       return $c;\r\n    }\r\n}\r\n\r\n```"},{"labels":["enhancement",null],"text":"https://github.com/Perl/perl5/issues/18049\r\n> so your proposal would require perl's numification of a string to start\r\nrecognising 0x prefixes for the first time, which is a major change, and\r\none which I would oppose\r\n\r\nOkay. I'm convinced it is not a good idea to let perl grok hex float strings straight. But wait... we have hex()!!\r\n\r\n```perl\r\nsay hex('0x1.921fb54442d18p+1'); # unfortunately 1\r\n```\r\n\r\nShould we not consider having hex() (and maybe oct()) accept floating point notations as well?   I think that is safer than the previous proposal.\r\n\r\nDan, not so integral"},{"labels":["enhancement",null],"text":"Porters,\r\n\r\nI came across an article on hexadecimal floating-point number notations and in the article (in Japanese) the author  says he could not find a standard way to numify a hex float string in perl (besides `eval()`).\r\n\r\n* https://qiita.com/mod_poppo/items/3fa4cdc35f9bfb352ad5\r\n\r\nI took a look and found `POSIX::strtod()` also works.\r\n\r\nhttps://ideone.com/zcYgY0\r\n\r\n```perl\r\n#!/usr/bin/perl\r\nuse strict;\r\nuse warnings;\r\nuse feature 'say';\r\nuse POSIX ();\r\nmy $pi_hexstr = \"0x1.921fb54442d18p+1\";\r\nsay 0+$pi_hexstr;\t# 0, unfortunately\r\nsay eval($pi_hexstr);\t# 3.14159265358979 as expected\r\nsay POSIX::strtod(\"0x1.921fb54442d18p+1\"); # ditto\r\n```\r\n\r\nBut considering how decimal float strings behave,  I think hex float strings should be coerced to NV on numeric operations just like decimal ones.  In other words,\r\n\r\n\r\n```perl\r\nsay 0+$pi_hexstr; # should say 3.14159265358979\r\n```\r\n\r\nDan the Numeric Perl Monger\r\n"},{"labels":["enhancement",null],"text":"Please add `head5` and `head6` to the available commands in Plain Old Documentation (POD). Most other markup languages have 6 heading levels."},{"labels":["enhancement",null],"text":"*Note: This is not an actual feature request, but I wasn't sure what issue category to select.*\r\n\r\nHi, I'm a new contributor looking to help out, and I saw that the [perltodo](https://github.com/Perl/perl5/blob/blead/Porting/todo.pod#profile-installman) included an item requesting someone profile the `installman` script to see what it was doing that was taking so long, so I built the latest development release and profiled it.\r\n\r\nThe original data contained 1207 distinct functions, most of which contributed negligibly to the runtime duration, so I've included only the top 100 functions. Please let me know if I can provide any additional information.\r\n\r\n# Profiling\r\n\r\nThe profiling was conducted using the following command:\r\n\r\n    perf record --event=\"{cycle_activity.stalls_total,duration_time,instructions,cpu-cycles,cache-references,cache-misses,branch-misses,context-switches,page-faults,major-faults,kmem:kmalloc,kmem:kfree,kmem:mm_page_alloc,kmem:mm_page_free}\" ./installman\r\n\r\n## Results\r\n\r\nThe following table contains the results of the profiling.\r\n\r\n | cycle_activity.stalls_total   | instructions  | cpu-cycles  | cache-references  | cache-misses          | function |\r\n | :-: | :-: | :-: | :-: | :-: | :-: |\r\n | 9.36%   | 33.62%  | 20.47%  | 5.40%  | 2.49%          | S_regtry |\r\n | 5.48%   | 3.68%  | 4.73%  | 8.95%  | 5.45%          | Perl_hv_common |\r\n | 5.20%   | 2.49%  | 4.45%  | 6.16%  | 4.44%          | Perl_pp_multideref |\r\n | 4.32%   | 1.31%  | 2.73%  | 5.10%  | 4.27%          | Perl_pp_entersub |\r\n | 3.49%   | 3.68%  | 3.28%  | 2.87%  | 1.98%          | Perl_sv_setsv_flags |\r\n | 3.41%   | 1.67%  | 2.82%  | 3.55%  | 3.27%          | Perl_pp_padsv |\r\n | 3.13%   | 6.78%  | 4.54%  | 1.58%  | 1.31%          | Perl_leave_scope |\r\n | 2.70%   | 1.92%  | 3.06%  | 3.76%  | 3.48%          | Perl_pp_nextstate |\r\n | 2.28%   | 2.06%  | 2.21%  | 1.99%  | 1.93%          | Perl_sv_clear |\r\n | 2.21%   | 0.62%  | 1.29%  | 0.42%  | 0.12%          | Perl_utf8_length |\r\n | 1.80%   | 0.96%  | 1.46%  | 1.92%  | 1.11%          | Perl_pp_and |\r\n | 1.62%   | 0.52%  | 1.10%  | 1.61%  | 0.93%          | Perl_pp_method_named |\r\n | 1.61%   | 0.83%  | 1.13%  | 1.05%  | 1.92%          | libc-2.31.so  | __memmove_avx_unaligned_erms |\r\n | 1.51%   | 1.80%  | 1.77%  | 2.06%  | 0.85%          | Perl_regexec_flags |\r\n | 1.46%   | 0.96%  | 1.22%  | 1.36%  | 0.94%          | Perl_pp_rv2av |\r\n | 1.45%   | 0.36%  | 0.83%  | 1.49%  | 1.46%          | Perl_pp_pushmark |\r\n | 1.36%   | 0.54%  | 0.89%  | 1.52%  | 1.13%          | Perl_fbm_instr |\r\n | 1.24%   | 0.96%  | 1.00%  | 1.52%  | 1.14%          | Perl_re_intuit_start |\r\n | 1.20%   | 0.97%  | 1.07%  | 1.34%  | 0.91%          | Perl_pp_subst |\r\n | 1.16%   | 0.56%  | 0.89%  | 1.01%  | 1.08%          | libc-2.31.so  | _int_malloc |\r\n | 1.03%   | 0.30%  | 0.56%  | 1.12%  | 0.79%          | Perl_pp_multiconcat |\r\n | 1.00%   | 1.39%  | 1.02%  | 0.74%  | 0.35%          | S_regrepeat |\r\n | 0.97%   | 0.91%  | 0.94%  | 0.90%  | 0.80%          | Perl_runops_standard |\r\n | 0.97%   | 0.45%  | 0.96%  | 1.43%  | 1.40%          | Perl_pp_const |\r\n | 0.88%   | 1.61%  | 1.24%  | 0.93%  | 1.36%          | Perl_sv_upgrade |\r\n | 0.88%   | 0.66%  | 0.99%  | 1.17%  | 1.24%          | Perl_pp_match |\r\n | 0.86%   | 0.87%  | 0.81%  | 1.44%  | 0.79%          | Perl_pp_aassign |\r\n | 0.84%   | 1.11%  | 0.88%  | 0.82%  | 1.10%          | libc-2.31.so  | _int_free |\r\n | 0.78%   | 0.30%  | 0.53%  | 0.69%  | 0.42%          | Perl_vivify_ref |\r\n | 0.74%   | 0.57%  | 0.89%  | 1.00%  | 0.56%          | Perl_pp_enter |\r\n | 0.70%   | 0.39%  | 0.51%  | 0.80%  | 0.53%          | Perl_pp_cond_expr |\r\n | 0.66%   | 0.52%  | 0.58%  | 0.54%  | 0.25%          | Perl_do_trans |\r\n | 0.66%   | 0.39%  | 0.56%  | 0.83%  | 0.71%          | Perl_pp_or |\r\n | 0.62%   | 0.24%  | 0.52%  | 0.74%  | 0.73%          | Perl_pp_gvsv |\r\n | 0.61%   | 0.35%  | 0.46%  | 0.34%  | 0.38%          | libc-2.31.so  | cfree@GLIBC_2.2.5 |\r\n | 0.59%   | 0.26%  | 0.39%  | 0.32%  | 0.32%          | libc-2.31.so  | __memchr_avx2 |\r\n | 0.58%   | 0.93%  | 0.82%  | 0.42%  | 0.53%          | libc-2.31.so  | malloc |\r\n | 0.58%   | 0.49%  | 0.69%  | 0.51%  | 0.47%          | Perl_pp_leave |\r\n | 0.58%   | 0.21%  | 0.39%  | 0.45%  | 0.23%          | Perl_pp_padav |\r\n | 0.55%   | 0.77%  | 0.69%  | 1.33%  | 0.74%          | Perl_pp_padrange |\r\n | 0.53%   | 0.35%  | 0.43%  | 0.27%  | 0.49%          | Perl_sv_catpvn_flags |\r\n | 0.53%   | 0.14%  | 0.28%  | 0.50%  | 0.18%          | Perl_pp_splice |\r\n | 0.49%   | 0.52%  | 0.55%  | 0.56%  | 0.36%          | Perl_pp_sassign |\r\n | 0.49%   | 0.19%  | 0.44%  | 0.57%  | 0.84%          | S_share_hek_flags |\r\n | 0.45%   | 0.11%  | 0.21%  | 0.32%  | 0.24%          | S_find_byclass |\r\n | 0.43%   | 0.18%  | 0.26%  | 0.31%  | 0.15%          | libc-2.31.so  | _int_realloc |\r\n | 0.42%   | 0.59%  | 0.54%  | 0.52%  | 0.33%          | Perl_av_fetch |\r\n | 0.42%   | 0.49%  | 0.69%  | 0.54%  | 0.50%          | Perl_pp_leavesub |\r\n | 0.41%   | 0.14%  | 0.25%  | 0.58%  | 0.43%          | Perl_pp_seq |\r\n | 0.39%   | 0.11%  | 0.24%  | 0.31%  | 0.15%          | Perl_pp_return |\r\n | 0.38%   | 1.74%  | 0.96%  | 0.19%  | 0.06%          | S_reginclass |\r\n | 0.38%   | 0.29%  | 0.29%  | 0.30%  | 0.16%          | libc-2.31.so  | __libc_calloc |\r\n | 0.38%   | 0.19%  | 0.24%  | 0.37%  | 0.20%          | Perl_mg_find |\r\n | 0.37%   | 0.16%  | 0.25%  | 0.31%  | 0.21%          | Perl_pp_defined |\r\n | 0.34%   | 0.19%  | 0.26%  | 0.24%  | 0.18%          | Perl_sv_force_normal_flags |\r\n | 0.33%   | 0.26%  | 0.26%  | 0.19%  | 0.22%          | Perl_pp_unstack |\r\n | 0.33%   | 0.23%  | 0.35%  | 0.46%  | 0.57%          | S_sv_uncow |\r\n | 0.33%   | 0.10%  | 0.19%  | 0.12%  | 0.04%          | Perl_pp_leaveloop |\r\n | 0.32%   | 0.36%  | 0.33%  | 0.21%  | 0.28%          | Perl_sv_free2 |\r\n | 0.32%   | 0.25%  | 0.29%  | 0.31%  | 0.35%          | Perl_pp_iter |\r\n | 0.32%   | 0.09%  | 0.25%  | 0.35%  | 0.22%          | libc-2.31.so  | __memcmp_avx2_movbe |\r\n | 0.32%   | 0.08%  | 0.15%  | 0.20%  | 0.10%          | Perl_pp_not |\r\n | 0.30%   | 0.48%  | 0.38%  | 0.56%  | 0.16%          | Perl_mg_get |\r\n | 0.30%   | 0.28%  | 0.33%  | 0.25%  | 0.34%          | Perl_leave_adjust_stacks |\r\n | 0.29%   | 0.08%  | 0.18%  | 0.13%  | 0.16%          | libc-2.31.so  | __memset_avx2_unaligned_erms |\r\n | 0.28%   | 0.17%  | 0.33%  | 0.80%  | 0.34%          | Perl_sv_eq_flags |\r\n | 0.26%   | 0.15%  | 0.21%  | 0.18%  | 0.26%          | Perl_pp_ref |\r\n | 0.26%   | 0.09%  | 0.18%  | 0.28%  | 0.17%          | Perl_pp_gv |\r\n | 0.24%   | 0.07%  | 0.09%  | 0.13%  | 0.08%          | S_find_span_end_mask |\r\n | 0.24%   | 0.05%  | 0.12%  | 0.20%  | 0.09%          | Perl_pp_print |\r\n | 0.22%   | 0.40%  | 0.39%  | 0.26%  | 0.25%          | Perl_free_tmps |\r\n | 0.22%   | 0.29%  | 0.19%  | 0.37%  | 0.27%          | S_pushav |\r\n | 0.22%   | 0.24%  | 0.28%  | 0.33%  | 0.37%          | Perl_save_clearsv |\r\n | 0.22%   | 0.18%  | 0.28%  | 0.36%  | 0.25%          | Perl_hfree_next_entry |\r\n | 0.22%   | 0.11%  | 0.23%  | 0.21%  | 0.11%          | S_reg_set_capture_string.isra.0 |\r\n | 0.21%   | 0.39%  | 0.28%  | 0.17%  | 0.09%          | Perl_sv_grow |\r\n | 0.21%   | 0.10%  | 0.13%  | 0.24%  | 0.02%          | Perl_pp_trans |\r\n | 0.20%   | 0.20%  | 0.16%  | 0.23%  | 0.10%          | Perl_hv_iternext_flags.constprop.0 |\r\n | 0.20%   | 0.18%  | 0.15%  | 0.11%  | 0.13%          | libpthread-2.31.so  | __errno_location |\r\n | 0.20%   | 0.14%  | 0.19%  | 0.27%  | 0.20%          | Perl_pp_enterloop |\r\n | 0.20%   | 0.10%  | 0.10%  | 0.08%  | 0.12%          | Perl_newSVpvn_flags |\r\n | 0.20%   | 0.09%  | 0.13%  | 0.28%  | 0.16%          | S_gv_fetchmeth_internal |\r\n | 0.20%   | 0.04%  | 0.07%  | 0.12%  | 0.00%          | Perl_pp_substr |\r\n | 0.18%   | 0.21%  | 0.16%  | 0.11%  | 0.06%          | Perl_safesysmalloc |\r\n | 0.18%   | 0.14%  | 0.23%  | 0.17%  | 0.15%          | libc-2.31.so  | realloc |\r\n | 0.18%   | 0.10%  | 0.12%  | 0.16%  | 0.07%          | Perl_pp_anonhash |\r\n | 0.18%   | 0.08%  | 0.09%  | 0.09%  | 0.04%          | Perl_sv_2pv_flags |\r\n | 0.18%   | 0.04%  | 0.11%  | 0.25%  | 0.06%          | Perl_pp_gt |\r\n | 0.17%   | 0.21%  | 0.27%  | 0.37%  | 0.14%          | Perl_pp_push |\r\n | 0.17%   | 0.13%  | 0.12%  | 0.25%  | 0.34%          | Perl_pp_substcont |\r\n | 0.17%   | 0.11%  | 0.16%  | 0.14%  | 0.03%          | S_cleanup_regmatch_info_aux |\r\n | 0.17%   | 0.07%  | 0.10%  | 0.15%  | 0.13%          | Perl_pp_split |\r\n | 0.17%   | 0.06%  | 0.10%  | 0.16%  | 0.13%          | Perl_pp_i_eq |\r\n | 0.17%   | 0.04%  | 0.05%  | 0.10%  | 0.13%          | Perl_pp_length |\r\n | 0.16%   | 0.11%  | 0.21%  | 0.23%  | 0.39%          | Perl_pp_aelemfast |\r\n | 0.16%   | 0.10%  | 0.09%  | 0.05%  | 0.07%          | Perl_gp_free |\r\n | 0.16%   | 0.08%  | 0.11%  | 0.20%  | 0.07%          | Perl_pp_concat |\r\n | 0.14%   | 0.17%  | 0.14%  | 0.10%  | 0.11%          | Perl_sv_unref_flags |\r\n | 0.14%   | 0.11%  | 0.18%  | 0.19%  | 0.27%          | Perl_pp_shift |\r\n\r\n## Environment\r\n\r\n### Perl Version\r\n\r\nThe version of Perl I used to profile was 5.33.0, which I built immediately before the profiling. I downloaded the source package from the [CPAN](https://www.cpan.org) using [this link](https://www.cpan.org/src/5.0/perl-5.33.0.tar.gz).\r\n\r\n#### Configuration\r\n\r\nI configured the source package using the following command.\r\n\r\n    ./Configure -des -Dprefix=./test-installation/ -Dusedevel -Doptimize=-O3 -Accflags=-march=native\r\n\r\nAfter building, I made sure to run `make test`. Some tests were skipped, but every test that was run was successful.\r\n\r\nThe following is the output of running `perl -V -I. -Ilib`.\r\n\r\n```\r\nSummary of my perl5 (revision 5 version 33 subversion 0) configuration:\r\n   \r\n  Platform:\r\n    osname=linux\r\n    osvers=5.7.9-1-manjaro\r\n    archname=x86_64-linux\r\n    uname='linux www1 5.7.9-1-manjaro #1 smp preempt thu jul 16 08:20:05 utc 2020 x86_64 gnulinux '\r\n    config_args='-des -Dprefix=./test-installation/ -Dusedevel -Doptimize=-O3 -Accflags=-march=native'\r\n    hint=recommended\r\n    useposix=true\r\n    d_sigaction=define\r\n    useithreads=undef\r\n    usemultiplicity=undef\r\n    use64bitint=define\r\n    use64bitall=define\r\n    uselongdouble=undef\r\n    usemymalloc=n\r\n    default_inc_excludes_dot=define\r\n    bincompat5005=undef\r\n  Compiler:\r\n    cc='cc'\r\n    ccflags ='-march=native -fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_FORTIFY_SOURCE=2'\r\n    optimize='-O3'\r\n    cppflags='-march=native -fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'\r\n    ccversion=''\r\n    gccversion='10.1.0'\r\n    gccosandvers=''\r\n    intsize=4\r\n    longsize=8\r\n    ptrsize=8\r\n    doublesize=8\r\n    byteorder=12345678\r\n    doublekind=3\r\n    d_longlong=define\r\n    longlongsize=8\r\n    d_longdbl=define\r\n    longdblsize=16\r\n    longdblkind=3\r\n    ivtype='long'\r\n    ivsize=8\r\n    nvtype='double'\r\n    nvsize=8\r\n    Off_t='off_t'\r\n    lseeksize=8\r\n    alignbytes=8\r\n    prototype=define\r\n  Linker and Libraries:\r\n    ld='cc'\r\n    ldflags =' -fstack-protector-strong -L/usr/local/lib'\r\n    libpth=/usr/local/lib /usr/lib/gcc/x86_64-pc-linux-gnu/10.1.0/include-fixed /usr/lib /lib/../lib /usr/lib/../lib /lib /lib64 /usr/lib64\r\n    libs=-lpthread -lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc -lgdbm_compat\r\n    perllibs=-lpthread -lnsl -ldl -lm -lcrypt -lutil -lc\r\n    libc=libc-2.31.so\r\n    so=so\r\n    useshrplib=false\r\n    libperl=libperl.a\r\n    gnulibc_version='2.31'\r\n  Dynamic Linking:\r\n    dlsrc=dl_dlopen.xs\r\n    dlext=so\r\n    d_dlsymun=undef\r\n    ccdlflags='-Wl,-E'\r\n    cccdlflags='-fPIC'\r\n    lddlflags='-shared -O3 -L/usr/local/lib -fstack-protector-strong'\r\n\r\n\r\nCharacteristics of this binary (from libperl): \r\n  Compile-time options:\r\n    HAS_TIMES\r\n    PERLIO_LAYERS\r\n    PERL_COPY_ON_WRITE\r\n    PERL_DONT_CREATE_GVSV\r\n    PERL_MALLOC_WRAP\r\n    PERL_OP_PARENT\r\n    PERL_PRESERVE_IVUV\r\n    PERL_USE_DEVEL\r\n    USE_64_BIT_ALL\r\n    USE_64_BIT_INT\r\n    USE_LARGE_FILES\r\n    USE_LOCALE\r\n    USE_LOCALE_COLLATE\r\n    USE_LOCALE_CTYPE\r\n    USE_LOCALE_NUMERIC\r\n    USE_LOCALE_TIME\r\n    USE_PERLIO\r\n    USE_PERL_ATOF\r\n  Built under linux\r\n  Compiled at Aug  8 2020 23:32:13\r\n  @INC:\r\n    .\r\n    lib\r\n    ./test-installation/lib/perl5/site_perl/5.33.0/x86_64-linux\r\n    ./test-installation/lib/perl5/site_perl/5.33.0\r\n    ./test-installation/lib/perl5/5.33.0/x86_64-linux\r\n    ./test-installation/lib/perl5/5.33.0\r\n```\r\n\r\n### Operating System\r\n\r\nThe following is the output from `uname -a`.\r\n\r\n    Linux www1 5.7.9-1-MANJARO #1 SMP PREEMPT Thu Jul 16 08:20:05 UTC 2020 x86_64 GNU/Linux\r\n"},{"labels":["enhancement",null],"text":"I was trying to set GNU Stow on Windows 10 when I saw this: `The symlink function is unimplemented`.\r\nThe Windows API equivalent of symlink() is [CreateSymbolicLinkA](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinka) and [CreateSymbolicLinkW](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinkw).\r\n"},{"labels":["enhancement",null],"text":"`pod2html` outputs older XHTML that does not play nicely with modern CSS frameworks (Bootstrap, and Bulma). Also the XHTML that `pod2html` outputs includes a tag:\r\n\r\n    <?xml version=\"1.0\" ?>\r\n\r\nThat causes Firefox some grief. \r\n\r\nUpdate the tool to output HTML5 by default with an option to output XHTML with a flag (`--xhtml`)."},{"labels":["enhancement",null],"text":"I have come up with several things that I think we should do at the beginning of every cycle, and hence should be added to the RMG\r\n\r\n1) Look at deprecated XS functions and decide what to remove this cycle\r\n2) Look at other deprecations.\r\n3) Look at what can be removed from mathoms\r\n4) Look at what platforms are now candidates for removal\r\n5) Look at what features and XS functions are no longer experimental\r\n\r\nDecisions to change should be added to the milestone for this release"},{"labels":["enhancement",null,null],"text":"As described in this [article from RedHat about speeding up Python](https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/)\r\n\r\nRedHat starts compiling `python` using the `-fno-semantic-interposition` flag which is available since `gcc 5.3`.\r\nCompiling with `-fno-semantic-interposition` leads to a 30% speedup for Python.\r\n\r\nI wonder if such improvements would be true with Perl too.\r\n\r\nNotice the reduction of assembly code instructions when using `-fno-semantic-interposition`.\r\n\r\nThere are a few drawbacks in using that flag, among them using `LD_PRELOAD`.\r\n\r\nI do not think this would be an issue for Perl and XS code.\r\n\r\nI'm trying to gather some feedbacks from the community.\r\n\r\n- Any reasons we should not consider using `-fno-semantic-interposition`\r\n- Did some of you already experimented compiling Perl with this flag?\r\n- Should we consider promoting this flag as default when available?\r\n\r\nI will experiment it _soon_ and provide some benchmark metrics here later.\r\n\r\nthanks for any input.\r\n"},{"labels":["enhancement",null],"text":"Please make **while** return the last value of the last statement it executes so that the more elegant failing case below passes as well as the first?  \r\n\r\n    my @a = 2..4;\r\n    ok do {my $a; $a = pop @a while @a; $a} == 2; # Pass\r\n\r\n    my @b = 2..4;\r\n    ok do {            pop @b while @b    } == 2; # Fail\r\n"},{"labels":["enhancement",null],"text":"Please make it possible to attach information to **undef** so that, for example, the reason why the value **undef** is being returned is available if needed.  For example:\r\n\r\n    sub getFirst { return undef \"Empty List - no first element\" }\r\n\r\n    if (my $a = getFirst) {....} {elsif ($debug) {say $a} \r\n \r\n"},{"labels":["enhancement",null],"text":"Perl is one of the strongest string manipulation languages around. Somehow Perl lacks a `trim()` function in CORE to remove white space. All modern string based languages have something similar: [PHP](https://www.php.net/manual/en/function.trim.php), [Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim), [Ruby](https://ruby-doc.org/core-2.7.1/String.html#method-i-strip), [Raku](https://docs.raku.org/routine/trim), and [Python](https://www.journaldev.com/23625/python-trim-string-rstrip-lstrip-strip). Can Perl please have one too? \r\n\r\nI propose adding `trim()` to CORE for the next release of Perl.\r\n\r\nRelevant [Reddit converstion](https://www.reddit.com/r/perl/comments/hf3jlx/announcing_perl_7/fvwos56/) on the topic."},{"labels":["enhancement",null],"text":"As part of my ongoing thoughts about a core try/catch syntax, I have been thinking more about the plain string exceptions that core perl throws. It continues to feel weird when designing a nice `try/catch` with typed dispsatch, that all core exceptions are only plain strings.\r\n\r\nIt would be nice, for the purposes of typed catch, if we could somehow distinguish different types of core-thrown exception, so as not to have to have such ugly string matching as\r\n\r\n```perl\r\n  try { $maybeobj->do_thing }\r\n  catch ($e) {\r\n    return if $e =~ m/^Can't call method \\\"do_thing\\\" on an undefined value /;\r\n  }\r\n```\r\n\r\nWith some native type attached to these exceptions we could do other fun things like asking the file/line/package/etc.. of where they were thrown from too.\r\n\r\nAs usual with these design cases we can often start by looking at CPAN for inspiration, but as usual all of CPAN necessarily comes upon the limitation of what is *currently* possible in Perl. They all fall short here, because any of the exception type systems on CPAN by necessity have to be implemented as some sort of blessed object, and thus\r\n\r\n```perl\r\n  ref $@\r\n```\r\n\r\nbecomes true; whereas this has always been false for a core-thrown stringy exception type. I feel that if we want to have better\r\ninformation around exceptions in core perl we need to be careful not to break the vast amount of existing code which is expecting this condition to hold.\r\n\r\n(this also posted to perl5-porters@ as https://www.nntp.perl.org/group/perl.perl5.porters/2020/07/msg257948.html)"},{"labels":["enhancement",null],"text":"(copied from https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257611.html )\r\n\r\nI'm trying to simplify the design of a `try/catch` syntax out of [Syntax::Keyword::Try](https://metacpan.org/pod/Syntax::Keyword::Try) so it can be moved into core perl. One thing I think we can get rid of is the `finally` keyword, in favour of instead inventing a new `LEAVE` phaser block, similar to the Raku ones.\r\n\r\nIn summary: I'd like to add `LEAVE` with syntax which looks like another phaser such as `END`, but runs at the time you leave the block it is placed in:\r\n\r\n```perl\r\n  sub f {\r\n    print 1;\r\n    LEAVE { print 3; }\r\n\r\n    print 3;\r\n  }\r\n\r\n  f();\r\n```\r\n\r\nWill output\r\n\r\n    123\r\n\r\nFurthermore, a LEAVE phaser inside something like a `foreach` loop would run every time you leave the block in order to run a new one:\r\n\r\n```perl\r\n  foreach (qw( a b c )) {\r\n    print \"Start($_)\";\r\n    LEAVE { print \"End($_)\"; }\r\n\r\n    more code here...\r\n  }\r\n```\r\n\r\nwill output\r\n\r\n    Start(a)End(a)Start(b)End(b)Start(c)End(c)\r\n\r\nSeems simple enough.\r\n\r\nIt is important to note that a LEAVE block is similar to an END block, in that the mere presence of that syntax is enough to queue it for being run, regardless of whether the line of code it's on was actually \"reached\". Thus, just as in\r\n\r\n```perl\r\n  exit 0;\r\n  END { say \"Ending the program now\" }\r\n```\r\n\r\nstill prints, so too would\r\n\r\n```perl\r\n  sub f {\r\n    return;\r\n    LEAVE { say \"Leaving the function now\" }\r\n  }\r\n```\r\n\r\nIf we had a LEAVE phaser (totally independent of any thoughts of try/catch), it reduces the scope of that work considerably and makes it easier to work out how to implement.\r\n\r\nThoughts?"},{"labels":["enhancement",null],"text":"Please provide a pragma to remove sigils from Perl as the new ->@* and ->%*\r\noperators enable arrays and hashes to be manipulated entirely through scalar\r\nreferences making the use of sigils moot line noise.\r\n"},{"labels":["enhancement",null],"text":"Please provide a pragma to swap the '->' and '.' operators.\r\n\r\nEach user should be allowed to customize the syntax of the Perl language they\r\nuse through the use of pragmata to meet their own unique needs with default\r\nsetting for each user held externally in .pragmata.perl to avoid repetition. No\r\nother language has such a powerful capability.\r\n\r\n"},{"labels":["enhancement",null],"text":"Can we change Perl 7 to stop requiring modules to return true?\r\n\r\nI [wrote](https://www.perl.com/article/patching-perl-loading-modules-that-return-false/) about this previously:\r\n\r\n> I don’t find this feature useful: if a module fails to initialize, it could call die with a meaningful error message, instead of returning false and Perl croaking with a generic message. I would wager that the majority of the time this exception is encountered, it’s because the programmer forgot to append a true value to their module code. If one ethos of Perl is optimizing for the common case, croaking on require returning false doesn’t seem to fit.\r\n\r\nModule authors are free to continue appending `1;` to their modules, and they will continue to work; Perl won't just *demand* it anymore :)\r\n\r\nFor the rare cases where authors depend on that behavior, it could be implemented as a feature which could be enabled by default in Perl 7. That is how I did it in the article.\r\n\r\nIf we agree this is an appropriate change, I'm happy to rebase and submit a PR but wanted to ask first.\r\n\r\nThanks\r\n\r\n"},{"labels":["enhancement",null],"text":"I have written a script that compares filesystem timestamps, like GNU Make does. The trouble is, a resolution of 1 second is too low for my liking.\r\n\r\nLinux syscall **stat**, and its glibc wrapper, provide nanosecond resolution. I believe that Windows' NTFS stores timestamps with nanosecond resolution too. I think it is safe to say that nanosecond resolution in filesystems is mature and here to stay.\r\n\r\nIn Perl, you have Time::HiRes::stat(), which has 2 issues:\r\n\r\n1) It unconditionally goes through a localtime conversion. This is problematic because some local times are ambiguous due to summer time changes.\r\n\r\n2) You get a floating-point value back, which is problematic due to precision issues when comparing with other timestamps. And you do not actually know what resolution the time actually has.\r\n\r\nIt would be nice if Perl provided access to the timestamps:\r\na) As UTC.\r\nb) In nanosecond resolution.\r\nc) As an integer.\r\n"},{"labels":["enhancement",null],"text":"Copying large files effectively flushes the Linux filesystem cache, which has an impact on the overall system performance. I have written about this in the past:\r\n\r\n[The Linux Filesystem Cache is Braindead](http://rdiez.shoutwiki.com/wiki/Today%27s_Operating_Systems_are_still_incredibly_brittle#The_Linux_Filesystem_Cache_is_Braindead)\r\n\r\nOne way to workaround this issue is to call posix_fadvise( POSIX_FADV_NOREUSE ) . Unfortunately, Perl does not provide easy access to this routine. You need to download an extra module like Sys::PageCache. But that module uses mincore, which looks specific to Linux.\r\n\r\nI would like to see this routine accessible through the POSIX core module. After all, that call is defined in the POSIX standard. This way, it should be available on many more platforms than just Linux."},{"labels":["enhancement"],"text":"On casual inspection, I observe that most uses of `SAVEt_STRLEN` save a small integer value, quite often zero:\r\n\r\n```\r\nPL_savestack:\r\n  [91] SAVEt_I32_SMALL: i=7843 ptr=0x560e0ca5ba7c\r\n  [89] SAVEt_COMPILE_WARNINGS: pv=0x560e0d320be0\r\n  [87] SAVEt_HINTS: hints=1c0207e2 ptr=0x560e0d12d880 hv=0x560e0ca5e3f8\r\n  [83] SAVEt_STRLEN: iv=0 ptr=0x560e0ca5bbc0\r\n  [80] SAVEt_STRLEN: iv=0 ptr=0x560e0ca5baa0\r\n  [77] SAVEt_STRLEN: iv=0 ptr=0x560e0ca5bba8\r\n  [74] SAVEt_STRLEN: iv=0 ptr=0x560e0ca5bba0\r\n  [71] SAVEt_STRLEN: iv=0 ptr=0x560e0ca5baa8\r\n  [68] SAVEt_ITEM: sv=0x560e0ca5e350 sv=0x560e0d3bda48\r\n  [65] SAVEt_GENERIC_SVREF: svp=0x560e0ca5b378 sv=0x560e0ca5e338\r\n```\r\n\r\nWe could gain a little memory performance improvement by implementing a `SAVEt_STRLEN_SMALL` type, akin to the `INT_SMALL` and `I32_SMALL` ones, which keeps small integer values in the type/leader item's UV field, saving the need for a whole stack entry for it.\r\n\r\nThis would be a fairly low-value priority, but would be a simple addition to make while working around the savestack to fix #17895 anyway."},{"labels":["enhancement",null],"text":"This will be a somewhat contentious issue and I'll be a bit pedantic at times for those reading this ticket but don't understand all of the issues involved (that includes myself). In particular, I'm going to give a long, rambling justification which I'm sure P5P doesn't need, but it's here to give background to everyone else reading this.\r\n\r\n# TL;DR\r\n\r\nWe need to to standardize our type syntax and semantics.\r\n\r\n(And yes, `TL;DR`s need to be at the top of documents, not the bottom)\r\n\r\n# Typed Signatures\r\n\r\nDave Mitchell has been doing awesome work on subroutine signatures, something that is long overdue in the language (I honestly expected them as part of the Perl 6 project back in 2000). \r\n\r\nPart of his proposal deals with [types in signatures](https://www.nntp.perl.org/group/perl.perl5.porters/2019/11/msg256683.html).  The proposal is impressive and, from the synopsis, we have this:\r\n\r\n    sub f(\r\n            $self isa Foo::Bar,         # croak unless $self->isa('Foo::Bar');\r\n            $foo  isa Foo::Bar?,        # croak unless undef or of that class\r\n            $a!,                        # croak unless $a is defined\r\n            $b    is  Int,              # croak if $b not int-like\r\n            $c    is  Int?,             # croak unless undefined or int-like\r\n            $d    is PositiveInt,       # user-defined type\r\n            $e    is Int where $_ >= 1, # multiple constraints\r\n            $f    is \\@,                # croak unless  array ref\r\n            $aref as ref ? $_ : [ $_ ]  # coercions: maybe modify the param\r\n    ) { ...};\r\n\r\nInterestingly, [the very first response](https://www.nntp.perl.org/group/perl.perl5.porters/2019/12/msg256710.html) starts with this:\r\n\r\n> Yuck.  This is a huge amount of new syntax to add.  The new syntax doesn't\r\n> pull its weight, given that it can only be used in this one context.  If you're\r\n> adding a bunch of syntax for type constraints, it should also be available for\r\n> type checking purposes outside signatures.\r\n\r\nThere are a number of interesting comments about the proposal, but I want to focus on my primary concern: \"type checking purposes outside signatures\".\r\n\r\n# Long, Rambling Justification\r\n\r\nWhen I work on large systems, one of the most frequent bugs I encounter is when data X is passed from `foo()` to `bar()` to `baz()` to `quux()` and while `quux()` was _expecting_ an integer, it received something that was _not_ an integer.\r\n\r\nIf I'm very lucky, the code dies a horrible death and I have to walk back through the call chain to figure out exactly where the bad data originated and frankly, I'd rather rip out my intestines with a fork than have to do that _again_.\r\n\r\nIf I'm really unlucky, however, the code doesn't die. Instead, it just silently gives terribly bad, wrong, no good rubbish. And no warning at all that something has gone wrong.\r\n\r\n```\r\n$ perl -Mstrict -Mwarnings -E 'say [] + 1'\r\n140473498905217\r\n```\r\n\r\nOh, that's not good. So let me validate my argument with a regex!\r\n\r\n```\r\n$ perl -Mstrict -Mwarnings -E 'say [] =~ /\\d/ ? \"Kill me now\" : \"Whew!\"'\r\nKill me now\r\n```\r\n\r\nAh, so I need to be more careful.\r\n\r\n```\r\nperl -Mstrict -Mwarnings -E 'my $d = []; say defined $d && !ref $d && $d =~ /\\d/ ? \"Kill me now\" : \"Whew!\"'\r\nWhew!\r\n```\r\n\r\nOK, that's better. Finally I'm safe.\r\n\r\n```\r\nperl -CAS -Mstrict -Mwarnings -E 'my $d = chr(43270); say defined $d && !ref $d && $d =~ /\\d/ ? \"Kill me now: $d \" : \"Whew!\"'\r\nKill me now: ꤆\r\n```\r\n\r\nI don't even know what `꤆` is (Google tells me it's part of the Paris metro line, but I'm a wee bit skeptical on that), but I know I forgot the `/a` switch on my regex. And I'll bet most casual Perl developers don't know about the `/a` switch and I know for a fact that most large systems don't try to validate their types because it's a pain, it's more grunt work, and it's fraught with error. Or as I like to say \"It'̸s ̴a pai̶n, ͝it͏'͠s͢ ̛m͞o҉ré grun͝t̕ ̴w̛ork, a̸nd ̧it's͘ f́ra̛ught wi̧th ̴er̕r̴o̷r̵.\"\r\n\r\nSo I applaud David's work, but then there's Cor.\r\n\r\n# Cor Types\r\n\r\nAs many of you know, [Cor](https://github.com/Ovid/Cor/wiki) is intended to be the new object system for the Perl core. If you don't want to wade through the wiki, [you can watch this talk I gave on Cor](https://www.youtube.com/watch?v=Tst-vs4Br2A).\r\n\r\nOne thing I briefly touched on and didn't get in to, is typing. So, here's a pointless Python `Point` class to illuminate this point:\r\n\r\n```python\r\nclass Point:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def inverse(self):\r\n        return Point(self.y,self.x)\r\n\r\npoint = Point(7,3.2).inverse()\r\nprint(point.x)\r\npoint.x = \"foo\"\r\nprint(point.x)\r\n```\r\n\r\nAs you can see, at the end, I set `x` to the string \"foo\". How can I prevent that when working on a million-line code base? Well, according to Pythonistas, [it's \"unpythonic\" to validate your arguments](https://www.reddit.com/r/Python/comments/91q2op/trying_to_understand_pythonic_classes/).  Even Perl developers, largely via the Moo/se family of OO, seem to have grudgingly admitted that yeah, asserting your types isn't such a bad thing.\r\n\r\nSo while Dave Mitchell's been thinking about types in signatures, I've been thinking about them in Cor. Here's the above point class, with almost identical behavior:\r\n\r\n```perl\r\nclass Point {\r\n    has ($x, $y) :reader :writer :new :isa(Num);\r\n\r\n    method inverse() {\r\n        return Point->new( x => $y, y => $x );\r\n    }\r\n}\r\n```\r\n\r\nExcept in the Cor world, calling `$point->x(\"foo\")` would generate a runtime error, just as it would with Moo/se code. In the above, we have \"slots\" (instance data) declared with `has`. The attributes merely provide sugar for common things we need in OO systems. Thus, `:isa(Num)` provides my run time type checking.\r\n\r\nAnd that brings me to the next problem.\r\n\r\n# SYNTAX\r\n\r\nTraditionally, we tend to see types defined in front of the variables, such as declaring an integer in C: `int c`. In Dave's proposal, it's after the variable: `$c is Int`. In Cor, we have `has $c :isa(Int)`. Of course, there's also this loveliness:\r\n\r\n```\r\n$ perl -E 'package Int {} my Int $c = \"Not an Int\"; say $c'\r\nNot an Int\r\n```\r\n\r\nBut that syntax has been with us for years and is largely ignored and if we want to attach additional semantics to the type (e.g., coercions), having it after the variable instead of before is probably a good idea.\r\n\r\nIn short, optional typing in Perl is long overdue, it's planned for signatures, it's planned for Cor, and eventually someone will want to write:\r\n\r\n```\r\npackage Foo {\r\n    my $c :isa(Int) = 3;\r\n    # or\r\n    my $c is Int = 3;\r\n    # or\r\n    ...\r\n}\r\n```\r\n\r\nBut if we have types, we desperately need to ensure that \"there's more than one way to do it\" doesn't apply (sorry, Perlers!). Because if signatures use one type syntax, Cor uses another, and regular variables possibly use one _or_ the other (heaven forbid we get a third!), then it's going to be a confusing mess that frankly, I don't want to try to deal with.\r\n\r\nAnd then there's this bit from Dave's proposal:\r\n\r\n```\r\n$e is Int where $_ >= 1, # multiple constraints\r\n```\r\n\r\nI quite like that, but I'm unsure how I would fit the constraints into Cor's syntax. That being said, Cor provides additional behavior to class slots via attributes and it might be a touch disappointing to have an exception here (but I'd live with it).\r\n\r\n# SEMANTICS\r\n\r\nSyntax is nice, but the meaning of the syntax is important. For example, I think we can agree that for a type system, an integer shouldn't match `꤆`, even if `/d/` does. But what does `my $c :isa(Int) = -7/3;` produce?\r\n\r\n```c\r\n#include <stdio.h>\r\nint main() {\r\n   int c = -7/3;\r\n   printf(\"%d\",c);\r\n   return 0;\r\n}\r\n```\r\n\r\nThe above C code compiles without a warning and prints -2. Perl, historically, doesn't do the \"integer math\" stuff and tries to avoid throwing away information:\r\n\r\n```\r\n$ perl -E 'say -7/3'\r\n-2.33333333333333\r\n```\r\n\r\nThis is in sharp contrast to other dynamic languages which often get this spectacularly wrong:\r\n\r\n```\r\n$ ruby -e 'puts -7/3'\r\n-3\r\n```\r\n\r\nSo, what does Perl do with `my $c :isa(Int) = -7/3;`? Should it just throw away the extra data? Should it be an error? Should it be a warning? Should the type be ignored?\r\n\r\nAnd I'm not even going to try to figure out a type hierarchy right now, but an Int is a Num while the reverse isn't true. However, we'll need one well-defined and standardized, along with an extension mechanism."},{"labels":["enhancement",null],"text":"Please do not implement any specific Object Oriented Class system because in Perl there is always more then one way to do it - it  is our bulwark against the tyranny of other languages.  A set of orthogonal capabilities which allow the construction of many different such systems would fit better with our long tradition of diversity.\r\n"},{"labels":["enhancement",null],"text":"Please provide a pragma (enabled by default in Perl 8 and onwards) that allows me to write % for a hash look up and @ for an array look up as in:\r\n\r\nmy %a = (a=>1, b=>2};\r\nmy  $a = a % b;              # $a == 2 \r\n\r\nmy @a = map {$_**2} 1..3;\r\nmy $b = a @ 2;   # $b == 4\r\n\r\nThese improvements would reduce line noise which is one reason why people prefer more \"modern\" languages."},{"labels":["enhancement",null],"text":"Please make semi colons optional as in Javascript via a suitable pragma enabled by default in Perl 8 and onwards?\r\n"},{"labels":["enhancement",null],"text":"People are going to want different sets of pragmas enabled/disabled by default in Perl 7 or Perl 32 (which I like a lot better). Why not have a Perl configuration file that allows each user to choose their own ideal set rather than forcing a specific set on every-one which individuals will resent as it will remind them far too much of the python approach? \r\n\r\n"},{"labels":["enhancement",null],"text":"Hi Perl:\r\n\r\nI wish to define new operators with user defined precedence, just as one can in Algol 68, as opposed  to merely overloading existing operators as one currently does in Perl.  As an example: \r\n\r\n op ► 5 {my ($left, $right) = @_;  return $left->{$right}} \r\n\r\nmy $c = $a►$b;\r\n\r\nThis would give Perl a capability that no other modern language has that would engender new user enthusiasm.  Without it, our currents turn awry and we lose the name of action.\r\n\r\nPlease tell me whether you can do this?\r\n\r\nThanks,\r\n\r\nPhil"},{"labels":["enhancement",null],"text":"There's presently only two options for adding paths to `@INC`, and both of them are unsuitable for my use.\r\n\r\nKeep in mind, this is in a context where I'm already well aware of how ABI works, and I'm quite capable of deciding what is, and what isn't, a valid directory to put in `@INC` myself.\r\n\r\n### Current Option -Dinc_version_list \r\n\r\nThis is useless, because it takes what you pass it as a suggestion, and then internally mangles it, giving a different output than was asked for.\r\n\r\nOn one build, I passed:\r\n```\r\n-Dinc_version_list=5.30.3/x86_64-linux 5.30.3 5.30.2/x86_64-linux 5.30.2 5.30.0/x86_64-linux 5.30.0 5.24.0 5.22.2 5.16.0 5.12.10 5.12.4 5.8.0 \r\n```\r\nWith the intent on building a perl with its INSTLIB being \"/usr/lib64/perl5/5.30\" (or something like that, not the intentionally missing trailing digit ), and something \"clever\" in Perl gives me this:\r\n\r\n```\r\n/etc/perl\r\n/usr/local/lib64/perl5/5.30/x86_64-linux\r\n/usr/local/lib64/perl5/5.30\r\n/usr/lib64/perl5/vendor_perl/5.30/x86_64-linux\r\n/usr/lib64/perl5/vendor_perl/5.30\r\n/usr/local/lib64/perl5/5.30\r\n/usr/lib64/perl5/vendor_perl/5.30\r\n/usr/lib64/perl5/5.30/x86_64-linux\r\n/usr/lib64/perl5/5.30\r\n```\r\n\r\n- the first of those is injected by a perl.c patch\r\n- lines 2 through to 5 seem sensible\r\n- and after that it becomes sheer nonsense with including the same paths *twice*, explicitly the versions I *didnt* ask for, where the versions I *did* ask for were lost. \r\n\r\nAnd importantly, this strategy seems impossible to use to build perl's for to explicitly include directories that *dont* exist on your system, because you know they *do* exist on the deployment system(s).\r\n\r\nBut the TL;DR version is \"Perl is trying to be too clever\", I could unpick that clever and work out where its going wrong, but I don't have the patience to bash my head into that wall, I just need something that listens to what I say and does it exactly how I said to do it, regardless of how foolish that may be.\r\n\r\n### Current option -Dotherlibdirs\r\nThis, is differently useless, in that although it does allow you to build with support for directories that don't exist, ... it then gets extra clever and decides to tack on archlib dirs to it.\r\n\r\nWhich is expressly something I *dont* want to do, and didn't ask for.\r\n\r\nThe *objective* here is to use these dirs as a \"last resort backup plan\", so that during upgrades, all *pureperl* packages that have yet to be reinstalled into the \"new perl's\" INSTDIR continue to work as best as possible (because sometimes, the package manager gets build order wrong and tries to use things that rely on things that are effectively broken by the upgrade of perl, due to falling outside of `@INC`, and as much as I try, there is nothing I can do to make that problem go away, other than to make perl less likely to break in that situation ). And yes, that could break when there are XS deps in the loop, and that's an understood caveat. But it would be better to *not* have those XS deps in the loadable path, and it would be better for perl to croak with a \"can't find XS module foo\" ( which may even safe-fail inside an eval ), than to have perl try to load a binary object with incompatible ABI.\r\n\r\n### My bodgearound\r\n\r\nSo, what I've hacked together instead, is this terrible bodge, because I don't fully understand the mess of C and Configure involved. But it works! \r\n\r\n```diff\r\nFrom 7572be1afb16621a537e9da02f96cf04cb10b655 Mon Sep 17 00:00:00 2001\r\nFrom: Kent Fredric <kentnl@gentoo.org>\r\nDate: Sat, 20 Jun 2020 22:14:22 +1200\r\nSubject: Add support for -Dgentoolibdirs\r\n\r\nWhich just adds the libdirs verbatim in the right place without\r\nhaving perl molest it in the process.\r\n---\r\n Configure        | 26 ++++++++++++++++++++++++++\r\n config_h.SH      |  5 +++++\r\n perl.c           |  1 +\r\n perl_inc_macro.h |  8 ++++++++\r\n uconfig.sh       |  1 +\r\n 5 files changed, 41 insertions(+)\r\n\r\ndiff --git a/Configure b/Configure\r\nindex cef8c3c078..77258e8f43 100755\r\n--- a/Configure\r\n+++ b/Configure\r\n@@ -1181,6 +1181,8 @@ orderlib=''\r\n ranlib=''\r\n d_perl_otherlibdirs=''\r\n otherlibdirs=''\r\n+gentoolibdirs=''\r\n+d_gentoolibdirs=''\r\n package=''\r\n spackage=''\r\n pager=''\r\n@@ -8101,6 +8103,28 @@ esac\r\n set d_perl_otherlibdirs\r\n eval $setvar\r\n \r\n+case \"$gentoolibdirs\" in\r\n+''|' ') dflt='none' ;;\r\n+*) dflt=\"$gentoolibdirs\" ;;\r\n+esac\r\n+$cat <<EOM\r\n+Enter a colon-seperated list of explicit gentoo paths to stuff in @INC\r\n+unmolested, or enter 'none' for no extra paths\r\n+\r\n+EOM\r\n+rp='Colon-seperated list of gentoo-specific perl library search dirs?'\r\n+. ./myread\r\n+case \"$ans\" in\r\n+' '|''|none) gentoolibdirs=' ';;\r\n+*) gentoolibdirs=\"$ans\" ;;\r\n+esac\r\n+case \"$gentoolibdirs\" in\r\n+' ') val=$undef ;;\r\n+*) val=$define ;;\r\n+esac\r\n+set d_gentoolibdirs\r\n+eval $setvar\r\n+\r\n : DTrace support\r\n dflt_dtrace='/usr/sbin/dtrace'\r\n $test -x /usr/bin/dtrace && dflt_dtrace='/usr/bin/dtrace'\r\n@@ -24402,6 +24426,7 @@ d_openat='$d_openat'\r\n d_pathconf='$d_pathconf'\r\n d_pause='$d_pause'\r\n d_perl_otherlibdirs='$d_perl_otherlibdirs'\r\n+d_gentoolibdirs='$d_gentoolibdirs'\r\n d_phostname='$d_phostname'\r\n d_pipe2='$d_pipe2'\r\n d_pipe='$d_pipe'\r\n@@ -24937,6 +24962,7 @@ orderlib='$orderlib'\r\n osname='$osname'\r\n osvers='$osvers'\r\n otherlibdirs='$otherlibdirs'\r\n+gentoolibdirs='$gentoolibdirs'\r\n package='$package'\r\n pager='$pager'\r\n passcat='$passcat'\r\ndiff --git a/config_h.SH b/config_h.SH\r\nindex 08c5923ef8..5563082969 100755\r\n--- a/config_h.SH\r\n+++ b/config_h.SH\r\n@@ -1308,6 +1308,11 @@ sed <<!GROK!THIS! >$CONFIG_H -e 's!^#undef\\(.*/\\)\\*!/\\*#define\\1 \\*!' -e 's!^#un\r\n  */\r\n #$d_perl_otherlibdirs PERL_OTHERLIBDIRS \"$otherlibdirs\"\t\t/**/\r\n \r\n+/* GENTOO_LIBDIRS:\r\n+ * Like PERL_OTHERLIBDIRS, but doesn't stuff ARCH dirs in when not wanted\r\n+ */\r\n+#$d_gentoolibdirs GENTOO_LIBDIRS \"$gentoolibdirs\"\t\t/**/\r\n+\r\n /* PRIVLIB:\r\n  *\tThis symbol contains the name of the private library for this package.\r\n  *\tThe library is private in the sense that it needn't be in anyone's\r\ndiff --git a/perl.c b/perl.c\r\nindex 2013a76026..62e67cfaa2 100644\r\n--- a/perl.c\r\n+++ b/perl.c\r\n@@ -4750,6 +4750,7 @@ S_init_perllib(pTHX)\r\n     INCPUSH_ARCHLIB_EXP\r\n     INCPUSH_PRIVLIB_EXP\r\n     INCPUSH_PERL_OTHERLIBDIRS\r\n+    INCPUSH_GENTOO_LIBDIRS\r\n     INCPUSH_PERL5LIB\r\n     INCPUSH_APPLLIB_OLD_EXP\r\n     INCPUSH_SITELIB_STEM\r\ndiff --git a/perl_inc_macro.h b/perl_inc_macro.h\r\nindex 5a2f20dfae..4b69b39199 100644\r\n--- a/perl_inc_macro.h\r\n+++ b/perl_inc_macro.h\r\n@@ -143,6 +143,14 @@\r\n \t\t      INCPUSH_ADD_OLD_VERS|INCPUSH_CAN_RELOCATE);\r\n #endif\r\n \r\n+#ifdef GENTOO_LIBDIRS\r\n+# define INCPUSH_GENTOO_LIBDIRS S_incpush_use_sep(aTHX_ STR_WITH_LEN(GENTOO_LIBDIRS), \\\r\n+    INCPUSH_ADD_OLD_VERS|INCPUSH_CAN_RELOCATE);\r\n+#endif\r\n+#ifndef INCPUSH_GENTOO_LIBDIRS\r\n+# define INCPUSH_GENTOO_LIBDIRS\r\n+#endif\r\n+\r\n #ifdef PERL_OTHERLIBDIRS\r\n #\tdefine INCPUSH_PERL_OTHERLIBDIRS_ARCHONLY  S_incpush_use_sep(aTHX_ STR_WITH_LEN(PERL_OTHERLIBDIRS), \\\r\n \t\t      INCPUSH_ADD_OLD_VERS|INCPUSH_ADD_ARCHONLY_SUB_DIRS|INCPUSH_CAN_RELOCATE);\r\ndiff --git a/uconfig.sh b/uconfig.sh\r\nindex 1d4a0f4a57..fba825acad 100644\r\n--- a/uconfig.sh\r\n+++ b/uconfig.sh\r\n@@ -185,6 +185,7 @@ d_futimes='undef'\r\n d_gai_strerror='undef'\r\n d_gdbm_ndbm_h_uses_prototypes='undef'\r\n d_gdbmndbm_h_uses_prototypes='undef'\r\n+d_gentoolibdirs='undef'\r\n d_getaddrinfo='undef'\r\n d_getcwd='undef'\r\n d_getespwnam='undef'\r\n-- \r\n2.27.0\r\n\r\n```\r\n\r\nThe important part being `INCPUSH_ADD_OLD_VERS|INCPUSH_CAN_RELOCATE` *without* `ADD_ARCHONLY_SUBDIRS`\r\n\r\nAnd the end result?\r\n\r\n```\r\n        /etc/perl\r\n        /usr/local/lib64/perl5/5.30/x86_64-linux\r\n        /usr/local/lib64/perl5/5.30\r\n        /usr/lib64/perl5/vendor_perl/5.30/x86_64-linux\r\n        /usr/lib64/perl5/vendor_perl/5.30\r\n        /usr/lib64/perl5/5.30/x86_64-linux\r\n        /usr/lib64/perl5/5.30\r\n        /usr/lib64/perl5/vendor_perl/5.30.3/x86_64-linux\r\n        /usr/lib64/perl5/vendor_perl/5.30.3\r\n        /usr/lib64/perl5/vendor_perl/5.30.2/x86_64-linux\r\n        /usr/lib64/perl5/vendor_perl/5.30.2\r\n        /usr/lib64/perl5/vendor_perl/5.30.0/x86_64-linux\r\n        /usr/lib64/perl5/vendor_perl/5.30.0\r\n        /usr/lib64/perl5/5.24.0\r\n        /usr/lib64/perl5/5.16.0\r\n        /usr/lib64/perl5/5.12.4\r\n```\r\n\r\nAnd this is superior in every way to the options presently made available by configure.\r\n\r\n\r\n#### Footnote\r\n\r\nYes, some of this drama precipitates due to having 2 different version schemes in employ for the layout.\r\nFull version 5.x.y is the standard pattern, and 5.x is something I'm simply experimenting with, because *other* problems have reared there head lately due to the aforementioned \"oh noes, I can't specify directories that don't exist and have them work\" issue.\r\n\r\neg:\r\n1. Bob builds a binary package of perl 5.30.1 and publishes it\r\n2. Bob builds a binary package of Foo-1.0 against perl 5.30.1 and publishes it, (embedding the 5.30.1 specific path in the package ).\r\n3. Alice builds a binary package of perl 5.30.2, on a system without any hint of 5.30.1 and publishes it.\r\n4. Mary installs Alices copy of Perl 5.30.2 from the binary package\r\n5. Mary installs Bobs binary package of Foo-1.0\r\n6. Foo-1.0 is now entirely unable to be used. _EVEN THOUGH_ it is fully ABI inter-compatible with their current perl, due to the tiny quirk about `@INC` handling being terrible.\r\n\r\nBut at least in my case, one _can_ be confident that we have the tools to automatedly determine the right paths, in advance, explicitly, and all that's needed is a good way to throw them over to perl without it getting \"special\" and undoing our work.\r\n\r\nPerhaps something better than my crude hack can be employed.\r\n\r\n"},{"labels":["enhancement"],"text":"When writing Perl, I almost always fatalize warnings in the \"uninitialized\" category. Consider the following:\r\n\r\n```\r\n$ perl -Mwarnings -e 'sub f { my %p = @_; \"$p{wrong_key}\"; }; f()'\r\nUse of uninitialized value $p{\"wrong_key\"} in string at -e line 1.\r\n```\r\n\r\nThis is a good warning. Now, consider the following:\r\n\r\n```\r\n$ perl -Mwarnings -e 'sub f { my %p = @_; map { \"$p{$_}\" } qw/wrong_key/; }; f()'\r\nUse of uninitialized value within %p in string at -e line 1.\r\n```\r\n\r\nThis is a poor warning because it does not reveal the value of the key that was used to resolve the undefined value.\r\n\r\nNote that this ambiguity only arises where the key does not exist.\r\n\r\n```\r\n$ perl -Mwarnings -e 'sub f { my %p = @_; map { \"$p{$_}\" } qw/key_for_undef/; }; f(key_for_undef => undef)'\r\nUse of uninitialized value $p{\"key_for_undef\"} in string at -e line 1.\r\n```\r\n\r\nMy wish is that the offending key is reported in all cases."},{"labels":["enhancement",null,null],"text":"Perl has an _integer_ pragma, which directs the compiler to use integer operations from the point of use to the end of the enclosing BLOCK. Besides the user-visible behaviour, described at https://perldoc.perl.org/integer.html, perl will then use integer-specific versions of various operators. (e.g. `pp_i_add`, rather than the general purpose `pp_add`.) \r\n\r\nA useful feature might be a corresponding _float_ pragma, to force the compiler to use floating point operations. \r\n\r\nThis would entail the likes of:\r\n- Modifying the parser/lexer (?) to recognise the pragma\r\n- Adding new floating point ops\r\n- Adding new tests\r\n- All the fixups and regens that go with the above.\r\n\r\nBenefits to users who want this:\r\n-  Improved operator performance (no attempts to first convert operands to IV/UV values before falling back to floating point operations)\r\n- Fewer unnecessary upgrades of the underlying SV (see #17777 for some discussion)"},{"labels":["enhancement"],"text":"I'm reading the Perl Cookbook at the moment and I was a little surprised to learn that the low precedence defined or (proposed as `err` or `dor`) never made it past [Perl 5.9](https://metacpan.org/pod/release/RGARCIA/perl-5.9.4/lib/feature.pm#the-'err'-feature) without any apparent reason.\r\n\r\nI found this [Perl Monks](https://www.perlmonks.org/?node_id=660524) discussion that points to a long mailing list [thread](http://www.nntp.perl.org/group/perl.perl5.porters/2007/09/msg128170.html) which more or less concludes that the `err` keyword was ambiguous and confusing to newcomers, but what about `dor`? `dor` seems to be the right keyword.\r\n\r\nPerl Monks also added that this operator was included in Raku as [orelse](https://docs.raku.org/routine/orelse) (also doing `$_` aliasing).\r\n\r\nIn my opinion the name `orelse` is more confusing than `dor`, but ignoring this personal preference, is there any reason why this operator was never (re-)added to Perl?\r\n\r\nCurrently under `use warnings` a warning is issued here:\r\n\r\n```perl\r\nuse warnings;\r\n\r\nmy $n = <DATA> or die;  # Value of <HANDLE> construct can be \"0\"; test with defined()\r\nprint $n;\r\n\r\n__DATA__\r\ntest\r\n```\r\n\r\nbut not with `getc`:\r\n\r\n```perl\r\nuse warnings;\r\n\r\nmy $n = getc DATA or die;  # No warning, it just dies\r\nsay $n;\r\n\r\n__DATA__\r\n0123\r\n```\r\n\r\nSo that you are forced to use `defined()` when `dor` would be cleaner without the edge cases you can find with `//` due to its precedence:\r\n\r\n```perl\r\nuse warnings;\r\n\r\ndefined(my $n = <DATA>) or die;  # No warning but less readable\r\nprint $n;\r\n\r\nmy $p = <DATA> // die;           # No warning and for this case you can forgo the parentheses \r\nprint $p;\r\n\r\n($p = <DATA>) // $n = 'test';    # But you'll have to remember the parentheses when the precedence requires it,\r\n                                 # and for both parts or: Can't modify defined or (//) in scalar assignment\r\nprint $p;\r\n\r\nmy $d = <DATA> dor die;          # More readable\r\nprint $d;\r\n\r\n$d = <DATA> dor $n = 'test';     # And does what you want\r\nprint $d;\r\n\r\n__DATA__\r\ntest1\r\ntest2\r\ntest3\r\ntest4\r\ntest5\r\n```"},{"labels":["enhancement"],"text":"Quoting @dur-randir from #17747:\r\n\r\n> I think that the route forward should be at least to introduce an actual panic() function into core, that terminates program regardless on compilation flags - since the interpreter has encountered an inconsistency in it's internal state."},{"labels":["enhancement",null],"text":"Two days ago I spent quite some time debugging this code:\r\n\r\n```perl\r\n# a lot of code\r\n\r\nmy $num = 0;\r\n\r\n# more code\r\n\r\nsub test {\r\n    # complex function\r\n\r\n    return (my $num = shift) ? $num : 0;\r\n}\r\n\r\n# ...\r\n\r\nsay test 4;  # 0\r\n\r\n# ...\r\n```\r\n\r\nWhen I found the bug I initially thought that the issue was related to the ternary operator. But after creating an issue (#17795) I learned that you cannot use variables on the same expression they are declared, excerpt shared by @Grinnz from the [documentation](https://perldoc.perl.org/perlsub.html#Private-Variables-via-my()):\r\n> The declared variable is not introduced (is not visible) until after the current statement.\r\n\r\nCurrently these will generate a compilation error under `strict` (`Global symbol \"$n\" requires explicit package name`) and a warning under `warnings` (`Name \"main::n\" used only once: possible typo`):\r\n\r\n```perl\r\n(my $n = shift) ? $n : 0; \r\n\r\nif ((my $n) || !!$n) { $n } else { 0 }\r\n```\r\n\r\nBut this will only generate a compilation error under `strict` (nothing with `warnings`):\r\n\r\n```perl\r\n((my $n) || !!$n) ? $n : 0;  # Perl thinks it's fine when not using strict\r\n```\r\n\r\nAnyways, if you do something like the code I showed on the first example, Perl won't warn you nor generate a compilation error and will probably do what you did not mean to do:\r\n\r\n```perl\r\nmy $num = 0;\r\n{\r\n    local @_ = 10;\r\n    (my $num = shift) ? $num : 0;                         # 0\r\n}\r\n{\r\n    local @_ = 10;\r\n    if ((my $num = shift) && !!$num){ $num } else { 0 };  # 0\r\n}\r\n```\r\n\r\nand I can say first hand that finding this bug is something really time-consuming with no pragma nor Deparse to help you.\r\n\r\nI'd like to see a warning here saying that you are using a variable on the same statement you are lexically masking it.\r\n\r\nThough I see that this warning would also appear on the likely more common case:\r\n\r\n```perl\r\nlocal @_ = @_;\r\nlocal $_ = $_;\r\n# and so\r\n```"},{"labels":["enhancement"],"text":"In the old days each platform had its own line ending convention.  Unix had `\\n`, MS-DOS had `\\r\\n`, and other even stranger platforms existed.  When transferring text files you often converted them (as done by ftp's \"text\" transfer mode, or odd mount flags in compatibility layers like Cygwin).  But nowadays that is long gone.  People run a mixture of systems and files are transferred unchanged between them.  This means it's common to deal with `\\r\\n` files on Unix or `\\n` on Windows -- or even a mixture of the two line endings.\r\n\r\nOn Windows, perl has some magic to let `chomp` remove either line terminator (Strawberry Perl 5.24).  This should be done on other platforms too.  It can't use exactly the same mechanism as is used for Windows builds, since they also have magic to turn `\\n` into `\\r\\n` on output, which definitely isn't wanted elsewhere.  But either form should be accepted for input.\r\n\r\nThis might require implementing support for `$/` to be a regexp rather than a fixed string -- or perhaps you would decide that it can be a character class regexp but not a fully general one.\r\n\r\nJust as the addition of `chomp` as a complement to `chop` made Perl more useful for text munging, so extending it to handle the different line endings will make it more useful on today's text files."},{"labels":["enhancement",null],"text":"**Describe the solution you'd like**\r\nIt would be fantastic if the META.json (and META.yml) files that ship with the core included `provides` data per https://metacpan.org/pod/CPAN::Meta::Spec#provides\r\n\r\n"},{"labels":["enhancement",null],"text":"Perl's single-character variables like `$$` `$(` `$\"` and their friends let you do all sorts of powerful and concise magic.\r\n\r\nHowever, in the middle of a regular expression it's easy for even experienced programmers to get in a tangle about what the escaping rules are and end up with something that's wrong, but syntactically valid because of builtin variables.  Normally to escape a special character in a regular expression you can enclose it in a character class, for example:\r\n\r\n    /[(]/  # match literal (\r\n\r\nBut do this for the `$` character and it doesn't work:\r\n\r\n    /[$]/  # incorrect\r\n\r\nMoreover, the mistake is not caught at compile time.  Perl normally has good compile-time checking of regexps but here because it mentions a variable `$]` the regexp is not compiled until run time.\r\n\r\nCould I suggest a compile time warning when one of the single-character punctuation variables apart from `$_` appears in a regular expression?  That would provide quick feedback, much quicker than waiting until the line of code is reached at run time (or waiting to run an external linter).  Personally speaking I find it rather unlikely I'd want to use `$$` `$\\` `$'` and so on in a regexp, but I do get tripped up quite often by subtleties in the quoting rules.\r\n\r\nI'm not trying to cast a moral judgement on when you might want to use these variables in a regexp, of course somebody *might*, but I think the balance tips far enough towards being a common mistake and a very rare deliberate practice that it merits a compile-time warning.  I think in the particular case of regexp syntax the programmer needs a little more hand-holding.  As far as I can tell Perl already has some special treatment of certain of these variables within regexps, with `$(` not being interpolated for example, so it wouldn't be violating purity to add a warning for the others."},{"labels":["enhancement"],"text":"```\r\nuse strict;\r\nuse warnings FATAL => q(all);\r\nsub f { }\r\nsub g { 1; }\r\nmy $k = f() . g();\r\n```\r\ngives\r\n`Use of uninitialized value in concatenation (.) or string at line ...`\r\n\r\nWould it \"be anymore skin off its back\" to please mention if it was f or g?\r\nIt does if one uses a undefined $f instead of f();\r\nCertainly it could at least mention \"the first one\" or \"the second one\" or \"the first one and possibly others\"."},{"labels":["enhancement",null],"text":"We can do\r\n```\r\nmy %h = (\r\n    a => 1,\r\n    b => 2,\r\n    c => 3,\r\n    d => 4,\r\n    e => 5,\r\n    f => 6\r\n);\r\n```\r\nBut let's say we first do just\r\n```\r\nmy %h = (\r\n    a => 1,\r\n    b => 2,\r\n    c => 3,\r\n);\r\n```\r\nAlas we can't come along later and do\r\n```\r\n%h .= (\r\n    d => 4,\r\n    e => 5,\r\n    f => 6\r\n);\r\n```\r\nBecause \".=\" can't be used like that...yet (too bad!)\r\n\r\n(Well, with minimal disruption of our file, at least we can do:)\r\n\r\n```\r\n%h= (\r\n    %h,\r\n    d => 4,\r\n    e => 5,\r\n    f => 6\r\n);\r\n```\r\n"},{"labels":[null,"enhancement",null],"text":"**Description**\r\n\r\nThe perlop docs describe the current behavior, so this doesn't contradict anything.\r\n\r\nA chained comparison in 5.31.10 appears to evaluate the middle condition twice for a tied scalar but doesn't warn about it. Since a programmer might not realize they are using a tied variable, they might see odd behavior. \r\n\r\n**Steps to Reproduce**\r\n\r\n\tuse v5.31.10;\r\n\r\n\tpackage UnstableScalar {\r\n\t\tuse parent qw(Tie::Scalar);\r\n\t\tsub TIESCALAR { bless {}, $_[0] }\r\n\t\tsub FETCH {\r\n\t\t\tmy $value = int rand 10;\r\n\t\t\tsay \"Fetching scalar with $value\";\r\n\t\t\treturn $value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\ttie my $unstable, 'UnstableScalar';\r\n\r\n\tif( 5 < $unstable < 9 ) {\r\n\t\tsay \"Found a value between 5 and 9\";\r\n\t\t}\r\n\r\nThe comparison short circuits just fine, but if the first comparison is true, the tied scalar is evaluated again (so things such as `Tie::Cycle` will unexpectedly progress or skip values):\r\n\r\n```\r\n$ perl5.31.10 ~/Desktop/test.pl\r\nFetching scalar with 2\r\n\r\n$ perl5.31.10 ~/Desktop/test.pl\r\nFetching scalar with 0\r\n\r\n$ perl5.31.10 ~/Desktop/test.pl\r\nFetching scalar with 9\r\nFetching scalar with 2\r\nFound a value between 5 and 9\r\n\r\n$ perl5.31.10 ~/Desktop/test.pl\r\nFetching scalar with 6\r\nFetching scalar with 9\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI expect that the scalar would only call `FETCH` once and reuse the result in the second comparison. `perlop` says this may happen, but perhaps a warning would be useful here. Ideally, tied variables would be evaluated once.\r\n\r\nIs there a chance that the internals could recognize this and use the tied object instead of the scalar itself? This works as expected:\r\n\r\n```\r\n\tif( 5 < tied($unstable)->FETCH < 9 ) {\r\n\t\tsay \"Found a value between 5 and 9\";\r\n\t\t}\r\n```\r\n \r\n**Perl configuration**\r\n<!-- Please paste `perl -V` output just below. -->\r\n```\r\nSummary of my perl5 (revision 5 version 31 subversion 10) configuration:\r\n\r\n  Platform:\r\n\tosname=darwin\r\n\tosvers=19.3.0\r\n\tarchname=darwin-2level\r\n\tuname='darwin otter.local 19.3.0 darwin kernel version 19.3.0: thu jan 9 20:58:23 pst 2020; root:xnu-6153.81.5~1release_x86_64 x86_64 '\r\n\tconfig_args='-des -Dprefix=/usr/local/perls/perl-5.31.10 -Dusedevel'\r\n\thint=recommended\r\n\tuseposix=true\r\n\td_sigaction=define\r\n\tuseithreads=undef\r\n\tusemultiplicity=undef\r\n\tuse64bitint=define\r\n\tuse64bitall=define\r\n\tuselongdouble=undef\r\n\tusemymalloc=n\r\n\tdefault_inc_excludes_dot=define\r\n\tbincompat5005=undef\r\n  Compiler:\r\n\tcc='cc'\r\n\tccflags ='-fno-common -DPERL_DARWIN -mmacosx-version-min=10.15 -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include -DPERL_USE_SAFE_PUTENV'\r\n\toptimize='-O3'\r\n\tcppflags='-fno-common -DPERL_DARWIN -mmacosx-version-min=10.15 -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'\r\n\tccversion=''\r\n\tgccversion='4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.17)'\r\n\tgccosandvers=''\r\n\tintsize=4\r\n\tlongsize=8\r\n\tptrsize=8\r\n\tdoublesize=8\r\n\tbyteorder=12345678\r\n\tdoublekind=3\r\n\td_longlong=define\r\n\tlonglongsize=8\r\n\td_longdbl=define\r\n\tlongdblsize=16\r\n\tlongdblkind=3\r\n\tivtype='long'\r\n\tivsize=8\r\n\tnvtype='double'\r\n\tnvsize=8\r\n\tOff_t='off_t'\r\n\tlseeksize=8\r\n\talignbytes=8\r\n\tprototype=define\r\n  Linker and Libraries:\r\n\tld='cc'\r\n\tldflags =' -mmacosx-version-min=10.15 -fstack-protector-strong -L/usr/local/lib'\r\n\tlibpth=/usr/local/lib /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0/lib /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib /usr/lib\r\n\tlibs=-lpthread -ldbm -ldl -lm -lutil -lc\r\n\tperllibs=-lpthread -ldl -lm -lutil -lc\r\n\tlibc=\r\n\tso=dylib\r\n\tuseshrplib=false\r\n\tlibperl=libperl.a\r\n\tgnulibc_version=''\r\n  Dynamic Linking:\r\n\tdlsrc=dl_dlopen.xs\r\n\tdlext=bundle\r\n\td_dlsymun=undef\r\n\tccdlflags=' '\r\n\tcccdlflags=' '\r\n\tlddlflags=' -mmacosx-version-min=10.15 -bundle -undefined dynamic_lookup -L/usr/local/lib -fstack-protector-strong'\r\n\r\n\r\nCharacteristics of this binary (from libperl): \r\n  Compile-time options:\r\n\tHAS_TIMES\r\n\tPERLIO_LAYERS\r\n\tPERL_COPY_ON_WRITE\r\n\tPERL_DONT_CREATE_GVSV\r\n\tPERL_MALLOC_WRAP\r\n\tPERL_OP_PARENT\r\n\tPERL_PRESERVE_IVUV\r\n\tPERL_USE_DEVEL\r\n\tPERL_USE_SAFE_PUTENV\r\n\tUSE_64_BIT_ALL\r\n\tUSE_64_BIT_INT\r\n\tUSE_LARGE_FILES\r\n\tUSE_LOCALE\r\n\tUSE_LOCALE_COLLATE\r\n\tUSE_LOCALE_CTYPE\r\n\tUSE_LOCALE_NUMERIC\r\n\tUSE_LOCALE_TIME\r\n\tUSE_PERLIO\r\n\tUSE_PERL_ATOF\r\n  Built under darwin\r\n  Compiled at Mar 27 2020 01:45:56\r\n  %ENV:\r\n\tPERL=\"/Users/brian/bin/perls/perl-latest\"\r\n\tPERL5_PATH=\"/Users/brian/bin/perls\"\r\n\tPERL6_PATH=\"/Users/brian/bin/perl6s:/Applications/Rakudo/bin:/Applications/Rakudo/share/perl6/site/bin\"\r\n\tPERLDOTCOM_AUTHOR=\"brian d foy\"\r\n  @INC:\r\n\t/usr/local/perls/perl-5.31.10/lib/site_perl/5.31.10/darwin-2level\r\n\t/usr/local/perls/perl-5.31.10/lib/site_perl/5.31.10\r\n\t/usr/local/perls/perl-5.31.10/lib/5.31.10/darwin-2level\r\n\t/usr/local/perls/perl-5.31.10/lib/5.31.10\r\n```\r\n"},{"labels":["enhancement",null,null],"text":"Perl doesn't provide a handy out-of-the-box mechanism for showing/test/setting Linux capabilities [1,2], which are hugely relevant to containerised environments (e.g. docker/kubernetes[3,4]/openstack), but may also become more relevant to standard Linux (and other) systems in the future.\r\n\r\nAt least to start with, this issue is intended as a placeholder for discussion.\r\n\r\n**On CPAN**\r\n\r\nCPAN provides at least one module, [Linux::Capabilities](https://metacpan.org/pod/distribution/Linux-Capabilities/lib/Linux/Capabilities.pod), but it might be nice to have some functionality baked in by default. \r\n\r\n**Sample use cases**\r\n- An application intended for containerised deployment could test whether it has the capabilities necessary for its functionality, and to provide more meaningful diagnostics messages in the event that it does not have all necessary capabilities. The application could also modify its behaviour if useful-to-have-but-not-essential capabilities were not present.\r\n- If file capabilities are used instead of traditional suid/sguid bits, a perl script could better understand what privileged operations it can and cannot do, rather than just blindly trying stuff. (Or the other way around, any script that currently does `die unless ($UID ==0)` to check for elevated privileges before proceeding will not run, even if it actually has the capabilities it needs.)\r\n- An application that can modify its _Inheritable_ set can launch child processes that have fewer capabilities than the parent. (Note: Documentation mostly talks about execve calls here, but a quick grep of perl source only finds execv and execvp. Not sure to what extent that is important or not.)\r\n\r\n**Possible actions**\r\n- Modify Perlsec.pod to mention capabilities, even if no functionality is added to core?\r\n- Add functionality to query/test the current capability sets for the running process\r\n- Add functionality for easy manipulation/lookup of capability constants etc\r\n- Add functionality to set capabilities (c.f. _setcap_)\r\n- Add functionality to support querying file capabilities\r\n\r\n[1] http://man7.org/linux/man-pages/man7/capabilities.7.html\r\n[2] https://k3a.me/linux-capabilities-in-a-nutshell/\r\n[3] https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container\r\n[4] https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities\r\n"},{"labels":["enhancement"],"text":"In Perl the `=>` operator is called the fat comma and behaves just like `,` except that it can implicitly quote its left hand side.  But I suggest tightening the grammar slightly to require the ordinary comma in some places.\r\n\r\nCurrently this compiles without warning:\r\n`sub f { my %x => (a => 5) }`\r\nThe programmer made a mistake and should have written `=` instead of the first `=>`.\r\n\r\nApart from golf, I don't believe the fat comma is used in practice as a C-style comma operator separating two statements.  (Happy to be proved wrong.)  I suggest a compile-time warning in the `syntax` category when `=>` appears in a position it gets parsed as a C-style comma.  Then those like me who prefer stricter checking can fatalize that warning.  I would go further and advocate deprecating it, but a warning is probably controversial enough."},{"labels":["enhancement",null],"text":"**Describe the solution you'd like**\r\n\r\nDuring make test/make test_harness it would be really nice if we recorded which test files failed, and then made it possible to do something like \r\n\r\n  make retest\r\n\r\nwhich would re-run the previously recorded failing tests. Doing this manually is a pain, and slows down the dev process as everything has to happen by hand.\r\n\r\nYves\r\n\r\n"},{"labels":["enhancement",null],"text":"Per discussion just now with @Perl/perl-contributor \r\n\r\nIt’s a frustration point that, if you do:\r\n```\r\nopen my $fh, '>>&=', $fd;\r\n```\r\n… Perl will close() the file descriptor once $fh is garbage-collected. While that’s useful behavior when $fd comes from, e.g., an exec() or file-descriptor pass via UNIX socket, if the $fd comes from an XSUB it’s often counterproductive since the XSUB may well want to use the file descriptor itself.\r\n\r\nCurrently this can be worked around by retaining a hash of ( $fd => $fh ), but “dangling filehandles” are rather ugly.\r\n\r\nREQUEST: Provide a way to tell Perl that a given filehandle’s underlying file descriptor should *not* be close()d when the filehandle is garbage-collected."},{"labels":["enhancement",null],"text":"It would be useful to have infix operators for case-insensitive string comparison.\r\n`$foo eqi $bar`\r\nwould be equivalent to\r\n`fc($foo) eq fc($bar)`\r\nand so on.\r\n\r\nYes, it's just syntactic sugar really, but Perl hardly takes an austere approach to these things.  In my view a case-insensitive string comparison falls under \"easy things should be easy\"."},{"labels":["enhancement",null],"text":"This request comes from a problem we experienced in the field due to some bit-twiddling. The Perl code that was used was similar to the following:\r\n\r\n    i << 32 >> 32\r\n\r\nOn 32-bit machines it was intended to result in the original 32-bit word. On 64-bit machines it was intended to clear the high 32-bit word, so only the low 32-bit word remained.\r\n\r\nThe pattern worked as expected on most Intel machines. But it failed on Solaris i86pc.\r\n\r\nLooking back, we built Perl from sources because Sun is a ransomware platform. We did not want to buy Sun's updates so we built the latest Perl ourselves. After the build we ran the self-tests to ensure there were no problems.\r\n\r\nIn hindsight I think we should have been alerted to a failure when the shift amount exceeded the word size. Or, Perl could set the value to 0 when the shift amount exceeded the word size. In either case, there should probably be test cases for:\r\n\r\n    # OK on all platforms\r\n    i << 30\r\n\r\n    # OK on all platforms when using unsigned types\r\n    i << 31\r\n\r\n    # OK on 64-bit platforms, what does one expect on 32-bit platforms?\r\n    i << 32\r\n    i << 33\r\n\r\n    # What does one expect on 32-bit and 64-bit platforms?\r\n    i << 64\r\n    i << 65\r\n"},{"labels":["enhancement",null],"text":"CXW here with my first issue ever filed for perl5.  My apologies for any errors in this submission.  I did check previous issues.\r\n\r\nThe [cpantesters matrix](http://matrix.cpantesters.org/?dist=App-unbelievable) for my recent App::unbelievable is very spotty, and as far as I can tell, all the failures are due to lack of IPC::System::Simple.  Errors are all of the form:\r\n\r\n> Error:  IPC::System::Simple required for Fatalised/autodying system() at /home/cpansand/.cpan/build/2020012706/App-unbelievable-v0.0.1-2/blib/lib/App/unbelievable/Util.pm line 15.\r\n\r\nThe relevant code is `use autodie ':all';`.\r\n\r\nI have released App-unbelievable v0.0.2 with code to report IPC::System::Simple presence, so in a day or two I should have data relevant to my hypothesis.  ~I will report back here when I do.~  **Edit** see https://github.com/Perl/perl5/issues/17507#issuecomment-581964347\r\n\r\n**Describe the solution you'd like**\r\n\r\nWould you please add IPC::System::Simple to core?  That way `use autodie ':all'` will work consistently going forward without having to add a separate dependency on IPC::System::Simple.\r\n\r\nThank you for considering this request!  Please let me know if I should report it in IPC::System::Simple instead.\r\n\r\n### Why do I care about this?\r\n\r\nI have often read recommendations to use `autodie`.  For example, [computerhope](https://www.computerhope.com/unix/perlprag.htm#pragma:autodie) specifically says:\r\n\r\n> use autodie qw(:all); # Recommended more: defaults and system/exec.\r\n\r\nHowever, that example does not mention IPC::System::Simple at all!  So the recommendation is actually one that will cause compilation failures for reasons new Perl users will be completely unaware of.\r\n\r\nAs another example, even [brian d foy's treatment of autodie](https://www.learning-perl.com/2011/01/when-trytiny-and-autodie/) doesn't mention IPC::System::Simple.  A search on his site for \"autodie\" yields [this page](https://www.learning-perl.com/2011/01/updates-to-chapter-16-process-management/), which mentions IPC::System::Simple, but doesn't connect it to autodie.\r\n\r\nI think adding IPC::System::Simple to core (whether dual-life or core-only) would reduce the chance of confusion on the part of new Perl users, and make autodie a more useful module.\r\n\r\n#### How did I find out about this? (for context)\r\n\r\nI recently discovered by accident at $work that `autodie` doesn't help with `qx{}`.  That caused me to read the POD for `autodie`, which told me about IPC::System::Simple.\r\n"},{"labels":["enhancement",null,null],"text":"Migrated from [rt.cpan.org#96014](https://rt.cpan.org/Ticket/Display.html?id=96014) (status was 'new')\r\n\r\nRequestors:\r\n* mjd@plover.com\r\n\r\nFrom mjd@plover.com on 2014-05-27 21:10:00\r\n:\r\n\r\nIt is not safe to use Tie::File to operate on a file with a multibyte encoding, such as UTF-8. This has been a defect in Tie::File since it was first written. I was aware at the time that this would be a problem, but at the time it seemed too hard to fix.  I know a little bit more now, and the problem has become considerably more urgent since 2005.  It should be fixed.  I would like to fix this, but I need some help.\r\n\r\nThe essential problem is as follows.  Tie::File holds an array that records the tell() position at which each record in the file begins, as reported by seek().  Tie::File makes the not-completely-warranted assumption that these offsets are actually byte counts, but I think this is a minor issue.\r\n\r\nThe major issue this this: Suppose that record 3 begins at tell() offset 100, and record 4 begins at tell() offset 150. In some places Tie::File then concludes from this that record 3 is 50 bytes long, which I think is generally correct.\r\n\r\nBut in other places Tie::File will calculate the length of record 3 by reading it in and calling length() on the result.  Since what is wanted is the length in bytes, this is wrong except for legacy encodings where each character is one byte.\r\n\r\nNow suppose Tie::File is asked to replace record 3 with some string $s.  Tie::File uses length() on $s to find out how many bytes $s is, which is wrong, and it uses length() on record 3 similarly wrongly. Then it compares these two wrong lengths to decide whether record 3 can be overwritten with $s in-place, or whether the tail of the file needs to be copied upwards (if $s is shorter than the old record 3) or downwards (if it is longer).  All these calculations are being done with character lengths, but they should be done with byte lengths. Since they are done wrongly, Tie::File mangles the data file when it modifies the record.\r\n\r\nOn review, I see the following relevant ten-year-old comment:\r\n\r\n     # length($oldrec) here is not consistent with text mode  TODO XXX BUG   \r\n\r\nThe enclosed program demonstrates the problem.  It writes a correct UTF-8 encoded file, copies it to stdout, then uses Tie::File to modify a record in the middle, then copies the resulting carbled file to stdout.\r\n\r\nWhat I think Tie::File needs to do is to find out how many bytes $s will occupy once written to the file, and use that in place of length($s) in its length calculations.  When I wrote Tie::File in 2005 there was no way to do this, Encode not having been invented.  But I think now I can use Encode to transform $s to a suitably-encoded byte string, and then use the existing Tie::File machinery to write the byte string to the file.  But I'm not sure this is correct; I need someone with some domain knowledge to help me make the right changes.\r\n\r\nAlso it seems to me that to choose the correct encoding, Tie::File needs some way to interrogate the filehandle it is given, if it is given one, and it needs to allow an \"encoding => ....\" option to be supplied in the tie() call when it is given a filename.  There may be other encoding-related options it should support that I have no thought of.\r\n\r\n----------------------------------------------------------------\r\n\r\n```\r\n#!/usr/bin/perl\r\n\r\nuse Tie::File;\r\nuse Fcntl;\r\n\r\n{ open my($fh), \">:raw\", \"tf-test-data\" or die $!;\r\n  print $fh \"Fl\\303\\274ghafen\r\nChinese:\\344\\270\\255\\345\\234\\213\\345\\223\\262\\345\\255\\270\\346\\233\\270\\351\\233\\273\\345\\255\\220\\345\\214\\226\\350\\250\\210\\345\\212\\203\r\nPotat\\303\\270es\\n\";\r\n}\r\n\r\nbinmode(STDOUT, \":utf8\");\r\n{ open my($fh), \"+<:utf8\", \"tf-test-data\"\r\n  or die $!;\r\n  print while <$fh>;\r\n  print \"-------\\n\";\r\n}\r\n\r\n{\r\n  open my($fh), \"+<:utf8\", \"tf-test-data\";\r\n  my @A;\r\n  tie @A, Tie::File => $fh or die;\r\n  $A[1] = \"octopus\";\r\n}\r\n\r\n{ open my($fh), \"+<:utf8\", \"tf-test-data\"\r\n  or die $!;\r\n  print while <$fh>;\r\n  print \"-------\\n\";\r\n}\r\n__DATA__\r\n```\r\n"},{"labels":["enhancement",null,null],"text":"Migrated from [rt.cpan.org#52166](https://rt.cpan.org/Ticket/Display.html?id=52166) (status was 'new')\n\nRequestors:\n* eponymousalias@yahoo.com\n\nAttachments:\n* [INET.pm.patch](https://rt.cpan.org/Ticket/Attachment/698746/360330/INET.pm.patch)\n\n\nFrom eponymousalias@yahoo.com on 2009-11-29 07:41:35:\n```\nThe Linux tcp(7) man page says in part:\n\nThe maximum sizes for socket buffers declared via the SO_SNDBUF and\nSO_RCVBUF mechanisms are limited by the global net.core.rmem_max\nand net.core.wmem_max sysctls. ... On individual connections, the\nsocket buffer size must be set prior to the listen() or connect()\ncalls in order to have it take effect. \n\nThis last sentence means that the IO::Socket::INET constructor must \nprovide options to set the send and receive buffers if they are to \nbe controllable, since the constructor does not return until after \nthe listen() or connect() call has already been made.\n\nI propose that two new options be added to the constructor:\n\n    SendBuf => $send_buffer_size\n    RecvBuf => $recv_buffer_size\n    \nso that these values can be set when the socket is created.\n\nThe attached INET.pm.patch provides this capability.\n\n\n      \n```\n"},{"labels":["enhancement",null,null],"text":"Migrated from [rt.cpan.org#57671](https://rt.cpan.org/Ticket/Display.html?id=57671) (status was 'new')\n\nRequestors:\n* leonerd-cpan@leonerd.org.uk\n\nFrom leonerd-cpan@leonerd.org.uk on 2010-05-20 17:02:06:\n```\nThere's a disparity in convenience between\n\n use IO::Socket::Packet;\n my $sock = IO::Socket::Packet->new( IfIndex => 5 );\n\nand\n\n use IO::Socket::Packet;\n use Socket::Packet qw( pack_sockaddr_ll ETH_P_ANY );\n my $sock = IO::Socket::Packet->new;\n $sock->bind( pack_sockaddr_ll( ETH_P_ANY, 5, 0, 0, '' ) );\n\nIt would be nice if IO::Socket->bind (and ditto ->connect) could take a\ncollection of named arguments instead of a single packed address.\n\n use IO::Socket::Packet;\n my $sock = IO::Socket::Packet->new;\n $sock->bind( IfIndex => 5 );\n\nI observe that right now it's always an error to pass more than one\nargument to ->bind:\n\nsub bind {\n    @_ == 2 or croak 'usage: $sock->bind(NAME)';\n    ...\n\nThis surely gives way to a really neat implementation:\n\nsub bind {\n    my $sock = shift;\n    my $addr = @_ > 1 ? $sock->pack_bindaddr( @_ ) : shift;\n\n    return bind($sock, $addr) ? $sock\n\t\t\t      : undef;\n}\n\nThen any subclass that wishes to provide a neater implementation of bind\nargs, can provide such a method; e.g.\n\nsub pack_bindaddr\n{\n   shift;\n   my %args = @_;\n   pack_sockaddr_ll( $args{Protocol} || ETH_P_ANY, $args{IfIndex} || 0,\n0, 0, '' );\n}\n\n(with analogous implementation for ->connect)\n\nSuch code could probably be largely lifted from each subclass's\n->configure method anyway.\n\nThis should be easy to implement, as it only adds new behavior which\nright now would be an error; so there ought not be any risk of\nclobbering existing code. Subclasses can implement these packing methods\npiecemeal; we don't have to update every subclass all at once.\n\nIf you'd be happy with such an idea, I'd be quite happy to go about\nactually writing code, tests, updating docs, etc...\n\n-- \n\nPaul Evans\n```\n"},{"labels":["enhancement",null,null],"text":"Migrated from [rt.cpan.org#68902](https://rt.cpan.org/Ticket/Display.html?id=68902) (status was 'open')\r\n\r\nRequestors:\r\n* PRO@cpan.org\r\n\r\nFrom pro@cpan.org on 2011-06-17 19:12:49:\r\n```\r\ncurrently not working:\r\nIO::Socket::INET->new('Proto'    => 'sctp');\r\n\r\nvery small and simple fix:\r\n\r\n```diff\r\n--- INET.pm_    2011-06-17 20:55:56.000000000 +0400\r\n+++ INET.pm     2011-06-17 20:56:35.000000000 +0400\r\n@@ -22,11 +22,13 @@\r\n IO::Socket::INET->register_domain( AF_INET );\r\n\r\n my %socket_type = ( tcp  => SOCK_STREAM,\r\n+                    sctp => SOCK_STREAM,\r\n                    udp  => SOCK_DGRAM,\r\n                    icmp => SOCK_RAW\r\n                  );\r\n my %proto_number;\r\n $proto_number{tcp}  = Socket::IPPROTO_TCP()  if defined \r\n&Socket::IPPROTO_TCP;\r\n+$proto_number{sctp}  = Socket::IPPROTO_SCTP()  if defined \r\n&Socket::IPPROTO_SCTP;\r\n $proto_number{udp}  = Socket::IPPROTO_UDP()  if defined \r\n&Socket::IPPROTO_UDP;\r\n $proto_number{icmp} = Socket::IPPROTO_ICMP() if defined \r\n&Socket::IPPROTO_ICMP;\r\n my %proto_name = reverse %proto_number;\r\n```\r\n\r\nFrom leont@cpan.org on 2012-02-21 19:50:18:\r\n\r\nI'm not sure this is the most sensible of behaviors. sctp can be used as\r\nboth a SOCK_STREAM and a SOCK_SEQPACKET: but the former doesn't really\r\nmake sense (what'd be the advantage over tcp?).\r\n\r\nLeon\r\n"},{"labels":["enhancement"],"text":"I've now lost count of the number of bugs I've caused by\r\n\r\n    my $message = @_;\r\n\r\nwhen I meant either of\r\n\r\n    my $message = shift;\r\n    my ( $message ) = @_;\r\n\r\nIn the frigtningly rare case I wanted a count of the arguments, I'd likely want to write it using the `scalar` operator explicitly, to remind the human reader as much as perl itself:\r\n\r\n    my $argc = scalar @_;\r\n\r\nTherefore, would we consider adding a new warning?\r\n\r\n    $ perl -Mwarnings -ce 'my $message = @_'\r\n    Use of @_ in scalar assignment may be unintentional at -e line 1.\r\n\r\n(cc to perl5-porters@)"},{"labels":["enhancement"],"text":"**Description**\r\nAbout the below fix of 50-year bug in Time::Local 1.26,\r\nhttps://metacpan.org/changes/distribution/Time-Local#L22\r\n\r\nCurrently, if the input number is 70 at 2020 it will return 2070.\r\nReading of codes,\r\n```\r\n### my $Breakpoint  = ( $ThisYear + 50 ) % 100;\r\n### my $NextCentury = $ThisYear - $ThisYear % 100; # 1950~2049=>2000. 2050~2149=>2100.\r\n### $NextCentury += 100 if $Breakpoint < 50; # condition is xx50~xx99\r\n\r\n#\r\n# Current\r\n# 1970 -\r\n#    ThisYear    = 1970\r\n#    Breakpoint  = 20\r\n#    NextCentury = 2000\r\n#    Century     = 1900\r\n#\r\n#    If input is 0-20, return 2000+input. This is a Bug.\r\n#    But it would not happen, because user usually use number above 70 (which is 1970-1900).\r\n#\r\n# 2019 -\r\n#    ThisYear    = 2019\r\n#    Breakpoint  = 69\r\n#    NextCentury = 2000\r\n#    Century     = 1900\r\n#\r\n#    If input is 0-69, return 2000+input. This is a Bug.\r\n#    But it would not happen, because user usually use number above 70 (which is 1970-1900).\r\n#\r\n# 2020 -\r\n#    ThisYear    = 2020\r\n#    Breakpoint  = 70\r\n#    NextCentury = 2000\r\n#    Century     = 1900\r\n#\r\n#    If input is 0-70, return 2000+input. This is a Bug.\r\n#    !! This would happen. Because number 70 is commonly used as 1970 abbreviation.\r\n```\r\n\r\nThis is so strange because NextCentury and Century actually not right time period.\r\nAlso, I input number (0-69) and get 2000+number while inputting number (79-99) and get 1900+number at 2019. This is confusing and leads user to fix bunch of codes when it changes.\r\n\r\n**Ideal**\r\nForcing user not to input abbreviation and to use exact number is best, but not realistic.\r\nIt will force user to fix huge code because the systems using perl are mainly old.\r\nSo, Ideal is input number (0-99) just return 1900+number.\r\n\r\n**Summary**\r\nI would like to know if my thoughts have any problem, and if this fix should be done I would send PR.\r\n\r\nAny response is appreciated."},{"labels":["enhancement"],"text":"We have a lot of macros that say something to the effect \"This is guaranteed to evaluate its argument once; if that doesn't matter to you, use the more efficient version\".\r\n\r\nWhat that translates to is that the only-once macro ends up calling a function, hence the inefficiency.  But if that function were inlined, it would not be less efficient, and we wouldn't have needed another version, and coders wouldn't have to think about the trade-off, and perhaps get it wrong.\r\n\r\nWe should not add any new macros like this.  And I think we should convert all of the existing ones to use an inline function, so that the two macro versions are exactly the same, evaluating their argument once, efficiently.\r\n\r\nThis would speed up development and stop bugs before they happen."},{"labels":["enhancement",null],"text":"The Not-f214 bot currently in use on irc.perl.org #p5p reports pushes which create new branches:\r\n```\r\n(10:03:07 PM) Not-f214: [perl5] jkeenan pushed 1 commit to jkeenan/make-minitest-t-re-pat [+0/-0/±1] https://git.io/JewwY\r\n(10:03:09 PM) Not-f214: [perl5] jkeenan 58cfa81 - Test IRC bot on branches.\r\n```\r\nThe above appeared within seconds after I executed `git push -u origin jkeenan/make-minitest-t-re-pat` in my terminal.\r\n\r\nHowever, I subsequently deleted this branch.  In my terminal:\r\n```\r\n$ git push origin :jkeenan/make-minitest-t-re-pat\r\nTo github.com:Perl/perl5.git\r\n - [deleted]               jkeenan/make-minitest-t-re-pat\r\n```\r\nNothing appeared within 5 minutes on \\#p5p.\r\n\r\nOur erstwhile commit bot, p5commits, reported all pushes to branches, whether for creation, update or deletion.  We should get the same functionality out of this new bot.  (This would be particularly helpful during upcoming branch cleanups.)\r\n\r\nThank you very much.\r\nJim Keenan"},{"labels":["enhancement",null],"text":"TL;DR - a suggestion of new syntax to provide a \"switch\"-like case dispatch semantic without running into the \"string or number\" problems inherent in smartmatch.\r\n\r\nIt is a truth universally acknowledged, that any language in possession of typed values must be in want of a way to dispatch on comparisons between them.\r\n\r\nTraditionally perl authors have used techniques like `if/elsif` chains. Perl 5.10 added the ill-fated smartmatch and `given/when` syntax - the less said about them the better. It suffices to note that they were \"too smart\" and tried to guess whether the author meant string or number comparison, or how to distribute \"any\"-style logic among arrays or hashes or various other \"guess-what-I-mean\" behaviours.\r\n\r\nMeanwhile, CPAN provides some nice neat solutions - one to draw particular attention to is [`Switch::Plain`](https://metacpan.org/pod/Switch::Plain). This doesn't attempt to do anything fancy. The programmer has to ask for number (`nswitch`) vs stringy (`sswitch`) semantics. It's trivially simple but it works really well in practice.\r\n\r\nI think this suggests a decent motivation for having something like it in core. We already have quite a lot of infix operators which could be used, so I would like to wave as a first-draft some thoughts on syntax:\r\n\r\n```\r\nmatch($x) on eq {\r\n    case \"abc\" { say \"This is obviously a string eq match\" }\r\n    case \"def\" { ... }\r\n    default    { ... }\r\n}\r\n```\r\n\r\nIn a first iteration this can easily be done (as a CPAN module if necessary) as purely syntax-sugar over the optree created by unfolding it into the obvious `if/elsif/...` plus using a pad temporary to evaluate `$x` just once.\r\n\r\nBy forcing the programmer to explicitly state their comparison operator, we've avoided perl having to guess if they wanted strings or numbers, because if they wanted numbers they can\r\n\r\n```\r\nmatch($i) on == {\r\n    case 1 { ... }\r\n    case 2 .. 5 {\r\n        say \"Ah now here's a question - do we allow case lists to have any-like semantics?\"\r\n    }\r\n}\r\n\r\nmatch($s) on =~ {\r\n    case m/[a-z]/ { ... }\r\n    case m/[0-9]/ { ... }\r\n    case m/@.@/ { ... }\r\n}\r\n```\r\n\r\nThis now motivates why I wanted `isa` to be an infix operator (#17200):\r\n\r\n```\r\nmatch($obj) on isa {\r\n    case DerivedClass { ... }\r\n    case Another::Class { ... }\r\n    case Base::Class { ... }\r\n}\r\n```"},{"labels":["enhancement",null],"text":"It would be useful if a subroutine knew whether or not it was called in a context which used its return value as an lvalue.\r\n\r\nHere's an existing scenario which isn't currently possible:\r\n\r\nSubroutine `foo` returns a hash value.  If the value is being used as an r-value, the subroutine should throw if the hash value does not exist.  If the value is being used as an l-value, it should create an element in the hash and return that.  Something like this:\r\n```\r\nsub foo :lvalue ( $key ) {\r\n    state %hash;\r\n\r\n    die( \"non-existent key: $key\" )\r\n        if ! in_lvalue_context && ! exists $hash{$key}; \r\n\r\n    return $hash{$key}\r\n}\r\n```\r\n\r\nSo, this would throw:\r\n```\r\n$a += foo( $non_existent_key );\r\n```\r\nand this would succeed:\r\n```\r\nfoo( $non_existent_key ) = 2;\r\n```"},{"labels":["enhancement"],"text":"**Describe the solution you'd like**\r\nIn perl.h we have:\r\n```C\r\n/* Overall memory policy? */\r\n#ifndef CONSERVATIVE\r\n#   define LIBERAL 1\r\n#endif\r\n```\r\nOnly three places check for it:\r\n- [doop.c:1008](https://github.com/Perl/perl5/blob/2680ac6d3569b970e651742561b6e6e4062e323f/doop.c#L1008)\r\n- [doop.c:1118](https://github.com/Perl/perl5/blob/2680ac6d3569b970e651742561b6e6e4062e323f/doop.c#L1118)\r\n- [pp.c:2552](https://github.com/Perl/perl5/blob/2680ac6d3569b970e651742561b6e6e4062e323f/pp.c#L2552)\r\n\r\nAll platforms except Win64 use the default, i.e. `LIBERAL`.\r\n\r\nI have no idea why win32 makefiles define `CONSERVATIVE` for 64-bit builds. It was added in commit c623ac675720b3145d48cc2ea9474a0f3e0cbbca. Since it was in 2002, and x86_64 didn't even exist back then, my guess is that it had something to do with Windows on Itanium requiring strict alignment.\r\n\r\nHowever, we don't define `CONSERVATIVE` for the other platforms that require strict alignment, so maybe it was a workaround for some ancient compiler bug?\r\n\r\nMy proposal is to remove those constants. They are undocumented and I don't think `CONSERVATIVE` provides any significant memory savings. In practice all that `CONSERVATIVE` does is making some code slightly different on Win64 for no good reason."},{"labels":["enhancement",null],"text":"<!-- Note: you can also replace the whole content by the file generated by perlbug utility. -->\r\n\r\n<!--\r\nIf your bug is about a Perl core module rather than a core language\r\nfeature, please enter its name after.\r\n-->\r\nModule: none\r\n\r\n**Description**\r\n\r\nThe non-GCC SvTRUEx() macro expands like:\r\n\r\n```C\r\n#  define SvTRUEx(sv)      ((PL_Sv = (sv)), SvTRUE(PL_Sv))\r\n#define SvTRUE(sv)         (LIKELY(sv) && SvTRUE_NN(sv))\r\n#define SvTRUE_NN(sv)      (SvGETMAGIC(sv), SvTRUE_nomg_NN(sv))\r\n#define SvTRUE_nomg_NN(sv) (SvTRUE_common(sv, sv_2bool_nomg(sv)))\r\n```\r\n\r\nWhile this prevents the argument sv to SvTRUEx() from being evaluated multiple times, if the sv has any magic the SvGETMAGIC() call may call code that uses any of the other SvFOOx() macros that also modify PL_Sv, which is interpreter global, so the following call to SvTRUE_nomg_NN() will end up testing the wrong sv.\r\n\r\n**Expected behavior**\r\n\r\nSimilar to the other SvFOOx() macros, SvTRUEx() should leave magic to a helper function.\r\n\r\n**Perl configuration**\r\n```\r\nSummary of my perl5 (revision 5 version 31 subversion 6) configuration:\r\n  Commit id: 0927980403a8984cd4df39ccb644eb53b1e6a3b2\r\n  Platform:\r\n    osname=linux\r\n    osvers=4.9.0-9-amd64\r\n    archname=x86_64-linux-thread-multi\r\n    uname='linux mars 4.9.0-9-amd64 #1 smp debian 4.9.168-1+deb9u5 (2019-08-11) x86_64 gnulinux '\r\n    config_args='-des -Dusedevel -Dusethreads -Doptimize=-O0 -g'\r\n    hint=recommended\r\n    useposix=true\r\n    d_sigaction=define\r\n    useithreads=define\r\n    usemultiplicity=define\r\n    use64bitint=define\r\n    use64bitall=define\r\n    uselongdouble=undef\r\n    usemymalloc=n\r\n    default_inc_excludes_dot=define\r\n    bincompat5005=undef\r\n  Compiler:\r\n    cc='cc'\r\n    ccflags ='-D_REENTRANT -D_GNU_SOURCE -fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_FORTIFY_SOURCE=2'\r\n    optimize='-O0 -g'\r\n    cppflags='-D_REENTRANT -D_GNU_SOURCE -fwrapv -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'\r\n    ccversion=''\r\n    gccversion='6.3.0 20170516'\r\n    gccosandvers=''\r\n    intsize=4\r\n    longsize=8\r\n    ptrsize=8\r\n    doublesize=8\r\n    byteorder=12345678\r\n    doublekind=3\r\n    d_longlong=define\r\n    longlongsize=8\r\n    d_longdbl=define\r\n    longdblsize=16\r\n    longdblkind=3\r\n    ivtype='long'\r\n    ivsize=8\r\n    nvtype='double'\r\n    nvsize=8\r\n    Off_t='off_t'\r\n    lseeksize=8\r\n    alignbytes=8\r\n    prototype=define\r\n  Linker and Libraries:\r\n    ld='cc'\r\n    ldflags =' -fstack-protector-strong -L/usr/local/lib'\r\n    libpth=/usr/local/lib /usr/lib/gcc/x86_64-linux-gnu/6/include-fixed /usr/include/x86_64-linux-gnu /usr/lib /lib/x86_64-linux-gnu /lib/../lib /usr/lib/x86_64-linux-gnu /usr/lib/../lib /lib /lib64 /usr/lib64\r\n    libs=-lpthread -lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc -lgdbm_compat\r\n    perllibs=-lpthread -lnsl -ldl -lm -lcrypt -lutil -lc\r\n    libc=libc-2.24.so\r\n    so=so\r\n    useshrplib=false\r\n    libperl=libperl.a\r\n    gnulibc_version='2.24'\r\n  Dynamic Linking:\r\n    dlsrc=dl_dlopen.xs\r\n    dlext=so\r\n    d_dlsymun=undef\r\n    ccdlflags='-Wl,-E'\r\n    cccdlflags='-fPIC'\r\n    lddlflags='-shared -O0 -g -L/usr/local/lib -fstack-protector-strong'\r\n\r\n\r\nCharacteristics of this binary (from libperl): \r\n  Compile-time options:\r\n    HAS_TIMES\r\n    MULTIPLICITY\r\n    PERLIO_LAYERS\r\n    PERL_COPY_ON_WRITE\r\n    PERL_DONT_CREATE_GVSV\r\n    PERL_IMPLICIT_CONTEXT\r\n    PERL_MALLOC_WRAP\r\n    PERL_OP_PARENT\r\n    PERL_PRESERVE_IVUV\r\n    PERL_USE_DEVEL\r\n    USE_64_BIT_ALL\r\n    USE_64_BIT_INT\r\n    USE_ITHREADS\r\n    USE_LARGE_FILES\r\n    USE_LOCALE\r\n    USE_LOCALE_COLLATE\r\n    USE_LOCALE_CTYPE\r\n    USE_LOCALE_NUMERIC\r\n    USE_LOCALE_TIME\r\n    USE_PERLIO\r\n    USE_PERL_ATOF\r\n    USE_REENTRANT_API\r\n    USE_THREAD_SAFE_LOCALE\r\n  Built under linux\r\n  Compiled at Oct 25 2019 05:31:00\r\n  %ENV:\r\n    PERLBREW_BASHRC_VERSION=\"0.43\"\r\n    PERLBREW_HOME=\"/home/tony/.perlbrew\"\r\n    PERLBREW_MANPATH=\"\"\r\n    PERLBREW_PATH=\"/home/tony/perl5/perlbrew/bin\"\r\n    PERLBREW_ROOT=\"/home/tony/perl5/perlbrew\"\r\n    PERLBREW_VERSION=\"0.67\"\r\n  @INC:\r\n    lib\r\n    /usr/local/lib/perl5/site_perl/5.31.6/x86_64-linux-thread-multi\r\n    /usr/local/lib/perl5/site_perl/5.31.6\r\n    /usr/local/lib/perl5/5.31.6/x86_64-linux-thread-multi\r\n    /usr/local/lib/perl5/5.31.6\r\n\r\n```\r\n"},{"labels":["enhancement"],"text":"Due to numerous important bugfixes, IPC::Open3 would benefit greatly from being able to update it on old Perls. The particular one I've run into is https://github.com/Perl/perl5/issues/10072. IPC::Open2 is a simple wrapper of it that should be released along with it (as it's currently organized in source)."},{"labels":["enhancement"],"text":"It is quite common in Perl code to want to know if a given object instance is derived from a given class. Such code as\r\n\r\n```perl\r\nif( $obj->isa( \"Some::Class\" ) ) ...\r\n```\r\n\r\nis however insufficient because it relies on invoking a method on what may not in fact be an object at all. Sufficiently-defensive code solves this by such constructs as:\r\n\r\n```perl\r\nuse Scalar::Util 'blessed';\r\n\r\nif( blessed $obj and $obj->isa( \"Some::Class\" ) ) ...\r\n```\r\n\r\nThere are also CPAN-based solutions that try to make this nicer:\r\n\r\n```perl\r\nuse Safe::Isa '$_isa';\r\n\r\nif( $obj->$_isa( \"Some::Class\" ) ) ...\r\n```\r\n\r\nSuch an omission in core Perl appears especially unfortunate in the wider context of thoughts around bringing in more of an OO system.\r\n\r\nIt would be nice if core Perl provided a basic infix operator to perform this test safely. Such an operator could additionally parse a bareword package name correctly in the common case, thus not requiring a `\"quoted\"` name:\r\n\r\n```perl\r\nuse feature 'isa';\r\n\r\nif( $obj isa Some::Class ) ...\r\n```\r\n\r\nIn addition it may be useful to have a `does` operator that tests `->DOES` instead, though I will admit to not fully understanding the subtle semantic difference is between the two."},{"labels":["enhancement"],"text":"this is a discussion started by @FGasper from https://github.com/p5h/p5summit-2019/issues/25\r\n\r\nOver the years I’ve not infrequently encountered this:\r\n```\r\n$form_value ||= $default\r\n```\r\n.. which undesirably rejects 0 as input.\r\n\r\nDefined-or doesn’t help here because the form submits regardless.\r\n\r\nIt would be very helpful if Perl (7?) added a “length-or”: undef and q// are falsy, but everything else is truthy.\r\n\r\nwe already have\r\n```\r\n||=\r\n//=\r\n```\r\nwhat about something like `//=` or any other ?\r\n\r\nFeedback from @leonerd \r\n\r\nIn a sense this points out the duality of the string-or-number model of Perl's type system in that is demonstrates the question of how you ask the \"truth\" of a value really depends on whether you wanted the stringy truth or the numerical truth.\r\n\r\n```perl\r\n# stringily false\r\nundef, \"\"\r\n\r\n# numerically false\r\nundef, 0,  # plus \"\" which is exempt from number->string conversion warnings\r\n```"},{"labels":["enhancement",null,null,null],"text":"Devel::GoFaster provide a prototype to optimize the optree for some common patterns\r\n```\r\n//= 1\r\n```\r\n\r\n@arc was also suggesting in https://github.com/p5h/p5summit-2019/issues/18\r\nto consider \r\n```\r\nEXPR ? 1 : 0 and !!EXPR\r\n1 - !EXPR\r\n```\r\n"},{"labels":["enhancement",null,null],"text":"There are times where C level string manipulation is faster than doing a regex. \r\n\r\nIt would sometimes be faster to be able to run things like\r\n```perl\r\nstrcmp(...)\r\nstrncasecmp(...)\r\n```\r\nalso tr/// is sometimes used as a faster regex.\r\n\r\n@lightsey will provide more details "},{"labels":["enhancement"],"text":"During some p5p discussions today we discussed how doing: \r\n```perl\r\nif($foo =~ m/abc/) { ... }\r\n```\r\nis not as performant as \r\n```perl\r\nif( index($foo, 'abc') >= 0) { ... }\r\n```\r\nIf there was a regex flag that specified that no side effects were needed on the regex, then possibly the op for `$foo =~ m/abc/f` could be changed to an index check which doesn't set any of the regex variables.\r\n\r\nPossibly relevant case #7709"},{"labels":["enhancement",null,null,null],"text":"Migrated from [rt.perl.org#132480](https://rt-archive.perl.org/perl5/Ticket/Display.html?id=132480) (status was 'new')\n\nSearchable as RT132480$\n"},{"labels":["enhancement"],"text":"Migrated from [rt.perl.org#127521](https://rt-archive.perl.org/perl5/Ticket/Display.html?id=127521) (status was 'open')\n\nSearchable as RT127521$\n"},{"labels":["enhancement",null,null,null],"text":"Migrated from [rt.perl.org#119531](https://rt-archive.perl.org/perl5/Ticket/Display.html?id=119531) (status was 'open')\n\nSearchable as RT119531$\n"},{"labels":["enhancement",null,null,null],"text":"Migrated from [rt.perl.org#108286](https://rt-archive.perl.org/perl5/Ticket/Display.html?id=108286) (status was 'open')\n\nSearchable as RT108286$\n"},{"labels":["enhancement",null,null,null],"text":"Migrated from [rt.perl.org#89032](https://rt-archive.perl.org/perl5/Ticket/Display.html?id=89032) (status was 'open')\n\nSearchable as RT89032$\n"}]