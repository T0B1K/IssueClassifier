[
  {
    "labels": ["documentation"],
    "text": "Not really a bug but for a lack of a better category, I'm posting it as such. \r\n\r\nOn the Wiki \"plugins\" page, there is a link to a \"thefuck\" plugin, but it appears to be dead. Searching the page doesn't yield any results other than the table of contents. \r\n\r\nSorry but I don't have time to investigate now - just signaling it in case you want to fix it !\r\n\r\nEdit: apparently it labeled the issue as support rather than bug? pretty sure I selected bug. anyhow :)\r\n"
  },
  {
    "labels": ["documentation"],
    "text": "In the wiki, in the [plugin section](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins), the `stack` link links to nowhere.\r\nEDIT:\r\nI tried to add stack in my zshrc, and it didn't work, even if all other plugins works\r\nError:\r\n```\r\nshika-blyat@shika-blyat  ~  source ~/.zshrc           \r\n/home/shika-blyat/.oh-my-zsh/plugins/stack/stack.plugin.zsh:2: command not found: stack\r\n```\r\nzshrc involved line:\r\n`plugins=(git archlinux cabal cargo cp docker man pip stack rust sublime sudo vscode)`\r\nfull zshrc in case it's useful:\r\nhttps://bin.drlazor.be/holarclump.zsh"
  },
  {
    "labels": ["documentation"],
    "text": "I'm wondering if the terraform plugin is in usable shape, and where I might find documentation for how to use it. I saw it listed on the [wiki plugin page](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins), but the documentation section is missing.\r\n\r\nAny info or help would be great, I don't have a lot of GitHub wiki practice. Thanks!"
  },
  {
    "labels": ["documentation"],
    "text": "**Describe the bug**\r\nThe `jump` link does not link to anything in the list of plugins.\r\n\r\n**To Reproduce**\r\nClick the `jump` link on the page: https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins\r\n\r\n**Expected behavior**\r\nLink doesn't exist or links to the relevant section\r\n"
  },
  {
    "labels": [null, null, "documentation", null],
    "text": "The website has installer options for both curl and wget. Neither of which are out of the box solutions on FreeBSD. This may sound silly since someone may end up installing curl anyways, but have you thought about adding an option for `fetch`?\r\n\r\nIt's very similar to the wget one:\r\n``` bash\r\n\r\n\r\n$ sh -c \"$(fetch https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -o -)\"\r\n\r\n```"
  },
  {
    "labels": ["documentation"],
    "text": "Check this wiki page =>  https://github.com/robbyrussell/oh-my-zsh/wiki/This-seems-to-be-public\r\n<!--\r\nFill this out before posting. You can delete irrelevant sections, but\r\nan issue where no sections have been filled will be deleted without comment.\r\n-->\r\n\r\n**Describe the bug**\r\naccess rights\r\n\r\n**To Reproduce**\r\n<!--\r\nSteps to reproduce the behavior:\r\n1. Go to any wiki page\r\n2. Hit edit\r\n3. Save & boom, its public\r\n-->\r\n\r\n**Expected behavior**\r\nOnly maintainers can edit this.\r\n\r\n\r\n**Fix**\r\n\r\n![Screenshot from 2019-06-28 17-27-54](https://user-images.githubusercontent.com/32242596/60340948-a6a84580-99ca-11e9-9686-7c218e1d5a99.png)\r\n"
  },
  {
    "labels": ["documentation", null],
    "text": "**Describe the bug**\r\nI can't find any documentation on the git prompt.\r\n\r\n**To Reproduce**\r\nDocs -> Plugins\r\nTry to click https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#git-prompt\r\n\r\n**Expected behavior**\r\nDocumentation on git prompt. What is +/-? What is the lightning bolt?\r\n"
  },
  {
    "labels": ["documentation"],
    "text": "providing screenshots of the themes might make choosing a theme easier"
  },
  {
    "labels": ["documentation"],
    "text": "I stumbled across a platform inconsistency with the current sublime plugin.\r\n\r\nIn 2015 @ckesc introduced the `sst` command which sudos sublime (commit 5b90092). Readme was later updated to reflect this change (commit c28b226).\r\n\r\nThis is misleading now. Having a look at the plugin source `sst` is only available for Linux, no alias were introduced for macOS and cygwin. The latter may not provide `sudo` but macOS indeed does."
  },
  {
    "labels": [null, null, "documentation"],
    "text": "_Register at [Hacktoberfest](https://hacktoberfest.digitalocean.com/) before submitting a Pull Request_\r\n\r\n----\r\n\r\nSince [transfer.sh](https://transfer.sh) is shutting down on November 30th we should deprecate the plugin that uses it. The reasoning is that we should encourage users to use a different service, since their files will presumably be gone after it shuts down.\r\n\r\nTo do this, we should both:\r\n\r\n- Add a deprecation warning in the README (explaining the reason)\r\n\r\n- Add a deprecation warning in the `.plugin.zsh` file to run when the plugin is loaded. Extra points for printing the warning with a warning-like color, like yellow or orange.\r\n\r\nAfter November 30th we should give a week or so before completely removing the plugin."
  },
  {
    "labels": [null, null, "documentation"],
    "text": "_Register at [Hacktoberfest](https://hacktoberfest.digitalocean.com/) before submitting a Pull Request_\r\n\r\n----\r\n\r\nFor some time we've had it in our minds to add a README to every plugin, as a way of documenting what the plugin does and what it requires, among other things. We have some READMEs already but most plugins lack one. That's why this issue exists, so you can take part in this effort.\r\n\r\nYou can have a look at [existing plugin READMEs](https://github.com/robbyrussell/oh-my-zsh/search?q=extension%3Amd+path%3Aplugins%2F) (the [yarn README is a great example](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/yarn/README.md)). Also you can find [a Markdown guide here](https://guides.github.com/features/mastering-markdown/).\r\n\r\nThe README should follow a very simple structure:\r\n\r\n1. Name and brief description of what the plugin does. Links to relevant, essential websites.\r\n   For example: the README for the `ant` plugin should link to the [ant project](https://ant.apache.org/).\r\n\r\n2. How to enable the plugin. You can just copy-paste the excerpt below and substitute the word PLUGIN for the name of the plugin:<pre><code>To use it, add PLUGIN to the plugins array of your zshrc file:\r\n\\```\r\nplugins=(... PLUGIN)\r\n\\```</code></pre>\r\n\r\n3. Any other sections that document what the plugin does. Examples of that are: a l[ist of aliases, functions, or commands created](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/archlinux/README.md); a description of [settings that the plugin allows](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/ssh-agent/README.md#instructions); how to [build themes based on the plugin](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/svn/README.md#usage-on-themes), ...\r\n\r\n4. Optionally: a section with a list of contributors.\r\n\r\nYou'll need to read the `.plugin.zsh` file to know what the plugin does or, if there isn't one, the plugin will probably just add completion. You can also get what the plugin does by looking at the commits, or even the [plugins wiki](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins).\r\n\r\nIf you want to work on the README for one of the following plugins, comment below and I'll mark it as such.\r\n\r\nThanks for your contribution and happy Hacktoberfest!\r\n\r\n- [x] [ant](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/ant)\r\n- [x] [autoenv](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/autoenv)\r\n- [x] [autojump](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/autojump)\r\n- [x] [autopep8](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/autopep8)\r\n- [x] [aws](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/aws)\r\n- [x] [battery](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/battery)\r\n- [x] [bower](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bower)\r\n- [x] [brew](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/brew)\r\n- [x] [bwana](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bwana)\r\n- [x] [cabal](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/cabal)\r\n- [x] [cake](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/cake)\r\n- [x] [cakephp3](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/cakephp3)\r\n- [x] [capistrano](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/capistrano)\r\n- [x] [catimg](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/catimg)\r\n- [x] [celery](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/celery)\r\n- [x] [chruby](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/chruby)\r\n- [x] [chucknorris](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/chucknorris)\r\n- [x] [cloudapp](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/cloudapp)\r\n- [x] [codeclimate](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/codeclimate)\r\n- [x] [colemak](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colemak)\r\n- [x] [colored-man-pages](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colored-man-pages)\r\n- [x] [colorize](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colorize)\r\n- [x] [command-not-found](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/command-not-found)\r\n- [x] [common-aliases](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/common-aliases)\r\n- [x] [compleat](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/compleat)\r\n- [x] [composer](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/composer)\r\n- [x] [cpanm](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/cpanm)\r\n- [x] [dash](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/dash) ([website](https://kapeli.com/dash))\r\n- [x] [debian](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/debian)\r\n- [x] [dircycle](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/dircycle)\r\n- [x] [dirhistory](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/dirhistory)\r\n- [x] [dirpersist](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/dirpersist)\r\n- [x] [django](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/django)\r\n- [x] [doctl](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/doctl)\r\n- [x] [eecms](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/eecms)\r\n- [x] [emacs](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/emacs)\r\n- [x] [emoji-clock](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/emoji-clock)\r\n- [x] [emotty](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/emotty)\r\n- [x] [encode64](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/encode64)\r\n- [x] [fabric](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/fabric)\r\n- [x] [fasd](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/fasd)\r\n- [x] [fastfile](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/fastfile)\r\n- [x] [fbterm](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/fbterm)\r\n- [x] [fedora](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/fedora)\r\n- [x] [gas](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gas)\r\n- [x] [gem](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gem)\r\n- [x] [gitfast](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gitfast)\r\n- [x] [git-flow-avh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git-flow-avh)\r\n- [x] [git-hubflow](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git-hubflow)\r\n- [x] [gitignore](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gitignore)\r\n- [x] [git-prompt](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git-prompt)\r\n- [x] [git-remote-branch](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git-remote-branch)\r\n- [x] [glassfish](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/glassfish)\r\n- [x] [gnu-utils](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gnu-utils)\r\n- [x] [go](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/go)\r\n- [x] [golang](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/golang)\r\n- [x] [gpg-agent](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gpg-agent)\r\n- [x] [gradle](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gradle)\r\n- [x] [grails](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/grails)\r\n- [x] [grunt](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/grunt)\r\n- [x] [gulp](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/gulp)\r\n- [x] [helm](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/helm)\r\n- [x] [heroku](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/heroku)\r\n- [x] [homestead](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/homestead)\r\n- [x] [iterm2](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/iterm2)\r\n- [x] [iwhois](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/iwhois)\r\n- [x] [jake-node](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/jake-node)\r\n- [x] [jruby](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/jruby)\r\n- [x] [jump](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/jump)\r\n- [x] [kate](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/kate)\r\n- [x] [kitchen](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/kitchen)\r\n- [x] [knife](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/knife)\r\n- [x] [knife_ssh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/knife_ssh)\r\n- [x] [kops](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/kops)\r\n- [x] [kubectl](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/kubectl)\r\n- [x] [laravel](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/laravel)\r\n- [x] [laravel4](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/laravel4)\r\n- [x] [laravel5](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/laravel5)\r\n- [x] [lein](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/lein)\r\n- [x] [lighthouse](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/lighthouse)\r\n- [x] [lol](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/lol)\r\n- [x] [macports](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/macports)\r\n- [x] [magic-enter](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/magic-enter)\r\n- [x] [man](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/man)\r\n- [x] [minikube](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/minikube)\r\n- [x] [mix](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/mix)\r\n- [x] [mosh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/mosh)\r\n- [x] [mysql-macports](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/mysql-macports)\r\n- [x] [n98-magerun](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/n98-magerun)\r\n- [x] [nanoc](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/nanoc)\r\n- [x] [node](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/node)\r\n- [x] [nvm](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/nvm)\r\n- [x] [nyan](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/nyan)\r\n- [x] [oc](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/oc)\r\n- [x] [otp](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/otp)\r\n- [x] [pass](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pass)\r\n- [x] [paver](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/paver)\r\n- [x] [pep8](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pep8)\r\n- [x] [perl](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/perl)\r\n- [x] [phing](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/phing)\r\n- [x] [pip](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pip)\r\n- [x] [pod](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pod)\r\n- [x] [postgres](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/postgres)\r\n- [x] [pow](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pow)\r\n- [x] [powder](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/powder)\r\n- [x] [powify](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/powify)\r\n- [x] [profiles](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/profiles)\r\n- [x] [pyenv](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pyenv)\r\n- [x] [pylint](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/pylint)\r\n- [x] [python](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/python)\r\n- [x] [rails](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rails)\r\n- [x] [rake](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rake)\r\n- [x] [rbenv](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rbenv)\r\n- [x] [rbfu](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rbfu)\r\n- [x] [rebar](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rebar)\r\n- [x] [redis-cli](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/redis-cli)\r\n- [x] [rsync](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rsync)\r\n- [x] [ruby](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/ruby)\r\n- [x] [rust](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rust)\r\n- [x] [rvm](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/rvm)\r\n- [x] [safe-paste](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/safe-paste)\r\n- [x] [sbt](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sbt)\r\n- [x] [scala](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/scala)\r\n- [x] [screen](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/screen)\r\n- [x] [sfffe](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sfffe)\r\n- [x] [singlechar](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/singlechar)\r\n- [x] [sprunge](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sprunge)\r\n- [x] [stack](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/stack)\r\n- [x] [sudo](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sudo)\r\n- [x] [supervisor](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/supervisor)\r\n- [x] [suse](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/suse)\r\n- [x] [svn-fast-info](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/svn-fast-info)\r\n- [x] [symfony](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/symfony)\r\n- [x] [symfony2](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/symfony2)\r\n- [x] [systemadmin](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/systemadmin)\r\n- [x] [systemd](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/systemd)\r\n- [x] [terminalapp](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/terminalapp)\r\n- [x] [terminitor](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/terminitor)\r\n- [x] [textmate](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/textmate)\r\n- [x] [themes](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/themes)\r\n- [x] [thor](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/thor)\r\n- [x] [tmux](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/tmux)\r\n- [x] [tmux-cssh](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/tmux-cssh)\r\n- [x] [tmuxinator](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/tmuxinator)\r\n- [x] [torrent](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/torrent)\r\n- [x] [tugboat](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/tugboat)\r\n- [x] [ubuntu](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/ubuntu)\r\n- [x] [ufw](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/ufw)\r\n- [x] [vagrant](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/vagrant)\r\n- [x] [virtualenv](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/virtualenv)\r\n- [x] [virtualenvwrapper](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/virtualenvwrapper)\r\n- [x] [vundle](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/vundle)\r\n- [x] [web-search](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/web-search)\r\n- [x] [yii](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/yii)\r\n- [x] [yum](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/yum)\r\n"
  },
  {
    "labels": ["documentation"],
    "text": "Hi! I'm trying to make my first contribution, I would like to add some aliases missing to the cheatsheet. Can someone guide me to the steps on contributing. Please baby steps, its my first time :smile: "
  },
  {
    "labels": ["documentation"],
    "text": "https://github.com/robbyrussell/oh-my-zsh/wiki/Coding-style-guide#good-15\r\n\r\n```console\r\n❯ command() {\r\n${1}\r\n}\r\n\r\n❯ command1() {\r\necho 'space com'\r\n}\r\n\r\n❯ 'space com'() {\r\necho 'hello from space com'\r\n}\r\n\r\n❯ var=\"$(command \"$(command1)\")\"\r\n\r\n❯ echo $var\r\nhello from space com\r\n\r\n❯ var=\"$(command \\\"$(command1)\\\")\"\r\ncommand:1: command not found: \"space\r\n```"
  },
  {
    "labels": [null, "documentation"],
    "text": "On https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git it says `ggpush` is alias and `ggp` is command. It also says: new alias `ggp` (`ggpush `still exists for now though).\r\n\r\nDoes that means that `ggp` will or replaces `ggpush`? Because they don't do same thing. Same with `ggu` and `ggpur`.\r\n"
  },
  {
    "labels": ["documentation"],
    "text": "We should add a \"How to get involved\" section/links for people who visit ohmyz.sh.\r\n\r\n"
  },
  {
    "labels": ["documentation"],
    "text": "I configure the SSH_KEY_PATH as follow:\r\n\r\n```\r\nexport SSH_KEY_PATH=\"~/.ssh/local/private\"\r\n```\r\n\r\nBut it seems that ssh can not use this env variable.\r\n\r\n`ssh -v root@<server-ipaddr> -i ~/.ssh/local/private`  work fine.\r\n\r\n```\r\nssh -v root@<server-ipaddr>\r\nOpenSSH_7.3p1, LibreSSL 2.4.1\r\ndebug1: Reading configuration data /etc/ssh/ssh_config\r\ndebug1: /etc/ssh/ssh_config line 20: Applying options for *\r\ndebug1: Connecting to <server-ipaddr> [<server-ipaddr>] port 22.\r\ndebug1: Connection established.\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_rsa type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_rsa-cert type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_dsa type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_dsa-cert type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_ecdsa type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_ecdsa-cert type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_ed25519 type -1\r\ndebug1: key_load_public: No such file or directory\r\ndebug1: identity file /Users/user/.ssh/id_ed25519-cert type -1\r\ndebug1: Enabling compatibility mode for protocol 2.0\r\ndebug1: Local version string SSH-2.0-OpenSSH_7.3\r\ndebug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.1\r\ndebug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.1 pat OpenSSH* compat 0x04000000\r\ndebug1: Authenticating to <server-ipaddr>:22 as 'root'\r\ndebug1: SSH2_MSG_KEXINIT sent\r\ndebug1: SSH2_MSG_KEXINIT received\r\ndebug1: kex: algorithm: curve25519-sha256@libssh.org\r\ndebug1: kex: host key algorithm: ecdsa-sha2-nistp256\r\ndebug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none\r\ndebug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none\r\ndebug1: expecting SSH2_MSG_KEX_ECDH_REPLY\r\ndebug1: Server host key: ecdsa-sha2-nistp256 SHA256:WLyj6ZeoXDVR5sVb68/L+WnStS/L5ALWqe0q9bAnqsM\r\ndebug1: Host '<server-ipaddr>' is known and matches the ECDSA host key.\r\ndebug1: Found key in /Users/user/.ssh/known_hosts:1\r\ndebug1: rekey after 134217728 blocks\r\ndebug1: SSH2_MSG_NEWKEYS sent\r\ndebug1: expecting SSH2_MSG_NEWKEYS\r\ndebug1: rekey after 134217728 blocks\r\ndebug1: SSH2_MSG_NEWKEYS received\r\ndebug1: SSH2_MSG_EXT_INFO received\r\ndebug1: kex_input_ext_info: server-sig-algs=<rsa-sha2-256,rsa-sha2-512>\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: /Users/user/.ssh/id_rsa\r\ndebug1: Trying private key: /Users/user/.ssh/id_dsa\r\ndebug1: Trying private key: /Users/user/.ssh/id_ecdsa\r\ndebug1: Trying private key: /Users/user/.ssh/id_ed25519\r\ndebug1: Next authentication method: password\r\nroot@<server-ipaddr>'s password:\r\n```"
  },
  {
    "labels": ["documentation", null],
    "text": "A co-worker introduced me to Oh-My-Zsh several months back, and it has since migrated to be on a number of my own personal systems. It's going to stay on these, so I stay up to date with the latest and greatest from Oh-My-Zsh. :+1:\n\nHowever, I'd also like to extend some of the goodness to more restricted environments, like servers, in a more light-weight and controlled manner. How would I go about understanding how Oh-My-Zsh hooks into Zsh and then extracting specific pieces of Oh-My-Zsh into a flat .zshrc file?\n"
  },
  {
    "labels": ["documentation"],
    "text": "The https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview page is a long listing with sometimes a description of the required package it may enhance, sometimes a description of enhancements.\n\nSuggested format: Keep the grouping, but make a [table](https://help.github.com/articles/github-flavored-markdown/#tables) for each with columns:\n- For (dependent package/name or the program is enhanced, for example mvn plugin enhances Maven)\n- _Auto-complete_ (yes if it has adds auto-completion for that package)\n- _Aliases_ (at least a check if it adds aliases, preferable a list of some aliases it adds\n- _Functions_ (list of other functions that it adds to ZSH, like node plugin adds node-docs; for git plugin it also shows current branch name...)\n"
  },
  {
    "labels": ["documentation"],
    "text": "I assume I'm just missing it - but I've been looking and cannot find documentation of the oh-my-zsh options (configurable variables, exported functions).\n\nThere are some variables referenced with some documentation in the zshrc.zsh-template file:\n\n```\n# CASE_SENSITIVE=\"true\"\n...\n# ZSH_CUSTOM=/path/to/new-custom-folder\n```\n\nIs this a comprehensive list of the configurable variables? Are there oh-my-zsh \"api\" functions as well, documented somewhere else perhaps?\n\nIn the themes, I see lots of references to other configurable values as well - the most common seem to revolve around git, for example:\n\n```\nZSH_THEME_GIT_PROMPT_PREFIX=\"${PR_RESET}${PR_RED}‹git:\"\n...\nZSH_THEME_GIT_PROMPT_UNTRACKED=\"${PR_RESET}${PR_YELLOW} ✭${PR_RESET}\"\n```\n\nI checked the [git plugin](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh) but I don't see any of these values referenced.\n\nI then checked the [git lib](https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/git.zsh) and I see several git related functions defined and these variables are referenced. There appears to be some minimal documentation on the functions there.\n\nI started hacking together my own prompt and started to add virtualenv support - there is no lib for virtualenv - but there is a plugin which contains:\n\n```\nfunction virtualenv_prompt_info(){\n  if [[ -n $VIRTUAL_ENV ]]; then\n    printf \"%s[%s] \" \"%{${fg[yellow]}%}\" ${${VIRTUAL_ENV}:t}\n  fi\n}\n\n# disables prompt mangling in virtual_env/bin/activate\nexport VIRTUAL_ENV_DISABLE_PROMPT=1\n```\n\nI assume that I call virtualenv_prompt_info() to display the name of the virtualenv in my prompt, (haven't tried it yet), but I am unsure how it's being detected, or how I should be configuring the way in which it's displayed (colors, etc).\n\nIs there a developer guide or similar documentation that provides information on how things in oh-my-zsh are done? A comprehensive list of variables/functions that can be used and how they should be used?\n\nFrom the virtualenv & git examples above, XXXX_prompt_info seems to be a standard naming convention - is there some kind of oh-my-zsh magic that defines standard configurable values for these functions?\n\nI apologize of these things should be self-evident and I'm just super dense. If documentation exists somewhere, can someone point me to it?\n"
  }
]
