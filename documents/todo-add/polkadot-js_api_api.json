[{"labels":[null,"api",null],"text":"As per discussion in Riot, ApiPromise currently exposes WsProvider.disconnect() via ApiPromise.disconnect(), but it does not expose WsProvider.connect() via the ApiPromise interface. In order to make an intuitive interface and not cause any breaking changes, ApiPromise could expose a connect() method.\r\n\r\nI don't see this as urgent at all, but just nice to have in the long term in order to avoid confusion. I would be happy to take a stab at it myself."},{"labels":[null,"api",null],"text":"I'm creating two `ApiPromise` instances, one use to connect Kusama network and the other use to connect Polkadot network. When I use the two instances to call `paymentInfo` for estimate tx fee at the same time, then get error below:\r\n\r\n`RPC-CORE: queryInfo(extrinsic: Bytes, at?: BlockHash): RuntimeDispatchInfo:: 2: Unable to query dispatch info.: Error decoding field Call :: Authorship.0`\r\n\r\nmy code:\r\n\r\n    const kusamaApi = new ApiPromise({ provider: kusamaProvider });\r\n    await kusamaApi.isReady;\r\n    const polkadotApi = new ApiPromise({ provider: polkadotProvider });\r\n    await polkadotApi.isReady;\r\n\r\n    const transfer = await kusamaApi.tx.balances.transfer(\"Efc2jfxwUVUrjCSs4t3o6QJU3R8xqtHpwDvhD2f1oKactFX\", 1)\r\n        .paymentInfo(\"Efc2jfxwUVUrjCSs4t3o6QJU3R8xqtHpwDvhD2f1oKactFX\");\r\n\r\n    const transfer2 = await polkadotApi.tx.balances.transfer(\"136HWkbAAtk2YcPX41813HsTB58YrUdFT47fTqk4668c4Fkv\", 1)\r\n        // this call will get error\r\n        .paymentInfo(\"136HWkbAAtk2YcPX41813HsTB58YrUdFT47fTqk4668c4Fkv\");\r\n"},{"labels":[null,"api",null],"text":"Hi! I'm using ApiPromise with websocket provider as singleton like this:\r\n\r\n```\r\nlet wsProvider;\r\nlet client;\r\n\r\nfunction createClientInstance() {\r\n  wsProvider = new WsProvider('wss://rpc.polkadot.io');\r\n\r\n  client = new ApiPromise({ provider: wsProvider });\r\n}\r\n\r\nasync function buildDotClient() {\r\n  try {\r\n    if (!wsProvider) {\r\n      createClientInstance();\r\n    }\r\n\r\n    await client.isReady;\r\n\r\n    return client;\r\n  } catch (e) {\r\n    throw new Error('service_unavailable');\r\n  }\r\n}\r\n```\r\n\r\nAnd then use client in some script inside interval. But from time to time I get such errors:\r\n`API-WS: disconnected from wss://rpc.polkadot.io code: '1006' reason: 'Connection dropped by remote peer.'`\r\n`API-WS: disconnected from wss://rpc.polkadot.io code: '1006' reason: 'connection failed'`\r\n\r\nAnd after throwing such error from ApiPromise, script gets stuck. It's even impossible to catch for following restart.\r\nI even tried to add event emitter listenings, but still the same:\r\n```\r\n    client.on('disconnected', () => {\r\n      createClientInstance();\r\n    });\r\n\r\n    client.on('error', () => {\r\n      createClientInstance();\r\n    });\r\n```\r\n\r\nMaybe it is possible to restart connection manually?\r\n\r\nPackage version:\r\n\"@polkadot/api\": \"^1.30.1\""},{"labels":[null,"api",null,null],"text":"There're cases we want to query metadata of a past block for comparison and don't want to have any side effects for such query. But with current implementation, it actually call `registry.setMetadata()`.\r\nI believe this is an unexpected behavior for most people.\r\n\r\nhttps://github.com/polkadot-js/api/blob/9c1327ea22e1e8600fa8d216ce36f6618ffdb093/packages/metadata/src/Metadata/MetadataVersioned.ts#L44"},{"labels":[null,"api",null],"text":"I have just rolled through the Getting Started section in tandem with the Substrate intro tutorial. Awesome work on the platform and the docs BTW, it was really fun to get straight in and have a jam.\r\n\r\nSome constrictive feedback:\r\nAs a newcomer to blockchain tech in general, I stumbled on the Transactions / Keyring section. I would suggest putting an even simpler high level primer at the start of the Keyring section to ensure the basic concept of a decentralised identity/wallet is clear. Also a bit more explanation about the demo accounts that are preloaded in the substrate demo node and that they're URI based would be helpful for the uninitiated amongst us.\r\n\r\nAgain, thanks for all the awesome work on this!"},{"labels":[null,"api",null],"text":"I would like to query historical account balances for all accounts at a particular block, something like\r\n\r\n```\r\nconst accounts = await api.query.system.account.at(blockHash).entries()\r\n```\r\n\r\nBut looks like not possible with current polkadot.js.\r\n\r\nOne way is add `blockHash` to `.entries()` and pass it to `getKeysPaged`"},{"labels":[null,"api",null],"text":"I'm running into this error when using `@polkadot/api` `1.24.1` with next.js.\r\n\r\nSeems that `setImmediate` was introduced recently, and this is causing things to things to break when using in browser (setImmediate works in node but not browser?). \r\n\r\n`subscription Api.js:75`\r\n\r\nIntorduced: https://github.com/polkadot-js/api/pull/2385/files#diff-720ad58d2f28c4d558cb24bca641b1e4\r\n\r\n"},{"labels":[null,"api",null],"text":"As per https://github.com/paritytech/substrate/issues/6483"},{"labels":[null,"api",null],"text":"Currently, the metadata API containing items like `api.consts.system.extrinsicBaseWeight` always returns the value extracted from the latest metadata. For some applications like calculating fees of historical transactions it is necessary to access metadata of the block (or rather its parent) where the transaction resides in.\r\n\r\nIt would be nice to have an API similar to the one provided for accessing storage using the `at` function:\r\n```\r\napi.query.transactionPayment.nextFeeMultiplier.at(blockHash);\r\n```"},{"labels":[null,"api",null,null],"text":"https://github.com/paritytech/substrate/pull/6300\r\n\r\nRPC `system_dryRun` allow to dry run an extrinsic before submit it."},{"labels":[null,"api",null,null],"text":"We have some breaking changes between our old and new testnet and we would like to have a single API that support both testnet.\r\n\r\nBut seems like the filterVersions is not been called on user provided types and we cannot know which types without knowing the spec version first.\r\n\r\nhttps://github.com/polkadot-js/api/blob/e6beb6554dff7ac61fd2e9d16b2631978e6ec626/packages/types-known/src/index.ts#L59-L62\r\n\r\nFor now we can use the chain name to distinguish between versions, but won't work once we introduce breaking changes in our public testnet via runtime upgrade.\r\n\r\nWe would like to pass something like this to API contractor and have it detect and use correct types based on spec version\r\n\r\n```\r\nexport const typeChain: Record<string, OverrideVersionedType[]> = {\r\n  acala: [\r\n    {\r\n      minmax: [undefined, 403],\r\n      types: {\r\n        Weight: 'u32'\r\n      }\r\n    }\r\n  ]\r\n};\r\n```"},{"labels":[null,"api",null],"text":"![image](https://user-images.githubusercontent.com/7029338/81252517-3b171600-907a-11ea-9059-3454b7784cac.png)\r\nhttps://github.com/polkadot-js/api/blob/master/packages/api/src/base/Init.ts#L130-L145\r\nBecause of these lines of code, metadata is requested twice, causing unnecessary performance problems.\r\nThere's a simple fix:\r\n![image](https://user-images.githubusercontent.com/7029338/81252742-ca242e00-907a-11ea-820b-b933e24b41bf.png)\r\nAdd `skip(1)`. Skip the first time and avoid repeated initialization."},{"labels":[null,"api",null],"text":"Is it possible to use `.multi` and `.queryMulit` together with `.at`. I am trying to minimize number of calls I make to the node."},{"labels":[null,"api",null],"text":"It would be really nice to have a search bar in the documentation! I always struggle to navigate to the right subpage.\r\n\r\nJaco mentioned on Riot that there is a search plugin available for vue-press. Sadly, I have no experience with vue.js, so I can't really create a PR myself."},{"labels":[null,"api",null],"text":"tx signing is broken after update :("},{"labels":[null,"api",null],"text":"This has been dragging locally-WIP for too long, get it in."},{"labels":[null,"api",null],"text":"Specifically https://github.com/polkadot-js/api/blob/master/packages/api/src/base/Decorate.ts#L505"},{"labels":["api",null],"text":"Secure EcmaScript proposal: https://github.com/tc39/proposal-ses\r\n\r\n### Steps to reproduce:\r\nOnly way we know how  to reproduce is to run build on:\r\nhttps://github.com/NodeFactoryIo/metamask-snap-polkadot/tree/feature/connect-to-node\r\n\r\n### Error:\r\n```\r\nBuild success: 'build/index.js' bundled as 'dist/bundle.js'!\r\nSnap evaluation error: possible import expression rejected around line 8527\r\n```\r\n\r\nCode:\r\n![image](https://user-images.githubusercontent.com/8836210/76956534-83387880-6914-11ea-9f72-fb356d8d61c8.png)\r\nWhich makes no sense as that line contains comment so it might be due to snap evaluation code."},{"labels":[null,"api",null],"text":"Returns this error:\r\n```\r\n{\"error\":\"Error: system.events() does not take any arguments, 2 found\"}\r\n```"},{"labels":[null,"api",null],"text":"```\r\nconst tx = api.tx.balances.transfer\r\ntx.sign(pair)\r\n```\r\n\r\nthis signs the transaction with nonce `0`, which is kind of unexpected.\r\n\r\n`signAsync` does fetch nonce, but docs doesn't really indicate the difference between `sign` and `signAsync`"},{"labels":[null,null,"api",null],"text":"### Goal:\r\n\r\nUpdate `signAsync` to make the second argument optional, and default to `{}`\r\n\r\n### Background:\r\n\r\nCurrently this code will crash:\r\n\r\n`const signed = await api.system.remark().signAsync(pair, options);` when `options` is `undefined`, it gives this error\r\n\r\n```\r\n(node:78914) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nonce' of undefined\r\n    at Submittable.value (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:59:42)\r\n    at Submittable.value (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:129:99)\r\n    at /Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:251:110\r\n    at /Users/xiliangchen/projects/playground/node_modules/@polkadot/api/promise/Api.js:78:14\r\n    at Submittable.signAsync (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:251:170)\r\n    at /Users/xiliangchen/projects/playground/index.ts:28:33\r\n    at step (/Users/xiliangchen/projects/playground/index.ts:33:23)\r\n    at Object.next (/Users/xiliangchen/projects/playground/index.ts:14:53)\r\n    at /Users/xiliangchen/projects/playground/index.ts:8:71\r\n    at new Promise (<anonymous>)\r\n```\r\n\r\n### Actions:\r\n\r\nMake second argument optional\r\n\r\nhttps://github.com/polkadot-js/api/blob/e77050b9f59a0b772d1d0b8c5c1da488a7c36810/packages/api/src/submittable/createClass.ts#L72\r\n\r\nUpdate interface\r\n\r\nhttps://github.com/polkadot-js/api/blob/e77050b9f59a0b772d1d0b8c5c1da488a7c36810/packages/api/src/submittable/types.ts#L55\r\n\r\nProvide appropriate unit tests.\r\n\r\n----\r\n\r\n@jacogr please tag this if you are happy about this.\r\n\r\nTags:\r\n`bounty-awaiting-approval`\r\n`bounty-XS`"},{"labels":[null,"api",null,null],"text":"As commented here https://github.com/polkadot-js/api/issues/1937#issuecomment-592561157\r\n\r\nExplicitly we want to have the following functionality, https://github.com/polkadot-js/api/blob/master/packages/types/src/known/overrides.ts#L8-L34"},{"labels":[null,"api",null],"text":"As discussed in riot chat, this function would work like `.at(blockHash)` but return results in a range of blocks"},{"labels":[null,"api",null],"text":"Right now the only way of using queryMulti is providing a callback that gets called whenever the stored values change. It would be useful if there was also a callback-less version that simply returned the values wrapped in a promise (as with other query methods)"},{"labels":[null,"api",null],"text":""},{"labels":[null,"api",null],"text":"As soon as paritytech/substrate#4895 is merged"},{"labels":[null,"api",null,null],"text":"API should also include this dep as to not \"lose functionality\", i.e. user scripts. Form @polkadot/types we can then remove the @polkadot/api dependency (that is there for chain retrieval in the scripts)"},{"labels":[null,"api",null],"text":"As per https://github.com/polkadot-js/api/issues/1742#issuecomment-586579083"},{"labels":[null,"api",null,null,null],"text":"After https://github.com/polkadot-js/api/pull/1844\r\n\r\nNot yet on Polkadot, but PR incoming. Replace with system.account\r\n\r\nThis is -\r\n\r\n- all comments\r\n- all examples\r\n- all doc walk-throughs"},{"labels":[null,"api",null,null],"text":"To be deployed to Kusama and Polkadot"},{"labels":[null,"api",null,null],"text":"TS complains with a:\r\n> Property 'signAndSend' does not exist on type 'Call'.ts(2339)\r\n\r\nwhen using the following code:\r\n```js\r\nconst wsProvider = new WsProvider('ws://127.0.0.1:9944');\r\nconst api = await ApiPromise.create({ provider: wsProvider });\r\nawait web3Enable(APP);\r\n\r\nconst allAccounts = await web3Accounts();\r\nconst injected = await web3FromSource(allAccounts[0].meta.source);\r\napi.setSigner(injected.signer);\r\nconst keyring = new Keyring({ type: 'sr25519' });\r\nconst account = keyring.getPair(allAccounts[0].address);\r\nconst transfer = api.tx.democracy.second('0x01');\r\n\r\n// Sign and Send the extrinsic\r\ntransfer.signAndSend(account, ({ events = [], status }) => {\r\nif (status.isFinalized) {\r\n  console.log('Successful extrinsic with hash ' + status.asFinalized.toHex());\r\n} else {\r\n  console.log('Status of extrinsic: ' + status.type);\r\n}\r\n```\r\n\r\ncc @niklabh https://github.com/paritytech/polkassembly/pull/265"},{"labels":[null,"api",null],"text":"https://github.com/paritytech/substrate/pull/4718\r\n\r\n`state_getKeys` should be avoided and usage should be replaced by `state_getKeysPaged`"},{"labels":["api"],"text":"PR https://github.com/polkadot-js/api/pull/1758\r\n\r\nThis PR broke ability to bundle the api package with wepback because of unsafe require.\r\n\r\nI used to bundle this package with webpack, but updating to the new version (from v0.100.1 to v1.0.1) broke webpack bundle ability.\r\n\r\nMy webpack.config.js:\r\n```javascript\r\n        target: \"node\",\r\n        mode: \"development\",\r\n        output: {\r\n            path: path.resolve(profilePath, 'dist'),\r\n            filename: 'file.js',\r\n            libraryTarget: 'umd',\r\n            library: 'profile',\r\n            umdNamedDefine: true\r\n        },\r\n        resolve: {\r\n            extensions: ['.ts', '.js']\r\n        },\r\n        node: {\r\n            fs: \"empty\"\r\n        },\r\n        module: {\r\n            exprContextCritical: false,\r\n            rules: [\r\n                {\r\n                    test: /\\.ts$/,\r\n                    loader: require.resolve('ts-loader'),\r\n                    exclude: /node_modules/,\r\n                    options: {\r\n                        configFile: tsconfig,\r\n                        context: profilePath,\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n```\r\n\r\nWebpack error:\r\n`\r\n./node_modules/@polkadot/api/index.js\r\nModule not found: Error: Can't resolve '../package.json' in '/myproject/node_modules/@polkadot/api'\r\nresolve '../package.json' in '/myproject/node_modules/@polkadot/api'\r\n  using description file: /myproject/node_modules/@polkadot/api/package.json (relative path: .)\r\n    using description file: /myproject/package.json (relative path: ./node_modules/@polkadot/package.json)\r\n      no extension\r\n        /myproject/node_modules/@polkadot/package.json doesn't exist\r\n      .ts\r\n        /myproject/node_modules/@polkadot/package.json.ts doesn't exist\r\n      .js\r\n        /myproject/node_modules/@polkadot/package.json.js doesn't exist\r\n      as directory\r\n        /myproject/node_modules/@polkadot/package.json doesn't exist\r\n[/myproject/node_modules/@polkadot/package.json]\r\n[/myproject/node_modules/@polkadot/package.json.ts]\r\n[/myproject/node_modules/@polkadot/package.json.js]\r\n`"},{"labels":[null,null,"api",null,null,null],"text":"- Introduced in https://github.com/paritytech/substrate/pull/4474"},{"labels":[null,"api",null],"text":"It is possible to add custom RPC on Substrate side and we have done that. Now the question is how to make it available in polkadot.js?\r\n\r\nI think the API needs a way to allow user to register custom RPC just like register custom types.\r\n"},{"labels":[null,"api",null,null],"text":"I'm trying to connect to my unsynced node with api 1.0.0-beta.17 \r\n```\r\ntarget=#750431 (25 peers), best: #520014\r\n```\r\nI'm getting \r\n![Screen Shot 2020-01-23 at 16 42 13](https://user-images.githubusercontent.com/3409250/72999295-74938080-3dff-11ea-9667-bd96dcc9c5bd.png)\r\n\r\nwhich is uncatchable with both of these\r\n\r\n```javascript \r\ntry {\r\n  let api = await ApiPromise.create().catch(e => {})\r\n} catch (e) {}\r\n```\r\n\r\nIt also doesn't emit error on \r\n```javascript\r\nprovider.on('error',(e)=>{})\r\n```\r\n\r\nIt results in stuck application since I can't react on anything that happened here. It also happens when you get error while connecting to ``wsprovider`` but it can be handled by wrapping api creation inside another promise, which I can reject. It is not ideal, but it works.\r\n\r\nWhen trying to connect to ``wss://cc3-5.kusama.network/`` I get this on the other hand\r\n\r\n![Screen Shot 2020-01-23 at 16 41 42](https://user-images.githubusercontent.com/3409250/72999309-79583480-3dff-11ea-839f-8dc55b605d44.png)\r\n"},{"labels":[null,"api",null],"text":"When trying to query all the nominators from a `linked_map`:\r\n\r\n```\r\nlet result = await api.query.staking.nominators();\r\nconsole.log(JSON.stringify(result));\r\n```\r\n\r\nI get the error:\r\n\r\n```\r\nTypeError: Cannot read property 'next' of undefined\r\n    at SwitchMapSubscriber.project (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/@polkadot/api/base/Decorate.js:289:19)\r\n    at SwitchMapSubscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/operators/switchMap.js:49:27)\r\n    at SwitchMapSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at ReplaySubject.Subject.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subject.js:60:25)\r\n    at ReplaySubject.nextInfiniteTimeWindow (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/ReplaySubject.js:48:31)\r\n    at ConnectableSubscriber.Subscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:89:26)\r\n    at ConnectableSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at DistinctUntilChangedSubscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/operators/distinctUntilChanged.js:69:30)\r\n    at DistinctUntilChangedSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at CatchSubscriber.Subscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:89:26)\r\n```\r\n\r\nBut calling `validators()` work just fine :)"},{"labels":[null,"api",null],"text":"Conversely, `signAndSend` does support external signers"},{"labels":[null,"api",null],"text":"I'm using an `Option<MyType>` in a custom extrinsic signed payload.\r\nThe expected behavior is unclear for the `None` case. \r\nThe rust side expects a `0` to be encoded for the signature to verify.\r\nThis implementation encodes nothing for `None` when `isBare = true`\r\n\r\n`Option` is an implementation detail so it seems that polkadot-js/api is taking the correct approach here but the change will be much harder to implement on the substrate side.\r\n\r\nhttps://github.com/polkadot-js/api/blob/56dc116d92ed3de5994e3dc7c767940617e088e9/packages/types/src/codec/Option.ts#L133-L149"},{"labels":[null,"api",null],"text":"Currently it does not complain when sending too many args."},{"labels":[null,"api",null],"text":"This may seem a dumb issue but when trying to fetch metadata from Edgeware via `yarn run chain:info --ws  wss://mainnet1.edgewa.re`, the connection is always rejected with error message: `API-WS: disconnected from wss://mainnet1.edgewa.re code: '1006' reason: 'connection failed'`. This is not the case with any of the other hosted nodes (Kusama, Flaming Fir, etc.) nor with a local node.\r\n\r\nWeird part is that I'm able to connect to Edgeware on apps and get the metadata through the apps toolbox no problem. "},{"labels":[null,"api",null],"text":"SubmittableExtrinsic.js: send and sendAndSign's subscribe does not work\r\n```\r\nextrinsic.signAndSend(signer, { nonce }, ({ events = [], status }) => {\r\n                console.log('Transaction status:', status.type);\r\n\r\n                if (status.isFinalized) {\r\n                    console.log('Completed at block hash', status.asFinalized.toHex());\r\n                    console.log('Events:');\r\n\r\n                    events.forEach(({ phase, event: { data, method, section } }) => {\r\n                        console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\r\n                    });\r\n\r\n                    process.exit(0);\r\n                }\r\n            });\r\n```\r\nTypeError: Cannot read property 'type' of undefined"},{"labels":[null,"api",null],"text":"https://github.com/polkadot-js/api/pull/1397#issue-317565470"},{"labels":[null,"api",null,null],"text":"As per https://github.com/paritytech/substrate/pull/3613"},{"labels":[null,"api",null],"text":"When using custom extrinsic, got an error `1010: Invalid Transaction (-20)`.\r\n\r\nAfter some debugging, it is because of Submittable extends original Extrinsic not the customized impl, then in `Extrinsic.ts:55` where it should pass the if check it fails. (value is a Submittable)\r\n"},{"labels":[null,"api",null,null],"text":"Usually customization of extrinsic adds extra fields, like the one we do on our chain adds two extra fields. These extra fields usually need to be passed to signer as part of ExtrinsicPayload.\r\n\r\nCurrently ExtrinsicPayloadValue and SignerPayload are quite specific to the default impl, because it uses method not extrinsic. Things were different at v0.81.x, which is the version we are upgrading our lib from.\r\n"},{"labels":[null,"api",null],"text":"The current rpc mocks do something, but don't do it very well and it exceptionally messy to say the least.\r\n\r\nWant to steal some stuff from @jnaviask for this, he actually laid the base for something that actually works properly..."},{"labels":[null,"api",null],"text":"I'm trying to migrate my signer lib to use the new signer interface, then i noticed the dependency requirement changed. Before, my signer lib didn't have to depend on `@polkadot/api` or `@polkadot/types`, extrinsic is passed in and i only need to get the key pair what it's asked for.\r\nBut now, I need SignaturePayload from `@polkadot/types`, which means future change from `@polkadot` might break my signer lib.\r\n\r\nso, can we make SignerPayload support toU8a(), which return the same encoded u8a we passed to IKeyringPair.sign(). (cennznet/api/packages/types/src/primitive/Extrinsic/util.ts)\r\n\r\nthen i can remove the dependency of `@polkadot/types` from my lib."},{"labels":[null,"api",null],"text":"Just noticed an edge-case where trying to send an extrinsic before the first block is finalized causes the following error:\r\n```\r\nAPI/DECORATOR: Error: FATAL: Unable to initialize the API: Cannot read property 'type' of undefined\r\n    at EventEmitter.<anonymous> (.../node_modules/@polkadot/api/Base.js:499:23)\r\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\r\n```\r\nDue to: https://github.com/polkadot-js/api/blob/73a0596fd9d12782c1d943de95948a11b2ba78e9/packages/api/src/Base.ts#L548"},{"labels":[null,"api",null],"text":"Currently it only allows for Extrinsic payloads."},{"labels":[null,"api",null],"text":""},{"labels":[null,"api",null],"text":"i.e. `api.type(<Name>, ...args)` to map to as-is to `createType`. Mention `createType` as removed in the future"},{"labels":[null,"api",null],"text":"i.e. https://github.com/polkadot-js/api/pull/1171/files#diff-a60854aee74a1ede6dc8edf6544d4240R1485\r\n\r\n(These have a specific meaning, code-time constants)\r\n\r\nCurrently: `api.consts.session.dedupKeyPrefix`\r\nExpected: `api.consts.session.DEDUP_KEY_PREFIX`"},{"labels":["api",null],"text":"When trying to call `api.tx.system.setCode()` with a large code example (eb 262146 or 131072 bytes),  the transaction starts is return `Finalized`, but the extrinsic fails:\r\n` {\"ApplyExtrinsic\":2} : system.ExtrinsicFailed []`\r\n\r\nThis happens both wrapped in an democracy proposal or called directly via sudo.\r\n<img width=\"1391\" alt=\"Screenshot 2019-07-24 at 11 10 05\" src=\"https://user-images.githubusercontent.com/125398/61781915-773bfb80-ae05-11e9-96f5-a31089d13857.png\">\r\n\r\nThe behaviour can be reproduced by uploading this file (262146 bytes) https://github.com/polkadot-js/api/blob/b1b4530bf13ab6ef2480e42ac0b71bde14a0e707/packages/api/test/mock-data/randomAsHexRaw in the PolkadotJS UI https://polkadot.js.org/apps/#/democracy/propose\r\n\r\nor by running this test https://github.com/polkadot-js/api/blob/b1b4530bf13ab6ef2480e42ac0b71bde14a0e707/packages/api/test/e2e/api/promise-tx.spec.ts#L112\r\n\r\nBoth the UI and the e2e tests are working fine with smaller code examples."},{"labels":[null,"api",null],"text":"Doing the query on the UI for a single value, I would expect the default to come back, however, everything is returned -\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/61746018-14157f00-ad9b-11e9-8879-10465c3eb483.png)\r\n\r\nNeed to confirm with e2e test -\r\n\r\n- when no params are passed - return the full list\r\n- when a param is passed - return a single entry"},{"labels":[null,"api",null],"text":"Addresses \"Fix broken / outdated tests\" of https://github.com/polkadot-js/api/issues/908\r\n\r\nConvert all e2e tests to use describeE2E as introduced in https://github.com/polkadot-js/api/pull/1117: \r\n\r\nThese tests should pass without errors/ warnings:\r\n`$ yarn run test:e2e-docker`\r\n`$ yarn run test:e2e-remote`\r\n\r\nFiles that need fixing in `packages/api/test/e2e`:\r\n\r\n`/api/`\r\n- [ ] ( promise-alex-archive.spec.ts ??)\r\n- [x] promise-alex.spec.ts\r\n- [x] promise-consts.spec.ts\r\n- [x] promise-contract.spec.ts\r\n- [x] promise-queries-dev.spec.ts _(see known failing tests)_\r\n- [x] promise-queries-doubleMap.spec.ts\r\n- [x] promise-queries.spec.ts _(see known failing tests)_\r\n- [ ] promise-tx-era.spec.ts\r\n- [x] promise-tx-signer.spec.ts _(see known failing tests)_\r\n- [x] promise-tx.spec.ts _(see known failing tests)_\r\n- [x] rx-queries-dev.spec.ts\r\n- [x] rx-queries.spec.ts\r\n- [ ] rx-tx.spec.ts\r\n\r\n`/api-derive/`\r\n- [ ] promise-dev.spec.ts\r\n- [ ] promise.spec.ts\r\n- [ ] rx-dev.spec.ts\r\n- [ ] rx.spec.ts\r\n\r\n`/rpc-core/`\r\n- [x] alexander.spec.ts\r\n- [x] basics.spec.ts\r\n- [x] chain.spec.ts\r\n- [x] state.spec.ts\r\n- [x] child-storage.spec.ts\r\n- [x] subscribe.spec.ts\r\n\r\n\r\n\r\n"},{"labels":[null,"api",null,null],"text":"https://github.com/paritytech/substrate/pull/3102"},{"labels":[null,null,"api",null],"text":"Encode to hex, external signer can decode. Will break the interface if people rely on having the codec methods there.\r\n\r\nMentioned in https://github.com/polkadot-js/api/pull/1114#discussion_r303033434"},{"labels":["api",null],"text":"On a recent v2.0 Substrate node\r\n\r\nThe test \"derive e2e › retrieves all staking info (for controller)\" fails with the following:\r\n```bash\r\n    TypeError: Cannot read property 'creator' of undefined\r\n\r\n      560 |           // the input is a QueryableStorageEntry, convert to StorageEntry\r\n      561 |           Array.isArray(arg)\r\n    > 562 |             ? [arg[0].creator, ...arg.slice(1)]\r\n          |                       ^\r\n      563 |             : [arg.creator] as any\r\n      564 |         );\r\n      565 | \r\n\r\n      at creator (packages/api/src/Base.ts:562:23)\r\n          at Array.map (<anonymous>)\r\n      at Object.map [as queryMulti] (packages/api/src/Base.ts:559:30)\r\n      at queryMulti (packages/api-derive/src/staking/info.ts:125:9)\r\n      at SwitchMapSubscriber.withControllerLedger [as project] (packages/api-derive/src/staking/info.ts:167:17)\r\n      at SwitchMapSubscriber.Object.<anonymous>.SwitchMapSubscriber._next (node_modules/rxjs/src/internal/operators/switchMap.ts:123:21)\r\n      at SwitchMapSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at RefCountSubscriber.Object.<anonymous>.Subscriber._next (node_modules/rxjs/src/internal/Subscriber.ts:139:22)\r\n      at RefCountSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at ReplaySubject.Object.<anonymous>.Subject.next (node_modules/rxjs/src/internal/Subject.ts:70:17)\r\n      at ReplaySubject.Object.<anonymous>.ReplaySubject.nextInfiniteTimeWindow (node_modules/rxjs/src/internal/ReplaySubject.ts:46:15)\r\n      at ConnectableSubscriber.Object.<anonymous>.Subscriber._next (node_modules/rxjs/src/internal/Subscriber.ts:139:22)\r\n      at ConnectableSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at Object.next [as callback] (packages/rpc-core/src/index.ts:183:22)\r\n      at WsProvider.callback [as onSocketMessageSubscribe] (packages/rpc-provider/src/ws/Provider.ts:352:15)\r\n      at WsProvider.onSocketMessageSubscribe [as onSocketMessageResult] (packages/rpc-provider/src/ws/Provider.ts:323:16)\r\n      at WebSocket.onSocketMessageResult (packages/rpc-provider/src/ws/Provider.ts:292:14)\r\n      at WebSocket.<anonymous> (node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js:33:32)\r\n      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n      at WebSocketImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n      at WebSocketImpl._onMessageReceived (node_modules/jsdom/lib/jsdom/living/websockets/WebSocket-impl.js:208:10)\r\n      at Receiver.receiverOnMessage (node_modules/ws/lib/websocket.js:720:20)\r\n      at Receiver.dataMessage (node_modules/ws/lib/receiver.js:414:14)\r\n      at Receiver.getData (node_modules/ws/lib/receiver.js:346:17)\r\n      at Receiver.startLoop (node_modules/ws/lib/receiver.js:133:22)\r\n      at Receiver._write (node_modules/ws/lib/receiver.js:69:10)\r\n      at Socket.socketOnData (node_modules/ws/lib/websocket.js:795:35)\r\n```\r\n\r\nlinked to https://github.com/polkadot-js/apps/issues/1386"},{"labels":["api",null],"text":"As found in https://github.com/polkadot-js/extension/issues/73"},{"labels":[null,"api",null],"text":"**Repro:**\r\n\r\n```javascript\r\n      api.derive.staking.info(stashId, (result) => {\r\n        ++count;\r\n\r\n        console.error('***', count, JSON.stringify(result));\r\n      }).catch(console.error);\r\n```\r\n\r\n**Expected:**\r\n\r\n```\r\n *** 7 {\"accountId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"controllerId\":\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\",\"nextSessionId\":\"5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\",\"nominators\":[],\"redeemable\":\"0\",\"rewardDestination\":1,\"stakers\":{\"total\":\"0x0000000000000000002386f26fc10000\",\"own\":\"0x0000000000000000002386f26fc10000\",\"others\":[]},\"stakingLedger\":{\"stash\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"total\":\"0x0000000000000000002386f26fc10000\",\"active\":\"0x0000000000000000002386f26fc10000\",\"unlocking\":[]},\"stashId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"validatorPrefs\":{\"unstakeThreshold\":3,\"validatorPayment\":0}}\r\n\r\n...\r\n\r\n *** 8 something slightly different\r\n\r\n```\r\n\r\n**Actual:**\r\n\r\n```\r\n    *** 7 {\"accountId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"controllerId\":\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\",\"nextSessionId\":\"5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\",\"nominators\":[],\"redeemable\":\"0\",\"rewardDestination\":1,\"stakers\":{\"total\":\"0x0000000000000000002386f26fc10000\",\"own\":\"0x0000000000000000002386f26fc10000\",\"others\":[]},\"stakingLedger\":{\"stash\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"total\":\"0x0000000000000000002386f26fc10000\",\"active\":\"0x0000000000000000002386f26fc10000\",\"unlocking\":[]},\"stashId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"validatorPrefs\":{\"unstakeThreshold\":3,\"validatorPayment\":0}}\r\n\r\n...\r\n\r\n    *** 8 {\"accountId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"controllerId\":\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\",\"nextSessionId\":\"5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu\",\"nominators\":[],\"redeemable\":\"0\",\"rewardDestination\":1,\"stakers\":{\"total\":\"0x0000000000000000002386f26fc10000\",\"own\":\"0x0000000000000000002386f26fc10000\",\"others\":[]},\"stakingLedger\":{\"stash\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"total\":\"0x0000000000000000002386f26fc10000\",\"active\":\"0x0000000000000000002386f26fc10000\",\"unlocking\":[]},\"stashId\":\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\",\"validatorPrefs\":{\"unstakeThreshold\":3,\"validatorPayment\":0}}\r\n```\r\n\r\nNotes:\r\n- I added a distinctUntilChanged in drr in api-derive, but right now it's a bit useless, because it only checks on === for different values, should check at least on `Codec` and `Codec[]`\r\n- The 2nd thing is I'm not sure distinctUntilChanged on api-derive is useful, it should probably take place lower down the level, so that repeated values don't happen on api.query or api.rpc.state.subscribeStorage"},{"labels":["api",null],"text":"```javascript\r\napi.queryMulti([\r\n  [api.query.session.nextKeyFor, controllerId],\r\n  [api.query.staking.ledger, controllerId],\r\n], callback)\r\n```\r\n\r\nFirst result: [something1, something2],\r\n\r\n**Expected:** \r\n\r\nsecond result: [something1, something3]\r\n\r\n**Actual:**\r\n\r\nsecond result: [null, something3]\r\n\r\n"},{"labels":[null,"api",null,null],"text":"\r\nPseudo code:\r\n```js\r\nlet unsub: Function | undefined;\r\n\r\napi.query.balances.balanceOf\r\n  .multi(addresses)\r\n  .then((_usub) => unsub = _unsub);\r\n```\r\n\r\nHere `_usub` is of type `Codec[]` and is not assignable to type `Function`.\r\n\r\nIn case it can be any usefull, an example implementation can be found [here](https://github.com/Tbaut/basic-substrate-ui-template/blob/one-account/src/Balances.tsx#L27)."},{"labels":[null,"api",null],"text":"I removed the following test from `@polkadot/api/test/e2e/promise-queries.spec.ts` in https://github.com/polkadot-js/api/pull/1066, because the test used `existentialDeposit` to test the storage with a well-known value. However, `existentialDeposit` has since been moved to `consts`. The test needs to be rewritten to use another storage.\r\n\r\n```js\r\ndescribe('with plain type', () => {\r\n    const EXISTENTIAL_DEPOSIT = 500;\r\n    it('queries correct value', async () => {\r\n      const existentialDeposit = await api.query.balances.existentialDeposit() as Balance;\r\n\r\n      expect(existentialDeposit.toNumber()).toEqual(EXISTENTIAL_DEPOSIT);\r\n    });\r\n\r\n    it('queries correct value at a specified block', async () => {\r\n      const header = await api.rpc.chain.getHeader() as Header;\r\n      const existentialDepositAt = await api.query.balances.existentialDeposit.at(header.hash) as Balance;\r\n\r\n      expect(existentialDepositAt.toNumber()).toEqual(EXISTENTIAL_DEPOSIT);\r\n    });\r\n\r\n    it('subscribes to query and get correct result', (done) => {\r\n      return api.query.balances.existentialDeposit((existentialDeposit: Balance) => {\r\n        expect(existentialDeposit.toNumber()).toEqual(EXISTENTIAL_DEPOSIT);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it('queries correct hash', async () => {\r\n      const hash = await api.query.balances.existentialDeposit.hash();\r\n\r\n      expect(hash).toBeDefined();\r\n    });\r\n\r\n    it('gets correct key', async () => {\r\n      const key = api.query.balances.existentialDeposit.key();\r\n      const existentialDepositData = await api.rpc.state.getStorage(key) as Option<any>;\r\n      const existentialDepositRPC = new Balance(existentialDepositData.unwrapOr(undefined));\r\n\r\n      expect(existentialDepositRPC.toNumber()).toEqual(EXISTENTIAL_DEPOSIT);\r\n    });\r\n\r\n    it('queries correct size', async () => {\r\n      const size = await api.query.balances.existentialDeposit.size();\r\n\r\n      expect(size.toNumber()).not.toEqual(0);\r\n    });\r\n  });\r\n```"},{"labels":[null,"api",null],"text":"This file: https://github.com/polkadot-js/api/blob/master/packages/api/src/SubmittableExtrinsic.ts\r\n\r\nIt's hard to maintain, everytime I read this file, I need a 10 good minutes to get what it's doing.\r\n\r\nSome ideas:\r\n- Only use TS classes (loaded at runtime, but still possible), no `Object.defineProperties`\r\n- See if `decorateMethod` can be less hacky inside\r\n- https://github.com/polkadot-js/api/blob/5e5bb9984b1f42f0dbc3b4d42a41fdb17aa60898/packages/api/src/SubmittableExtrinsic.ts#L69-L71\r\n\r\nHow do I pass in options and a callback?\r\n- https://github.com/polkadot-js/api/blob/5e5bb9984b1f42f0dbc3b4d42a41fdb17aa60898/packages/api/src/SubmittableExtrinsic.ts#L79\r\nThis seems to be used nowhere..."},{"labels":[null,"api",null,null],"text":"... when available there, i.e. via https://github.com/paritytech/substrate/issues/2921\r\n\r\n- A number of parameters, previously in storage, have already moved, e.g. https://github.com/paritytech/substrate/blob/master/node/runtime/src/lib.rs#L171\r\n- More are on the way/in-progress, e.g. all fees\r\n\r\nOnce available on metadata, add to the api (like we have `genesisHash`, `runtimeVersion`) so it is available to all that want to query it. Additionally, update at least the derive interfaces to pull known/interesting values from here, if available."},{"labels":[null,"api",null,null],"text":"As implemented in https://github.com/paritytech/substrate/pull/2880"},{"labels":[null,"api"],"text":"In decorateStorageEntry:\r\n\r\nhttps://github.com/polkadot-js/api/blob/aed73e2bb3d395d4210e193f996b19bcfab0ee91/packages/api/src/Base.ts#L585\r\n\r\nso right now:\r\n```javascript\r\nconst api = new ApiPromise();\r\nawait api.query.system.accountNonce(addr1); // uses subscribeStorage, with immediate unsubscribe after resolve\r\n```\r\n\r\nExpected: uses `state_getStorage`.\r\n\r\nEdit: same for multi"},{"labels":[null,"api",null,null,null],"text":"https://github.com/paritytech/substrate/pull/2905\r\n\r\nAdditionally derive fees needs to cater for both 1.x and 2.x with feature detection"},{"labels":[null,"api",null],"text":"Extending Struct makes it very difficult to re-use and extend, i.e. as in https://github.com/polkadot-js/api/pull/1015/files#diff-3b3e7230b87e430da514800b9ae4b684R44 (that should be an extend, not a complete re-definition)\r\n\r\nWith the new typing infrastructure introduced by @amaurymartiny this _should_, hopefully, be possible."},{"labels":[null,"api",null,null],"text":"Same thing as in #987, for `api.rpc.*.*`\r\n\r\nThis is different from #714, since these can be inferred in-editor."},{"labels":[null,null,"api",null],"text":"This needs to go after https://github.com/polkadot-js/api/pull/1007\r\n\r\nBasically, currently we only allow people to operate directly on the raw contract calls, i.e. https://github.com/polkadot-js/api/blob/master/packages/api/test/e2e/promise-contract.spec.ts#L92\r\n\r\nIn the above, we would really just like something along the following lines -\r\n\r\n```js\r\nimport { Contract } from '@polkadot/api-contract';\r\n\r\nawait new Contract(<api instance>, <abi>, <addr>)\r\n  .flip(<value to go along>, <max gas>, <...params>)\r\n  .signAndSend(<account>, (submittableResult) => {...});\r\n```\r\n\r\nThat is the end-result, earlier in the chain, we want to be able to deploy or attach code -\r\n\r\n```js\r\nimport { Blueprint } from '@polkadot/api-contract';\r\n\r\n// here it becomes a bit fuzzy... we need to \r\n//  - make the deploy call\r\n//  - as a result, we want a Contract instance (previous code block)\r\n//  - basically, it would take the address and abi to construct one\r\nawait new Blueprint(<api instance>, <abi>, <hash>)\r\n  .deploy(<value>, <gas>, <...params>)\r\n  .signAndSend(<account>, (submittableResult, contract) => {...});\r\n\r\n// even better\r\nconst contract = await new Blueprint(...).deploy(<account>, ...);\r\n```\r\n\r\nDeployment of code (putCode) needs something similar -\r\n\r\n```js\r\nimport { Code } from '@polkadot/api-contract';\r\n\r\n// same as above with a bit of fuzziness\r\n//  - as a result, we would like to retrieve a Blueprint instance\r\n//  - basically it would take the retrieved hash and abi, to construct one\r\nawait new Code(<api instance>, <abi>, <wasm bytes>)\r\n  .deploy(<endowment>, <max gas>)\r\n  .signAndSend(<account>, (submittableResult, blueprint) => {...});\r\n\r\n// even better\r\nconst blueprint = await new Code(...).deploy(<account>, ...);\r\n```\r\n\r\nSo as a crazy code returns blueprint, returns contract, it ends up -\r\n\r\n```js\r\nconst blueprint = await new Code(...).deploy(<account>, ...);\r\nconst contract = await blueprint.deploy(<account>, ...);\r\n\r\nawait contract\r\n  .flip(<value to go along>, <max gas>, <...params>)\r\n  .signAndSend(<account>, (submittableResult) => {...});\r\n```\r\n\r\n... or something like that\r\n\r\nAll-in-all, needs some playing to see what works and what doesn't, how to integrate and how to return values. Basically we want to move away from people having to manually inspect events, we can just handle all that transparently and have explicit interfaces.\r\n\r\nAdditionally, need to see how we tie this to all the type of api interfaces we are supporting, current RxJs & Promise (Similar approach as in Submittables?)"},{"labels":[null,"api",null],"text":"The ApiBase currently provides an `on` function for listening to connection-related events, but there's no way to unregister these event handlers. It would be nice to have an `off` function or similar that allows us to remove them. Thanks!"},{"labels":[null,"api",null],"text":"Hi, I found the provider will keep re-connecting even if the [disconnect()](https://github.com/polkadot-js/api/blob/0b66f27a8c1ad28f15d6549d4a751f246398f91c/packages/api/src/Base.ts#L289) is called"},{"labels":[null,"api",null],"text":"process:\r\n  - construct & sign tx offline (could be external signer or creator)\r\n  - send tx via the api\r\n\r\n```js\r\nconst nonce = await api.query.system.accountNonce(keyring.dave.address());\r\nconst hex = api.tx.balances\r\n  .transfer(keyring.eve.address(), 12345)\r\n  .sign(keyring.dave, { nonce })\r\n  .toHex(); // hex UncheckedMortalExtrinsic\r\n\r\nreturn api.tx(hex).send(({ events, status }) => { ... });\r\n```"},{"labels":[null,"api",null,null],"text":"While working on the api-derive tests I noticed that the test setup in API could urgently need some attention. \r\nNow that we're more people working on it who don't necessarily know the whole code by heart (including external contributors) we should put more effort in making the tests more bulletproof and the setup more intuitive.\r\n\r\n**Suggested tasks:**\r\n- [x] Reorder and better categorize existing tests (https://github.com/polkadot-js/api/pull/1132)\r\n- [x] Have a central file where all local tests are imported to be able to toggle all tests that require a local dev node (`.skip`) (https://github.com/polkadot-js/api/pull/1117)\r\n- [x] Move all e2e tests to `./api` (see https://github.com/polkadot-js/api/issues/908#issuecomment-503513811) (https://github.com/polkadot-js/api/pull/1132)\r\n- [x] Have a setup that runs all tests with **ApiPromise** and **ApiRx** for both **Polkadot** (wss://poc3-rpc.polkadot.io/) and the latest **Substrate** master on a local machine (Added docker-compose file with all supported versions https://github.com/polkadot-js/api/pull/1100)\r\n- [ ] Replace console.logs in tests with actual [Jest methods](https://jestjs.io/docs/en/expect.html)\r\n- [ ] Try to bring up test coverage\r\n- [ ] Fix broken / outdated tests\r\n- [ ] Add some documentation for external contributors\r\n\r\n**Already existing tickets:**\r\n- [x] #329 Convert all tests to TypeScript \r\n- [ ] #868 Add tests for api-derive methods\r\n"},{"labels":[null,"api",null],"text":"`Option<T>`, `Result<T,E>` and `Vec<T>` (`Vec<T>` not listed below, but has the same form as `Option<T>`)\r\n\r\nExample ABI: (@jacogr & @robbepop has the WASM for this)\r\n\r\n```js\r\n{\r\n    \"name\": \"SharedVec\",\r\n    \"deploy\": {\r\n        \"args\": []\r\n    },\r\n    \"messages\": [\r\n        {\r\n            \"name\": \"push\",\r\n            \"selector\": 865577567,\r\n            \"mutates\": true,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"type\": \"i32\"\r\n                }\r\n            ],\r\n            \"return_type\": {\r\n                \"Result<T,E>\": {\r\n                    \"T\": [],\r\n                    \"E\": \"u32\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"register\",\r\n            \"selector\": 572030971,\r\n            \"mutates\": true,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"mutator\",\r\n                    \"type\": \"AccountId\"\r\n                },\r\n                {\r\n                    \"name\": \"begin\",\r\n                    \"type\": {\r\n                        \"Option<T>\": {\r\n                            \"T\": \"u32\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"name\": \"end\",\r\n                    \"type\": {\r\n                        \"Option<T>\": {\r\n                            \"T\": \"u32\"\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            \"return_type\": {\r\n                \"Result<T,E>\": {\r\n                    \"T\": [],\r\n                    \"E\": \"u32\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"set\",\r\n            \"selector\": 2028185770,\r\n            \"mutates\": true,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"at\",\r\n                    \"type\": \"u32\"\r\n                },\r\n                {\r\n                    \"name\": \"to\",\r\n                    \"type\": \"i32\"\r\n                }\r\n            ],\r\n            \"return_type\": {\r\n                \"Result<T,E>\": {\r\n                    \"T\": \"i32\",\r\n                    \"E\": \"u32\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"get\",\r\n            \"selector\": 4266279973,\r\n            \"mutates\": false,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"at\",\r\n                    \"type\": \"u32\"\r\n                }\r\n            ],\r\n            \"return_type\": {\r\n                \"Option<T>\": {\r\n                    \"T\": \"i32\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"len\",\r\n            \"selector\": 1403873684,\r\n            \"mutates\": false,\r\n            \"args\": [],\r\n            \"return_type\": \"u32\"\r\n        }\r\n    ]\r\n}\r\n```"},{"labels":["api",null],"text":"This happens for both Substrate and Alexander and only on stash accounts AFAICS.\r\n\r\n`Mismatch decoding '15', computed as '7' with TransactionPayment,Transfer,Reserve`\r\n\r\nTo reproduce:\r\nIn extrinsics: balances > locks on a stash account e.g `Alice_stash` in substrate\r\n\r\nor in the JS console:\r\n```js\r\nconst [balancesLocksSubstrate, balancesLocksAlexander ] = await Promise.all([\r\n  api.query.balances.locks('5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY'),\r\n  api.query.balances.locks('5DWrJzdCLLEXFndG6qjCNaMFU74sMEdNwg8TuLLwRiGJcYsn')\r\n]);\r\n\r\nconsole.log('locks: ' + balancesLocksSubstrate);\r\nconsole.log('locks: ' + balancesLocksAlexander);\r\n```\r\n![image](https://user-images.githubusercontent.com/33178835/57103328-bcc8bb00-6d25-11e9-92f8-8792cff16457.png)\r\n"},{"labels":[null,"api",null],"text":"Currently every instance of the Api object will create and maintain a web socket connection.\r\nIt never disconnects itself and will attempt to reconnect if connection dropped for any reason.\r\n\r\nWe have an issue that developers are not aware of this behavior and construct a new instance of Api on every method call.\r\nBecause the Api object can never automatically GC'ed by JS due to the fact the ws connection is open, this results connection leaks, memory leaks, and unstable application.\r\n\r\nI don't know what is the best way to solve this issue other than code review.\r\nI wonder if have polkadot.js enforce shared Api object will help. i.e. have a shared pool of all created api instances, return existing one if parameters (ws url) matches."},{"labels":[null,"api",null],"text":"Currently every new instance of Api will query metadata information and then it will become usable.\r\nThis adds a significantly initialization time which is not ideal. Image someone wants to develop a serverless lambda with polkadot.js.\r\nIt will be good if the constructor of Api takes a metadata json object and if it presents, use it instead of fetch from server.\r\nMay optionally still fetch from server and print a warning if mismatch found.\r\n"},{"labels":["api",null],"text":"Related to https://github.com/polkadot-js/api/issues/429\r\n\r\nExample -\r\n\r\n```json\r\n{\r\n    \"name\": \"Incrementer\",\r\n    \"deploy\": {\r\n        \"args\": [\r\n            {\r\n                \"name\": \"init_value\",\r\n                \"type\": \"u32\"\r\n            }\r\n        ]\r\n    },\r\n    \"messages\": [\r\n        {\r\n            \"name\": \"inc\",\r\n            \"selector\": 257544423,\r\n            \"mutates\": true,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"by\",\r\n                    \"type\": \"u32\"\r\n                }\r\n            ],\r\n            \"return_type\": null\r\n        },\r\n        {\r\n            \"name\": \"get\",\r\n            \"selector\": 4266279973,\r\n            \"mutates\": false,\r\n            \"args\": [],\r\n            \"return_type\": \"u32\"\r\n        },\r\n        {\r\n            \"name\": \"compare\",\r\n            \"selector\": 363906316,\r\n            \"mutates\": false,\r\n            \"args\": [\r\n                {\r\n                    \"name\": \"x\",\r\n                    \"type\": \"u32\"\r\n                }\r\n            ],\r\n            \"return_type\": \"bool\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nDispatch on the contract side is pretty simple:\r\n\r\n- For deploy just take all the parameters (arguments) in the order they are listed in the JSON and decode them using SCALE.\r\n- For call the first 4 bytes are encoding the message selector and the rest is again just the SCALE encoded arguments for the selected message.\r\n\r\ncc @RobbePop"},{"labels":["api",null,null],"text":"(Please correctly me if I am mistaken)\r\n\r\nSubstrate drops the ws connection if it is idle for a minute. It will be good if there is a way to have polkadot.js sending some ping message in a configurable amount of interval (with a reasonable default) to ensure the connection is alive."},{"labels":["api",null,null],"text":"It really is becoming a bit much to embed into a single function. (Follow the SubmittableExtrinsic patter, create class passing the info into the constructor)"},{"labels":[null,"api"],"text":"(Marking as question since it is not really confirmed and may just be due to me not quite grasping some basics)\r\n\r\nLet's start at the top, I believe this is needed: https://github.com/polkadot-js/api/blob/master/packages/api/src/Base.ts#L554 - as new entries get added, the head is updated, so it nicely triggers the reload of all/\r\n\r\nHowever, not convinced about this - https://github.com/polkadot-js/api/blob/master/packages/api/src/Base.ts#L505\r\n\r\nThe problem is that as the entry changes (say an entry was removed in the middle), I'm not sure how this actually caters for refreshing that part of the list and/or the whole list. Since at on subsequent loads we are basically done, I am not sure how the list gets refreshed. \r\n\r\nTL;DR - Can see how adding a new entry causes a refresh of the list (and can visibly see this with the apps UI), however for stuff that gets removed from the list, cannot quite wrap around the refresh thereof.\r\n\r\nThis could be related to https://github.com/polkadot-js/apps/issues/857 (however that could very well be a UI bug, things are still WIP and not 100% clean there)\r\n\r\ncc @xlc @amaurymartiny  - you may be able to help guide me along the right track. This _looks_ correct, but not sure how/if it works in practice since with these refreshes can be problematic"},{"labels":["api",null,null],"text":"Currently it seems like the “unknown Metadata version” is swallowed and then use of the API spits out wrong errors. \r\n\r\nI believe it it the fallback to v0 that just parses garbage. Can remove v0 parsing support as a start. "},{"labels":["api",null],"text":"Currently the type registry is a shared global variable. polkadot.js will fail with unclear error message when multiple versions `@polkadot/types` are installed because each version of the lib have its own type registry.\r\n\r\nUntil the type registry is been refactored to not using shared global variable, it should detects if multiple versions are installed and print a big warning message.\r\n"},{"labels":["api",null,null,null],"text":"... Alternatively, just use the testing keyring, i.e. https://polkadot.js.org/api/examples/promise/06_make_transfer/ would become\r\n\r\n```js\r\nconst { ApiPromise } = require('@polkadot/api');\r\nconst testKeyring = require('@polkadot/keyring/testingPairs').default;\r\n\r\nasync function main () {\r\n  const api = await ApiPromise.create();\r\n  const keyring = testingKeyring();\r\n\r\n  // all dev keys are on this test keyring as `.bob`, `.alice`, `.eve`, etc\r\n  await api.balances\r\n    .transfer(keyring.bob.address(), 12345)\r\n    .signAndSend(keyring.alice);\r\n}\r\n```\r\n\r\ncc @mattrutherford"},{"labels":["api",null,null],"text":"While sending, status from extrinsic submission -\r\n\r\n<img width=\"495\" alt=\"Polkadot:Substrate Portal 2019-03-16 17-48-45\" src=\"https://user-images.githubusercontent.com/1424473/54478564-d9f80780-4813-11e9-99ca-7ffde3d32b86.png\">\r\n"},{"labels":["api",null],"text":"Basically, the keyring in the tests need to be constructed with the `isHSKD` param (this needs to bubble through as the default from common)"},{"labels":["api",null],"text":"I just want to mention something I found strange when working with the @polkadot/api and registering custom types. For some reason `await ApiPromise.create({ types})` doesn’t work for me instead I need to use `getTypeRegistry().register(types);`\r\n\r\n`await ApiPromise.create({ types})` creates the following errors in the chrome console:\r\n`2019-03-13 16:39:17        RPC-CORE: getMetadata (block: Hash): Customtype:: Number can only safely store up to 53 bits\r\n2019-03-13 16:39:17   API/DECORATOR: loadMeta a: getMetadata (block: Hash): Customtype:: Number can only safely store up to 53 bits`"},{"labels":[null,"api",null],"text":"(Split from https://github.com/polkadot-js/apps/issues/800)\r\n\r\nThe `state_storage` subs can support multiple keys per subscription. Currently we are only doing a single subscription for each query even when we know from the use side that we need to do multiples in a row. Doing multiples in one-go can reduce and optimise the load/number of subs greatly on both sides.\r\n\r\nEven if at first we only implement this via the same type, maybe even `api.query.balances.freeBalance.multi(Alice, Bob, Dave, ...)` it will drop a lot of the use and can be used to make thing more optimal, for instances in the case of `api.derive.*`\r\n\r\nFrom @amaurymartiny \r\n\r\nThe `.multi` sounds good, it's clear on what it does (principle of least surprise), so I'm okay with this addition.\r\n\r\nBut as you said, it's only on one storage key, so I won't help in most `derive.*` where the storage keys are different, e.g. I can't do a multi-subscription to:\r\n\r\n```js\r\napi.query.balances.freeBalance(Alice)\r\napi.query.system.accountNonce(Alice)\r\n```\r\n\r\nboth in one subscription. I'd see something like:\r\n\r\n```js\r\napi.query.multi(\r\n  api.query.balances.freeBalance(Alice),\r\n  api.query.system.accountNonce(Alice)\r\n).then/subscribe()\r\n```\r\n\r\nThe freeBalance example above would be slightly more verbose:\r\n\r\n```js\r\napi.query.multi(\r\n  api.query.balances.freeBalance(Alice),\r\n  api.query.balances.freeBalance(Bob),\r\n  api.query.balances.freeBalance(Dave),\r\n)\r\n```\r\n\r\nso we could still add the `query.balances.freeBalance.multi` syntax as a shorthand. But I think the `query.multi()` one is more important."},{"labels":["api",null,null],"text":"Several changes required so that we can use TypeRegistry to replace the default Extrinsic.\r\n1. priority changes: TypeRegistry should have higher priority than default implementation.\r\n2. A Extrinsic interface.\r\n2. SubmittableExtrinsic: change to have a _extrinsic member instead of extends directly."},{"labels":[null,"api",null],"text":"- Requires https://github.com/polkadot-js/common/pull/297\r\n- From https://github.com/polkadot-js/common/issues/298"},{"labels":["api",null],"text":"Initial discussion happened on https://github.com/polkadot-js/apps/pull/684#discussion_r255298425\r\n\r\n- Make API more explorable by default and without tools, i.e. if we add something like this for `tx`, `query`, `derive`\r\n```js\r\napi.tx.listAll() // shows all section.methods with description\r\n```\r\n\r\n- dev-only exposure, probably around here - https://github.com/polkadot-js/apps/blob/master/packages/ui-api/src/Api.tsx#L92\r\n\r\n> So expose once initialised and we are on dev chain (we should be able to use this https://github.com/polkadot-js/apps/blob/master/packages/ui-api/src/util/isTestChain.ts - looking at it now, now 100% on the `dev|loc` match, explicit via `local` and `development` is probably better. I know why it is short, dev chains originally retuned `dev` instead of `development`)"},{"labels":["api",null],"text":"I think need some example to show submit Extrinsics, such as stake, unstake, nominate, and Voting."},{"labels":["api",null],"text":"cc @ianhe8x \r\n\r\nStarted playing a bit with the signer, I think it could make sense to make it a bit richer to show the send part to submit the actual status through as well. This way both the dapp and the signer app can actually track what is happening and display status as/when required.\r\n\r\nSo what I'm basically suggesting -\r\n\r\n```js\r\nexport interface Signer {\r\n  sign (e: SubmittableExtrinsic, a: string, o: SignatureOptions): Promise<number>;\r\n  update?: (id: number, status: Hash | SubmittableResult) => void \r\n}\r\n```\r\n\r\nFirst off, the sign returns an internal id that identifies the operation. An optional `update` on the signer interface then can receive status updates from the sending operation -\r\n\r\n- `id: number` - the id that was returned via `sign`\r\n- `status: Hash | SubmittableResult` - returns `Hash` when the `signAndSend` has no callback, otherwise the `SubmittableResult`\r\n\r\nBasically the status updates gets provided to both the signer as well as the underlying call that is made. So we just check `api.signer && api.signer.update` and then provide the status as required to the signer in addition to the actual caller.\r\n\r\nStumbled across this in `apps` when trying to get the JS console to have the updates, but have the signing done by the apps signer. And both the apps UI as well as the actual JS call needs the ability to have the status.\r\n\r\n(As an complete off-topic here, would love to integrate external signers as/when they are available in apps, so if you have something, would love to start working with you on that to integrate over there)"},{"labels":["api",null],"text":""},{"labels":["api",null,null],"text":"I can't find a way to add custom derives without forking this repo. It will be good if this is extensible.\r\n\r\nThe real issue I am having is that we have implemented a generic asset module using `StorageDoubleMap` which there are no metadata support (https://github.com/paritytech/substrate/issues/1715), so I want to implements the query manually. I can do it via rpc calls but can't find a good way to bind this with UI and everything seems very tacky to me."},{"labels":["api",null,null],"text":"Need to be more explicit in the url strings to pass through in the samples. Ie. \r\n\r\n“Somewhere.com:9944” will not work, however “ws://somewhere.com:9944” will (also with secure)\r\n\r\nAlso just check errors thrown on these, no silent failures. (We just need to be slightly more explicit to convey the info, it is there, but not always 100% obvious and/or somewhat hidden)"},{"labels":["api",null],"text":"This prevents to node.js program exit cleanly because there is no disconnect / close method so `process.exit` have to be used.\r\n\r\n`WSProviderInterface` should have a `disconnect` method to close ws connection\r\n\r\nIn additional to that, I think following changes can be helpful (not very confident so feel free to ignore those suggestions)\r\n\r\nMove `connect` method to `ProviderInterface` and have `disconnect` on there as well\r\n\r\nAdd `open` and `close` to `ApiBase` method which does connect & setup and disconnect & teardown.\r\n\r\n----\r\n\r\nCurrent we are using `provider.websocket.close()` which logs \r\n\r\n```\r\nAPI-WS: disconnected from ws://127.0.0.1:9944::1000: Normal connection closure\r\n```"},{"labels":["api",null],"text":"As a dapp, it doesn't always have access to key pair. Key pairs could be managed in a browser extension or hardware wallet. So I propose to introduce signer to api and let it do the signing. This will allow our browser extension to work with the api by exposing a signer into browser's global.\r\n\r\n```\r\nexport interface Signer {\r\n  sign(extrinsic: Extrinsic, opt: {from: string} & SignatureOptions): Promise<void>;\r\n}\r\n```\r\n\r\nsignAndSend is the place to use the signer. I prefer to changing the signature to below which looks more neat\r\n```\r\n  signAndSend (options: SignAndSendOptions)\r\n  signAndSend (options: SignAndSendOptions, statusCb: StatusCb)\r\n  signAndSend (options: SignAndSendOptions, statusCb?: StatusCb)\r\n\r\ninterface SignAndSendOptions extends Partial<SignatureOptions> {\r\n  from: string | KeyringPair\r\n}\r\n```\r\nthough to keep backward compatible, it could also be like:\r\n```\r\nsignAndSend (account: KeyringPair | string, _options?: Partial<SignatureOptionsPartial> | StatusCb, statusCb?: StatusCb)\r\n```\r\n\r\nI would like to hear from you if it's the right direction before submitting my PR.\r\n"},{"labels":["api",null],"text":"Basically just a wrapper (2 lines) around the registry exposing the same. The rationale: no additional imports needed, and it is currently quite core. (Is exposed via the constructor, but injection can happen at any point)"},{"labels":["api",null],"text":"As per https://github.com/polkadot-js/api/blob/master/packages/api/src/SubmittableExtrinsic.ts#L105"},{"labels":["api",null,null],"text":""},{"labels":["api",null],"text":"I'm suggesting that instead of `sign(pair, nonce, era)` we pass through `sign({ pair, nonce, era })`. (Need to look into this exactly)\r\n\r\nCurrently we don't allow the nice `signAndSend` shortcut to set the eras at all. So it is driven from that perspective. So `signAndSend(pair)` can still work as-is. `signAndSend({ pair, ... })` can actually pass in `nonce` (optional, can be detected), `era` (optional) and `blockHash` (optional, generis or detected) then as well.\r\n\r\nI would almost suggest that the `signAndSend` default era be set - not sure how many blocks to allow. So by default we actually do mortal instead of immortal."},{"labels":["api",null],"text":"Here we determine if something is an observable and act appropriately -\r\n\r\nhttps://github.com/polkadot-js/api/blob/master/packages/rpc-rx/src/index.ts#L104\r\n\r\nWe should change that signature so it returns the following interface -\r\n\r\n```js\r\ninterface RpcObervable {\r\n  (...params: Array<any>): Observable<any>;\r\n  isSubscription: boolean\r\n}\r\n```\r\n\r\nThis will be used in the api base `OnCall`, e.g. https://github.com/polkadot-js/api/blob/master/packages/api/src/Base.ts#L52 instead of the manually specified flag.\r\n\r\nOriginally came up as part of #598 (and subsequent quick-fix in #601) "},{"labels":["api",null],"text":"It looks like trackStatus inside send() is being called twice. "},{"labels":["api",null,null,null],"text":"Currently the query interfaces allows for a `null` return, i.e. https://github.com/polkadot-js/api/blob/master/packages/api/src/promise/types.ts#L33 & https://github.com/polkadot-js/api/blob/master/packages/api/src/rx/types.ts#L16 - where the return is `Codec | null | undefined`\r\n\r\nHowever, since the introduction of defaults, `null` and `undefined` are never returned anymore, see https://github.com/polkadot-js/api/blob/master/packages/rpc-core/src/index.ts#L213\r\n\r\nCleanups required -\r\n\r\n- interfaces as detailed above\r\n- api-derive has all the `value || new Something(...)` overrides"},{"labels":["api",null],"text":"Added in this issue https://github.com/polkadot-js/api/issues/554"},{"labels":["api",null],"text":"- [x] Add a chapter for ApiRx examples like https://polkadot.js.org/api/examples/promise/\r\n- [x] Go through examples in https://polkadot.js.org/api/api/classes/_rx_index_.apirx.html and update them to work with current API, polkadot and substrate versions"},{"labels":["api",null],"text":"Started in https://github.com/polkadot-js/api/pull/539, complete the loop"},{"labels":["api",null],"text":"Same as sign + send with some signature changes -\r\n\r\n- Takes in `(accountKeypair, statusCallback)`\r\n- Determines nonce by default (makes call to `system.accountNonce(accountKeypair.address()`)\r\n- Uses genesisHash in encoding\r\n\r\nGenerally caters for the basic use-case - for finer control the sign/send pair can be used individually. This just combines the 2 functions and only requires the keypair to operate."},{"labels":["api",null],"text":"This stuff - https://github.com/polkadot-js/api/blob/master/packages/rpc-rx/src/index.ts#L118\r\n\r\nWould like alignment with the approach followed in derive once we are happy there"},{"labels":["api",null,null],"text":"Based on this https://github.com/polkadot-js/api/pull/527/files#diff-4ac32a78649ca5bdd8e0ba38b7006a1eR1 for api/promise -\r\n\r\n- Update in-code samples\r\n- Update actual docs/examples samples"},{"labels":["api",null],"text":"> nodeJs console.log(api); : \r\n```\r\napi:---- ApiPromise {\r\n  _eventemitter: EventEmitter { _events: { error: [EE] }, _eventsCount: 1 },\r\n  _extrinsics:\r\n   { timestamp: { set: [Function] },\r\n     consensus:\r\n      { reportMisbehavior: [Function],\r\n        noteOffline: [Function],\r\n        remark: [Function],\r\n        setHeapPages: [Function],\r\n        setCode: [Function],\r\n        setStorage: [Function] },\r\n     balances: { transfer: [Function], setBalance: [Function] },\r\n     session:\r\n      { setKey: [Function],\r\n        setLength: [Function],\r\n        forceNewSession: [Function] },\r\n     staking:\r\n      { stake: [Function],\r\n        unstake: [Function],\r\n        nominate: [Function],\r\n        unnominate: [Function],\r\n        registerPreferences: [Function],\r\n        setSessionsPerEra: [Function],\r\n        setBondingDuration: [Function],\r\n        setValidatorCount: [Function],\r\n        forceNewEra: [Function],\r\n        setOfflineSlashGrace: [Function] },\r\n     democracy:\r\n      { propose: [Function],\r\n        second: [Function],\r\n        vote: [Function],\r\n        startReferendum: [Function],\r\n        cancelReferendum: [Function],\r\n        cancelQueued: [Function] },\r\n     council:\r\n      { setApprovals: [Function],\r\n        reapInactiveVoter: [Function],\r\n        retractVoter: [Function],\r\n        submitCandidacy: [Function],\r\n        presentWinner: [Function],\r\n        setDesiredSeats: [Function],\r\n        removeMember: [Function],\r\n        setPresentationDuration: [Function],\r\n        setTermDuration: [Function] },\r\n     councilVoting:\r\n      { propose: [Function],\r\n        vote: [Function],\r\n        veto: [Function],\r\n        setCooloffPeriod: [Function],\r\n        setVotingPeriod: [Function] },\r\n     councilMotions: { propose: [Function], vote: [Function] },\r\n     grandpa: { reportMisbehavior: [Function] },\r\n     treasury:\r\n      { proposeSpend: [Function],\r\n        setPot: [Function],\r\n        configure: [Function],\r\n        rejectProposal: [Function],\r\n        approveProposal: [Function] },\r\n     contract: { call: [Function], create: [Function] },\r\n     upgradeKey: { upgrade: [Function], setKey: [Function] },\r\n     sudo: { sudo: [Function], setKey: [Function] } },\r\n  _genesisHash:\r\n ... ...\r\n```\r\n**It's complete.**\r\n------\r\n\r\n> But the RN console.log(api); :\r\n\r\n```\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS: 'api:-------', { _eventemitter: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:    { _events: { error: { fn: [Function], context: [Circular], once: true } },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:      _eventsCount: 1 },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _extrinsics: {},\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _genesisHash: {},\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _query: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:    { substrate: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:       { code: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:          { [Function: decorated]\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            at: [Function],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            meta: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:             { documentation: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                [ { '0': 'W',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '1': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '2': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '3': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '4': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '5': 'c',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '6': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7': 'd',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '8': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '9': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '10': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '11': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '12': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '13': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '14': 'h',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '15': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '16': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '17': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '18': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '19': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '20': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '21': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '22': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '23': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '24': '.' },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _Type: [Function: Text] ],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               modifier: { raw: 0, _enum: [ 'None', 'Default', 'Required' ] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               type: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                { raw: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                   { '0': 'B',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '1': 'y',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '2': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '3': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '4': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     _originalLength: 6 },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _def: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                   { Type: [Function: Type],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     'StorageFunctionType$Map': [Function: StorageFunctionType$Map] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _index: 0,\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _indexes: [ 0, 1 ] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               toJSON: [Function: toJSON] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            method: 'code',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            section: 'substrate',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            toJSON: [Function] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:         heapPages: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:          { [Function: decorated]\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            at: [Function],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            meta: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:             { documentation: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                [ { '0': 'N',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '1': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '2': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '3': 'b',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '4': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '5': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '6': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '8': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '9': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '10': 'w',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '11': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '12': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '13': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '14': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '15': 'l',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '16': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '17': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '18': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '19': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '20': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '21': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '22': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '23': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '24': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '25': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '26': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '27': 'y',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '28': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '29': 'p',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '30': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '31': 'g',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '32': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '33': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '34': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '35': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '36': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '37': 'q',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '38': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '39': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '40': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '41': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '42': 'd',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '43': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '44': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '45': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '46': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '47': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '48': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '49': 'x',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '50': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '51': 'c',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '52': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '53': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '54': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '55': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '56': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '57': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '58': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '59': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '60': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '61': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '62': 'h',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '63': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '64': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '65': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '66': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '67': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '68': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '69': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '70': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7\r\n```\r\nIt‘s incomplete, so.. such as api.query.xxxx,  api.extrinsics, api.tx, and more, can't to be working.\r\n![_ _20181222002106](https://user-images.githubusercontent.com/34789555/50574587-4626ba00-0e26-11e9-855f-62d8bf4c0569.png)\r\n\r\n"},{"labels":[null,"api",null,null],"text":"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html#bigint\r\n\r\nThis is a big refactor."},{"labels":["api",null],"text":"  **polkadot Api version** : \r\n```\r\n    \"@polkadot/api\": \"^0.33.17\",\r\n    \"@polkadot/rpc-provider\": \"^0.33.17\"\r\n```\r\n**This React-Native project create way is** :\r\n `react-native init Project`\r\n```\r\ncd Project\r\nreact-native run-android\r\n```\r\n\r\n**packages**:\r\n```\r\n\"dependencies\": {\r\n    \"axios\": \"0.18.0\",\r\n    \"ethers\": \"3.0.27\",\r\n    \"identicon.js\": \"2.3.2\",\r\n    \"mobx\": \"^4.3.1\",\r\n    \"mobx-react\": \"5.2.5\",\r\n    \"moment\": \"2.22.2\",\r\n    \"react\": \"16.4.2\",\r\n    \"react-native\": \"0.56.0\",\r\n    \"react-native-camera\": \"1.2.0\",\r\n    \"react-native-modal\": \"6.5.0\",\r\n    \"react-native-permissions\": \"1.1.1\",\r\n    \"react-native-qrcode-svg\": \"5.1.0\",\r\n    \"react-native-sensitive-info\": \"5.2.4\",\r\n    \"react-native-snackbar\": \"0.5.0\",\r\n    \"react-native-svg\": \"6.5.2\",\r\n    \"react-native-vector-icons\": \"5.0.0\",\r\n    \"react-navigation\": \"2.12.1\",\r\n    \"@polkadot/api\": \"^0.33.17\",\r\n    \"@polkadot/rpc-provider\": \"^0.33.17\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"7.0.0-beta.47\",\r\n    \"@babel/plugin-proposal-decorators\": \"7.0.0-beta.47\",\r\n    \"@babel/plugin-transform-runtime\": \"7.0.0-beta.47\",\r\n    \"@babel/runtime\": \"7.0.0-beta.47\",\r\n    \"babel-core\": \"7.0.0-bridge.0\",\r\n    \"babel-jest\": \"23.4.2\",\r\n    \"babel-plugin-module-resolver\": \"3.1.1\",\r\n    \"babel-preset-react-native\": \"5.0.2\",\r\n    \"enzyme\": \"3.5.0\",\r\n    \"enzyme-adapter-react-16\": \"1.3.0\",\r\n    \"eslint-config-rallycoding\": \"3.2.0\",\r\n    \"jest\": \"23.5.0\",\r\n    \"jsdom\": \"12.0.0\",\r\n    \"react-native-mock-render\": \"0.1.1\",\r\n    \"react-test-renderer\": \"16.4.2\",\r\n    \"rimraf\": \"^2.6.2\"\r\n  },\r\n```\r\n\r\n**When I import the @polkadot/api to **React Native** project. get the error**:\r\n```\r\nerror: bundling failed: Error: Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\r\n\r\nThis might be related to https://github.com/facebook/react-native/issues/4968\r\nTo resolve try the following:\r\n  1. Clear watchman watches: `watchman watch-del-all`.\r\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\r\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\r\n\r\n```\r\n![_ _20181217193346](https://user-images.githubusercontent.com/34789555/50085161-373fe500-0234-11e9-8c66-caabe7751988.png)\r\n\r\n```\r\nThe development server returned response error code: 500\r\n\r\nURL: http://10.0.2.2:8081/index.delta?platform=android&dev=true&minify=false\r\n\r\nBody:\r\n{\"originModulePath\":\"/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js\",\"targetModuleName\":\"core-js/modules/es6.regexp.to-string\",\"message\":\"Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\",\"errors\":[{\"description\":\"Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\"}],\"name\":\"Error\",\"stack\":\"Error: Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\\n    at ModuleResolver.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:167:1306)\\n    at ResolutionRequest.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:80:16)\\n    at DependencyGraph.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph.js:237:485)\\n    at Object.resolve (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/lib/transformHelpers.js:116:25)\\n    at dependencies.map.result (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:298:29)\\n    at Array.map (<anonymous>)\\n    at resolveDependencies (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:294:16)\\n    at /media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:159:33\\n    at Generator.next (<anonymous>)\\n    at step (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:239:307)\"}\r\nprocessBundleResult\r\n    BundleDownloader.java:285\r\naccess$200\r\n    BundleDownloader.java:37\r\nonResponse\r\n    BundleDownloader.java:163\r\nexecute\r\n    RealCall.java:153\r\nrun\r\n    NamedRunnable.java:32\r\nrunWorker\r\n    ThreadPoolExecutor.java:1162\r\nrun\r\n    ThreadPoolExecutor.java:636\r\nrun\r\n    Thread.java:764\r\n\r\n```\r\n"},{"labels":["api",null],"text":"(Needs https://github.com/polkadot-js/api/issues/475)\r\n\r\n- submitAndWatch\r\n- track status events\r\n- upon completion (non-Finalization), end\r\n- upon Finalization, track events in next steps\r\n- get block, check for extrinsic inclusion (against data)\r\n- if found, pull system.events for that block\r\n- return events as part of the subscription, i.e. callback becomes `(status: ExtsinsicStatus, events?: Events)` as opposed to the current `(status: ExtinsicStatus)`\r\n\r\nPromise here is easy, I'm not convinced about the RxJS version, i.e. don't want to change the signature to `[ExtrinsicStatus, Vector]` there - not 100% sure how to deal with allowing `.subscribe((status: ExtsinsicStatus, events?: Events) => {...})` there"},{"labels":["api",null],"text":"Currently api.query will perform queries (one-shot) leaving out the optional head hash. It is useful to do historic queries as well where it is added. \r\n\r\nSuggesting adding ‘at’ that will take the hash params. So basically current we can only do\r\n\r\n```\r\napi.query.balances.freeBalanceOf(Alice)\r\n```\r\n\r\nwhich performs the query for the latest block. An extension to this could be\r\n\r\n```\r\napi.query.balances.freeBalanceOf.at(hash, Alice) \r\n```\r\n\r\nwhich will perform at a specific block. The reason for the `at` is that it would be simple to determine which route (i.e. which underlying RPC call) to take. It is a bit tougher and messier to try and adjust the calls and determine intent by just using the current endpoints, i.e. it is a one-time query, a subscription query or a one-time-at query. At the same time we still have control of which params goes where. Additionally can be added without breaking old use cases. \r\n\r\n(Suggestions and comments obviously welcome on approach)"},{"labels":["api",null,null],"text":"- Description and tracking issue https://github.com/paritytech/substrate/issues/1256\r\n- Implementation in https://github.com/paritytech/substrate/pull/1264\r\n\r\n(Assigning @amaurymartiny since he has been looking at it and playing with it already)"},{"labels":["api",null],"text":"![image](https://user-images.githubusercontent.com/1424473/50007931-d8b80400-ffb2-11e8-9ce0-2ec103de2a1b.png)\r\n"},{"labels":["api",null],"text":"Hi Polkadot and Substrate team, we're having a small issue with testing where transactions are being returned as finalised but the nodes have not updated their block status. I've followed the example transaction code and I've pasted what I've done below. It's entirely possible that I'm not running the transaction code correctly. \r\n\r\nHere is the code that I've been using to run the sample transaction code: \r\n\r\n```\r\nimport {ApiPromise} from '@polkadot/api';\r\nimport {Keyring} from '@polkadot/keyring';\r\nimport WsProvider from '@polkadot/rpc-provider/ws';\r\nimport {stringToU8a} from '@polkadot/util';\r\n\r\nimport additionalTypes from './types';\r\n\r\nasync function main() {\r\n  const ws = 'ws://localhost:9944';\r\n  const keyring = new Keyring();\r\n  let seed = 'Alice';\r\n  if (seed && seed.length < 32) {\r\n    seed = seed.padEnd(32, ' ');\r\n  }\r\n\r\n  const sender = keyring.addFromSeed(stringToU8a(seed));\r\n  const provider = new WsProvider(ws);\r\n  const api = await ApiPromise.create({\r\n    provider,\r\n    types: additionalTypes\r\n  });\r\n  try {\r\n    const nonce: any = await api.query.system.accountNonce(sender.address());\r\n    console.log('Nonce before transaction', String(nonce));\r\n    const block = await api.rpc.chain.getHeader();\r\n\r\n    console.log('Block status before transaction', String(block));\r\n\r\n    const tx = await api.tx.balances.transfer(\r\n      '5Gw3s7q4QLkSWwknsiPtjujPv3XM4Trxi5d4PgKMMk3gfGTE',\r\n      123\r\n    );\r\n    tx.sign(sender, nonce);\r\n    await tx\r\n      .send(status => console.log(`Status type is: ${status.type}`))\r\n      .then(hash => {\r\n        console.log(`submitted with hash ${hash}`);\r\n      });\r\n\r\n    const block_after = await api.rpc.chain.getHeader();\r\n\r\n    console.log('Block status after transaction', String(block_after));\r\n    const nonce_after: any = await api.query.system.accountNonce(\r\n      sender.address()\r\n    );\r\n    console.log('Nonce after transaction', String(nonce_after));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  process.exit(1);\r\n}\r\n\r\nmain();\r\n```\r\n\r\nHere is the result of the console.logs \r\n\r\n```\r\nNonce before transaction 40\r\nBlock status before transaction {\"parentHash\":\"0x57e79da1292a9680c153b00bb1581a980caa804948c4aa245bb149a8b97c9e93\",\"number\":4357,\"stateRoot\":\"0xfa1286e210d3be2401de6a5a0d80d5e3a000652f594b6d2c01b958bc5b0fc4e3\",\"extrinsicsRoot\":\"0x93123d7542541f55630064c216b523e890552f6ea06daa85215ee810441602c5\",\"digest\":{\"logs\":[[257442668,\"0xdd344f5bbd65bdaa3bbf0fc623a7358565510f2b61e4b9f74dfda105e36eed3a257b12ecc06301dde48b6877c0e7f122162e68802b03c953e452ab1d4437ee07\"]]}}\r\nsubmitted with hash 16\r\nStatus type is: Finalised\r\nBlock status after transaction {\"parentHash\":\"0x57e79da1292a9680c153b00bb1581a980caa804948c4aa245bb149a8b97c9e93\",\"number\":4357,\"stateRoot\":\"0xfa1286e210d3be2401de6a5a0d80d5e3a000652f594b6d2c01b958bc5b0fc4e3\",\"extrinsicsRoot\":\"0x93123d7542541f55630064c216b523e890552f6ea06daa85215ee810441602c5\",\"digest\":{\"logs\":[[257442668,\"0xdd344f5bbd65bdaa3bbf0fc623a7358565510f2b61e4b9f74dfda105e36eed3a257b12ecc06301dde48b6877c0e7f122162e68802b03c953e452ab1d4437ee07\"]]}}\r\nNonce after transaction 40\r\n```\r\n\r\nIs there something I am doing wrong with respect to the transaction? Because the Status type is telling me that the transaction has been Finalised but neither the block states nor the nodes have updated to reflect this transaction. \r\n\r\nI'm running a single node network on my local machine (Macbook Pro 2017, Mac OS High Sierra) with respect to substrate, and here are the logs for the substrate instance from a few seconds before I send the transaction to a few seconds after.\r\n\r\n```\r\n2018-12-13 12:10:11 Idle (0 peers), best: #4376 (0xe03d…0faa)\r\n2018-12-13 12:10:13 Proposing block [number: 4377; hash: 0x955e…93cc; parent_hash: 0xe03d…0faa; extrinsics: [0xc877…44ca, 0x7b4e…2d59]]\r\n2018-12-13 12:10:16 Idle (0 peers), best: #4376 (0xe03d…0faa)\r\n2018-12-13 12:10:17 Imported #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:18 Starting consensus session on top of parent 0x1f8407cab28e54041f0051e57f8c91291f347025532f9bb1418a7024440fd8db\r\n2018-12-13 12:10:21 Idle (0 peers), best: #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:22 Proposing block [number: 4378; hash: 0xfa44…d392; parent_hash: 0x1f84…d8db; extrinsics: [0x2f9a…d775, 0x7b4e…2d59]]\r\n2018-12-13 12:10:26 Idle (0 peers), best: #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:27 Imported #4378 (0x9d8f…606a)\r\n2018-12-13 12:10:28 Starting consensus session on top of parent 0x9d8f83ec8c14a6c1513745c67515d69b4db517b8d6042b4cf674a82d5dee606a\r\n2018-12-13 12:10:31 Idle (0 peers), best: #4378 (0x9d8f…606a)\r\n2018-12-13 12:10:32 Proposing block [number: 4379; hash: 0xca2d…683a; parent_hash: 0x9d8f…606a; extrinsics: [0xdbef…f3f4, 0x7b4e…2d59]]\r\n2018-12-13 12:10:36 Imported #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:36 Idle (0 peers), best: #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:37 Starting consensus session on top of parent 0x8ce22997f8bc0a4ac3524dae23ab0ab4c2b48fb641777ff3377cdf27c90eb0b7\r\n2018-12-13 12:10:41 Proposing block [number: 4380; hash: 0x2f84…a06d; parent_hash: 0x8ce2…b0b7; extrinsics: [0xb107…6296, 0x7b4e…2d59]]\r\n2018-12-13 12:10:41 Idle (0 peers), best: #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:46 Imported #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:46 Idle (0 peers), best: #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:47 Starting consensus session on top of parent 0x85d2b8898b230dd7e0b0bd74ef2d7d3f06e66d306187ed725097d3300882b01f\r\n2018-12-13 12:10:47 Random Kademlia request has yielded empty results\r\n2018-12-13 12:10:51 Proposing block [number: 4381; hash: 0xb33f…80fd; parent_hash: 0x85d2…b01f; extrinsics: [0x856c…5260, 0x7b4e…2d59]]\r\n2018-12-13 12:10:51 Idle (0 peers), best: #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:55 Imported #4381 (0x8cb8…7be8)\r\n2018-12-13 12:10:56 Idle (0 peers), best: #4381 (0x8cb8…7be8)\r\n2018-12-13 12:10:56 Starting consensus session on top of parent 0x8cb8bb0379ec184e1cdb3e64cc2e20225560f4319db4b70725160cce9e5c7be8\r\n2018-12-13 12:11:00 Proposing block [number: 4382; hash: 0x66f0…c6b8; parent_hash: 0x8cb8…7be8; extrinsics: [0x12d2…c431, 0x7b4e…2d59]]\r\n2018-12-13 12:11:01 Idle (0 peers), best: #4381 (0x8cb8…7be8)\r\n2018-12-13 12:11:05 Imported #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:06 Starting consensus session on top of parent 0x4a1da9855119a288aaf16ae27039f6981c99606c98b35afcae3172e071578bc2\r\n2018-12-13 12:11:06 Idle (0 peers), best: #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:10 Proposing block [number: 4383; hash: 0xbb25…018b; parent_hash: 0x4a1d…8bc2; extrinsics: [0x0ca5…feda, 0x7b4e…2d59]]\r\n2018-12-13 12:11:11 Idle (0 peers), best: #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:14 Imported #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:15 Starting consensus session on top of parent 0xd8905527e88ff36bdc3de9d077d7df51d9f946066b9e7c7f1022ffd68e6c4ffa\r\n2018-12-13 12:11:16 Idle (0 peers), best: #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:19 Proposing block [number: 4384; hash: 0x137d…0966; parent_hash: 0xd890…4ffa; extrinsics: [0x9fa1…7889, 0x7b4e…2d59]]\r\n2018-12-13 12:11:21 Idle (0 peers), best: #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:23 Imported #4384 (0x449d…0b20)\r\n2018-12-13 12:11:25 Starting consensus session on top of parent 0x449d661b3dd41078966a29e277de7d2ccdd7b81b54fdbf9e0b2e4d1dffbf0b20\r\n2018-12-13 12:11:26 Idle (0 peers), best: #4384 (0x449d…0b20)\r\n2018-12-13 12:11:28 Proposing block [number: 4385; hash: 0x61f6…8fd6; parent_hash: 0x449d…0b20; extrinsics: [0x6e53…855c, 0x7b4e…2d59]]\r\n2018-12-13 12:11:31 Idle (0 peers), best: #4384 (0x449d…0b20)\r\n2018-12-13 12:11:32 Random Kademlia request has yielded empty results\r\n2018-12-13 12:11:33 Imported #4385 (0x9962…71cc)\r\n2018-12-13 12:11:34 Starting consensus session on top of parent 0x9962d8493ead4209ec7637d60fe7c1c0635e69c97158ddc6fb7aa5f4544471cc\r\n2018-12-13 12:11:36 Idle (0 peers), best: #4385 (0x9962…71cc)\r\n2018-12-13 12:11:38 Proposing block [number: 4386; hash: 0x83a3…c3f9; parent_hash: 0x9962…71cc; extrinsics: [0xe03b…fadd, 0x7b4e…2d59]]\r\n2018-12-13 12:11:41 Idle (0 peers), best: #4385 (0x9962…71cc)\r\n2018-12-13 12:11:44 Imported #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:46 Starting consensus session on top of parent 0x5d863e6a26c2d1b9b1cf31f885908c07ed6afffdcd7150b740bcb72db14b66b3\r\n2018-12-13 12:11:46 Idle (0 peers), best: #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:50 Proposing block [number: 4387; hash: 0x6d02…3489; parent_hash: 0x5d86…66b3; extrinsics: [0x3e36…66cd, 0x7b4e…2d59, 0x7052…e172]]\r\n2018-12-13 12:11:51 Idle (0 peers), best: #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:56 Imported #4387 (0x6474…1edf)\r\n2018-12-13 12:11:56 Idle (0 peers), best: #4387 (0x6474…1edf)\r\n2018-12-13 12:11:58 Starting consensus session on top of parent 0x64749d8dd5ba7705807692da32cd7a46adc1d9e099934528554b9073d1ed1edf\r\n2018-12-13 12:12:01 Idle (0 peers), best: #4387 (0x6474…1edf)\r\n2018-12-13 12:12:02 Proposing block [number: 4388; hash: 0x5156…5dcd; parent_hash: 0x6474…1edf; extrinsics: [0x8e24…3ec0, 0x7b4e…2d59]]\r\n2018-12-13 12:12:06 Imported #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:06 Idle (0 peers), best: #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:07 Starting consensus session on top of parent 0x8bdb90e6f8f8c54f345668bae134e8df434bf0e114af80ebcfb148d9496d27ca\r\n2018-12-13 12:12:11 Proposing block [number: 4389; hash: 0x703c…79a2; parent_hash: 0x8bdb…27ca; extrinsics: [0xee2a…767a, 0x7b4e…2d59]]\r\n2018-12-13 12:12:11 Idle (0 peers), best: #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:15 Imported #4389 (0x73ce…3d13)\r\n```\r\n\r\nThanks"},{"labels":["api",null,null],"text":"Seeing this (very sporadically) in the UI and it only happens once -\r\n\r\n```\r\n2018-12-10 14:36:35        RPC-CORE: subscribeStorage (keys: Vec<StorageKey>): StorageChangeSet:: Unable to decode event for index 0x0000\r\n```\r\n\r\nIt can only mean the Events are not initialised before the new block comes in."},{"labels":[null,"api",null,null],"text":"Process -\r\n\r\n- API subscribes to runtimeVersion\r\n- When the runtime version changes, retrieve metadata via `state_getMetadata`\r\n- Inject\r\n\r\nBasically we want the initialization that happens in https://github.com/polkadot-js/api/blob/master/packages/api/src/Base.ts#L456-L462 to happen on version updates\r\n\r\nThis is the one area where oo7 does it really well, i.e. `tie` to version, update on changes - https://github.com/paritytech/oo7/blob/master/packages/oo7-substrate/src/bonds.js#L207-L211"},{"labels":["api",null,null],"text":"Discussed in https://github.com/polkadot-js/api/issues/440#issuecomment-444760455"},{"labels":["api",null],"text":"Right now [I'm adding a LightApi](https://github.com/polkadot-js/light-ui/tree/master/packages/light-api) on top of the ApiRx object. But thinking about it, it could go below.\r\n\r\n**Proposal: Add a LightApi layer below Api**\r\n\r\nIdeally, LightApi is something that is totally invisible to the user, i.e. we keep the exact same final usage: `const api = new Api(new Provider(...))`.\r\n\r\nHowever, add some \"light logic\", i.e. make the minimum viable number of jsonrpc calls to the node, assuming the node doesn't hold state. For example, if the user wants to subscribe on a account's balance, then make a subscription/polling on `newHead`, check the events on new head, and only make a subsequent jsonrpc call `getStorage` if the events show that the relevant part of the state has changed.\r\n\r\nSo, on load, Api will check:\r\n- the provider\r\n- the roles of the node, more specifically if it's a light node\r\n\r\nand perform:\r\n\r\n||Full node|Light Node|\r\n|-|-|-|\r\n|**WsProvider**|Use the current impl.|Use light logic|\r\n|**HttpProvider**|Use light logic|Use light logic|\r\n\r\nIn this case, Providers stay \"dumb\", i.e. this invalidates #435 (dumb polling is enough for HttpProvider). The global idea is to not put the logic in #435 in rpc-provider, but in a layer on top of rpc-provider, but below api.\r\nAnd it's totally transparent to all other layers, e.g. #427 doesn't care if the underlying Api is using full logic or light logic."},{"labels":["api",null],"text":"Hi, thanks for providing such a great tool for us. May I ask, do you have a plan to let the SDK can generate abi after deploying smart contract?"},{"labels":["api",null],"text":"Basically, have an api endpoint, which takes multiple storage values and runs it through a derivation function, returning a result. And example may be of votingBalance, we could do (pseudo-ish code) -\r\n\r\n```\r\n{\r\n  section: 'balance',\r\n  method: 'votingBalance',\r\n  inputs: ['balances.freeBalanceOf', 'balances.reservedBalanceOf`],\r\n  derive: (free, reserved) => free.add(reserved)\r\n}\r\n```\r\n\r\nand then\r\n\r\n```\r\napi.derive.balances.votingBalance(ALICE).toString();\r\n```\r\n\r\nBasically the API will add these and attach them to the derive endpoints. We def. need something to this effect, either we write code or have it more templated. (And needs to support both API types)\r\n\r\nEDIT: The above example is already hairy, how to we cater for params passed in?"},{"labels":["api",null,null],"text":""},{"labels":[null,"api",null],"text":"If we create a new instance of the `Method` class, it is understood based on discussion with @amaurymartiny that the current functionality of the `args` getter is ok, and the FIXME as shown [here](https://github.com/polkadot-js/api/blob/master/packages/types/src/Method.ts#L170) is no longer required.\r\n\r\nFor example, when you go to http://localhost:3000/#/extrinsics and click Submit Transaction, and you want to obtain the recipientId (dest) and amount (value) from the prop `this.props.value.extrinsic` that passed down to polkadot-js/apps/packages/ui-signer/src/Extrinsic.tsx, then \r\n\r\n```\r\nconst methodInstance = new Method(extrinsic, extrinsic.meta);\r\n\r\n// WRONG - do not use `.raw`. \r\n// See https://github.com/polkadot-js/apps/pull/389#discussion_r230735365\r\n// const recipientId = methodInstance.args[0].raw.toString();\r\n// const amount = methodInstance.args[1].raw.toString();\r\n\r\n// WRONG - suggested in the FIXME, but not preferred approach\r\n// const recipientId = methodInstance.args.get('dest').toString();\r\n// const amount = methodInstance.args.get('value').toString();\r\n\r\n// RIGHT\r\nconst recipientId = methodInstance.get('args').get('dest').toString();\r\nconst amount = methodInstance.get('args').get('value').toString();  // or .toBn().toString()\r\n```\r\n\r\nProposed action is to remove the following [FIXME](https://github.com/polkadot-js/api/blob/master/packages/types/src/Method.ts#L170)\r\n```\r\nget args (): Array<Base> {\r\n    // FIXME This should return a Struct instead of an Array\r\n    return [...(this.get('args') as Struct).values()];\r\n  }\r\n```\r\n\r\n"},{"labels":["api",null,null],"text":"Reference https://github.com/polkadot-js/api/pull/350/files#diff-95597f67ed68d7dffc27ba1f0501e5b1R190"},{"labels":["api",null],"text":"When I go to the API Docs > Chain state (runtime), it has a \"contract\" section https://polkadot.js.org/api/METHODS_STORAGE.html#contract in the menu but no methods associated when I click the link, and there isn't a \"substrate\" section at all (differs from Substrate UI at https://polkadot.js.org/apps/next/#/chainstate which does have that section)"},{"labels":["api",null,null],"text":"Right now they are in `.spec.js`, for historical reasons."},{"labels":["api",null],"text":"After Events are exposed through the API and docs are generated, add section list with anchors and order the sections and methods alphabetically as done in PR #291 and PR #302 for RPC, Extrinsics, and Storage\r\n\r\n"},{"labels":["api",null,null],"text":"Some of the examples listed in the below \"Usage\" section:\r\n\r\n<img width=\"737\" alt=\"screen shot 2018-10-15 at 18 03 25\" src=\"https://user-images.githubusercontent.com/6226175/46962960-c568e500-d0a4-11e8-844f-f5457c16ad4d.png\">\r\n\r\nAre duplicated to an extent in the examples in the \"Examples\" section at links shown below. Note however that often the version in the \"Usage\" section (such as \"Submitting a transaction\") is often more concise and makes more use of chaining:\r\n\r\n<img width=\"227\" alt=\"screen shot 2018-10-15 at 18 03 37\" src=\"https://user-images.githubusercontent.com/6226175/46963018-e8939480-d0a4-11e8-9cc1-aa4739e2fbdd.png\">\r\n "},{"labels":["api",null],"text":"This should be `statusCb` for extrinsic submission to work, right?\r\n\r\nhttps://github.com/polkadot-js/api/blob/67f625b096e8cc3f0a091105061a5f52e01bedef/packages/api/src/promise/SubmittableExtrinsic.ts#L21"},{"labels":["api",null],"text":"<img width=\"565\" alt=\"polkadot-js api type definitions promise- and reactive-based apis around substrate rpc calls 2018-10-12 21-56-10\" src=\"https://user-images.githubusercontent.com/1424473/46891310-bcd89a80-ce69-11e8-947f-2e17cd34715c.png\">\r\n"},{"labels":["api"],"text":"- Updates automatically with rpc loads (trigerred on connect)\r\n- Export api-observable whenReady (promise)\r\n- Rename extrinsics/storage `testing` to `static` (expose upon API load)"},{"labels":["api"],"text":"Rename the actual RPC wrappers -\r\n\r\n- api -> rpc-core\r\n- api-rx -> rpc-rx\r\n- api-provider -> rpc-provider\r\n\r\nThen for the actual high-level API -\r\n\r\n- api-observable -> api\r\n\r\nIn this `api-codec` seems like the odd man out, I would make the published package `@polkadot/codec`\r\n\r\n@amaurymartiny Thoughts?"},{"labels":["api",null,null,null],"text":"In Polkadot-JS API Docs https://github.com/polkadot-js/api/docs, what is the current procedure that is used (both in 'development' and in 'production') for generating the Markdown (.md) and HTML (.html) docs for our Gitbook at https://polkadot.js.org/api/?\r\n\r\nNote that I reviewed comments between @jacogr and @amaurymartiny in https://github.com/polkadot-js/api/pull/159, and created this PR https://github.com/polkadot-js/api/pull/167 to address Issue #154, although I'm not sure if what I've done is correct. So I've come up with the following questions:\r\n\r\n1) How are we generating the HTML .html files in docs/ directory?\r\n\t* If I delete a HTML doc file (i.e. docs/api-provider/classes/_http_index_.httpprovider.html) and then run `yarn; yarn run build:htmldoc;`, the Bash Terminal logs says `Documentation generated at /polkadot-js/api/docs/html`, but the file _http_index_.httpprovider.html does not exist (isn't regenerated).\r\n\r\n2) How are we generating the Markdown .md files in docs/ directory?\r\n\t* Were the Markdown .md files that are currently there generated originally generated by running `yarn clean && typedoc --theme markdown --out docs/html` (i.e. using the `markdown` instead of the `default` theme)\r\n\t\t* Note: When I previously ran `yarn; yarn run build:htmldoc;`, the Bash Terminal logs also said `To generate markdown please set option --theme markdown`.\r\n\t* Are we currently just \"manually\" modifying the Markdown .md files (instead of generating them with a script)?\r\n\r\n\t* How are we updating the Markdown .md files in docs/ directory automatically after modifying the Typedoc comments in the code comments? (i.e.\r\n\t\t```\r\n\t\t/**\r\n\t\t * @example\r\n\t\t * ```javascript\r\n\t\t...\r\n\t\t```\r\n\r\n3) Should we by using the `gitbook` command at all? https://toolchain.gitbook.com/\r\n\r\n4) Should https://polkadot.js.org/ have a {.api} link to the Github repo and a link to the docs at https://polkadot.js.org/api/?"},{"labels":["api",null,null],"text":"I cannot put it more succinctly :)\r\n\r\n- Remote extrinsics & storage (the latter will still contain some, e.g. `:code`, basically all these https://github.com/paritytech/substrate/pull/764)\r\n- Pull storage, extrinsics and events (this is new) from state_getMeta\r\n- Fixup encoders and do it properly - currently they are all-over, some in primitives, some in params\r\n- Make everything work....\r\n- ... I missed some stuff\r\n\r\ncc @amaurymartiny :)\r\n"},{"labels":["api",null],"text":"The goal is to:\r\n- Revert this change https://github.com/polkadot-js/api/pull/145/commits/16237c44cdf9828dc63fd651609f5d4910b65056\r\n- Get the CI happy again (meaning writing the missing doc)"},{"labels":["api",null],"text":"\"@polkadot/api\": \"^0.28.24\",\r\n\r\nI did not see this issue yesterday at all but this is showing up today."},{"labels":["api",null],"text":"Once less dependency hoop"},{"labels":["api",null,null],"text":""},{"labels":["api",null,null,null],"text":"Convert to ES6 classes in the same fashion as https://github.com/polkadot-js/client/pull/132\r\n\r\nhttps://github.com/polkadot-js/api/blob/master/packages/api-provider/src/http/index.ts\r\nhttps://github.com/polkadot-js/api/blob/master/packages/api-provider/src/ws/index.ts\r\n\r\nNot the only 2 places in the API layer, but a start. (Bonus convert all the closures with self)"},{"labels":["api",null],"text":"... and make sure we have proper docs here\r\n\r\n~~https://github.com/polkadot-js/dev/issues/132~~"},{"labels":["api"],"text":"https://flow.org/en/docs/linting/"}]