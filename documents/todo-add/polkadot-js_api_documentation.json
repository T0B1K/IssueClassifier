[{"labels":[null,null,"documentation"],"text":"It would be great to have instructions on how to (quickly) generate polkadot-js types to json for development purposes.\r\n\r\ne.g. something similar to the following script we created together:\r\n```javascript\r\nconst edgewareDefinitions = require('./dist/definitions.js');\r\n\r\nconsole.log(edgewareDefinitions);\r\n\r\nconst types = Object\r\n  .values(edgewareDefinitions)\r\n  .reduce((res, { types }) => ({ ...res, ...types }), {});\r\n\r\nconsole.log(JSON.stringify(types));\r\n\r\n```\r\n\r\nand add it [here](https://polkadot.js.org/api/examples/promise/90_typegen/#packages) (or similar)."},{"labels":[null,"documentation",null],"text":""},{"labels":[null,null,"documentation"],"text":"I have just rolled through the Getting Started section in tandem with the Substrate intro tutorial. Awesome work on the platform and the docs BTW, it was really fun to get straight in and have a jam.\r\n\r\nSome constrictive feedback:\r\nAs a newcomer to blockchain tech in general, I stumbled on the Transactions / Keyring section. I would suggest putting an even simpler high level primer at the start of the Keyring section to ensure the basic concept of a decentralised identity/wallet is clear. Also a bit more explanation about the demo accounts that are preloaded in the substrate demo node and that they're URI based would be helpful for the uninitiated amongst us.\r\n\r\nAgain, thanks for all the awesome work on this!"},{"labels":[null,null,"documentation"],"text":"I am sure the API can do it, because the error is also displayed in the App.\r\n\r\nBut when using the API itself, how do I know the error being returned when an extrinsic fail? Is this just a lack of documentation or there is no public API for this?\r\n\r\nI can try to work on this too."},{"labels":[null,null,"documentation"],"text":"The links in https://github.com/polkadot-js/api/blob/master/packages/api/README.md are broken, referencing a `substrate` folder that does not exist. Maybe should point to `api/docs`? Unsure otherwise I would've fixed it."},{"labels":[null,null,"documentation"],"text":"It would be really nice to have a search bar in the documentation! I always struggle to navigate to the right subpage.\r\n\r\nJaco mentioned on Riot that there is a search plugin available for vue-press. Sadly, I have no experience with vue.js, so I can't really create a PR myself."},{"labels":[null,null,"documentation"],"text":"```\r\nconst tx = api.tx.balances.transfer\r\ntx.sign(pair)\r\n```\r\n\r\nthis signs the transaction with nonce `0`, which is kind of unexpected.\r\n\r\n`signAsync` does fetch nonce, but docs doesn't really indicate the difference between `sign` and `signAsync`"},{"labels":[null,null,null,"documentation"],"text":"# Problem\r\n\r\nLet's say I have the following definition:\r\n\r\n```\r\n\"Document\": {\r\n  \"name\": \"DocumentName\",\r\n  \"uri\": \"DocumentUri\",\r\n  \"hash\": \"Text\"\r\n}\r\n```\r\n\r\nAfter generating types with `@polkadot/typegen`, the following error will appear where `Document` is defined:\r\n\r\n```\r\nType 'Document' does not satisfy the constraint 'Codec'.\r\n  Types of property 'hash' are incompatible.\r\n    Type 'Text' is missing the following properties from type 'H256': bitLength, subarray, BYTES_PER_ELEMENT, buffer, and 21 more.\r\n```\r\n\r\nThe reason, of course, is that my `Document`'s `hash` property is shadowing `Codec`'s `hash` property. This would also happen if I used `registry`, `isEmpty`, `encodedLength`, etc (all reasonable names for props).\r\n\r\n# Suggestion\r\n\r\nSince any change to `Codec` or `Struct` would break a lot of stuff, I suggest adding a note to the docs (probably in the section regarding user-defined types and maybe in the substrate docs as well) advising devs to either prefix their struct variables in some manner or listing the property names that would cause conflicts (`hash`, `registry`, `isEmpty`, etc)"},{"labels":[null,null,"documentation"],"text":"As soon as paritytech/substrate#4895 is merged"},{"labels":[null,null,"documentation"],"text":"As per https://github.com/polkadot-js/api/issues/1742#issuecomment-586579083"},{"labels":[null,null,"documentation",null],"text":"Currently the metadata actually provides lines, we smash all of it into one :( It it one of those small things which will make devs actually quite happy."},{"labels":[null,null,null,"documentation",null],"text":"After https://github.com/polkadot-js/api/pull/1844\r\n\r\nNot yet on Polkadot, but PR incoming. Replace with system.account\r\n\r\nThis is -\r\n\r\n- all comments\r\n- all examples\r\n- all doc walk-throughs"},{"labels":[null,null,null,"documentation"],"text":"Like we have events, tx, storage, ... do the same for the errors (section, name, documentation)"},{"labels":[null,null,"documentation"],"text":"It is possible to add custom RPC on Substrate side and we have done that. Now the question is how to make it available in polkadot.js?\r\n\r\nI think the API needs a way to allow user to register custom RPC just like register custom types.\r\n"},{"labels":[null,"documentation",null],"text":"When opening the links to the types listed in [api/types/enums/_codec_create_types_.typedefinfo.html#compact](https://polkadot.js.org/api/types/#primitive-types) in a new browser tab (ctrl + click) error 404 is thrown. \r\n\r\nLinks work fine when opening in same tab.\r\n\r\n"},{"labels":[null,null,"documentation"],"text":"The docs building times are just crazy long, since everything gets built atm and it is getting worse. There is a known issue in Vuepress, https://github.com/vuejs/vuepress/issues/1560\r\n\r\nIt may be worth-while seeing if we cannot just skip the generated stuff."},{"labels":[null,null,"documentation"],"text":""},{"labels":[null,"documentation"],"text":"In extrinsics v3, the API adds the tip to to the transaction, however a chain that does not have the balances module doesn't expect the tip in the payload so it will barf on handling it with the following error:\r\n```\r\nERROR: Error: \"submitAndWatchExtrinsic (extrinsic: Extrinsic): ExtrinsicStatus:: 1002: Verification Error: Execution: Could not convert parameter `tx` between node and runtime! (Client(Exe)\"\r\n```\r\n\r\nYou would need to implement your own payload format for the chain in the PolkadotJS API that doesn't include the tip."},{"labels":[null,null,"documentation"],"text":"... or . at least, remove outdated information after https://github.com/polkadot-js/api/pull/1406\r\n\r\nhttps://polkadot.js.org/api/start/typescript.html#future-work"},{"labels":[null,null,"documentation"],"text":"```javascript\r\nimport { ApiRx, WsProvider, ApiPromise } from '@polkadot/api';\r\n var provider;\r\n var api;\r\n        try {\r\n            provider = new WsProvider(rpcServer);\r\n            api = await ApiRx.create(provider).toPromise();\r\n        } catch (error) {\r\n            console.log(error);\r\n   }\r\n  api.rpc.chain.subscribeNewHeads().subscribe((header) => {\r\n          console.log(`Chain is at #${header.blockNumber}`);\r\n          console.log(`Chain is at #${header.number}`);\r\n          console.log(`Chain is at #${header}`);\r\n        });\r\n```\r\n\r\nheader.blockNumber is undefined where as documentation suggests otherwise"},{"labels":[null,null,"documentation"],"text":"At this point we generate types from `packages/types/interfaces`, as part of the generation we should output markdown that defines the classes"},{"labels":[null,null,"documentation"],"text":"- params are not showing (key1, key2)\r\n- return type should be (in this example), `Option<Keys>`\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/62187556-0bf4ab00-b36a-11e9-8bdd-df9fff8b6e00.png)\r\n"},{"labels":[null,null,null,"documentation"],"text":"Everything with all uppercase is affected.\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/62107427-de472d80-b2a7-11e9-89e4-de49dc067811.png)\r\n"},{"labels":[null,null,"documentation"],"text":"The automatic link generation to the detail pages of the type classes is broken.\r\nIt was working at one point with that syntax, so something in the config or vuepress must have changed.\r\n\r\nEvery thing written like this `[[TYPE]]` should be a generated link to the detail page.\r\n\r\nhttps://polkadot.js.org/api/types/"},{"labels":[null,"documentation"],"text":"https://github.com/polkadot-js/api/tree/master/docs/examples/promise#development-accounts"},{"labels":[null,null,"documentation"],"text":"Extracted from @xlc 's Issue in apps: https://github.com/polkadot-js/apps/issues/1017\r\n\r\nSince what's added in the editor is ultimately passed to typeRegistry , I think the issue of adding a type definition syntax page makes more sense here than in `./apps`.\r\n"},{"labels":[null,null,"documentation",null],"text":"Add short description to every type on https://polkadot.js.org/api/types/ so that people looking for information don't need to visit every type detail page to get an idea what a specific type is/ can/ should be used for.\r\n\r\nRelated to https://github.com/polkadot-js/apps/issues/1017\r\n"},{"labels":[null,null,"documentation"],"text":"There are several blocks throughout the chain that produce the following error when you try to fetch them:\r\n\r\n```\r\n2019-04-16 20:34:56        RPC-CORE: getBlock (hash: Hash): SignedBlock:: Source is too large\r\nExtError: getBlock (hash: Hash): SignedBlock:: Source is too large\r\n    at call (/Users/self/dev/polkadot/statd/node_modules/@polkadot/rpc-core/index.js:134:15)\r\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)\r\n```\r\n\r\nThis code will recreate the problem:\r\n\r\n```javascript\r\n    const hash = new Hash(\r\n        '0x6f6f9bba0eed8e3ae9446c37eee763f93118b52a315a7b46090453ba6288da1f'\r\n    );\r\n    api.rpc.chain.getBlock(hash)\r\n\r\n```\r\n\r\nAlso, you will notice there is no `then` or `catch` on the `getBlock` promise. That is because the above error does not actually land in the catch block. It gets handled and logged by the library itself, which makes it more difficult for me to handle the error in my code. "},{"labels":[null,null,"documentation"],"text":"```\r\nconst log = x => console.log(JSON.stringify(x, null, 2));\r\n\r\nconst { metadata } = await api.rpc.state.getMetadata();\r\nconst modules = metadata.asV3.modules;\r\n\r\nconst system = modules.find(m => m.name === 'system');\r\nlog(system);\r\n```\r\n\r\nThis won't work because `new Text('system') === 'system'` is false.\r\n\r\n`const system = modules.find(m => m.name.toString() === 'system');` can be used as workaround but I don't think it is good code."},{"labels":[null,null,"documentation"],"text":"Currently every instance of the Api object will create and maintain a web socket connection.\r\nIt never disconnects itself and will attempt to reconnect if connection dropped for any reason.\r\n\r\nWe have an issue that developers are not aware of this behavior and construct a new instance of Api on every method call.\r\nBecause the Api object can never automatically GC'ed by JS due to the fact the ws connection is open, this results connection leaks, memory leaks, and unstable application.\r\n\r\nI don't know what is the best way to solve this issue other than code review.\r\nI wonder if have polkadot.js enforce shared Api object will help. i.e. have a shared pool of all created api instances, return existing one if parameters (ws url) matches."},{"labels":[null,null,"documentation",null],"text":"... Alternatively, just use the testing keyring, i.e. https://polkadot.js.org/api/examples/promise/06_make_transfer/ would become\r\n\r\n```js\r\nconst { ApiPromise } = require('@polkadot/api');\r\nconst testKeyring = require('@polkadot/keyring/testingPairs').default;\r\n\r\nasync function main () {\r\n  const api = await ApiPromise.create();\r\n  const keyring = testingKeyring();\r\n\r\n  // all dev keys are on this test keyring as `.bob`, `.alice`, `.eve`, etc\r\n  await api.balances\r\n    .transfer(keyring.bob.address(), 12345)\r\n    .signAndSend(keyring.alice);\r\n}\r\n```\r\n\r\ncc @mattrutherford"},{"labels":[null,null,"documentation"],"text":"Could you provide some examples of how to create and submit a mortal transaction? e.g. I want this transaction expire after block 10000 or after 100 blocks from current height\r\n\r\nAll I can found is [ExtrinsicEra](https://github.com/polkadot-js/api/blob/master/packages/types/src/type/ExtrinsicEra.ts) which requires me to construct the details from bytes. It should provide helper methods to construct `ExtrinsicEra` from block number.\r\n\r\nI did found this https://github.com/paritytech/wiki/blob/master/Extrinsic.md#transaction-era\r\nI can try to understand the algorithm and implement the encode method but it will be good if it is done by someone already knows how to do it."},{"labels":[null,"documentation"],"text":"The documentation of HttpProvider states, that it could be used with the `ApiPromise`.\r\nTrying this, we get the error: `Api can only be used with a provider supporting subscriptions`, which is fired by `@polkadot/api/Base.js:101`\r\n\r\nhttps://github.com/polkadot-js/api/blob/879fa28d0d0e32d6de5785352f66a938adb26c76/packages/rpc-provider/src/http/index.ts#L33\r\n\r\nHow is the HttpProvider supposed to work?"},{"labels":[null,null,"documentation"],"text":"https://polkadot.js.org/api/types/\r\n\r\nClick links on one of the type throws some error on js console. Right click open in new window gives a broken md file https://polkadot.js.org/api/types/classes/_type_accountid_.accountid.md"},{"labels":[null,"documentation"],"text":"I think need some example to show submit Extrinsics, such as stake, unstake, nominate, and Voting."},{"labels":[null,"documentation",null],"text":"Need to be more explicit in the url strings to pass through in the samples. Ie. \r\n\r\n“Somewhere.com:9944” will not work, however “ws://somewhere.com:9944” will (also with secure)\r\n\r\nAlso just check errors thrown on these, no silent failures. (We just need to be slightly more explicit to convey the info, it is there, but not always 100% obvious and/or somewhat hidden)"},{"labels":[null,"documentation",null,null],"text":"Contracts has been updated (could probably go after https://github.com/polkadot-js/api/issues/590 - then convert static to be v1 static in inject and doc generation. Basically a small part of #635 )\r\n\r\nBasically -\r\n\r\n- for types/scripts, convert imports to use v1 static (not v0)\r\n- cleanup to make sure it works"},{"labels":[null,null,"documentation",null],"text":"Currently these are not included in the generated documentation, but should be.\r\n\r\n(Related to https://github.com/polkadot-js/api/issues/589 where we add some actual sample of use)"},{"labels":[null,"documentation",null],"text":"Needs https://github.com/polkadot-js/api/issues/559 (to allow derive on api/promise)"},{"labels":[null,"documentation"],"text":"Added in this issue https://github.com/polkadot-js/api/issues/554"},{"labels":[null,"documentation"],"text":"- [x] Add a chapter for ApiRx examples like https://polkadot.js.org/api/examples/promise/\r\n- [x] Go through examples in https://polkadot.js.org/api/api/classes/_rx_index_.apirx.html and update them to work with current API, polkadot and substrate versions"},{"labels":["documentation",null],"text":""},{"labels":["documentation",null],"text":"- base substrate\r\n- dev chain\r\n- Alice is available and set as upgradeKey"},{"labels":[null,null,"documentation"],"text":""},{"labels":[null,"documentation",null],"text":"Based on this https://github.com/polkadot-js/api/pull/527/files#diff-4ac32a78649ca5bdd8e0ba38b7006a1eR1 for api/promise -\r\n\r\n- Update in-code samples\r\n- Update actual docs/examples samples"},{"labels":["documentation"],"text":""},{"labels":[null,null,"documentation"],"text":"From https://polkadot.js.org/api/types/\r\n\r\n- Metadata (and it looks the same as others) is not creating a link\r\n- Other links (e.g. AccountId), try to load the .md file instead of the generated HTML - well, actually HTML is not generated\r\n\r\nNeed a solution that does not entail adding all these to SUMMARY.md"},{"labels":[null,"documentation",null],"text":""},{"labels":[null,"documentation"],"text":"We need to start linking through to these, the first order of business is to document the basics in them -\r\n\r\n- name, description\r\n- getters\r\n- static methods should be explicitly excluded from the docs (i.e. `U8a.decodeU8a` should not be included, since these are meant to be only used internally, neither any other statics in the classes). There is one exception to this blanket ban on static docs - the `Compact` methods to manage (read, write, add) lengths are utility functions and should be in.\r\n- Do not document (exclude explicitly) functions that should be replaced by extending - specifically here we have the `add`, `sub`, `eq`, `isZero` on the `UInt` classes - since that will extend `BN` (soon-ish), don't put any focus on them.\r\n\r\nIn short -\r\n\r\n- docs should be useful\r\n- it should be linkable from other places, e.g. doing an in-doc `[[ MyFantasticType ]]` should link through to the `MyFantasticType` class (this way we can use it from e.g. the api classes)\r\n- it should focus on the descriptions and getters\r\n- it should not have internal-only methods not fields (no fields at all)"},{"labels":[null,"documentation"],"text":"When I go to the API Docs > Chain state (runtime), it has a \"contract\" section https://polkadot.js.org/api/METHODS_STORAGE.html#contract in the menu but no methods associated when I click the link, and there isn't a \"substrate\" section at all (differs from Substrate UI at https://polkadot.js.org/apps/next/#/chainstate which does have that section)"},{"labels":[null,"documentation"],"text":"After Events are exposed through the API and docs are generated, add section list with anchors and order the sections and methods alphabetically as done in PR #291 and PR #302 for RPC, Extrinsics, and Storage\r\n\r\n"},{"labels":[null,"documentation",null],"text":"Some of the examples listed in the below \"Usage\" section:\r\n\r\n<img width=\"737\" alt=\"screen shot 2018-10-15 at 18 03 25\" src=\"https://user-images.githubusercontent.com/6226175/46962960-c568e500-d0a4-11e8-844f-f5457c16ad4d.png\">\r\n\r\nAre duplicated to an extent in the examples in the \"Examples\" section at links shown below. Note however that often the version in the \"Usage\" section (such as \"Submitting a transaction\") is often more concise and makes more use of chaining:\r\n\r\n<img width=\"227\" alt=\"screen shot 2018-10-15 at 18 03 37\" src=\"https://user-images.githubusercontent.com/6226175/46963018-e8939480-d0a4-11e8-9cc1-aa4739e2fbdd.png\">\r\n "},{"labels":[null,"documentation"],"text":"<img width=\"565\" alt=\"polkadot-js api type definitions promise- and reactive-based apis around substrate rpc calls 2018-10-12 21-56-10\" src=\"https://user-images.githubusercontent.com/1424473/46891310-bcd89a80-ce69-11e8-947f-2e17cd34715c.png\">\r\n"},{"labels":[null,"documentation"],"text":"I can get all the examples to work if I **follow the instructions** in https://polkadot.js.org/api/examples/, by starting a Polkadot Node with `polkadot --dev`, and then in the folder of each example running `yarn; yarn run start`\r\n\r\nHowever, if I **\"do my own thing\"** to try the examples in a separate folder, I get errors. For example if I create a package.json with `yarn init -y`. Add all dependencies `yarn add bn.js @polkadot/api @polkadot/api-provider @polkadot/storage @polkadot/extrinsics -W`. Install all dependences in node_modules with `yarn`. Start a Polkadot Node with `polkadot --dev`. And then copy/paste the code from each example into a test.js file and run it with `node test.js`.\r\n\r\nI can successfully get \"Simple Connect\" and \"Generate Accounts\" example code to work.\r\n\r\nHowever I get errors when I run the other examples as follows:\r\n* \"Listen to blocks\" example code as it just returns #0 (even thought it's already at block #180,000). \r\n* \"Listen to balance change\" example code, it returns error `TypeError: Cannot read property 'public' of undefined` (in relation to the argument that 's provided `storage.staking.public.freeBalanceOf`). \r\n* \"Read Storage\" example code returns error `TypeError: Cannot read property 'public' of undefined` (in relation to argument `storage.session.public.validators`).\r\n* \"Craft Extrinsic\" example code returns error `Error: Cannot find module '@polkadot/extrinsics/codec/encode'` (even after performing `yarn add @polkadot/extrinsics`).\r\n* \"Transfer DOTs\" example code returns error `Error: Cannot find module '@polkadot/extrinsics/codec/encode/uncheckedLength'\r\n`"},{"labels":["documentation"],"text":"TODOs (will be expanded)\r\n\r\n- adapt current samples to be poc-3 compliant\r\n- jsonrpc needs all methods documented\r\n- storage needs full documentation on use\r\n  - [ ] static interface\r\n  - [ ] dynamic interface\r\n  - [ ] actual use\r\n- extrinsics needs full documentation on use\r\n  - [ ] static interface\r\n  - [ ] dynamic interface\r\n  - [ ] actual use\r\n\r\nPotentially -\r\n\r\n~~api-observable needs full documentation for all the functions (Will be renamed to @polkadot/api)~~ (not advocating use, examples or docs - only UI use, to be revamped)\r\n\r\n"},{"labels":[null,"documentation",null,null],"text":"In Polkadot-JS API Docs https://github.com/polkadot-js/api/docs, what is the current procedure that is used (both in 'development' and in 'production') for generating the Markdown (.md) and HTML (.html) docs for our Gitbook at https://polkadot.js.org/api/?\r\n\r\nNote that I reviewed comments between @jacogr and @amaurymartiny in https://github.com/polkadot-js/api/pull/159, and created this PR https://github.com/polkadot-js/api/pull/167 to address Issue #154, although I'm not sure if what I've done is correct. So I've come up with the following questions:\r\n\r\n1) How are we generating the HTML .html files in docs/ directory?\r\n\t* If I delete a HTML doc file (i.e. docs/api-provider/classes/_http_index_.httpprovider.html) and then run `yarn; yarn run build:htmldoc;`, the Bash Terminal logs says `Documentation generated at /polkadot-js/api/docs/html`, but the file _http_index_.httpprovider.html does not exist (isn't regenerated).\r\n\r\n2) How are we generating the Markdown .md files in docs/ directory?\r\n\t* Were the Markdown .md files that are currently there generated originally generated by running `yarn clean && typedoc --theme markdown --out docs/html` (i.e. using the `markdown` instead of the `default` theme)\r\n\t\t* Note: When I previously ran `yarn; yarn run build:htmldoc;`, the Bash Terminal logs also said `To generate markdown please set option --theme markdown`.\r\n\t* Are we currently just \"manually\" modifying the Markdown .md files (instead of generating them with a script)?\r\n\r\n\t* How are we updating the Markdown .md files in docs/ directory automatically after modifying the Typedoc comments in the code comments? (i.e.\r\n\t\t```\r\n\t\t/**\r\n\t\t * @example\r\n\t\t * ```javascript\r\n\t\t...\r\n\t\t```\r\n\r\n3) Should we by using the `gitbook` command at all? https://toolchain.gitbook.com/\r\n\r\n4) Should https://polkadot.js.org/ have a {.api} link to the Github repo and a link to the docs at https://polkadot.js.org/api/?"},{"labels":["documentation"],"text":"So everything looks nice, e.g. https://polkadot.js.org/api/\r\n\r\nHowever, from https://polkadot.js.org/api/api/ scrolling down to Classes and then clicking on `Api` does not quite work... Basically it seems like this https://github.com/polkadot-js/api/tree/master/docs/api/classes does not result in a corresponding `api.html` file generated from `api.md`. (While all the others at higher levels seem to be doing fine)\r\n\r\nSince we copy across to docs in the build script, I also too a look at my local `_book` folder, same there, it is missing. :("},{"labels":["documentation"],"text":"Not a documentation issue, rather implementation one - createInterface and create* friends should not be visible here \r\n\r\n- https://github.com/polkadot-js/api/tree/master/docs/api\r\n- https://github.com/polkadot-js/api/tree/master/docs/api-rx\r\n"},{"labels":["documentation"],"text":"https://github.com/polkadot-js/api/blob/master/docs/api/classes/_index_.api.md\r\n\r\nSeems like there is a missing \"```\" somewhere. Example doesn't render as example, text renders as, well, text.\r\n\r\nAnd a link to the gitbook pages - https://polkadot.js.org/api/api/classes/_index_.api.html and this (looks) a bit worse https://polkadot.js.org/api/api-provider/classes/_ws_index_.wsprovider.html"},{"labels":[null,"documentation"],"text":"The goal is to:\r\n- Revert this change https://github.com/polkadot-js/api/pull/145/commits/16237c44cdf9828dc63fd651609f5d4910b65056\r\n- Get the CI happy again (meaning writing the missing doc)"},{"labels":[null,null,"documentation"],"text":""},{"labels":[null,"documentation"],"text":"... and make sure we have proper docs here\r\n\r\n~~https://github.com/polkadot-js/dev/issues/132~~"}]