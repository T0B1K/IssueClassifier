[{"labels":[null,null,"bug"],"text":"I'm creating two `ApiPromise` instances, one use to connect Kusama network and the other use to connect Polkadot network. When I use the two instances to call `paymentInfo` for estimate tx fee at the same time, then get error below:\r\n\r\n`RPC-CORE: queryInfo(extrinsic: Bytes, at?: BlockHash): RuntimeDispatchInfo:: 2: Unable to query dispatch info.: Error decoding field Call :: Authorship.0`\r\n\r\nmy code:\r\n\r\n    const kusamaApi = new ApiPromise({ provider: kusamaProvider });\r\n    await kusamaApi.isReady;\r\n    const polkadotApi = new ApiPromise({ provider: polkadotProvider });\r\n    await polkadotApi.isReady;\r\n\r\n    const transfer = await kusamaApi.tx.balances.transfer(\"Efc2jfxwUVUrjCSs4t3o6QJU3R8xqtHpwDvhD2f1oKactFX\", 1)\r\n        .paymentInfo(\"Efc2jfxwUVUrjCSs4t3o6QJU3R8xqtHpwDvhD2f1oKactFX\");\r\n\r\n    const transfer2 = await polkadotApi.tx.balances.transfer(\"136HWkbAAtk2YcPX41813HsTB58YrUdFT47fTqk4668c4Fkv\", 1)\r\n        // this call will get error\r\n        .paymentInfo(\"136HWkbAAtk2YcPX41813HsTB58YrUdFT47fTqk4668c4Fkv\");\r\n"},{"labels":[null,null,"bug"],"text":"Sanitizer needs TLC\r\n\r\nFix this -\r\n\r\nhttps://github.com/polkadot-js/api/commit/3d67b75059a2083ffe5757932ed2398abf27e3ce#diff-d3faa316bd5c74c6bf196aa849de6c07R26-R27\r\n\r\nIssue introduced here - \r\n\r\nhttps://github.com/polkadot-js/api/pull/2557/files#diff-9b56692be303c9c373a391e5a7a8ebbfR10783"},{"labels":[null,null,"bug"],"text":"When querying `api.derive.chain.getHeader()` with an historic block hash (block from an older spec version) consecutively, it fails with the error `Unable to decode Vec on index 0 Tuple: failed on 0:: Invalid character`. I assume this is related to the optimization introduced here: https://github.com/polkadot-js/api/commit/637069d723bf9a8afcd42af8b3162a20737ff501\r\n\r\nHere is a link to some code that illustrates the issue: https://github.com/emostov/substrate-tx-seed/blob/1-31-beta-17/src/main.ts (example is just in main.ts, rest of repo irrelevant, except for package info)\r\n\r\nAnd here is that same code for posterity: \r\n```\r\nasync function main(): Promise<void> {\r\n\tconst wsProvider = new WsProvider('wss://rpc.polkadot.io');\r\n\tconst api = await ApiPromise.create({\r\n\t\tprovider: wsProvider,\r\n\t});\r\n\r\n\tconst hash1378238 =\r\n\t\t'0xbc38431a6a4e0cdaadd3b34d1fd1d6692cb08ff07d58bb1726101d341f100892'; // polkadot block number 1378238\r\n\tconst firstTry1378238 = await api.derive.chain.getHeader(hash1378238);\r\n\tconsole.log('This works: (firstTry1378238) ', firstTry1378238?.toHuman());\r\n\r\n\tconst secondTry1378238 = await api.derive.chain.getHeader(hash1378238);\r\n\tconsole.log('This works: (secondTry1378238) ', secondTry1378238?.toHuman());\r\n\r\n\tconst hash1 =\r\n\t\t'0xc0096358534ec8d21d01d34b836eed476a1c343f8724fa2153dc0725ad797a90'; // polkadot block number 1\r\n\r\n\tconst firstTry1 = await api.derive.chain.getHeader(hash1);\r\n\tconsole.log('This works: (firstTry1)', firstTry1?.toHuman());\r\n\r\n\tconst secondTry1 = await api.derive.chain.getHeader(hash1);\r\n\t// Logs to console: Unable to decode Vec on index 0 Tuple: failed on 0:: Invalid character\r\n\tconsole.log(\r\n\t\t'This will not log to console (secondTry1)',\r\n\t\tsecondTry1?.toHuman()\r\n\t);\r\n}\r\n```\r\n\r\nWorth noting I consistently get this error with polkadot block 1, but with other low number blocks, consecutive calls seem to work sometimes."},{"labels":[null,null,"bug"],"text":"\r\n# Error\r\n\r\nI went to go bump substrate-api-sidecar's @polkadot/api from 1.29.1 to 1.30.0-beta.6 and started encountering errors starting with `createType(SignedBlock)` on older Kusama blocks that do not occur when I go back to 1.29.1.\r\n\r\n`localhost:8080/block/900` -> `createType(SignedBlock):: Struct: failed on 'block':: Struct: failed on 'extrinsics':: createType(ExtrinsicV4):: createType(ExtrinsicSignatureV4):: Maximum call stack size exceeded`\r\n\r\nAnd in the terminal Sidecar logs: `2020-08-23 16:16:32        RPC-CORE: getBlock(hash?: BlockHash): SignedBlock:: createType(SignedBlock):: Struct: failed on 'block':: Struct: failed on 'extrinsics':: createType(ExtrinsicV4):: createType(ExtrinsicSignatureV4):: Maximum call stack size exceeded`.\r\n\r\nI think the error originates from this call to `getBlock`: https://github.com/paritytech/substrate-api-sidecar/blob/master/src/services/blocks/BlocksService.ts#L42\r\n\r\n# How to produce error\r\n\r\nTo recreate the error (you will have to install `wasm-pack` if you don't already have it):\r\n```\r\ngit clone https://github.com/paritytech/substrate-api-sidecar.git\r\ngit checkout zeke-1-3-b # commit e0402f1\r\nyarn\r\nSAS_SUBSTRATE_WS_URL=wss://kusama-rpc.polkadot.io yarn start\r\n```\r\nand then `curl localhost:8080/block/900` or any other lower number block to get the above errors.\r\n\r\n# How to produce expected behavior\r\n\r\nTo get the expected behavior\r\n```\r\ngit checkout master # commit c354be3\r\nyarn\r\nSAS_SUBSTRATE_WS_URL=wss://kusama-rpc.polkadot.io yarn start\r\n```\r\nand then `curl localhost:8080/block/900` or any other valid block number to get a 200 response.\r\n\r\n### Other notes\r\n\r\n- I get the same errors with wss://cc3-5.kusama.network\r\n- I don't get the error with `curl localhost:8080/block/0`, presumably because it has no extrinsics\r\n- I don't get similar errors with wss://rpc.polkadot.io"},{"labels":[null,null,"bug"],"text":"The api object has a memory leak. This is consistent across many versions.\r\n\r\nHere you see the memory consumption. The consumption consistently drops when disconnecting and reconnecting.\r\n\r\n![image](https://user-images.githubusercontent.com/5869273/85206318-cffe6780-b2e6-11ea-86c7-5bc5df1deccc.png)\r\n\r\nIs there a clean up we are missing somewhere?\r\n"},{"labels":[null,"bug",null],"text":"The links in https://github.com/polkadot-js/api/blob/master/packages/api/README.md are broken, referencing a `substrate` folder that does not exist. Maybe should point to `api/docs`? Unsure otherwise I would've fixed it."},{"labels":[null,null,"bug"],"text":"Depositing into the EVM account yields:\r\n```\r\nTry again\r\nError: createType(Vec<EventRecord>):: findMetaEvent: Unable to find Event with index 0x0012/[0,18]\r\n```"},{"labels":[null,null,"bug",null],"text":"Reproduce:\r\n\r\n```\r\nawait api.disconnect()\r\n\r\nawait api.derive.staking.stakerRewards(`FPstA2NF8wH4d8Z3VWhmALLSpcMi8Tttsv8jsJNZvL1y7GA`, 581)\r\n  .catch(console.error);\r\nconsole.log(\"Should be reached\");\r\n```\r\n\r\n\"Should be reached\" will never be called"},{"labels":[null,null,"bug"],"text":"![image](https://user-images.githubusercontent.com/7029338/81252517-3b171600-907a-11ea-9059-3454b7784cac.png)\r\nhttps://github.com/polkadot-js/api/blob/master/packages/api/src/base/Init.ts#L130-L145\r\nBecause of these lines of code, metadata is requested twice, causing unnecessary performance problems.\r\nThere's a simple fix:\r\n![image](https://user-images.githubusercontent.com/7029338/81252742-ca242e00-907a-11ea-820b-b933e24b41bf.png)\r\nAdd `skip(1)`. Skip the first time and avoid repeated initialization."},{"labels":[null,null,"bug"],"text":"I'm trying to get info on block [2074527](https://polkascan.io/pre/kusama/block/2074527) with polkadot/api 1.13.0-beta.12.\r\n\r\nThe runtime spec version of the block is 1058 (the latest), so this may be not a historic block decoding issue.\r\n\r\n```js\r\nawait api.rpc.chain.getBlock(\"0x938542841ea11d49ea935cfff1870f8f567dbdc5bfe1529445a805fd6d792e32\")\r\n```\r\n\r\nreturns the following error:\r\n\r\n```\r\nRPC-CORE: getBlock(hash?: BlockHash): SignedBlock:: createType(SignedBlock):: Struct: failed on 'block':: Struct: failed on 'extrinsics':: createType(ExtrinsicV4):: createType(Call):: Struct: failed on 'args':: Vec length 406809645981752381342736809236557020018769378140960137781029859556038752627072435177728 exceeds 32768\r\n```\r\n\r\nI also tried `api.registerTypes` and `api.injectMetadata` before `getBlock`, the error still occurred.\r\n\r\nAny ideas?"},{"labels":[null,null,"bug"],"text":"![image](https://user-images.githubusercontent.com/7029338/81122194-7fc08580-8f84-11ea-8980-b8c4f2ba72f4.png)\r\nI think it's because `typegen/ src/templates` wasn't published."},{"labels":[null,null,"bug"],"text":"tx signing is broken after update :("},{"labels":[null,null,"bug"],"text":"There seems to be some parsing error when using a custom struct in the `constants` tab of the Polkadot JS Apps.\r\n\r\nThere might be a bug in Polkadot JS Apps, but in general here is the steps to get what I think you want.\r\n\r\nWe have a custom type:\r\n```\r\n#[derive(Encode, Decode)]\r\nstruct Rule {\r\n    name: Vec<u8>,\r\n    version: u32,\r\n    ops: Vec<u32>,\r\n}\r\n```\r\n\r\nWe place a `const` in the `decl_module` so it exposes it in the metadata:\r\n```\r\n         /// Rules for the PoE\r\n        const rule: Rule = Rule {\r\n            name: b\"rule 1\".to_vec(),\r\n            version: 1,\r\n            ops: vec![2]\r\n        };\r\n```\r\n\r\nThen we start our chain. In Polkadot JS Apps, I register a new custom type:\r\n```\r\n{\r\n  \"Rule\": {\r\n    \"name\": \"Vec<u8>\",\r\n    \"version\": \"u32\",\r\n    \"ops\": \"Vec<u32>\"\r\n  }\r\n}\r\n```\r\n\r\nThen I go look at the constants in the pallet:\r\n\r\n<img width=\"1421\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1860335/77825708-6ae20e00-710b-11ea-893b-1c2da81d3b0e.png\">\r\n\r\nIt seems it does not correctly detect the length prefix. When i parse the bytes on my own, it works:\r\n\r\n<img width=\"1421\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1860335/77825726-8816dc80-710b-11ea-89d0-0c294b580dc7.png\">\r\n\r\n\r\n"},{"labels":[null,null,"bug"],"text":"Looks like the UI is not showing the accurate reward amount for validators with a commission greater than 0.\r\n\r\nFor instance, the message for this tx https://polkascan.io/pre/kusama/transaction/0x342d516e1f99a7ce92bc5f98aa95ef4566b4f40b70d11367deb75cc9d5d2d8de was `Payout rewards (0.000 KSM)`, the validator has set a 100% commission."},{"labels":[null,null,"bug"],"text":"Returns this error:\r\n```\r\n{\"error\":\"Error: system.events() does not take any arguments, 2 found\"}\r\n```"},{"labels":[null,null,null,"bug"],"text":"### Goal:\r\n\r\nUpdate `signAsync` to make the second argument optional, and default to `{}`\r\n\r\n### Background:\r\n\r\nCurrently this code will crash:\r\n\r\n`const signed = await api.system.remark().signAsync(pair, options);` when `options` is `undefined`, it gives this error\r\n\r\n```\r\n(node:78914) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nonce' of undefined\r\n    at Submittable.value (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:59:42)\r\n    at Submittable.value (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:129:99)\r\n    at /Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:251:110\r\n    at /Users/xiliangchen/projects/playground/node_modules/@polkadot/api/promise/Api.js:78:14\r\n    at Submittable.signAsync (/Users/xiliangchen/projects/playground/node_modules/@polkadot/api/submittable/createClass.js:251:170)\r\n    at /Users/xiliangchen/projects/playground/index.ts:28:33\r\n    at step (/Users/xiliangchen/projects/playground/index.ts:33:23)\r\n    at Object.next (/Users/xiliangchen/projects/playground/index.ts:14:53)\r\n    at /Users/xiliangchen/projects/playground/index.ts:8:71\r\n    at new Promise (<anonymous>)\r\n```\r\n\r\n### Actions:\r\n\r\nMake second argument optional\r\n\r\nhttps://github.com/polkadot-js/api/blob/e77050b9f59a0b772d1d0b8c5c1da488a7c36810/packages/api/src/submittable/createClass.ts#L72\r\n\r\nUpdate interface\r\n\r\nhttps://github.com/polkadot-js/api/blob/e77050b9f59a0b772d1d0b8c5c1da488a7c36810/packages/api/src/submittable/types.ts#L55\r\n\r\nProvide appropriate unit tests.\r\n\r\n----\r\n\r\n@jacogr please tag this if you are happy about this.\r\n\r\nTags:\r\n`bounty-awaiting-approval`\r\n`bounty-XS`"},{"labels":[null,null,"bug"],"text":"I think the reason is that storage update did not handle the error.\r\n\r\nhttps://github.com/polkadot-js/api/blob/master/packages/rpc-core/src/index.ts#L250-L257\r\nThe error thrown by the formatOutput was not handled properly.\r\n\r\n\r\nIf I change it to this it will work: \r\n```javascript\r\nconst update = (error?: Error | null, result?: any): void => {\r\n  if (error) {\r\n    l.error(createErrorMessage(method, error));\r\n    observer.error(error)\r\n  }\r\n  try {\r\n    observer.next(this.formatOutput(method, params, result));\r\n  } catch(error) {\r\n    observer.error(error)\r\n  }\r\n};\r\n```"},{"labels":[null,null,"bug"],"text":""},{"labels":[null,null,"bug",null],"text":"i.e. `versionString` becomes `versionText`. We need the same logic we apply in boxing (that checks for a valid start, before replace).\r\n\r\nFix this -\r\n\r\nhttps://github.com/polkadot-js/api/pull/1951/files#diff-16721fcfbabb6adf34be1260e3ca19c3R65-R70"},{"labels":[null,"bug"],"text":"rel/details: https://github.com/playproject-io/datdot-substrate/issues/18\r\n\r\nWhen we make the same extrinsic call using multiple accounts (calling signAndSend on the same extrinsic using multiple pairs) practically simultaneously, the callback object appears to return the same events for every call - when each call should in reality return unique events.\r\n\r\nHere is the exact code where this occurs:\r\n\r\nhttps://github.com/joshua-mir/datdot-service/blob/e5ee50b3b5080c9cafaae71cae9deff2e6ec249b/index.js#L175-L228\r\n\r\nI have confirmed that we see every expected event separately in the UI - so this appears to be an issue specific to events in callbacks."},{"labels":[null,null,"bug"],"text":"I am trying to re-create a metadata object with the data from RPC endpoint. \r\n\r\n**Setup** \r\n\r\n`git clone https://github.com/substrate-developer-hub/substrate-node-template.git my-node`\r\n\r\nsubstrate node version 2.0.0-8b6fe66-x86_64-macos\r\npolkadot.js v1.0.1\r\n\r\n```\r\n   const {TypeRegistry, Metadata} = require ('@polkadot/types')\r\n\r\n   ... some api setup \r\n\r\n    const rpcMetadata = await api.rpc.state.getMetadata()\r\n\r\n    const registry1 = new TypeRegistry()\r\n    const registry2 = new TypeRegistry()\r\n\r\n    const metadata_Obj = new Metadata(registry1, rpcMetadata)                // this works\r\n\r\n    const metadata_Hex = new Metadata(registry2, rpcMetadata.toHex()) // this does not work\r\n\r\n```\r\n\r\nBelow is the error message:\r\n\r\n```\r\nError: Unable to create Enum via index 44, in Plain, Map, DoubleMap\r\n    at assert (/directory-name/node_modules/@polkadot/util/assert.js:35:11)\r\n    at createFromValue (/directory-name/node_modules/@polkadot/types/codec/Enum.js:44:20)\r\n    at decodeFromValue (/directory-name/node_modules/@polkadot/types/codec/Enum.js:68:12)\r\n    at Function.decodeEnum (/directory-name/node_modules/@polkadot/types/codec/Enum.js:119:12)\r\n    at new Enum (/directory-name/node_modules/@polkadot/types/codec/Enum.js:95:26)\r\n    at new <anonymous> (/directory-name/node_modules/@polkadot/types/codec/Enum.js:125:9)\r\n    at new Type (/directory-name/node_modules/@polkadot/types/codec/create/registry.js:150:16)\r\n    at decodeU8a (/directory-name/node_modules/@polkadot/types/codec/utils/decodeU8a.js:27:17)\r\n    at decodeU8a (/directory-name/node_modules/@polkadot/types/codec/utils/decodeU8a.js:28:25)\r\n    at decodeU8a (/directory-name/node_modules/@polkadot/types/codec/utils/decodeU8a.js:28:25)\r\n```\r\n___\r\n\r\nI have tried the same for substrate node version 2.0.0-1b4b2c0-x86_64-macos which works without a problem. However for this version, the same error occurs when I have followed the instructions from [here](https://substrate.dev/docs/en/tutorials/creating-a-runtime-module/) to create a module in it's own pallet. I have not made any changes to the pallet template cloned from `git clone https://github.com/substrate-developer-hub/substrate-pallet-template.git my-pallet`. \r\n___\r\n\r\n\r\n\r\n"},{"labels":[null,null,"bug"],"text":"There is an all upper-case variants Enum defined in our project and the type definition in JS lib is like \r\n\r\n```javascript\r\nCurrencyId: {\r\n  _enum: ['ACA', 'AUSD', 'DOT', 'XBTC']\r\n},\r\n```\r\n\r\nBut calling our custome RPC with this `CurrencyId` as parameter would return error:\r\n\r\n```javascript\r\nlet v = await api.rpc.oracle.getValue(\"DOT\");\r\n```\r\n\r\n> Error: getValue(key: OracleKey): Option<TimeStampedValue>:: -32602: Invalid params: unknown variant `dot`, expected one of `ACA`, `AUSD`, `DOT`, `XBTC`.\r\n\r\nAfter some researching in @polkadot/api, it turns out to me that `toJSON()` was called on the `CurrencyId` param, but the return value is a lower-case string `dot`, instead of `DOT`.\r\n\r\nhttps://github.com/polkadot-js/api/blob/deecf4853ec250745dcc2a770f073ad3b10ff452/packages/rpc-core/src/index.ts#L250\r\n\r\nWhich is caused by the `stringCamelCase` call in `toJSON`, if I was not wrong. The all upper-case variants looks like an edge case for the implementation. And I wonder why the json result needs to be camel case?\r\n\r\nhttps://github.com/polkadot-js/api/blob/deecf4853ec250745dcc2a770f073ad3b10ff452/packages/types/src/codec/Enum.ts#L267-L271"},{"labels":[null,null,null,"bug"],"text":"TS complains with a:\r\n> Property 'signAndSend' does not exist on type 'Call'.ts(2339)\r\n\r\nwhen using the following code:\r\n```js\r\nconst wsProvider = new WsProvider('ws://127.0.0.1:9944');\r\nconst api = await ApiPromise.create({ provider: wsProvider });\r\nawait web3Enable(APP);\r\n\r\nconst allAccounts = await web3Accounts();\r\nconst injected = await web3FromSource(allAccounts[0].meta.source);\r\napi.setSigner(injected.signer);\r\nconst keyring = new Keyring({ type: 'sr25519' });\r\nconst account = keyring.getPair(allAccounts[0].address);\r\nconst transfer = api.tx.democracy.second('0x01');\r\n\r\n// Sign and Send the extrinsic\r\ntransfer.signAndSend(account, ({ events = [], status }) => {\r\nif (status.isFinalized) {\r\n  console.log('Successful extrinsic with hash ' + status.asFinalized.toHex());\r\n} else {\r\n  console.log('Status of extrinsic: ' + status.type);\r\n}\r\n```\r\n\r\ncc @niklabh https://github.com/paritytech/polkassembly/pull/265"},{"labels":[null,null,"bug",null],"text":"I'm trying to connect to my unsynced node with api 1.0.0-beta.17 \r\n```\r\ntarget=#750431 (25 peers), best: #520014\r\n```\r\nI'm getting \r\n![Screen Shot 2020-01-23 at 16 42 13](https://user-images.githubusercontent.com/3409250/72999295-74938080-3dff-11ea-9667-bd96dcc9c5bd.png)\r\n\r\nwhich is uncatchable with both of these\r\n\r\n```javascript \r\ntry {\r\n  let api = await ApiPromise.create().catch(e => {})\r\n} catch (e) {}\r\n```\r\n\r\nIt also doesn't emit error on \r\n```javascript\r\nprovider.on('error',(e)=>{})\r\n```\r\n\r\nIt results in stuck application since I can't react on anything that happened here. It also happens when you get error while connecting to ``wsprovider`` but it can be handled by wrapping api creation inside another promise, which I can reject. It is not ideal, but it works.\r\n\r\nWhen trying to connect to ``wss://cc3-5.kusama.network/`` I get this on the other hand\r\n\r\n![Screen Shot 2020-01-23 at 16 41 42](https://user-images.githubusercontent.com/3409250/72999309-79583480-3dff-11ea-839f-8dc55b605d44.png)\r\n"},{"labels":[null,null,null,"bug"],"text":"I have a simple storage map from `T::AccountId => Option<()>` acting like a boolean.\r\n\r\nI set the storage of user to `()` indicating that boolean (`isSome`) should be true.\r\n\r\nThe Polkadot JS API seems to return `value.isSome === false`."},{"labels":[null,null,"bug"],"text":"When trying to query all the nominators from a `linked_map`:\r\n\r\n```\r\nlet result = await api.query.staking.nominators();\r\nconsole.log(JSON.stringify(result));\r\n```\r\n\r\nI get the error:\r\n\r\n```\r\nTypeError: Cannot read property 'next' of undefined\r\n    at SwitchMapSubscriber.project (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/@polkadot/api/base/Decorate.js:289:19)\r\n    at SwitchMapSubscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/operators/switchMap.js:49:27)\r\n    at SwitchMapSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at ReplaySubject.Subject.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subject.js:60:25)\r\n    at ReplaySubject.nextInfiniteTimeWindow (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/ReplaySubject.js:48:31)\r\n    at ConnectableSubscriber.Subscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:89:26)\r\n    at ConnectableSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at DistinctUntilChangedSubscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/operators/distinctUntilChanged.js:69:30)\r\n    at DistinctUntilChangedSubscriber.Subscriber.next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:66:18)\r\n    at CatchSubscriber.Subscriber._next (/Users/shawntabrizi/Documents/GitHub/substrate-one-million-remarks/node_modules/rxjs/internal/Subscriber.js:89:26)\r\n```\r\n\r\nBut calling `validators()` work just fine :)"},{"labels":[null,"bug"],"text":"when using btreemap in decl_storage:\r\n\r\n```\r\ndecl_storage! {\r\n    trait Store for Module<T: Trait> as Storage {\r\n    ...\r\n    Book get(get_book): map T::AssetId => BTreeMap<T::Balance, Vec<T::Hash>>;\r\n    ...\r\n    }\r\n}\r\n\r\n```\r\n\r\npolkadot-js has an error like ### **\"API/DECORATOR: Error: FATAL: Unable to initialize the API: Unhandled: Unable to create and validate type from BTreeMap<Balance,Vec<Hash>>\"**\r\nIt seems that we need to add an case for btreemap in @polkadot/metadata/Metadata/util/validateTypes.js"},{"labels":[null,null,"bug"],"text":"`@polkadot/types` uses `@polkadot/metadata` without including it in the dependencies\r\n\r\nhttps://github.com/polkadot-js/api/blob/614cf4e48409ceb53db4e806541c3e2665bf602d/packages/types/src/codec/create/registry.ts#L8\r\n\r\nhttps://github.com/polkadot-js/api/blob/614cf4e48409ceb53db4e806541c3e2665bf602d/packages/types/package.json#L28-L34"},{"labels":[null,null,"bug"],"text":"![image](https://user-images.githubusercontent.com/1424473/69898012-d1207500-1353-11ea-9d0c-8bc285fc3d9f.png)\r\n\r\n"},{"labels":[null,"bug"],"text":"![image](https://user-images.githubusercontent.com/1424473/69850347-6140ba80-127f-11ea-8219-c8537b54fc2d.png)\r\n"},{"labels":[null,null,"bug"],"text":"We need a length - progress here https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/staking/info.ts#L54"},{"labels":[null,null,"bug"],"text":" I used the latest available [apps](https://github.com/polkadot-js/apps) `7048a65c3dc0bea2061a653a7f63baf8b192ddb4` and [substate node](https://github.com/paritytech/substrate) `7874be8668ba6ff43c107c5da26105f934654cc2` to `deploy` an [erc20 contract]()  and found that the value set in `on_deploy` is not the same as the value returned by the `total_supply` method. I recently found this bug with the new ABI, but I am not sure if it is caused by [api](https://github.com/polkadot-js/api) or `substrate node`.This is the [abi file ](https://github.com/polkadot-js/api/files/3823230/abi.txt) I am using.This problem exists with all method calls in the contract instance.\r\n"},{"labels":[null,null,"bug"],"text":"When I tested the contract rpc call method, the main code is as follows:\r\n```\r\nimport { Abi, PromiseContract as ApiContract } from '@polkadot/api-contract';\r\nimport { ContractCallOutcome } from '@polkadot/api-contract/types';\r\nimport { ApiPromise } from '@polkadot/api';\r\nimport { stringToU8a,hexToU8a,hexToString,u8aToHex } from'@polkadot/util';\r\nimport * as get_method_test from \"../contract_test.json\";\r\n\r\nconst abi_str = (<any>get_method_test);\r\nconst abi = getAbiObj(abi_str);\r\n\r\nnew ApiPromise().isReady.then((api) => {\r\n \r\n    const contractApi = new ApiContract(api, abi, \"5EUE4FAE9wGyxhKdFkhNsm9T8x55VRACzzpPpMDyWEE6h1is\");\r\n    const {fn,def} = contractApi.getMessage(\"get_original_nonce\");\r\n    let data = fn();\r\n    console.log(\"message data:\"+u8aToHex(data)); \r\n    const contract_method = contractApi.call('rpc',def.name,0,500000);\r\n     contract_method.send(\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\").then(\r\n        (outcome:ContractCallOutcome):void =>{\r\n            console.log(\"isSuccess:\"+outcome.isSuccess+\",value:\"+outcome.output.toString());\r\n        }\r\n    );\r\n});\r\n```\r\nAn error message appears when I run:\r\n```\r\n(node:26072) UnhandledPromiseRejectionWarning: ReferenceError: name is not defined\r\n    at PromiseContract.getMessage (/home/jeremy/work/demo/typescript/substrate-ts-api-test/node_modules/@polkadot/api-contract/base/util.js:38:100)\r\n    at /home/jeremy/work/demo/typescript/substrate-ts-api-test/src/index.ts:13:11\r\n```\r\nAccording to the prompt, I find the corresponding file and modify the field corresponding to the line `31,38`: After the `name` is changed to `def.name`, the program can run normally.But seeing that your [apps](https://polkadot.js.org/apps/#/explorer) is working fine, I don't know if I am calling the wrong way.\r\nI use `@polkadot/api-contract,@polkadot/api` version is `0.96.0-beta.34`,test using [ABI](https://github.com/polkadot-js/api/files/3818526/contract_test.txt)\r\n"},{"labels":[null,null,"bug"],"text":" I get an error `main.749f3709.js:21450 Uncaught Error: createType({ \"elems\": \"Vec\" }):: Unable to find plain type for {\"info\":6,\"type\":\"Vec\"}`, when I call deploy at https://polkadot.js.org/apps/#/contracts/code.\r\n![sALNPfuHKHgwCxEqXIRgdfDM](https://user-images.githubusercontent.com/13585788/68310368-d985e700-00ea-11ea-8d9e-c8783e277fb4.png)\r\n When I remove Vec<u8> in deploy, the contract can be instantiated normally."},{"labels":[null,null,"bug"],"text":"This may seem a dumb issue but when trying to fetch metadata from Edgeware via `yarn run chain:info --ws  wss://mainnet1.edgewa.re`, the connection is always rejected with error message: `API-WS: disconnected from wss://mainnet1.edgewa.re code: '1006' reason: 'connection failed'`. This is not the case with any of the other hosted nodes (Kusama, Flaming Fir, etc.) nor with a local node.\r\n\r\nWeird part is that I'm able to connect to Edgeware on apps and get the metadata through the apps toolbox no problem. "},{"labels":[null,"bug"],"text":"when call extrinsic, api will hang there and no errors will be thrown when sender has no enough balance. there used to throw invalid extrinsic when the same situation"},{"labels":[null,null,"bug"],"text":"SubmittableExtrinsic.js: send and sendAndSign's subscribe does not work\r\n```\r\nextrinsic.signAndSend(signer, { nonce }, ({ events = [], status }) => {\r\n                console.log('Transaction status:', status.type);\r\n\r\n                if (status.isFinalized) {\r\n                    console.log('Completed at block hash', status.asFinalized.toHex());\r\n                    console.log('Events:');\r\n\r\n                    events.forEach(({ phase, event: { data, method, section } }) => {\r\n                        console.log('\\t', phase.toString(), `: ${section}.${method}`, data.toString());\r\n                    });\r\n\r\n                    process.exit(0);\r\n                }\r\n            });\r\n```\r\nTypeError: Cannot read property 'type' of undefined"},{"labels":[null,null,null,"bug"],"text":"Via the apps JS console -\r\n\r\n```js\r\nconst inner = api.tx.system.setCode('0x0a0b0c');\r\nconst outer = api.tx.sudo.sudo(inner);\r\n\r\nconsole.log('inner', inner.toHex());\r\nconsole.log('outer', outer.toHex())\r\n```\r\n\r\nYields this -\r\n\r\n- inner: `0x1c0300030c0a0b0c`\r\n- outer: `0x2403120000030c0a0b0c `\r\n\r\nThe issue is that the wrapped value does not have the length prefix, as required"},{"labels":[null,null,"bug"],"text":"I am not convinced this is correct - \r\n\r\nhttps://github.com/polkadot-js/api/blob/master/packages/types/src/codec/Enum.ts#L215-L225\r\n\r\nBasically, to determine equality, surely the index should match as well?  (At the very least when comparing 2 Enums, i.e. `typeof Enum` - which is actually missing here, unlike others)\r\n\r\nWe should also be able to compare 2 and enum against the JSON value\r\n\r\n```js\r\nconst TEST_A = { a: 'test };\r\nconst TEST_B = { b: 'test };\r\n\r\nconst testA = new Enum({ a: Text, b: Text }, TEST_A);\r\nconst testB = new Enum({ a: Text, b: Text }, TEST_B);\r\n\r\nconsole.log(testA.eq(TEST_A)) // should be true\r\nconsole.log(testB.eq(TEST_A)) // should be false\r\nconsole.log(testA.eq(testB)) // should be false\r\nconsole.log(testA.eq('test')) // probably true as per current\r\n```\r\n"},{"labels":[null,null,"bug"],"text":"https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/imOnline/receivedHeartbeats.ts#L24\r\n\r\nHowever the `imOnline` query takes the . index, not the addres \r\n\r\n![image](https://user-images.githubusercontent.com/1424473/66158720-bddc7c00-e626-11e9-9277-9a1e6d41245b.png)\r\n\r\n- retrieve session index & keys\r\n- lookup keys in the array\r\n- then do the query based on index (not address)"},{"labels":[null,"bug"],"text":"This is a regression:\r\n```\r\nconst api = await ApiPromise.create();\r\nconst fees = await api.derive.balance.fees(); // fees has type `any`\r\n```\r\n\r\nLooking a bit in detail, it might be related to the refactor of interfaces to `types/src/interface`.\r\n\r\nSo `yarn build` generates the the .d.ts files, and having a look at `api/build/base/Decorate.d.ts`, it says for the derive:\r\n\r\n```\r\n        balances: {\r\n            all: import(\"../types\").MethodResult<ApiType, (address: string | import(\"../../../types/src/interfaces\").AccountId | import(\"../../../types/src/interfaces\").AccountIndex | import(\"../../../types/src/interfaces\").Address) => Observable<import(\"../../../api-derive/src/types\").DerivedBalances>>;\r\n            votingBalance: import(\"../types\").MethodResult<ApiType, (address: string | import(\"../../../types/src/interfaces\").AccountId | import(\"../../../types/src/interfaces\").AccountIndex | import(\"../../../types/src/interfaces\").Address) => Observable<import(\"../../../api-derive/src/types\").DerivedBalances>>;\r\n            fees: import(\"../types\").MethodResult<ApiType, () => Observable<import(\"../../../api-derive/src/types\").DerivedFees>>;\r\n            votingBalances: import(\"../types\").MethodResult<ApiType, (addresses?: (string | import(\"../../../types/src/interfaces\").AccountId | import(\"../../../types/src/interfaces\").AccountIndex | import(\"../../../types/src/interfaces\").Address)[] | undefined) => Observable<import(\"../../../api-derive/src/types\").DerivedBalances[]>>;\r\n            votingBalancesNominatorsFor: import(\"../types\").MethodResult<ApiType, (address: string | import(\"../../../types/src/interfaces\").AccountId | import(\"../../../types/src/interfaces\").AccountIndex | import(\"../../../types/src/interfaces\").Address) => Observable<import(\"../../../api-derive/src/types\").DerivedBalances[]>>;\r\n        };\r\n```\r\n\r\nAnd `../../../types/src/interfaces` doesn't exists once we're out out `@polkadot/api`.\r\n\r\nSo the idea is to force that `yarn build` to use `@polkadot/types` there. I don't have a strong clue how to do that, but will have a look next week.\r\n\r\nNote: `checkTypes.manual.ts` works perfectly well."},{"labels":[null,null,"bug"],"text":"When using `.multi` to to subscribe to multiple entries in a double map, the callback is always called, but not always with the correct value. When the change to storage was caused by a a call to `remove_prefix`, the callback contains the correct value (`None`) sometimes, but contains the previous value other times. The bug manifests itself more frequently when subscribed to more cells.\r\n\r\nI originally discovered this when writing a [frontend for my tic tac toe game](https://github.com/JoshOrndorff/TicTacToe-frontend/blob/761296e1905a01d67c4fb57c517ee57d1c427bec/src/TicTacToe.jsx#L50-L54).\r\n\r\nI then stripped that game down to a minimal reproducible example and wrote a script to demonstrate the problem. That work currently live on this [fairly obscure branch](https://github.com/JoshOrndorff/TicTacToe/tree/double-map-debug)\r\n\r\nEssentially the script repeatedly sets and clears entries in a doublemap and queries the state in between each round. The output appears as follows. Notice the bug only shows up win the queries made using `.multi`\r\n\r\n```\r\nAlice is about to set 0,0\r\nCell 0,0 from single query: 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nCell 0,0 from multi query : 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nAlice is about to clear 0\r\nCell 0,0 from single query:\r\nCell 0,0 from multi query :\r\n\r\n\r\nAlice is about to set 0,0\r\nCell 0,0 from single query: 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nCell 0,0 from multi query : 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nAlice is about to clear 0\r\nCell 0,0 from multi query : 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nCell 0,0 from single query:\r\n\r\n\r\nAlice is about to set 0,0\r\nCell 0,0 from single query: 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nCell 0,0 from multi query : 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\r\nAlice is about to clear 0\r\nCell 0,0 from single query:\r\nCell 0,0 from multi query :\r\n```\r\n\r\nIn this small sample, the bug only showed up in 1 out of 3 queries. As mentioned above, the bug is easier to reproduce when subscribing to more cells. In fact I didn't even notice that it was intermittent when subscribed to a full game board of 9 cells.\r\n\r\nI would be happy to help debug further, or clarify anything I've reported here."},{"labels":[null,"bug",null],"text":"```javascript\r\nimport { ApiRx, WsProvider, ApiPromise } from '@polkadot/api';\r\n var provider;\r\n var api;\r\n        try {\r\n            provider = new WsProvider(rpcServer);\r\n            api = await ApiRx.create(provider).toPromise();\r\n        } catch (error) {\r\n            console.log(error);\r\n   }\r\n  api.rpc.chain.subscribeNewHeads().subscribe((header) => {\r\n          console.log(`Chain is at #${header.blockNumber}`);\r\n          console.log(`Chain is at #${header.number}`);\r\n          console.log(`Chain is at #${header}`);\r\n        });\r\n```\r\n\r\nheader.blockNumber is undefined where as documentation suggests otherwise"},{"labels":[null,null,"bug"],"text":"When using custom extrinsic, got an error `1010: Invalid Transaction (-20)`.\r\n\r\nAfter some debugging, it is because of Submittable extends original Extrinsic not the customized impl, then in `Extrinsic.ts:55` where it should pass the if check it fails. (value is a Submittable)\r\n"},{"labels":[null,null,"bug"],"text":"I've got Invalid Transaction (0) error when upgrading sdk, after hours debuging it turn out because of the signer I used in my test is a rawSigner.\r\nRawSigner should be able to do the job same as PayloadSigner, but I found they are feed with different data.\r\nI've work out a fix for this."},{"labels":[null,null,"bug"],"text":"```\r\n#Enum.ts\r\nprivate static decodeEnum (def: TypesDef, value?: any, index?: number | Enum): Decoded {\r\n    if (value instanceof Enum) {\r\n// branch 1)\r\n      return Enum.createValue(def, value._index, value.raw);\r\n    } else if (index instanceof Enum) {\r\n// branch 2)\r\n      return Enum.createValue(def, index._index, index.raw);\r\n    } else if (isNumber(index)) {\r\n// branch 3)\r\n      return Enum.createValue(def, index, value);\r\n    }\r\n...\r\n  }\r\n```\r\nWhen i provide both value and index, I expect the code runs into branch 3), but it actually runs into branch 1) because the subType is also a Enum.\r\n\r\n```\r\n    const typeRegistry = getTypeRegistry();\r\n    const NestedEnum = ClassOfUnsafe('{ \"_enum\": [\"A1\", \"A2\"]}');\r\n    typeRegistry.register({NestedEnum});\r\n\r\n    const E = ClassOfUnsafe('{\"_enum\": {\"A\": \"NestedEnum\"}}');\r\n\r\n    const a1 = new NestedEnum(0);\r\n    console.log(a1.toString()); // output: A1\r\n    console.log(new E(0, 0).asA.toString()); // expect: A1, works\r\n    console.log(new E(a1, 0).asA.toString()); // expect: A1, fail\r\n// TypeError: Cannot read property 'toLowerCase' of undefined\r\n// at Function.toLowerCase [as createViaJSON]\r\n\r\n```"},{"labels":[null,null,"bug"],"text":"Having `error TS4020: 'extends' clause of exported class '...' has or is using private name 'EnumConstructor'.` when i tried to create a class via `extends Enum.with(...)`\r\n\r\nexport EnumConstructor should solve my problem.\r\n"},{"labels":[null,null,"bug"],"text":"When a Substrate runtime has multiple instances of the same module, the Chain State UI incorrectly reports the storage state. When querying either instance, the UI reports the state of whichever instance was modified more recently.\r\n\r\nUsing the default Substrate node, you can reproduce this using the Council and TechnicalCommittee, because both are instances of the Collective module.\r\n1. Launch a clean `--dev` chain\r\n2. Use sudo to add Alice to the Council\r\n3. Observe that both collectives report Alice as the sole Council member (on chain state tab).\r\n4. Use sudo to add Bob to the Tech Committee\r\n5. Observe that both collectives report Bob as the sole tech committee member (on chain state tab).\r\n![image](https://user-images.githubusercontent.com/2915325/63032382-b4832e80-be83-11e9-8653-d164d99542d6.png)\r\n\r\nThe underlying API produces the correct results.\r\n![image](https://user-images.githubusercontent.com/2915325/63032267-7ab22800-be83-11e9-9bf9-a872e28b28b8.png)\r\n\r\n\r\nNote: I originally discovered this when exploring genesis configurations for instanced modules, abut the problem is broader than genesis configurations as described above."},{"labels":[null,"bug"],"text":"... logging in here since, well, need to think about this.\r\n\r\nBasically, this doesn't work - \r\n\r\n- https://github.com/polkadot-js/api/blob/master/packages/api/src/Base.ts#L577\r\n- https://github.com/polkadot-js/api/pull/1284/files#diff-95597f67ed68d7dffc27ba1f0501e5b1R585\r\n\r\nThe issue is the the types are injected, registered and anything dependent has a created type with the initial locked-in class."},{"labels":[null,null,"bug"],"text":"Current master, effectively block don't show up in the apps UI atm"},{"labels":[null,"bug"],"text":"With the updated test from https://github.com/polkadot-js/api/pull/1243\r\n\r\nJust returns `null`, however does not seem like a decoding issue, since the result is really empty -\r\n\r\n```\r\n console.log node_modules/@polkadot/util/logger.js:88\r\n    2019-07-31 08:13:23          API-WS: calling state_subscribeStorage {\"id\":17,\"jsonrpc\":\"2.0\",\"method\":\"state_subscribeStorage\",\"params\":[[\"0x14d9b983ab7da58653657373696f6e204e6578744b6579733a73657373696f6e3a6b65797394772f97f5f6b539aac74e798bc395119f39603402d0c85bc9eda5dfc5ae2160\"]]}\r\n\r\n  console.log node_modules/@polkadot/util/logger.js:88\r\n    2019-07-31 08:13:23          API-WS: received {\"jsonrpc\":\"2.0\",\"result\":1531,\"id\":17}\r\n\r\n  console.log node_modules/@polkadot/util/logger.js:88\r\n    2019-07-31 08:13:23          API-WS: received {\"jsonrpc\":\"2.0\",\"method\":\"state_storage\",\"params\":{\"result\":{\"block\":\"0xa99ead25f80382c2cd3a63e807404a6f01cd8d849988289b015670bce0dda4d4\",\"changes\":[[\"0x14d9b983ab7da58653657373696f6e204e6578744b6579733a73657373696f6e3a6b65797394772f97f5f6b539aac74e798bc395119f39603402d0c85bc9eda5dfc5ae2160\",null]]},\"subscription\":1531}}\r\n```"},{"labels":[null,null,null,"bug"],"text":"I noticed that  the RPC state calls can't handle the input of type `StorageKey` anymore.\r\nI tried with different methods like `getChildKeys`, `getChildStorage`, `getStorage`, `getStorageHash` etc.\r\n\r\nEvery RPC call that accepts `StorageKey` as a parameter type fails when passing the data as `StorageKey`. The same calls work fine when I'm calling the `toHex()`/ `toString()` methods on the values.\r\n\r\nAn example to replicate this issue:\r\n```\r\n// get storage keys for ':code' storage\r\nconst keys = await rpc.state.getKeys('0x3a636f6465').toPromise(); \r\n\r\n// The first storage key as `StorageKey`, this fails\r\nconst typeStorageKey = keys[0]; \r\nconst storageHash = await rpc.state.getStorageHash(typeStorageKey, '0x').toPromise() \r\n```\r\nError message:\r\n<img width=\"1080\" alt=\"Screenshot 2019-07-30 at 19 58 14\" src=\"https://user-images.githubusercontent.com/125398/62153228-66f3b700-b304-11e9-97b2-102edee886c2.png\">\r\n\r\n```\r\n// The first storage key hex encoded, this succeeds\r\nconst typeHex = keys[0].toHex();\r\nconst storageHashHex = await rpc.state.getStorageHash(typeHex, '0x').toPromise() \r\n```\r\n<img width=\"534\" alt=\"Screenshot 2019-07-30 at 20 05 03\" src=\"https://user-images.githubusercontent.com/125398/62153652-5859cf80-b305-11e9-85f9-987fe94c4e61.png\">\r\n\r\n\r\n\r\nI also noticed, that the `meta, method, outputType, section` are undefined, but I'm not sure if that could have something to do with it.\r\n<img width=\"546\" alt=\"Screenshot 2019-07-30 at 20 02 14\" src=\"https://user-images.githubusercontent.com/125398/62153521-031dbe00-b305-11e9-9496-0afa70871071.png\">\r\n\r\n\r\nIt’s the case on both the latest Polkadot and Substrate.\r\n\r\n"},{"labels":[null,null,"bug"],"text":"Just noticed an edge-case where trying to send an extrinsic before the first block is finalized causes the following error:\r\n```\r\nAPI/DECORATOR: Error: FATAL: Unable to initialize the API: Cannot read property 'type' of undefined\r\n    at EventEmitter.<anonymous> (.../node_modules/@polkadot/api/Base.js:499:23)\r\n    at processTicksAndRejections (internal/process/task_queues.js:85:5)\r\n```\r\nDue to: https://github.com/polkadot-js/api/blob/73a0596fd9d12782c1d943de95948a11b2ba78e9/packages/api/src/Base.ts#L548"},{"labels":[null,null,"bug",null],"text":"Everything with all uppercase is affected.\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/62107427-de472d80-b2a7-11e9-89e4-de49dc067811.png)\r\n"},{"labels":[null,null,"bug"],"text":"![image](https://user-images.githubusercontent.com/1424473/61993046-43134580-b066-11e9-97a2-5106e5f983af.png)\r\n"},{"labels":[null,null,"bug"],"text":"Serialization fails. Would normally just fix (instead of log), but need to decode the Opaque system again to see what is up here."},{"labels":[null,"bug"],"text":"When trying to call `api.tx.system.setCode()` with a large code example (eb 262146 or 131072 bytes),  the transaction starts is return `Finalized`, but the extrinsic fails:\r\n` {\"ApplyExtrinsic\":2} : system.ExtrinsicFailed []`\r\n\r\nThis happens both wrapped in an democracy proposal or called directly via sudo.\r\n<img width=\"1391\" alt=\"Screenshot 2019-07-24 at 11 10 05\" src=\"https://user-images.githubusercontent.com/125398/61781915-773bfb80-ae05-11e9-96f5-a31089d13857.png\">\r\n\r\nThe behaviour can be reproduced by uploading this file (262146 bytes) https://github.com/polkadot-js/api/blob/b1b4530bf13ab6ef2480e42ac0b71bde14a0e707/packages/api/test/mock-data/randomAsHexRaw in the PolkadotJS UI https://polkadot.js.org/apps/#/democracy/propose\r\n\r\nor by running this test https://github.com/polkadot-js/api/blob/b1b4530bf13ab6ef2480e42ac0b71bde14a0e707/packages/api/test/e2e/api/promise-tx.spec.ts#L112\r\n\r\nBoth the UI and the e2e tests are working fine with smaller code examples."},{"labels":[null,null,"bug"],"text":"Doing the query on the UI for a single value, I would expect the default to come back, however, everything is returned -\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/61746018-14157f00-ad9b-11e9-8879-10465c3eb483.png)\r\n\r\nNeed to confirm with e2e test -\r\n\r\n- when no params are passed - return the full list\r\n- when a param is passed - return a single entry"},{"labels":[null,null,"bug"],"text":"Workaround here - https://github.com/polkadot-js/api/blob/master/packages/rpc-core/src/index.ts#L199\r\n\r\nTo reproduce -\r\n\r\n- Remove the wrapping `Promise.resolve` as linked\r\n- Run the `rpc-core/formatting` tests, the error will be logged"},{"labels":[null,null,null,"bug"],"text":"Calling `api.query.staking.validators()` on the latest Polkadot master with Metadata v6 is throwing the following error: \r\n`Unable to decode storage undefined.undefined: createType(AccountId):: Input doesn't match output, received 0x, created 0x0000000000000000000000000000000000000000000000000000000000000000`\r\n\r\nIt's fine on all Substrate versions (1.0, 2.0 and Master) and on Polkadot Alexander.\r\n\r\n<img width=\"804\" alt=\"Screenshot 2019-07-22 at 17 11 04\" src=\"https://user-images.githubusercontent.com/125398/61644936-f0bcd800-aca5-11e9-94e1-a44f6d0675bb.png\">\r\n"},{"labels":[null,"bug",null],"text":"The automatic link generation to the detail pages of the type classes is broken.\r\nIt was working at one point with that syntax, so something in the config or vuepress must have changed.\r\n\r\nEvery thing written like this `[[TYPE]]` should be a generated link to the detail page.\r\n\r\nhttps://polkadot.js.org/api/types/"},{"labels":[null,"bug"],"text":"i.e. with this https://github.com/polkadot-js/extension/issues/73 we end up with this -\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/61119106-6b157d00-a49a-11e9-8e9d-40f12549f1a4.png)\r\n\r\n(It just never closes, just a log in the console and nothing else)"},{"labels":["bug",null],"text":"https://github.com/polkadot-js/api/tree/master/docs/examples/promise#development-accounts"},{"labels":[null,"bug"],"text":"On a recent v2.0 Substrate node\r\n\r\nThe test \"derive e2e › retrieves all staking info (for controller)\" fails with the following:\r\n```bash\r\n    TypeError: Cannot read property 'creator' of undefined\r\n\r\n      560 |           // the input is a QueryableStorageEntry, convert to StorageEntry\r\n      561 |           Array.isArray(arg)\r\n    > 562 |             ? [arg[0].creator, ...arg.slice(1)]\r\n          |                       ^\r\n      563 |             : [arg.creator] as any\r\n      564 |         );\r\n      565 | \r\n\r\n      at creator (packages/api/src/Base.ts:562:23)\r\n          at Array.map (<anonymous>)\r\n      at Object.map [as queryMulti] (packages/api/src/Base.ts:559:30)\r\n      at queryMulti (packages/api-derive/src/staking/info.ts:125:9)\r\n      at SwitchMapSubscriber.withControllerLedger [as project] (packages/api-derive/src/staking/info.ts:167:17)\r\n      at SwitchMapSubscriber.Object.<anonymous>.SwitchMapSubscriber._next (node_modules/rxjs/src/internal/operators/switchMap.ts:123:21)\r\n      at SwitchMapSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at RefCountSubscriber.Object.<anonymous>.Subscriber._next (node_modules/rxjs/src/internal/Subscriber.ts:139:22)\r\n      at RefCountSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at ReplaySubject.Object.<anonymous>.Subject.next (node_modules/rxjs/src/internal/Subject.ts:70:17)\r\n      at ReplaySubject.Object.<anonymous>.ReplaySubject.nextInfiniteTimeWindow (node_modules/rxjs/src/internal/ReplaySubject.ts:46:15)\r\n      at ConnectableSubscriber.Object.<anonymous>.Subscriber._next (node_modules/rxjs/src/internal/Subscriber.ts:139:22)\r\n      at ConnectableSubscriber.Object.<anonymous>.Subscriber.next (node_modules/rxjs/src/internal/Subscriber.ts:99:12)\r\n      at Object.next [as callback] (packages/rpc-core/src/index.ts:183:22)\r\n      at WsProvider.callback [as onSocketMessageSubscribe] (packages/rpc-provider/src/ws/Provider.ts:352:15)\r\n      at WsProvider.onSocketMessageSubscribe [as onSocketMessageResult] (packages/rpc-provider/src/ws/Provider.ts:323:16)\r\n      at WebSocket.onSocketMessageResult (packages/rpc-provider/src/ws/Provider.ts:292:14)\r\n      at WebSocket.<anonymous> (node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js:33:32)\r\n      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n      at WebSocketImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n      at WebSocketImpl._onMessageReceived (node_modules/jsdom/lib/jsdom/living/websockets/WebSocket-impl.js:208:10)\r\n      at Receiver.receiverOnMessage (node_modules/ws/lib/websocket.js:720:20)\r\n      at Receiver.dataMessage (node_modules/ws/lib/receiver.js:414:14)\r\n      at Receiver.getData (node_modules/ws/lib/receiver.js:346:17)\r\n      at Receiver.startLoop (node_modules/ws/lib/receiver.js:133:22)\r\n      at Receiver._write (node_modules/ws/lib/receiver.js:69:10)\r\n      at Socket.socketOnData (node_modules/ws/lib/websocket.js:795:35)\r\n```\r\n\r\nlinked to https://github.com/polkadot-js/apps/issues/1386"},{"labels":[null,"bug"],"text":"As found in https://github.com/polkadot-js/extension/issues/73"},{"labels":[null,"bug"],"text":"```javascript\r\napi.queryMulti([\r\n  [api.query.session.nextKeyFor, controllerId],\r\n  [api.query.staking.ledger, controllerId],\r\n], callback)\r\n```\r\n\r\nFirst result: [something1, something2],\r\n\r\n**Expected:** \r\n\r\nsecond result: [something1, something3]\r\n\r\n**Actual:**\r\n\r\nsecond result: [null, something3]\r\n\r\n"},{"labels":[null,null,"bug",null],"text":"\r\nPseudo code:\r\n```js\r\nlet unsub: Function | undefined;\r\n\r\napi.query.balances.balanceOf\r\n  .multi(addresses)\r\n  .then((_usub) => unsub = _unsub);\r\n```\r\n\r\nHere `_usub` is of type `Codec[]` and is not assignable to type `Function`.\r\n\r\nIn case it can be any usefull, an example implementation can be found [here](https://github.com/Tbaut/basic-substrate-ui-template/blob/one-account/src/Balances.tsx#L27)."},{"labels":[null,null,"bug"],"text":"An issue appeared in `apps` and is related to `derive.staking.info`. Updates are not pushed through the props, so that the info don't update unless the page is reloaded.\r\n\r\nI've tracked down the issue and it happens since v0.82 https://github.com/polkadot-js/api/pull/987\r\n\r\nHow to reproduce:\r\n- navigate to staking>actions\r\n- change the reward destination\r\n- once the tx succeeds, the reward destination isn't updated\r\n- refresh the page or change tab and get back -> the destination is updated."},{"labels":[null,null,"bug"],"text":"On Alex -\r\n\r\n![image](https://user-images.githubusercontent.com/1424473/59966905-e088d000-9522-11e9-96a7-297ad3129d4a.png)\r\n\r\n`{\"jsonrpc\":\"2.0\",\"method\":\"state_storage\",\"params\":{\"result\":{\"block\":\"0xbfb1676a357e772c854d88aaee13614a08ffe67bf4b59160481828e03982dbf7\",\"changes\":[[\"0x107e8d8b935b2cfcd4b80ed517149a49\",\"0x210100000000000000000000000000000000000000000000000000000000000000000000000000000000011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce\"]]},\"subscription\":145305}}`\r\n\r\nWith an `Option<...>` type the length is added by the Rust side, but not by the JS side. So, without looking at the code, it seems with `Option`, we just call the `toHex()` of the containing class when `isSome`. Rather what should happen is to call `toU8a()` of the containing class and then `u8aToHex` that.\r\n\r\nOr rather ... it could be our convert-to-bytes and then convert-to-whatever converter in storage. Either way, we are not doing what is expected."},{"labels":[null,null,"bug"],"text":"`Unable to decode storage system.events: Encoding for input doesn't match output, created 0x0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000 from 0x040000000000000000`\r\n\r\nNot 100% sure where at -\r\n\r\n- Look at the EventRecord structures to see how it has been changed\r\n- Manually decode against Rust & metedata"},{"labels":[null,"bug"],"text":"internal/modules/cjs/loader.js:550\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module 'bs58'\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:548:15)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:475:25)\r\n    at Module.require (internal/modules/cjs/loader.js:598:17)\r\n    at require (internal/modules/cjs/helpers.js:11:18)\r\n    at Object.<anonymous> (/Users/satyamagrawal/Repositories/Rust-projects/Project1/scripts/node_modules/@polkadot/util-crypto/address/decode.js:10:34)\r\n    at Module._compile (internal/modules/cjs/loader.js:654:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:665:10)\r\n    at Module.load (internal/modules/cjs/loader.js:566:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:506:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:498:3)\r\n"},{"labels":[null,null,"bug"],"text":"when `await api.query.staking.lastEraLengthChange.at(blockHash)` i have this error :\r\n```\r\nUnable to decode storage staking.lastEraLengthChange: Encoding for input doesn't match output, created 0x0000000000000000 from 0x\r\n```\r\nit's fine without `at()` which go through the subscription path.\r\n\r\nthe return of state query is null, but since in metadata there's a fallback for LastEraLengthChange.\r\n```\r\n{\r\n              \"name\": \"LastEraLengthChange\",\r\n              \"modifier\": \"Default\",\r\n              \"type\": {\r\n                \"PlainType\": \"BlockNumber\"\r\n              },\r\n              \"fallback\": \"0x0000000000000000\",\r\n              \"documentation\": [\r\n                \" The session index at which the era length last changed.\"\r\n              ]\r\n            },\r\n```\r\nshould not throw but use the fallback. Turn out in `packages/rpc-core/src/index.ts#241` isPedantic is passed as true.\r\n\r\nI guess the solution would be to check `meta.fallback` and pass isPedantic false if fallback exists.\r\n"},{"labels":[null,null,"bug"],"text":"Hi, I found the provider will keep re-connecting even if the [disconnect()](https://github.com/polkadot-js/api/blob/0b66f27a8c1ad28f15d6549d4a751f246398f91c/packages/api/src/Base.ts#L289) is called"},{"labels":[null,null,"bug"],"text":"Issue description:\r\n\r\nThere is a small bug in `ContractAbi` -> `validateMethods`\r\n\r\n```\r\nassert(unknownKeys.length === 0, `Unknown keys ${unknownKeys.join(', ')} found in ABI args for messages.${name}`);\r\n```\r\n\r\nUnder node or RN env,  this will throw error `name is undefined`\r\n\r\nSolution:\r\n\r\nChange `messages.${name}` to `${method.name}`\r\n"},{"labels":[null,"bug"],"text":"https://github.com/polkadot-js/api/blob/master/packages/type-extrinsics/src/fromMetadata/index.ts#L24\r\n\r\nBasically this means if you have a module with no storage, i.e. metadata returns an empty prefix, you cannot call extrinsics.\r\n\r\ncc @amaurymartiny "},{"labels":[null,null,"bug"],"text":"```\r\nVM104:37 2019-05-14 14:11:18   API/DECORATOR: FATAL: Unable to initialize the API:  Cannot convert 'DoubleMapType' via asType\r\nwindow.console.error @ VM104:37\r\nm @ logger.js:83\r\nerror @ logger.js:129\r\n(anonymous) @ Base.js:379\r\nasync function (async)\r\n(anonymous) @ Base.js:364\r\nu.emit @ index.js:201\r\nemit @ Provider.js:343\r\nonSocketOpen @ Provider.js:159\r\n```\r\n\r\nRelates to https://github.com/paritytech/substrate/pull/2491 as it introduce usage of double map in substrate\r\nShould be fixed by https://github.com/polkadot-js/api/issues/776"},{"labels":[null,"bug"],"text":"This happens for both Substrate and Alexander and only on stash accounts AFAICS.\r\n\r\n`Mismatch decoding '15', computed as '7' with TransactionPayment,Transfer,Reserve`\r\n\r\nTo reproduce:\r\nIn extrinsics: balances > locks on a stash account e.g `Alice_stash` in substrate\r\n\r\nor in the JS console:\r\n```js\r\nconst [balancesLocksSubstrate, balancesLocksAlexander ] = await Promise.all([\r\n  api.query.balances.locks('5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY'),\r\n  api.query.balances.locks('5DWrJzdCLLEXFndG6qjCNaMFU74sMEdNwg8TuLLwRiGJcYsn')\r\n]);\r\n\r\nconsole.log('locks: ' + balancesLocksSubstrate);\r\nconsole.log('locks: ' + balancesLocksAlexander);\r\n```\r\n![image](https://user-images.githubusercontent.com/33178835/57103328-bcc8bb00-6d25-11e9-92f8-8792cff16457.png)\r\n"},{"labels":[null,null,"bug"],"text":"The `.method.toJSON()` method on the kill_storage extrinsic throws with the following error:\r\n\r\n```\r\nTypeError: this.keys(...) is not a function or its return value is not iterable\r\n    at Map.toJSON (/Users/self/dev/polkadot/statd/node_modules/@polkadot/types/codec/Struct.js:195:21)\r\n    at reduce (/Users/self/dev/polkadot/statd/node_modules/@polkadot/types/codec/Struct.js:198:38)\r\n    at Array.reduce (<anonymous>)\r\n    at Map.toJSON (/Users/self/dev/polkadot/statd/node_modules/@polkadot/types/codec/Struct.js:195:29)\r\n    at signedBlock.block.extrinsics.forEach.extrinsic (/Users/self/dev/polkadot/statd/src/statd.ts:32:26)\r\n    at Extrinsics.forEach (<anonymous>)\r\n    at /Users/self/dev/polkadot/statd/src/statd.ts:31:34\r\n    at Generator.next (<anonymous>)\r\n    at fulfilled (/Users/self/dev/polkadot/statd/src/statd.ts:4:58)\r\n    at processTicksAndRejections (internal/process/next_tick.js:81:5)\r\n```\r\n\r\nCode to recreate error:\r\n```javascript\r\nconst hash = new Hash('0x85c62b581f38cb81c3e443d34392672beb1fb877017fd7237cc87704113259dc');\r\nconst signedBlock = await api.rpc.chain.getBlock(hash);\r\nsignedBlock.block.extrinsics.forEach(extrinsic => {\r\n    try {\r\n        extrinsic.method.toJSON()\r\n    } catch(err) {\r\n        console.log(extrinsic)\r\n        console.error(err)\r\n    }\r\n});\r\n```"},{"labels":[null,null,"bug"],"text":"If the function of your Substrate extrinsic contains `usize` arguments, the API seems to throw `InvalidSignature(0)` errors. Changing these to `u32` fixes the issue.\r\n\r\nNonetheless, these errors are caught at the API level before the extrinsics with `usize` function arguments ever touch the chain. Therefore, my intuition is the API cannot parse or serialize `usize` arguments."},{"labels":[null,"bug"],"text":"confirmed broken:\r\n~~subscribeNewHead~~ Doesn't seem to appear broken anymore\r\n~~account.id lookups~~ Fixed by https://github.com/polkadot-js/api/pull/831/\r\n\r\n"},{"labels":[null,"bug"],"text":"(I did not actually verify if this is a real issue)\r\n\r\nhttps://github.com/polkadot-js/api/pull/798#discussion_r271116857\r\n\r\n> DoubleMapType only exists in v3 so this should fail if trying to convert a metadata includes double to v2.\r\nOne way to solve this (without refactor everything to make it upgrade instead of downgrade), is duplicate DoubleMapType in v2 like how I retrofit is_linked in v1\r\n\r\n"},{"labels":[null,"bug",null,null],"text":"... Alternatively, just use the testing keyring, i.e. https://polkadot.js.org/api/examples/promise/06_make_transfer/ would become\r\n\r\n```js\r\nconst { ApiPromise } = require('@polkadot/api');\r\nconst testKeyring = require('@polkadot/keyring/testingPairs').default;\r\n\r\nasync function main () {\r\n  const api = await ApiPromise.create();\r\n  const keyring = testingKeyring();\r\n\r\n  // all dev keys are on this test keyring as `.bob`, `.alice`, `.eve`, etc\r\n  await api.balances\r\n    .transfer(keyring.bob.address(), 12345)\r\n    .signAndSend(keyring.alice);\r\n}\r\n```\r\n\r\ncc @mattrutherford"},{"labels":[null,null,"bug"],"text":"While sending, status from extrinsic submission -\r\n\r\n<img width=\"495\" alt=\"Polkadot:Substrate Portal 2019-03-16 17-48-45\" src=\"https://user-images.githubusercontent.com/1424473/54478564-d9f80780-4813-11e9-99ca-7ffde3d32b86.png\">\r\n"},{"labels":["bug"],"text":"if using ApiPromise, it can be easily reproduced by executing `await api.derive.chain.bestNumber()` and `(await api.rpc.chain.getHeader()).blockNumber` repeatedly.\r\n\r\nI think the current cache solution works only for rxjs because an observable is a stream, you still can get latest from it even you hold a cached one. but for promise it's one shot thing.\r\n\r\nwhen the observable is toPromised, it will be terminated after first result, makes caching it meaningless."},{"labels":[null,"bug"],"text":"I just want to mention something I found strange when working with the @polkadot/api and registering custom types. For some reason `await ApiPromise.create({ types})` doesn’t work for me instead I need to use `getTypeRegistry().register(types);`\r\n\r\n`await ApiPromise.create({ types})` creates the following errors in the chrome console:\r\n`2019-03-13 16:39:17        RPC-CORE: getMetadata (block: Hash): Customtype:: Number can only safely store up to 53 bits\r\n2019-03-13 16:39:17   API/DECORATOR: loadMeta a: getMetadata (block: Hash): Customtype:: Number can only safely store up to 53 bits`"},{"labels":[null,"bug"],"text":"<img width=\"784\" alt=\"joystream network portal 2019-03-08 09-08-28\" src=\"https://user-images.githubusercontent.com/1424473/54015992-d3b5bb80-4181-11e9-9b0d-7fa24f7e6260.png\">\r\n\r\nBasically, the normal flow is -\r\n\r\n1. make subscription\r\n2. get subscriptionId\r\n3. get result, matching on subscriptionId\r\n4. send result to subscriber\r\n\r\nIn some cases 2 & 3 are swapped and we cannot handle the response - basically we get a response for which we don't have an id yet. See the screenshot and the highlighted line, the browser received result before the actual id. (First the response, then the subscriptionId is received)\r\n\r\nSo basically, don't discard the results when something for a unknown id is retrieved, keep these in-place and check against those with new subscriptionIds.\r\n\r\ncc @tomusdrw\r\ncc @siman"},{"labels":[null,"bug"],"text":"@polkadot/type-extrinsic: static.d.ts\r\n```\r\nimport(\"../../types/src/primitive/Method\").ModulesWithMethods;\r\n```\r\n\r\n@polkadot/api-derive: util/cached.d.ts:\r\n```\r\nexport declare const cache: (fn: Function, map?: WeakMap<object, any>) => (api: import(\"../../../api/src/types\").ApiInterface$Decorated<import(\"rxjs\").Observable<import(\"../../../types/src/types\").Codec>, import(\"rxjs\").Observable<import(\"../../../types/src/types\").Codec>>) => any;\r\n```"},{"labels":[null,"bug",null],"text":"Issue as title, \r\nTried to call `api.derive.staking.intentionsBalances()`, and got rejected.\r\nThe func works with `Alexander (Polkadot, hosted by Parity) Node`, \r\nAnd doesnt get the balance when with `Dried Danta (Substrate, hosted by Parity)`.\r\n\r\nGot the err as below when tried to call the api:\r\n\r\n```\r\nPromise {<pending>}__proto__: Promisecatch: ƒ catch()constructor: ƒ Promise()finally: ƒ finally()then: ƒ then()Symbol(Symbol.toStringTag): \"Promise\"__proto__: Object[[PromiseStatus]]: \"rejected\"[[PromiseValue]]: TypeError: api.query.balances.freeBalance is not a function\r\n    at SwitchMapSubscriber.pipe [as project]\r\n\r\n@polkadot/api-derive/balances/votingBalance.js:33 Uncaught (in promise) TypeError: api.query.balances.freeBalance is not a function\r\n    at SwitchMapSubscriber.pipe [as project] (.../node_modules/@polkadot/api-derive/balances/votingBalance.js:33)\r\n    at SwitchMapSubscriber._next (switchMap.ts:106)\r\n    at SwitchMapSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at RefCountSubscriber.Subscriber._next (Subscriber.ts:139)\r\n    at RefCountSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at ReplaySubject.Subject.next (Subject.ts:70)\r\n    at ReplaySubject.nextInfiniteTimeWindow (ReplaySubject.ts:46)\r\n    at ConnectableSubscriber.Subscriber._next (Subscriber.ts:139)\r\n    at ConnectableSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at DistinctUntilChangedSubscriber._next (distinctUntilChanged.ts:121)\r\n```\r\n"},{"labels":[null,"bug"],"text":"See https://github.com/polkadot-js/apps/pull/774#issuecomment-468997208 after https://github.com/polkadot-js/api/pull/739"},{"labels":[null,"bug",null],"text":"https://polkadot.js.org/api/types/\r\n\r\nClick links on one of the type throws some error on js console. Right click open in new window gives a broken md file https://polkadot.js.org/api/types/classes/_type_accountid_.accountid.md"},{"labels":["bug"],"text":"```javascritp\r\nawait api.derive.democracy.referendums((result)=>{\r\n      console.log(result)\r\n    })\r\n```\r\n**echo example:**  \r\n`[{end: 216, proposal: {callIndex: 0x0301, args: {who: 5GfWeNe33QeyzVMV2uENuvSXLVfVXCiuLvfEP6WCDHADZhen, free: 1000000000, reserved: 10000000000}}, threshold: Super majority approval, delay: 600}]`  \r\n\r\nNot have `ReferendumIndex`, I think the UI-apps is use the `result.index` to show.  Need to show the chain  ReferendumIndex.  \r\n\r\n<img width=\"1042\" alt=\"2019-02-17 9 14 58\" src=\"https://user-images.githubusercontent.com/34789555/53063758-4119e900-3500-11e9-9d1f-316459ce8a76.png\">\r\n"},{"labels":[null,"bug",null],"text":"Code to replicate -\r\n\r\n```js\r\nconst myAccount = '5GfWeNe33QeyzVMV2uENuvSXLVfVXCiuLvfEP6WCDHADZhen';\r\nconst intentions = await api.query.staking.intentions();\r\n\r\nconsole.log('intentions:', intentions);\r\nconsole.log('index:', intentions.indexOf((account) => account.eq(myAccount)));\r\n```\r\n\r\nOutput -\r\n\r\n```\r\nintentions: [5H4787dXL43BaA6PvTwUTyA38JBbfC9r8QyK3ay8Nozc2Ta3, 5GeJHN5EcUGPoa5pUwYkXjymoDVN1DJHsBR4UGX4XRAwKBVk, 5Dn8F1SUX6SoLt1BTfKEPL5VY9wMvG1A6tEJTSCHpLsinThm, 5DPW1n4q2THUjKGj3QKkcqdh6oxY1bmLsSQ7t8FuiuNtRoUc, 5E8k3u7iRysqPPYsBK1UgetCquZznwRZxryTzynkDTzg3vNy, 5DteAmjoppNJ8rrBugKctCXM82UVWZSCHeU8pqFwQBbyAWyB, 5GfWeNe33QeyzVMV2uENuvSXLVfVXCiuLvfEP6WCDHADZhen]\r\nindex: -1\r\n```\r\n(via https://polkadot.js.org/apps/#/js on Alexander)"},{"labels":[null,"bug"],"text":"https://github.com/polkadot-js/api/blob/master/packages/types/src/Text.ts#L45\r\n```javascript\r\n  get encodedLength (): number {\r\n    return this.length + Compact.encodeU8a(this.length).length;\r\n  }\r\n\r\n  /**\r\n   * @description The length of the value\r\n   */\r\n  get length (): number {\r\n    // only included here since we ignore inherited docs\r\n    return super.length;\r\n  }\r\n```\r\nFor example:\r\n```javascript\r\nnew Text('中文').length // 2\r\nnew Text('中文').encodedLength // 3\r\nnew Text('中文').toHex() // 0x18e4b8ade69687\r\n```\r\nso it's encodedLength should be 7 ? but got 3.\r\n\r\nIt is work well for some change like the following:\r\n```javascript\r\n  get encodedLength() {\r\n    const length = stringToU8a(this.toString()).length;\r\n    return length + Compact.encodeU8a(length).length;\r\n  }\r\n```"},{"labels":[null,"bug"],"text":"As per https://github.com/polkadot-js/api/blob/master/packages/api/src/SubmittableExtrinsic.ts#L105"},{"labels":[null,"bug"],"text":"From Riot -\r\n\r\nI'm using the polkadot-js/api to build an API. When I consume a Struct type that has an Option.with(BlockNumber) field, and then try to call .toString() on it, I get the error: \"Number can only safely store up to 53 bits\". Any idea why this might be/how to fix?"},{"labels":[null,"bug"],"text":"Not able to decode DigestItem that returned from RPC\r\n\r\nRelated: https://github.com/paritytech/substrate/pull/1478\r\n\r\nI think the JSON codec needs some better thoughts to avoid those breaking changes"},{"labels":[null,"bug"],"text":"It looks like trackStatus inside send() is being called twice. "},{"labels":[null,"bug"],"text":""},{"labels":[null,"bug"],"text":"Due to https://github.com/paritytech/substrate/pull/1389\r\nBroken updated tests: https://github.com/polkadot-js/api/pull/582/commits/439823314be8ef9d827b6ba52d24239f473b1c69\r\n\r\nIt also breaks polkadot app that display wrong block numbers"},{"labels":["bug"],"text":"The latest published version for @polkadot/storage is 0.38.10 but for other packages are 0.38.11\r\nI am having issue that yarn cannot find @polkadot/storage 0.38.11 and have to manually pick a version as fallback.\r\n\r\nFrom version history you can also see 0.38.6 and few other versions are skipped as well. \r\n\r\nI noticed that packages/type-storage is published lastly, may have some race condition that CI process completes before the version is successfully published?\r\n\r\nhttps://www.npmjs.com/package/@polkadot/storage\r\n\r\nIt seems like yarn may fail to publish and yet still report as success https://github.com/yarnpkg/yarn/issues/5931 https://github.com/yarnpkg/yarn/issues/6200"},{"labels":[null,"bug"],"text":"Minified -\r\n\r\n<img width=\"184\" alt=\"polkadot apps portal 2019-01-08 12-45-17\" src=\"https://user-images.githubusercontent.com/1424473/50830049-db561100-1346-11e9-8350-701080c49713.png\">\r\n\r\nUnminified -\r\n\r\n<img width=\"218\" alt=\"polkadot apps portal 2019-01-08 12-44-56\" src=\"https://user-images.githubusercontent.com/1424473/50830065-e610a600-1346-11e9-93e9-b28834b9dc7a.png\">\r\n\r\nSimilar to https://github.com/polkadot-js/api/issues/462\r\n\r\n"},{"labels":[null,"bug",null],"text":""},{"labels":[null,"bug"],"text":"> nodeJs console.log(api); : \r\n```\r\napi:---- ApiPromise {\r\n  _eventemitter: EventEmitter { _events: { error: [EE] }, _eventsCount: 1 },\r\n  _extrinsics:\r\n   { timestamp: { set: [Function] },\r\n     consensus:\r\n      { reportMisbehavior: [Function],\r\n        noteOffline: [Function],\r\n        remark: [Function],\r\n        setHeapPages: [Function],\r\n        setCode: [Function],\r\n        setStorage: [Function] },\r\n     balances: { transfer: [Function], setBalance: [Function] },\r\n     session:\r\n      { setKey: [Function],\r\n        setLength: [Function],\r\n        forceNewSession: [Function] },\r\n     staking:\r\n      { stake: [Function],\r\n        unstake: [Function],\r\n        nominate: [Function],\r\n        unnominate: [Function],\r\n        registerPreferences: [Function],\r\n        setSessionsPerEra: [Function],\r\n        setBondingDuration: [Function],\r\n        setValidatorCount: [Function],\r\n        forceNewEra: [Function],\r\n        setOfflineSlashGrace: [Function] },\r\n     democracy:\r\n      { propose: [Function],\r\n        second: [Function],\r\n        vote: [Function],\r\n        startReferendum: [Function],\r\n        cancelReferendum: [Function],\r\n        cancelQueued: [Function] },\r\n     council:\r\n      { setApprovals: [Function],\r\n        reapInactiveVoter: [Function],\r\n        retractVoter: [Function],\r\n        submitCandidacy: [Function],\r\n        presentWinner: [Function],\r\n        setDesiredSeats: [Function],\r\n        removeMember: [Function],\r\n        setPresentationDuration: [Function],\r\n        setTermDuration: [Function] },\r\n     councilVoting:\r\n      { propose: [Function],\r\n        vote: [Function],\r\n        veto: [Function],\r\n        setCooloffPeriod: [Function],\r\n        setVotingPeriod: [Function] },\r\n     councilMotions: { propose: [Function], vote: [Function] },\r\n     grandpa: { reportMisbehavior: [Function] },\r\n     treasury:\r\n      { proposeSpend: [Function],\r\n        setPot: [Function],\r\n        configure: [Function],\r\n        rejectProposal: [Function],\r\n        approveProposal: [Function] },\r\n     contract: { call: [Function], create: [Function] },\r\n     upgradeKey: { upgrade: [Function], setKey: [Function] },\r\n     sudo: { sudo: [Function], setKey: [Function] } },\r\n  _genesisHash:\r\n ... ...\r\n```\r\n**It's complete.**\r\n------\r\n\r\n> But the RN console.log(api); :\r\n\r\n```\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS: 'api:-------', { _eventemitter: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:    { _events: { error: { fn: [Function], context: [Circular], once: true } },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:      _eventsCount: 1 },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _extrinsics: {},\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _genesisHash: {},\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:   _query: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:    { substrate: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:       { code: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:          { [Function: decorated]\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            at: [Function],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            meta: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:             { documentation: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                [ { '0': 'W',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '1': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '2': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '3': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '4': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '5': 'c',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '6': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7': 'd',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '8': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '9': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '10': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '11': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '12': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '13': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '14': 'h',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '15': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '16': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '17': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '18': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '19': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '20': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '21': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '22': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '23': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '24': '.' },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _Type: [Function: Text] ],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               modifier: { raw: 0, _enum: [ 'None', 'Default', 'Required' ] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               type: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                { raw: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                   { '0': 'B',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '1': 'y',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '2': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '3': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     '4': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     _originalLength: 6 },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _def: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                   { Type: [Function: Type],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                     'StorageFunctionType$Map': [Function: StorageFunctionType$Map] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _index: 0,\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                  _indexes: [ 0, 1 ] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:               toJSON: [Function: toJSON] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            method: 'code',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            section: 'substrate',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            toJSON: [Function] },\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:         heapPages: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:          { [Function: decorated]\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            at: [Function],\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:            meta: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:             { documentation: \r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                [ { '0': 'N',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '1': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '2': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '3': 'b',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '4': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '5': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '6': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '8': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '9': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '10': 'w',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '11': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '12': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '13': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '14': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '15': 'l',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '16': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '17': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '18': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '19': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '20': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '21': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '22': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '23': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '24': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '25': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '26': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '27': 'y',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '28': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '29': 'p',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '30': 'a',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '31': 'g',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '32': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '33': 's',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '34': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '35': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '36': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '37': 'q',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '38': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '39': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '40': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '41': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '42': 'd',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '43': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '44': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '45': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '46': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '47': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '48': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '49': 'x',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '50': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '51': 'c',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '52': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '53': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '54': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '55': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '56': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '57': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '58': 'o',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '59': 'f',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '60': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '61': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '62': 'h',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '63': 'e',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '64': ' ',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '65': 'r',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '66': 'u',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '67': 'n',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '68': 't',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '69': 'i',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '70': 'm',\r\n01-01 16:48:57.505  3704  3735 I ReactNativeJS:                    '7\r\n```\r\nIt‘s incomplete, so.. such as api.query.xxxx,  api.extrinsics, api.tx, and more, can't to be working.\r\n![_ _20181222002106](https://user-images.githubusercontent.com/34789555/50574587-4626ba00-0e26-11e9-855f-62d8bf4c0569.png)\r\n\r\n"},{"labels":[null,"bug"],"text":"- Related to https://github.com/polkadot-js/apps/issues/432\r\n- Investigated by @gavofyork - reported that the encoding is broken, large values set 16 or 17 bytes total, instead of the 8 it should fit into\r\n- Encoding here https://github.com/polkadot-js/common/blob/master/packages/util/src/compact/fromU8a.ts#L38\r\n- Large value encoded as `030080c6a47e8d03000000000000000000` (should only be +-8 bytes total) "},{"labels":[null,"bug"],"text":"  **polkadot Api version** : \r\n```\r\n    \"@polkadot/api\": \"^0.33.17\",\r\n    \"@polkadot/rpc-provider\": \"^0.33.17\"\r\n```\r\n**This React-Native project create way is** :\r\n `react-native init Project`\r\n```\r\ncd Project\r\nreact-native run-android\r\n```\r\n\r\n**packages**:\r\n```\r\n\"dependencies\": {\r\n    \"axios\": \"0.18.0\",\r\n    \"ethers\": \"3.0.27\",\r\n    \"identicon.js\": \"2.3.2\",\r\n    \"mobx\": \"^4.3.1\",\r\n    \"mobx-react\": \"5.2.5\",\r\n    \"moment\": \"2.22.2\",\r\n    \"react\": \"16.4.2\",\r\n    \"react-native\": \"0.56.0\",\r\n    \"react-native-camera\": \"1.2.0\",\r\n    \"react-native-modal\": \"6.5.0\",\r\n    \"react-native-permissions\": \"1.1.1\",\r\n    \"react-native-qrcode-svg\": \"5.1.0\",\r\n    \"react-native-sensitive-info\": \"5.2.4\",\r\n    \"react-native-snackbar\": \"0.5.0\",\r\n    \"react-native-svg\": \"6.5.2\",\r\n    \"react-native-vector-icons\": \"5.0.0\",\r\n    \"react-navigation\": \"2.12.1\",\r\n    \"@polkadot/api\": \"^0.33.17\",\r\n    \"@polkadot/rpc-provider\": \"^0.33.17\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"7.0.0-beta.47\",\r\n    \"@babel/plugin-proposal-decorators\": \"7.0.0-beta.47\",\r\n    \"@babel/plugin-transform-runtime\": \"7.0.0-beta.47\",\r\n    \"@babel/runtime\": \"7.0.0-beta.47\",\r\n    \"babel-core\": \"7.0.0-bridge.0\",\r\n    \"babel-jest\": \"23.4.2\",\r\n    \"babel-plugin-module-resolver\": \"3.1.1\",\r\n    \"babel-preset-react-native\": \"5.0.2\",\r\n    \"enzyme\": \"3.5.0\",\r\n    \"enzyme-adapter-react-16\": \"1.3.0\",\r\n    \"eslint-config-rallycoding\": \"3.2.0\",\r\n    \"jest\": \"23.5.0\",\r\n    \"jsdom\": \"12.0.0\",\r\n    \"react-native-mock-render\": \"0.1.1\",\r\n    \"react-test-renderer\": \"16.4.2\",\r\n    \"rimraf\": \"^2.6.2\"\r\n  },\r\n```\r\n\r\n**When I import the @polkadot/api to **React Native** project. get the error**:\r\n```\r\nerror: bundling failed: Error: Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\r\n\r\nThis might be related to https://github.com/facebook/react-native/issues/4968\r\nTo resolve try the following:\r\n  1. Clear watchman watches: `watchman watch-del-all`.\r\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\r\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\r\n\r\n```\r\n![_ _20181217193346](https://user-images.githubusercontent.com/34789555/50085161-373fe500-0234-11e9-8c66-caabe7751988.png)\r\n\r\n```\r\nThe development server returned response error code: 500\r\n\r\nURL: http://10.0.2.2:8081/index.delta?platform=android&dev=true&minify=false\r\n\r\nBody:\r\n{\"originModulePath\":\"/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js\",\"targetModuleName\":\"core-js/modules/es6.regexp.to-string\",\"message\":\"Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\",\"errors\":[{\"description\":\"Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\"}],\"name\":\"Error\",\"stack\":\"Error: Unable to resolve module `core-js/modules/es6.regexp.to-string` from `/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/@polkadot/util/logger.js`: Module `core-js/modules/es6.regexp.to-string` does not exist in the Haste module map\\n\\nThis might be related to https://github.com/facebook/react-native/issues/4968\\nTo resolve try the following:\\n  1. Clear watchman watches: `watchman watch-del-all`.\\n  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.\\n  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.\\n    at ModuleResolver.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:167:1306)\\n    at ResolutionRequest.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:80:16)\\n    at DependencyGraph.resolveDependency (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/node-haste/DependencyGraph.js:237:485)\\n    at Object.resolve (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/lib/transformHelpers.js:116:25)\\n    at dependencies.map.result (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:298:29)\\n    at Array.map (<anonymous>)\\n    at resolveDependencies (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:294:16)\\n    at /media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:159:33\\n    at Generator.next (<anonymous>)\\n    at step (/media/threebody/DATA/Desktop/github/ethereum-wallet/node_modules/metro/src/DeltaBundler/traverseDependencies.js:239:307)\"}\r\nprocessBundleResult\r\n    BundleDownloader.java:285\r\naccess$200\r\n    BundleDownloader.java:37\r\nonResponse\r\n    BundleDownloader.java:163\r\nexecute\r\n    RealCall.java:153\r\nrun\r\n    NamedRunnable.java:32\r\nrunWorker\r\n    ThreadPoolExecutor.java:1162\r\nrun\r\n    ThreadPoolExecutor.java:636\r\nrun\r\n    Thread.java:764\r\n\r\n```\r\n"},{"labels":[null,"bug"],"text":"![image](https://user-images.githubusercontent.com/1424473/50007931-d8b80400-ffb2-11e8-9ce0-2ec103de2a1b.png)\r\n"},{"labels":[null,"bug"],"text":"Hi Polkadot and Substrate team, we're having a small issue with testing where transactions are being returned as finalised but the nodes have not updated their block status. I've followed the example transaction code and I've pasted what I've done below. It's entirely possible that I'm not running the transaction code correctly. \r\n\r\nHere is the code that I've been using to run the sample transaction code: \r\n\r\n```\r\nimport {ApiPromise} from '@polkadot/api';\r\nimport {Keyring} from '@polkadot/keyring';\r\nimport WsProvider from '@polkadot/rpc-provider/ws';\r\nimport {stringToU8a} from '@polkadot/util';\r\n\r\nimport additionalTypes from './types';\r\n\r\nasync function main() {\r\n  const ws = 'ws://localhost:9944';\r\n  const keyring = new Keyring();\r\n  let seed = 'Alice';\r\n  if (seed && seed.length < 32) {\r\n    seed = seed.padEnd(32, ' ');\r\n  }\r\n\r\n  const sender = keyring.addFromSeed(stringToU8a(seed));\r\n  const provider = new WsProvider(ws);\r\n  const api = await ApiPromise.create({\r\n    provider,\r\n    types: additionalTypes\r\n  });\r\n  try {\r\n    const nonce: any = await api.query.system.accountNonce(sender.address());\r\n    console.log('Nonce before transaction', String(nonce));\r\n    const block = await api.rpc.chain.getHeader();\r\n\r\n    console.log('Block status before transaction', String(block));\r\n\r\n    const tx = await api.tx.balances.transfer(\r\n      '5Gw3s7q4QLkSWwknsiPtjujPv3XM4Trxi5d4PgKMMk3gfGTE',\r\n      123\r\n    );\r\n    tx.sign(sender, nonce);\r\n    await tx\r\n      .send(status => console.log(`Status type is: ${status.type}`))\r\n      .then(hash => {\r\n        console.log(`submitted with hash ${hash}`);\r\n      });\r\n\r\n    const block_after = await api.rpc.chain.getHeader();\r\n\r\n    console.log('Block status after transaction', String(block_after));\r\n    const nonce_after: any = await api.query.system.accountNonce(\r\n      sender.address()\r\n    );\r\n    console.log('Nonce after transaction', String(nonce_after));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  process.exit(1);\r\n}\r\n\r\nmain();\r\n```\r\n\r\nHere is the result of the console.logs \r\n\r\n```\r\nNonce before transaction 40\r\nBlock status before transaction {\"parentHash\":\"0x57e79da1292a9680c153b00bb1581a980caa804948c4aa245bb149a8b97c9e93\",\"number\":4357,\"stateRoot\":\"0xfa1286e210d3be2401de6a5a0d80d5e3a000652f594b6d2c01b958bc5b0fc4e3\",\"extrinsicsRoot\":\"0x93123d7542541f55630064c216b523e890552f6ea06daa85215ee810441602c5\",\"digest\":{\"logs\":[[257442668,\"0xdd344f5bbd65bdaa3bbf0fc623a7358565510f2b61e4b9f74dfda105e36eed3a257b12ecc06301dde48b6877c0e7f122162e68802b03c953e452ab1d4437ee07\"]]}}\r\nsubmitted with hash 16\r\nStatus type is: Finalised\r\nBlock status after transaction {\"parentHash\":\"0x57e79da1292a9680c153b00bb1581a980caa804948c4aa245bb149a8b97c9e93\",\"number\":4357,\"stateRoot\":\"0xfa1286e210d3be2401de6a5a0d80d5e3a000652f594b6d2c01b958bc5b0fc4e3\",\"extrinsicsRoot\":\"0x93123d7542541f55630064c216b523e890552f6ea06daa85215ee810441602c5\",\"digest\":{\"logs\":[[257442668,\"0xdd344f5bbd65bdaa3bbf0fc623a7358565510f2b61e4b9f74dfda105e36eed3a257b12ecc06301dde48b6877c0e7f122162e68802b03c953e452ab1d4437ee07\"]]}}\r\nNonce after transaction 40\r\n```\r\n\r\nIs there something I am doing wrong with respect to the transaction? Because the Status type is telling me that the transaction has been Finalised but neither the block states nor the nodes have updated to reflect this transaction. \r\n\r\nI'm running a single node network on my local machine (Macbook Pro 2017, Mac OS High Sierra) with respect to substrate, and here are the logs for the substrate instance from a few seconds before I send the transaction to a few seconds after.\r\n\r\n```\r\n2018-12-13 12:10:11 Idle (0 peers), best: #4376 (0xe03d…0faa)\r\n2018-12-13 12:10:13 Proposing block [number: 4377; hash: 0x955e…93cc; parent_hash: 0xe03d…0faa; extrinsics: [0xc877…44ca, 0x7b4e…2d59]]\r\n2018-12-13 12:10:16 Idle (0 peers), best: #4376 (0xe03d…0faa)\r\n2018-12-13 12:10:17 Imported #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:18 Starting consensus session on top of parent 0x1f8407cab28e54041f0051e57f8c91291f347025532f9bb1418a7024440fd8db\r\n2018-12-13 12:10:21 Idle (0 peers), best: #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:22 Proposing block [number: 4378; hash: 0xfa44…d392; parent_hash: 0x1f84…d8db; extrinsics: [0x2f9a…d775, 0x7b4e…2d59]]\r\n2018-12-13 12:10:26 Idle (0 peers), best: #4377 (0x1f84…d8db)\r\n2018-12-13 12:10:27 Imported #4378 (0x9d8f…606a)\r\n2018-12-13 12:10:28 Starting consensus session on top of parent 0x9d8f83ec8c14a6c1513745c67515d69b4db517b8d6042b4cf674a82d5dee606a\r\n2018-12-13 12:10:31 Idle (0 peers), best: #4378 (0x9d8f…606a)\r\n2018-12-13 12:10:32 Proposing block [number: 4379; hash: 0xca2d…683a; parent_hash: 0x9d8f…606a; extrinsics: [0xdbef…f3f4, 0x7b4e…2d59]]\r\n2018-12-13 12:10:36 Imported #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:36 Idle (0 peers), best: #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:37 Starting consensus session on top of parent 0x8ce22997f8bc0a4ac3524dae23ab0ab4c2b48fb641777ff3377cdf27c90eb0b7\r\n2018-12-13 12:10:41 Proposing block [number: 4380; hash: 0x2f84…a06d; parent_hash: 0x8ce2…b0b7; extrinsics: [0xb107…6296, 0x7b4e…2d59]]\r\n2018-12-13 12:10:41 Idle (0 peers), best: #4379 (0x8ce2…b0b7)\r\n2018-12-13 12:10:46 Imported #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:46 Idle (0 peers), best: #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:47 Starting consensus session on top of parent 0x85d2b8898b230dd7e0b0bd74ef2d7d3f06e66d306187ed725097d3300882b01f\r\n2018-12-13 12:10:47 Random Kademlia request has yielded empty results\r\n2018-12-13 12:10:51 Proposing block [number: 4381; hash: 0xb33f…80fd; parent_hash: 0x85d2…b01f; extrinsics: [0x856c…5260, 0x7b4e…2d59]]\r\n2018-12-13 12:10:51 Idle (0 peers), best: #4380 (0x85d2…b01f)\r\n2018-12-13 12:10:55 Imported #4381 (0x8cb8…7be8)\r\n2018-12-13 12:10:56 Idle (0 peers), best: #4381 (0x8cb8…7be8)\r\n2018-12-13 12:10:56 Starting consensus session on top of parent 0x8cb8bb0379ec184e1cdb3e64cc2e20225560f4319db4b70725160cce9e5c7be8\r\n2018-12-13 12:11:00 Proposing block [number: 4382; hash: 0x66f0…c6b8; parent_hash: 0x8cb8…7be8; extrinsics: [0x12d2…c431, 0x7b4e…2d59]]\r\n2018-12-13 12:11:01 Idle (0 peers), best: #4381 (0x8cb8…7be8)\r\n2018-12-13 12:11:05 Imported #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:06 Starting consensus session on top of parent 0x4a1da9855119a288aaf16ae27039f6981c99606c98b35afcae3172e071578bc2\r\n2018-12-13 12:11:06 Idle (0 peers), best: #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:10 Proposing block [number: 4383; hash: 0xbb25…018b; parent_hash: 0x4a1d…8bc2; extrinsics: [0x0ca5…feda, 0x7b4e…2d59]]\r\n2018-12-13 12:11:11 Idle (0 peers), best: #4382 (0x4a1d…8bc2)\r\n2018-12-13 12:11:14 Imported #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:15 Starting consensus session on top of parent 0xd8905527e88ff36bdc3de9d077d7df51d9f946066b9e7c7f1022ffd68e6c4ffa\r\n2018-12-13 12:11:16 Idle (0 peers), best: #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:19 Proposing block [number: 4384; hash: 0x137d…0966; parent_hash: 0xd890…4ffa; extrinsics: [0x9fa1…7889, 0x7b4e…2d59]]\r\n2018-12-13 12:11:21 Idle (0 peers), best: #4383 (0xd890…4ffa)\r\n2018-12-13 12:11:23 Imported #4384 (0x449d…0b20)\r\n2018-12-13 12:11:25 Starting consensus session on top of parent 0x449d661b3dd41078966a29e277de7d2ccdd7b81b54fdbf9e0b2e4d1dffbf0b20\r\n2018-12-13 12:11:26 Idle (0 peers), best: #4384 (0x449d…0b20)\r\n2018-12-13 12:11:28 Proposing block [number: 4385; hash: 0x61f6…8fd6; parent_hash: 0x449d…0b20; extrinsics: [0x6e53…855c, 0x7b4e…2d59]]\r\n2018-12-13 12:11:31 Idle (0 peers), best: #4384 (0x449d…0b20)\r\n2018-12-13 12:11:32 Random Kademlia request has yielded empty results\r\n2018-12-13 12:11:33 Imported #4385 (0x9962…71cc)\r\n2018-12-13 12:11:34 Starting consensus session on top of parent 0x9962d8493ead4209ec7637d60fe7c1c0635e69c97158ddc6fb7aa5f4544471cc\r\n2018-12-13 12:11:36 Idle (0 peers), best: #4385 (0x9962…71cc)\r\n2018-12-13 12:11:38 Proposing block [number: 4386; hash: 0x83a3…c3f9; parent_hash: 0x9962…71cc; extrinsics: [0xe03b…fadd, 0x7b4e…2d59]]\r\n2018-12-13 12:11:41 Idle (0 peers), best: #4385 (0x9962…71cc)\r\n2018-12-13 12:11:44 Imported #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:46 Starting consensus session on top of parent 0x5d863e6a26c2d1b9b1cf31f885908c07ed6afffdcd7150b740bcb72db14b66b3\r\n2018-12-13 12:11:46 Idle (0 peers), best: #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:50 Proposing block [number: 4387; hash: 0x6d02…3489; parent_hash: 0x5d86…66b3; extrinsics: [0x3e36…66cd, 0x7b4e…2d59, 0x7052…e172]]\r\n2018-12-13 12:11:51 Idle (0 peers), best: #4386 (0x5d86…66b3)\r\n2018-12-13 12:11:56 Imported #4387 (0x6474…1edf)\r\n2018-12-13 12:11:56 Idle (0 peers), best: #4387 (0x6474…1edf)\r\n2018-12-13 12:11:58 Starting consensus session on top of parent 0x64749d8dd5ba7705807692da32cd7a46adc1d9e099934528554b9073d1ed1edf\r\n2018-12-13 12:12:01 Idle (0 peers), best: #4387 (0x6474…1edf)\r\n2018-12-13 12:12:02 Proposing block [number: 4388; hash: 0x5156…5dcd; parent_hash: 0x6474…1edf; extrinsics: [0x8e24…3ec0, 0x7b4e…2d59]]\r\n2018-12-13 12:12:06 Imported #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:06 Idle (0 peers), best: #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:07 Starting consensus session on top of parent 0x8bdb90e6f8f8c54f345668bae134e8df434bf0e114af80ebcfb148d9496d27ca\r\n2018-12-13 12:12:11 Proposing block [number: 4389; hash: 0x703c…79a2; parent_hash: 0x8bdb…27ca; extrinsics: [0xee2a…767a, 0x7b4e…2d59]]\r\n2018-12-13 12:12:11 Idle (0 peers), best: #4388 (0x8bdb…27ca)\r\n2018-12-13 12:12:15 Imported #4389 (0x73ce…3d13)\r\n```\r\n\r\nThanks"},{"labels":[null,"bug"],"text":"Currently the code relies on the class name\r\n\r\nhttps://github.com/polkadot-js/api/blob/90a2e26540b9800325e207c91b0b8d2556900fb4/packages/types/src/codec/EnumType.ts#L67\r\n\r\nHowever create-react-app prod build minifies the js code and mangle the class name (most of them end up been `t`), and breaks `EnumType`\r\n\r\n"},{"labels":[null,"bug",null],"text":"Seeing this (very sporadically) in the UI and it only happens once -\r\n\r\n```\r\n2018-12-10 14:36:35        RPC-CORE: subscribeStorage (keys: Vec<StorageKey>): StorageChangeSet:: Unable to decode event for index 0x0000\r\n```\r\n\r\nIt can only mean the Events are not initialised before the new block comes in."},{"labels":[null,"bug"],"text":"- `::Proposal` is returned\r\n- `T :: AccountId` is returned\r\n- Related https://github.com/paritytech/substrate/issues/1244"},{"labels":[null,"bug",null],"text":"From https://polkadot.js.org/api/types/\r\n\r\n- Metadata (and it looks the same as others) is not creating a link\r\n- Other links (e.g. AccountId), try to load the .md file instead of the generated HTML - well, actually HTML is not generated\r\n\r\nNeed a solution that does not entail adding all these to SUMMARY.md"},{"labels":["bug"],"text":"Repro:\r\n- replace this line https://github.com/polkadot-js/api/blob/master/packages/api/src/promise/types.d.ts#L10\r\nwith `import { Codec } from '@polkadot/types/codec';`\r\n- `tsc --noEmit`\r\n\r\nExpected:\r\nCompiler should throw, because the import does not exist.\r\n\r\nActual:\r\nIt passes."},{"labels":[null,"bug"],"text":"I am using a local `substrate --dev`.\r\nIssuing the following request:\r\n`curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"state_getStorage\", \"params\": [\"0x2dce29f1a768624dc5343063cb77f77d\"]}' $HOST | jq`\r\n\r\ngives me the correct value:\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"result\": \"0x02000000\",\r\n  \"id\": 1\r\n}\r\n```\r\n\r\n`0x020000` = 2\r\n\r\nUsing the API however, I get 0. The UI (https://polkadot.js.org/apps/next/#/staking) also shows 0:\r\n![image](https://user-images.githubusercontent.com/738724/48204326-ce7a6880-e369-11e8-8f0c-c958348417df.png)\r\n\r\n"},{"labels":["bug"],"text":"For api-observable, I try  unsubscribe bestNumber, but it not send chain_unsubscribeNewHead request"},{"labels":[null,"bug"],"text":"This should be `statusCb` for extrinsic submission to work, right?\r\n\r\nhttps://github.com/polkadot-js/api/blob/67f625b096e8cc3f0a091105061a5f52e01bedef/packages/api/src/promise/SubmittableExtrinsic.ts#L21"},{"labels":[null,"bug"],"text":"\"@polkadot/api\": \"^0.28.24\",\r\n\r\nI did not see this issue yesterday at all but this is showing up today."},{"labels":[null,"bug",null],"text":""}]