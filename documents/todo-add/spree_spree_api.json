[{"labels":["api",null],"text":"When using the `fields` query param on api/v2 the objects returned do not include any `relationships`.\r\n\r\n/edit Actually I just noticed that they are included when I pass them into the `fields` set which makes sense to me. So for example I can get all product with product.name and product.variants by calling `/api/v2/storefront/products?fields[product]=name,variants&include=variants`. This makes sense to me so now I'm wondering if this is intended behavior?\r\n\r\n## Expected Behavior\r\nI expect relationships to be returned regardless of whether I limit which fields should be returned.\r\n\r\n## Actual Behavior\r\nRelationships are not returned if I limit which fields I want returned.\r\n\r\n## Possible Fix\r\nn/a\r\n\r\n## Steps to Reproduce\r\n1. `GET /api/v2/storefront/products?fields[product]=name` and notice that none of the products include any relationships.\r\n\r\n## Your Environment\r\n* Version used: 4.1.7"},{"labels":["api",null,null,null],"text":"I'm not sure if this can be considered a bug or it is intentional:\r\n\r\nWhenever I send a request to the checkout update endpoint, spree generates a new address entry although the address did not change at all. This behaviour is not as described or expected in https://guides.spreecommerce.org/api/v2/storefront#operation/Update%20Checkout (to be fair: no behaviour is described for this).\r\n\r\nI think it would be good to check if the address attributes for bill and / or ship are exactly the same / unchanged even if included in the request and do not create a new address entry. Also maybe it makes sense to define what parameters should trigger a \"new\" address entry and what parameters just update the existing one. My main concern is, that the database is bloating a lot with this and the user also has a lot of duplicate addresses in his address book this way.\r\n\r\nHappy to hear your thoughts and maybe we convert this into an issue / bug if it was not intentional."},{"labels":["api",null],"text":"N+1 queries about icon image on /api/v2/storefront/taxons.\r\n\r\n\r\n## Context\r\ndevelopment.log\r\nActiveStorage::Attachment and ActiveStorage::Blob fetch by every taxon.\r\n\r\n```\r\nrails_1            |   ActiveStorage::Attachment Load (0.9ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 5], [\"record_type\", \"Spree::Asset\"], [\"name\", \"attachment\"], [\"LIMIT\", 1]]\r\nrails_1            |   ActiveStorage::Blob Load (0.4ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 5], [\"LIMIT\", 1]]\r\nrails_1            |   Spree::Taxon Load (0.8ms)  SELECT \"spree_taxons\".* FROM \"spree_taxons\" WHERE \"spree_taxons\".\"lft\" <= 7 AND \"spree_taxons\".\"rgt\" >= 12 AND (\"spree_taxons\".\"id\" != 4) ORDER BY \"spree_taxons\".\"lft\" ASC\r\nrails_1            |   ActiveStorage::Attachment Load (0.4ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 6], [\"record_type\", \"Spree::Asset\"], [\"name\", \"attachment\"], [\"LIMIT\", 1]]\r\nrails_1            |   ActiveStorage::Blob Load (0.3ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 6], [\"LIMIT\", 1]]\r\nrails_1            |   Spree::Taxon Load (1.1ms)  SELECT \"spree_taxons\".* FROM \"spree_taxons\" WHERE \"spree_taxons\".\"lft\" <= 13 AND \"spree_taxons\".\"rgt\" >= 20 AND (\"spree_taxons\".\"id\" != 7) ORDER BY \"spree_taxons\".\"lft\" ASC\r\nrails_1            |   ActiveStorage::Attachment Load (0.5ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 7], [\"record_type\", \"Spree::Asset\"], [\"name\", \"attachment\"], [\"LIMIT\", 1]]\r\nrails_1            |   ActiveStorage::Blob Load (0.6ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 7], [\"LIMIT\", 1]]\r\nrails_1            |   Spree::Taxon Load (0.8ms)  SELECT \"spree_taxons\".* FROM \"spree_taxons\" WHERE \"spree_taxons\".\"lft\" <= 21 AND \"spree_taxons\".\"rgt\" >= 26 AND (\"spree_taxons\".\"id\" != 11) ORDER BY \"spree_taxons\".\"lft\" ASC\r\nrails_1            |   ActiveStorage::Attachment Load (0.6ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 8], [\"record_type\", \"Spree::Asset\"], [\"name\", \"attachment\"], [\"LIMIT\", 1]]\r\nrails_1            |   ActiveStorage::Blob Load (0.5ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 8], [\"LIMIT\", 1]]\r\nrails_1            |   Spree::Taxon Load (1.2ms)  SELECT \"spree_taxons\".* FROM \"spree_taxons\" WHERE \"spree_taxons\".\"lft\" <= 27 AND \"spree_taxons\".\"rgt\" >= 42 AND (\"spree_taxons\".\"id\" != 14) ORDER BY \"spree_taxons\".\"lft\" ASC\r\n```\r\n\r\n## Actual Behavior\r\n\r\n## Possible Fix\r\n\r\nFix scope includes.\r\n\r\napi/app/controllers/spree/api/v2/storefront/taxons_controller.rb\r\n\r\n```\r\n          def scope_includes\r\n              ...\r\n              icon: [attachment_attachment: :blob]\r\n          end\r\n```\r\n\r\n\r\n\r\n## Steps to Reproduce\r\n\r\n## Your Environment\r\n"},{"labels":["api",null],"text":"## Context\r\n\r\nHi, I was just trying out the headless install on a new Rails project following the README.md, so I added these gems to the Gemfile and ran the generators.\r\n\r\n```ruby\r\ngem 'spree_api', '~> 4.1'                                                                                                                                    \r\ngem 'spree_backend', '~> 4.1'                                                                                                                                \r\ngem 'spree_auth_devise', '~> 4.1'                                                                                                                            \r\ngem 'spree_gateway', '~> 3.7'\r\n```\r\n\r\n```bash\r\nbundle exec rails g spree:install --user_class=Spree::User\r\nbundle exec rails g spree:backend:copy_views\r\n```\r\n\r\nBut when I try to open http://localhost:3000/admin I get redirected to `/login` and then I get a `Missing template spree/layouts/spree_application` exception.  I see this file exists in spree_frontend, but shouldn't it be included on spree_backend?\r\n\r\n## Your Environment\r\n\r\n```\r\nMissing template spree/layouts/spree_application with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby, :jbuilder, :rabl]}. Searched in: * \"/home/fauno/Projects/sutty/tienda.sutty.nl/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_gateway-3.7.5/lib/views/backend\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_auth_devise-4.1.0/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_auth_devise-4.1.0/lib/views/backend\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/devise-4.7.1/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_backend-4.1.6/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/doorkeeper-5.4.0/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_api-4.1.6/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/spree_core-4.1.6/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/kaminari-core-1.1.1/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/actionmailbox-6.0.3.1/app/views\" * \"/home/fauno/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/actiontext-6.0.3.1/app/views\" \r\n```"},{"labels":["api",null],"text":"## Context\r\nDuring the checkout process, if the payment fails because the charge is rejected by the gateway, the API responds with a 500 status code and an HTML error page. This happens with Stripe gateways (tested with `StripeGateway` and `StripeElementsGateway`), I don't have accounts with other gateways to test them.\r\n\r\n## Expected Behavior\r\nThe API should answer with a 422 status code and a JSON body explaining the error like specified in the docs.\r\n\r\n## Actual Behavior\r\nThe API answers with a 500 status code and an HTML error page.\r\n\r\n## Possible Fix\r\nThe base controller for API v1 `Spree::Api::BaseController` has a line to `rescue_from Spree::Core::GatewayError, with: :gateway_error`. The API v2 base controller `Spree::Api::V2::BaseController` should probably have a similar logic.\r\n\r\n## Steps to Reproduce\r\n1. Create a basic rails app and install spree\r\n2. In the Admin, setup a payment method with `Spree::Gateway::StripeGateway` or `Spree::Gateway::StripeElementsGateway`\r\n3. Through the API v2, create a cart, add some items, and go through the checkout steps until the `payment` step.\r\n4. Try to update the checkout with one of Stripe's [special test tokens](https://stripe.com/docs/testing#cards-responses) that result in a charge failure, like `tok_chargeDeclined` or `tok_chargeDeclinedInsufficientFunds`\r\n\r\n## Your Environment\r\n* Version used:\r\nTested with 2 different setups:\r\n  - Rails 5.2.4.3 and Spree 3.7.10\r\n  - Rails 6.0.3.1 and Spree 4.1.6\r\n* Gemfile, Gemfile.lock and stack trace:\r\nhttps://gist.github.com/johannboutet/0e4774bfeedcc86bc72402081e95ed1c"},{"labels":["api",null],"text":"If you want to use the cart request to display a cart with product images, you need all images related to the variant the user has in her/his cart.\r\n\r\n## Context\r\nCurrently we are only able to display product variant images in the cart. This means unnecessary data storage or no images at all.\r\n\r\n## Expected Behavior\r\nIf an image is saved for \"all\" variants I want it to be returned in the images array for every variant.\r\n\r\n## Actual Behavior\r\nOnly images that are tagged for a specific variant are returned.\r\n\r\n## Possible Fix\r\nI did not look into the code yet but probably it's just a simple \"OR\" / relation that is missing :)\r\n\r\n## Steps to Reproduce\r\n1. Add a new Product with\r\n-  at least one variant and\r\n-  with an image that is tagged for \"all\" variants and\r\n-  with an image that is tagged for the variant\r\n\r\n![image](https://user-images.githubusercontent.com/159259/82534642-c053fd80-9b45-11ea-8988-dc65280d704c.png)\r\n\r\n2. Add the product to your cart via API v2\r\n`/api/v2/storefront/cart/add_item.json?include=line_items,variants,variants.images`\r\n\r\n3. The result does not return the product image for \"all\" variants but only the one for the specific variant\r\n\r\nThis is also true for all other cart requests\r\n\r\n## Your Environment\r\n* Version used: spree master at commit `b0f2e86591ee9ae071807bffb9d1243b4eaa8700`"},{"labels":["api",null,null],"text":"**Is your feature request related to a problem? Please describe.**\r\nI'm using json api serializer in frontend.\r\nhttps://github.com/SeyZ/jsonapi-serializer\r\n\r\nthis can deserialize for fastjson-api response including has_many relatitonships.\r\nhttps://github.com/SeyZ/jsonapi-serializer/blob/master/test/deserializer.js#L228-L232\r\n\r\nBut, some spree api response can't deserialize\r\n\r\nexample:\r\n```\r\nmodule Spree\r\n  module V2\r\n    module Storefront\r\n      class CartSerializer < BaseSerializer\r\n        ...\r\n        # this is can serialize by jsonapi-serializer\r\n        belongs_to :user\r\n\r\n        # this is can not serlizaised by jsonapi-serializer\r\n        belongs_to :billing_address,\r\n          id_method_name: :bill_address_id,\r\n          serializer: :address\r\n```\r\n\r\nA response for relationships billing address data type is 'billing_address'.\r\nAnd, a response for included data type is 'address'\r\nthis mismatch caused cannnot deserialized.\r\n\r\n<img width=\"529\" alt=\"スクリーンショット 2020-04-28 5 55 53\" src=\"https://user-images.githubusercontent.com/24713957/80421182-089d4880-8917-11ea-9ccc-41b8322538e1.png\">\r\n\r\n**Describe the solution you'd like**\r\nI would like to add `record_type` for deserialize.\r\nhttps://github.com/Netflix/fast_jsonapi#customizable-options\r\n\r\n```\r\nmodule Spree\r\n  module V2\r\n    module Storefront\r\n      class CartSerializer < BaseSerializer\r\n        belongs_to :billing_address,\r\n          id_method_name: :bill_address_id,\r\n          serializer: :address,\r\n          record_type: :address\r\n```\r\n\r\nA response for relationships billing address data type is 'address'.\r\nAnd can serialize.\r\n\r\n"},{"labels":["api",null],"text":"GET /checkout/shipping_rates crashes the server when checkout step has already advanced from Delivery step using the web. Server crashes and needs to be restarted\r\n\r\nThe endpoint should reply with the shipping rates response according to the guide, https://guides.spreecommerce.org/api/v2/storefront#operation/Shipping%20Rates\r\n\r\nBut, instead of responding, it just hangs and crashes the server.\r\n\r\nYou can reproduce on both Spree 3.7 and Spree 4 using the following steps:\r\n1. Web: Add item to cart\r\n2. Web: Checkout\r\n3. Web: Fill in Address and advance to Delivery step\r\n4. Web: Choose shipping rate and advance to Payment step\r\n5. API: http://localhost:3000/api/v2/storefront/checkout/shipping_rates\r\n"},{"labels":["api",null],"text":"<!--- Provide a general summary of the issue in the Title above -->\r\n\r\n## Context\r\nWhen an admin creates new products in the backend it's optional to set an available date for the product. In some cases the product is not yet in stock and therefore the admin might set the available date to a future date. Spree's frontend does not show a product unless it has a set date and that date is current or in the past. However the storefront api seems to leak out products that don't yet have an available on date or have a future date.\r\n<!--- Provide a more detailed introduction to the issue itself -->\r\n<!--- How has this issue affected you? What were you trying to accomplish? -->\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nProducts that have available date set in the future or null should not be returned from the storefront api. At least not to an unauthenticated user or non-admins. \r\n\r\n## Actual Behavior\r\n<!--- Tell us what happens instead -->\r\nProducts that have available date set in the future or null are returned from the storefront api.\r\n\r\n## Possible Fix\r\n<!--- Not obligatory, but suggest a fix or reason for the issue -->\r\nI’m guessing that product finder class is missing an available check in the scope.\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this issue include code to reproduce, if relevant -->\r\n1. Deploy the lates 4.0 stable sanbox version of Spree to Heroku.\r\n2. Log in to admin and change one product's available on date to a future date. For example Ruby on Rails Tote.\r\n3. Call the Products endpoint (http://sandkassi4.herokuapp.com/api/v2/storefront/products).\r\n4. Observe that the product Roby on Rails Tote is returned even though it has an available date set in the future.\r\n\r\n## Your Environment\r\n<!--- Include as many relevant details about the environment you experienced the issue in -->\r\n* Version used: 4.0\r\n* Gemfile and Gemfile.lock as text in a Gist:\r\n* Any relevant stack traces (\"Full trace\" preferred):\r\n\r\n<!--- Please remember to format code using triple backticks (`)\r\n\t  so that it is neatly formatted when the issue is posted. -->\r\n\r\n<!--- In 99% of cases, this information is enough to determine the cause and\r\n\t  solution to the problem that is being described.\r\n\r\n\t  Any issue that is open for 14 days without actionable information or\r\n\t  activity will be marked as \"stalled\" and then closed. Stalled issues\r\n\t  can be re-opened if the information requested is provided. -->\r\n"},{"labels":["api",null],"text":"Spree API when hitting  `/products?include=images` path gives the response in following format.\r\n\r\n````\r\n{\r\n  \"data\": [...],\r\n  \"included\": [\r\n    {\r\n      \"id\": \"4\",\r\n      \"type\": \"image\",\r\n      \"attributes\": {\r\n      \"viewable_type\": \"Spree::Variant\",\r\n      \"viewable_id\": 3,\r\n      \"styles\": [\r\n        {\r\n          \"url\": \"/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--bd6df012d992b43227344ecb03dc0ab6e13b1555/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lMTkRoNE5EZytCam9HUlZRPSIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--504f95c059f17243e0d7d1312e2b387f26a40aff/bg.jpg\",\r\n          \"width\": \"48\",\r\n          \"height\": \"48\"\r\n        },\r\n        {\r\n          \"url\": \"/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--bd6df012d992b43227344ecb03dc0ab6e13b1555/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lOTVRBd2VERXdNRDRHT2daRlZBPT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--594f543b42e0bfafbe9d09df814e1d60837f9ef6/bg.jpg\",\r\n          \"width\": \"100\",\r\n          \"height\": \"100\"\r\n        },\r\n        {\r\n          \"url\": \"/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--bd6df012d992b43227344ecb03dc0ab6e13b1555/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lOTWpRd2VESTBNRDRHT2daRlZBPT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--46583de60196cb1eee5b4a704d67209eee40c09a/bg.jpg\",\r\n          \"width\": \"240\",\r\n          \"height\": \"240\"\r\n        },\r\n        {\r\n          \"url\": \"/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDUT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--bd6df012d992b43227344ecb03dc0ab6e13b1555/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lOTmpBd2VEWXdNRDRHT2daRlZBPT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--3b3e65d1d9c712d2d540e15aa84ca541eb12b365/bg.jpg\",\r\n          \"width\": \"600\",\r\n          \"height\": \"600\"\r\n        }\r\n      ]\r\n    }\r\n  }],\r\n  \r\n  \"meta\": {\r\n    \"count\": 14,\r\n    \"total_count\": 14,\r\n    \"total_pages\": 1\r\n    },\r\n    \"links\": {\r\n      \"self\": \"https://galific.herokuapp.com/api/v2/storefront/products?include=variants.images\",\r\n      \"next\": \"https://galific.herokuapp.com/api/v2/storefront/products?include=variants.images&page=1\",\r\n      \"prev\": \"https://galific.herokuapp.com/api/v2/storefront/products?include=variants.images&page=1\",\r\n      \"last\": \"https://galific.herokuapp.com/api/v2/storefront/products?include=variants.images&page=1\",\r\n      \"first\": \"https://galific.herokuapp.com/api/v2/storefront/products?include=variants.images&page=1\"\r\n    }\r\n  }\r\n}\r\n````\r\nHere you can see the image URL's are coming as included object. While developing for mobile its not a good idea to put the very crucial element (product image path in this case) in separate object. This require the mobile dev to loop unnecessary just to get the image path which can be provided within the image relationships object like this: \r\n\r\n````\r\n\"images\": {\r\n  \"data\": [\r\n  {\r\n    \"id\": \"2\",\r\n    \"type\": \"image\",\r\n    \"url\" : 'image-path.jpg'\r\n  }]\r\n}\r\n\r\n````\r\n\r\n \r\n## Expected Behavior\r\nThe image path should be included in data object itself rather than separated include object.\r\n "},{"labels":["api",null],"text":"\r\n## Context\r\nI have tried almost all possible solutions provided in this thread https://github.com/spree/spree/issues/9605 but its not working . Still getting invalid_grant while creating token from postman as well as from app. From postman it never works. from app it works sometimes and sometimes not.   \r\n\r\nThis is the setup i gave. \r\n![Screenshot from 2019-11-12 12-17-45](https://user-images.githubusercontent.com/10785334/68648693-0866e780-0547-11ea-9bde-ddb7ec0eb7a5.png)\r\n\r\n\r\n## Expected Behavior\r\nShould return token as per documentation\r\n\r\n"},{"labels":["api",null],"text":"**Is your feature request related to a problem? Please describe.**\r\nI've been trying to integrate react with it by having backend as spree and frontend as react. I've tried to figure out on how to I can let users login to the store using Spree API, but I couldn't find any API related to it. \r\n\r\n**Describe the solution you'd like**\r\nIt would be great if there's a feature where we can let our user to login/signup in our store using Spree API\r\n\r\n\r\n"},{"labels":["api",null],"text":"## Context\r\n<!--- Provide a more detailed introduction to the issue itself -->\r\nUsing the **Storefront API v2** I am trying to add a payment using the **Spree::Gateway::Eway** payment method but I get an payment method is unsupported error.\r\n\r\nIt works fine through the frontend with the payments showing up in my EWay sandbox.\r\n\r\nSeems the same as [issue #8051](https://github.com/spree/spree/issues/8051) which was closed.\r\n\r\nAs per [docs](https://guides.spreecommerce.org/api/v2/storefront#operation/Update%20Checkout) I add address and shipping method to `PATCH /checkout` and then `PATCH /checkout/next` returns an updated cart state of \"payment\".\r\n\r\nI then add the payment sources as per docs to the `PATCH /checkout` endpoint:\r\n\r\n```\r\n{\r\n    \"order\": {\r\n        \"payments_attributes\": [\r\n            {\r\n                \"payment_method_id\": 4\r\n            },\r\n        ]\r\n    },\r\n    \"payment_source\": {\r\n      \"4\": {\r\n        \"number\": \"4444333322221111\",\r\n        \"month\": \"01\",\r\n        \"year\": \"2022\",\r\n        \"verification_value\": \"123\",\r\n        \"name\": \"John Doe\"\r\n      }\r\n    }\r\n}\r\n```\r\nwhere the payment_method_id: 4 is the Eway method.\r\n\r\nThen try to update the checkout with `PATCH /checkout/next`\r\n\r\n<!--- How has this issue affected you? What were you trying to accomplish? -->\r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nRespond with updated cart with:\r\n```\r\n{\r\n...\r\n\"state\": \"confirm\"\r\n...\r\n}\r\n```\r\n`\r\nStatus: 200\r\n`\r\nAs mentioned above, it works as expected through the frontend.\r\n\r\n## Actual Behavior\r\n<!--- Tell us what happens instead -->\r\nI get the following response from the `PATCH /checkout/next` call\r\n\r\n`Status:422`\r\n```\r\n{\r\n    \"error\": \"That payment method is unsupported. Please choose another one.\",\r\n    \"errors\": {\r\n        \"base\": [\r\n            \"That payment method is unsupported. Please choose another one.\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Possible Fix\r\n<!--- Not obligatory, but suggest a fix or reason for the issue -->\r\nN/A\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this issue include code to reproduce, if relevant -->\r\n1. Create a new Spree project\r\n2. Add Spree::Gateway::Eway payment method\r\n3. Follow as per above\r\n\r\n## Your Environment\r\n<!--- Include as many relevant details about the environment you experienced the issue in -->\r\n* Version used: Spree 3.7.4, Rails 5.2.3\r\n[Gemfile](https://gist.github.com/JasonKroll/6b63bb91f4814853bebdca48c8bcc1cd)\r\n[Gemfile.lock](https://gist.github.com/JasonKroll/aa6a5b574864183bcb7a30698367812e)\r\n\r\n<!--- Please remember to format code using triple backticks (`)\r\n\t  so that it is neatly formatted when the issue is posted. -->\r\n\r\n<!--- In 99% of cases, this information is enough to determine the cause and\r\n\t  solution to the problem that is being described.\r\n\r\n\t  Any issue that is open for 14 days without actionable information or\r\n\t  activity will be marked as \"stalled\" and then closed. Stalled issues\r\n\t  can be re-opened if the information requested is provided. -->\r\n"},{"labels":["api",null],"text":"When integrating [Vue Storefront](https://github.com/spark-solutions/spree2vuestorefront) with Spree we came across an issue - we cannot pass the applied coupon code when removing the code itself from the Order. \r\n\r\nHence we need to change the logic a bit - when there's no coupon code passed it should remove all Coupon codes Promotions from the Order.\r\n\r\nTODO:\r\n\r\n- [ ] update the API endpoint and service to make `coupon_code` optional\r\n- [ ] add additional request specs\r\n- [ ] update swagger doc\r\n\r\nhttps://guides.spreecommerce.org/api/v2/storefront#operation/Remove%20Coupon%20Code"},{"labels":["api",null],"text":"**Context**\r\nRunning tests on fresh install from master branch\r\nRuby 2.5.1\r\nRails 5.2\r\n\r\n**Expected Behavior**\r\nTests pass.\r\n\r\n**Actual Behavior**\r\n2 Failures\r\n```\r\n1) Spree::Api::V1::CheckoutsController PUT 'update' transitioning to delivery can update addresses and transition from address to delivery\r\n     Failure/Error: if @order.completed? || @order.next\r\n     \r\n     ActiveRecord::RecordNotUnique:\r\n       SQLite3::ConstraintException: UNIQUE constraint failed: spree_shipping_rates.shipment_id, spree_shipping_rates.shipping_method_id: INSERT INTO \"spree_shipping_rates\" (\"shipment_id\", \"shipping_method_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:108:in `step'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:108:in `block in each'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:107:in `loop'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:107:in `each'\r\n\r\n  2) Spree::Api::V1::CheckoutsController PUT 'update' transitioning to delivery does not contain duplicate variant data in delivery return\r\n     Failure/Error: if @order.completed? || @order.next\r\n     \r\n     ActiveRecord::RecordNotUnique:\r\n       SQLite3::ConstraintException: UNIQUE constraint failed: spree_shipping_rates.shipment_id, spree_shipping_rates.shipping_method_id: INSERT INTO \"spree_shipping_rates\" (\"shipment_id\", \"shipping_method_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:108:in `step'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:108:in `block in each'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:107:in `loop'\r\n     # /home/michael/.rvm/gems/ruby-2.5.1@5.2.1/gems/sqlite3-1.3.13/lib/sqlite3/statement.rb:107:in `each'\r\n\r\n```\r\n\r\n**Steps to Reproduce**\r\n1. Follow \"Developing Spree\" instructions for API gem"},{"labels":["api"],"text":"An endpoint for fetching saved Credit Cards\r\n\r\n## Expected Behavior\r\n`GET /account/credit_cards`\r\nshould return a list of all Credit Cards (no pagination) in JSON API format:\r\n```\r\n{\r\n   id: 1,\r\n   type: 'credit_card',\r\n   attributes: {\r\n      type: 'visa',\r\n      last_digits: '4111',\r\n      month: 12,\r\n      year: 2020,\r\n      name: 'John Doe'\r\n   },\r\n   relationships: {\r\n      ... needs an association to Payment Method - TBD...\r\n   }\r\n}\r\n```\r\n\r\n`GET /account/credit_cards?filter[payment_method_id]=1`\r\nwill return only CCs for selected payment method\r\n\r\n`GET /account/credit_cards/default`\r\nwill return a singular resource - the default CC for the current user\r\n\r\n## Actual Behavior\r\n<!--- Tell us what happens instead -->\r\n\r\n## Possible Fix\r\n`api/v2/storefront/account/credit_cards_controller` (`index` and `show` actions)\r\n\r\nsource of inspiration: https://github.com/spree/spree/blob/master/api/app/controllers/spree/api/v1/credit_cards_controller.rb"},{"labels":["api",null],"text":"For all storefronts, we have build we always needed some kind of tax estimate for given address. If the address isn't specified let's use `Spree::Address.default`"},{"labels":["api",null],"text":"For all storefronts, we have build we always needed some kind of shipping cost (and method) estimate for given address. If address isn't specified let's use `Spree::Address.default`"},{"labels":["api",null],"text":"With the [3.7 release](https://guides.spreecommerce.org/release_notes/spree_3_7_0.html) we've included the brand new [Storefront API v2](https://spree-guides.now.sh/api/v2/storefront) which is a modern lightweight REST API based on [JSON Api](https://jsonapi.org/) spec. We will continue this work in the form of the Platform API which is designed to:\r\n\r\n- [ ] completely replace the old legacy REST API v1\r\n- [ ] expose all of the features of the Spree platform\r\n- [ ] power our new Admin Panel experience (Spree 5.0)\r\n- [ ] documented in [OpenAPI](https://github.com/OAI/OpenAPI-Specification) format\r\n- [ ] tested with requests specs"},{"labels":["api"],"text":"<!--- Provide a general summary of the issue in the Title above -->\r\nWhen updating an order through the OrderUpdateAPI, using Spree 3.2.7.\r\n\r\nhttps://guides.spreecommerce.org/api/checkouts.html#updating-an-order\r\n\r\nIt causes the order to return to the ADDRESS state. Since there is no documentation regarding this, I would like to know if it's intended or a bug.\r\n\r\n## Context\r\n<!--- Provide a more detailed introduction to the issue itself -->\r\n<!--- How has this issue affected you? What were you trying to accomplish? -->\r\n\r\nI would like to use order update API to update order contents without necessarily changing state.\r\nFor example: when in PAYMENT state, I would like to change my address (shipping rate fixed) but would like the order continue in the PAYMENT state. Or while in PAYMENT state, I would like to change my payment method to a different one before continuing.\r\n\r\nThe problem is that regardless of what I updated and of the state of the order, using the OrderUpdateAPI always causes the order to return to the ADDRESS state automatically. \r\n\r\n## Expected Behavior\r\n<!--- Tell us what should happen -->\r\n\r\nThe documentation is not clear, but I expect the order state to remain the same when an update does not contain anything critical.\r\n\r\n## Actual Behavior\r\n<!--- Tell us what happens instead -->\r\n\r\nUpon update, the order returns to ADDRESS state.\r\n\r\n## Possible Fix\r\n<!--- Not obligatory, but suggest a fix or reason for the issue -->\r\n\r\nI did some digging but all I could find is this, which mentions that `order would transition to address state on confirm failure`.\r\n\r\nhttps://github.com/spree/spree/blob/master/core/app/models/spree/order.rb#L212\r\n\r\nBut I could not find any traces in the source to indicate where this is done.\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this issue include code to reproduce, if relevant -->\r\n1. Create an order\r\n2. Add LineItems and move order to DELIVERY state\r\n3. Add Addresses and move order to PAYMENT state\r\n4. Use the OrderUpdateAPI `PUT /api/v1/orders/:number.json?order_token=abcdef123456` to insert a payment method to the order without advancing it to the next.\r\n5. You will see that the order is now back to the ADDRESS state.\r\n\r\n## Your Environment\r\n<!--- Include as many relevant details about the environment you experienced the issue in -->\r\n* Version used: 3.2.7\r\n* Gemfile and Gemfile.lock as text in a Gist: https://gist.github.com/vitutc/898be123b6f22e01adb27d2de951905d\r\n* Any relevant stack traces (\"Full trace\" preferred): There is no trace.\r\n\r\n<!--- Please remember to format code using triple backticks (`)\r\n\t  so that it is neatly formatted when the issue is posted. -->\r\n\r\n<!--- In 99% of cases, this information is enough to determine the cause and\r\n\t  solution to the problem that is being described.\r\n\r\n\t  Any issue that is open for 14 days without actionable information or\r\n\t  activity will be marked as \"stalled\" and then closed. Stalled issues\r\n\t  can be re-opened if the information requested is provided. -->"}]