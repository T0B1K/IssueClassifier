[{"labels":[null,"api",null],"text":"Vesting now needs an explicit claim"},{"labels":[null,"api",null],"text":""},{"labels":[null,"api",null],"text":"As per https://github.com/paritytech/substrate/pull/5828/files#r423987523 (Introduced in https://github.com/paritytech/substrate/pull/5828)"},{"labels":[null,"api"],"text":"It'd be great to have support of `at` for derive queries:\r\ne.g `api.derive.democracy.referendumInfo.at(BlockHash, RefIndex)`\r\n\r\nThe reason in this particular case is that each client needs to implement its own logic (e.g for backward compatibility or `referendumInfoOf` that recently changed), although the compatibility layer has already been implemented in derive."},{"labels":[null,"api",null],"text":"Looks like the UI is not showing the accurate reward amount for validators with a commission greater than 0.\r\n\r\nFor instance, the message for this tx https://polkascan.io/pre/kusama/transaction/0x342d516e1f99a7ce92bc5f98aa95ef4566b4f40b70d11367deb75cc9d5d2d8de was `Payout rewards (0.000 KSM)`, the validator has set a 100% commission."},{"labels":[null,"api",null],"text":"After https://github.com/paritytech/substrate/pull/5226"},{"labels":[null,"api",null,null],"text":"https://github.com/paritytech/substrate/pull/4649/"},{"labels":[null,null,null,"api",null,null],"text":"- Introduced in https://github.com/paritytech/substrate/pull/4474"},{"labels":["api",null],"text":"![image](https://user-images.githubusercontent.com/1424473/69850347-6140ba80-127f-11ea-8219-c8537b54fc2d.png)\r\n"},{"labels":[null,"api",null],"text":"Using api beta30 - getting derived session info returns wrong value on current kusama node.\r\nChain height currently at BN:826889 while value for last session(epoch?) change is showing value of 262453039\r\n\r\nIt looks like other data is also wrong - if we look at polkascan and look into events on kusamacc2 - session and era starts do not correspond to data shown in session info.\r\n\r\nAccording to session info, there should have been session starts at blocks  824870, 822470, 820070 which is calculated from \r\n`await api.rpc.chain.getHeader()).number.toNumber() - sessionProgress`\r\n which doesn't look like it's right because \r\n`await api.query.system.events.at(await api.rpc.chain.getBlockHash(824870))` \r\ndoesn't return events that should be emitted on new nession start. Whereas\r\n`await api.query.system.events.at(await api.rpc.chain.getBlockHash(824956))` \r\ndoes return these events\r\n\r\nit looks like eraProgress returns same value as sessionProgress which is also wrong.\r\n\r\nhttps://polkascan.io/pre/kusama-cc2/event \r\n![Screen Shot 2019-11-26 at 01 57 40](https://user-images.githubusercontent.com/3409250/69590640-663c0a80-0ff0-11ea-940c-966209cb5aa7.png)\r\n\r\nhttps://github.com/polkadot-js/api/blob/4cea617b13efa9db9addb17f6c4e31e1df025246/packages/api-derive/src/session/info.ts#L63\r\n"},{"labels":[null,"api",null],"text":"We need a length - progress here https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/staking/info.ts#L54"},{"labels":[null,"api",null],"text":"Currently we ignore these, however some locks can still be used to pay for transfer fees"},{"labels":[null,"api",null],"text":"`subscribeNewHeads` only works when the node runtime provides the session module. If this is not the case (when using Aura consensus for example) the method throws an error that `api.query.session` is undefined. "},{"labels":[null,"api",null],"text":"We do cache on the RPC layer. However the derives are quite hairy and pull from a number of sources - this means that even when a derive is used, it is re-created. \r\n\r\nThis certainly has an impact on use. For instance with all inner derive functions in a memo, derives (warmed up) are close to instantaneous. Without, as per the status quo, they are not. (A good example would be staking.overview usage in the apps UI)\r\n\r\nInner memo has other issues when no memo cleanup is available. "},{"labels":[null,"api",null],"text":"Sum of freeBalance & bonded (first includes all locks)"},{"labels":[null,"api",null],"text":"https://github.com/paritytech/substrate/pull/3816\r\n\r\nSpecifically these moved from the balances module -\r\n\r\nhttps://github.com/paritytech/substrate/pull/3816/files#diff-32c053d1675d55642287f44823979cb4R243-R254"},{"labels":[null,"api",null],"text":"https://polkadot.js.org/api/substrate/constants.html#contracts\r\n\r\nvs\r\n\r\nhttps://github.com/polkadot-js/api/blob/master/packages/api-derive/src/contracts/fees.ts#L63"},{"labels":[null,"api",null],"text":"https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/imOnline/receivedHeartbeats.ts#L24\r\n\r\nHowever the `imOnline` query takes the . index, not the addres \r\n\r\n![image](https://user-images.githubusercontent.com/1424473/66158720-bddc7c00-e626-11e9-9277-9a1e6d41245b.png)\r\n\r\n- retrieve session index & keys\r\n- lookup keys in the array\r\n- then do the query based on index (not address)"},{"labels":[null,"api",null],"text":"Code TODO -\r\nhttps://github.com/polkadot-js/api/pull/1317/files#diff-42453350b90abd3faf65d39e023fdc4eR41\r\n\r\nRemoval -\r\nhttps://github.com/polkadot-js/api/pull/1317/files#diff-e4ae210f1f695bace5a518b3cc0b0762L1154"},{"labels":[null,"api",null],"text":"Current master, effectively block don't show up in the apps UI atm"},{"labels":[null,"api",null],"text":"https://github.com/polkadot-js/api/pull/1127/files#diff-04590085a4517b18636b47d104dfbaa2R110"},{"labels":[null,"api",null],"text":"Elections now uses chunking for approvals and voters (see: https://github.com/paritytech/substrate/blob/master/srml/elections/src/lib.rs#L243). It would be useful to have a set of derives that let the caller \"just get everything\" without worrying about the chunking. There is already an internal function that does this (https://github.com/paritytech/substrate/blob/master/srml/elections/src/lib.rs#L1047) but no way to access it via RPC.\r\n\r\nThe derive would also be useful if it converted ApprovalFlag to booleans, as seen here: https://github.com/paritytech/substrate/blob/master/srml/elections/src/lib.rs#L1030\r\n\r\nThanks!"},{"labels":[null,"api",null],"text":"As per https://github.com/polkadot-js/api/pull/1108/files#diff-a60854aee74a1ede6dc8edf6544d4240L705"},{"labels":[null,"api",null],"text":"E.g. here: https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/contracts/fees.ts#L47\r\n\r\nIt should not be BN, but the actual Codec type. derive is one of the rare places where we have typings, so let's make them correct.\r\n\r\ntests should also be updated (e.g expect.any(BN) -> expect.any(BalanceOf))"},{"labels":[null,"api",null],"text":""},{"labels":[null,"api",null],"text":"An issue appeared in `apps` and is related to `derive.staking.info`. Updates are not pushed through the props, so that the info don't update unless the page is reloaded.\r\n\r\nI've tracked down the issue and it happens since v0.82 https://github.com/polkadot-js/api/pull/987\r\n\r\nHow to reproduce:\r\n- navigate to staking>actions\r\n- change the reward destination\r\n- once the tx succeeds, the reward destination isn't updated\r\n- refresh the page or change tab and get back -> the destination is updated."},{"labels":[null,null,null,"api",null],"text":"https://github.com/paritytech/substrate/pull/2905\r\n\r\nAdditionally derive fees needs to cater for both 1.x and 2.x with feature detection"},{"labels":[null,"api",null,null],"text":"Since we removed CodecResult/SubscriptionResult, `api.derive.*` does not return Codec anymore, so we don't need StructAny and VectorAny. Vanilla objects and arrays will do the trick\r\n\r\n"},{"labels":[null,"api",null],"text":"As done here - https://github.com/polkadot-js/api/pull/909/files#diff-2c17a9848687821518cc295f7baa4d99R15"},{"labels":[null,null,"api",null],"text":"While working on the api-derive tests I noticed that the test setup in API could urgently need some attention. \r\nNow that we're more people working on it who don't necessarily know the whole code by heart (including external contributors) we should put more effort in making the tests more bulletproof and the setup more intuitive.\r\n\r\n**Suggested tasks:**\r\n- [x] Reorder and better categorize existing tests (https://github.com/polkadot-js/api/pull/1132)\r\n- [x] Have a central file where all local tests are imported to be able to toggle all tests that require a local dev node (`.skip`) (https://github.com/polkadot-js/api/pull/1117)\r\n- [x] Move all e2e tests to `./api` (see https://github.com/polkadot-js/api/issues/908#issuecomment-503513811) (https://github.com/polkadot-js/api/pull/1132)\r\n- [x] Have a setup that runs all tests with **ApiPromise** and **ApiRx** for both **Polkadot** (wss://poc3-rpc.polkadot.io/) and the latest **Substrate** master on a local machine (Added docker-compose file with all supported versions https://github.com/polkadot-js/api/pull/1100)\r\n- [ ] Replace console.logs in tests with actual [Jest methods](https://jestjs.io/docs/en/expect.html)\r\n- [ ] Try to bring up test coverage\r\n- [ ] Fix broken / outdated tests\r\n- [ ] Add some documentation for external contributors\r\n\r\n**Already existing tickets:**\r\n- [x] #329 Convert all tests to TypeScript \r\n- [ ] #868 Add tests for api-derive methods\r\n"},{"labels":[null,"api",null],"text":"Specifically -\r\n\r\n- democracy.votes - https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/democracy/votes.ts#L17\r\n- staking.controllers - https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/staking/controllers.ts#L14"},{"labels":[null,"api",null],"text":"I believe we should drop the actual nominator balances stuff completely, they are available now via the staking interfaces and doesn't need to be calculated. (Effectively this is basically almost ignore what is there in terms of balance retrieval and redo)\r\n\r\nOnce properly retrieved (including locked, available, free, reserved), can pull this into the UI and drop any recent calculations there.\r\n\r\ncc @Tbaut  - it could help if you drop some of the pointers from your travels in the last couple of days\r\ncc @kwingram25 - as discussed"},{"labels":[null,"api",null],"text":"None of the methods have any tests at the moment. they should gradually be added. "},{"labels":[null,null,"api",null],"text":"`HeaderExtended`  is a type only used by the `api-derive´ module so it shouldn't be part of the  typeRegistry"},{"labels":["api",null],"text":"confirmed broken:\r\n~~subscribeNewHead~~ Doesn't seem to appear broken anymore\r\n~~account.id lookups~~ Fixed by https://github.com/polkadot-js/api/pull/831/\r\n\r\n"},{"labels":["api",null,null],"text":"As part of HeaderExtended in derive - atm we only look at Seal, and since these are not being produced anymore, we are missing the block author indicator."},{"labels":["api",null,null],"text":""},{"labels":["api",null,null],"text":"Issue as title, \r\nTried to call `api.derive.staking.intentionsBalances()`, and got rejected.\r\nThe func works with `Alexander (Polkadot, hosted by Parity) Node`, \r\nAnd doesnt get the balance when with `Dried Danta (Substrate, hosted by Parity)`.\r\n\r\nGot the err as below when tried to call the api:\r\n\r\n```\r\nPromise {<pending>}__proto__: Promisecatch: ƒ catch()constructor: ƒ Promise()finally: ƒ finally()then: ƒ then()Symbol(Symbol.toStringTag): \"Promise\"__proto__: Object[[PromiseStatus]]: \"rejected\"[[PromiseValue]]: TypeError: api.query.balances.freeBalance is not a function\r\n    at SwitchMapSubscriber.pipe [as project]\r\n\r\n@polkadot/api-derive/balances/votingBalance.js:33 Uncaught (in promise) TypeError: api.query.balances.freeBalance is not a function\r\n    at SwitchMapSubscriber.pipe [as project] (.../node_modules/@polkadot/api-derive/balances/votingBalance.js:33)\r\n    at SwitchMapSubscriber._next (switchMap.ts:106)\r\n    at SwitchMapSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at RefCountSubscriber.Subscriber._next (Subscriber.ts:139)\r\n    at RefCountSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at ReplaySubject.Subject.next (Subject.ts:70)\r\n    at ReplaySubject.nextInfiniteTimeWindow (ReplaySubject.ts:46)\r\n    at ConnectableSubscriber.Subscriber._next (Subscriber.ts:139)\r\n    at ConnectableSubscriber.Subscriber.next (Subscriber.ts:99)\r\n    at DistinctUntilChangedSubscriber._next (distinctUntilChanged.ts:121)\r\n```\r\n"},{"labels":[null,"api",null],"text":"I can't find a way to add custom derives without forking this repo. It will be good if this is extensible.\r\n\r\nThe real issue I am having is that we have implemented a generic asset module using `StorageDoubleMap` which there are no metadata support (https://github.com/paritytech/substrate/issues/1715), so I want to implements the query manually. I can do it via rpc calls but can't find a good way to bind this with UI and everything seems very tacky to me."},{"labels":["api",null,null],"text":"https://github.com/polkadot-js/api/blob/master/packages/api-derive/src/democracy/referendumInfos.ts#L13\r\n\r\nThe current work-around is along the lines of https://github.com/polkadot-js/apps/blob/master/packages/app-democracy/src/Referendums.tsx#L45-L52\r\n\r\nBut it doesn't quite make sense to have to do this everywhere in multiple apps when derive should have nicely-packaged information. This index is required to (a) get any votes, (b) make a vote, so very relevant to acting on the information presented.\r\n\r\ncc @jnaviask"},{"labels":[null,"api",null,null],"text":"Currently these are not included in the generated documentation, but should be.\r\n\r\n(Related to https://github.com/polkadot-js/api/issues/589 where we add some actual sample of use)"},{"labels":[null,"api",null,null],"text":"Currently the query interfaces allows for a `null` return, i.e. https://github.com/polkadot-js/api/blob/master/packages/api/src/promise/types.ts#L33 & https://github.com/polkadot-js/api/blob/master/packages/api/src/rx/types.ts#L16 - where the return is `Codec | null | undefined`\r\n\r\nHowever, since the introduction of defaults, `null` and `undefined` are never returned anymore, see https://github.com/polkadot-js/api/blob/master/packages/rpc-core/src/index.ts#L213\r\n\r\nCleanups required -\r\n\r\n- interfaces as detailed above\r\n- api-derive has all the `value || new Something(...)` overrides"},{"labels":["api",null,null],"text":"Needs https://github.com/polkadot-js/api/issues/559 (to allow derive on api/promise)"},{"labels":["api",null,null],"text":"- Once https://github.com/paritytech/substrate/pull/1404 is available\r\n- move the account <-> id mappings into api.derive.indices\r\n- fallback to balances (for now) when indices not available (do check against endpoints for calls, detect which version to use)"}]