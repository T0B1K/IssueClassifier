[{"classified_as": "enhancement", "text": "I'm trying to import a resource like this:\r\n\r\nterraform import module.mymodule.mysubmodule.google_kms_crypto_key.crypto_key[\"ssh-host-key\"] \"projects/mycompany/locations/global/keyRings/mykeyring/cryptoKeys/ssh-host-key\"\r\n\r\nThis fails because \"ssh-host-key\" does not exist (it's a for_each resource). But I can't create it because it already exists. So I'm a bit stuck....\r\n\r\nWhen running the above command I get this error:\r\nzsh: no matches found: module.mymodule.mysubmodule.google_kms_crypto_key.crypto_key[ssh-host-key]"}, {"classified_as": "enhancement", "text": "If a resource needs to have create_before_destroy in order to be properly destroyed, but it was not originally configured with this option, there is no way to easily add this option before destroying the resource. \r\n\r\nCurrently the only way to store a new state for the resource is to trigger an update. However, if the resource does not have any attributes which can be trivially updated, then it becomes more difficult to destroy the resource with the correct ordering.\r\n\r\nIt's likely that the attribute can be added to the state during refresh, in the same manner that was done for stored dependencies. "}, {"classified_as": "enhancement", "text": "https://registry.terraform.io/ website is showing a blank page. It seems that something is wrong with loaded assets.\r\n\r\n![image](https://user-images.githubusercontent.com/5130614/89498797-9f578c00-d7c7-11ea-8ec0-af8df437f8ed.png)\r\n"}, {"classified_as": "enhancement", "text": "Resources with large, deeply nested schemas can cause blocktoattr.ExpandedVariables to take a relatively large amount of time to execute.\r\n\r\nFor example, the aws_wafv2_web_acl which has a combined total of 2878 blocks at the moment, takes many seconds to process the potential references from the configuration.\r\n\r\nThere are 2 pieces that may need to be optimized here:\r\n\r\n - The blocktoattr.ExpandedVariables calls schema.DecoderSpec() for each block as it recurses through the schema, but schema.DecoderSpec() is also recursive and re-evaluates each child block even though the result is only used for the current level of recursion.\r\n\r\n - The schema.DecoderSpec() call itself is relatively slow, taking ~1s for the top-level call on aws_wafv2_web_acl with my test machine. "}]