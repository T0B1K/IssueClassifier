[{"classified_as": "bug", "text": "<!--\r\nHello \ud83d\udc4b Thank you for submitting a feature request.\r\n\r\nWe are using ProductBoard to manage our roadmap and feature requests.\r\n\r\nCan you please submit your feature request here: https://portal.productboard.com/strapi\r\n-->\r\n\r\n- [x] **I have created my request on the Product Board before I submitted this issue**\r\n- [x] **I have looked at all the other requests on the Product Board before I submitted this issue**\r\n\r\n**Please describe your feature request:**\r\n\r\nIf you want to extend the function, you will create own plugin. strapi provides some shared helper component which you can use for building UI of plugin. I think it's better to use those components as much as possible to make components can provide same experience.\r\nCurrently we don't have style guide of strapi-helper-plugin, so it's hard to use those components. If there is style guide, developers can easily find component which developer wants."}, {"classified_as": "bug", "text": "Is there a convenient way to clean HTTP cache and application data like service workers, cookies, etc.? I couldn't find anything related in the docs."}, {"classified_as": "bug", "text": "**Describe the bug** \r\n\r\nThe strapi-plugin-cloudinary saves complete URLs to the database for images, only the  'Public_ID' portion of the URL should be saved. This allows for Cloudinary to apply transformations and execute other manipulations to the image.\r\n\r\n**Steps to reproduce the behavior**\r\n\r\nInstall and configure the strapi-plugin-cloudinary\r\nCreate a new Content-Type with a Media field for images.\r\nSave an image to the Content Type\r\nCheck DB and see complete URL.\r\n\r\n**Expected behavior** \r\n \r\n\r\nRather than the photo.url being a hardcoded value, the databases stores the public_id. \r\n\r\nThe \"issue\" with this approach is that photo.url is now a hardcoded value, which means that there's no easy way of applying transformations/optimizations to the image itself.\r\n\r\nCloudinary allows you to, for example, generate a 250x250 image, by appending the URL (adding w_250,h_250). At the moment, the only thing that I could do is to read this data from the database, split('/') the Cloudinary URL add the transformations options to it, and then do a join('/').\r\n\r\nI'd love to see a feature where the database stores the public_id of a Cloudinary image which is yvyt9omqoqe6aj3wkeix.jpgin the code snippet below and then use the Cloudinary SDK to generate transformation URLs, such as: cloudinary.url(public_id, { width: 250, height: 250, effect: 'cartoonify' });\r\n\r\n**Code snippets** \r\n\r\nThe below returned object shows the photo.url being a complete URL.\r\n\r\n\r\n{\r\n  \"city\": \"London\",\r\n  \"country\": \"United Kingdom\",\r\n  \"description\": \"Noisy, vibrant and truly multicultural, London is a megalopolis of people, ideas and frenetic energy. The capital and largest city of both England and of the United Kingdom, it is also the largest city in Western Europe and the European Union. Most residents of Greater London are very proud of their capital, the multiculturalism of the city, and their membership of the European Union, despite 52% of the UK population as a whole who voted in a recent referendum choosing to leave the EU. It is unclear what the outcome of the referendum will be on London.\\n\\nSituated on the River Thames in South-East England, Greater London has an official population of a little over 8 million. However, London's urban area stretched to 9,787,426 in 2011, while the figure of 14 million for the city's wider metropolitan area more accurately reflects its size and importance. Considered one of the world's leading \\\"global cities\\\", London remains an international capital of culture, music, education, fashion, politics, finance and trade.\",\r\n  \"_id\": \"5c877ba28dde70b9973e6223\",\r\n  \"createdAt\": \"2019-03-12T09:28:02.260Z\",\r\n  \"updatedAt\": \"2019-03-12T14:56:17.796Z\",\r\n  \"__v\": 0,\r\n  \"id\": \"5c877ba28dde70b9973e6223\",\r\n  \"photo\": {\r\n    \"_id\": \"5c87c89d503362c3a9834f11\",\r\n    \"name\": \"jaanus-jagomagi-393163-unsplash.jpg\",\r\n    \"sha256\": \"fHZuIgFCYxjMR_ygpWcjGQqApL1muzJZWliilFMTiUA\",\r\n    \"hash\": \"e15343b49dca41719b73fefff34ada7c\",\r\n    \"ext\": \".jpg\",\r\n    \"mime\": \"image/jpeg\",\r\n    \"size\": \"3992.02\",\r\n    \"public_id\": \"yvyt9omqoqe6aj3wkeix\",\r\n    \"url\": \"https://res.cloudinary.com/tamas-demo/image/upload/v1552402598/yvyt9omqoqe6aj3wkeix.jpg\",\r\n    \"provider\": \"cloudinary\",\r\n    \"related\": [\r\n    \"5c877ba28dde70b9973e6223\"\r\n    ],\r\n    \"createdAt\": \"2019-03-12T14:56:29.543Z\",\r\n    \"updatedAt\": \"2019-03-12T14:56:29.573Z\",\r\n    \"__v\": 0,\r\n    \"id\": \"5c87c89d503362c3a9834f11\"\r\n  }\r\n}\r\n\r\n\r\n\r\n**System**\r\n\r\nNode.js version:10.x. (same behaviour on v12.x)\r\nnpm version: Latest\r\nStrapi version: 3.0.0-beta.7\r\nDatabase: MongoDB (v3)\r\nOperating system: Mac\r\n"}, {"classified_as": "bug", "text": "**Informations**\r\n- **Node.js version**: v11.6\r\n- **NPM version**: v6.5\r\n- **Strapi version**: Alpha 25.2 (the problem is in strapi-provider-email-amazon-ses)\r\n- **Database**: MongoDB 3.6.3\r\n- **Operating system**: Amazon Linux AMI release 2017.09\r\n\r\n**What is the current behavior?**\r\nWhen setting up Amazon SES you haven't the possibility to select AWS region and it defaults to US East. If this is your case it will work, but if not it fails with an error 400 with an incorrect error message \"auth.form.error.email.invalid\"\r\n\r\n**Steps to reproduce the problem**\r\nJust install strapi ses plugin and configure it with an AWS account which doesn't belong to us-east-2\r\n\r\n**Suggested solutions**\r\nAdding a line in strapi-provider-email-amazon-ses/lib/index.js fixes the problem.\r\n   \r\n var client = nodeSES.createClient({\r\n      key: config.amazon_ses_api_key,\r\n      secret: config.amazon_ses_secret,\r\n      amazon: \"https://email.eu-west-1.amazonaws.com\"\r\n});\r\n\r\nThe \"amazon\" field should depend on a variable selectable from the config page of the email plugin\r\n"}, {"classified_as": "bug", "text": "Question: How do I get puppeteer to download a file or make additional http requests and save the response?"}, {"classified_as": "bug", "text": "I love the addition of $x to query for xpath easily. In my code I've also added a waitForXpath function that roughly mirrors the waitForSelector method.\r\n\r\nhere's the snippet:\r\n\r\nexport const waitForXpath = async (context, xpath) => {\r\n  const inputGetter = function (path) {\r\n    return document.evaluate(path, document, null, XPathResult.ANY_TYPE, null).iterateNext();\r\n  };\r\n  const jsHandle = await context.waitForFunction(inputGetter, { polling: 50 }, xpath);\r\n  return jsHandle.asElement();\r\n};\r\n\r\n\r\nthis is much a bit simpler than the full waitForSelector, but a start.\r\n\r\nI'd like to not have to write this function myself!\r\n\r\nAny chance we could get a waitForXpath added to puppeteer? and maybe even detect xpath strings so I can just write page.waitFor(\"//p[normalize-space(.)='hello world']\")"}, {"classified_as": "api", "text": "Since the new upgrade check (#6385) we're getting a significant flood of upgrade requests. The problem is that some clients are stuck in restart loops, for various reasons, and hammer the upgrade server. We can of course offload this in various ways (CDNs and whatnot) but it still seems like an oversight that we should handle better...\r\n\r\nServer side rate limiting at the HTTPS level isn't enormously useful as the main cost is in the TLS handshake to begin with."}, {"classified_as": "api", "text": "There should be a way to specify both API basePath and SwaggerResource basePath separately.\n\nWe should be able to have a RESTful resource at basePath: resource_v1/api\n...and SwaggerResources at basePath: resource_v1/api-docs\n\n...without getting in each others' way...\n\nThis allows for creating an api-docs.json file by hand which lies on a separate path from the RESTful resources that it describes.\n"}, {"classified_as": "api", "text": "We send local discovery packets on all compatible local interfaces, and can receive announcements from the same device on multiple interfaces as well. However for each received response we construct an address list based on the addresses in that announcement packet plus and the apparent source address, and then set that as the cache entry for the device in question. This means that later announcements override earlier ones, and we'll only ever see the latest announced address (highest number interface, probably).\r\n\r\nWe should keep all received addresses, or keep a separate cache per source address, or something."}, {"classified_as": "bug", "text": "https://github.com/strapi/strapi/blob/8d0c6848ba421680570e974e5d8606314735de3e/packages/strapi-generate-new/lib/utils/db-client-dependencies.js#L19\r\n\r\nhttps://github.com/strapi/strapi/blob/97922f99ae858e1e3f4f792bb8d6a829adb82649/packages/strapi-connector-bookshelf/package.json#L29"}, {"classified_as": "api", "text": "Since IE11 doesn't support startsWith function, we could add something like that to define it.\r\n\r\n\r\n\r\nif (!String.prototype.startsWith) {\r\n  String.prototype.startsWith = function(searchString, position) {\r\n    position = position || 0;\r\n    return this.indexOf(searchString, position) === position;\r\n  };\r\n}\r\n"}, {"classified_as": "bug", "text": "It would be convenient if page.tracing.stop() returned Promise<Buffer> so users could act ton the trace JSON without saving a file to disk. This would also be consistent with the screenshot API.\r\n"}, {"classified_as": "bug", "text": "<!--\r\nHello \ud83d\udc4b Thank you for submitting an issue.\r\n\r\nBefore you start, please make sure your issue is understandable and reproducible.\r\nTo make your issue readable make sure you use valid Markdown syntax.\r\n\r\nhttps://guides.github.com/features/mastering-markdown/\r\n-->\r\n\r\n**Describe the bug**\r\nIf you try to override the count callback in the controller as described [in the documentation](https://strapi.io/documentation/3.0.0-beta.x/concepts/controllers.html#core-controllers), the callback gets called fine via REST but will not get called via GraphQL. Unless you override the GraphQL Aggregator resolver to call the controller (see additional info). I'm thinking this caused by [this](https://github.com/strapi/strapi/blob/master/packages/strapi-plugin-graphql/services/Aggregator.js#L356)\r\n\r\n**Steps to reproduce the behavior**\r\n1. Override count callback in the controller\r\njs\r\nmodule.exports = {\r\n    count(ctx) {\r\n        console.log(\"Ad controller: count\");\r\n        if (ctx.query._q) {\r\n            return strapi.services.ad.countSearch(ctx.query);\r\n        }\r\n        return strapi.services.ad.count(ctx.query);\r\n    },\r\n};\r\n\r\n2. Test the controller via REST [http://localhost:1337/ads/count](http://localhost:1337/ads/count)\r\n3. Test the controller via GraphQL\r\ngraphql\r\nquery {\r\n  adsConnection {\r\n    aggregate {\r\n      count\r\n    }\r\n  }\r\n}\r\n\r\n4. See the log\r\n\r\n**Expected behavior**\r\ncount callback should still be called via GraphQL.\r\n\r\n**Screenshots**\r\nLog via REST\r\n![image](https://user-images.githubusercontent.com/32438205/74593674-53215f80-5060-11ea-8089-881db23b0b8e.png)\r\nLog via GraphQL\r\n![image](https://user-images.githubusercontent.com/32438205/74593688-74824b80-5060-11ea-95b1-5439ef5a9f4e.png)\r\n\r\n**Additional info**\r\nHow do I manually override GraphQL Aggregator resolver:\r\njs\r\nmodule.exports = {\r\n  resolver: {\r\n    AdAggregator: {\r\n      count(args) {\r\n        return strapi.controllers.ad.count({\r\n          query: args.where || {}\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n**System**\r\n- Node.js version: v10.16.0\r\n- Yarn version: 1.21.1\r\n- Strapi version:  Strapi v3.0.0-beta.18.7\r\n- Database: MongoDB\r\n- Operating system: Windows 10\r\n"}, {"classified_as": "api", "text": "This project needs a robust testing framework\n"}, {"classified_as": "api", "text": "Since #6336 there's an issue where metadata gets doubled if a recalculation is deemed necessary. The reason is that we will have loaded the existing metadata, then do a recalc by adding all files without clearing it first."}, {"classified_as": "api", "text": "Look into this plugin, per #147 \n"}, {"classified_as": "api", "text": "I want to use a / character in the tag name when grouping resources but this breaks the shebang stuff.\n\nFor example if I have a tag named /login to group all resources related to login I get an url like: http://....../apidocs/#!//login/login_profile_get which does not automatically expand.\n"}, {"classified_as": "bug", "text": "<!--\r\n1. Do not delete this template or the issue will be closed\r\n2. Ensure you're using the latest version of Directus\r\n3. Post to the correct repo:\r\n    App:  https://github.com/directus/app/issues\r\n    API:  https://github.com/directus/api/issues (YOU ARE HERE)\r\n    Docs: https://github.com/directus/docs/issues\r\n-->\r\n\r\n# Feature Request\r\n\r\nHello! I would like to request a way to insert into a collection that has a lot of M2O relationships.\r\n\r\n## What problem does this feature solve?\r\n\r\nThis feature would be great for the instances when you have to insert/post a lot of data in the database.\r\nMy case is that I have an excel file which required a complex data model(see the screenshot below) and the client would like to have a way of importing the data from the excel to the database without having to insert it manually.\r\n\r\n## How do you think this should be implemented?\r\n\r\nMaybe it would be a good idea to have this as a paid separate module that only requires the parameters of the data separated by a comma for the specific collections and it inserts them as the VALUES. \r\nSomething like:\r\n\r\nCollection1 params\r\nDependent m2o Collection2 params\r\n\r\n\r\n## Would you be willing to work on this?\r\n\r\nIf I will manage to build this on my own, I'd be more than happy to provide it.\r\n\r\nI hope I didn't sound too stupid. \r\n\r\n![image](https://user-images.githubusercontent.com/35663982/64023690-2b355280-cb39-11e9-8ecb-0b248a2b7205.png)\r\n"}, {"classified_as": "api", "text": "Is it possible to modify the way to generate objectId for custom class instead of the auto generate 10 pseudo random 10 character string? Is it possible to have more than 10 characters objectId? thanks"}]